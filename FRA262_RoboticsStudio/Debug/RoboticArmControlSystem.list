
RoboticArmControlSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa04  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800aba0  0800aba0  0001aba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afe0  0800afe0  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800afe0  0800afe0  0001afe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afe8  0800afe8  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afe8  0800afe8  0001afe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afec  0800afec  0001afec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800aff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bfc  200002d4  0800b2c4  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ed0  0800b2c4  00020ed0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012103  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002256  00000000  00000000  00032407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00034660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00035520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017834  00000000  00000000  00036328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bb1  00000000  00000000  0004db5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab88  00000000  00000000  0005e70d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9295  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004620  00000000  00000000  000f92e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002d4 	.word	0x200002d4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ab84 	.word	0x0800ab84

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002d8 	.word	0x200002d8
 80001d4:	0800ab84 	.word	0x0800ab84

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <modbus_1t5_Timeout+0x1c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	751a      	strb	r2, [r3, #20]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	200002f0 	.word	0x200002f0

08000ec4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <modbus_3t5_Timeout+0x1c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	755a      	strb	r2, [r3, #21]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	200002f0 	.word	0x200002f0

08000ee4 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000efe:	1c59      	adds	r1, r3, #1
 8000f00:	b289      	uxth	r1, r1
 8000f02:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000f06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f0a:	d210      	bcs.n	8000f2e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68d8      	ldr	r0, [r3, #12]
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f1e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f22:	4413      	add	r3, r2
 8000f24:	3302      	adds	r3, #2
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f006 fcfb 	bl	8007924 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200002f0 	.word	0x200002f0

08000f48 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f52:	4a24      	ldr	r2, [pc, #144]	; (8000fe4 <Modbus_init+0x9c>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <Modbus_init+0x9c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <Modbus_init+0x9c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <Modbus_init+0xa0>)
 8000f68:	2114      	movs	r1, #20
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f005 fe8c 	bl	8006c88 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <Modbus_init+0x9c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <Modbus_init+0xa4>)
 8000f78:	210e      	movs	r1, #14
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f005 fe84 	bl	8006c88 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <Modbus_init+0x9c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <Modbus_init+0xa8>)
 8000f88:	2103      	movs	r1, #3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 fc22 	bl	80077d4 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <Modbus_init+0x9c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68d8      	ldr	r0, [r3, #12]
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <Modbus_init+0x9c>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <Modbus_init+0x9c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000fa2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	2201      	movs	r2, #1
 8000fac:	4619      	mov	r1, r3
 8000fae:	f006 fcb9 	bl	8007924 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <Modbus_init+0x9c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d10c      	bne.n	8000fdc <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <Modbus_init+0x9c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f004 ff11 	bl	8005df0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <Modbus_init+0x9c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f005 f946 	bl	8006268 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200002f0 	.word	0x200002f0
 8000fe8:	08000ea5 	.word	0x08000ea5
 8000fec:	08000ec5 	.word	0x08000ec5
 8000ff0:	08000ee5 	.word	0x08000ee5

08000ff4 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001000:	23ff      	movs	r3, #255	; 0xff
 8001002:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001004:	23ff      	movs	r3, #255	; 0xff
 8001006:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001008:	e013      	b.n	8001032 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	4053      	eors	r3, r2
 8001016:	b2db      	uxtb	r3, r3
 8001018:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <CRC16+0x64>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4413      	add	r3, r2
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	4053      	eors	r3, r2
 8001026:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001028:	4a0c      	ldr	r2, [pc, #48]	; (800105c <CRC16+0x68>)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001032:	883b      	ldrh	r3, [r7, #0]
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	803a      	strh	r2, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e6      	bne.n	800100a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20000100 	.word	0x20000100
 800105c:	20000000 	.word	0x20000000

08001060 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001066:	4b81      	ldr	r3, [pc, #516]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	7e1b      	ldrb	r3, [r3, #24]
 800106c:	3b01      	subs	r3, #1
 800106e:	2b03      	cmp	r3, #3
 8001070:	d80a      	bhi.n	8001088 <Modbus_Protocal_Worker+0x28>
 8001072:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <Modbus_Protocal_Worker+0x18>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	08001093 	.word	0x08001093
 800107c:	08001233 	.word	0x08001233
 8001080:	0800111f 	.word	0x0800111f
 8001084:	08001145 	.word	0x08001145
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001088:	4b78      	ldr	r3, [pc, #480]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2201      	movs	r2, #1
 800108e:	761a      	strb	r2, [r3, #24]
		break;
 8001090:	e0e8      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001092:	4b76      	ldr	r3, [pc, #472]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800109e:	f000 f9dd 	bl	800145c <Modbus_Emission>
 80010a2:	e01c      	b.n	80010de <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80010a4:	4b71      	ldr	r3, [pc, #452]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	7d9b      	ldrb	r3, [r3, #22]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d017      	beq.n	80010de <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80010ae:	4b6f      	ldr	r3, [pc, #444]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80010b6:	4b6d      	ldr	r3, [pc, #436]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80010be:	4b6b      	ldr	r3, [pc, #428]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b68      	ldr	r3, [pc, #416]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 0201 	orr.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010d6:	4b65      	ldr	r3, [pc, #404]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2203      	movs	r2, #3
 80010dc:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010de:	4b63      	ldr	r3, [pc, #396]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b20      	cmp	r3, #32
 80010ec:	f040 80b3 	bne.w	8001256 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80010f0:	4b5e      	ldr	r3, [pc, #376]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010fa:	4b5c      	ldr	r3, [pc, #368]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68d8      	ldr	r0, [r3, #12]
 8001100:	4b5a      	ldr	r3, [pc, #360]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b59      	ldr	r3, [pc, #356]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800110c:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001110:	4413      	add	r3, r2
 8001112:	3302      	adds	r3, #2
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	f006 fc04 	bl	8007924 <HAL_UART_Receive_IT>
		}
		break;
 800111c:	e09b      	b.n	8001256 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800111e:	4b53      	ldr	r3, [pc, #332]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	7d1b      	ldrb	r3, [r3, #20]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 8098 	beq.w	800125a <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800112a:	4b50      	ldr	r3, [pc, #320]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001132:	4b4e      	ldr	r3, [pc, #312]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	22fe      	movs	r2, #254	; 0xfe
 8001138:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800113a:	4b4c      	ldr	r3, [pc, #304]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2204      	movs	r2, #4
 8001140:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001142:	e08a      	b.n	800125a <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001144:	4b49      	ldr	r3, [pc, #292]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	7d9b      	ldrb	r3, [r3, #22]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d009      	beq.n	8001162 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d103      	bne.n	8001162 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800115a:	4b44      	ldr	r3, [pc, #272]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	22ff      	movs	r2, #255	; 0xff
 8001160:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001162:	4b42      	ldr	r3, [pc, #264]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800116a:	f113 0f02 	cmn.w	r3, #2
 800116e:	d150      	bne.n	8001212 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001170:	4b3e      	ldr	r3, [pc, #248]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2200      	movs	r2, #0
 8001176:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001178:	4b3c      	ldr	r3, [pc, #240]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001180:	4b3a      	ldr	r3, [pc, #232]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001188:	3b02      	subs	r3, #2
 800118a:	4619      	mov	r1, r3
 800118c:	4610      	mov	r0, r2
 800118e:	f7ff ff31 	bl	8000ff4 <CRC16>
 8001192:	4603      	mov	r3, r0
 8001194:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001196:	793a      	ldrb	r2, [r7, #4]
 8001198:	4b34      	ldr	r3, [pc, #208]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800119a:	6819      	ldr	r1, [r3, #0]
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011a4:	3b02      	subs	r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d10c      	bne.n	80011ca <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80011b0:	797a      	ldrb	r2, [r7, #5]
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011b4:	6819      	ldr	r1, [r3, #0]
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011be:	3b01      	subs	r3, #1
 80011c0:	440b      	add	r3, r1
 80011c2:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d004      	beq.n	80011d4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	22ff      	movs	r2, #255	; 0xff
 80011d0:	75da      	strb	r2, [r3, #23]
				break;
 80011d2:	e047      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d113      	bne.n	800120e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80011f6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001200:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001202:	461a      	mov	r2, r3
 8001204:	f007 fd50 	bl	8008ca8 <memcpy>

			//execute command
			Modbus_frame_response();
 8001208:	f000 f910 	bl	800142c <Modbus_frame_response>
 800120c:	e001      	b.n	8001212 <Modbus_Protocal_Worker+0x1b2>
				break;
 800120e:	bf00      	nop
					}
		break;


	}
}
 8001210:	e028      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	7d5b      	ldrb	r3, [r3, #21]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2201      	movs	r2, #1
 8001222:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	4618      	mov	r0, r3
 800122c:	f006 fc28 	bl	8007a80 <HAL_UART_AbortReceive>
		break;
 8001230:	e015      	b.n	800125e <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b20      	cmp	r3, #32
 8001240:	d10f      	bne.n	8001262 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	761a      	strb	r2, [r3, #24]
		break;
 8001254:	e005      	b.n	8001262 <Modbus_Protocal_Worker+0x202>
		break;
 8001256:	bf00      	nop
 8001258:	e004      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 800125a:	bf00      	nop
 800125c:	e002      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 800125e:	bf00      	nop
 8001260:	e000      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 8001262:	bf00      	nop
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200002f0 	.word	0x200002f0

08001270 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <modbusWrite1Register+0x80>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	7e9b      	ldrb	r3, [r3, #26]
 800127c:	b29b      	uxth	r3, r3
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <modbusWrite1Register+0x80>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7edb      	ldrb	r3, [r3, #27]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4413      	add	r3, r2
 800128c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800128e:	88fa      	ldrh	r2, [r7, #6]
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <modbusWrite1Register+0x80>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	429a      	cmp	r2, r3
 8001298:	d903      	bls.n	80012a2 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800129a:	2002      	movs	r0, #2
 800129c:	f000 f8a4 	bl	80013e8 <ModbusErrorReply>
			 return;
 80012a0:	e023      	b.n	80012ea <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <modbusWrite1Register+0x80>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <modbusWrite1Register+0x80>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	440b      	add	r3, r1
 80012b2:	7f12      	ldrb	r2, [r2, #28]
 80012b4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <modbusWrite1Register+0x80>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <modbusWrite1Register+0x80>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6859      	ldr	r1, [r3, #4]
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	440b      	add	r3, r1
 80012c6:	7f52      	ldrb	r2, [r2, #29]
 80012c8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <modbusWrite1Register+0x80>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <modbusWrite1Register+0x80>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 80012d8:	2208      	movs	r2, #8
 80012da:	4619      	mov	r1, r3
 80012dc:	f007 fce4 	bl	8008ca8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <modbusWrite1Register+0x80>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2205      	movs	r2, #5
 80012e6:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200002f0 	.word	0x200002f0

080012f4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <modbusRead1Register+0xf0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	7f1b      	ldrb	r3, [r3, #28]
 8001300:	b29b      	uxth	r3, r3
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <modbusRead1Register+0xf0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	7f5b      	ldrb	r3, [r3, #29]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <modbusRead1Register+0xf0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	7e9b      	ldrb	r3, [r3, #26]
 8001318:	b29b      	uxth	r3, r3
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <modbusRead1Register+0xf0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	7edb      	ldrb	r3, [r3, #27]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4413      	add	r3, r2
 8001328:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <modbusRead1Register+0x42>
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	2b7d      	cmp	r3, #125	; 0x7d
 8001334:	d903      	bls.n	800133e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001336:	2003      	movs	r0, #3
 8001338:	f000 f856 	bl	80013e8 <ModbusErrorReply>
		 return;
 800133c:	e04e      	b.n	80013dc <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800133e:	88ba      	ldrh	r2, [r7, #4]
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <modbusRead1Register+0xf0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	429a      	cmp	r2, r3
 8001348:	d808      	bhi.n	800135c <modbusRead1Register+0x68>
 800134a:	88ba      	ldrh	r2, [r7, #4]
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	4413      	add	r3, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <modbusRead1Register+0xf0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	429a      	cmp	r2, r3
 800135a:	d903      	bls.n	8001364 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800135c:	2002      	movs	r0, #2
 800135e:	f000 f843 	bl	80013e8 <ModbusErrorReply>
		 return;
 8001362:	e03b      	b.n	80013dc <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <modbusRead1Register+0xf0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2203      	movs	r2, #3
 800136a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <modbusRead1Register+0xf0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	0052      	lsls	r2, r2, #1
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800137e:	2400      	movs	r4, #0
 8001380:	e020      	b.n	80013c4 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <modbusRead1Register+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	4423      	add	r3, r4
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	18d1      	adds	r1, r2, r3
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <modbusRead1Register+0xf0>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	1c63      	adds	r3, r4, #1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	7849      	ldrb	r1, [r1, #1]
 800139a:	4413      	add	r3, r2
 800139c:	460a      	mov	r2, r1
 800139e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <modbusRead1Register+0xf0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	4423      	add	r3, r4
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	18d1      	adds	r1, r2, r3
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <modbusRead1Register+0xf0>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	0063      	lsls	r3, r4, #1
 80013b6:	3303      	adds	r3, #3
 80013b8:	7809      	ldrb	r1, [r1, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	460a      	mov	r2, r1
 80013be:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80013c2:	3401      	adds	r4, #1
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	429c      	cmp	r4, r3
 80013c8:	dbdb      	blt.n	8001382 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <modbusRead1Register+0xf0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0052      	lsls	r2, r2, #1
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200002f0 	.word	0x200002f0

080013e8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <ModbusErrorReply+0x40>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	7e5a      	ldrb	r2, [r3, #25]
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <ModbusErrorReply+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <ModbusErrorReply+0x40>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <ModbusErrorReply+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2202      	movs	r2, #2
 8001416:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	200002f0 	.word	0x200002f0

0800142c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <Modbus_frame_response+0x2c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	7e5b      	ldrb	r3, [r3, #25]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d004      	beq.n	8001444 <Modbus_frame_response+0x18>
 800143a:	2b06      	cmp	r3, #6
 800143c:	d105      	bne.n	800144a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800143e:	f7ff ff17 	bl	8001270 <modbusWrite1Register>
		break;
 8001442:	e006      	b.n	8001452 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001444:	f7ff ff56 	bl	80012f4 <modbusRead1Register>
		break;
 8001448:	e003      	b.n	8001452 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800144a:	2001      	movs	r0, #1
 800144c:	f7ff ffcc 	bl	80013e8 <ModbusErrorReply>
		break;
 8001450:	bf00      	nop

	}
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200002f0 	.word	0x200002f0

0800145c <Modbus_Emission>:

void Modbus_Emission()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <Modbus_Emission+0xfc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b20      	cmp	r3, #32
 8001470:	d15e      	bne.n	8001530 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <Modbus_Emission+0xfc>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <Modbus_Emission+0xfc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001480:	4b35      	ldr	r3, [pc, #212]	; (8001558 <Modbus_Emission+0xfc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001488:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <Modbus_Emission+0xfc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <Modbus_Emission+0xfc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800149a:	461a      	mov	r2, r3
 800149c:	f007 fc04 	bl	8008ca8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <Modbus_Emission+0xfc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <Modbus_Emission+0xfc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3203      	adds	r2, #3
 80014b0:	b292      	uxth	r2, r2
 80014b2:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <Modbus_Emission+0xfc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <Modbus_Emission+0xfc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014c6:	3b02      	subs	r3, #2
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f7ff fd92 	bl	8000ff4 <CRC16>
 80014d0:	4603      	mov	r3, r0
 80014d2:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <Modbus_Emission+0xfc>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <Modbus_Emission+0xfc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014e0:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80014e2:	7939      	ldrb	r1, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	460a      	mov	r2, r1
 80014e8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <Modbus_Emission+0xfc>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <Modbus_Emission+0xfc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014f8:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014fa:	7979      	ldrb	r1, [r7, #5]
 80014fc:	4413      	add	r3, r2
 80014fe:	460a      	mov	r2, r1
 8001500:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <Modbus_Emission+0xfc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b20      	cmp	r3, #32
 8001512:	d10d      	bne.n	8001530 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <Modbus_Emission+0xfc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <Modbus_Emission+0xfc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <Modbus_Emission+0xfc>)
 8001524:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001526:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800152a:	461a      	mov	r2, r3
 800152c:	f006 fa2a 	bl	8007984 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <Modbus_Emission+0xfc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <Modbus_Emission+0xfc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <Modbus_Emission+0xfc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <Modbus_Emission+0xfc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2202      	movs	r2, #2
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200002f0 	.word	0x200002f0

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001560:	f002 fb94 	bl	8003c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001564:	f000 f862 	bl	800162c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001568:	f000 fb50 	bl	8001c0c <MX_GPIO_Init>
  MX_DMA_Init();
 800156c:	f000 fb18 	bl	8001ba0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001570:	f000 faea 	bl	8001b48 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001574:	f000 f922 	bl	80017bc <MX_TIM1_Init>
  MX_TIM5_Init();
 8001578:	f000 fa3e 	bl	80019f8 <MX_TIM5_Init>
  MX_TIM2_Init();
 800157c:	f000 f9a2 	bl	80018c4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001580:	f000 f8bc 	bl	80016fc <MX_ADC1_Init>
  MX_TIM3_Init();
 8001584:	f000 f9ea 	bl	800195c <MX_TIM3_Init>
  MX_TIM11_Init();
 8001588:	f000 fa8a 	bl	8001aa0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800158c:	2104      	movs	r1, #4
 800158e:	481d      	ldr	r0, [pc, #116]	; (8001604 <main+0xa8>)
 8001590:	f004 ff84 	bl	800649c <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start(&htim1);
 8001594:	481c      	ldr	r0, [pc, #112]	; (8001608 <main+0xac>)
 8001596:	f004 fbd1 	bl	8005d3c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800159a:	2100      	movs	r1, #0
 800159c:	481a      	ldr	r0, [pc, #104]	; (8001608 <main+0xac>)
 800159e:	f004 fd4b 	bl	8006038 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 80015a2:	481a      	ldr	r0, [pc, #104]	; (800160c <main+0xb0>)
 80015a4:	f004 fc24 	bl	8005df0 <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, (uint16_t*) buffer, 20);
 80015a8:	2214      	movs	r2, #20
 80015aa:	4919      	ldr	r1, [pc, #100]	; (8001610 <main+0xb4>)
 80015ac:	4819      	ldr	r0, [pc, #100]	; (8001614 <main+0xb8>)
 80015ae:	f002 fc23 	bl	8003df8 <HAL_ADC_Start_DMA>

	hmodbus.huart = &huart2;
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <main+0xbc>)
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <main+0xc0>)
 80015b6:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <main+0xbc>)
 80015ba:	4a19      	ldr	r2, [pc, #100]	; (8001620 <main+0xc4>)
 80015bc:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80015be:	4b16      	ldr	r3, [pc, #88]	; (8001618 <main+0xbc>)
 80015c0:	2215      	movs	r2, #21
 80015c2:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70; // 70
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <main+0xbc>)
 80015c6:	2246      	movs	r2, #70	; 0x46
 80015c8:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80015ca:	4916      	ldr	r1, [pc, #88]	; (8001624 <main+0xc8>)
 80015cc:	4812      	ldr	r0, [pc, #72]	; (8001618 <main+0xbc>)
 80015ce:	f7ff fcbb 	bl	8000f48 <Modbus_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Modbus_Protocal_Worker();
 80015d2:	f7ff fd45 	bl	8001060 <Modbus_Protocal_Worker>
		static uint32_t timestamp = 0;
		handleEmergency();
 80015d6:	f002 f849 	bl	800366c <handleEmergency>
		if (HAL_GetTick() >= timestamp) {
 80015da:	f002 fbbd 	bl	8003d58 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <main+0xcc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d3f4      	bcc.n	80015d2 <main+0x76>
			timestamp = HAL_GetTick() + 100;
 80015e8:	f002 fbb6 	bl	8003d58 <HAL_GetTick>
 80015ec:	4603      	mov	r3, r0
 80015ee:	3364      	adds	r3, #100	; 0x64
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <main+0xcc>)
 80015f2:	6013      	str	r3, [r2, #0]
			registerFrame[0].U16 = 22881; // WRITE : Heartbeat Protocol
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <main+0xc8>)
 80015f6:	f645 1261 	movw	r2, #22881	; 0x5961
 80015fa:	801a      	strh	r2, [r3, #0]
			joyDisplayLED();
 80015fc:	f001 feb2 	bl	8003364 <joyDisplayLED>
	while (1) {
 8001600:	e7e7      	b.n	80015d2 <main+0x76>
 8001602:	bf00      	nop
 8001604:	200005b8 	.word	0x200005b8
 8001608:	2000039c 	.word	0x2000039c
 800160c:	20000450 	.word	0x20000450
 8001610:	20000d60 	.word	0x20000d60
 8001614:	200002f4 	.word	0x200002f4
 8001618:	200007f4 	.word	0x200007f4
 800161c:	20000720 	.word	0x20000720
 8001620:	2000066c 	.word	0x2000066c
 8001624:	20000ccc 	.word	0x20000ccc
 8001628:	20000ec8 	.word	0x20000ec8

0800162c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b094      	sub	sp, #80	; 0x50
 8001630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 0320 	add.w	r3, r7, #32
 8001636:	2230      	movs	r2, #48	; 0x30
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f007 fb42 	bl	8008cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <SystemClock_Config+0xc8>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	4a26      	ldr	r2, [pc, #152]	; (80016f4 <SystemClock_Config+0xc8>)
 800165a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165e:	6413      	str	r3, [r2, #64]	; 0x40
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <SystemClock_Config+0xc8>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <SystemClock_Config+0xcc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a20      	ldr	r2, [pc, #128]	; (80016f8 <SystemClock_Config+0xcc>)
 8001676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <SystemClock_Config+0xcc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001688:	2302      	movs	r3, #2
 800168a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800168c:	2301      	movs	r3, #1
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001690:	2310      	movs	r3, #16
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001694:	2302      	movs	r3, #2
 8001696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001698:	2300      	movs	r3, #0
 800169a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800169c:	2308      	movs	r3, #8
 800169e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80016a0:	2364      	movs	r3, #100	; 0x64
 80016a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016a8:	2304      	movs	r3, #4
 80016aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ac:	f107 0320 	add.w	r3, r7, #32
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 fe4f 	bl	8005354 <HAL_RCC_OscConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016bc:	f002 f80c 	bl	80036d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c0:	230f      	movs	r3, #15
 80016c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c4:	2302      	movs	r3, #2
 80016c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	2103      	movs	r1, #3
 80016dc:	4618      	mov	r0, r3
 80016de:	f004 f8b1 	bl	8005844 <HAL_RCC_ClockConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016e8:	f001 fff6 	bl	80036d8 <Error_Handler>
  }
}
 80016ec:	bf00      	nop
 80016ee:	3750      	adds	r7, #80	; 0x50
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40007000 	.word	0x40007000

080016fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001702:	463b      	mov	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800170e:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <MX_ADC1_Init+0xb4>)
 8001710:	4a28      	ldr	r2, [pc, #160]	; (80017b4 <MX_ADC1_Init+0xb8>)
 8001712:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001714:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <MX_ADC1_Init+0xb4>)
 8001716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800171a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800171c:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <MX_ADC1_Init+0xb4>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001722:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <MX_ADC1_Init+0xb4>)
 8001724:	2201      	movs	r2, #1
 8001726:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <MX_ADC1_Init+0xb4>)
 800172a:	2201      	movs	r2, #1
 800172c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <MX_ADC1_Init+0xb4>)
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001736:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <MX_ADC1_Init+0xb4>)
 8001738:	2200      	movs	r2, #0
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <MX_ADC1_Init+0xb4>)
 800173e:	4a1e      	ldr	r2, [pc, #120]	; (80017b8 <MX_ADC1_Init+0xbc>)
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <MX_ADC1_Init+0xb4>)
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <MX_ADC1_Init+0xb4>)
 800174a:	2202      	movs	r2, #2
 800174c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <MX_ADC1_Init+0xb4>)
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <MX_ADC1_Init+0xb4>)
 8001758:	2201      	movs	r2, #1
 800175a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800175c:	4814      	ldr	r0, [pc, #80]	; (80017b0 <MX_ADC1_Init+0xb4>)
 800175e:	f002 fb07 	bl	8003d70 <HAL_ADC_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001768:	f001 ffb6 	bl	80036d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800176c:	230d      	movs	r3, #13
 800176e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001770:	2301      	movs	r3, #1
 8001772:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001774:	2303      	movs	r3, #3
 8001776:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001778:	463b      	mov	r3, r7
 800177a:	4619      	mov	r1, r3
 800177c:	480c      	ldr	r0, [pc, #48]	; (80017b0 <MX_ADC1_Init+0xb4>)
 800177e:	f002 fc49 	bl	8004014 <HAL_ADC_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001788:	f001 ffa6 	bl	80036d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800178c:	230a      	movs	r3, #10
 800178e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001790:	2302      	movs	r3, #2
 8001792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001794:	463b      	mov	r3, r7
 8001796:	4619      	mov	r1, r3
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_ADC1_Init+0xb4>)
 800179a:	f002 fc3b 	bl	8004014 <HAL_ADC_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80017a4:	f001 ff98 	bl	80036d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200002f4 	.word	0x200002f4
 80017b4:	40012000 	.word	0x40012000
 80017b8:	0f000001 	.word	0x0f000001

080017bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b092      	sub	sp, #72	; 0x48
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	615a      	str	r2, [r3, #20]
 80017de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2220      	movs	r2, #32
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f007 fa6c 	bl	8008cc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017ec:	4b33      	ldr	r3, [pc, #204]	; (80018bc <MX_TIM1_Init+0x100>)
 80017ee:	4a34      	ldr	r2, [pc, #208]	; (80018c0 <MX_TIM1_Init+0x104>)
 80017f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 80017f2:	4b32      	ldr	r3, [pc, #200]	; (80018bc <MX_TIM1_Init+0x100>)
 80017f4:	2263      	movs	r2, #99	; 0x63
 80017f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f8:	4b30      	ldr	r3, [pc, #192]	; (80018bc <MX_TIM1_Init+0x100>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80017fe:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <MX_TIM1_Init+0x100>)
 8001800:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001804:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <MX_TIM1_Init+0x100>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800180c:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <MX_TIM1_Init+0x100>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <MX_TIM1_Init+0x100>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001818:	4828      	ldr	r0, [pc, #160]	; (80018bc <MX_TIM1_Init+0x100>)
 800181a:	f004 fbb1 	bl	8005f80 <HAL_TIM_PWM_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001824:	f001 ff58 	bl	80036d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001830:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001834:	4619      	mov	r1, r3
 8001836:	4821      	ldr	r0, [pc, #132]	; (80018bc <MX_TIM1_Init+0x100>)
 8001838:	f005 fe94 	bl	8007564 <HAL_TIMEx_MasterConfigSynchronization>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001842:	f001 ff49 	bl	80036d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001846:	2360      	movs	r3, #96	; 0x60
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800184e:	2300      	movs	r3, #0
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001852:	2300      	movs	r3, #0
 8001854:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001866:	2200      	movs	r2, #0
 8001868:	4619      	mov	r1, r3
 800186a:	4814      	ldr	r0, [pc, #80]	; (80018bc <MX_TIM1_Init+0x100>)
 800186c:	f005 f828 	bl	80068c0 <HAL_TIM_PWM_ConfigChannel>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001876:	f001 ff2f 	bl	80036d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800188e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001892:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4619      	mov	r1, r3
 800189c:	4807      	ldr	r0, [pc, #28]	; (80018bc <MX_TIM1_Init+0x100>)
 800189e:	f005 fecf 	bl	8007640 <HAL_TIMEx_ConfigBreakDeadTime>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80018a8:	f001 ff16 	bl	80036d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018ac:	4803      	ldr	r0, [pc, #12]	; (80018bc <MX_TIM1_Init+0x100>)
 80018ae:	f002 f88b 	bl	80039c8 <HAL_TIM_MspPostInit>

}
 80018b2:	bf00      	nop
 80018b4:	3748      	adds	r7, #72	; 0x48
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000039c 	.word	0x2000039c
 80018c0:	40010000 	.word	0x40010000

080018c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d8:	463b      	mov	r3, r7
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <MX_TIM2_Init+0x94>)
 80018e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <MX_TIM2_Init+0x94>)
 80018ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80018ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <MX_TIM2_Init+0x94>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <MX_TIM2_Init+0x94>)
 80018f8:	2209      	movs	r2, #9
 80018fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fc:	4b16      	ldr	r3, [pc, #88]	; (8001958 <MX_TIM2_Init+0x94>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <MX_TIM2_Init+0x94>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001908:	4813      	ldr	r0, [pc, #76]	; (8001958 <MX_TIM2_Init+0x94>)
 800190a:	f004 f9bb 	bl	8005c84 <HAL_TIM_Base_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001914:	f001 fee0 	bl	80036d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	4619      	mov	r1, r3
 8001924:	480c      	ldr	r0, [pc, #48]	; (8001958 <MX_TIM2_Init+0x94>)
 8001926:	f005 f88d 	bl	8006a44 <HAL_TIM_ConfigClockSource>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001930:	f001 fed2 	bl	80036d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001934:	2300      	movs	r3, #0
 8001936:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800193c:	463b      	mov	r3, r7
 800193e:	4619      	mov	r1, r3
 8001940:	4805      	ldr	r0, [pc, #20]	; (8001958 <MX_TIM2_Init+0x94>)
 8001942:	f005 fe0f 	bl	8007564 <HAL_TIMEx_MasterConfigSynchronization>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800194c:	f001 fec4 	bl	80036d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000450 	.word	0x20000450

0800195c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001962:	f107 0308 	add.w	r3, r7, #8
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001970:	463b      	mov	r3, r7
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <MX_TIM3_Init+0x94>)
 800197a:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <MX_TIM3_Init+0x98>)
 800197c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800197e:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <MX_TIM3_Init+0x94>)
 8001980:	2200      	movs	r2, #0
 8001982:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <MX_TIM3_Init+0x94>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800198a:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <MX_TIM3_Init+0x94>)
 800198c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001990:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001992:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <MX_TIM3_Init+0x94>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <MX_TIM3_Init+0x94>)
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800199e:	4814      	ldr	r0, [pc, #80]	; (80019f0 <MX_TIM3_Init+0x94>)
 80019a0:	f004 f970 	bl	8005c84 <HAL_TIM_Base_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80019aa:	f001 fe95 	bl	80036d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019b4:	f107 0308 	add.w	r3, r7, #8
 80019b8:	4619      	mov	r1, r3
 80019ba:	480d      	ldr	r0, [pc, #52]	; (80019f0 <MX_TIM3_Init+0x94>)
 80019bc:	f005 f842 	bl	8006a44 <HAL_TIM_ConfigClockSource>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80019c6:	f001 fe87 	bl	80036d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019d2:	463b      	mov	r3, r7
 80019d4:	4619      	mov	r1, r3
 80019d6:	4806      	ldr	r0, [pc, #24]	; (80019f0 <MX_TIM3_Init+0x94>)
 80019d8:	f005 fdc4 	bl	8007564 <HAL_TIMEx_MasterConfigSynchronization>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80019e2:	f001 fe79 	bl	80036d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000504 	.word	0x20000504
 80019f4:	40000400 	.word	0x40000400

080019f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08c      	sub	sp, #48	; 0x30
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	2224      	movs	r2, #36	; 0x24
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f007 f95c 	bl	8008cc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a14:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <MX_TIM5_Init+0xa0>)
 8001a16:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <MX_TIM5_Init+0xa4>)
 8001a18:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <MX_TIM5_Init+0xa0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_TIM5_Init+0xa0>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <MX_TIM5_Init+0xa0>)
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_TIM5_Init+0xa0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <MX_TIM5_Init+0xa0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a42:	2301      	movs	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a52:	2301      	movs	r3, #1
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	4619      	mov	r1, r3
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <MX_TIM5_Init+0xa0>)
 8001a66:	f004 fc65 	bl	8006334 <HAL_TIM_Encoder_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001a70:	f001 fe32 	bl	80036d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_TIM5_Init+0xa0>)
 8001a82:	f005 fd6f 	bl	8007564 <HAL_TIMEx_MasterConfigSynchronization>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001a8c:	f001 fe24 	bl	80036d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	3730      	adds	r7, #48	; 0x30
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200005b8 	.word	0x200005b8
 8001a9c:	40000c00 	.word	0x40000c00

08001aa0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
 8001ab4:	615a      	str	r2, [r3, #20]
 8001ab6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001ab8:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <MX_TIM11_Init+0xa0>)
 8001aba:	4a22      	ldr	r2, [pc, #136]	; (8001b44 <MX_TIM11_Init+0xa4>)
 8001abc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <MX_TIM11_Init+0xa0>)
 8001ac0:	2263      	movs	r2, #99	; 0x63
 8001ac2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <MX_TIM11_Init+0xa0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <MX_TIM11_Init+0xa0>)
 8001acc:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8001ad0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_TIM11_Init+0xa0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <MX_TIM11_Init+0xa0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001ade:	4818      	ldr	r0, [pc, #96]	; (8001b40 <MX_TIM11_Init+0xa0>)
 8001ae0:	f004 f8d0 	bl	8005c84 <HAL_TIM_Base_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001aea:	f001 fdf5 	bl	80036d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8001aee:	4814      	ldr	r0, [pc, #80]	; (8001b40 <MX_TIM11_Init+0xa0>)
 8001af0:	f004 f9e0 	bl	8005eb4 <HAL_TIM_OC_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001afa:	f001 fded 	bl	80036d8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8001afe:	2108      	movs	r1, #8
 8001b00:	480f      	ldr	r0, [pc, #60]	; (8001b40 <MX_TIM11_Init+0xa0>)
 8001b02:	f004 fb49 	bl	8006198 <HAL_TIM_OnePulse_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8001b0c:	f001 fde4 	bl	80036d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001b10:	2310      	movs	r3, #16
 8001b12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8001b14:	f240 5399 	movw	r3, #1433	; 0x599
 8001b18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2200      	movs	r2, #0
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_TIM11_Init+0xa0>)
 8001b2a:	f004 fe6d 	bl	8006808 <HAL_TIM_OC_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8001b34:	f001 fdd0 	bl	80036d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001b38:	bf00      	nop
 8001b3a:	3720      	adds	r7, #32
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000066c 	.word	0x2000066c
 8001b44:	40014800 	.word	0x40014800

08001b48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <MX_USART2_UART_Init+0x50>)
 8001b4e:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <MX_USART2_UART_Init+0x54>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_USART2_UART_Init+0x50>)
 8001b54:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MX_USART2_UART_Init+0x50>)
 8001b5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b60:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <MX_USART2_UART_Init+0x50>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <MX_USART2_UART_Init+0x50>)
 8001b6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_USART2_UART_Init+0x50>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <MX_USART2_UART_Init+0x50>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_USART2_UART_Init+0x50>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_USART2_UART_Init+0x50>)
 8001b84:	f005 fdcc 	bl	8007720 <HAL_UART_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001b8e:	f001 fda3 	bl	80036d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000720 	.word	0x20000720
 8001b9c:	40004400 	.word	0x40004400

08001ba0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_DMA_Init+0x68>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <MX_DMA_Init+0x68>)
 8001bb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_DMA_Init+0x68>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <MX_DMA_Init+0x68>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a0f      	ldr	r2, [pc, #60]	; (8001c08 <MX_DMA_Init+0x68>)
 8001bcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <MX_DMA_Init+0x68>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	2011      	movs	r0, #17
 8001be4:	f002 fda1 	bl	800472a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001be8:	2011      	movs	r0, #17
 8001bea:	f002 fdba 	bl	8004762 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	2038      	movs	r0, #56	; 0x38
 8001bf4:	f002 fd99 	bl	800472a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001bf8:	2038      	movs	r0, #56	; 0x38
 8001bfa:	f002 fdb2 	bl	8004762 <HAL_NVIC_EnableIRQ>

}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800

08001c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	4b62      	ldr	r3, [pc, #392]	; (8001db0 <MX_GPIO_Init+0x1a4>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a61      	ldr	r2, [pc, #388]	; (8001db0 <MX_GPIO_Init+0x1a4>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b5f      	ldr	r3, [pc, #380]	; (8001db0 <MX_GPIO_Init+0x1a4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b5b      	ldr	r3, [pc, #364]	; (8001db0 <MX_GPIO_Init+0x1a4>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a5a      	ldr	r2, [pc, #360]	; (8001db0 <MX_GPIO_Init+0x1a4>)
 8001c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b58      	ldr	r3, [pc, #352]	; (8001db0 <MX_GPIO_Init+0x1a4>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	4b54      	ldr	r3, [pc, #336]	; (8001db0 <MX_GPIO_Init+0x1a4>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a53      	ldr	r2, [pc, #332]	; (8001db0 <MX_GPIO_Init+0x1a4>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b51      	ldr	r3, [pc, #324]	; (8001db0 <MX_GPIO_Init+0x1a4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b4d      	ldr	r3, [pc, #308]	; (8001db0 <MX_GPIO_Init+0x1a4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	4a4c      	ldr	r2, [pc, #304]	; (8001db0 <MX_GPIO_Init+0x1a4>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
 8001c86:	4b4a      	ldr	r3, [pc, #296]	; (8001db0 <MX_GPIO_Init+0x1a4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8001c98:	4846      	ldr	r0, [pc, #280]	; (8001db4 <MX_GPIO_Init+0x1a8>)
 8001c9a:	f003 fb27 	bl	80052ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f44f 51aa 	mov.w	r1, #5440	; 0x1540
 8001ca4:	4844      	ldr	r0, [pc, #272]	; (8001db8 <MX_GPIO_Init+0x1ac>)
 8001ca6:	f003 fb21 	bl	80052ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2140      	movs	r1, #64	; 0x40
 8001cae:	4843      	ldr	r0, [pc, #268]	; (8001dbc <MX_GPIO_Init+0x1b0>)
 8001cb0:	f003 fb1c 	bl	80052ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	483b      	ldr	r0, [pc, #236]	; (8001db8 <MX_GPIO_Init+0x1ac>)
 8001ccc:	f003 f972 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4835      	ldr	r0, [pc, #212]	; (8001db8 <MX_GPIO_Init+0x1ac>)
 8001ce4:	f003 f966 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ce8:	2310      	movs	r3, #16
 8001cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	482e      	ldr	r0, [pc, #184]	; (8001db4 <MX_GPIO_Init+0x1a8>)
 8001cfc:	f003 f95a 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d00:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4826      	ldr	r0, [pc, #152]	; (8001db4 <MX_GPIO_Init+0x1a8>)
 8001d1a:	f003 f94b 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d1e:	2320      	movs	r3, #32
 8001d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d26:	2301      	movs	r3, #1
 8001d28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4821      	ldr	r0, [pc, #132]	; (8001db8 <MX_GPIO_Init+0x1ac>)
 8001d32:	f003 f93f 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB5 PB7
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_7
 8001d36:	f244 23a1 	movw	r3, #17057	; 0x42a1
 8001d3a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	481c      	ldr	r0, [pc, #112]	; (8001dbc <MX_GPIO_Init+0x1b0>)
 8001d4c:	f003 f932 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001d50:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d56:	2301      	movs	r3, #1
 8001d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	4813      	ldr	r0, [pc, #76]	; (8001db8 <MX_GPIO_Init+0x1ac>)
 8001d6a:	f003 f923 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001d6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d74:	2311      	movs	r3, #17
 8001d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	4619      	mov	r1, r3
 8001d86:	480c      	ldr	r0, [pc, #48]	; (8001db8 <MX_GPIO_Init+0x1ac>)
 8001d88:	f003 f914 	bl	8004fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d8c:	2340      	movs	r3, #64	; 0x40
 8001d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d90:	2311      	movs	r3, #17
 8001d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	4806      	ldr	r0, [pc, #24]	; (8001dbc <MX_GPIO_Init+0x1b0>)
 8001da4:	f003 f906 	bl	8004fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40020800 	.word	0x40020800
 8001dbc:	40020400 	.word	0x40020400

08001dc0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d13d      	bne.n	8001e4c <HAL_TIM_PeriodElapsedCallback+0x8c>
		photoDetect();
 8001dd0:	f000 fa78 	bl	80022c4 <photoDetect>
		robotArmState(registerFrame[1].U16); // READ : Base System Status
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001dd6:	885b      	ldrh	r3, [r3, #2]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 fb0d 	bl	80033f8 <robotArmState>
		readEncoder();
 8001dde:	f000 f86f 	bl	8001ec0 <readEncoder>

		if (photoSig[0] || photoSig[2]) // SOFTWARE LIMIT : Motor/Encoder Photo Sensor
 8001de2:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <HAL_TIM_PeriodElapsedCallback+0x32>
 8001dea:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001dec:	789b      	ldrb	r3, [r3, #2]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d005      	beq.n	8001dfe <HAL_TIM_PeriodElapsedCallback+0x3e>
				{
			duty = 0;
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
			setMotor();
 8001dfa:	f000 f83b 	bl	8001e74 <setMotor>
		}

		if (startSetHome) {
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_TIM_PeriodElapsedCallback+0x4a>
			setHome();
 8001e06:	f000 f877 	bl	8001ef8 <setHome>
		}

		if (startPointModeY) {
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d01c      	beq.n	8001e4c <HAL_TIM_PeriodElapsedCallback+0x8c>
			int16_t targetPosPointMode = registerFrame[49].U16; // READ : Goal Point y
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001e14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001e18:	81fb      	strh	r3, [r7, #14]
			onlyPositionControl(initPosY, targetPosPointMode / 10);
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e2a:	4a11      	ldr	r2, [pc, #68]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e2c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e30:	1092      	asrs	r2, r2, #2
 8001e32:	17db      	asrs	r3, r3, #31
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	ee07 3a10 	vmov	s14, r3
 8001e3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e40:	eef0 0a47 	vmov.f32	s1, s14
 8001e44:	eeb0 0a67 	vmov.f32	s0, s15
 8001e48:	f000 f8b6 	bl	8001fb8 <onlyPositionControl>
		}

	}
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000450 	.word	0x20000450
 8001e58:	20000ccc 	.word	0x20000ccc
 8001e5c:	20000dbc 	.word	0x20000dbc
 8001e60:	20000d90 	.word	0x20000d90
 8001e64:	20000260 	.word	0x20000260
 8001e68:	20000ec1 	.word	0x20000ec1
 8001e6c:	20000ec4 	.word	0x20000ec4
 8001e70:	66666667 	.word	0x66666667

08001e74 <setMotor>:

void setMotor() {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	if (dirAxisY) {
 8001e78:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <setMotor+0x3c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <setMotor+0x18>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001e80:	2201      	movs	r2, #1
 8001e82:	2140      	movs	r1, #64	; 0x40
 8001e84:	480b      	ldr	r0, [pc, #44]	; (8001eb4 <setMotor+0x40>)
 8001e86:	f003 fa31 	bl	80052ec <HAL_GPIO_WritePin>
 8001e8a:	e004      	b.n	8001e96 <setMotor+0x22>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2140      	movs	r1, #64	; 0x40
 8001e90:	4808      	ldr	r0, [pc, #32]	; (8001eb4 <setMotor+0x40>)
 8001e92:	f003 fa2b 	bl	80052ec <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <setMotor+0x44>)
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <setMotor+0x48>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea4:	ee17 2a90 	vmov	r2, s15
 8001ea8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000244 	.word	0x20000244
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	20000d90 	.word	0x20000d90
 8001ebc:	2000039c 	.word	0x2000039c

08001ec0 <readEncoder>:

void readEncoder() {
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <readEncoder+0x28>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b07      	ldr	r3, [pc, #28]	; (8001eec <readEncoder+0x2c>)
 8001ece:	601a      	str	r2, [r3, #0]
	QEIReadModified = QEIReadRaw - QEIHome;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <readEncoder+0x2c>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <readEncoder+0x30>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	4a06      	ldr	r2, [pc, #24]	; (8001ef4 <readEncoder+0x34>)
 8001edc:	6013      	str	r3, [r2, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	200005b8 	.word	0x200005b8
 8001eec:	20000d94 	.word	0x20000d94
 8001ef0:	20000d9c 	.word	0x20000d9c
 8001ef4:	20000d98 	.word	0x20000d98

08001ef8 <setHome>:

void setHome() {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0

	switch (myHomeState) {
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <setHome+0x9c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d02f      	beq.n	8001f64 <setHome+0x6c>
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	dc42      	bgt.n	8001f8e <setHome+0x96>
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <setHome+0x1a>
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d014      	beq.n	8001f3a <setHome+0x42>
		registerFrame[16].U16 = 0; // RESET : y-axis Moving Status
		break;

	}

}
 8001f10:	e03d      	b.n	8001f8e <setHome+0x96>
		if (photoSig[0]) // Motor Photo Sensor
 8001f12:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <setHome+0xa0>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <setHome+0x2a>
			myHomeState = 1;
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <setHome+0x9c>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
		break;
 8001f20:	e035      	b.n	8001f8e <setHome+0x96>
			dirAxisY = 0;
 8001f22:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <setHome+0xa4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
			duty = 220;
 8001f28:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <setHome+0xa8>)
 8001f2a:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <setHome+0xac>)
 8001f2c:	601a      	str	r2, [r3, #0]
			setMotor();
 8001f2e:	f7ff ffa1 	bl	8001e74 <setMotor>
			myHomeState = 1;
 8001f32:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <setHome+0x9c>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]
		break;
 8001f38:	e029      	b.n	8001f8e <setHome+0x96>
		if (photoSig[0]) // Motor Photo Sensor
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <setHome+0xa0>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <setHome+0x5c>
			dirAxisY = 1;
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <setHome+0xa4>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
			duty = 220;
 8001f48:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <setHome+0xa8>)
 8001f4a:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <setHome+0xac>)
 8001f4c:	601a      	str	r2, [r3, #0]
			setMotor();
 8001f4e:	f7ff ff91 	bl	8001e74 <setMotor>
		break;
 8001f52:	e01b      	b.n	8001f8c <setHome+0x94>
		} else if (photoSig[1]) // Center Photo Sensor
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <setHome+0xa0>)
 8001f56:	785b      	ldrb	r3, [r3, #1]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d017      	beq.n	8001f8c <setHome+0x94>
			myHomeState = 2;
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <setHome+0x9c>)
 8001f5e:	2202      	movs	r2, #2
 8001f60:	701a      	strb	r2, [r3, #0]
		break;
 8001f62:	e013      	b.n	8001f8c <setHome+0x94>
		duty = 0;
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <setHome+0xa8>)
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
		setMotor();
 8001f6c:	f7ff ff82 	bl	8001e74 <setMotor>
		QEIHome = QEIReadRaw;
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <setHome+0xb0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <setHome+0xb4>)
 8001f76:	6013      	str	r3, [r2, #0]
		startSetHome = 0;
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <setHome+0xb8>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
		myHomeState = 0;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <setHome+0x9c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
		registerFrame[16].U16 = 0; // RESET : y-axis Moving Status
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <setHome+0xbc>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	841a      	strh	r2, [r3, #32]
		break;
 8001f8a:	e000      	b.n	8001f8e <setHome+0x96>
		break;
 8001f8c:	bf00      	nop
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000ec0 	.word	0x20000ec0
 8001f98:	20000dbc 	.word	0x20000dbc
 8001f9c:	20000244 	.word	0x20000244
 8001fa0:	20000d90 	.word	0x20000d90
 8001fa4:	435c0000 	.word	0x435c0000
 8001fa8:	20000d94 	.word	0x20000d94
 8001fac:	20000d9c 	.word	0x20000d9c
 8001fb0:	20000260 	.word	0x20000260
 8001fb4:	20000ccc 	.word	0x20000ccc

08001fb8 <onlyPositionControl>:
	}
	prePos = mmActPos;
	setMotor();
}

void onlyPositionControl(float initPos, float targetPos) {
 8001fb8:	b5b0      	push	{r4, r5, r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001fc2:	edc7 0a00 	vstr	s1, [r7]
	calculationTraj result = trapezoidalTraj(initPos, targetPos);
 8001fc6:	f107 0308 	add.w	r3, r7, #8
 8001fca:	edd7 0a00 	vldr	s1, [r7]
 8001fce:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f998 	bl	8002308 <trapezoidalTraj>
	mmActPos = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 8001fd8:	4b67      	ldr	r3, [pc, #412]	; (8002178 <onlyPositionControl+0x1c0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fa4d 	bl	800047c <__aeabi_i2d>
 8001fe2:	a361      	add	r3, pc, #388	; (adr r3, 8002168 <onlyPositionControl+0x1b0>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fab2 	bl	8000550 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f7fe fd84 	bl	8000b00 <__aeabi_d2f>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4a60      	ldr	r2, [pc, #384]	; (800217c <onlyPositionControl+0x1c4>)
 8001ffc:	6013      	str	r3, [r2, #0]
	mmActVel = (mmActPos - prePos) / 0.001;
 8001ffe:	4b5f      	ldr	r3, [pc, #380]	; (800217c <onlyPositionControl+0x1c4>)
 8002000:	ed93 7a00 	vldr	s14, [r3]
 8002004:	4b5e      	ldr	r3, [pc, #376]	; (8002180 <onlyPositionControl+0x1c8>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200e:	ee17 0a90 	vmov	r0, s15
 8002012:	f7fe fa45 	bl	80004a0 <__aeabi_f2d>
 8002016:	a356      	add	r3, pc, #344	; (adr r3, 8002170 <onlyPositionControl+0x1b8>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe fbc2 	bl	80007a4 <__aeabi_ddiv>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fd6a 	bl	8000b00 <__aeabi_d2f>
 800202c:	4603      	mov	r3, r0
 800202e:	4a55      	ldr	r2, [pc, #340]	; (8002184 <onlyPositionControl+0x1cc>)
 8002030:	6013      	str	r3, [r2, #0]
	mmActAcc = (mmActVel - preVel) / 0.001;
 8002032:	4b54      	ldr	r3, [pc, #336]	; (8002184 <onlyPositionControl+0x1cc>)
 8002034:	ed93 7a00 	vldr	s14, [r3]
 8002038:	4b53      	ldr	r3, [pc, #332]	; (8002188 <onlyPositionControl+0x1d0>)
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002042:	ee17 0a90 	vmov	r0, s15
 8002046:	f7fe fa2b 	bl	80004a0 <__aeabi_f2d>
 800204a:	a349      	add	r3, pc, #292	; (adr r3, 8002170 <onlyPositionControl+0x1b8>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	f7fe fba8 	bl	80007a4 <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	f7fe fd50 	bl	8000b00 <__aeabi_d2f>
 8002060:	4603      	mov	r3, r0
 8002062:	4a4a      	ldr	r2, [pc, #296]	; (800218c <onlyPositionControl+0x1d4>)
 8002064:	6013      	str	r3, [r2, #0]

	mmError = result.posTraj - mmActPos;
 8002066:	ed97 7a02 	vldr	s14, [r7, #8]
 800206a:	4b44      	ldr	r3, [pc, #272]	; (800217c <onlyPositionControl+0x1c4>)
 800206c:	edd3 7a00 	vldr	s15, [r3]
 8002070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002074:	4b46      	ldr	r3, [pc, #280]	; (8002190 <onlyPositionControl+0x1d8>)
 8002076:	edc3 7a00 	vstr	s15, [r3]
	positionPID.eIntegral = positionPID.eIntegral + (mmError * 0.001);
 800207a:	4b46      	ldr	r3, [pc, #280]	; (8002194 <onlyPositionControl+0x1dc>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fa0e 	bl	80004a0 <__aeabi_f2d>
 8002084:	4604      	mov	r4, r0
 8002086:	460d      	mov	r5, r1
 8002088:	4b41      	ldr	r3, [pc, #260]	; (8002190 <onlyPositionControl+0x1d8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa07 	bl	80004a0 <__aeabi_f2d>
 8002092:	a337      	add	r3, pc, #220	; (adr r3, 8002170 <onlyPositionControl+0x1b8>)
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	f7fe fa5a 	bl	8000550 <__aeabi_dmul>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4620      	mov	r0, r4
 80020a2:	4629      	mov	r1, r5
 80020a4:	f7fe f89e 	bl	80001e4 <__adddf3>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	f7fe fd26 	bl	8000b00 <__aeabi_d2f>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a37      	ldr	r2, [pc, #220]	; (8002194 <onlyPositionControl+0x1dc>)
 80020b8:	60d3      	str	r3, [r2, #12]
	duty = (positionPID.pTerm * mmError)
 80020ba:	4b36      	ldr	r3, [pc, #216]	; (8002194 <onlyPositionControl+0x1dc>)
 80020bc:	ed93 7a00 	vldr	s14, [r3]
 80020c0:	4b33      	ldr	r3, [pc, #204]	; (8002190 <onlyPositionControl+0x1d8>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (positionPID.iTerm * positionPID.eIntegral);
 80020ca:	4b32      	ldr	r3, [pc, #200]	; (8002194 <onlyPositionControl+0x1dc>)
 80020cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80020d0:	4b30      	ldr	r3, [pc, #192]	; (8002194 <onlyPositionControl+0x1dc>)
 80020d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80020d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020da:	ee77 7a27 	vadd.f32	s15, s14, s15
	duty = (positionPID.pTerm * mmError)
 80020de:	4b2e      	ldr	r3, [pc, #184]	; (8002198 <onlyPositionControl+0x1e0>)
 80020e0:	edc3 7a00 	vstr	s15, [r3]
	if (duty < 0) {
 80020e4:	4b2c      	ldr	r3, [pc, #176]	; (8002198 <onlyPositionControl+0x1e0>)
 80020e6:	edd3 7a00 	vldr	s15, [r3]
 80020ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f2:	d50b      	bpl.n	800210c <onlyPositionControl+0x154>
		dirAxisY = 0;
 80020f4:	4b29      	ldr	r3, [pc, #164]	; (800219c <onlyPositionControl+0x1e4>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
		duty = (-1) * duty;
 80020fa:	4b27      	ldr	r3, [pc, #156]	; (8002198 <onlyPositionControl+0x1e0>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	eef1 7a67 	vneg.f32	s15, s15
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <onlyPositionControl+0x1e0>)
 8002106:	edc3 7a00 	vstr	s15, [r3]
 800210a:	e002      	b.n	8002112 <onlyPositionControl+0x15a>
	} else {
		dirAxisY = 1;
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <onlyPositionControl+0x1e4>)
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
	}
	if (duty > 1000) {
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <onlyPositionControl+0x1e0>)
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80021a0 <onlyPositionControl+0x1e8>
 800211c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002124:	dd03      	ble.n	800212e <onlyPositionControl+0x176>
		duty = 1000;
 8002126:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <onlyPositionControl+0x1e0>)
 8002128:	4a1e      	ldr	r2, [pc, #120]	; (80021a4 <onlyPositionControl+0x1ec>)
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	e00d      	b.n	800214a <onlyPositionControl+0x192>
	} else if (duty <= 120) {
 800212e:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <onlyPositionControl+0x1e0>)
 8002130:	edd3 7a00 	vldr	s15, [r3]
 8002134:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80021a8 <onlyPositionControl+0x1f0>
 8002138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002140:	d803      	bhi.n	800214a <onlyPositionControl+0x192>
		duty = 0;
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <onlyPositionControl+0x1e0>)
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
	}
	prePos = mmActPos;
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <onlyPositionControl+0x1c4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a0c      	ldr	r2, [pc, #48]	; (8002180 <onlyPositionControl+0x1c8>)
 8002150:	6013      	str	r3, [r2, #0]
	preVel = mmActVel;
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <onlyPositionControl+0x1cc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a0c      	ldr	r2, [pc, #48]	; (8002188 <onlyPositionControl+0x1d0>)
 8002158:	6013      	str	r3, [r2, #0]
	setMotor();
 800215a:	f7ff fe8b 	bl	8001e74 <setMotor>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bdb0      	pop	{r4, r5, r7, pc}
 8002166:	bf00      	nop
 8002168:	464f6faa 	.word	0x464f6faa
 800216c:	3f8199cb 	.word	0x3f8199cb
 8002170:	d2f1a9fc 	.word	0xd2f1a9fc
 8002174:	3f50624d 	.word	0x3f50624d
 8002178:	20000d98 	.word	0x20000d98
 800217c:	20000da0 	.word	0x20000da0
 8002180:	20000db0 	.word	0x20000db0
 8002184:	20000da8 	.word	0x20000da8
 8002188:	20000db4 	.word	0x20000db4
 800218c:	20000dac 	.word	0x20000dac
 8002190:	20000da4 	.word	0x20000da4
 8002194:	20000248 	.word	0x20000248
 8002198:	20000d90 	.word	0x20000d90
 800219c:	20000244 	.word	0x20000244
 80021a0:	447a0000 	.word	0x447a0000
 80021a4:	447a0000 	.word	0x447a0000
 80021a8:	42f00000 	.word	0x42f00000

080021ac <jogAxisY>:

void jogAxisY() {
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
	refYPos = buffer[0].subdata.yAxis;
 80021b0:	4b3a      	ldr	r3, [pc, #232]	; (800229c <jogAxisY+0xf0>)
 80021b2:	885b      	ldrh	r3, [r3, #2]
 80021b4:	ee07 3a90 	vmov	s15, r3
 80021b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021bc:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <jogAxisY+0xf4>)
 80021be:	edc3 7a00 	vstr	s15, [r3]
	if (refYPos > 2500) {
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <jogAxisY+0xf4>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80022a4 <jogAxisY+0xf8>
 80021cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d4:	dd03      	ble.n	80021de <jogAxisY+0x32>
		dirAxisY = 1;
 80021d6:	4b34      	ldr	r3, [pc, #208]	; (80022a8 <jogAxisY+0xfc>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
 80021dc:	e00c      	b.n	80021f8 <jogAxisY+0x4c>
	} else if (refYPos < 1500) {
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <jogAxisY+0xf4>)
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80022ac <jogAxisY+0x100>
 80021e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f0:	d502      	bpl.n	80021f8 <jogAxisY+0x4c>
		dirAxisY = 0;
 80021f2:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <jogAxisY+0xfc>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
	}
	if (refYPos > 3600 || refYPos < 100) {
 80021f8:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <jogAxisY+0xf4>)
 80021fa:	edd3 7a00 	vldr	s15, [r3]
 80021fe:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80022b0 <jogAxisY+0x104>
 8002202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220a:	dc09      	bgt.n	8002220 <jogAxisY+0x74>
 800220c:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <jogAxisY+0xf4>)
 800220e:	edd3 7a00 	vldr	s15, [r3]
 8002212:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80022b4 <jogAxisY+0x108>
 8002216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800221a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221e:	d503      	bpl.n	8002228 <jogAxisY+0x7c>
		duty = 250;
 8002220:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <jogAxisY+0x10c>)
 8002222:	4a26      	ldr	r2, [pc, #152]	; (80022bc <jogAxisY+0x110>)
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e034      	b.n	8002292 <jogAxisY+0xe6>
	} else if (refYPos > 2500 && refYPos <= 3600) {
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <jogAxisY+0xf4>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80022a4 <jogAxisY+0xf8>
 8002232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223a:	dd0d      	ble.n	8002258 <jogAxisY+0xac>
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <jogAxisY+0xf4>)
 800223e:	edd3 7a00 	vldr	s15, [r3]
 8002242:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80022b0 <jogAxisY+0x104>
 8002246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800224a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224e:	d803      	bhi.n	8002258 <jogAxisY+0xac>
		duty = 200;
 8002250:	4b19      	ldr	r3, [pc, #100]	; (80022b8 <jogAxisY+0x10c>)
 8002252:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <jogAxisY+0x114>)
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e01c      	b.n	8002292 <jogAxisY+0xe6>
	}

	else if (refYPos > 100 && refYPos <= 1500) {
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <jogAxisY+0xf4>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80022b4 <jogAxisY+0x108>
 8002262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226a:	dd0d      	ble.n	8002288 <jogAxisY+0xdc>
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <jogAxisY+0xf4>)
 800226e:	edd3 7a00 	vldr	s15, [r3]
 8002272:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80022ac <jogAxisY+0x100>
 8002276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	d803      	bhi.n	8002288 <jogAxisY+0xdc>
		duty = 200;
 8002280:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <jogAxisY+0x10c>)
 8002282:	4a0f      	ldr	r2, [pc, #60]	; (80022c0 <jogAxisY+0x114>)
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	e004      	b.n	8002292 <jogAxisY+0xe6>
	} else {
		duty = 0;
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <jogAxisY+0x10c>)
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
	}
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	20000d60 	.word	0x20000d60
 80022a0:	20000224 	.word	0x20000224
 80022a4:	451c4000 	.word	0x451c4000
 80022a8:	20000244 	.word	0x20000244
 80022ac:	44bb8000 	.word	0x44bb8000
 80022b0:	45610000 	.word	0x45610000
 80022b4:	42c80000 	.word	0x42c80000
 80022b8:	20000d90 	.word	0x20000d90
 80022bc:	437a0000 	.word	0x437a0000
 80022c0:	43480000 	.word	0x43480000

080022c4 <photoDetect>:

void photoDetect() {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
	photoSig[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);  // MOTOR Photo Sensor
 80022c8:	2120      	movs	r1, #32
 80022ca:	480d      	ldr	r0, [pc, #52]	; (8002300 <photoDetect+0x3c>)
 80022cc:	f002 fff6 	bl	80052bc <HAL_GPIO_ReadPin>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <photoDetect+0x40>)
 80022d6:	701a      	strb	r2, [r3, #0]
	photoSig[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // CENTER Photo Sensor
 80022d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022dc:	4808      	ldr	r0, [pc, #32]	; (8002300 <photoDetect+0x3c>)
 80022de:	f002 ffed 	bl	80052bc <HAL_GPIO_ReadPin>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <photoDetect+0x40>)
 80022e8:	705a      	strb	r2, [r3, #1]
	photoSig[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);  // ENCODER Photo Sensor
 80022ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ee:	4804      	ldr	r0, [pc, #16]	; (8002300 <photoDetect+0x3c>)
 80022f0:	f002 ffe4 	bl	80052bc <HAL_GPIO_ReadPin>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	4b02      	ldr	r3, [pc, #8]	; (8002304 <photoDetect+0x40>)
 80022fa:	709a      	strb	r2, [r3, #2]
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40020400 	.word	0x40020400
 8002304:	20000dbc 	.word	0x20000dbc

08002308 <trapezoidalTraj>:

calculationTraj trapezoidalTraj(float qi, float qf) {
 8002308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800230c:	b098      	sub	sp, #96	; 0x60
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	ed87 0a02 	vstr	s0, [r7, #8]
 8002316:	edc7 0a01 	vstr	s1, [r7, #4]
	calculationTraj result;

	float diffPos = abs(qf - qi);
 800231a:	ed97 7a01 	vldr	s14, [r7, #4]
 800231e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002326:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800232a:	ee17 3a90 	vmov	r3, s15
 800232e:	2b00      	cmp	r3, #0
 8002330:	bfb8      	it	lt
 8002332:	425b      	neglt	r3, r3
 8002334:	ee07 3a90 	vmov	s15, r3
 8002338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	int8_t handleMinus = (qf - qi) / diffPos;
 8002340:	ed97 7a01 	vldr	s14, [r7, #4]
 8002344:	edd7 7a02 	vldr	s15, [r7, #8]
 8002348:	ee77 6a67 	vsub.f32	s13, s14, s15
 800234c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002354:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002358:	edc7 7a00 	vstr	s15, [r7]
 800235c:	783b      	ldrb	r3, [r7, #0]
 800235e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	float timeTrapSeg1 = qdm / qddm;
 8002362:	4bb3      	ldr	r3, [pc, #716]	; (8002630 <trapezoidalTraj+0x328>)
 8002364:	edd3 6a00 	vldr	s13, [r3]
 8002368:	4bb2      	ldr	r3, [pc, #712]	; (8002634 <trapezoidalTraj+0x32c>)
 800236a:	ed93 7a00 	vldr	s14, [r3]
 800236e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002372:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float timeTriSeg1 = pow((diffPos / qddm), 0.5);
 8002376:	4baf      	ldr	r3, [pc, #700]	; (8002634 <trapezoidalTraj+0x32c>)
 8002378:	edd3 7a00 	vldr	s15, [r3]
 800237c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002380:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002384:	ee16 0a90 	vmov	r0, s13
 8002388:	f7fe f88a 	bl	80004a0 <__aeabi_f2d>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	ed9f 1ba5 	vldr	d1, [pc, #660]	; 8002628 <trapezoidalTraj+0x320>
 8002394:	ec43 2b10 	vmov	d0, r2, r3
 8002398:	f006 fd5a 	bl	8008e50 <pow>
 800239c:	ec53 2b10 	vmov	r2, r3, d0
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	f7fe fbac 	bl	8000b00 <__aeabi_d2f>
 80023a8:	4603      	mov	r3, r0
 80023aa:	653b      	str	r3, [r7, #80]	; 0x50

	if (timeTriSeg1 < timeTrapSeg1) // triangle shape
 80023ac:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80023b0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80023b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023bc:	f140 8140 	bpl.w	8002640 <trapezoidalTraj+0x338>
			{
		float qTriSeg1 = 0.5 * qddm * timeTriSeg1 * timeTriSeg1;
 80023c0:	4b9c      	ldr	r3, [pc, #624]	; (8002634 <trapezoidalTraj+0x32c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe f86b 	bl	80004a0 <__aeabi_f2d>
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	4b9a      	ldr	r3, [pc, #616]	; (8002638 <trapezoidalTraj+0x330>)
 80023d0:	f7fe f8be 	bl	8000550 <__aeabi_dmul>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4614      	mov	r4, r2
 80023da:	461d      	mov	r5, r3
 80023dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80023de:	f7fe f85f 	bl	80004a0 <__aeabi_f2d>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4620      	mov	r0, r4
 80023e8:	4629      	mov	r1, r5
 80023ea:	f7fe f8b1 	bl	8000550 <__aeabi_dmul>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4614      	mov	r4, r2
 80023f4:	461d      	mov	r5, r3
 80023f6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80023f8:	f7fe f852 	bl	80004a0 <__aeabi_f2d>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4620      	mov	r0, r4
 8002402:	4629      	mov	r1, r5
 8002404:	f7fe f8a4 	bl	8000550 <__aeabi_dmul>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4610      	mov	r0, r2
 800240e:	4619      	mov	r1, r3
 8002410:	f7fe fb76 	bl	8000b00 <__aeabi_d2f>
 8002414:	4603      	mov	r3, r0
 8002416:	637b      	str	r3, [r7, #52]	; 0x34
		float qdTriSeg1 = qddm * timeTriSeg1;
 8002418:	4b86      	ldr	r3, [pc, #536]	; (8002634 <trapezoidalTraj+0x32c>)
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002426:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		if (actualTime <= timeTriSeg1) {
 800242a:	4b84      	ldr	r3, [pc, #528]	; (800263c <trapezoidalTraj+0x334>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002434:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243c:	db57      	blt.n	80024ee <trapezoidalTraj+0x1e6>
			result.posTraj = qi
					+ (0.5 * qddm * actualTime * actualTime) * handleMinus;
 800243e:	68b8      	ldr	r0, [r7, #8]
 8002440:	f7fe f82e 	bl	80004a0 <__aeabi_f2d>
 8002444:	4604      	mov	r4, r0
 8002446:	460d      	mov	r5, r1
 8002448:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <trapezoidalTraj+0x32c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f827 	bl	80004a0 <__aeabi_f2d>
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	4b78      	ldr	r3, [pc, #480]	; (8002638 <trapezoidalTraj+0x330>)
 8002458:	f7fe f87a 	bl	8000550 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4690      	mov	r8, r2
 8002462:	4699      	mov	r9, r3
 8002464:	4b75      	ldr	r3, [pc, #468]	; (800263c <trapezoidalTraj+0x334>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f819 	bl	80004a0 <__aeabi_f2d>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4640      	mov	r0, r8
 8002474:	4649      	mov	r1, r9
 8002476:	f7fe f86b 	bl	8000550 <__aeabi_dmul>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4690      	mov	r8, r2
 8002480:	4699      	mov	r9, r3
 8002482:	4b6e      	ldr	r3, [pc, #440]	; (800263c <trapezoidalTraj+0x334>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f80a 	bl	80004a0 <__aeabi_f2d>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4640      	mov	r0, r8
 8002492:	4649      	mov	r1, r9
 8002494:	f7fe f85c 	bl	8000550 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4690      	mov	r8, r2
 800249e:	4699      	mov	r9, r3
 80024a0:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fd ffe9 	bl	800047c <__aeabi_i2d>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4640      	mov	r0, r8
 80024b0:	4649      	mov	r1, r9
 80024b2:	f7fe f84d 	bl	8000550 <__aeabi_dmul>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4620      	mov	r0, r4
 80024bc:	4629      	mov	r1, r5
 80024be:	f7fd fe91 	bl	80001e4 <__adddf3>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4610      	mov	r0, r2
 80024c8:	4619      	mov	r1, r3
 80024ca:	f7fe fb19 	bl	8000b00 <__aeabi_d2f>
 80024ce:	4603      	mov	r3, r0
			result.posTraj = qi
 80024d0:	617b      	str	r3, [r7, #20]
			result.velTraj = qddm * actualTime;
 80024d2:	4b58      	ldr	r3, [pc, #352]	; (8002634 <trapezoidalTraj+0x32c>)
 80024d4:	ed93 7a00 	vldr	s14, [r3]
 80024d8:	4b58      	ldr	r3, [pc, #352]	; (800263c <trapezoidalTraj+0x334>)
 80024da:	edd3 7a00 	vldr	s15, [r3]
 80024de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e2:	edc7 7a06 	vstr	s15, [r7, #24]
			result.accTraj = qddm;
 80024e6:	4b53      	ldr	r3, [pc, #332]	; (8002634 <trapezoidalTraj+0x32c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	e282      	b.n	80029f4 <trapezoidalTraj+0x6ec>
		}

		else if (actualTime > timeTriSeg1 && actualTime <= (timeTriSeg1 * 2)) {
 80024ee:	4b53      	ldr	r3, [pc, #332]	; (800263c <trapezoidalTraj+0x334>)
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80024f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002500:	f140 8086 	bpl.w	8002610 <trapezoidalTraj+0x308>
 8002504:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002508:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800250c:	4b4b      	ldr	r3, [pc, #300]	; (800263c <trapezoidalTraj+0x334>)
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251a:	db79      	blt.n	8002610 <trapezoidalTraj+0x308>
			float actualTimeSeg2 = actualTime - timeTriSeg1;
 800251c:	4b47      	ldr	r3, [pc, #284]	; (800263c <trapezoidalTraj+0x334>)
 800251e:	ed93 7a00 	vldr	s14, [r3]
 8002522:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800252a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			result.posTraj = qi
					+ (qTriSeg1 + (qdTriSeg1 * actualTimeSeg2)
 800252e:	68b8      	ldr	r0, [r7, #8]
 8002530:	f7fd ffb6 	bl	80004a0 <__aeabi_f2d>
 8002534:	4604      	mov	r4, r0
 8002536:	460d      	mov	r5, r1
 8002538:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800253c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002540:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002544:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254c:	ee17 0a90 	vmov	r0, s15
 8002550:	f7fd ffa6 	bl	80004a0 <__aeabi_f2d>
 8002554:	4680      	mov	r8, r0
 8002556:	4689      	mov	r9, r1
							- (0.5 * qddm * actualTimeSeg2 * actualTimeSeg2))
 8002558:	4b36      	ldr	r3, [pc, #216]	; (8002634 <trapezoidalTraj+0x32c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd ff9f 	bl	80004a0 <__aeabi_f2d>
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	4b34      	ldr	r3, [pc, #208]	; (8002638 <trapezoidalTraj+0x330>)
 8002568:	f7fd fff2 	bl	8000550 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4692      	mov	sl, r2
 8002572:	469b      	mov	fp, r3
 8002574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002576:	f7fd ff93 	bl	80004a0 <__aeabi_f2d>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4650      	mov	r0, sl
 8002580:	4659      	mov	r1, fp
 8002582:	f7fd ffe5 	bl	8000550 <__aeabi_dmul>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4692      	mov	sl, r2
 800258c:	469b      	mov	fp, r3
 800258e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002590:	f7fd ff86 	bl	80004a0 <__aeabi_f2d>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4650      	mov	r0, sl
 800259a:	4659      	mov	r1, fp
 800259c:	f7fd ffd8 	bl	8000550 <__aeabi_dmul>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4640      	mov	r0, r8
 80025a6:	4649      	mov	r1, r9
 80025a8:	f7fd fe1a 	bl	80001e0 <__aeabi_dsub>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4690      	mov	r8, r2
 80025b2:	4699      	mov	r9, r3
							* handleMinus;
 80025b4:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd ff5f 	bl	800047c <__aeabi_i2d>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4640      	mov	r0, r8
 80025c4:	4649      	mov	r1, r9
 80025c6:	f7fd ffc3 	bl	8000550 <__aeabi_dmul>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
					+ (qTriSeg1 + (qdTriSeg1 * actualTimeSeg2)
 80025ce:	4620      	mov	r0, r4
 80025d0:	4629      	mov	r1, r5
 80025d2:	f7fd fe07 	bl	80001e4 <__adddf3>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	f7fe fa8f 	bl	8000b00 <__aeabi_d2f>
 80025e2:	4603      	mov	r3, r0
			result.posTraj = qi
 80025e4:	617b      	str	r3, [r7, #20]
			result.velTraj = qdTriSeg1 - (qddm * actualTimeSeg2);
 80025e6:	4b13      	ldr	r3, [pc, #76]	; (8002634 <trapezoidalTraj+0x32c>)
 80025e8:	ed93 7a00 	vldr	s14, [r3]
 80025ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80025f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fc:	edc7 7a06 	vstr	s15, [r7, #24]
			result.accTraj = -qddm;
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <trapezoidalTraj+0x32c>)
 8002602:	edd3 7a00 	vldr	s15, [r3]
 8002606:	eef1 7a67 	vneg.f32	s15, s15
 800260a:	edc7 7a07 	vstr	s15, [r7, #28]
		else if (actualTime > timeTriSeg1 && actualTime <= (timeTriSeg1 * 2)) {
 800260e:	e1f1      	b.n	80029f4 <trapezoidalTraj+0x6ec>
		}

		else {
			result.posTraj = qf;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	617b      	str	r3, [r7, #20]
			result.velTraj = 0;
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
			result.accTraj = 0;
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	e1e8      	b.n	80029f4 <trapezoidalTraj+0x6ec>
 8002622:	bf00      	nop
 8002624:	f3af 8000 	nop.w
 8002628:	00000000 	.word	0x00000000
 800262c:	3fe00000 	.word	0x3fe00000
 8002630:	2000025c 	.word	0x2000025c
 8002634:	20000258 	.word	0x20000258
 8002638:	3fe00000 	.word	0x3fe00000
 800263c:	20000eb0 	.word	0x20000eb0
	}

	else // trapezoidal shape
	{
		float timeTrapSeg2 = (diffPos
				- (2 * 0.5 * qddm * (timeTrapSeg1) * (timeTrapSeg1))) / qdm;
 8002640:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002642:	f7fd ff2d 	bl	80004a0 <__aeabi_f2d>
 8002646:	4604      	mov	r4, r0
 8002648:	460d      	mov	r5, r1
 800264a:	4b90      	ldr	r3, [pc, #576]	; (800288c <trapezoidalTraj+0x584>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd ff26 	bl	80004a0 <__aeabi_f2d>
 8002654:	4680      	mov	r8, r0
 8002656:	4689      	mov	r9, r1
 8002658:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800265a:	f7fd ff21 	bl	80004a0 <__aeabi_f2d>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4640      	mov	r0, r8
 8002664:	4649      	mov	r1, r9
 8002666:	f7fd ff73 	bl	8000550 <__aeabi_dmul>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4690      	mov	r8, r2
 8002670:	4699      	mov	r9, r3
 8002672:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002674:	f7fd ff14 	bl	80004a0 <__aeabi_f2d>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4640      	mov	r0, r8
 800267e:	4649      	mov	r1, r9
 8002680:	f7fd ff66 	bl	8000550 <__aeabi_dmul>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4620      	mov	r0, r4
 800268a:	4629      	mov	r1, r5
 800268c:	f7fd fda8 	bl	80001e0 <__aeabi_dsub>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4614      	mov	r4, r2
 8002696:	461d      	mov	r5, r3
 8002698:	4b7d      	ldr	r3, [pc, #500]	; (8002890 <trapezoidalTraj+0x588>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fd feff 	bl	80004a0 <__aeabi_f2d>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4620      	mov	r0, r4
 80026a8:	4629      	mov	r1, r5
 80026aa:	f7fe f87b 	bl	80007a4 <__aeabi_ddiv>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
		float timeTrapSeg2 = (diffPos
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	f7fe fa23 	bl	8000b00 <__aeabi_d2f>
 80026ba:	4603      	mov	r3, r0
 80026bc:	64fb      	str	r3, [r7, #76]	; 0x4c
		float timeTrapSeg3 = qdm / qddm;
 80026be:	4b74      	ldr	r3, [pc, #464]	; (8002890 <trapezoidalTraj+0x588>)
 80026c0:	edd3 6a00 	vldr	s13, [r3]
 80026c4:	4b71      	ldr	r3, [pc, #452]	; (800288c <trapezoidalTraj+0x584>)
 80026c6:	ed93 7a00 	vldr	s14, [r3]
 80026ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ce:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		float qTrapSeg1 = 0.5 * qddm * (timeTrapSeg1) * (timeTrapSeg1);
 80026d2:	4b6e      	ldr	r3, [pc, #440]	; (800288c <trapezoidalTraj+0x584>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd fee2 	bl	80004a0 <__aeabi_f2d>
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	4b6c      	ldr	r3, [pc, #432]	; (8002894 <trapezoidalTraj+0x58c>)
 80026e2:	f7fd ff35 	bl	8000550 <__aeabi_dmul>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4614      	mov	r4, r2
 80026ec:	461d      	mov	r5, r3
 80026ee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80026f0:	f7fd fed6 	bl	80004a0 <__aeabi_f2d>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4620      	mov	r0, r4
 80026fa:	4629      	mov	r1, r5
 80026fc:	f7fd ff28 	bl	8000550 <__aeabi_dmul>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4614      	mov	r4, r2
 8002706:	461d      	mov	r5, r3
 8002708:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800270a:	f7fd fec9 	bl	80004a0 <__aeabi_f2d>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4620      	mov	r0, r4
 8002714:	4629      	mov	r1, r5
 8002716:	f7fd ff1b 	bl	8000550 <__aeabi_dmul>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	f7fe f9ed 	bl	8000b00 <__aeabi_d2f>
 8002726:	4603      	mov	r3, r0
 8002728:	647b      	str	r3, [r7, #68]	; 0x44
		float qTrapSeg2 = qTrapSeg1 + (qdm * timeTrapSeg2);
 800272a:	4b59      	ldr	r3, [pc, #356]	; (8002890 <trapezoidalTraj+0x588>)
 800272c:	ed93 7a00 	vldr	s14, [r3]
 8002730:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002738:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800273c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002740:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

		if (actualTime <= timeTrapSeg1) {
 8002744:	4b54      	ldr	r3, [pc, #336]	; (8002898 <trapezoidalTraj+0x590>)
 8002746:	edd3 7a00 	vldr	s15, [r3]
 800274a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800274e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002756:	db57      	blt.n	8002808 <trapezoidalTraj+0x500>
			result.posTraj = qi
					+ (0.5 * qddm * actualTime * actualTime) * handleMinus;
 8002758:	68b8      	ldr	r0, [r7, #8]
 800275a:	f7fd fea1 	bl	80004a0 <__aeabi_f2d>
 800275e:	4604      	mov	r4, r0
 8002760:	460d      	mov	r5, r1
 8002762:	4b4a      	ldr	r3, [pc, #296]	; (800288c <trapezoidalTraj+0x584>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd fe9a 	bl	80004a0 <__aeabi_f2d>
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	4b48      	ldr	r3, [pc, #288]	; (8002894 <trapezoidalTraj+0x58c>)
 8002772:	f7fd feed 	bl	8000550 <__aeabi_dmul>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4690      	mov	r8, r2
 800277c:	4699      	mov	r9, r3
 800277e:	4b46      	ldr	r3, [pc, #280]	; (8002898 <trapezoidalTraj+0x590>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fd fe8c 	bl	80004a0 <__aeabi_f2d>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4640      	mov	r0, r8
 800278e:	4649      	mov	r1, r9
 8002790:	f7fd fede 	bl	8000550 <__aeabi_dmul>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4690      	mov	r8, r2
 800279a:	4699      	mov	r9, r3
 800279c:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <trapezoidalTraj+0x590>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fd fe7d 	bl	80004a0 <__aeabi_f2d>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4640      	mov	r0, r8
 80027ac:	4649      	mov	r1, r9
 80027ae:	f7fd fecf 	bl	8000550 <__aeabi_dmul>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4690      	mov	r8, r2
 80027b8:	4699      	mov	r9, r3
 80027ba:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd fe5c 	bl	800047c <__aeabi_i2d>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4640      	mov	r0, r8
 80027ca:	4649      	mov	r1, r9
 80027cc:	f7fd fec0 	bl	8000550 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4620      	mov	r0, r4
 80027d6:	4629      	mov	r1, r5
 80027d8:	f7fd fd04 	bl	80001e4 <__adddf3>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	f7fe f98c 	bl	8000b00 <__aeabi_d2f>
 80027e8:	4603      	mov	r3, r0
			result.posTraj = qi
 80027ea:	617b      	str	r3, [r7, #20]
			result.velTraj = qddm * actualTime;
 80027ec:	4b27      	ldr	r3, [pc, #156]	; (800288c <trapezoidalTraj+0x584>)
 80027ee:	ed93 7a00 	vldr	s14, [r3]
 80027f2:	4b29      	ldr	r3, [pc, #164]	; (8002898 <trapezoidalTraj+0x590>)
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fc:	edc7 7a06 	vstr	s15, [r7, #24]
			result.accTraj = qddm;
 8002800:	4b22      	ldr	r3, [pc, #136]	; (800288c <trapezoidalTraj+0x584>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	e0f5      	b.n	80029f4 <trapezoidalTraj+0x6ec>
		} else if (actualTime > timeTrapSeg1
 8002808:	4b23      	ldr	r3, [pc, #140]	; (8002898 <trapezoidalTraj+0x590>)
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281a:	d53f      	bpl.n	800289c <trapezoidalTraj+0x594>
				&& actualTime <= timeTrapSeg2 + timeTrapSeg1) {
 800281c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002820:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002824:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <trapezoidalTraj+0x590>)
 800282a:	edd3 7a00 	vldr	s15, [r3]
 800282e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002836:	db31      	blt.n	800289c <trapezoidalTraj+0x594>
			float t2 = actualTime - timeTrapSeg1;
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <trapezoidalTraj+0x590>)
 800283a:	ed93 7a00 	vldr	s14, [r3]
 800283e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002846:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			result.posTraj = qi + (qTrapSeg1 + qdm * (t2)) * handleMinus;
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <trapezoidalTraj+0x588>)
 800284c:	ed93 7a00 	vldr	s14, [r3]
 8002850:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002854:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002858:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800285c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002860:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8002864:	ee07 3a90 	vmov	s15, r3
 8002868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800286c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002870:	edd7 7a02 	vldr	s15, [r7, #8]
 8002874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002878:	edc7 7a05 	vstr	s15, [r7, #20]
			result.velTraj = qdm;
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <trapezoidalTraj+0x588>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	61bb      	str	r3, [r7, #24]
			result.accTraj = 0;
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
				&& actualTime <= timeTrapSeg2 + timeTrapSeg1) {
 8002888:	e0b4      	b.n	80029f4 <trapezoidalTraj+0x6ec>
 800288a:	bf00      	nop
 800288c:	20000258 	.word	0x20000258
 8002890:	2000025c 	.word	0x2000025c
 8002894:	3fe00000 	.word	0x3fe00000
 8002898:	20000eb0 	.word	0x20000eb0
		} else if (actualTime > timeTrapSeg2 + timeTrapSeg1
 800289c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80028a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80028a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a8:	4b91      	ldr	r3, [pc, #580]	; (8002af0 <trapezoidalTraj+0x7e8>)
 80028aa:	edd3 7a00 	vldr	s15, [r3]
 80028ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b6:	f140 8095 	bpl.w	80029e4 <trapezoidalTraj+0x6dc>
				&& actualTime <= timeTrapSeg3 + timeTrapSeg2 + timeTrapSeg1) {
 80028ba:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80028be:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80028c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028c6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80028ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ce:	4b88      	ldr	r3, [pc, #544]	; (8002af0 <trapezoidalTraj+0x7e8>)
 80028d0:	edd3 7a00 	vldr	s15, [r3]
 80028d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028dc:	f2c0 8082 	blt.w	80029e4 <trapezoidalTraj+0x6dc>
			float t3 = actualTime - timeTrapSeg2 - timeTrapSeg1;
 80028e0:	4b83      	ldr	r3, [pc, #524]	; (8002af0 <trapezoidalTraj+0x7e8>)
 80028e2:	ed93 7a00 	vldr	s14, [r3]
 80028e6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80028ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028ee:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80028f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			result.posTraj = qi
					+ (qTrapSeg2 + (qdm * t3) - 0.5 * qddm * t3 * t3)
 80028fa:	68b8      	ldr	r0, [r7, #8]
 80028fc:	f7fd fdd0 	bl	80004a0 <__aeabi_f2d>
 8002900:	4604      	mov	r4, r0
 8002902:	460d      	mov	r5, r1
 8002904:	4b7b      	ldr	r3, [pc, #492]	; (8002af4 <trapezoidalTraj+0x7ec>)
 8002906:	ed93 7a00 	vldr	s14, [r3]
 800290a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800290e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002912:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800291a:	ee17 0a90 	vmov	r0, s15
 800291e:	f7fd fdbf 	bl	80004a0 <__aeabi_f2d>
 8002922:	4680      	mov	r8, r0
 8002924:	4689      	mov	r9, r1
 8002926:	4b74      	ldr	r3, [pc, #464]	; (8002af8 <trapezoidalTraj+0x7f0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fd fdb8 	bl	80004a0 <__aeabi_f2d>
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	4b71      	ldr	r3, [pc, #452]	; (8002afc <trapezoidalTraj+0x7f4>)
 8002936:	f7fd fe0b 	bl	8000550 <__aeabi_dmul>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4692      	mov	sl, r2
 8002940:	469b      	mov	fp, r3
 8002942:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002944:	f7fd fdac 	bl	80004a0 <__aeabi_f2d>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4650      	mov	r0, sl
 800294e:	4659      	mov	r1, fp
 8002950:	f7fd fdfe 	bl	8000550 <__aeabi_dmul>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4692      	mov	sl, r2
 800295a:	469b      	mov	fp, r3
 800295c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800295e:	f7fd fd9f 	bl	80004a0 <__aeabi_f2d>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4650      	mov	r0, sl
 8002968:	4659      	mov	r1, fp
 800296a:	f7fd fdf1 	bl	8000550 <__aeabi_dmul>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4640      	mov	r0, r8
 8002974:	4649      	mov	r1, r9
 8002976:	f7fd fc33 	bl	80001e0 <__aeabi_dsub>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4690      	mov	r8, r2
 8002980:	4699      	mov	r9, r3
							* handleMinus;
 8002982:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fd78 	bl	800047c <__aeabi_i2d>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4640      	mov	r0, r8
 8002992:	4649      	mov	r1, r9
 8002994:	f7fd fddc 	bl	8000550 <__aeabi_dmul>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
					+ (qTrapSeg2 + (qdm * t3) - 0.5 * qddm * t3 * t3)
 800299c:	4620      	mov	r0, r4
 800299e:	4629      	mov	r1, r5
 80029a0:	f7fd fc20 	bl	80001e4 <__adddf3>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	f7fe f8a8 	bl	8000b00 <__aeabi_d2f>
 80029b0:	4603      	mov	r3, r0
			result.posTraj = qi
 80029b2:	617b      	str	r3, [r7, #20]
			result.velTraj = -qddm * t3 + qdm;
 80029b4:	4b50      	ldr	r3, [pc, #320]	; (8002af8 <trapezoidalTraj+0x7f0>)
 80029b6:	edd3 7a00 	vldr	s15, [r3]
 80029ba:	eeb1 7a67 	vneg.f32	s14, s15
 80029be:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80029c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c6:	4b4b      	ldr	r3, [pc, #300]	; (8002af4 <trapezoidalTraj+0x7ec>)
 80029c8:	edd3 7a00 	vldr	s15, [r3]
 80029cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d0:	edc7 7a06 	vstr	s15, [r7, #24]
			result.accTraj = -qddm;
 80029d4:	4b48      	ldr	r3, [pc, #288]	; (8002af8 <trapezoidalTraj+0x7f0>)
 80029d6:	edd3 7a00 	vldr	s15, [r3]
 80029da:	eef1 7a67 	vneg.f32	s15, s15
 80029de:	edc7 7a07 	vstr	s15, [r7, #28]
				&& actualTime <= timeTrapSeg3 + timeTrapSeg2 + timeTrapSeg1) {
 80029e2:	e007      	b.n	80029f4 <trapezoidalTraj+0x6ec>
		} else {
			result.posTraj = qf;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	617b      	str	r3, [r7, #20]
			result.velTraj = 0;
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
			result.accTraj = 0;
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]

		}

	}

	checkPos = result.posTraj;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	4a42      	ldr	r2, [pc, #264]	; (8002b00 <trapezoidalTraj+0x7f8>)
 80029f8:	6013      	str	r3, [r2, #0]
	checkVel = result.velTraj;
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	4a41      	ldr	r2, [pc, #260]	; (8002b04 <trapezoidalTraj+0x7fc>)
 80029fe:	6013      	str	r3, [r2, #0]
	checkAcc = result.accTraj;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	4a41      	ldr	r2, [pc, #260]	; (8002b08 <trapezoidalTraj+0x800>)
 8002a04:	6013      	str	r3, [r2, #0]

	int16_t sentPos = mmActPos * 10;
 8002a06:	4b41      	ldr	r3, [pc, #260]	; (8002b0c <trapezoidalTraj+0x804>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a18:	ee17 3a90 	vmov	r3, s15
 8002a1c:	857b      	strh	r3, [r7, #42]	; 0x2a
	int16_t sentVel = mmActVel * 10;
 8002a1e:	4b3c      	ldr	r3, [pc, #240]	; (8002b10 <trapezoidalTraj+0x808>)
 8002a20:	edd3 7a00 	vldr	s15, [r3]
 8002a24:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a30:	ee17 3a90 	vmov	r3, s15
 8002a34:	853b      	strh	r3, [r7, #40]	; 0x28
	int16_t sentAcc = mmActAcc * 10;
 8002a36:	4b37      	ldr	r3, [pc, #220]	; (8002b14 <trapezoidalTraj+0x80c>)
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a48:	ee17 3a90 	vmov	r3, s15
 8002a4c:	84fb      	strh	r3, [r7, #38]	; 0x26
	registerFrame[17].U16 = sentPos; // WRITE : y-axis Actual Position
 8002a4e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002a50:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <trapezoidalTraj+0x810>)
 8002a52:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = sentVel; // WRITE : y-axis Actual Speed
 8002a54:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a56:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <trapezoidalTraj+0x810>)
 8002a58:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = sentAcc; // WRITE : y-axis Actual Acceleration
 8002a5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002a5c:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <trapezoidalTraj+0x810>)
 8002a5e:	84da      	strh	r2, [r3, #38]	; 0x26

	actualTime += 0.001;
 8002a60:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <trapezoidalTraj+0x7e8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fd1b 	bl	80004a0 <__aeabi_f2d>
 8002a6a:	a31f      	add	r3, pc, #124	; (adr r3, 8002ae8 <trapezoidalTraj+0x7e0>)
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	f7fd fbb8 	bl	80001e4 <__adddf3>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f7fe f840 	bl	8000b00 <__aeabi_d2f>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <trapezoidalTraj+0x7e8>)
 8002a84:	6013      	str	r3, [r2, #0]

	// POINT MODE

	if (result.posTraj == qf) {
 8002a86:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a8e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a96:	d116      	bne.n	8002ac6 <trapezoidalTraj+0x7be>
		result.reachTraj = 1;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 3020 	strb.w	r3, [r7, #32]
		actualTime = 0;
 8002a9e:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <trapezoidalTraj+0x7e8>)
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
		startPointModeY = 0;
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <trapezoidalTraj+0x814>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
		initPosY = mmActPos;
 8002aac:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <trapezoidalTraj+0x804>)
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ab6:	ee17 2a90 	vmov	r2, s15
 8002aba:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <trapezoidalTraj+0x818>)
 8002abc:	601a      	str	r2, [r3, #0]
		registerFrame[16].U16 = 0; // RESET : y-axis Moving Status
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <trapezoidalTraj+0x810>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	841a      	strh	r2, [r3, #32]
 8002ac4:	e002      	b.n	8002acc <trapezoidalTraj+0x7c4>
	} else {
		result.reachTraj = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f887 3020 	strb.w	r3, [r7, #32]
	}

	// RUN TRAY MODE


	return result;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	461c      	mov	r4, r3
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ad6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	3760      	adds	r7, #96	; 0x60
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ae4:	f3af 8000 	nop.w
 8002ae8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002aec:	3f50624d 	.word	0x3f50624d
 8002af0:	20000eb0 	.word	0x20000eb0
 8002af4:	2000025c 	.word	0x2000025c
 8002af8:	20000258 	.word	0x20000258
 8002afc:	3fe00000 	.word	0x3fe00000
 8002b00:	20000eb4 	.word	0x20000eb4
 8002b04:	20000eb8 	.word	0x20000eb8
 8002b08:	20000ebc 	.word	0x20000ebc
 8002b0c:	20000da0 	.word	0x20000da0
 8002b10:	20000da8 	.word	0x20000da8
 8002b14:	20000dac 	.word	0x20000dac
 8002b18:	20000ccc 	.word	0x20000ccc
 8002b1c:	20000ec1 	.word	0x20000ec1
 8002b20:	20000ec4 	.word	0x20000ec4
 8002b24:	00000000 	.word	0x00000000

08002b28 <calibrateTray>:

void calibrateTray(trayPos trayX, trayPos trayY, Point *objPos) {
 8002b28:	b084      	sub	sp, #16
 8002b2a:	b5b0      	push	{r4, r5, r7, lr}
 8002b2c:	b092      	sub	sp, #72	; 0x48
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002b34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float length1 = pow(
			pow(trayX.pos1 - trayX.pos2, 2) + pow(trayY.pos1 - trayY.pos2, 2),
 8002b38:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002b3c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b44:	ee17 0a90 	vmov	r0, s15
 8002b48:	f7fd fcaa 	bl	80004a0 <__aeabi_f2d>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	ed9f 1bcd 	vldr	d1, [pc, #820]	; 8002e88 <calibrateTray+0x360>
 8002b54:	ec43 2b10 	vmov	d0, r2, r3
 8002b58:	f006 f97a 	bl	8008e50 <pow>
 8002b5c:	ec55 4b10 	vmov	r4, r5, d0
 8002b60:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002b64:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b6c:	ee17 0a90 	vmov	r0, s15
 8002b70:	f7fd fc96 	bl	80004a0 <__aeabi_f2d>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	ed9f 1bc3 	vldr	d1, [pc, #780]	; 8002e88 <calibrateTray+0x360>
 8002b7c:	ec43 2b10 	vmov	d0, r2, r3
 8002b80:	f006 f966 	bl	8008e50 <pow>
 8002b84:	ec53 2b10 	vmov	r2, r3, d0
	float length1 = pow(
 8002b88:	4620      	mov	r0, r4
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	f7fd fb2a 	bl	80001e4 <__adddf3>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	ec43 2b17 	vmov	d7, r2, r3
 8002b98:	ed9f 1bbd 	vldr	d1, [pc, #756]	; 8002e90 <calibrateTray+0x368>
 8002b9c:	eeb0 0a47 	vmov.f32	s0, s14
 8002ba0:	eef0 0a67 	vmov.f32	s1, s15
 8002ba4:	f006 f954 	bl	8008e50 <pow>
 8002ba8:	ec53 2b10 	vmov	r2, r3, d0
 8002bac:	4610      	mov	r0, r2
 8002bae:	4619      	mov	r1, r3
 8002bb0:	f7fd ffa6 	bl	8000b00 <__aeabi_d2f>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
			0.5);
	float length2 = pow(
			pow(trayX.pos2 - trayX.pos3, 2) + pow(trayY.pos2 - trayY.pos3, 2),
 8002bb8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002bbc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bc4:	ee17 0a90 	vmov	r0, s15
 8002bc8:	f7fd fc6a 	bl	80004a0 <__aeabi_f2d>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	ed9f 1bad 	vldr	d1, [pc, #692]	; 8002e88 <calibrateTray+0x360>
 8002bd4:	ec43 2b10 	vmov	d0, r2, r3
 8002bd8:	f006 f93a 	bl	8008e50 <pow>
 8002bdc:	ec55 4b10 	vmov	r4, r5, d0
 8002be0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002be4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bec:	ee17 0a90 	vmov	r0, s15
 8002bf0:	f7fd fc56 	bl	80004a0 <__aeabi_f2d>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	ed9f 1ba3 	vldr	d1, [pc, #652]	; 8002e88 <calibrateTray+0x360>
 8002bfc:	ec43 2b10 	vmov	d0, r2, r3
 8002c00:	f006 f926 	bl	8008e50 <pow>
 8002c04:	ec53 2b10 	vmov	r2, r3, d0
	float length2 = pow(
 8002c08:	4620      	mov	r0, r4
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	f7fd faea 	bl	80001e4 <__adddf3>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	ec43 2b17 	vmov	d7, r2, r3
 8002c18:	ed9f 1b9d 	vldr	d1, [pc, #628]	; 8002e90 <calibrateTray+0x368>
 8002c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c20:	eef0 0a67 	vmov.f32	s1, s15
 8002c24:	f006 f914 	bl	8008e50 <pow>
 8002c28:	ec53 2b10 	vmov	r2, r3, d0
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f7fd ff66 	bl	8000b00 <__aeabi_d2f>
 8002c34:	4603      	mov	r3, r0
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
			0.5);
	uint8_t k = 50;
 8002c38:	2332      	movs	r3, #50	; 0x32
 8002c3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (length1 > length2) {
 8002c3e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002c42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4e:	dd02      	ble.n	8002c56 <calibrateTray+0x12e>
		k = 60;
 8002c50:	233c      	movs	r3, #60	; 0x3c
 8002c52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	float length3 = trayY.pos1 - trayY.pos2;
 8002c56:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002c5a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float radians = acos(length3 / k);
 8002c66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c6a:	ee07 3a90 	vmov	s15, r3
 8002c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c72:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002c76:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c7a:	ee16 0a90 	vmov	r0, s13
 8002c7e:	f7fd fc0f 	bl	80004a0 <__aeabi_f2d>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	ec43 2b10 	vmov	d0, r2, r3
 8002c8a:	f006 f8ad 	bl	8008de8 <acos>
 8002c8e:	ec53 2b10 	vmov	r2, r3, d0
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	f7fd ff33 	bl	8000b00 <__aeabi_d2f>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	643b      	str	r3, [r7, #64]	; 0x40

	float TrayOriginX = trayX.pos2;
 8002c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
	float TrayOriginY = trayY.pos2;
 8002ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca4:	63bb      	str	r3, [r7, #56]	; 0x38
	int16_t writeDeg = 36000 - (radians * (180 / M_PI) * 100);
 8002ca6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002ca8:	f7fd fbfa 	bl	80004a0 <__aeabi_f2d>
 8002cac:	a37c      	add	r3, pc, #496	; (adr r3, 8002ea0 <calibrateTray+0x378>)
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	f7fd fc4d 	bl	8000550 <__aeabi_dmul>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	4b7d      	ldr	r3, [pc, #500]	; (8002eb8 <calibrateTray+0x390>)
 8002cc4:	f7fd fc44 	bl	8000550 <__aeabi_dmul>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	a172      	add	r1, pc, #456	; (adr r1, 8002e98 <calibrateTray+0x370>)
 8002cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cd2:	f7fd fa85 	bl	80001e0 <__aeabi_dsub>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f7fd fee7 	bl	8000ab0 <__aeabi_d2iz>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	86fb      	strh	r3, [r7, #54]	; 0x36
	if (k == 60) {
 8002ce6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002cea:	2b3c      	cmp	r3, #60	; 0x3c
 8002cec:	d133      	bne.n	8002d56 <calibrateTray+0x22e>

		TrayOriginX = trayX.pos3;
 8002cee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
		TrayOriginY = trayY.pos3;
 8002cf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cf4:	63bb      	str	r3, [r7, #56]	; 0x38
		writeDeg = 27000 - (radians * (180 / M_PI) * 100);
 8002cf6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002cf8:	f7fd fbd2 	bl	80004a0 <__aeabi_f2d>
 8002cfc:	a368      	add	r3, pc, #416	; (adr r3, 8002ea0 <calibrateTray+0x378>)
 8002cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d02:	f7fd fc25 	bl	8000550 <__aeabi_dmul>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	4b69      	ldr	r3, [pc, #420]	; (8002eb8 <calibrateTray+0x390>)
 8002d14:	f7fd fc1c 	bl	8000550 <__aeabi_dmul>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	a162      	add	r1, pc, #392	; (adr r1, 8002ea8 <calibrateTray+0x380>)
 8002d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d22:	f7fd fa5d 	bl	80001e0 <__aeabi_dsub>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f7fd febf 	bl	8000ab0 <__aeabi_d2iz>
 8002d32:	4603      	mov	r3, r0
 8002d34:	86fb      	strh	r3, [r7, #54]	; 0x36
		radians -= (1.5 * M_PI);
 8002d36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002d38:	f7fd fbb2 	bl	80004a0 <__aeabi_f2d>
 8002d3c:	a35c      	add	r3, pc, #368	; (adr r3, 8002eb0 <calibrateTray+0x388>)
 8002d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d42:	f7fd fa4d 	bl	80001e0 <__aeabi_dsub>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f7fd fed7 	bl	8000b00 <__aeabi_d2f>
 8002d52:	4603      	mov	r3, r0
 8002d54:	643b      	str	r3, [r7, #64]	; 0x40
	}

	float a[3] = { 10.0f, 30.0f, 50.0f };
 8002d56:	4a59      	ldr	r2, [pc, #356]	; (8002ebc <calibrateTray+0x394>)
 8002d58:	f107 0310 	add.w	r3, r7, #16
 8002d5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float b[3] = { 40.0f, 25.0f, 10.0f };
 8002d62:	4a57      	ldr	r2, [pc, #348]	; (8002ec0 <calibrateTray+0x398>)
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d68:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (int i = 0; i < 9; i++) {
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d70:	e060      	b.n	8002e34 <calibrateTray+0x30c>
		uint8_t index = i % 3;
 8002d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d74:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <calibrateTray+0x39c>)
 8002d76:	fb83 3102 	smull	r3, r1, r3, r2
 8002d7a:	17d3      	asrs	r3, r2, #31
 8002d7c:	1ac9      	subs	r1, r1, r3
 8002d7e:	460b      	mov	r3, r1
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	440b      	add	r3, r1
 8002d84:	1ad1      	subs	r1, r2, r3
 8002d86:	460b      	mov	r3, r1
 8002d88:	77fb      	strb	r3, [r7, #31]
		objPos[i].x = TrayOriginX + a[index];
 8002d8a:	7ffb      	ldrb	r3, [r7, #31]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	3348      	adds	r3, #72	; 0x48
 8002d90:	443b      	add	r3, r7
 8002d92:	3b38      	subs	r3, #56	; 0x38
 8002d94:	ed93 7a00 	vldr	s14, [r3]
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002da0:	4413      	add	r3, r2
 8002da2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002daa:	edc3 7a00 	vstr	s15, [r3]

		uint8_t row = i / 3;
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	4a44      	ldr	r2, [pc, #272]	; (8002ec4 <calibrateTray+0x39c>)
 8002db2:	fb82 1203 	smull	r1, r2, r2, r3
 8002db6:	17db      	asrs	r3, r3, #31
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	77bb      	strb	r3, [r7, #30]
		objPos[i].y = TrayOriginY + b[row];
 8002dbc:	7fbb      	ldrb	r3, [r7, #30]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	3348      	adds	r3, #72	; 0x48
 8002dc2:	443b      	add	r3, r7
 8002dc4:	3b44      	subs	r3, #68	; 0x44
 8002dc6:	ed93 7a00 	vldr	s14, [r3]
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002dd2:	4413      	add	r3, r2
 8002dd4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ddc:	edc3 7a01 	vstr	s15, [r3, #4]
		objPos[i] = rotatePoint(objPos[i].x, objPos[i].y, TrayOriginX,
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002de8:	4413      	add	r3, r2
 8002dea:	edd3 7a00 	vldr	s15, [r3]
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002df6:	4413      	add	r3, r2
 8002df8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002e04:	18d4      	adds	r4, r2, r3
 8002e06:	ed97 2a10 	vldr	s4, [r7, #64]	; 0x40
 8002e0a:	edd7 1a0e 	vldr	s3, [r7, #56]	; 0x38
 8002e0e:	ed97 1a0f 	vldr	s2, [r7, #60]	; 0x3c
 8002e12:	eef0 0a47 	vmov.f32	s1, s14
 8002e16:	eeb0 0a67 	vmov.f32	s0, s15
 8002e1a:	f000 f875 	bl	8002f08 <rotatePoint>
 8002e1e:	eeb0 7a40 	vmov.f32	s14, s0
 8002e22:	eef0 7a60 	vmov.f32	s15, s1
 8002e26:	ed84 7a00 	vstr	s14, [r4]
 8002e2a:	edc4 7a01 	vstr	s15, [r4, #4]
	for (int i = 0; i < 9; i++) {
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	3301      	adds	r3, #1
 8002e32:	633b      	str	r3, [r7, #48]	; 0x30
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	dd9b      	ble.n	8002d72 <calibrateTray+0x24a>
				TrayOriginY, radians);
	}

	int16_t writeTrayOriginX = TrayOriginX * 10; // CHANGE DATA TYPE
 8002e3a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002e3e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e4a:	ee17 3a90 	vmov	r3, s15
 8002e4e:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t writeTrayOriginY = TrayOriginY * 10; // CHANGE DATA TYPE
 8002e50:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002e54:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e60:	ee17 3a90 	vmov	r3, s15
 8002e64:	843b      	strh	r3, [r7, #32]
	if (calibrateTrayInput == 1) {
 8002e66:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <calibrateTray+0x3a0>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d130      	bne.n	8002ed0 <calibrateTray+0x3a8>
		registerFrame[32].U16 = writeTrayOriginX; // WRTTE : Pick Tray Origin x
 8002e6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002e70:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <calibrateTray+0x3a4>)
 8002e72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		registerFrame[33].U16 = writeTrayOriginY; // WRTTE : Pick Tray Origin y
 8002e76:	8c3a      	ldrh	r2, [r7, #32]
 8002e78:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <calibrateTray+0x3a4>)
 8002e7a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		registerFrame[34].U16 = writeDeg; // WRTTE : Pick Tray Orientation
 8002e7e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002e80:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <calibrateTray+0x3a4>)
 8002e82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		registerFrame[35].U16 = writeTrayOriginX; //  WRTTE : Place Tray Origin x
		registerFrame[36].U16 = writeTrayOriginY; // WRTTE : Place Tray Origin y
		registerFrame[37].U16 = writeDeg; // WRTTE : Place Tray Orientation
	}

}
 8002e86:	e033      	b.n	8002ef0 <calibrateTray+0x3c8>
 8002e88:	00000000 	.word	0x00000000
 8002e8c:	40000000 	.word	0x40000000
 8002e90:	00000000 	.word	0x00000000
 8002e94:	3fe00000 	.word	0x3fe00000
 8002e98:	00000000 	.word	0x00000000
 8002e9c:	40e19400 	.word	0x40e19400
 8002ea0:	1a63c1f8 	.word	0x1a63c1f8
 8002ea4:	404ca5dc 	.word	0x404ca5dc
 8002ea8:	00000000 	.word	0x00000000
 8002eac:	40da5e00 	.word	0x40da5e00
 8002eb0:	7f3321d2 	.word	0x7f3321d2
 8002eb4:	4012d97c 	.word	0x4012d97c
 8002eb8:	40590000 	.word	0x40590000
 8002ebc:	0800aba0 	.word	0x0800aba0
 8002ec0:	0800abac 	.word	0x0800abac
 8002ec4:	55555556 	.word	0x55555556
 8002ec8:	20000db8 	.word	0x20000db8
 8002ecc:	20000ccc 	.word	0x20000ccc
	} else if (calibrateTrayInput == 2) {
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <calibrateTray+0x3d8>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d10b      	bne.n	8002ef0 <calibrateTray+0x3c8>
		registerFrame[35].U16 = writeTrayOriginX; //  WRTTE : Place Tray Origin x
 8002ed8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <calibrateTray+0x3dc>)
 8002edc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		registerFrame[36].U16 = writeTrayOriginY; // WRTTE : Place Tray Origin y
 8002ee0:	8c3a      	ldrh	r2, [r7, #32]
 8002ee2:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <calibrateTray+0x3dc>)
 8002ee4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		registerFrame[37].U16 = writeDeg; // WRTTE : Place Tray Orientation
 8002ee8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <calibrateTray+0x3dc>)
 8002eec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 8002ef0:	bf00      	nop
 8002ef2:	3748      	adds	r7, #72	; 0x48
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002efa:	b004      	add	sp, #16
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	20000db8 	.word	0x20000db8
 8002f04:	20000ccc 	.word	0x20000ccc

08002f08 <rotatePoint>:

Point rotatePoint(float p1, float p2, float centerX, float centerY,
		float radians) {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b090      	sub	sp, #64	; 0x40
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002f12:	edc7 0a06 	vstr	s1, [r7, #24]
 8002f16:	ed87 1a05 	vstr	s2, [r7, #20]
 8002f1a:	edc7 1a04 	vstr	s3, [r7, #16]
 8002f1e:	ed87 2a03 	vstr	s4, [r7, #12]
	// ROTATION MATRIX
	float cosTheta = cosf(radians);
 8002f22:	ed97 0a03 	vldr	s0, [r7, #12]
 8002f26:	f005 fed5 	bl	8008cd4 <cosf>
 8002f2a:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	float sinTheta = sinf(radians);
 8002f2e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002f32:	f005 ff13 	bl	8008d5c <sinf>
 8002f36:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

	float translatedX = p1 - centerX;
 8002f3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f46:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float translatedY = p2 - centerY;
 8002f4a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f56:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	Point rotatedPoint;
	rotatedPoint.x = (translatedX * cosTheta) - (translatedY * sinTheta)
 8002f5a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002f5e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002f62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f66:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002f6a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f72:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ centerX;
 8002f76:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
	rotatedPoint.x = (translatedX * cosTheta) - (translatedY * sinTheta)
 8002f7e:	edc7 7a08 	vstr	s15, [r7, #32]
	rotatedPoint.y = (translatedX * sinTheta) + (translatedY * cosTheta)
 8002f82:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002f86:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f8e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002f92:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f9a:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ centerY;
 8002f9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
	rotatedPoint.y = (translatedX * sinTheta) + (translatedY * cosTheta)
 8002fa6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	return rotatedPoint;
 8002faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fae:	f107 0220 	add.w	r2, r7, #32
 8002fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fb6:	e883 0003 	stmia.w	r3, {r0, r1}
 8002fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbe:	ee07 2a10 	vmov	s14, r2
 8002fc2:	ee07 3a90 	vmov	s15, r3
}
 8002fc6:	eeb0 0a47 	vmov.f32	s0, s14
 8002fca:	eef0 0a67 	vmov.f32	s1, s15
 8002fce:	3740      	adds	r7, #64	; 0x40
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <buttonInput>:

void buttonInput() {
 8002fd4:	b598      	push	{r3, r4, r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
	register int i;
	for (i = 0; i < 4; i++) {
 8002fd8:	2400      	movs	r4, #0
 8002fda:	e051      	b.n	8003080 <buttonInput+0xac>
		Button1[i].Current = HAL_GPIO_ReadPin(joyPin[i].PORT, joyPin[i].PIN);
 8002fdc:	4b2b      	ldr	r3, [pc, #172]	; (800308c <buttonInput+0xb8>)
 8002fde:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 8002fe2:	492a      	ldr	r1, [pc, #168]	; (800308c <buttonInput+0xb8>)
 8002fe4:	00e3      	lsls	r3, r4, #3
 8002fe6:	440b      	add	r3, r1
 8002fe8:	889b      	ldrh	r3, [r3, #4]
 8002fea:	4619      	mov	r1, r3
 8002fec:	4610      	mov	r0, r2
 8002fee:	f002 f965 	bl	80052bc <HAL_GPIO_ReadPin>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b26      	ldr	r3, [pc, #152]	; (8003090 <buttonInput+0xbc>)
 8002ff8:	f803 2014 	strb.w	r2, [r3, r4, lsl #1]
		if (Button1[i].Last == 0 && Button1[i].Current == 1) {
 8002ffc:	4a24      	ldr	r2, [pc, #144]	; (8003090 <buttonInput+0xbc>)
 8002ffe:	0063      	lsls	r3, r4, #1
 8003000:	4413      	add	r3, r2
 8003002:	785b      	ldrb	r3, [r3, #1]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d132      	bne.n	800306e <buttonInput+0x9a>
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <buttonInput+0xbc>)
 800300a:	f813 3014 	ldrb.w	r3, [r3, r4, lsl #1]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d12d      	bne.n	800306e <buttonInput+0x9a>
			if (i == 0) {
 8003012:	2c00      	cmp	r4, #0
 8003014:	d105      	bne.n	8003022 <buttonInput+0x4e>
				countTopB += 1;
 8003016:	4b1f      	ldr	r3, [pc, #124]	; (8003094 <buttonInput+0xc0>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	3301      	adds	r3, #1
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <buttonInput+0xc0>)
 8003020:	701a      	strb	r2, [r3, #0]
			}
			if (i == 1) {
 8003022:	2c01      	cmp	r4, #1
 8003024:	d108      	bne.n	8003038 <buttonInput+0x64>
				countRightB += 1;
 8003026:	4b1c      	ldr	r3, [pc, #112]	; (8003098 <buttonInput+0xc4>)
 8003028:	f993 3000 	ldrsb.w	r3, [r3]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	3301      	adds	r3, #1
 8003030:	b2db      	uxtb	r3, r3
 8003032:	b25a      	sxtb	r2, r3
 8003034:	4b18      	ldr	r3, [pc, #96]	; (8003098 <buttonInput+0xc4>)
 8003036:	701a      	strb	r2, [r3, #0]
			}
			if (i == 2) {
 8003038:	2c02      	cmp	r4, #2
 800303a:	d105      	bne.n	8003048 <buttonInput+0x74>
				countBottomB += 1;
 800303c:	4b17      	ldr	r3, [pc, #92]	; (800309c <buttonInput+0xc8>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	b2da      	uxtb	r2, r3
 8003044:	4b15      	ldr	r3, [pc, #84]	; (800309c <buttonInput+0xc8>)
 8003046:	701a      	strb	r2, [r3, #0]
			}
			if (i == 3) {
 8003048:	2c03      	cmp	r4, #3
 800304a:	d105      	bne.n	8003058 <buttonInput+0x84>
				countLeftB += 1;
 800304c:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <buttonInput+0xcc>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	3301      	adds	r3, #1
 8003052:	b2da      	uxtb	r2, r3
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <buttonInput+0xcc>)
 8003056:	701a      	strb	r2, [r3, #0]

			}
			Button1[i].Last = Button1[i].Current;
 8003058:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <buttonInput+0xbc>)
 800305a:	f813 1014 	ldrb.w	r1, [r3, r4, lsl #1]
 800305e:	4a0c      	ldr	r2, [pc, #48]	; (8003090 <buttonInput+0xbc>)
 8003060:	0063      	lsls	r3, r4, #1
 8003062:	4413      	add	r3, r2
 8003064:	460a      	mov	r2, r1
 8003066:	705a      	strb	r2, [r3, #1]
			joyLogic = i;
 8003068:	b2e2      	uxtb	r2, r4
 800306a:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <buttonInput+0xd0>)
 800306c:	701a      	strb	r2, [r3, #0]
		}
		Button1[i].Last = Button1[i].Current;
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <buttonInput+0xbc>)
 8003070:	f813 1014 	ldrb.w	r1, [r3, r4, lsl #1]
 8003074:	4a06      	ldr	r2, [pc, #24]	; (8003090 <buttonInput+0xbc>)
 8003076:	0063      	lsls	r3, r4, #1
 8003078:	4413      	add	r3, r2
 800307a:	460a      	mov	r2, r1
 800307c:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 4; i++) {
 800307e:	3401      	adds	r4, #1
 8003080:	2c03      	cmp	r4, #3
 8003082:	ddab      	ble.n	8002fdc <buttonInput+0x8>
	}
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	bd98      	pop	{r3, r4, r7, pc}
 800308a:	bf00      	nop
 800308c:	20000200 	.word	0x20000200
 8003090:	20000d58 	.word	0x20000d58
 8003094:	20000d89 	.word	0x20000d89
 8003098:	20000d8a 	.word	0x20000d8a
 800309c:	20000d88 	.word	0x20000d88
 80030a0:	20000d8b 	.word	0x20000d8b
 80030a4:	20000d8c 	.word	0x20000d8c

080030a8 <buttonLogic>:

void buttonLogic(uint16_t state) {
 80030a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030aa:	b08d      	sub	sp, #52	; 0x34
 80030ac:	af0a      	add	r7, sp, #40	; 0x28
 80030ae:	4603      	mov	r3, r0
 80030b0:	80fb      	strh	r3, [r7, #6]
	if (countTopB % 2 == 1) {
 80030b2:	4b9e      	ldr	r3, [pc, #632]	; (800332c <buttonLogic+0x284>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d035      	beq.n	800312c <buttonLogic+0x84>
		countRightB = 0;
 80030c0:	4b9b      	ldr	r3, [pc, #620]	; (8003330 <buttonLogic+0x288>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
		switch (state) {
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d830      	bhi.n	800312e <buttonLogic+0x86>
 80030cc:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <buttonLogic+0x2c>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	080030e5 	.word	0x080030e5
 80030d8:	080030ff 	.word	0x080030ff
 80030dc:	08003107 	.word	0x08003107
 80030e0:	08003125 	.word	0x08003125
		case 0: // ENTER JOG MODE
			joyLogicLED = 1;
 80030e4:	4b93      	ldr	r3, [pc, #588]	; (8003334 <buttonLogic+0x28c>)
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
			if (switchAxis) {
 80030ea:	4b93      	ldr	r3, [pc, #588]	; (8003338 <buttonLogic+0x290>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <buttonLogic+0x50>
				jogAxisY();
 80030f2:	f7ff f85b 	bl	80021ac <jogAxisY>
			} else {
				jogAxisX();
			}
			break;
 80030f6:	e01a      	b.n	800312e <buttonLogic+0x86>
				jogAxisX();
 80030f8:	f000 fa74 	bl	80035e4 <jogAxisX>
			break;
 80030fc:	e017      	b.n	800312e <buttonLogic+0x86>
		case 1: // RIGHT

			joyLogic = 0;
 80030fe:	4b8f      	ldr	r3, [pc, #572]	; (800333c <buttonLogic+0x294>)
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
			break;
 8003104:	e013      	b.n	800312e <buttonLogic+0x86>
		case 2: // CHANGE AXIS X/Y
			if (switchAxis) {
 8003106:	4b8c      	ldr	r3, [pc, #560]	; (8003338 <buttonLogic+0x290>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <buttonLogic+0x6e>
				switchAxis = 0;
 800310e:	4b8a      	ldr	r3, [pc, #552]	; (8003338 <buttonLogic+0x290>)
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	e002      	b.n	800311c <buttonLogic+0x74>
			} else {
				switchAxis = 1;
 8003116:	4b88      	ldr	r3, [pc, #544]	; (8003338 <buttonLogic+0x290>)
 8003118:	2201      	movs	r2, #1
 800311a:	701a      	strb	r2, [r3, #0]
			}
			joyLogic = 0;
 800311c:	4b87      	ldr	r3, [pc, #540]	; (800333c <buttonLogic+0x294>)
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
			break;
 8003122:	e004      	b.n	800312e <buttonLogic+0x86>
		case 3: // LEFT
			joyLogic = 0;
 8003124:	4b85      	ldr	r3, [pc, #532]	; (800333c <buttonLogic+0x294>)
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]

			break;
 800312a:	e000      	b.n	800312e <buttonLogic+0x86>
		}
	}
 800312c:	bf00      	nop
	if (countTopB % 2 == 0) {
 800312e:	4b7f      	ldr	r3, [pc, #508]	; (800332c <buttonLogic+0x284>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	f040 80f1 	bne.w	8003320 <buttonLogic+0x278>
		switch (state) {
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	2b03      	cmp	r3, #3
 8003142:	f200 80ee 	bhi.w	8003322 <buttonLogic+0x27a>
 8003146:	a201      	add	r2, pc, #4	; (adr r2, 800314c <buttonLogic+0xa4>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	0800315d 	.word	0x0800315d
 8003150:	08003189 	.word	0x08003189
 8003154:	080032ff 	.word	0x080032ff
 8003158:	08003307 	.word	0x08003307
		case 0: // ENTER CALIBRATE MODE
			if (countRightB == 3)
 800315c:	4b74      	ldr	r3, [pc, #464]	; (8003330 <buttonLogic+0x288>)
 800315e:	f993 3000 	ldrsb.w	r3, [r3]
 8003162:	2b03      	cmp	r3, #3
 8003164:	d103      	bne.n	800316e <buttonLogic+0xc6>
			{
				joyLogicLED = 3;
 8003166:	4b73      	ldr	r3, [pc, #460]	; (8003334 <buttonLogic+0x28c>)
 8003168:	2203      	movs	r2, #3
 800316a:	701a      	strb	r2, [r3, #0]
			else
			{
				joyLogicLED = 2;
			}

			break;
 800316c:	e0d9      	b.n	8003322 <buttonLogic+0x27a>
			else if (countRightB == 6)
 800316e:	4b70      	ldr	r3, [pc, #448]	; (8003330 <buttonLogic+0x288>)
 8003170:	f993 3000 	ldrsb.w	r3, [r3]
 8003174:	2b06      	cmp	r3, #6
 8003176:	d103      	bne.n	8003180 <buttonLogic+0xd8>
				joyLogicLED = 4;
 8003178:	4b6e      	ldr	r3, [pc, #440]	; (8003334 <buttonLogic+0x28c>)
 800317a:	2204      	movs	r2, #4
 800317c:	701a      	strb	r2, [r3, #0]
			break;
 800317e:	e0d0      	b.n	8003322 <buttonLogic+0x27a>
				joyLogicLED = 2;
 8003180:	4b6c      	ldr	r3, [pc, #432]	; (8003334 <buttonLogic+0x28c>)
 8003182:	2202      	movs	r2, #2
 8003184:	701a      	strb	r2, [r3, #0]
			break;
 8003186:	e0cc      	b.n	8003322 <buttonLogic+0x27a>
		case 1: // MARK POSITION
			if (countRightB == 1) {
 8003188:	4b69      	ldr	r3, [pc, #420]	; (8003330 <buttonLogic+0x288>)
 800318a:	f993 3000 	ldrsb.w	r3, [r3]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d111      	bne.n	80031b6 <buttonLogic+0x10e>
				registerFrame[16].U16 = 0b0000000000000001;// Jog Pick : y-axis Moving Status
 8003192:	4b6b      	ldr	r3, [pc, #428]	; (8003340 <buttonLogic+0x298>)
 8003194:	2201      	movs	r2, #1
 8003196:	841a      	strh	r2, [r3, #32]
				trayPickX.pos1 = registerFrame[68].U16; // READ : x-axis Actual Position
 8003198:	4b69      	ldr	r3, [pc, #420]	; (8003340 <buttonLogic+0x298>)
 800319a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a6:	4b67      	ldr	r3, [pc, #412]	; (8003344 <buttonLogic+0x29c>)
 80031a8:	edc3 7a00 	vstr	s15, [r3]
				trayPickY.pos1 = mmActPos;
 80031ac:	4b66      	ldr	r3, [pc, #408]	; (8003348 <buttonLogic+0x2a0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a66      	ldr	r2, [pc, #408]	; (800334c <buttonLogic+0x2a4>)
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	e09f      	b.n	80032f6 <buttonLogic+0x24e>
			} else if (countRightB == 2) {
 80031b6:	4b5e      	ldr	r3, [pc, #376]	; (8003330 <buttonLogic+0x288>)
 80031b8:	f993 3000 	ldrsb.w	r3, [r3]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d10e      	bne.n	80031de <buttonLogic+0x136>
				trayPickX.pos2 = registerFrame[68].U16; // READ : x-axis Actual Position
 80031c0:	4b5f      	ldr	r3, [pc, #380]	; (8003340 <buttonLogic+0x298>)
 80031c2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ce:	4b5d      	ldr	r3, [pc, #372]	; (8003344 <buttonLogic+0x29c>)
 80031d0:	edc3 7a01 	vstr	s15, [r3, #4]
				trayPickY.pos2 = mmActPos;
 80031d4:	4b5c      	ldr	r3, [pc, #368]	; (8003348 <buttonLogic+0x2a0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a5c      	ldr	r2, [pc, #368]	; (800334c <buttonLogic+0x2a4>)
 80031da:	6053      	str	r3, [r2, #4]
 80031dc:	e08b      	b.n	80032f6 <buttonLogic+0x24e>
			} else if (countRightB == 3) {
 80031de:	4b54      	ldr	r3, [pc, #336]	; (8003330 <buttonLogic+0x288>)
 80031e0:	f993 3000 	ldrsb.w	r3, [r3]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d12b      	bne.n	8003240 <buttonLogic+0x198>
				registerFrame[16].U16 = 0;
 80031e8:	4b55      	ldr	r3, [pc, #340]	; (8003340 <buttonLogic+0x298>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	841a      	strh	r2, [r3, #32]
				trayPickX.pos3 = registerFrame[68].U16; // READ : x-axis Actual Position
 80031ee:	4b54      	ldr	r3, [pc, #336]	; (8003340 <buttonLogic+0x298>)
 80031f0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fc:	4b51      	ldr	r3, [pc, #324]	; (8003344 <buttonLogic+0x29c>)
 80031fe:	edc3 7a02 	vstr	s15, [r3, #8]
				trayPickY.pos3 = mmActPos;
 8003202:	4b51      	ldr	r3, [pc, #324]	; (8003348 <buttonLogic+0x2a0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a51      	ldr	r2, [pc, #324]	; (800334c <buttonLogic+0x2a4>)
 8003208:	6093      	str	r3, [r2, #8]
				calibrateTrayInput = 1;
 800320a:	4b51      	ldr	r3, [pc, #324]	; (8003350 <buttonLogic+0x2a8>)
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
				calibrateTray(trayPickX, trayPickY, objPickPos);
 8003210:	4e4c      	ldr	r6, [pc, #304]	; (8003344 <buttonLogic+0x29c>)
 8003212:	4b50      	ldr	r3, [pc, #320]	; (8003354 <buttonLogic+0x2ac>)
 8003214:	9308      	str	r3, [sp, #32]
 8003216:	4b4d      	ldr	r3, [pc, #308]	; (800334c <buttonLogic+0x2a4>)
 8003218:	ac02      	add	r4, sp, #8
 800321a:	461d      	mov	r5, r3
 800321c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800321e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003220:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003224:	e884 0003 	stmia.w	r4, {r0, r1}
 8003228:	466a      	mov	r2, sp
 800322a:	f106 0310 	add.w	r3, r6, #16
 800322e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003232:	e882 0003 	stmia.w	r2, {r0, r1}
 8003236:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800323a:	f7ff fc75 	bl	8002b28 <calibrateTray>
 800323e:	e05a      	b.n	80032f6 <buttonLogic+0x24e>
			} else if (countRightB == 4) {
 8003240:	4b3b      	ldr	r3, [pc, #236]	; (8003330 <buttonLogic+0x288>)
 8003242:	f993 3000 	ldrsb.w	r3, [r3]
 8003246:	2b04      	cmp	r3, #4
 8003248:	d111      	bne.n	800326e <buttonLogic+0x1c6>
				registerFrame[16].U16 = 0b0000000000000010; // Jog Place : y-axis Moving Status
 800324a:	4b3d      	ldr	r3, [pc, #244]	; (8003340 <buttonLogic+0x298>)
 800324c:	2202      	movs	r2, #2
 800324e:	841a      	strh	r2, [r3, #32]
				trayPlaceX.pos1 = registerFrame[68].U16; // READ : x-axis Actual Position
 8003250:	4b3b      	ldr	r3, [pc, #236]	; (8003340 <buttonLogic+0x298>)
 8003252:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325e:	4b3e      	ldr	r3, [pc, #248]	; (8003358 <buttonLogic+0x2b0>)
 8003260:	edc3 7a00 	vstr	s15, [r3]
				trayPlaceY.pos1 = mmActPos;
 8003264:	4b38      	ldr	r3, [pc, #224]	; (8003348 <buttonLogic+0x2a0>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a3c      	ldr	r2, [pc, #240]	; (800335c <buttonLogic+0x2b4>)
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	e043      	b.n	80032f6 <buttonLogic+0x24e>
			} else if (countRightB == 5) {
 800326e:	4b30      	ldr	r3, [pc, #192]	; (8003330 <buttonLogic+0x288>)
 8003270:	f993 3000 	ldrsb.w	r3, [r3]
 8003274:	2b05      	cmp	r3, #5
 8003276:	d10e      	bne.n	8003296 <buttonLogic+0x1ee>
				trayPlaceX.pos2 = registerFrame[68].U16; // READ : x-axis Actual Position
 8003278:	4b31      	ldr	r3, [pc, #196]	; (8003340 <buttonLogic+0x298>)
 800327a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003286:	4b34      	ldr	r3, [pc, #208]	; (8003358 <buttonLogic+0x2b0>)
 8003288:	edc3 7a01 	vstr	s15, [r3, #4]
				trayPlaceY.pos2 = mmActPos;
 800328c:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <buttonLogic+0x2a0>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a32      	ldr	r2, [pc, #200]	; (800335c <buttonLogic+0x2b4>)
 8003292:	6053      	str	r3, [r2, #4]
 8003294:	e02f      	b.n	80032f6 <buttonLogic+0x24e>
			} else if (countRightB == 6) {
 8003296:	4b26      	ldr	r3, [pc, #152]	; (8003330 <buttonLogic+0x288>)
 8003298:	f993 3000 	ldrsb.w	r3, [r3]
 800329c:	2b06      	cmp	r3, #6
 800329e:	d12a      	bne.n	80032f6 <buttonLogic+0x24e>
				registerFrame[16].U16 = 0;
 80032a0:	4b27      	ldr	r3, [pc, #156]	; (8003340 <buttonLogic+0x298>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	841a      	strh	r2, [r3, #32]
				trayPlaceX.pos3 = registerFrame[68].U16; // READ : x-axis Actual Position
 80032a6:	4b26      	ldr	r3, [pc, #152]	; (8003340 <buttonLogic+0x298>)
 80032a8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80032ac:	ee07 3a90 	vmov	s15, r3
 80032b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b4:	4b28      	ldr	r3, [pc, #160]	; (8003358 <buttonLogic+0x2b0>)
 80032b6:	edc3 7a02 	vstr	s15, [r3, #8]
				trayPlaceY.pos3 = mmActPos;
 80032ba:	4b23      	ldr	r3, [pc, #140]	; (8003348 <buttonLogic+0x2a0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a27      	ldr	r2, [pc, #156]	; (800335c <buttonLogic+0x2b4>)
 80032c0:	6093      	str	r3, [r2, #8]
				calibrateTrayInput = 2;
 80032c2:	4b23      	ldr	r3, [pc, #140]	; (8003350 <buttonLogic+0x2a8>)
 80032c4:	2202      	movs	r2, #2
 80032c6:	701a      	strb	r2, [r3, #0]
				calibrateTray(trayPlaceX, trayPlaceY, objPlacePos);
 80032c8:	4e23      	ldr	r6, [pc, #140]	; (8003358 <buttonLogic+0x2b0>)
 80032ca:	4b25      	ldr	r3, [pc, #148]	; (8003360 <buttonLogic+0x2b8>)
 80032cc:	9308      	str	r3, [sp, #32]
 80032ce:	4b23      	ldr	r3, [pc, #140]	; (800335c <buttonLogic+0x2b4>)
 80032d0:	ac02      	add	r4, sp, #8
 80032d2:	461d      	mov	r5, r3
 80032d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80032dc:	e884 0003 	stmia.w	r4, {r0, r1}
 80032e0:	466a      	mov	r2, sp
 80032e2:	f106 0310 	add.w	r3, r6, #16
 80032e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80032ea:	e882 0003 	stmia.w	r2, {r0, r1}
 80032ee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80032f2:	f7ff fc19 	bl	8002b28 <calibrateTray>
			}
			joyLogic = 0;
 80032f6:	4b11      	ldr	r3, [pc, #68]	; (800333c <buttonLogic+0x294>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
			break;
 80032fc:	e011      	b.n	8003322 <buttonLogic+0x27a>
		case 2: // OPEN LASER
			joyLogic = 0;
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <buttonLogic+0x294>)
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]

			break;
 8003304:	e00d      	b.n	8003322 <buttonLogic+0x27a>
		case 3: //  DELETE
			countRightB -= 1;
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <buttonLogic+0x288>)
 8003308:	f993 3000 	ldrsb.w	r3, [r3]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	b25a      	sxtb	r2, r3
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <buttonLogic+0x288>)
 8003316:	701a      	strb	r2, [r3, #0]
			joyLogic = 0;
 8003318:	4b08      	ldr	r3, [pc, #32]	; (800333c <buttonLogic+0x294>)
 800331a:	2200      	movs	r2, #0
 800331c:	701a      	strb	r2, [r3, #0]
			break;
 800331e:	e000      	b.n	8003322 <buttonLogic+0x27a>
		}
	}
 8003320:	bf00      	nop

}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800332a:	bf00      	nop
 800332c:	20000d89 	.word	0x20000d89
 8003330:	20000d8a 	.word	0x20000d8a
 8003334:	20000229 	.word	0x20000229
 8003338:	20000228 	.word	0x20000228
 800333c:	20000d8c 	.word	0x20000d8c
 8003340:	20000ccc 	.word	0x20000ccc
 8003344:	20000e50 	.word	0x20000e50
 8003348:	20000da0 	.word	0x20000da0
 800334c:	20000e68 	.word	0x20000e68
 8003350:	20000db8 	.word	0x20000db8
 8003354:	20000dc0 	.word	0x20000dc0
 8003358:	20000e80 	.word	0x20000e80
 800335c:	20000e98 	.word	0x20000e98
 8003360:	20000e08 	.word	0x20000e08

08003364 <joyDisplayLED>:

void joyDisplayLED() {
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
	if (joyLogicLED == 1) {
 8003368:	4b20      	ldr	r3, [pc, #128]	; (80033ec <joyDisplayLED+0x88>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d10c      	bne.n	800338a <joyDisplayLED+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8003370:	2201      	movs	r2, #1
 8003372:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003376:	481e      	ldr	r0, [pc, #120]	; (80033f0 <joyDisplayLED+0x8c>)
 8003378:	f001 ffb8 	bl	80052ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800337c:	2200      	movs	r2, #0
 800337e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003382:	481b      	ldr	r0, [pc, #108]	; (80033f0 <joyDisplayLED+0x8c>)
 8003384:	f001 ffb2 	bl	80052ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
	} else if (joyLogicLED == 4) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
	}
}
 8003388:	e02e      	b.n	80033e8 <joyDisplayLED+0x84>
	} else if (joyLogicLED == 2) {
 800338a:	4b18      	ldr	r3, [pc, #96]	; (80033ec <joyDisplayLED+0x88>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d10c      	bne.n	80033ac <joyDisplayLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8003392:	2200      	movs	r2, #0
 8003394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003398:	4815      	ldr	r0, [pc, #84]	; (80033f0 <joyDisplayLED+0x8c>)
 800339a:	f001 ffa7 	bl	80052ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 800339e:	2201      	movs	r2, #1
 80033a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033a4:	4812      	ldr	r0, [pc, #72]	; (80033f0 <joyDisplayLED+0x8c>)
 80033a6:	f001 ffa1 	bl	80052ec <HAL_GPIO_WritePin>
}
 80033aa:	e01d      	b.n	80033e8 <joyDisplayLED+0x84>
	} else if (joyLogicLED == 3) {
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <joyDisplayLED+0x88>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d10b      	bne.n	80033cc <joyDisplayLED+0x68>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 80033b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033b8:	480d      	ldr	r0, [pc, #52]	; (80033f0 <joyDisplayLED+0x8c>)
 80033ba:	f001 ffb0 	bl	800531e <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 80033be:	2201      	movs	r2, #1
 80033c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033c4:	480a      	ldr	r0, [pc, #40]	; (80033f0 <joyDisplayLED+0x8c>)
 80033c6:	f001 ff91 	bl	80052ec <HAL_GPIO_WritePin>
}
 80033ca:	e00d      	b.n	80033e8 <joyDisplayLED+0x84>
	} else if (joyLogicLED == 4) {
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <joyDisplayLED+0x88>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d109      	bne.n	80033e8 <joyDisplayLED+0x84>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 80033d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033d8:	4805      	ldr	r0, [pc, #20]	; (80033f0 <joyDisplayLED+0x8c>)
 80033da:	f001 ffa0 	bl	800531e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 80033de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033e2:	4803      	ldr	r0, [pc, #12]	; (80033f0 <joyDisplayLED+0x8c>)
 80033e4:	f001 ff9b 	bl	800531e <HAL_GPIO_TogglePin>
}
 80033e8:	bf00      	nop
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20000229 	.word	0x20000229
 80033f0:	40020800 	.word	0x40020800
 80033f4:	00000000 	.word	0x00000000

080033f8 <robotArmState>:

void robotArmState(uint16_t state) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	80fb      	strh	r3, [r7, #6]

	switch (state) {
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	3b01      	subs	r3, #1
 8003406:	2b0f      	cmp	r3, #15
 8003408:	f200 80cf 	bhi.w	80035aa <robotArmState+0x1b2>
 800340c:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <robotArmState+0x1c>)
 800340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003412:	bf00      	nop
 8003414:	08003455 	.word	0x08003455
 8003418:	0800347f 	.word	0x0800347f
 800341c:	080035ab 	.word	0x080035ab
 8003420:	080034a9 	.word	0x080034a9
 8003424:	080035ab 	.word	0x080035ab
 8003428:	080035ab 	.word	0x080035ab
 800342c:	080035ab 	.word	0x080035ab
 8003430:	080034dd 	.word	0x080034dd
 8003434:	080035ab 	.word	0x080035ab
 8003438:	080035ab 	.word	0x080035ab
 800343c:	080035ab 	.word	0x080035ab
 8003440:	080035ab 	.word	0x080035ab
 8003444:	080035ab 	.word	0x080035ab
 8003448:	080035ab 	.word	0x080035ab
 800344c:	080035ab 	.word	0x080035ab
 8003450:	080034f7 	.word	0x080034f7
	case 0b0000000000000001: // SET PICK TRAY
		pilotLamp(0, 0);
 8003454:	2100      	movs	r1, #0
 8003456:	2000      	movs	r0, #0
 8003458:	f000 f922 	bl	80036a0 <pilotLamp>
		pilotLamp(1, 1);
 800345c:	2101      	movs	r1, #1
 800345e:	2001      	movs	r0, #1
 8003460:	f000 f91e 	bl	80036a0 <pilotLamp>
		pilotLamp(2, 0);
 8003464:	2100      	movs	r1, #0
 8003466:	2002      	movs	r0, #2
 8003468:	f000 f91a 	bl	80036a0 <pilotLamp>
		buttonInput();
 800346c:	f7ff fdb2 	bl	8002fd4 <buttonInput>
		buttonLogic(joyLogic);
 8003470:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <robotArmState+0x1c8>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	b29b      	uxth	r3, r3
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fe16 	bl	80030a8 <buttonLogic>
		break;
 800347c:	e095      	b.n	80035aa <robotArmState+0x1b2>
	case 0b0000000000000010: // SET PLACE TRAY
		pilotLamp(0, 0);
 800347e:	2100      	movs	r1, #0
 8003480:	2000      	movs	r0, #0
 8003482:	f000 f90d 	bl	80036a0 <pilotLamp>
		pilotLamp(1, 1);
 8003486:	2101      	movs	r1, #1
 8003488:	2001      	movs	r0, #1
 800348a:	f000 f909 	bl	80036a0 <pilotLamp>
		pilotLamp(2, 0);
 800348e:	2100      	movs	r1, #0
 8003490:	2002      	movs	r0, #2
 8003492:	f000 f905 	bl	80036a0 <pilotLamp>
		buttonInput();
 8003496:	f7ff fd9d 	bl	8002fd4 <buttonInput>
		buttonLogic(joyLogic);
 800349a:	4b49      	ldr	r3, [pc, #292]	; (80035c0 <robotArmState+0x1c8>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fe01 	bl	80030a8 <buttonLogic>
		break;
 80034a6:	e080      	b.n	80035aa <robotArmState+0x1b2>
	case 0b0000000000000100: // HOME
		pilotLamp(0, 1);
 80034a8:	2101      	movs	r1, #1
 80034aa:	2000      	movs	r0, #0
 80034ac:	f000 f8f8 	bl	80036a0 <pilotLamp>
		pilotLamp(1, 0);
 80034b0:	2100      	movs	r1, #0
 80034b2:	2001      	movs	r0, #1
 80034b4:	f000 f8f4 	bl	80036a0 <pilotLamp>
		pilotLamp(2, 0);
 80034b8:	2100      	movs	r1, #0
 80034ba:	2002      	movs	r0, #2
 80034bc:	f000 f8f0 	bl	80036a0 <pilotLamp>
		registerFrame[1].U16 = 0; // RESET : Base System Status
 80034c0:	4b40      	ldr	r3, [pc, #256]	; (80035c4 <robotArmState+0x1cc>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 0b0000000000000100; // HOME : y-axis Moving Status
 80034c6:	4b3f      	ldr	r3, [pc, #252]	; (80035c4 <robotArmState+0x1cc>)
 80034c8:	2204      	movs	r2, #4
 80034ca:	841a      	strh	r2, [r3, #32]
		registerFrame[64].U16 = 0b0000000000000001; // HOME : x-axis Moving Status
 80034cc:	4b3d      	ldr	r3, [pc, #244]	; (80035c4 <robotArmState+0x1cc>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		startSetHome = 1; // START HOME -> Function
 80034d4:	4b3c      	ldr	r3, [pc, #240]	; (80035c8 <robotArmState+0x1d0>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]
		break;
 80034da:	e066      	b.n	80035aa <robotArmState+0x1b2>
	case 0b0000000000001000: // RUN TRAY MODE
		// 18 PATH
		pilotLamp(0, 0);
 80034dc:	2100      	movs	r1, #0
 80034de:	2000      	movs	r0, #0
 80034e0:	f000 f8de 	bl	80036a0 <pilotLamp>
		pilotLamp(1, 0);
 80034e4:	2100      	movs	r1, #0
 80034e6:	2001      	movs	r0, #1
 80034e8:	f000 f8da 	bl	80036a0 <pilotLamp>
		pilotLamp(2, 1);
 80034ec:	2101      	movs	r1, #1
 80034ee:	2002      	movs	r0, #2
 80034f0:	f000 f8d6 	bl	80036a0 <pilotLamp>
		break;
 80034f4:	e059      	b.n	80035aa <robotArmState+0x1b2>
	case 0b0000000000010000: // RUN POINT MODE
		pilotLamp(0, 0);
 80034f6:	2100      	movs	r1, #0
 80034f8:	2000      	movs	r0, #0
 80034fa:	f000 f8d1 	bl	80036a0 <pilotLamp>
		pilotLamp(1, 0);
 80034fe:	2100      	movs	r1, #0
 8003500:	2001      	movs	r0, #1
 8003502:	f000 f8cd 	bl	80036a0 <pilotLamp>
		pilotLamp(2, 1);
 8003506:	2101      	movs	r1, #1
 8003508:	2002      	movs	r0, #2
 800350a:	f000 f8c9 	bl	80036a0 <pilotLamp>
		// POSITION
		registerFrame[1].U16 = 0; // RESET: Base System Status
 800350e:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <robotArmState+0x1cc>)
 8003510:	2200      	movs	r2, #0
 8003512:	805a      	strh	r2, [r3, #2]

		// X-Point
		registerFrame[64].U16 = 2; // RUN : x-axis Moving Status
 8003514:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <robotArmState+0x1cc>)
 8003516:	2202      	movs	r2, #2
 8003518:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		registerFrame[65].U16 = registerFrame[48].U16; // SET : x-axis Target Position = Read : Goal Point x
 800351c:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <robotArmState+0x1cc>)
 800351e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8003522:	4b28      	ldr	r3, [pc, #160]	; (80035c4 <robotArmState+0x1cc>)
 8003524:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		registerFrame[66].U16 = 3000; // SET : x-axis Target Speed
 8003528:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <robotArmState+0x1cc>)
 800352a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800352e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		registerFrame[67].U16 = 1; // SET : x-axis Target Speed
 8003532:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <robotArmState+0x1cc>)
 8003534:	2201      	movs	r2, #1
 8003536:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

		// Y-Point
		startPointModeY = 1; // START POINT MODE -> OnlyPositionControl Function
 800353a:	4b24      	ldr	r3, [pc, #144]	; (80035cc <robotArmState+0x1d4>)
 800353c:	2201      	movs	r2, #1
 800353e:	701a      	strb	r2, [r3, #0]
		initPosY = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 8003540:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <robotArmState+0x1d8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7fc ff99 	bl	800047c <__aeabi_i2d>
 800354a:	a31b      	add	r3, pc, #108	; (adr r3, 80035b8 <robotArmState+0x1c0>)
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	f7fc fffe 	bl	8000550 <__aeabi_dmul>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4610      	mov	r0, r2
 800355a:	4619      	mov	r1, r3
 800355c:	f7fd faa8 	bl	8000ab0 <__aeabi_d2iz>
 8003560:	4603      	mov	r3, r0
 8003562:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <robotArmState+0x1dc>)
 8003564:	6013      	str	r3, [r2, #0]

		registerFrame[16].U16 = 0b0000000000100000; // Go Point : y-axis Moving Status
 8003566:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <robotArmState+0x1cc>)
 8003568:	2220      	movs	r2, #32
 800356a:	841a      	strh	r2, [r3, #32]
		registerFrame[17].U16 = mmActPos; // WRITE : y-axis Actual Position
 800356c:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <robotArmState+0x1e0>)
 800356e:	edd3 7a00 	vldr	s15, [r3]
 8003572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003576:	ee17 3a90 	vmov	r3, s15
 800357a:	b29a      	uxth	r2, r3
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <robotArmState+0x1cc>)
 800357e:	845a      	strh	r2, [r3, #34]	; 0x22
		registerFrame[18].U16 = mmActVel; // WRITE : y-axis Actual Speed
 8003580:	4b16      	ldr	r3, [pc, #88]	; (80035dc <robotArmState+0x1e4>)
 8003582:	edd3 7a00 	vldr	s15, [r3]
 8003586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800358a:	ee17 3a90 	vmov	r3, s15
 800358e:	b29a      	uxth	r2, r3
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <robotArmState+0x1cc>)
 8003592:	849a      	strh	r2, [r3, #36]	; 0x24
		registerFrame[19].U16 = mmActAcc; // WRITE : y-axis Actual Acceleration
 8003594:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <robotArmState+0x1e8>)
 8003596:	edd3 7a00 	vldr	s15, [r3]
 800359a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800359e:	ee17 3a90 	vmov	r3, s15
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <robotArmState+0x1cc>)
 80035a6:	84da      	strh	r2, [r3, #38]	; 0x26
		break;
 80035a8:	bf00      	nop
	}
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	f3af 8000 	nop.w
 80035b8:	464f6faa 	.word	0x464f6faa
 80035bc:	3f8199cb 	.word	0x3f8199cb
 80035c0:	20000d8c 	.word	0x20000d8c
 80035c4:	20000ccc 	.word	0x20000ccc
 80035c8:	20000260 	.word	0x20000260
 80035cc:	20000ec1 	.word	0x20000ec1
 80035d0:	20000d98 	.word	0x20000d98
 80035d4:	20000ec4 	.word	0x20000ec4
 80035d8:	20000da0 	.word	0x20000da0
 80035dc:	20000da8 	.word	0x20000da8
 80035e0:	20000dac 	.word	0x20000dac

080035e4 <jogAxisX>:

void jogAxisX() {
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
	refXPos = buffer[0].subdata.xAxis;
 80035e8:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <jogAxisX+0x70>)
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	ee07 3a90 	vmov	s15, r3
 80035f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f4:	4b18      	ldr	r3, [pc, #96]	; (8003658 <jogAxisX+0x74>)
 80035f6:	edc3 7a00 	vstr	s15, [r3]
	if (refXPos > 2500) {
 80035fa:	4b17      	ldr	r3, [pc, #92]	; (8003658 <jogAxisX+0x74>)
 80035fc:	edd3 7a00 	vldr	s15, [r3]
 8003600:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800365c <jogAxisX+0x78>
 8003604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360c:	dd07      	ble.n	800361e <jogAxisX+0x3a>
		dirAxisX = 1;
 800360e:	4b14      	ldr	r3, [pc, #80]	; (8003660 <jogAxisX+0x7c>)
 8003610:	2201      	movs	r2, #1
 8003612:	701a      	strb	r2, [r3, #0]
		registerFrame[64].U16 = 0b0000000000000100; // JOG RIGHT : x-axis Moving Status
 8003614:	4b13      	ldr	r3, [pc, #76]	; (8003664 <jogAxisX+0x80>)
 8003616:	2204      	movs	r2, #4
 8003618:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	} else {
		registerFrame[64].U16 = 0; // RESET : x-axis Moving Status

	}

}
 800361c:	e015      	b.n	800364a <jogAxisX+0x66>
	} else if (refXPos < 1500) {
 800361e:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <jogAxisX+0x74>)
 8003620:	edd3 7a00 	vldr	s15, [r3]
 8003624:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003668 <jogAxisX+0x84>
 8003628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800362c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003630:	d507      	bpl.n	8003642 <jogAxisX+0x5e>
		dirAxisX = 0;
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <jogAxisX+0x7c>)
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
		registerFrame[64].U16 = 0b0000000000001000; // JOG LEFT : x-axis Moving Status
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <jogAxisX+0x80>)
 800363a:	2208      	movs	r2, #8
 800363c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8003640:	e003      	b.n	800364a <jogAxisX+0x66>
		registerFrame[64].U16 = 0; // RESET : x-axis Moving Status
 8003642:	4b08      	ldr	r3, [pc, #32]	; (8003664 <jogAxisX+0x80>)
 8003644:	2200      	movs	r2, #0
 8003646:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 800364a:	bf00      	nop
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	20000d60 	.word	0x20000d60
 8003658:	20000220 	.word	0x20000220
 800365c:	451c4000 	.word	0x451c4000
 8003660:	20000245 	.word	0x20000245
 8003664:	20000ccc 	.word	0x20000ccc
 8003668:	44bb8000 	.word	0x44bb8000

0800366c <handleEmergency>:

void HAL_ADC_ConvCallback(ADC_HandleTypeDef *hadc) {

}

void handleEmergency() {
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == 0) {
 8003670:	2120      	movs	r1, #32
 8003672:	480a      	ldr	r0, [pc, #40]	; (800369c <handleEmergency+0x30>)
 8003674:	f001 fe22 	bl	80052bc <HAL_GPIO_ReadPin>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <handleEmergency+0x20>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 800367e:	2201      	movs	r2, #1
 8003680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003684:	4805      	ldr	r0, [pc, #20]	; (800369c <handleEmergency+0x30>)
 8003686:	f001 fe31 	bl	80052ec <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
    }
}
 800368a:	e005      	b.n	8003698 <handleEmergency+0x2c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 800368c:	2200      	movs	r2, #0
 800368e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003692:	4802      	ldr	r0, [pc, #8]	; (800369c <handleEmergency+0x30>)
 8003694:	f001 fe2a 	bl	80052ec <HAL_GPIO_WritePin>
}
 8003698:	bf00      	nop
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40020800 	.word	0x40020800

080036a0 <pilotLamp>:
void pilotLamp(uint8_t id, uint8_t status) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	460a      	mov	r2, r1
 80036aa:	71fb      	strb	r3, [r7, #7]
 80036ac:	4613      	mov	r3, r2
 80036ae:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(pilotLampPin[id].PORT, pilotLampPin[id].PIN, status);
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	4a08      	ldr	r2, [pc, #32]	; (80036d4 <pilotLamp+0x34>)
 80036b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	4a06      	ldr	r2, [pc, #24]	; (80036d4 <pilotLamp+0x34>)
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4413      	add	r3, r2
 80036c0:	889b      	ldrh	r3, [r3, #4]
 80036c2:	79ba      	ldrb	r2, [r7, #6]
 80036c4:	4619      	mov	r1, r3
 80036c6:	f001 fe11 	bl	80052ec <HAL_GPIO_WritePin>

}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	2000022c 	.word	0x2000022c

080036d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036dc:	b672      	cpsid	i
}
 80036de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80036e0:	e7fe      	b.n	80036e0 <Error_Handler+0x8>
	...

080036e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	607b      	str	r3, [r7, #4]
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <HAL_MspInit+0x4c>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	4a0f      	ldr	r2, [pc, #60]	; (8003730 <HAL_MspInit+0x4c>)
 80036f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f8:	6453      	str	r3, [r2, #68]	; 0x44
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <HAL_MspInit+0x4c>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003702:	607b      	str	r3, [r7, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_MspInit+0x4c>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	4a08      	ldr	r2, [pc, #32]	; (8003730 <HAL_MspInit+0x4c>)
 8003710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003714:	6413      	str	r3, [r2, #64]	; 0x40
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_MspInit+0x4c>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003722:	2007      	movs	r0, #7
 8003724:	f000 fff6 	bl	8004714 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003728:	bf00      	nop
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40023800 	.word	0x40023800

08003734 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	; 0x28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800373c:	f107 0314 	add.w	r3, r7, #20
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	60da      	str	r2, [r3, #12]
 800374a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a2f      	ldr	r2, [pc, #188]	; (8003810 <HAL_ADC_MspInit+0xdc>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d157      	bne.n	8003806 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	4b2e      	ldr	r3, [pc, #184]	; (8003814 <HAL_ADC_MspInit+0xe0>)
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	4a2d      	ldr	r2, [pc, #180]	; (8003814 <HAL_ADC_MspInit+0xe0>)
 8003760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003764:	6453      	str	r3, [r2, #68]	; 0x44
 8003766:	4b2b      	ldr	r3, [pc, #172]	; (8003814 <HAL_ADC_MspInit+0xe0>)
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	4b27      	ldr	r3, [pc, #156]	; (8003814 <HAL_ADC_MspInit+0xe0>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	4a26      	ldr	r2, [pc, #152]	; (8003814 <HAL_ADC_MspInit+0xe0>)
 800377c:	f043 0304 	orr.w	r3, r3, #4
 8003780:	6313      	str	r3, [r2, #48]	; 0x30
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_ADC_MspInit+0xe0>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800378e:	2309      	movs	r3, #9
 8003790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003792:	2303      	movs	r3, #3
 8003794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800379a:	f107 0314 	add.w	r3, r7, #20
 800379e:	4619      	mov	r1, r3
 80037a0:	481d      	ldr	r0, [pc, #116]	; (8003818 <HAL_ADC_MspInit+0xe4>)
 80037a2:	f001 fc07 	bl	8004fb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80037a6:	4b1d      	ldr	r3, [pc, #116]	; (800381c <HAL_ADC_MspInit+0xe8>)
 80037a8:	4a1d      	ldr	r2, [pc, #116]	; (8003820 <HAL_ADC_MspInit+0xec>)
 80037aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80037ac:	4b1b      	ldr	r3, [pc, #108]	; (800381c <HAL_ADC_MspInit+0xe8>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037b2:	4b1a      	ldr	r3, [pc, #104]	; (800381c <HAL_ADC_MspInit+0xe8>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80037b8:	4b18      	ldr	r3, [pc, #96]	; (800381c <HAL_ADC_MspInit+0xe8>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80037be:	4b17      	ldr	r3, [pc, #92]	; (800381c <HAL_ADC_MspInit+0xe8>)
 80037c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <HAL_ADC_MspInit+0xe8>)
 80037c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037ce:	4b13      	ldr	r3, [pc, #76]	; (800381c <HAL_ADC_MspInit+0xe8>)
 80037d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80037d6:	4b11      	ldr	r3, [pc, #68]	; (800381c <HAL_ADC_MspInit+0xe8>)
 80037d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80037de:	4b0f      	ldr	r3, [pc, #60]	; (800381c <HAL_ADC_MspInit+0xe8>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037e4:	4b0d      	ldr	r3, [pc, #52]	; (800381c <HAL_ADC_MspInit+0xe8>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80037ea:	480c      	ldr	r0, [pc, #48]	; (800381c <HAL_ADC_MspInit+0xe8>)
 80037ec:	f000 ffd4 	bl	8004798 <HAL_DMA_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80037f6:	f7ff ff6f 	bl	80036d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a07      	ldr	r2, [pc, #28]	; (800381c <HAL_ADC_MspInit+0xe8>)
 80037fe:	639a      	str	r2, [r3, #56]	; 0x38
 8003800:	4a06      	ldr	r2, [pc, #24]	; (800381c <HAL_ADC_MspInit+0xe8>)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003806:	bf00      	nop
 8003808:	3728      	adds	r7, #40	; 0x28
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40012000 	.word	0x40012000
 8003814:	40023800 	.word	0x40023800
 8003818:	40020800 	.word	0x40020800
 800381c:	2000033c 	.word	0x2000033c
 8003820:	40026410 	.word	0x40026410

08003824 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0e      	ldr	r2, [pc, #56]	; (800386c <HAL_TIM_PWM_MspInit+0x48>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d115      	bne.n	8003862 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <HAL_TIM_PWM_MspInit+0x4c>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	4a0c      	ldr	r2, [pc, #48]	; (8003870 <HAL_TIM_PWM_MspInit+0x4c>)
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	6453      	str	r3, [r2, #68]	; 0x44
 8003846:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <HAL_TIM_PWM_MspInit+0x4c>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003852:	2200      	movs	r2, #0
 8003854:	2100      	movs	r1, #0
 8003856:	201a      	movs	r0, #26
 8003858:	f000 ff67 	bl	800472a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800385c:	201a      	movs	r0, #26
 800385e:	f000 ff80 	bl	8004762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40010000 	.word	0x40010000
 8003870:	40023800 	.word	0x40023800

08003874 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003884:	d116      	bne.n	80038b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	4b28      	ldr	r3, [pc, #160]	; (800392c <HAL_TIM_Base_MspInit+0xb8>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	4a27      	ldr	r2, [pc, #156]	; (800392c <HAL_TIM_Base_MspInit+0xb8>)
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	6413      	str	r3, [r2, #64]	; 0x40
 8003896:	4b25      	ldr	r3, [pc, #148]	; (800392c <HAL_TIM_Base_MspInit+0xb8>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80038a2:	2200      	movs	r2, #0
 80038a4:	2100      	movs	r1, #0
 80038a6:	201c      	movs	r0, #28
 80038a8:	f000 ff3f 	bl	800472a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80038ac:	201c      	movs	r0, #28
 80038ae:	f000 ff58 	bl	8004762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80038b2:	e036      	b.n	8003922 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <HAL_TIM_Base_MspInit+0xbc>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d116      	bne.n	80038ec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	4b1a      	ldr	r3, [pc, #104]	; (800392c <HAL_TIM_Base_MspInit+0xb8>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	4a19      	ldr	r2, [pc, #100]	; (800392c <HAL_TIM_Base_MspInit+0xb8>)
 80038c8:	f043 0302 	orr.w	r3, r3, #2
 80038cc:	6413      	str	r3, [r2, #64]	; 0x40
 80038ce:	4b17      	ldr	r3, [pc, #92]	; (800392c <HAL_TIM_Base_MspInit+0xb8>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80038da:	2200      	movs	r2, #0
 80038dc:	2100      	movs	r1, #0
 80038de:	201d      	movs	r0, #29
 80038e0:	f000 ff23 	bl	800472a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80038e4:	201d      	movs	r0, #29
 80038e6:	f000 ff3c 	bl	8004762 <HAL_NVIC_EnableIRQ>
}
 80038ea:	e01a      	b.n	8003922 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a10      	ldr	r2, [pc, #64]	; (8003934 <HAL_TIM_Base_MspInit+0xc0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d115      	bne.n	8003922 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <HAL_TIM_Base_MspInit+0xb8>)
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	4a0b      	ldr	r2, [pc, #44]	; (800392c <HAL_TIM_Base_MspInit+0xb8>)
 8003900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003904:	6453      	str	r3, [r2, #68]	; 0x44
 8003906:	4b09      	ldr	r3, [pc, #36]	; (800392c <HAL_TIM_Base_MspInit+0xb8>)
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003912:	2200      	movs	r2, #0
 8003914:	2100      	movs	r1, #0
 8003916:	201a      	movs	r0, #26
 8003918:	f000 ff07 	bl	800472a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800391c:	201a      	movs	r0, #26
 800391e:	f000 ff20 	bl	8004762 <HAL_NVIC_EnableIRQ>
}
 8003922:	bf00      	nop
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40023800 	.word	0x40023800
 8003930:	40000400 	.word	0x40000400
 8003934:	40014800 	.word	0x40014800

08003938 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08a      	sub	sp, #40	; 0x28
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	60da      	str	r2, [r3, #12]
 800394e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a19      	ldr	r2, [pc, #100]	; (80039bc <HAL_TIM_Encoder_MspInit+0x84>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d12b      	bne.n	80039b2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	4a17      	ldr	r2, [pc, #92]	; (80039c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8003964:	f043 0308 	orr.w	r3, r3, #8
 8003968:	6413      	str	r3, [r2, #64]	; 0x40
 800396a:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <HAL_TIM_Encoder_MspInit+0x88>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <HAL_TIM_Encoder_MspInit+0x88>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4a10      	ldr	r2, [pc, #64]	; (80039c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
 8003986:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <HAL_TIM_Encoder_MspInit+0x88>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003992:	2303      	movs	r3, #3
 8003994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003996:	2302      	movs	r3, #2
 8003998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800399a:	2301      	movs	r3, #1
 800399c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399e:	2300      	movs	r3, #0
 80039a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80039a2:	2302      	movs	r3, #2
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a6:	f107 0314 	add.w	r3, r7, #20
 80039aa:	4619      	mov	r1, r3
 80039ac:	4805      	ldr	r0, [pc, #20]	; (80039c4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80039ae:	f001 fb01 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80039b2:	bf00      	nop
 80039b4:	3728      	adds	r7, #40	; 0x28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40000c00 	.word	0x40000c00
 80039c0:	40023800 	.word	0x40023800
 80039c4:	40020000 	.word	0x40020000

080039c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d0:	f107 030c 	add.w	r3, r7, #12
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a12      	ldr	r2, [pc, #72]	; (8003a30 <HAL_TIM_MspPostInit+0x68>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d11e      	bne.n	8003a28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <HAL_TIM_MspPostInit+0x6c>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	4a10      	ldr	r2, [pc, #64]	; (8003a34 <HAL_TIM_MspPostInit+0x6c>)
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	6313      	str	r3, [r2, #48]	; 0x30
 80039fa:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <HAL_TIM_MspPostInit+0x6c>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a1c:	f107 030c 	add.w	r3, r7, #12
 8003a20:	4619      	mov	r1, r3
 8003a22:	4805      	ldr	r0, [pc, #20]	; (8003a38 <HAL_TIM_MspPostInit+0x70>)
 8003a24:	f001 fac6 	bl	8004fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a28:	bf00      	nop
 8003a2a:	3720      	adds	r7, #32
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40020000 	.word	0x40020000

08003a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a44:	f107 0314 	add.w	r3, r7, #20
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
 8003a52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a34      	ldr	r2, [pc, #208]	; (8003b2c <HAL_UART_MspInit+0xf0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d161      	bne.n	8003b22 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	4b33      	ldr	r3, [pc, #204]	; (8003b30 <HAL_UART_MspInit+0xf4>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	4a32      	ldr	r2, [pc, #200]	; (8003b30 <HAL_UART_MspInit+0xf4>)
 8003a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a6e:	4b30      	ldr	r3, [pc, #192]	; (8003b30 <HAL_UART_MspInit+0xf4>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <HAL_UART_MspInit+0xf4>)
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	4a2b      	ldr	r2, [pc, #172]	; (8003b30 <HAL_UART_MspInit+0xf4>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8a:	4b29      	ldr	r3, [pc, #164]	; (8003b30 <HAL_UART_MspInit+0xf4>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003a96:	230c      	movs	r3, #12
 8003a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003aa6:	2307      	movs	r3, #7
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aaa:	f107 0314 	add.w	r3, r7, #20
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4820      	ldr	r0, [pc, #128]	; (8003b34 <HAL_UART_MspInit+0xf8>)
 8003ab2:	f001 fa7f 	bl	8004fb4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003ab6:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <HAL_UART_MspInit+0xfc>)
 8003ab8:	4a20      	ldr	r2, [pc, #128]	; (8003b3c <HAL_UART_MspInit+0x100>)
 8003aba:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003abc:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <HAL_UART_MspInit+0xfc>)
 8003abe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ac2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ac4:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <HAL_UART_MspInit+0xfc>)
 8003ac6:	2240      	movs	r2, #64	; 0x40
 8003ac8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aca:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <HAL_UART_MspInit+0xfc>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ad0:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <HAL_UART_MspInit+0xfc>)
 8003ad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ad6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ad8:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <HAL_UART_MspInit+0xfc>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ade:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <HAL_UART_MspInit+0xfc>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003ae4:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <HAL_UART_MspInit+0xfc>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003aea:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <HAL_UART_MspInit+0xfc>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003af0:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <HAL_UART_MspInit+0xfc>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003af6:	4810      	ldr	r0, [pc, #64]	; (8003b38 <HAL_UART_MspInit+0xfc>)
 8003af8:	f000 fe4e 	bl	8004798 <HAL_DMA_Init>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003b02:	f7ff fde9 	bl	80036d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a0b      	ldr	r2, [pc, #44]	; (8003b38 <HAL_UART_MspInit+0xfc>)
 8003b0a:	635a      	str	r2, [r3, #52]	; 0x34
 8003b0c:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <HAL_UART_MspInit+0xfc>)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b12:	2200      	movs	r2, #0
 8003b14:	2100      	movs	r1, #0
 8003b16:	2026      	movs	r0, #38	; 0x26
 8003b18:	f000 fe07 	bl	800472a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b1c:	2026      	movs	r0, #38	; 0x26
 8003b1e:	f000 fe20 	bl	8004762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b22:	bf00      	nop
 8003b24:	3728      	adds	r7, #40	; 0x28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40004400 	.word	0x40004400
 8003b30:	40023800 	.word	0x40023800
 8003b34:	40020000 	.word	0x40020000
 8003b38:	20000794 	.word	0x20000794
 8003b3c:	400260a0 	.word	0x400260a0

08003b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b44:	e7fe      	b.n	8003b44 <NMI_Handler+0x4>

08003b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b4a:	e7fe      	b.n	8003b4a <HardFault_Handler+0x4>

08003b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b50:	e7fe      	b.n	8003b50 <MemManage_Handler+0x4>

08003b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b52:	b480      	push	{r7}
 8003b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b56:	e7fe      	b.n	8003b56 <BusFault_Handler+0x4>

08003b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b5c:	e7fe      	b.n	8003b5c <UsageFault_Handler+0x4>

08003b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b8c:	f000 f8d0 	bl	8003d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b90:	bf00      	nop
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003b98:	4802      	ldr	r0, [pc, #8]	; (8003ba4 <DMA1_Stream6_IRQHandler+0x10>)
 8003b9a:	f000 ff95 	bl	8004ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000794 	.word	0x20000794

08003ba8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bac:	4803      	ldr	r0, [pc, #12]	; (8003bbc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003bae:	f002 fd03 	bl	80065b8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003bb2:	4803      	ldr	r0, [pc, #12]	; (8003bc0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003bb4:	f002 fd00 	bl	80065b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003bb8:	bf00      	nop
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	2000039c 	.word	0x2000039c
 8003bc0:	2000066c 	.word	0x2000066c

08003bc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bc8:	4802      	ldr	r0, [pc, #8]	; (8003bd4 <TIM2_IRQHandler+0x10>)
 8003bca:	f002 fcf5 	bl	80065b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000450 	.word	0x20000450

08003bd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003bdc:	4802      	ldr	r0, [pc, #8]	; (8003be8 <TIM3_IRQHandler+0x10>)
 8003bde:	f002 fceb 	bl	80065b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000504 	.word	0x20000504

08003bec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003bf0:	4802      	ldr	r0, [pc, #8]	; (8003bfc <USART2_IRQHandler+0x10>)
 8003bf2:	f003 ffe9 	bl	8007bc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000720 	.word	0x20000720

08003c00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c04:	4802      	ldr	r0, [pc, #8]	; (8003c10 <DMA2_Stream0_IRQHandler+0x10>)
 8003c06:	f000 ff5f 	bl	8004ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	2000033c 	.word	0x2000033c

08003c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <SystemInit+0x20>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	4a05      	ldr	r2, [pc, #20]	; (8003c34 <SystemInit+0x20>)
 8003c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	e000ed00 	.word	0xe000ed00

08003c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c3c:	480d      	ldr	r0, [pc, #52]	; (8003c74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003c3e:	490e      	ldr	r1, [pc, #56]	; (8003c78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c40:	4a0e      	ldr	r2, [pc, #56]	; (8003c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c44:	e002      	b.n	8003c4c <LoopCopyDataInit>

08003c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c4a:	3304      	adds	r3, #4

08003c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c50:	d3f9      	bcc.n	8003c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c52:	4a0b      	ldr	r2, [pc, #44]	; (8003c80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c54:	4c0b      	ldr	r4, [pc, #44]	; (8003c84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c58:	e001      	b.n	8003c5e <LoopFillZerobss>

08003c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c5c:	3204      	adds	r2, #4

08003c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c60:	d3fb      	bcc.n	8003c5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c62:	f7ff ffd7 	bl	8003c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c66:	f004 fffb 	bl	8008c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c6a:	f7fd fc77 	bl	800155c <main>
  bx  lr    
 8003c6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c78:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8003c7c:	0800aff0 	.word	0x0800aff0
  ldr r2, =_sbss
 8003c80:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8003c84:	20000ed0 	.word	0x20000ed0

08003c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c88:	e7fe      	b.n	8003c88 <ADC_IRQHandler>
	...

08003c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c90:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <HAL_Init+0x40>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a0d      	ldr	r2, [pc, #52]	; (8003ccc <HAL_Init+0x40>)
 8003c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_Init+0x40>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a0a      	ldr	r2, [pc, #40]	; (8003ccc <HAL_Init+0x40>)
 8003ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <HAL_Init+0x40>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a07      	ldr	r2, [pc, #28]	; (8003ccc <HAL_Init+0x40>)
 8003cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cb4:	2003      	movs	r0, #3
 8003cb6:	f000 fd2d 	bl	8004714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cba:	2000      	movs	r0, #0
 8003cbc:	f000 f808 	bl	8003cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cc0:	f7ff fd10 	bl	80036e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023c00 	.word	0x40023c00

08003cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cd8:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <HAL_InitTick+0x54>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <HAL_InitTick+0x58>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fd45 	bl	800477e <HAL_SYSTICK_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e00e      	b.n	8003d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b0f      	cmp	r3, #15
 8003d02:	d80a      	bhi.n	8003d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d04:	2200      	movs	r2, #0
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0c:	f000 fd0d 	bl	800472a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d10:	4a06      	ldr	r2, [pc, #24]	; (8003d2c <HAL_InitTick+0x5c>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e000      	b.n	8003d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000264 	.word	0x20000264
 8003d28:	2000026c 	.word	0x2000026c
 8003d2c:	20000268 	.word	0x20000268

08003d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_IncTick+0x20>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <HAL_IncTick+0x24>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4413      	add	r3, r2
 8003d40:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <HAL_IncTick+0x24>)
 8003d42:	6013      	str	r3, [r2, #0]
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	2000026c 	.word	0x2000026c
 8003d54:	20000ecc 	.word	0x20000ecc

08003d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d5c:	4b03      	ldr	r3, [pc, #12]	; (8003d6c <HAL_GetTick+0x14>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20000ecc 	.word	0x20000ecc

08003d70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e033      	b.n	8003dee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff fcd0 	bl	8003734 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d118      	bne.n	8003de0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003db6:	f023 0302 	bic.w	r3, r3, #2
 8003dba:	f043 0202 	orr.w	r2, r3, #2
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fa58 	bl	8004278 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f023 0303 	bic.w	r3, r3, #3
 8003dd6:	f043 0201 	orr.w	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
 8003dde:	e001      	b.n	8003de4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_ADC_Start_DMA+0x1e>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e0ce      	b.n	8003fb4 <HAL_ADC_Start_DMA+0x1bc>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d018      	beq.n	8003e5e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e3c:	4b5f      	ldr	r3, [pc, #380]	; (8003fbc <HAL_ADC_Start_DMA+0x1c4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a5f      	ldr	r2, [pc, #380]	; (8003fc0 <HAL_ADC_Start_DMA+0x1c8>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	0c9a      	lsrs	r2, r3, #18
 8003e48:	4613      	mov	r3, r2
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4413      	add	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e50:	e002      	b.n	8003e58 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f9      	bne.n	8003e52 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6c:	d107      	bne.n	8003e7e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	f040 8086 	bne.w	8003f9a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d007      	beq.n	8003ec0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003eb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ecc:	d106      	bne.n	8003edc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	f023 0206 	bic.w	r2, r3, #6
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	645a      	str	r2, [r3, #68]	; 0x44
 8003eda:	e002      	b.n	8003ee2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003eea:	4b36      	ldr	r3, [pc, #216]	; (8003fc4 <HAL_ADC_Start_DMA+0x1cc>)
 8003eec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	4a35      	ldr	r2, [pc, #212]	; (8003fc8 <HAL_ADC_Start_DMA+0x1d0>)
 8003ef4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	4a34      	ldr	r2, [pc, #208]	; (8003fcc <HAL_ADC_Start_DMA+0x1d4>)
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	4a33      	ldr	r2, [pc, #204]	; (8003fd0 <HAL_ADC_Start_DMA+0x1d8>)
 8003f04:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f0e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f1e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f2e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	334c      	adds	r3, #76	; 0x4c
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f000 fcd8 	bl	80048f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10f      	bne.n	8003f70 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d129      	bne.n	8003fb2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f6c:	609a      	str	r2, [r3, #8]
 8003f6e:	e020      	b.n	8003fb2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a17      	ldr	r2, [pc, #92]	; (8003fd4 <HAL_ADC_Start_DMA+0x1dc>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d11b      	bne.n	8003fb2 <HAL_ADC_Start_DMA+0x1ba>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d114      	bne.n	8003fb2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	e00b      	b.n	8003fb2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f043 0210 	orr.w	r2, r3, #16
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	f043 0201 	orr.w	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20000264 	.word	0x20000264
 8003fc0:	431bde83 	.word	0x431bde83
 8003fc4:	40012300 	.word	0x40012300
 8003fc8:	08004471 	.word	0x08004471
 8003fcc:	0800452b 	.word	0x0800452b
 8003fd0:	08004547 	.word	0x08004547
 8003fd4:	40012000 	.word	0x40012000

08003fd8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x1c>
 800402c:	2302      	movs	r3, #2
 800402e:	e113      	b.n	8004258 <HAL_ADC_ConfigChannel+0x244>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b09      	cmp	r3, #9
 800403e:	d925      	bls.n	800408c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68d9      	ldr	r1, [r3, #12]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	b29b      	uxth	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	4613      	mov	r3, r2
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	4413      	add	r3, r2
 8004054:	3b1e      	subs	r3, #30
 8004056:	2207      	movs	r2, #7
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43da      	mvns	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	400a      	ands	r2, r1
 8004064:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68d9      	ldr	r1, [r3, #12]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	4618      	mov	r0, r3
 8004078:	4603      	mov	r3, r0
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4403      	add	r3, r0
 800407e:	3b1e      	subs	r3, #30
 8004080:	409a      	lsls	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	60da      	str	r2, [r3, #12]
 800408a:	e022      	b.n	80040d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6919      	ldr	r1, [r3, #16]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	b29b      	uxth	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	4613      	mov	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4413      	add	r3, r2
 80040a0:	2207      	movs	r2, #7
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43da      	mvns	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	400a      	ands	r2, r1
 80040ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6919      	ldr	r1, [r3, #16]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	4618      	mov	r0, r3
 80040c2:	4603      	mov	r3, r0
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4403      	add	r3, r0
 80040c8:	409a      	lsls	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b06      	cmp	r3, #6
 80040d8:	d824      	bhi.n	8004124 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	3b05      	subs	r3, #5
 80040ec:	221f      	movs	r2, #31
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43da      	mvns	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	400a      	ands	r2, r1
 80040fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	b29b      	uxth	r3, r3
 8004108:	4618      	mov	r0, r3
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	3b05      	subs	r3, #5
 8004116:	fa00 f203 	lsl.w	r2, r0, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	635a      	str	r2, [r3, #52]	; 0x34
 8004122:	e04c      	b.n	80041be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b0c      	cmp	r3, #12
 800412a:	d824      	bhi.n	8004176 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	3b23      	subs	r3, #35	; 0x23
 800413e:	221f      	movs	r2, #31
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43da      	mvns	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	400a      	ands	r2, r1
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	b29b      	uxth	r3, r3
 800415a:	4618      	mov	r0, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	3b23      	subs	r3, #35	; 0x23
 8004168:	fa00 f203 	lsl.w	r2, r0, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
 8004174:	e023      	b.n	80041be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	3b41      	subs	r3, #65	; 0x41
 8004188:	221f      	movs	r2, #31
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	400a      	ands	r2, r1
 8004196:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	4618      	mov	r0, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	3b41      	subs	r3, #65	; 0x41
 80041b2:	fa00 f203 	lsl.w	r2, r0, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041be:	4b29      	ldr	r3, [pc, #164]	; (8004264 <HAL_ADC_ConfigChannel+0x250>)
 80041c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a28      	ldr	r2, [pc, #160]	; (8004268 <HAL_ADC_ConfigChannel+0x254>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d10f      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x1d8>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b12      	cmp	r3, #18
 80041d2:	d10b      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1d      	ldr	r2, [pc, #116]	; (8004268 <HAL_ADC_ConfigChannel+0x254>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d12b      	bne.n	800424e <HAL_ADC_ConfigChannel+0x23a>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1c      	ldr	r2, [pc, #112]	; (800426c <HAL_ADC_ConfigChannel+0x258>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <HAL_ADC_ConfigChannel+0x1f4>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b11      	cmp	r3, #17
 8004206:	d122      	bne.n	800424e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a11      	ldr	r2, [pc, #68]	; (800426c <HAL_ADC_ConfigChannel+0x258>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d111      	bne.n	800424e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800422a:	4b11      	ldr	r3, [pc, #68]	; (8004270 <HAL_ADC_ConfigChannel+0x25c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a11      	ldr	r2, [pc, #68]	; (8004274 <HAL_ADC_ConfigChannel+0x260>)
 8004230:	fba2 2303 	umull	r2, r3, r2, r3
 8004234:	0c9a      	lsrs	r2, r3, #18
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004240:	e002      	b.n	8004248 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	3b01      	subs	r3, #1
 8004246:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f9      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	40012300 	.word	0x40012300
 8004268:	40012000 	.word	0x40012000
 800426c:	10000012 	.word	0x10000012
 8004270:	20000264 	.word	0x20000264
 8004274:	431bde83 	.word	0x431bde83

08004278 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004280:	4b79      	ldr	r3, [pc, #484]	; (8004468 <ADC_Init+0x1f0>)
 8004282:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	431a      	orrs	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6859      	ldr	r1, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	021a      	lsls	r2, r3, #8
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6859      	ldr	r1, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6899      	ldr	r1, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	4a58      	ldr	r2, [pc, #352]	; (800446c <ADC_Init+0x1f4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800431e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6899      	ldr	r1, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004340:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6899      	ldr	r1, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	609a      	str	r2, [r3, #8]
 8004354:	e00f      	b.n	8004376 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004364:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004374:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0202 	bic.w	r2, r2, #2
 8004384:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6899      	ldr	r1, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	7e1b      	ldrb	r3, [r3, #24]
 8004390:	005a      	lsls	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01b      	beq.n	80043dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6859      	ldr	r1, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	3b01      	subs	r3, #1
 80043d0:	035a      	lsls	r2, r3, #13
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	e007      	b.n	80043ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80043fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	3b01      	subs	r3, #1
 8004408:	051a      	lsls	r2, r3, #20
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004420:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6899      	ldr	r1, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800442e:	025a      	lsls	r2, r3, #9
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004446:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6899      	ldr	r1, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	029a      	lsls	r2, r3, #10
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	609a      	str	r2, [r3, #8]
}
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	40012300 	.word	0x40012300
 800446c:	0f000001 	.word	0x0f000001

08004470 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004486:	2b00      	cmp	r3, #0
 8004488:	d13c      	bne.n	8004504 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d12b      	bne.n	80044fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d127      	bne.n	80044fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d006      	beq.n	80044c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d119      	bne.n	80044fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0220 	bic.w	r2, r2, #32
 80044d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d105      	bne.n	80044fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f4:	f043 0201 	orr.w	r2, r3, #1
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7ff fd6b 	bl	8003fd8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004502:	e00e      	b.n	8004522 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	f003 0310 	and.w	r3, r3, #16
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f7ff fd75 	bl	8004000 <HAL_ADC_ErrorCallback>
}
 8004516:	e004      	b.n	8004522 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4798      	blx	r3
}
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7ff fd57 	bl	8003fec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2240      	movs	r2, #64	; 0x40
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455e:	f043 0204 	orr.w	r2, r3, #4
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7ff fd4a 	bl	8004000 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004584:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004590:	4013      	ands	r3, r2
 8004592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800459c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045a6:	4a04      	ldr	r2, [pc, #16]	; (80045b8 <__NVIC_SetPriorityGrouping+0x44>)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	60d3      	str	r3, [r2, #12]
}
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	e000ed00 	.word	0xe000ed00

080045bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045c0:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <__NVIC_GetPriorityGrouping+0x18>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	0a1b      	lsrs	r3, r3, #8
 80045c6:	f003 0307 	and.w	r3, r3, #7
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	e000ed00 	.word	0xe000ed00

080045d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	db0b      	blt.n	8004602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	f003 021f 	and.w	r2, r3, #31
 80045f0:	4907      	ldr	r1, [pc, #28]	; (8004610 <__NVIC_EnableIRQ+0x38>)
 80045f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	2001      	movs	r0, #1
 80045fa:	fa00 f202 	lsl.w	r2, r0, r2
 80045fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	e000e100 	.word	0xe000e100

08004614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004624:	2b00      	cmp	r3, #0
 8004626:	db0a      	blt.n	800463e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	b2da      	uxtb	r2, r3
 800462c:	490c      	ldr	r1, [pc, #48]	; (8004660 <__NVIC_SetPriority+0x4c>)
 800462e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004632:	0112      	lsls	r2, r2, #4
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	440b      	add	r3, r1
 8004638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800463c:	e00a      	b.n	8004654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	b2da      	uxtb	r2, r3
 8004642:	4908      	ldr	r1, [pc, #32]	; (8004664 <__NVIC_SetPriority+0x50>)
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	3b04      	subs	r3, #4
 800464c:	0112      	lsls	r2, r2, #4
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	440b      	add	r3, r1
 8004652:	761a      	strb	r2, [r3, #24]
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	e000e100 	.word	0xe000e100
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004668:	b480      	push	{r7}
 800466a:	b089      	sub	sp, #36	; 0x24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f1c3 0307 	rsb	r3, r3, #7
 8004682:	2b04      	cmp	r3, #4
 8004684:	bf28      	it	cs
 8004686:	2304      	movcs	r3, #4
 8004688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3304      	adds	r3, #4
 800468e:	2b06      	cmp	r3, #6
 8004690:	d902      	bls.n	8004698 <NVIC_EncodePriority+0x30>
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	3b03      	subs	r3, #3
 8004696:	e000      	b.n	800469a <NVIC_EncodePriority+0x32>
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800469c:	f04f 32ff 	mov.w	r2, #4294967295
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43da      	mvns	r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	401a      	ands	r2, r3
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046b0:	f04f 31ff 	mov.w	r1, #4294967295
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ba:	43d9      	mvns	r1, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c0:	4313      	orrs	r3, r2
         );
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3724      	adds	r7, #36	; 0x24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
	...

080046d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3b01      	subs	r3, #1
 80046dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046e0:	d301      	bcc.n	80046e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046e2:	2301      	movs	r3, #1
 80046e4:	e00f      	b.n	8004706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046e6:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <SysTick_Config+0x40>)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046ee:	210f      	movs	r1, #15
 80046f0:	f04f 30ff 	mov.w	r0, #4294967295
 80046f4:	f7ff ff8e 	bl	8004614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <SysTick_Config+0x40>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046fe:	4b04      	ldr	r3, [pc, #16]	; (8004710 <SysTick_Config+0x40>)
 8004700:	2207      	movs	r2, #7
 8004702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	e000e010 	.word	0xe000e010

08004714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7ff ff29 	bl	8004574 <__NVIC_SetPriorityGrouping>
}
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800472a:	b580      	push	{r7, lr}
 800472c:	b086      	sub	sp, #24
 800472e:	af00      	add	r7, sp, #0
 8004730:	4603      	mov	r3, r0
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	607a      	str	r2, [r7, #4]
 8004736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800473c:	f7ff ff3e 	bl	80045bc <__NVIC_GetPriorityGrouping>
 8004740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	6978      	ldr	r0, [r7, #20]
 8004748:	f7ff ff8e 	bl	8004668 <NVIC_EncodePriority>
 800474c:	4602      	mov	r2, r0
 800474e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004752:	4611      	mov	r1, r2
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff ff5d 	bl	8004614 <__NVIC_SetPriority>
}
 800475a:	bf00      	nop
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	4603      	mov	r3, r0
 800476a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800476c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff ff31 	bl	80045d8 <__NVIC_EnableIRQ>
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff ffa2 	bl	80046d0 <SysTick_Config>
 800478c:	4603      	mov	r3, r0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7ff fad8 	bl	8003d58 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e099      	b.n	80048e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0201 	bic.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047d4:	e00f      	b.n	80047f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047d6:	f7ff fabf 	bl	8003d58 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b05      	cmp	r3, #5
 80047e2:	d908      	bls.n	80047f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2203      	movs	r2, #3
 80047ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e078      	b.n	80048e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e8      	bne.n	80047d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4b38      	ldr	r3, [pc, #224]	; (80048f0 <HAL_DMA_Init+0x158>)
 8004810:	4013      	ands	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004822:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800482e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800483a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	2b04      	cmp	r3, #4
 800484e:	d107      	bne.n	8004860 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	4313      	orrs	r3, r2
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f023 0307 	bic.w	r3, r3, #7
 8004876:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	2b04      	cmp	r3, #4
 8004888:	d117      	bne.n	80048ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00e      	beq.n	80048ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fb0d 	bl	8004ebc <DMA_CheckFifoParam>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2240      	movs	r2, #64	; 0x40
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048b6:	2301      	movs	r3, #1
 80048b8:	e016      	b.n	80048e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fac4 	bl	8004e50 <DMA_CalcBaseAndBitshift>
 80048c8:	4603      	mov	r3, r0
 80048ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d0:	223f      	movs	r2, #63	; 0x3f
 80048d2:	409a      	lsls	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	f010803f 	.word	0xf010803f

080048f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_DMA_Start_IT+0x26>
 8004916:	2302      	movs	r3, #2
 8004918:	e040      	b.n	800499c <HAL_DMA_Start_IT+0xa8>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d12f      	bne.n	800498e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fa56 	bl	8004df4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494c:	223f      	movs	r2, #63	; 0x3f
 800494e:	409a      	lsls	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0216 	orr.w	r2, r2, #22
 8004962:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d007      	beq.n	800497c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0208 	orr.w	r2, r2, #8
 800497a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e005      	b.n	800499a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004996:	2302      	movs	r3, #2
 8004998:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800499a:	7dfb      	ldrb	r3, [r7, #23]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049b2:	f7ff f9d1 	bl	8003d58 <HAL_GetTick>
 80049b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d008      	beq.n	80049d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2280      	movs	r2, #128	; 0x80
 80049c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e052      	b.n	8004a7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0216 	bic.w	r2, r2, #22
 80049e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695a      	ldr	r2, [r3, #20]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d103      	bne.n	8004a06 <HAL_DMA_Abort+0x62>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0208 	bic.w	r2, r2, #8
 8004a14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a26:	e013      	b.n	8004a50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a28:	f7ff f996 	bl	8003d58 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b05      	cmp	r3, #5
 8004a34:	d90c      	bls.n	8004a50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2203      	movs	r2, #3
 8004a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e015      	b.n	8004a7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1e4      	bne.n	8004a28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a62:	223f      	movs	r2, #63	; 0x3f
 8004a64:	409a      	lsls	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d004      	beq.n	8004aa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2280      	movs	r2, #128	; 0x80
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e00c      	b.n	8004abc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2205      	movs	r2, #5
 8004aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ad4:	4b8e      	ldr	r3, [pc, #568]	; (8004d10 <HAL_DMA_IRQHandler+0x248>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a8e      	ldr	r2, [pc, #568]	; (8004d14 <HAL_DMA_IRQHandler+0x24c>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	0a9b      	lsrs	r3, r3, #10
 8004ae0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af2:	2208      	movs	r2, #8
 8004af4:	409a      	lsls	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01a      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d013      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0204 	bic.w	r2, r2, #4
 8004b1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b20:	2208      	movs	r2, #8
 8004b22:	409a      	lsls	r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2c:	f043 0201 	orr.w	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	2201      	movs	r2, #1
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d012      	beq.n	8004b6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b56:	2201      	movs	r2, #1
 8004b58:	409a      	lsls	r2, r3
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b62:	f043 0202 	orr.w	r2, r3, #2
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6e:	2204      	movs	r2, #4
 8004b70:	409a      	lsls	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d012      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00b      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b98:	f043 0204 	orr.w	r2, r3, #4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba4:	2210      	movs	r2, #16
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d043      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d03c      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	2210      	movs	r2, #16
 8004bc4:	409a      	lsls	r2, r3
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d018      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d108      	bne.n	8004bf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d024      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	4798      	blx	r3
 8004bf6:	e01f      	b.n	8004c38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01b      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	4798      	blx	r3
 8004c08:	e016      	b.n	8004c38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d107      	bne.n	8004c28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0208 	bic.w	r2, r2, #8
 8004c26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 808f 	beq.w	8004d68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8087 	beq.w	8004d68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5e:	2220      	movs	r2, #32
 8004c60:	409a      	lsls	r2, r3
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b05      	cmp	r3, #5
 8004c70:	d136      	bne.n	8004ce0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0216 	bic.w	r2, r2, #22
 8004c80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695a      	ldr	r2, [r3, #20]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <HAL_DMA_IRQHandler+0x1da>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0208 	bic.w	r2, r2, #8
 8004cb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb6:	223f      	movs	r2, #63	; 0x3f
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d07e      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	4798      	blx	r3
        }
        return;
 8004cde:	e079      	b.n	8004dd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01d      	beq.n	8004d2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10d      	bne.n	8004d18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d031      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	4798      	blx	r3
 8004d0c:	e02c      	b.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
 8004d0e:	bf00      	nop
 8004d10:	20000264 	.word	0x20000264
 8004d14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d023      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	4798      	blx	r3
 8004d28:	e01e      	b.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10f      	bne.n	8004d58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0210 	bic.w	r2, r2, #16
 8004d46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d032      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d022      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2205      	movs	r2, #5
 8004d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60bb      	str	r3, [r7, #8]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d307      	bcc.n	8004db0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f2      	bne.n	8004d94 <HAL_DMA_IRQHandler+0x2cc>
 8004dae:	e000      	b.n	8004db2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004db0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	4798      	blx	r3
 8004dd2:	e000      	b.n	8004dd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004dd4:	bf00      	nop
    }
  }
}
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b40      	cmp	r3, #64	; 0x40
 8004e20:	d108      	bne.n	8004e34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e32:	e007      	b.n	8004e44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	60da      	str	r2, [r3, #12]
}
 8004e44:	bf00      	nop
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	3b10      	subs	r3, #16
 8004e60:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <DMA_CalcBaseAndBitshift+0x64>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	091b      	lsrs	r3, r3, #4
 8004e68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e6a:	4a13      	ldr	r2, [pc, #76]	; (8004eb8 <DMA_CalcBaseAndBitshift+0x68>)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d909      	bls.n	8004e92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e86:	f023 0303 	bic.w	r3, r3, #3
 8004e8a:	1d1a      	adds	r2, r3, #4
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	659a      	str	r2, [r3, #88]	; 0x58
 8004e90:	e007      	b.n	8004ea2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e9a:	f023 0303 	bic.w	r3, r3, #3
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	aaaaaaab 	.word	0xaaaaaaab
 8004eb8:	0800abd0 	.word	0x0800abd0

08004ebc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d11f      	bne.n	8004f16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d856      	bhi.n	8004f8a <DMA_CheckFifoParam+0xce>
 8004edc:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <DMA_CheckFifoParam+0x28>)
 8004ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee2:	bf00      	nop
 8004ee4:	08004ef5 	.word	0x08004ef5
 8004ee8:	08004f07 	.word	0x08004f07
 8004eec:	08004ef5 	.word	0x08004ef5
 8004ef0:	08004f8b 	.word	0x08004f8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d046      	beq.n	8004f8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f04:	e043      	b.n	8004f8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f0e:	d140      	bne.n	8004f92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f14:	e03d      	b.n	8004f92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f1e:	d121      	bne.n	8004f64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d837      	bhi.n	8004f96 <DMA_CheckFifoParam+0xda>
 8004f26:	a201      	add	r2, pc, #4	; (adr r2, 8004f2c <DMA_CheckFifoParam+0x70>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f3d 	.word	0x08004f3d
 8004f30:	08004f43 	.word	0x08004f43
 8004f34:	08004f3d 	.word	0x08004f3d
 8004f38:	08004f55 	.word	0x08004f55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f40:	e030      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d025      	beq.n	8004f9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f52:	e022      	b.n	8004f9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f5c:	d11f      	bne.n	8004f9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f62:	e01c      	b.n	8004f9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d903      	bls.n	8004f72 <DMA_CheckFifoParam+0xb6>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d003      	beq.n	8004f78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f70:	e018      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	73fb      	strb	r3, [r7, #15]
      break;
 8004f76:	e015      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00e      	beq.n	8004fa2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	73fb      	strb	r3, [r7, #15]
      break;
 8004f88:	e00b      	b.n	8004fa2 <DMA_CheckFifoParam+0xe6>
      break;
 8004f8a:	bf00      	nop
 8004f8c:	e00a      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8004f8e:	bf00      	nop
 8004f90:	e008      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8004f92:	bf00      	nop
 8004f94:	e006      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8004f96:	bf00      	nop
 8004f98:	e004      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8004f9a:	bf00      	nop
 8004f9c:	e002      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f9e:	bf00      	nop
 8004fa0:	e000      	b.n	8004fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fa2:	bf00      	nop
    }
  } 
  
  return status; 
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop

08004fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b089      	sub	sp, #36	; 0x24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61fb      	str	r3, [r7, #28]
 8004fce:	e159      	b.n	8005284 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	f040 8148 	bne.w	800527e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d005      	beq.n	8005006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005002:	2b02      	cmp	r3, #2
 8005004:	d130      	bne.n	8005068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	2203      	movs	r2, #3
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	43db      	mvns	r3, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4013      	ands	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4313      	orrs	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800503c:	2201      	movs	r2, #1
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	43db      	mvns	r3, r3
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	4013      	ands	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	091b      	lsrs	r3, r3, #4
 8005052:	f003 0201 	and.w	r2, r3, #1
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	4313      	orrs	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	2b03      	cmp	r3, #3
 8005072:	d017      	beq.n	80050a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	2203      	movs	r2, #3
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	43db      	mvns	r3, r3
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4013      	ands	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	4313      	orrs	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d123      	bne.n	80050f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	08da      	lsrs	r2, r3, #3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3208      	adds	r2, #8
 80050b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	220f      	movs	r2, #15
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	43db      	mvns	r3, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4013      	ands	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	08da      	lsrs	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3208      	adds	r2, #8
 80050f2:	69b9      	ldr	r1, [r7, #24]
 80050f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	2203      	movs	r2, #3
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	43db      	mvns	r3, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4013      	ands	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 0203 	and.w	r2, r3, #3
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	4313      	orrs	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80a2 	beq.w	800527e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	4b57      	ldr	r3, [pc, #348]	; (800529c <HAL_GPIO_Init+0x2e8>)
 8005140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005142:	4a56      	ldr	r2, [pc, #344]	; (800529c <HAL_GPIO_Init+0x2e8>)
 8005144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005148:	6453      	str	r3, [r2, #68]	; 0x44
 800514a:	4b54      	ldr	r3, [pc, #336]	; (800529c <HAL_GPIO_Init+0x2e8>)
 800514c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005156:	4a52      	ldr	r2, [pc, #328]	; (80052a0 <HAL_GPIO_Init+0x2ec>)
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	089b      	lsrs	r3, r3, #2
 800515c:	3302      	adds	r3, #2
 800515e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	220f      	movs	r2, #15
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43db      	mvns	r3, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4013      	ands	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a49      	ldr	r2, [pc, #292]	; (80052a4 <HAL_GPIO_Init+0x2f0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d019      	beq.n	80051b6 <HAL_GPIO_Init+0x202>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a48      	ldr	r2, [pc, #288]	; (80052a8 <HAL_GPIO_Init+0x2f4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <HAL_GPIO_Init+0x1fe>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a47      	ldr	r2, [pc, #284]	; (80052ac <HAL_GPIO_Init+0x2f8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00d      	beq.n	80051ae <HAL_GPIO_Init+0x1fa>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a46      	ldr	r2, [pc, #280]	; (80052b0 <HAL_GPIO_Init+0x2fc>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d007      	beq.n	80051aa <HAL_GPIO_Init+0x1f6>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a45      	ldr	r2, [pc, #276]	; (80052b4 <HAL_GPIO_Init+0x300>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d101      	bne.n	80051a6 <HAL_GPIO_Init+0x1f2>
 80051a2:	2304      	movs	r3, #4
 80051a4:	e008      	b.n	80051b8 <HAL_GPIO_Init+0x204>
 80051a6:	2307      	movs	r3, #7
 80051a8:	e006      	b.n	80051b8 <HAL_GPIO_Init+0x204>
 80051aa:	2303      	movs	r3, #3
 80051ac:	e004      	b.n	80051b8 <HAL_GPIO_Init+0x204>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e002      	b.n	80051b8 <HAL_GPIO_Init+0x204>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <HAL_GPIO_Init+0x204>
 80051b6:	2300      	movs	r3, #0
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	f002 0203 	and.w	r2, r2, #3
 80051be:	0092      	lsls	r2, r2, #2
 80051c0:	4093      	lsls	r3, r2
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051c8:	4935      	ldr	r1, [pc, #212]	; (80052a0 <HAL_GPIO_Init+0x2ec>)
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	089b      	lsrs	r3, r3, #2
 80051ce:	3302      	adds	r3, #2
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051d6:	4b38      	ldr	r3, [pc, #224]	; (80052b8 <HAL_GPIO_Init+0x304>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	43db      	mvns	r3, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4013      	ands	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051fa:	4a2f      	ldr	r2, [pc, #188]	; (80052b8 <HAL_GPIO_Init+0x304>)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005200:	4b2d      	ldr	r3, [pc, #180]	; (80052b8 <HAL_GPIO_Init+0x304>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	43db      	mvns	r3, r3
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	4013      	ands	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005224:	4a24      	ldr	r2, [pc, #144]	; (80052b8 <HAL_GPIO_Init+0x304>)
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800522a:	4b23      	ldr	r3, [pc, #140]	; (80052b8 <HAL_GPIO_Init+0x304>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	43db      	mvns	r3, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4013      	ands	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800524e:	4a1a      	ldr	r2, [pc, #104]	; (80052b8 <HAL_GPIO_Init+0x304>)
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005254:	4b18      	ldr	r3, [pc, #96]	; (80052b8 <HAL_GPIO_Init+0x304>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	43db      	mvns	r3, r3
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4013      	ands	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005278:	4a0f      	ldr	r2, [pc, #60]	; (80052b8 <HAL_GPIO_Init+0x304>)
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	3301      	adds	r3, #1
 8005282:	61fb      	str	r3, [r7, #28]
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	2b0f      	cmp	r3, #15
 8005288:	f67f aea2 	bls.w	8004fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	3724      	adds	r7, #36	; 0x24
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40023800 	.word	0x40023800
 80052a0:	40013800 	.word	0x40013800
 80052a4:	40020000 	.word	0x40020000
 80052a8:	40020400 	.word	0x40020400
 80052ac:	40020800 	.word	0x40020800
 80052b0:	40020c00 	.word	0x40020c00
 80052b4:	40021000 	.word	0x40021000
 80052b8:	40013c00 	.word	0x40013c00

080052bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	887b      	ldrh	r3, [r7, #2]
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052d4:	2301      	movs	r3, #1
 80052d6:	73fb      	strb	r3, [r7, #15]
 80052d8:	e001      	b.n	80052de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052da:	2300      	movs	r3, #0
 80052dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052de:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	807b      	strh	r3, [r7, #2]
 80052f8:	4613      	mov	r3, r2
 80052fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052fc:	787b      	ldrb	r3, [r7, #1]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005302:	887a      	ldrh	r2, [r7, #2]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005308:	e003      	b.n	8005312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800530a:	887b      	ldrh	r3, [r7, #2]
 800530c:	041a      	lsls	r2, r3, #16
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	619a      	str	r2, [r3, #24]
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800531e:	b480      	push	{r7}
 8005320:	b085      	sub	sp, #20
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	460b      	mov	r3, r1
 8005328:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005330:	887a      	ldrh	r2, [r7, #2]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4013      	ands	r3, r2
 8005336:	041a      	lsls	r2, r3, #16
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	43d9      	mvns	r1, r3
 800533c:	887b      	ldrh	r3, [r7, #2]
 800533e:	400b      	ands	r3, r1
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	619a      	str	r2, [r3, #24]
}
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e267      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d075      	beq.n	800545e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005372:	4b88      	ldr	r3, [pc, #544]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 030c 	and.w	r3, r3, #12
 800537a:	2b04      	cmp	r3, #4
 800537c:	d00c      	beq.n	8005398 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800537e:	4b85      	ldr	r3, [pc, #532]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005386:	2b08      	cmp	r3, #8
 8005388:	d112      	bne.n	80053b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800538a:	4b82      	ldr	r3, [pc, #520]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005396:	d10b      	bne.n	80053b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005398:	4b7e      	ldr	r3, [pc, #504]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d05b      	beq.n	800545c <HAL_RCC_OscConfig+0x108>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d157      	bne.n	800545c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e242      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b8:	d106      	bne.n	80053c8 <HAL_RCC_OscConfig+0x74>
 80053ba:	4b76      	ldr	r3, [pc, #472]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a75      	ldr	r2, [pc, #468]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	e01d      	b.n	8005404 <HAL_RCC_OscConfig+0xb0>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053d0:	d10c      	bne.n	80053ec <HAL_RCC_OscConfig+0x98>
 80053d2:	4b70      	ldr	r3, [pc, #448]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a6f      	ldr	r2, [pc, #444]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	4b6d      	ldr	r3, [pc, #436]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a6c      	ldr	r2, [pc, #432]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	e00b      	b.n	8005404 <HAL_RCC_OscConfig+0xb0>
 80053ec:	4b69      	ldr	r3, [pc, #420]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a68      	ldr	r2, [pc, #416]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	4b66      	ldr	r3, [pc, #408]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a65      	ldr	r2, [pc, #404]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80053fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d013      	beq.n	8005434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540c:	f7fe fca4 	bl	8003d58 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005414:	f7fe fca0 	bl	8003d58 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b64      	cmp	r3, #100	; 0x64
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e207      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005426:	4b5b      	ldr	r3, [pc, #364]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0xc0>
 8005432:	e014      	b.n	800545e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005434:	f7fe fc90 	bl	8003d58 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800543c:	f7fe fc8c 	bl	8003d58 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b64      	cmp	r3, #100	; 0x64
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e1f3      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800544e:	4b51      	ldr	r3, [pc, #324]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f0      	bne.n	800543c <HAL_RCC_OscConfig+0xe8>
 800545a:	e000      	b.n	800545e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800545c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d063      	beq.n	8005532 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800546a:	4b4a      	ldr	r3, [pc, #296]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 030c 	and.w	r3, r3, #12
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00b      	beq.n	800548e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005476:	4b47      	ldr	r3, [pc, #284]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800547e:	2b08      	cmp	r3, #8
 8005480:	d11c      	bne.n	80054bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005482:	4b44      	ldr	r3, [pc, #272]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d116      	bne.n	80054bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800548e:	4b41      	ldr	r3, [pc, #260]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d005      	beq.n	80054a6 <HAL_RCC_OscConfig+0x152>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d001      	beq.n	80054a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e1c7      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a6:	4b3b      	ldr	r3, [pc, #236]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4937      	ldr	r1, [pc, #220]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ba:	e03a      	b.n	8005532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d020      	beq.n	8005506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054c4:	4b34      	ldr	r3, [pc, #208]	; (8005598 <HAL_RCC_OscConfig+0x244>)
 80054c6:	2201      	movs	r2, #1
 80054c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ca:	f7fe fc45 	bl	8003d58 <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d0:	e008      	b.n	80054e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054d2:	f7fe fc41 	bl	8003d58 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e1a8      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e4:	4b2b      	ldr	r3, [pc, #172]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0f0      	beq.n	80054d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f0:	4b28      	ldr	r3, [pc, #160]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	4925      	ldr	r1, [pc, #148]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005500:	4313      	orrs	r3, r2
 8005502:	600b      	str	r3, [r1, #0]
 8005504:	e015      	b.n	8005532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005506:	4b24      	ldr	r3, [pc, #144]	; (8005598 <HAL_RCC_OscConfig+0x244>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fe fc24 	bl	8003d58 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005514:	f7fe fc20 	bl	8003d58 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e187      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005526:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d036      	beq.n	80055ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d016      	beq.n	8005574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005546:	4b15      	ldr	r3, [pc, #84]	; (800559c <HAL_RCC_OscConfig+0x248>)
 8005548:	2201      	movs	r2, #1
 800554a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554c:	f7fe fc04 	bl	8003d58 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005554:	f7fe fc00 	bl	8003d58 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e167      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <HAL_RCC_OscConfig+0x240>)
 8005568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0f0      	beq.n	8005554 <HAL_RCC_OscConfig+0x200>
 8005572:	e01b      	b.n	80055ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005574:	4b09      	ldr	r3, [pc, #36]	; (800559c <HAL_RCC_OscConfig+0x248>)
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800557a:	f7fe fbed 	bl	8003d58 <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005580:	e00e      	b.n	80055a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005582:	f7fe fbe9 	bl	8003d58 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d907      	bls.n	80055a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e150      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
 8005594:	40023800 	.word	0x40023800
 8005598:	42470000 	.word	0x42470000
 800559c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a0:	4b88      	ldr	r3, [pc, #544]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80055a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1ea      	bne.n	8005582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8097 	beq.w	80056e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ba:	2300      	movs	r3, #0
 80055bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055be:	4b81      	ldr	r3, [pc, #516]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10f      	bne.n	80055ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ca:	2300      	movs	r3, #0
 80055cc:	60bb      	str	r3, [r7, #8]
 80055ce:	4b7d      	ldr	r3, [pc, #500]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	4a7c      	ldr	r2, [pc, #496]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80055d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d8:	6413      	str	r3, [r2, #64]	; 0x40
 80055da:	4b7a      	ldr	r3, [pc, #488]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e2:	60bb      	str	r3, [r7, #8]
 80055e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ea:	4b77      	ldr	r3, [pc, #476]	; (80057c8 <HAL_RCC_OscConfig+0x474>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d118      	bne.n	8005628 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055f6:	4b74      	ldr	r3, [pc, #464]	; (80057c8 <HAL_RCC_OscConfig+0x474>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a73      	ldr	r2, [pc, #460]	; (80057c8 <HAL_RCC_OscConfig+0x474>)
 80055fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005602:	f7fe fba9 	bl	8003d58 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800560a:	f7fe fba5 	bl	8003d58 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e10c      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561c:	4b6a      	ldr	r3, [pc, #424]	; (80057c8 <HAL_RCC_OscConfig+0x474>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f0      	beq.n	800560a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d106      	bne.n	800563e <HAL_RCC_OscConfig+0x2ea>
 8005630:	4b64      	ldr	r3, [pc, #400]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005634:	4a63      	ldr	r2, [pc, #396]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005636:	f043 0301 	orr.w	r3, r3, #1
 800563a:	6713      	str	r3, [r2, #112]	; 0x70
 800563c:	e01c      	b.n	8005678 <HAL_RCC_OscConfig+0x324>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	2b05      	cmp	r3, #5
 8005644:	d10c      	bne.n	8005660 <HAL_RCC_OscConfig+0x30c>
 8005646:	4b5f      	ldr	r3, [pc, #380]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564a:	4a5e      	ldr	r2, [pc, #376]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 800564c:	f043 0304 	orr.w	r3, r3, #4
 8005650:	6713      	str	r3, [r2, #112]	; 0x70
 8005652:	4b5c      	ldr	r3, [pc, #368]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005656:	4a5b      	ldr	r2, [pc, #364]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	6713      	str	r3, [r2, #112]	; 0x70
 800565e:	e00b      	b.n	8005678 <HAL_RCC_OscConfig+0x324>
 8005660:	4b58      	ldr	r3, [pc, #352]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005664:	4a57      	ldr	r2, [pc, #348]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005666:	f023 0301 	bic.w	r3, r3, #1
 800566a:	6713      	str	r3, [r2, #112]	; 0x70
 800566c:	4b55      	ldr	r3, [pc, #340]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	4a54      	ldr	r2, [pc, #336]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005672:	f023 0304 	bic.w	r3, r3, #4
 8005676:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d015      	beq.n	80056ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005680:	f7fe fb6a 	bl	8003d58 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005686:	e00a      	b.n	800569e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005688:	f7fe fb66 	bl	8003d58 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	f241 3288 	movw	r2, #5000	; 0x1388
 8005696:	4293      	cmp	r3, r2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e0cb      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800569e:	4b49      	ldr	r3, [pc, #292]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80056a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0ee      	beq.n	8005688 <HAL_RCC_OscConfig+0x334>
 80056aa:	e014      	b.n	80056d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ac:	f7fe fb54 	bl	8003d58 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056b2:	e00a      	b.n	80056ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056b4:	f7fe fb50 	bl	8003d58 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e0b5      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ca:	4b3e      	ldr	r3, [pc, #248]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1ee      	bne.n	80056b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056d6:	7dfb      	ldrb	r3, [r7, #23]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d105      	bne.n	80056e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056dc:	4b39      	ldr	r3, [pc, #228]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	4a38      	ldr	r2, [pc, #224]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80056e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80a1 	beq.w	8005834 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056f2:	4b34      	ldr	r3, [pc, #208]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 030c 	and.w	r3, r3, #12
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d05c      	beq.n	80057b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d141      	bne.n	800578a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005706:	4b31      	ldr	r3, [pc, #196]	; (80057cc <HAL_RCC_OscConfig+0x478>)
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570c:	f7fe fb24 	bl	8003d58 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005714:	f7fe fb20 	bl	8003d58 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e087      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005726:	4b27      	ldr	r3, [pc, #156]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f0      	bne.n	8005714 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69da      	ldr	r2, [r3, #28]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	019b      	lsls	r3, r3, #6
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005748:	085b      	lsrs	r3, r3, #1
 800574a:	3b01      	subs	r3, #1
 800574c:	041b      	lsls	r3, r3, #16
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	061b      	lsls	r3, r3, #24
 8005756:	491b      	ldr	r1, [pc, #108]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 8005758:	4313      	orrs	r3, r2
 800575a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800575c:	4b1b      	ldr	r3, [pc, #108]	; (80057cc <HAL_RCC_OscConfig+0x478>)
 800575e:	2201      	movs	r2, #1
 8005760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005762:	f7fe faf9 	bl	8003d58 <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800576a:	f7fe faf5 	bl	8003d58 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e05c      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800577c:	4b11      	ldr	r3, [pc, #68]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0f0      	beq.n	800576a <HAL_RCC_OscConfig+0x416>
 8005788:	e054      	b.n	8005834 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800578a:	4b10      	ldr	r3, [pc, #64]	; (80057cc <HAL_RCC_OscConfig+0x478>)
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005790:	f7fe fae2 	bl	8003d58 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005798:	f7fe fade 	bl	8003d58 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e045      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057aa:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <HAL_RCC_OscConfig+0x470>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f0      	bne.n	8005798 <HAL_RCC_OscConfig+0x444>
 80057b6:	e03d      	b.n	8005834 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d107      	bne.n	80057d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e038      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
 80057c4:	40023800 	.word	0x40023800
 80057c8:	40007000 	.word	0x40007000
 80057cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057d0:	4b1b      	ldr	r3, [pc, #108]	; (8005840 <HAL_RCC_OscConfig+0x4ec>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d028      	beq.n	8005830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d121      	bne.n	8005830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d11a      	bne.n	8005830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005800:	4013      	ands	r3, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005808:	4293      	cmp	r3, r2
 800580a:	d111      	bne.n	8005830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005816:	085b      	lsrs	r3, r3, #1
 8005818:	3b01      	subs	r3, #1
 800581a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800581c:	429a      	cmp	r2, r3
 800581e:	d107      	bne.n	8005830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800582c:	429a      	cmp	r2, r3
 800582e:	d001      	beq.n	8005834 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40023800 	.word	0x40023800

08005844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e0cc      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005858:	4b68      	ldr	r3, [pc, #416]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d90c      	bls.n	8005880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005866:	4b65      	ldr	r3, [pc, #404]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800586e:	4b63      	ldr	r3, [pc, #396]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d001      	beq.n	8005880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e0b8      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d020      	beq.n	80058ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005898:	4b59      	ldr	r3, [pc, #356]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	4a58      	ldr	r2, [pc, #352]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 800589e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058b0:	4b53      	ldr	r3, [pc, #332]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	4a52      	ldr	r2, [pc, #328]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058bc:	4b50      	ldr	r3, [pc, #320]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	494d      	ldr	r1, [pc, #308]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d044      	beq.n	8005964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d107      	bne.n	80058f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e2:	4b47      	ldr	r3, [pc, #284]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d119      	bne.n	8005922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e07f      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d003      	beq.n	8005902 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d107      	bne.n	8005912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005902:	4b3f      	ldr	r3, [pc, #252]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d109      	bne.n	8005922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e06f      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005912:	4b3b      	ldr	r3, [pc, #236]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e067      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005922:	4b37      	ldr	r3, [pc, #220]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f023 0203 	bic.w	r2, r3, #3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	4934      	ldr	r1, [pc, #208]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	4313      	orrs	r3, r2
 8005932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005934:	f7fe fa10 	bl	8003d58 <HAL_GetTick>
 8005938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800593a:	e00a      	b.n	8005952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800593c:	f7fe fa0c 	bl	8003d58 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	f241 3288 	movw	r2, #5000	; 0x1388
 800594a:	4293      	cmp	r3, r2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e04f      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005952:	4b2b      	ldr	r3, [pc, #172]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 020c 	and.w	r2, r3, #12
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	429a      	cmp	r2, r3
 8005962:	d1eb      	bne.n	800593c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005964:	4b25      	ldr	r3, [pc, #148]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d20c      	bcs.n	800598c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005972:	4b22      	ldr	r3, [pc, #136]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800597a:	4b20      	ldr	r3, [pc, #128]	; (80059fc <HAL_RCC_ClockConfig+0x1b8>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d001      	beq.n	800598c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e032      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005998:	4b19      	ldr	r3, [pc, #100]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	4916      	ldr	r1, [pc, #88]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059b6:	4b12      	ldr	r3, [pc, #72]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	490e      	ldr	r1, [pc, #56]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059ca:	f000 f821 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 80059ce:	4602      	mov	r2, r0
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	091b      	lsrs	r3, r3, #4
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	490a      	ldr	r1, [pc, #40]	; (8005a04 <HAL_RCC_ClockConfig+0x1c0>)
 80059dc:	5ccb      	ldrb	r3, [r1, r3]
 80059de:	fa22 f303 	lsr.w	r3, r2, r3
 80059e2:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <HAL_RCC_ClockConfig+0x1c4>)
 80059e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059e6:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <HAL_RCC_ClockConfig+0x1c8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fe f970 	bl	8003cd0 <HAL_InitTick>

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40023c00 	.word	0x40023c00
 8005a00:	40023800 	.word	0x40023800
 8005a04:	0800abb8 	.word	0x0800abb8
 8005a08:	20000264 	.word	0x20000264
 8005a0c:	20000268 	.word	0x20000268

08005a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a14:	b094      	sub	sp, #80	; 0x50
 8005a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a20:	2300      	movs	r3, #0
 8005a22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a28:	4b79      	ldr	r3, [pc, #484]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 030c 	and.w	r3, r3, #12
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d00d      	beq.n	8005a50 <HAL_RCC_GetSysClockFreq+0x40>
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	f200 80e1 	bhi.w	8005bfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <HAL_RCC_GetSysClockFreq+0x34>
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d003      	beq.n	8005a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a42:	e0db      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a44:	4b73      	ldr	r3, [pc, #460]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a48:	e0db      	b.n	8005c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a4a:	4b73      	ldr	r3, [pc, #460]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a4e:	e0d8      	b.n	8005c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a50:	4b6f      	ldr	r3, [pc, #444]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a5a:	4b6d      	ldr	r3, [pc, #436]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d063      	beq.n	8005b2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a66:	4b6a      	ldr	r3, [pc, #424]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	099b      	lsrs	r3, r3, #6
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a78:	633b      	str	r3, [r7, #48]	; 0x30
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a82:	4622      	mov	r2, r4
 8005a84:	462b      	mov	r3, r5
 8005a86:	f04f 0000 	mov.w	r0, #0
 8005a8a:	f04f 0100 	mov.w	r1, #0
 8005a8e:	0159      	lsls	r1, r3, #5
 8005a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a94:	0150      	lsls	r0, r2, #5
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	1a51      	subs	r1, r2, r1
 8005a9e:	6139      	str	r1, [r7, #16]
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ab4:	4659      	mov	r1, fp
 8005ab6:	018b      	lsls	r3, r1, #6
 8005ab8:	4651      	mov	r1, sl
 8005aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005abe:	4651      	mov	r1, sl
 8005ac0:	018a      	lsls	r2, r1, #6
 8005ac2:	4651      	mov	r1, sl
 8005ac4:	ebb2 0801 	subs.w	r8, r2, r1
 8005ac8:	4659      	mov	r1, fp
 8005aca:	eb63 0901 	sbc.w	r9, r3, r1
 8005ace:	f04f 0200 	mov.w	r2, #0
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ae2:	4690      	mov	r8, r2
 8005ae4:	4699      	mov	r9, r3
 8005ae6:	4623      	mov	r3, r4
 8005ae8:	eb18 0303 	adds.w	r3, r8, r3
 8005aec:	60bb      	str	r3, [r7, #8]
 8005aee:	462b      	mov	r3, r5
 8005af0:	eb49 0303 	adc.w	r3, r9, r3
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b02:	4629      	mov	r1, r5
 8005b04:	024b      	lsls	r3, r1, #9
 8005b06:	4621      	mov	r1, r4
 8005b08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	024a      	lsls	r2, r1, #9
 8005b10:	4610      	mov	r0, r2
 8005b12:	4619      	mov	r1, r3
 8005b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b16:	2200      	movs	r2, #0
 8005b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b20:	f7fb f83e 	bl	8000ba0 <__aeabi_uldivmod>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4613      	mov	r3, r2
 8005b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b2c:	e058      	b.n	8005be0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b2e:	4b38      	ldr	r3, [pc, #224]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	099b      	lsrs	r3, r3, #6
 8005b34:	2200      	movs	r2, #0
 8005b36:	4618      	mov	r0, r3
 8005b38:	4611      	mov	r1, r2
 8005b3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b3e:	623b      	str	r3, [r7, #32]
 8005b40:	2300      	movs	r3, #0
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24
 8005b44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b48:	4642      	mov	r2, r8
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	f04f 0000 	mov.w	r0, #0
 8005b50:	f04f 0100 	mov.w	r1, #0
 8005b54:	0159      	lsls	r1, r3, #5
 8005b56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b5a:	0150      	lsls	r0, r2, #5
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4641      	mov	r1, r8
 8005b62:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b66:	4649      	mov	r1, r9
 8005b68:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b80:	ebb2 040a 	subs.w	r4, r2, sl
 8005b84:	eb63 050b 	sbc.w	r5, r3, fp
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	f04f 0300 	mov.w	r3, #0
 8005b90:	00eb      	lsls	r3, r5, #3
 8005b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b96:	00e2      	lsls	r2, r4, #3
 8005b98:	4614      	mov	r4, r2
 8005b9a:	461d      	mov	r5, r3
 8005b9c:	4643      	mov	r3, r8
 8005b9e:	18e3      	adds	r3, r4, r3
 8005ba0:	603b      	str	r3, [r7, #0]
 8005ba2:	464b      	mov	r3, r9
 8005ba4:	eb45 0303 	adc.w	r3, r5, r3
 8005ba8:	607b      	str	r3, [r7, #4]
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	028b      	lsls	r3, r1, #10
 8005bba:	4621      	mov	r1, r4
 8005bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	028a      	lsls	r2, r1, #10
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bca:	2200      	movs	r2, #0
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	61fa      	str	r2, [r7, #28]
 8005bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bd4:	f7fa ffe4 	bl	8000ba0 <__aeabi_uldivmod>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4613      	mov	r3, r2
 8005bde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005be0:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	3301      	adds	r3, #1
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005bf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005bfa:	e002      	b.n	8005c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3750      	adds	r7, #80	; 0x50
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c0e:	bf00      	nop
 8005c10:	40023800 	.word	0x40023800
 8005c14:	00f42400 	.word	0x00f42400
 8005c18:	007a1200 	.word	0x007a1200

08005c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c20:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c22:	681b      	ldr	r3, [r3, #0]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	20000264 	.word	0x20000264

08005c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c38:	f7ff fff0 	bl	8005c1c <HAL_RCC_GetHCLKFreq>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	0a9b      	lsrs	r3, r3, #10
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	4903      	ldr	r1, [pc, #12]	; (8005c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c4a:	5ccb      	ldrb	r3, [r1, r3]
 8005c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40023800 	.word	0x40023800
 8005c58:	0800abc8 	.word	0x0800abc8

08005c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c60:	f7ff ffdc 	bl	8005c1c <HAL_RCC_GetHCLKFreq>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	0b5b      	lsrs	r3, r3, #13
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	4903      	ldr	r1, [pc, #12]	; (8005c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c72:	5ccb      	ldrb	r3, [r1, r3]
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	0800abc8 	.word	0x0800abc8

08005c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e04c      	b.n	8005d30 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d111      	bne.n	8005cc6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f001 fc02 	bl	80074b4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d102      	bne.n	8005cbe <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a1f      	ldr	r2, [pc, #124]	; (8005d38 <HAL_TIM_Base_Init+0xb4>)
 8005cbc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4610      	mov	r0, r2
 8005cda:	f001 f91f 	bl	8006f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	08003875 	.word	0x08003875

08005d3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d001      	beq.n	8005d54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e03c      	b.n	8005dce <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <HAL_TIM_Base_Start+0xa0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d018      	beq.n	8005d98 <HAL_TIM_Base_Start+0x5c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6e:	d013      	beq.n	8005d98 <HAL_TIM_Base_Start+0x5c>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1a      	ldr	r2, [pc, #104]	; (8005de0 <HAL_TIM_Base_Start+0xa4>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00e      	beq.n	8005d98 <HAL_TIM_Base_Start+0x5c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a19      	ldr	r2, [pc, #100]	; (8005de4 <HAL_TIM_Base_Start+0xa8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d009      	beq.n	8005d98 <HAL_TIM_Base_Start+0x5c>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a17      	ldr	r2, [pc, #92]	; (8005de8 <HAL_TIM_Base_Start+0xac>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d004      	beq.n	8005d98 <HAL_TIM_Base_Start+0x5c>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a16      	ldr	r2, [pc, #88]	; (8005dec <HAL_TIM_Base_Start+0xb0>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d111      	bne.n	8005dbc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b06      	cmp	r3, #6
 8005da8:	d010      	beq.n	8005dcc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0201 	orr.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dba:	e007      	b.n	8005dcc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40010000 	.word	0x40010000
 8005de0:	40000400 	.word	0x40000400
 8005de4:	40000800 	.word	0x40000800
 8005de8:	40000c00 	.word	0x40000c00
 8005dec:	40014000 	.word	0x40014000

08005df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d001      	beq.n	8005e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e044      	b.n	8005e92 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0201 	orr.w	r2, r2, #1
 8005e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1e      	ldr	r2, [pc, #120]	; (8005ea0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d018      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x6c>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e32:	d013      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x6c>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a1a      	ldr	r2, [pc, #104]	; (8005ea4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d00e      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x6c>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a19      	ldr	r2, [pc, #100]	; (8005ea8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d009      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x6c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a17      	ldr	r2, [pc, #92]	; (8005eac <HAL_TIM_Base_Start_IT+0xbc>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d004      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x6c>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a16      	ldr	r2, [pc, #88]	; (8005eb0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d111      	bne.n	8005e80 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b06      	cmp	r3, #6
 8005e6c:	d010      	beq.n	8005e90 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0201 	orr.w	r2, r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7e:	e007      	b.n	8005e90 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0201 	orr.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40010000 	.word	0x40010000
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800
 8005eac:	40000c00 	.word	0x40000c00
 8005eb0:	40014000 	.word	0x40014000

08005eb4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e04c      	b.n	8005f60 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d111      	bne.n	8005ef6 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f001 faea 	bl	80074b4 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a1f      	ldr	r2, [pc, #124]	; (8005f68 <HAL_TIM_OC_Init+0xb4>)
 8005eec:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3304      	adds	r3, #4
 8005f06:	4619      	mov	r1, r3
 8005f08:	4610      	mov	r0, r2
 8005f0a:	f001 f807 	bl	8006f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	08005f6d 	.word	0x08005f6d

08005f6c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e04c      	b.n	800602c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d111      	bne.n	8005fc2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f001 fa84 	bl	80074b4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a1f      	ldr	r2, [pc, #124]	; (8006034 <HAL_TIM_PWM_Init+0xb4>)
 8005fb8:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	f000 ffa1 	bl	8006f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	08003825 	.word	0x08003825

08006038 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d109      	bne.n	800605c <HAL_TIM_PWM_Start+0x24>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b01      	cmp	r3, #1
 8006052:	bf14      	ite	ne
 8006054:	2301      	movne	r3, #1
 8006056:	2300      	moveq	r3, #0
 8006058:	b2db      	uxtb	r3, r3
 800605a:	e022      	b.n	80060a2 <HAL_TIM_PWM_Start+0x6a>
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b04      	cmp	r3, #4
 8006060:	d109      	bne.n	8006076 <HAL_TIM_PWM_Start+0x3e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b01      	cmp	r3, #1
 800606c:	bf14      	ite	ne
 800606e:	2301      	movne	r3, #1
 8006070:	2300      	moveq	r3, #0
 8006072:	b2db      	uxtb	r3, r3
 8006074:	e015      	b.n	80060a2 <HAL_TIM_PWM_Start+0x6a>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b08      	cmp	r3, #8
 800607a:	d109      	bne.n	8006090 <HAL_TIM_PWM_Start+0x58>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b01      	cmp	r3, #1
 8006086:	bf14      	ite	ne
 8006088:	2301      	movne	r3, #1
 800608a:	2300      	moveq	r3, #0
 800608c:	b2db      	uxtb	r3, r3
 800608e:	e008      	b.n	80060a2 <HAL_TIM_PWM_Start+0x6a>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b01      	cmp	r3, #1
 800609a:	bf14      	ite	ne
 800609c:	2301      	movne	r3, #1
 800609e:	2300      	moveq	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e068      	b.n	800617c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d104      	bne.n	80060ba <HAL_TIM_PWM_Start+0x82>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060b8:	e013      	b.n	80060e2 <HAL_TIM_PWM_Start+0xaa>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b04      	cmp	r3, #4
 80060be:	d104      	bne.n	80060ca <HAL_TIM_PWM_Start+0x92>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060c8:	e00b      	b.n	80060e2 <HAL_TIM_PWM_Start+0xaa>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b08      	cmp	r3, #8
 80060ce:	d104      	bne.n	80060da <HAL_TIM_PWM_Start+0xa2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060d8:	e003      	b.n	80060e2 <HAL_TIM_PWM_Start+0xaa>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2201      	movs	r2, #1
 80060e8:	6839      	ldr	r1, [r7, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 f9bc 	bl	8007468 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a23      	ldr	r2, [pc, #140]	; (8006184 <HAL_TIM_PWM_Start+0x14c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d107      	bne.n	800610a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006108:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a1d      	ldr	r2, [pc, #116]	; (8006184 <HAL_TIM_PWM_Start+0x14c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d018      	beq.n	8006146 <HAL_TIM_PWM_Start+0x10e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611c:	d013      	beq.n	8006146 <HAL_TIM_PWM_Start+0x10e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a19      	ldr	r2, [pc, #100]	; (8006188 <HAL_TIM_PWM_Start+0x150>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00e      	beq.n	8006146 <HAL_TIM_PWM_Start+0x10e>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a17      	ldr	r2, [pc, #92]	; (800618c <HAL_TIM_PWM_Start+0x154>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d009      	beq.n	8006146 <HAL_TIM_PWM_Start+0x10e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a16      	ldr	r2, [pc, #88]	; (8006190 <HAL_TIM_PWM_Start+0x158>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d004      	beq.n	8006146 <HAL_TIM_PWM_Start+0x10e>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a14      	ldr	r2, [pc, #80]	; (8006194 <HAL_TIM_PWM_Start+0x15c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d111      	bne.n	800616a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b06      	cmp	r3, #6
 8006156:	d010      	beq.n	800617a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0201 	orr.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006168:	e007      	b.n	800617a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0201 	orr.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40010000 	.word	0x40010000
 8006188:	40000400 	.word	0x40000400
 800618c:	40000800 	.word	0x40000800
 8006190:	40000c00 	.word	0x40000c00
 8006194:	40014000 	.word	0x40014000

08006198 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e04c      	b.n	8006246 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d111      	bne.n	80061dc <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 f977 	bl	80074b4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d102      	bne.n	80061d4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a1f      	ldr	r2, [pc, #124]	; (8006250 <HAL_TIM_OnePulse_Init+0xb8>)
 80061d2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f000 fe94 	bl	8006f1c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0208 	bic.w	r2, r2, #8
 8006202:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6819      	ldr	r1, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	08006255 	.word	0x08006255

08006254 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006278:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006280:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006288:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006290:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d108      	bne.n	80062aa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006298:	7bbb      	ldrb	r3, [r7, #14]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d105      	bne.n	80062aa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800629e:	7b7b      	ldrb	r3, [r7, #13]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d102      	bne.n	80062aa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062a4:	7b3b      	ldrb	r3, [r7, #12]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d001      	beq.n	80062ae <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e03b      	b.n	8006326 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2202      	movs	r2, #2
 80062b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2202      	movs	r2, #2
 80062ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2202      	movs	r2, #2
 80062c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2202      	movs	r2, #2
 80062ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0202 	orr.w	r2, r2, #2
 80062dc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f042 0204 	orr.w	r2, r2, #4
 80062ec:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2201      	movs	r2, #1
 80062f4:	2100      	movs	r1, #0
 80062f6:	4618      	mov	r0, r3
 80062f8:	f001 f8b6 	bl	8007468 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2201      	movs	r2, #1
 8006302:	2104      	movs	r1, #4
 8006304:	4618      	mov	r0, r3
 8006306:	f001 f8af 	bl	8007468 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a08      	ldr	r2, [pc, #32]	; (8006330 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d107      	bne.n	8006324 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006322:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	40010000 	.word	0x40010000

08006334 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e0a2      	b.n	800648e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d111      	bne.n	8006378 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 f8a9 	bl	80074b4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006366:	2b00      	cmp	r3, #0
 8006368:	d102      	bne.n	8006370 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a4a      	ldr	r2, [pc, #296]	; (8006498 <HAL_TIM_Encoder_Init+0x164>)
 800636e:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6812      	ldr	r2, [r2, #0]
 800638a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800638e:	f023 0307 	bic.w	r3, r3, #7
 8006392:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3304      	adds	r3, #4
 800639c:	4619      	mov	r1, r3
 800639e:	4610      	mov	r0, r2
 80063a0:	f000 fdbc 	bl	8006f1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063cc:	f023 0303 	bic.w	r3, r3, #3
 80063d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	4313      	orrs	r3, r2
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80063ea:	f023 030c 	bic.w	r3, r3, #12
 80063ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	021b      	lsls	r3, r3, #8
 8006406:	4313      	orrs	r3, r2
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	011a      	lsls	r2, r3, #4
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	031b      	lsls	r3, r3, #12
 800641a:	4313      	orrs	r3, r2
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006428:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006430:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	011b      	lsls	r3, r3, #4
 800643c:	4313      	orrs	r3, r2
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	08003939 	.word	0x08003939

0800649c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d110      	bne.n	80064ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d102      	bne.n	80064d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80064d2:	7b7b      	ldrb	r3, [r7, #13]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d001      	beq.n	80064dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e069      	b.n	80065b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064ec:	e031      	b.n	8006552 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d110      	bne.n	8006516 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d102      	bne.n	8006500 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064fa:	7b3b      	ldrb	r3, [r7, #12]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d001      	beq.n	8006504 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e055      	b.n	80065b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006514:	e01d      	b.n	8006552 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d108      	bne.n	800652e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800651c:	7bbb      	ldrb	r3, [r7, #14]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d105      	bne.n	800652e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006522:	7b7b      	ldrb	r3, [r7, #13]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d102      	bne.n	800652e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006528:	7b3b      	ldrb	r3, [r7, #12]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d001      	beq.n	8006532 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e03e      	b.n	80065b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2202      	movs	r2, #2
 8006536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2202      	movs	r2, #2
 800653e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2202      	movs	r2, #2
 8006546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2202      	movs	r2, #2
 800654e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <HAL_TIM_Encoder_Start+0xc4>
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b04      	cmp	r3, #4
 800655c:	d008      	beq.n	8006570 <HAL_TIM_Encoder_Start+0xd4>
 800655e:	e00f      	b.n	8006580 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2201      	movs	r2, #1
 8006566:	2100      	movs	r1, #0
 8006568:	4618      	mov	r0, r3
 800656a:	f000 ff7d 	bl	8007468 <TIM_CCxChannelCmd>
      break;
 800656e:	e016      	b.n	800659e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2201      	movs	r2, #1
 8006576:	2104      	movs	r1, #4
 8006578:	4618      	mov	r0, r3
 800657a:	f000 ff75 	bl	8007468 <TIM_CCxChannelCmd>
      break;
 800657e:	e00e      	b.n	800659e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2201      	movs	r2, #1
 8006586:	2100      	movs	r1, #0
 8006588:	4618      	mov	r0, r3
 800658a:	f000 ff6d 	bl	8007468 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2201      	movs	r2, #1
 8006594:	2104      	movs	r1, #4
 8006596:	4618      	mov	r0, r3
 8006598:	f000 ff66 	bl	8007468 <TIM_CCxChannelCmd>
      break;
 800659c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0201 	orr.w	r2, r2, #1
 80065ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d128      	bne.n	8006620 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d121      	bne.n	8006620 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0202 	mvn.w	r2, #2
 80065e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d005      	beq.n	8006606 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
 8006604:	e009      	b.n	800661a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b04      	cmp	r3, #4
 800662c:	d128      	bne.n	8006680 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b04      	cmp	r3, #4
 800663a:	d121      	bne.n	8006680 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0204 	mvn.w	r2, #4
 8006644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2202      	movs	r2, #2
 800664a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006656:	2b00      	cmp	r3, #0
 8006658:	d005      	beq.n	8006666 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	4798      	blx	r3
 8006664:	e009      	b.n	800667a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	f003 0308 	and.w	r3, r3, #8
 800668a:	2b08      	cmp	r3, #8
 800668c:	d128      	bne.n	80066e0 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f003 0308 	and.w	r3, r3, #8
 8006698:	2b08      	cmp	r3, #8
 800669a:	d121      	bne.n	80066e0 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f06f 0208 	mvn.w	r2, #8
 80066a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2204      	movs	r2, #4
 80066aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	4798      	blx	r3
 80066c4:	e009      	b.n	80066da <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f003 0310 	and.w	r3, r3, #16
 80066ea:	2b10      	cmp	r3, #16
 80066ec:	d128      	bne.n	8006740 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	2b10      	cmp	r3, #16
 80066fa:	d121      	bne.n	8006740 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f06f 0210 	mvn.w	r2, #16
 8006704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2208      	movs	r2, #8
 800670a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	4798      	blx	r3
 8006724:	e009      	b.n	800673a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b01      	cmp	r3, #1
 800674c:	d110      	bne.n	8006770 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b01      	cmp	r3, #1
 800675a:	d109      	bne.n	8006770 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f06f 0201 	mvn.w	r2, #1
 8006764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800677a:	2b80      	cmp	r3, #128	; 0x80
 800677c:	d110      	bne.n	80067a0 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006788:	2b80      	cmp	r3, #128	; 0x80
 800678a:	d109      	bne.n	80067a0 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067aa:	2b40      	cmp	r3, #64	; 0x40
 80067ac:	d110      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b8:	2b40      	cmp	r3, #64	; 0x40
 80067ba:	d109      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b20      	cmp	r3, #32
 80067dc:	d110      	bne.n	8006800 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b20      	cmp	r3, #32
 80067ea:	d109      	bne.n	8006800 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f06f 0220 	mvn.w	r2, #32
 80067f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006800:	bf00      	nop
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800681e:	2b01      	cmp	r3, #1
 8006820:	d101      	bne.n	8006826 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006822:	2302      	movs	r3, #2
 8006824:	e048      	b.n	80068b8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b0c      	cmp	r3, #12
 8006832:	d839      	bhi.n	80068a8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006834:	a201      	add	r2, pc, #4	; (adr r2, 800683c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683a:	bf00      	nop
 800683c:	08006871 	.word	0x08006871
 8006840:	080068a9 	.word	0x080068a9
 8006844:	080068a9 	.word	0x080068a9
 8006848:	080068a9 	.word	0x080068a9
 800684c:	0800687f 	.word	0x0800687f
 8006850:	080068a9 	.word	0x080068a9
 8006854:	080068a9 	.word	0x080068a9
 8006858:	080068a9 	.word	0x080068a9
 800685c:	0800688d 	.word	0x0800688d
 8006860:	080068a9 	.word	0x080068a9
 8006864:	080068a9 	.word	0x080068a9
 8006868:	080068a9 	.word	0x080068a9
 800686c:	0800689b 	.word	0x0800689b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68b9      	ldr	r1, [r7, #8]
 8006876:	4618      	mov	r0, r3
 8006878:	f000 fbd0 	bl	800701c <TIM_OC1_SetConfig>
      break;
 800687c:	e017      	b.n	80068ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fc2f 	bl	80070e8 <TIM_OC2_SetConfig>
      break;
 800688a:	e010      	b.n	80068ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fc94 	bl	80071c0 <TIM_OC3_SetConfig>
      break;
 8006898:	e009      	b.n	80068ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fcf7 	bl	8007294 <TIM_OC4_SetConfig>
      break;
 80068a6:	e002      	b.n	80068ae <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	75fb      	strb	r3, [r7, #23]
      break;
 80068ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d101      	bne.n	80068de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068da:	2302      	movs	r3, #2
 80068dc:	e0ae      	b.n	8006a3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b0c      	cmp	r3, #12
 80068ea:	f200 809f 	bhi.w	8006a2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80068ee:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	08006929 	.word	0x08006929
 80068f8:	08006a2d 	.word	0x08006a2d
 80068fc:	08006a2d 	.word	0x08006a2d
 8006900:	08006a2d 	.word	0x08006a2d
 8006904:	08006969 	.word	0x08006969
 8006908:	08006a2d 	.word	0x08006a2d
 800690c:	08006a2d 	.word	0x08006a2d
 8006910:	08006a2d 	.word	0x08006a2d
 8006914:	080069ab 	.word	0x080069ab
 8006918:	08006a2d 	.word	0x08006a2d
 800691c:	08006a2d 	.word	0x08006a2d
 8006920:	08006a2d 	.word	0x08006a2d
 8006924:	080069eb 	.word	0x080069eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fb74 	bl	800701c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699a      	ldr	r2, [r3, #24]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0208 	orr.w	r2, r2, #8
 8006942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	699a      	ldr	r2, [r3, #24]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0204 	bic.w	r2, r2, #4
 8006952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6999      	ldr	r1, [r3, #24]
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	691a      	ldr	r2, [r3, #16]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	619a      	str	r2, [r3, #24]
      break;
 8006966:	e064      	b.n	8006a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fbba 	bl	80070e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699a      	ldr	r2, [r3, #24]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6999      	ldr	r1, [r3, #24]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	021a      	lsls	r2, r3, #8
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	619a      	str	r2, [r3, #24]
      break;
 80069a8:	e043      	b.n	8006a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68b9      	ldr	r1, [r7, #8]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fc05 	bl	80071c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69da      	ldr	r2, [r3, #28]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0208 	orr.w	r2, r2, #8
 80069c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69da      	ldr	r2, [r3, #28]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0204 	bic.w	r2, r2, #4
 80069d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69d9      	ldr	r1, [r3, #28]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	691a      	ldr	r2, [r3, #16]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	61da      	str	r2, [r3, #28]
      break;
 80069e8:	e023      	b.n	8006a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68b9      	ldr	r1, [r7, #8]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fc4f 	bl	8007294 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	69da      	ldr	r2, [r3, #28]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69da      	ldr	r2, [r3, #28]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69d9      	ldr	r1, [r3, #28]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	021a      	lsls	r2, r3, #8
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	61da      	str	r2, [r3, #28]
      break;
 8006a2a:	e002      	b.n	8006a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d101      	bne.n	8006a60 <HAL_TIM_ConfigClockSource+0x1c>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e0b4      	b.n	8006bca <HAL_TIM_ConfigClockSource+0x186>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a98:	d03e      	beq.n	8006b18 <HAL_TIM_ConfigClockSource+0xd4>
 8006a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a9e:	f200 8087 	bhi.w	8006bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8006aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa6:	f000 8086 	beq.w	8006bb6 <HAL_TIM_ConfigClockSource+0x172>
 8006aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aae:	d87f      	bhi.n	8006bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ab0:	2b70      	cmp	r3, #112	; 0x70
 8006ab2:	d01a      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0xa6>
 8006ab4:	2b70      	cmp	r3, #112	; 0x70
 8006ab6:	d87b      	bhi.n	8006bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ab8:	2b60      	cmp	r3, #96	; 0x60
 8006aba:	d050      	beq.n	8006b5e <HAL_TIM_ConfigClockSource+0x11a>
 8006abc:	2b60      	cmp	r3, #96	; 0x60
 8006abe:	d877      	bhi.n	8006bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac0:	2b50      	cmp	r3, #80	; 0x50
 8006ac2:	d03c      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0xfa>
 8006ac4:	2b50      	cmp	r3, #80	; 0x50
 8006ac6:	d873      	bhi.n	8006bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac8:	2b40      	cmp	r3, #64	; 0x40
 8006aca:	d058      	beq.n	8006b7e <HAL_TIM_ConfigClockSource+0x13a>
 8006acc:	2b40      	cmp	r3, #64	; 0x40
 8006ace:	d86f      	bhi.n	8006bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad0:	2b30      	cmp	r3, #48	; 0x30
 8006ad2:	d064      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x15a>
 8006ad4:	2b30      	cmp	r3, #48	; 0x30
 8006ad6:	d86b      	bhi.n	8006bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d060      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x15a>
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	d867      	bhi.n	8006bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d05c      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x15a>
 8006ae4:	2b10      	cmp	r3, #16
 8006ae6:	d05a      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x15a>
 8006ae8:	e062      	b.n	8006bb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	6899      	ldr	r1, [r3, #8]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f000 fc95 	bl	8007428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	609a      	str	r2, [r3, #8]
      break;
 8006b16:	e04f      	b.n	8006bb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	6899      	ldr	r1, [r3, #8]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f000 fc7e 	bl	8007428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b3a:	609a      	str	r2, [r3, #8]
      break;
 8006b3c:	e03c      	b.n	8006bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6818      	ldr	r0, [r3, #0]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	6859      	ldr	r1, [r3, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f000 fbf2 	bl	8007334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2150      	movs	r1, #80	; 0x50
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fc4b 	bl	80073f2 <TIM_ITRx_SetConfig>
      break;
 8006b5c:	e02c      	b.n	8006bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	6859      	ldr	r1, [r3, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f000 fc11 	bl	8007392 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2160      	movs	r1, #96	; 0x60
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 fc3b 	bl	80073f2 <TIM_ITRx_SetConfig>
      break;
 8006b7c:	e01c      	b.n	8006bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	6859      	ldr	r1, [r3, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f000 fbd2 	bl	8007334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2140      	movs	r1, #64	; 0x40
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fc2b 	bl	80073f2 <TIM_ITRx_SetConfig>
      break;
 8006b9c:	e00c      	b.n	8006bb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	4610      	mov	r0, r2
 8006baa:	f000 fc22 	bl	80073f2 <TIM_ITRx_SetConfig>
      break;
 8006bae:	e003      	b.n	8006bb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bb4:	e000      	b.n	8006bb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	b083      	sub	sp, #12
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b083      	sub	sp, #12
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bee:	bf00      	nop
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b083      	sub	sp, #12
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006c3e:	bf00      	nop
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b083      	sub	sp, #12
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c52:	bf00      	nop
 8006c54:	370c      	adds	r7, #12
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr

08006c5e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b083      	sub	sp, #12
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006c7a:	bf00      	nop
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
	...

08006c88 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	460b      	mov	r3, r1
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e135      	b.n	8006f10 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d101      	bne.n	8006cb2 <HAL_TIM_RegisterCallback+0x2a>
 8006cae:	2302      	movs	r3, #2
 8006cb0:	e12e      	b.n	8006f10 <HAL_TIM_RegisterCallback+0x288>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	f040 80ba 	bne.w	8006e3c <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8006cc8:	7afb      	ldrb	r3, [r7, #11]
 8006cca:	2b1a      	cmp	r3, #26
 8006ccc:	f200 80b3 	bhi.w	8006e36 <HAL_TIM_RegisterCallback+0x1ae>
 8006cd0:	a201      	add	r2, pc, #4	; (adr r2, 8006cd8 <HAL_TIM_RegisterCallback+0x50>)
 8006cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd6:	bf00      	nop
 8006cd8:	08006d45 	.word	0x08006d45
 8006cdc:	08006d4d 	.word	0x08006d4d
 8006ce0:	08006d55 	.word	0x08006d55
 8006ce4:	08006d5d 	.word	0x08006d5d
 8006ce8:	08006d65 	.word	0x08006d65
 8006cec:	08006d6d 	.word	0x08006d6d
 8006cf0:	08006d75 	.word	0x08006d75
 8006cf4:	08006d7d 	.word	0x08006d7d
 8006cf8:	08006d85 	.word	0x08006d85
 8006cfc:	08006d8d 	.word	0x08006d8d
 8006d00:	08006d95 	.word	0x08006d95
 8006d04:	08006d9d 	.word	0x08006d9d
 8006d08:	08006da5 	.word	0x08006da5
 8006d0c:	08006dad 	.word	0x08006dad
 8006d10:	08006db5 	.word	0x08006db5
 8006d14:	08006dbf 	.word	0x08006dbf
 8006d18:	08006dc9 	.word	0x08006dc9
 8006d1c:	08006dd3 	.word	0x08006dd3
 8006d20:	08006ddd 	.word	0x08006ddd
 8006d24:	08006de7 	.word	0x08006de7
 8006d28:	08006df1 	.word	0x08006df1
 8006d2c:	08006dfb 	.word	0x08006dfb
 8006d30:	08006e05 	.word	0x08006e05
 8006d34:	08006e0f 	.word	0x08006e0f
 8006d38:	08006e19 	.word	0x08006e19
 8006d3c:	08006e23 	.word	0x08006e23
 8006d40:	08006e2d 	.word	0x08006e2d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006d4a:	e0dc      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006d52:	e0d8      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006d5a:	e0d4      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006d62:	e0d0      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006d6a:	e0cc      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006d72:	e0c8      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006d7a:	e0c4      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006d82:	e0c0      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006d8a:	e0bc      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006d92:	e0b8      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006d9a:	e0b4      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006da2:	e0b0      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006daa:	e0ac      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006db2:	e0a8      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8006dbc:	e0a3      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8006dc6:	e09e      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8006dd0:	e099      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8006dda:	e094      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8006de4:	e08f      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8006dee:	e08a      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8006df8:	e085      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8006e02:	e080      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8006e0c:	e07b      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8006e16:	e076      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8006e20:	e071      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8006e2a:	e06c      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8006e34:	e067      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	75fb      	strb	r3, [r7, #23]
        break;
 8006e3a:	e064      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d15c      	bne.n	8006f02 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8006e48:	7afb      	ldrb	r3, [r7, #11]
 8006e4a:	2b0d      	cmp	r3, #13
 8006e4c:	d856      	bhi.n	8006efc <HAL_TIM_RegisterCallback+0x274>
 8006e4e:	a201      	add	r2, pc, #4	; (adr r2, 8006e54 <HAL_TIM_RegisterCallback+0x1cc>)
 8006e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e54:	08006e8d 	.word	0x08006e8d
 8006e58:	08006e95 	.word	0x08006e95
 8006e5c:	08006e9d 	.word	0x08006e9d
 8006e60:	08006ea5 	.word	0x08006ea5
 8006e64:	08006ead 	.word	0x08006ead
 8006e68:	08006eb5 	.word	0x08006eb5
 8006e6c:	08006ebd 	.word	0x08006ebd
 8006e70:	08006ec5 	.word	0x08006ec5
 8006e74:	08006ecd 	.word	0x08006ecd
 8006e78:	08006ed5 	.word	0x08006ed5
 8006e7c:	08006edd 	.word	0x08006edd
 8006e80:	08006ee5 	.word	0x08006ee5
 8006e84:	08006eed 	.word	0x08006eed
 8006e88:	08006ef5 	.word	0x08006ef5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006e92:	e038      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006e9a:	e034      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006ea2:	e030      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006eaa:	e02c      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006eb2:	e028      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006eba:	e024      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006ec2:	e020      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006eca:	e01c      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006ed2:	e018      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006eda:	e014      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006ee2:	e010      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006eea:	e00c      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006ef2:	e008      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006efa:	e004      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	75fb      	strb	r3, [r7, #23]
        break;
 8006f00:	e001      	b.n	8006f06 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a34      	ldr	r2, [pc, #208]	; (8007000 <TIM_Base_SetConfig+0xe4>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d00f      	beq.n	8006f54 <TIM_Base_SetConfig+0x38>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3a:	d00b      	beq.n	8006f54 <TIM_Base_SetConfig+0x38>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a31      	ldr	r2, [pc, #196]	; (8007004 <TIM_Base_SetConfig+0xe8>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d007      	beq.n	8006f54 <TIM_Base_SetConfig+0x38>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a30      	ldr	r2, [pc, #192]	; (8007008 <TIM_Base_SetConfig+0xec>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d003      	beq.n	8006f54 <TIM_Base_SetConfig+0x38>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a2f      	ldr	r2, [pc, #188]	; (800700c <TIM_Base_SetConfig+0xf0>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d108      	bne.n	8006f66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a25      	ldr	r2, [pc, #148]	; (8007000 <TIM_Base_SetConfig+0xe4>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d01b      	beq.n	8006fa6 <TIM_Base_SetConfig+0x8a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f74:	d017      	beq.n	8006fa6 <TIM_Base_SetConfig+0x8a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a22      	ldr	r2, [pc, #136]	; (8007004 <TIM_Base_SetConfig+0xe8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d013      	beq.n	8006fa6 <TIM_Base_SetConfig+0x8a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a21      	ldr	r2, [pc, #132]	; (8007008 <TIM_Base_SetConfig+0xec>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00f      	beq.n	8006fa6 <TIM_Base_SetConfig+0x8a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a20      	ldr	r2, [pc, #128]	; (800700c <TIM_Base_SetConfig+0xf0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00b      	beq.n	8006fa6 <TIM_Base_SetConfig+0x8a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a1f      	ldr	r2, [pc, #124]	; (8007010 <TIM_Base_SetConfig+0xf4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d007      	beq.n	8006fa6 <TIM_Base_SetConfig+0x8a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a1e      	ldr	r2, [pc, #120]	; (8007014 <TIM_Base_SetConfig+0xf8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d003      	beq.n	8006fa6 <TIM_Base_SetConfig+0x8a>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a1d      	ldr	r2, [pc, #116]	; (8007018 <TIM_Base_SetConfig+0xfc>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d108      	bne.n	8006fb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a08      	ldr	r2, [pc, #32]	; (8007000 <TIM_Base_SetConfig+0xe4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d103      	bne.n	8006fec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	691a      	ldr	r2, [r3, #16]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	615a      	str	r2, [r3, #20]
}
 8006ff2:	bf00      	nop
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40010000 	.word	0x40010000
 8007004:	40000400 	.word	0x40000400
 8007008:	40000800 	.word	0x40000800
 800700c:	40000c00 	.word	0x40000c00
 8007010:	40014000 	.word	0x40014000
 8007014:	40014400 	.word	0x40014400
 8007018:	40014800 	.word	0x40014800

0800701c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	f023 0201 	bic.w	r2, r3, #1
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f023 0303 	bic.w	r3, r3, #3
 8007052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f023 0302 	bic.w	r3, r3, #2
 8007064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	4313      	orrs	r3, r2
 800706e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a1c      	ldr	r2, [pc, #112]	; (80070e4 <TIM_OC1_SetConfig+0xc8>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d10c      	bne.n	8007092 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f023 0308 	bic.w	r3, r3, #8
 800707e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f023 0304 	bic.w	r3, r3, #4
 8007090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a13      	ldr	r2, [pc, #76]	; (80070e4 <TIM_OC1_SetConfig+0xc8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d111      	bne.n	80070be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	621a      	str	r2, [r3, #32]
}
 80070d8:	bf00      	nop
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	40010000 	.word	0x40010000

080070e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	f023 0210 	bic.w	r2, r3, #16
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800711e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	021b      	lsls	r3, r3, #8
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	4313      	orrs	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f023 0320 	bic.w	r3, r3, #32
 8007132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a1e      	ldr	r2, [pc, #120]	; (80071bc <TIM_OC2_SetConfig+0xd4>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d10d      	bne.n	8007164 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800714e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	4313      	orrs	r3, r2
 800715a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007162:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a15      	ldr	r2, [pc, #84]	; (80071bc <TIM_OC2_SetConfig+0xd4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d113      	bne.n	8007194 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800717a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	4313      	orrs	r3, r2
 8007186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	4313      	orrs	r3, r2
 8007192:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	621a      	str	r2, [r3, #32]
}
 80071ae:	bf00      	nop
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40010000 	.word	0x40010000

080071c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f023 0303 	bic.w	r3, r3, #3
 80071f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	021b      	lsls	r3, r3, #8
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	4313      	orrs	r3, r2
 8007214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a1d      	ldr	r2, [pc, #116]	; (8007290 <TIM_OC3_SetConfig+0xd0>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d10d      	bne.n	800723a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	021b      	lsls	r3, r3, #8
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a14      	ldr	r2, [pc, #80]	; (8007290 <TIM_OC3_SetConfig+0xd0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d113      	bne.n	800726a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	011b      	lsls	r3, r3, #4
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	4313      	orrs	r3, r2
 8007268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	621a      	str	r2, [r3, #32]
}
 8007284:	bf00      	nop
 8007286:	371c      	adds	r7, #28
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	40010000 	.word	0x40010000

08007294 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	021b      	lsls	r3, r3, #8
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	031b      	lsls	r3, r3, #12
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a10      	ldr	r2, [pc, #64]	; (8007330 <TIM_OC4_SetConfig+0x9c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d109      	bne.n	8007308 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	019b      	lsls	r3, r3, #6
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	40010000 	.word	0x40010000

08007334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	f023 0201 	bic.w	r2, r3, #1
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800735e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	4313      	orrs	r3, r2
 8007368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f023 030a 	bic.w	r3, r3, #10
 8007370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	4313      	orrs	r3, r2
 8007378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	621a      	str	r2, [r3, #32]
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007392:	b480      	push	{r7}
 8007394:	b087      	sub	sp, #28
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f023 0210 	bic.w	r2, r3, #16
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	031b      	lsls	r3, r3, #12
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	011b      	lsls	r3, r3, #4
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	621a      	str	r2, [r3, #32]
}
 80073e6:	bf00      	nop
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b085      	sub	sp, #20
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4313      	orrs	r3, r2
 8007410:	f043 0307 	orr.w	r3, r3, #7
 8007414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	609a      	str	r2, [r3, #8]
}
 800741c:	bf00      	nop
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	021a      	lsls	r2, r3, #8
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	431a      	orrs	r2, r3
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4313      	orrs	r3, r2
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	4313      	orrs	r3, r2
 8007454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	609a      	str	r2, [r3, #8]
}
 800745c:	bf00      	nop
 800745e:	371c      	adds	r7, #28
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f003 031f 	and.w	r3, r3, #31
 800747a:	2201      	movs	r2, #1
 800747c:	fa02 f303 	lsl.w	r3, r2, r3
 8007480:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a1a      	ldr	r2, [r3, #32]
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	43db      	mvns	r3, r3
 800748a:	401a      	ands	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6a1a      	ldr	r2, [r3, #32]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f003 031f 	and.w	r3, r3, #31
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	fa01 f303 	lsl.w	r3, r1, r3
 80074a0:	431a      	orrs	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	621a      	str	r2, [r3, #32]
}
 80074a6:	bf00      	nop
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
	...

080074b4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a1c      	ldr	r2, [pc, #112]	; (8007530 <TIM_ResetCallback+0x7c>)
 80074c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a1b      	ldr	r2, [pc, #108]	; (8007534 <TIM_ResetCallback+0x80>)
 80074c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a1a      	ldr	r2, [pc, #104]	; (8007538 <TIM_ResetCallback+0x84>)
 80074d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a19      	ldr	r2, [pc, #100]	; (800753c <TIM_ResetCallback+0x88>)
 80074d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a18      	ldr	r2, [pc, #96]	; (8007540 <TIM_ResetCallback+0x8c>)
 80074e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a17      	ldr	r2, [pc, #92]	; (8007544 <TIM_ResetCallback+0x90>)
 80074e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a16      	ldr	r2, [pc, #88]	; (8007548 <TIM_ResetCallback+0x94>)
 80074f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a15      	ldr	r2, [pc, #84]	; (800754c <TIM_ResetCallback+0x98>)
 80074f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a14      	ldr	r2, [pc, #80]	; (8007550 <TIM_ResetCallback+0x9c>)
 8007500:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a13      	ldr	r2, [pc, #76]	; (8007554 <TIM_ResetCallback+0xa0>)
 8007508:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a12      	ldr	r2, [pc, #72]	; (8007558 <TIM_ResetCallback+0xa4>)
 8007510:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a11      	ldr	r2, [pc, #68]	; (800755c <TIM_ResetCallback+0xa8>)
 8007518:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a10      	ldr	r2, [pc, #64]	; (8007560 <TIM_ResetCallback+0xac>)
 8007520:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	08001dc1 	.word	0x08001dc1
 8007534:	08006bd3 	.word	0x08006bd3
 8007538:	08006c4b 	.word	0x08006c4b
 800753c:	08006c5f 	.word	0x08006c5f
 8007540:	08006bfb 	.word	0x08006bfb
 8007544:	08006c0f 	.word	0x08006c0f
 8007548:	08006be7 	.word	0x08006be7
 800754c:	08006c23 	.word	0x08006c23
 8007550:	08006c37 	.word	0x08006c37
 8007554:	08006c73 	.word	0x08006c73
 8007558:	080076e5 	.word	0x080076e5
 800755c:	080076f9 	.word	0x080076f9
 8007560:	0800770d 	.word	0x0800770d

08007564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007574:	2b01      	cmp	r3, #1
 8007576:	d101      	bne.n	800757c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007578:	2302      	movs	r3, #2
 800757a:	e050      	b.n	800761e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a1c      	ldr	r2, [pc, #112]	; (800762c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d018      	beq.n	80075f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c8:	d013      	beq.n	80075f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a18      	ldr	r2, [pc, #96]	; (8007630 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d00e      	beq.n	80075f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a16      	ldr	r2, [pc, #88]	; (8007634 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d009      	beq.n	80075f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a15      	ldr	r2, [pc, #84]	; (8007638 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d004      	beq.n	80075f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a13      	ldr	r2, [pc, #76]	; (800763c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d10c      	bne.n	800760c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	4313      	orrs	r3, r2
 8007602:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	40010000 	.word	0x40010000
 8007630:	40000400 	.word	0x40000400
 8007634:	40000800 	.word	0x40000800
 8007638:	40000c00 	.word	0x40000c00
 800763c:	40014000 	.word	0x40014000

08007640 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007654:	2b01      	cmp	r3, #1
 8007656:	d101      	bne.n	800765c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007658:	2302      	movs	r3, #2
 800765a:	e03d      	b.n	80076d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	4313      	orrs	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4313      	orrs	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e04a      	b.n	80077c8 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d111      	bne.n	8007762 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fd2c 	bl	80081a4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d102      	bne.n	800775a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a1e      	ldr	r2, [pc, #120]	; (80077d0 <HAL_UART_Init+0xb0>)
 8007758:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2224      	movs	r2, #36	; 0x24
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007778:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fff6 	bl	800876c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	691a      	ldr	r2, [r3, #16]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800778e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	695a      	ldr	r2, [r3, #20]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800779e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2220      	movs	r2, #32
 80077ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2220      	movs	r2, #32
 80077c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	08003a3d 	.word	0x08003a3d

080077d4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	460b      	mov	r3, r1
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d107      	bne.n	80077fc <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f0:	f043 0220 	orr.w	r2, r3, #32
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e08c      	b.n	8007916 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007802:	2b01      	cmp	r3, #1
 8007804:	d101      	bne.n	800780a <HAL_UART_RegisterCallback+0x36>
 8007806:	2302      	movs	r3, #2
 8007808:	e085      	b.n	8007916 <HAL_UART_RegisterCallback+0x142>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b20      	cmp	r3, #32
 800781c:	d151      	bne.n	80078c2 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800781e:	7afb      	ldrb	r3, [r7, #11]
 8007820:	2b0c      	cmp	r3, #12
 8007822:	d845      	bhi.n	80078b0 <HAL_UART_RegisterCallback+0xdc>
 8007824:	a201      	add	r2, pc, #4	; (adr r2, 800782c <HAL_UART_RegisterCallback+0x58>)
 8007826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782a:	bf00      	nop
 800782c:	08007861 	.word	0x08007861
 8007830:	08007869 	.word	0x08007869
 8007834:	08007871 	.word	0x08007871
 8007838:	08007879 	.word	0x08007879
 800783c:	08007881 	.word	0x08007881
 8007840:	08007889 	.word	0x08007889
 8007844:	08007891 	.word	0x08007891
 8007848:	08007899 	.word	0x08007899
 800784c:	080078b1 	.word	0x080078b1
 8007850:	080078b1 	.word	0x080078b1
 8007854:	080078b1 	.word	0x080078b1
 8007858:	080078a1 	.word	0x080078a1
 800785c:	080078a9 	.word	0x080078a9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8007866:	e051      	b.n	800790c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800786e:	e04d      	b.n	800790c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007876:	e049      	b.n	800790c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800787e:	e045      	b.n	800790c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007886:	e041      	b.n	800790c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800788e:	e03d      	b.n	800790c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007896:	e039      	b.n	800790c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800789e:	e035      	b.n	800790c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80078a6:	e031      	b.n	800790c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80078ae:	e02d      	b.n	800790c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b4:	f043 0220 	orr.w	r2, r3, #32
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	75fb      	strb	r3, [r7, #23]
        break;
 80078c0:	e024      	b.n	800790c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d116      	bne.n	80078fc <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 80078ce:	7afb      	ldrb	r3, [r7, #11]
 80078d0:	2b0b      	cmp	r3, #11
 80078d2:	d002      	beq.n	80078da <HAL_UART_RegisterCallback+0x106>
 80078d4:	2b0c      	cmp	r3, #12
 80078d6:	d004      	beq.n	80078e2 <HAL_UART_RegisterCallback+0x10e>
 80078d8:	e007      	b.n	80078ea <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80078e0:	e014      	b.n	800790c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80078e8:	e010      	b.n	800790c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	f043 0220 	orr.w	r2, r3, #32
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	75fb      	strb	r3, [r7, #23]
        break;
 80078fa:	e007      	b.n	800790c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007900:	f043 0220 	orr.w	r2, r3, #32
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007914:	7dfb      	ldrb	r3, [r7, #23]
}
 8007916:	4618      	mov	r0, r3
 8007918:	371c      	adds	r7, #28
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop

08007924 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	4613      	mov	r3, r2
 8007930:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b20      	cmp	r3, #32
 800793c:	d11d      	bne.n	800797a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <HAL_UART_Receive_IT+0x26>
 8007944:	88fb      	ldrh	r3, [r7, #6]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e016      	b.n	800797c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007954:	2b01      	cmp	r3, #1
 8007956:	d101      	bne.n	800795c <HAL_UART_Receive_IT+0x38>
 8007958:	2302      	movs	r3, #2
 800795a:	e00f      	b.n	800797c <HAL_UART_Receive_IT+0x58>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800796a:	88fb      	ldrh	r3, [r7, #6]
 800796c:	461a      	mov	r2, r3
 800796e:	68b9      	ldr	r1, [r7, #8]
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 fcf7 	bl	8008364 <UART_Start_Receive_IT>
 8007976:	4603      	mov	r3, r0
 8007978:	e000      	b.n	800797c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800797a:	2302      	movs	r3, #2
  }
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b08c      	sub	sp, #48	; 0x30
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	4613      	mov	r3, r2
 8007990:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b20      	cmp	r3, #32
 800799c:	d165      	bne.n	8007a6a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <HAL_UART_Transmit_DMA+0x26>
 80079a4:	88fb      	ldrh	r3, [r7, #6]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e05e      	b.n	8007a6c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d101      	bne.n	80079bc <HAL_UART_Transmit_DMA+0x38>
 80079b8:	2302      	movs	r3, #2
 80079ba:	e057      	b.n	8007a6c <HAL_UART_Transmit_DMA+0xe8>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	88fa      	ldrh	r2, [r7, #6]
 80079ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	88fa      	ldrh	r2, [r7, #6]
 80079d4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2221      	movs	r2, #33	; 0x21
 80079e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e8:	4a22      	ldr	r2, [pc, #136]	; (8007a74 <HAL_UART_Transmit_DMA+0xf0>)
 80079ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f0:	4a21      	ldr	r2, [pc, #132]	; (8007a78 <HAL_UART_Transmit_DMA+0xf4>)
 80079f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f8:	4a20      	ldr	r2, [pc, #128]	; (8007a7c <HAL_UART_Transmit_DMA+0xf8>)
 80079fa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a00:	2200      	movs	r2, #0
 8007a02:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007a04:	f107 0308 	add.w	r3, r7, #8
 8007a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a10:	6819      	ldr	r1, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3304      	adds	r3, #4
 8007a18:	461a      	mov	r2, r3
 8007a1a:	88fb      	ldrh	r3, [r7, #6]
 8007a1c:	f7fc ff6a 	bl	80048f4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a28:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3314      	adds	r3, #20
 8007a38:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	617b      	str	r3, [r7, #20]
   return(result);
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3314      	adds	r3, #20
 8007a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a52:	627a      	str	r2, [r7, #36]	; 0x24
 8007a54:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	6a39      	ldr	r1, [r7, #32]
 8007a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e5      	bne.n	8007a32 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	e000      	b.n	8007a6c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007a6a:	2302      	movs	r3, #2
  }
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3730      	adds	r7, #48	; 0x30
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	08008215 	.word	0x08008215
 8007a78:	080082b1 	.word	0x080082b1
 8007a7c:	080082cf 	.word	0x080082cf

08007a80 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b09a      	sub	sp, #104	; 0x68
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	330c      	adds	r3, #12
 8007a8e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a92:	e853 3f00 	ldrex	r3, [r3]
 8007a96:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a9e:	667b      	str	r3, [r7, #100]	; 0x64
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	330c      	adds	r3, #12
 8007aa6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007aa8:	657a      	str	r2, [r7, #84]	; 0x54
 8007aaa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007aae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ab0:	e841 2300 	strex	r3, r2, [r1]
 8007ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1e5      	bne.n	8007a88 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3314      	adds	r3, #20
 8007ac2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	f023 0301 	bic.w	r3, r3, #1
 8007ad2:	663b      	str	r3, [r7, #96]	; 0x60
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3314      	adds	r3, #20
 8007ada:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007adc:	643a      	str	r2, [r7, #64]	; 0x40
 8007ade:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ae2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e5      	bne.n	8007abc <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d119      	bne.n	8007b2c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	330c      	adds	r3, #12
 8007afe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	e853 3f00 	ldrex	r3, [r3]
 8007b06:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	f023 0310 	bic.w	r3, r3, #16
 8007b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	330c      	adds	r3, #12
 8007b16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b20:	e841 2300 	strex	r3, r2, [r1]
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e5      	bne.n	8007af8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b36:	2b40      	cmp	r3, #64	; 0x40
 8007b38:	d136      	bne.n	8007ba8 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3314      	adds	r3, #20
 8007b40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b50:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3314      	adds	r3, #20
 8007b58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b5a:	61ba      	str	r2, [r7, #24]
 8007b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6979      	ldr	r1, [r7, #20]
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	613b      	str	r3, [r7, #16]
   return(result);
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e5      	bne.n	8007b3a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d018      	beq.n	8007ba8 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fc ff0e 	bl	80049a4 <HAL_DMA_Abort>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00c      	beq.n	8007ba8 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fd f922 	bl	8004ddc <HAL_DMA_GetError>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	d104      	bne.n	8007ba8 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2210      	movs	r2, #16
 8007ba2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e00a      	b.n	8007bbe <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3768      	adds	r7, #104	; 0x68
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
	...

08007bc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b0ba      	sub	sp, #232	; 0xe8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bfe:	f003 030f 	and.w	r3, r3, #15
 8007c02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10f      	bne.n	8007c2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c12:	f003 0320 	and.w	r3, r3, #32
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d009      	beq.n	8007c2e <HAL_UART_IRQHandler+0x66>
 8007c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d003      	beq.n	8007c2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fce3 	bl	80085f2 <UART_Receive_IT>
      return;
 8007c2c:	e25b      	b.n	80080e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 80e1 	beq.w	8007dfa <HAL_UART_IRQHandler+0x232>
 8007c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d106      	bne.n	8007c52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 80d4 	beq.w	8007dfa <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00b      	beq.n	8007c76 <HAL_UART_IRQHandler+0xae>
 8007c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d005      	beq.n	8007c76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	f043 0201 	orr.w	r2, r3, #1
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c7a:	f003 0304 	and.w	r3, r3, #4
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00b      	beq.n	8007c9a <HAL_UART_IRQHandler+0xd2>
 8007c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d005      	beq.n	8007c9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c92:	f043 0202 	orr.w	r2, r3, #2
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00b      	beq.n	8007cbe <HAL_UART_IRQHandler+0xf6>
 8007ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d005      	beq.n	8007cbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	f043 0204 	orr.w	r2, r3, #4
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d011      	beq.n	8007cee <HAL_UART_IRQHandler+0x126>
 8007cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d105      	bne.n	8007ce2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d005      	beq.n	8007cee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce6:	f043 0208 	orr.w	r2, r3, #8
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 81f2 	beq.w	80080dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfc:	f003 0320 	and.w	r3, r3, #32
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d008      	beq.n	8007d16 <HAL_UART_IRQHandler+0x14e>
 8007d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d08:	f003 0320 	and.w	r3, r3, #32
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fc6e 	bl	80085f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	695b      	ldr	r3, [r3, #20]
 8007d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d20:	2b40      	cmp	r3, #64	; 0x40
 8007d22:	bf0c      	ite	eq
 8007d24:	2301      	moveq	r3, #1
 8007d26:	2300      	movne	r3, #0
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	f003 0308 	and.w	r3, r3, #8
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d103      	bne.n	8007d42 <HAL_UART_IRQHandler+0x17a>
 8007d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d051      	beq.n	8007de6 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fb74 	bl	8008430 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d52:	2b40      	cmp	r3, #64	; 0x40
 8007d54:	d142      	bne.n	8007ddc <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3314      	adds	r3, #20
 8007d5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d64:	e853 3f00 	ldrex	r3, [r3]
 8007d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3314      	adds	r3, #20
 8007d7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1d9      	bne.n	8007d56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d013      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dae:	4a7f      	ldr	r2, [pc, #508]	; (8007fac <HAL_UART_IRQHandler+0x3e4>)
 8007db0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fc fe64 	bl	8004a84 <HAL_DMA_Abort_IT>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d019      	beq.n	8007df6 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007dcc:	4610      	mov	r0, r2
 8007dce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd0:	e011      	b.n	8007df6 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dda:	e00c      	b.n	8007df6 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007de4:	e007      	b.n	8007df6 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007df4:	e172      	b.n	80080dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007df6:	bf00      	nop
    return;
 8007df8:	e170      	b.n	80080dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	f040 814c 	bne.w	800809c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e08:	f003 0310 	and.w	r3, r3, #16
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 8145 	beq.w	800809c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e16:	f003 0310 	and.w	r3, r3, #16
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 813e 	beq.w	800809c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e20:	2300      	movs	r3, #0
 8007e22:	60bb      	str	r3, [r7, #8]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	60bb      	str	r3, [r7, #8]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	60bb      	str	r3, [r7, #8]
 8007e34:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e40:	2b40      	cmp	r3, #64	; 0x40
 8007e42:	f040 80b5 	bne.w	8007fb0 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 8142 	beq.w	80080e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e64:	429a      	cmp	r2, r3
 8007e66:	f080 813b 	bcs.w	80080e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e70:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e7c:	f000 8088 	beq.w	8007f90 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	330c      	adds	r3, #12
 8007e86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	330c      	adds	r3, #12
 8007ea8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007eac:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007eb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007eb8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1d9      	bne.n	8007e80 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3314      	adds	r3, #20
 8007ed2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ed6:	e853 3f00 	ldrex	r3, [r3]
 8007eda:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ede:	f023 0301 	bic.w	r3, r3, #1
 8007ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3314      	adds	r3, #20
 8007eec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ef0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ef8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e1      	bne.n	8007ecc <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3314      	adds	r3, #20
 8007f0e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f12:	e853 3f00 	ldrex	r3, [r3]
 8007f16:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3314      	adds	r3, #20
 8007f28:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f2c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f30:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f34:	e841 2300 	strex	r3, r2, [r1]
 8007f38:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1e3      	bne.n	8007f08 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	330c      	adds	r3, #12
 8007f54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f60:	f023 0310 	bic.w	r3, r3, #16
 8007f64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007f72:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f74:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e3      	bne.n	8007f4e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fc fd0a 	bl	80049a4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007f9c:	b292      	uxth	r2, r2
 8007f9e:	1a8a      	subs	r2, r1, r2
 8007fa0:	b292      	uxth	r2, r2
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fa8:	e09a      	b.n	80080e0 <HAL_UART_IRQHandler+0x518>
 8007faa:	bf00      	nop
 8007fac:	080084f7 	.word	0x080084f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 808c 	beq.w	80080e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007fcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 8087 	beq.w	80080e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	330c      	adds	r3, #12
 8007fdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	330c      	adds	r3, #12
 8007ff6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007ffa:	647a      	str	r2, [r7, #68]	; 0x44
 8007ffc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008002:	e841 2300 	strex	r3, r2, [r1]
 8008006:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1e3      	bne.n	8007fd6 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3314      	adds	r3, #20
 8008014:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	e853 3f00 	ldrex	r3, [r3]
 800801c:	623b      	str	r3, [r7, #32]
   return(result);
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	f023 0301 	bic.w	r3, r3, #1
 8008024:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	3314      	adds	r3, #20
 800802e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008032:	633a      	str	r2, [r7, #48]	; 0x30
 8008034:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1e3      	bne.n	800800e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2220      	movs	r2, #32
 800804a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	330c      	adds	r3, #12
 800805a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	e853 3f00 	ldrex	r3, [r3]
 8008062:	60fb      	str	r3, [r7, #12]
   return(result);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 0310 	bic.w	r3, r3, #16
 800806a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	330c      	adds	r3, #12
 8008074:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008078:	61fa      	str	r2, [r7, #28]
 800807a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	69b9      	ldr	r1, [r7, #24]
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	617b      	str	r3, [r7, #20]
   return(result);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e3      	bne.n	8008054 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008090:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8008094:	4611      	mov	r1, r2
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800809a:	e023      	b.n	80080e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800809c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d009      	beq.n	80080bc <HAL_UART_IRQHandler+0x4f4>
 80080a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fa33 	bl	8008520 <UART_Transmit_IT>
    return;
 80080ba:	e014      	b.n	80080e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00e      	beq.n	80080e6 <HAL_UART_IRQHandler+0x51e>
 80080c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d008      	beq.n	80080e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fa73 	bl	80085c0 <UART_EndTransmit_IT>
    return;
 80080da:	e004      	b.n	80080e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80080dc:	bf00      	nop
 80080de:	e002      	b.n	80080e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80080e0:	bf00      	nop
 80080e2:	e000      	b.n	80080e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80080e4:	bf00      	nop
  }
}
 80080e6:	37e8      	adds	r7, #232	; 0xe8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a10      	ldr	r2, [pc, #64]	; (80081f0 <UART_InitCallbacksToDefault+0x4c>)
 80081b0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a0f      	ldr	r2, [pc, #60]	; (80081f4 <UART_InitCallbacksToDefault+0x50>)
 80081b6:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a0f      	ldr	r2, [pc, #60]	; (80081f8 <UART_InitCallbacksToDefault+0x54>)
 80081bc:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a0e      	ldr	r2, [pc, #56]	; (80081fc <UART_InitCallbacksToDefault+0x58>)
 80081c2:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a0e      	ldr	r2, [pc, #56]	; (8008200 <UART_InitCallbacksToDefault+0x5c>)
 80081c8:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a0d      	ldr	r2, [pc, #52]	; (8008204 <UART_InitCallbacksToDefault+0x60>)
 80081ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a0d      	ldr	r2, [pc, #52]	; (8008208 <UART_InitCallbacksToDefault+0x64>)
 80081d4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a0c      	ldr	r2, [pc, #48]	; (800820c <UART_InitCallbacksToDefault+0x68>)
 80081da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a0c      	ldr	r2, [pc, #48]	; (8008210 <UART_InitCallbacksToDefault+0x6c>)
 80081e0:	669a      	str	r2, [r3, #104]	; 0x68

}
 80081e2:	bf00      	nop
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	08008101 	.word	0x08008101
 80081f4:	080080ed 	.word	0x080080ed
 80081f8:	08008129 	.word	0x08008129
 80081fc:	08008115 	.word	0x08008115
 8008200:	0800813d 	.word	0x0800813d
 8008204:	08008151 	.word	0x08008151
 8008208:	08008165 	.word	0x08008165
 800820c:	08008179 	.word	0x08008179
 8008210:	0800818d 	.word	0x0800818d

08008214 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b090      	sub	sp, #64	; 0x40
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008220:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800822c:	2b00      	cmp	r3, #0
 800822e:	d137      	bne.n	80082a0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008232:	2200      	movs	r2, #0
 8008234:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3314      	adds	r3, #20
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	623b      	str	r3, [r7, #32]
   return(result);
 8008246:	6a3b      	ldr	r3, [r7, #32]
 8008248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800824c:	63bb      	str	r3, [r7, #56]	; 0x38
 800824e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3314      	adds	r3, #20
 8008254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008256:	633a      	str	r2, [r7, #48]	; 0x30
 8008258:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800825c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1e5      	bne.n	8008236 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800826a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	330c      	adds	r3, #12
 8008270:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	e853 3f00 	ldrex	r3, [r3]
 8008278:	60fb      	str	r3, [r7, #12]
   return(result);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008280:	637b      	str	r3, [r7, #52]	; 0x34
 8008282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	330c      	adds	r3, #12
 8008288:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800828a:	61fa      	str	r2, [r7, #28]
 800828c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	69b9      	ldr	r1, [r7, #24]
 8008290:	69fa      	ldr	r2, [r7, #28]
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	617b      	str	r3, [r7, #20]
   return(result);
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e5      	bne.n	800826a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800829e:	e003      	b.n	80082a8 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 80082a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80082a6:	4798      	blx	r3
}
 80082a8:	bf00      	nop
 80082aa:	3740      	adds	r7, #64	; 0x40
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082bc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082c6:	bf00      	nop
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ea:	2b80      	cmp	r3, #128	; 0x80
 80082ec:	bf0c      	ite	eq
 80082ee:	2301      	moveq	r3, #1
 80082f0:	2300      	movne	r3, #0
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b21      	cmp	r3, #33	; 0x21
 8008300:	d108      	bne.n	8008314 <UART_DMAError+0x46>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d005      	beq.n	8008314 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2200      	movs	r2, #0
 800830c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800830e:	68b8      	ldr	r0, [r7, #8]
 8008310:	f000 f866 	bl	80083e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831e:	2b40      	cmp	r3, #64	; 0x40
 8008320:	bf0c      	ite	eq
 8008322:	2301      	moveq	r3, #1
 8008324:	2300      	movne	r3, #0
 8008326:	b2db      	uxtb	r3, r3
 8008328:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b22      	cmp	r3, #34	; 0x22
 8008334:	d108      	bne.n	8008348 <UART_DMAError+0x7a>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2200      	movs	r2, #0
 8008340:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008342:	68b8      	ldr	r0, [r7, #8]
 8008344:	f000 f874 	bl	8008430 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834c:	f043 0210 	orr.w	r2, r3, #16
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008358:	68b8      	ldr	r0, [r7, #8]
 800835a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800835c:	bf00      	nop
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	4613      	mov	r3, r2
 8008370:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	88fa      	ldrh	r2, [r7, #6]
 800837c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	88fa      	ldrh	r2, [r7, #6]
 8008382:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2222      	movs	r2, #34	; 0x22
 800838e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d007      	beq.n	80083b2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	695a      	ldr	r2, [r3, #20]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f042 0201 	orr.w	r2, r2, #1
 80083c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f042 0220 	orr.w	r2, r2, #32
 80083d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b089      	sub	sp, #36	; 0x24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	330c      	adds	r3, #12
 80083ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80083fe:	61fb      	str	r3, [r7, #28]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	330c      	adds	r3, #12
 8008406:	69fa      	ldr	r2, [r7, #28]
 8008408:	61ba      	str	r2, [r7, #24]
 800840a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	6979      	ldr	r1, [r7, #20]
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	613b      	str	r3, [r7, #16]
   return(result);
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e5      	bne.n	80083e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2220      	movs	r2, #32
 8008420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008424:	bf00      	nop
 8008426:	3724      	adds	r7, #36	; 0x24
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008430:	b480      	push	{r7}
 8008432:	b095      	sub	sp, #84	; 0x54
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	330c      	adds	r3, #12
 800843e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008442:	e853 3f00 	ldrex	r3, [r3]
 8008446:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800844e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	330c      	adds	r3, #12
 8008456:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008458:	643a      	str	r2, [r7, #64]	; 0x40
 800845a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800845e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008460:	e841 2300 	strex	r3, r2, [r1]
 8008464:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1e5      	bne.n	8008438 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3314      	adds	r3, #20
 8008472:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	e853 3f00 	ldrex	r3, [r3]
 800847a:	61fb      	str	r3, [r7, #28]
   return(result);
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	f023 0301 	bic.w	r3, r3, #1
 8008482:	64bb      	str	r3, [r7, #72]	; 0x48
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3314      	adds	r3, #20
 800848a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800848c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800848e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008494:	e841 2300 	strex	r3, r2, [r1]
 8008498:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1e5      	bne.n	800846c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d119      	bne.n	80084dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	330c      	adds	r3, #12
 80084ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	e853 3f00 	ldrex	r3, [r3]
 80084b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f023 0310 	bic.w	r3, r3, #16
 80084be:	647b      	str	r3, [r7, #68]	; 0x44
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	330c      	adds	r3, #12
 80084c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084c8:	61ba      	str	r2, [r7, #24]
 80084ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084cc:	6979      	ldr	r1, [r7, #20]
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	e841 2300 	strex	r3, r2, [r1]
 80084d4:	613b      	str	r3, [r7, #16]
   return(result);
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1e5      	bne.n	80084a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2220      	movs	r2, #32
 80084e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80084ea:	bf00      	nop
 80084ec:	3754      	adds	r7, #84	; 0x54
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008502:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008518:	bf00      	nop
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800852e:	b2db      	uxtb	r3, r3
 8008530:	2b21      	cmp	r3, #33	; 0x21
 8008532:	d13e      	bne.n	80085b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800853c:	d114      	bne.n	8008568 <UART_Transmit_IT+0x48>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d110      	bne.n	8008568 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800855a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	1c9a      	adds	r2, r3, #2
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	621a      	str	r2, [r3, #32]
 8008566:	e008      	b.n	800857a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	1c59      	adds	r1, r3, #1
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	6211      	str	r1, [r2, #32]
 8008572:	781a      	ldrb	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800857e:	b29b      	uxth	r3, r3
 8008580:	3b01      	subs	r3, #1
 8008582:	b29b      	uxth	r3, r3
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	4619      	mov	r1, r3
 8008588:	84d1      	strh	r1, [r2, #38]	; 0x26
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10f      	bne.n	80085ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800859c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68da      	ldr	r2, [r3, #12]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	e000      	b.n	80085b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085b2:	2302      	movs	r3, #2
  }
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68da      	ldr	r2, [r3, #12]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2220      	movs	r2, #32
 80085dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b08c      	sub	sp, #48	; 0x30
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b22      	cmp	r3, #34	; 0x22
 8008604:	f040 80ad 	bne.w	8008762 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008610:	d117      	bne.n	8008642 <UART_Receive_IT+0x50>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d113      	bne.n	8008642 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800861a:	2300      	movs	r3, #0
 800861c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008622:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	b29b      	uxth	r3, r3
 800862c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008630:	b29a      	uxth	r2, r3
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	1c9a      	adds	r2, r3, #2
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	629a      	str	r2, [r3, #40]	; 0x28
 8008640:	e026      	b.n	8008690 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008646:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008648:	2300      	movs	r3, #0
 800864a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008654:	d007      	beq.n	8008666 <UART_Receive_IT+0x74>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10a      	bne.n	8008674 <UART_Receive_IT+0x82>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d106      	bne.n	8008674 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	b2da      	uxtb	r2, r3
 800866e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008670:	701a      	strb	r2, [r3, #0]
 8008672:	e008      	b.n	8008686 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008680:	b2da      	uxtb	r2, r3
 8008682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008684:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008694:	b29b      	uxth	r3, r3
 8008696:	3b01      	subs	r3, #1
 8008698:	b29b      	uxth	r3, r3
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	4619      	mov	r1, r3
 800869e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d15c      	bne.n	800875e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 0220 	bic.w	r2, r2, #32
 80086b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	695a      	ldr	r2, [r3, #20]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f022 0201 	bic.w	r2, r2, #1
 80086d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2220      	movs	r2, #32
 80086d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d136      	bne.n	8008752 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	330c      	adds	r3, #12
 80086f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	e853 3f00 	ldrex	r3, [r3]
 80086f8:	613b      	str	r3, [r7, #16]
   return(result);
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f023 0310 	bic.w	r3, r3, #16
 8008700:	627b      	str	r3, [r7, #36]	; 0x24
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	330c      	adds	r3, #12
 8008708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870a:	623a      	str	r2, [r7, #32]
 800870c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	69f9      	ldr	r1, [r7, #28]
 8008710:	6a3a      	ldr	r2, [r7, #32]
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	61bb      	str	r3, [r7, #24]
   return(result);
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e5      	bne.n	80086ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0310 	and.w	r3, r3, #16
 8008728:	2b10      	cmp	r3, #16
 800872a:	d10a      	bne.n	8008742 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800872c:	2300      	movs	r3, #0
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800874a:	4611      	mov	r1, r2
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	4798      	blx	r3
 8008750:	e003      	b.n	800875a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	e002      	b.n	8008764 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	e000      	b.n	8008764 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8008762:	2302      	movs	r3, #2
  }
}
 8008764:	4618      	mov	r0, r3
 8008766:	3730      	adds	r7, #48	; 0x30
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800876c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008770:	b0c0      	sub	sp, #256	; 0x100
 8008772:	af00      	add	r7, sp, #0
 8008774:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008788:	68d9      	ldr	r1, [r3, #12]
 800878a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	ea40 0301 	orr.w	r3, r0, r1
 8008794:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	431a      	orrs	r2, r3
 80087a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	431a      	orrs	r2, r3
 80087ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80087b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80087c4:	f021 010c 	bic.w	r1, r1, #12
 80087c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087d2:	430b      	orrs	r3, r1
 80087d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80087e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e6:	6999      	ldr	r1, [r3, #24]
 80087e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	ea40 0301 	orr.w	r3, r0, r1
 80087f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	4b8f      	ldr	r3, [pc, #572]	; (8008a38 <UART_SetConfig+0x2cc>)
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d005      	beq.n	800880c <UART_SetConfig+0xa0>
 8008800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	4b8d      	ldr	r3, [pc, #564]	; (8008a3c <UART_SetConfig+0x2d0>)
 8008808:	429a      	cmp	r2, r3
 800880a:	d104      	bne.n	8008816 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800880c:	f7fd fa26 	bl	8005c5c <HAL_RCC_GetPCLK2Freq>
 8008810:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008814:	e003      	b.n	800881e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008816:	f7fd fa0d 	bl	8005c34 <HAL_RCC_GetPCLK1Freq>
 800881a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800881e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008822:	69db      	ldr	r3, [r3, #28]
 8008824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008828:	f040 810c 	bne.w	8008a44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800882c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008830:	2200      	movs	r2, #0
 8008832:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008836:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800883a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800883e:	4622      	mov	r2, r4
 8008840:	462b      	mov	r3, r5
 8008842:	1891      	adds	r1, r2, r2
 8008844:	65b9      	str	r1, [r7, #88]	; 0x58
 8008846:	415b      	adcs	r3, r3
 8008848:	65fb      	str	r3, [r7, #92]	; 0x5c
 800884a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800884e:	4621      	mov	r1, r4
 8008850:	eb12 0801 	adds.w	r8, r2, r1
 8008854:	4629      	mov	r1, r5
 8008856:	eb43 0901 	adc.w	r9, r3, r1
 800885a:	f04f 0200 	mov.w	r2, #0
 800885e:	f04f 0300 	mov.w	r3, #0
 8008862:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008866:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800886a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800886e:	4690      	mov	r8, r2
 8008870:	4699      	mov	r9, r3
 8008872:	4623      	mov	r3, r4
 8008874:	eb18 0303 	adds.w	r3, r8, r3
 8008878:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800887c:	462b      	mov	r3, r5
 800887e:	eb49 0303 	adc.w	r3, r9, r3
 8008882:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008892:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008896:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800889a:	460b      	mov	r3, r1
 800889c:	18db      	adds	r3, r3, r3
 800889e:	653b      	str	r3, [r7, #80]	; 0x50
 80088a0:	4613      	mov	r3, r2
 80088a2:	eb42 0303 	adc.w	r3, r2, r3
 80088a6:	657b      	str	r3, [r7, #84]	; 0x54
 80088a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80088ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80088b0:	f7f8 f976 	bl	8000ba0 <__aeabi_uldivmod>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	4b61      	ldr	r3, [pc, #388]	; (8008a40 <UART_SetConfig+0x2d4>)
 80088ba:	fba3 2302 	umull	r2, r3, r3, r2
 80088be:	095b      	lsrs	r3, r3, #5
 80088c0:	011c      	lsls	r4, r3, #4
 80088c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088c6:	2200      	movs	r2, #0
 80088c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80088d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80088d4:	4642      	mov	r2, r8
 80088d6:	464b      	mov	r3, r9
 80088d8:	1891      	adds	r1, r2, r2
 80088da:	64b9      	str	r1, [r7, #72]	; 0x48
 80088dc:	415b      	adcs	r3, r3
 80088de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80088e4:	4641      	mov	r1, r8
 80088e6:	eb12 0a01 	adds.w	sl, r2, r1
 80088ea:	4649      	mov	r1, r9
 80088ec:	eb43 0b01 	adc.w	fp, r3, r1
 80088f0:	f04f 0200 	mov.w	r2, #0
 80088f4:	f04f 0300 	mov.w	r3, #0
 80088f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80088fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008904:	4692      	mov	sl, r2
 8008906:	469b      	mov	fp, r3
 8008908:	4643      	mov	r3, r8
 800890a:	eb1a 0303 	adds.w	r3, sl, r3
 800890e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008912:	464b      	mov	r3, r9
 8008914:	eb4b 0303 	adc.w	r3, fp, r3
 8008918:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800891c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008928:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800892c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008930:	460b      	mov	r3, r1
 8008932:	18db      	adds	r3, r3, r3
 8008934:	643b      	str	r3, [r7, #64]	; 0x40
 8008936:	4613      	mov	r3, r2
 8008938:	eb42 0303 	adc.w	r3, r2, r3
 800893c:	647b      	str	r3, [r7, #68]	; 0x44
 800893e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008942:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008946:	f7f8 f92b 	bl	8000ba0 <__aeabi_uldivmod>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4611      	mov	r1, r2
 8008950:	4b3b      	ldr	r3, [pc, #236]	; (8008a40 <UART_SetConfig+0x2d4>)
 8008952:	fba3 2301 	umull	r2, r3, r3, r1
 8008956:	095b      	lsrs	r3, r3, #5
 8008958:	2264      	movs	r2, #100	; 0x64
 800895a:	fb02 f303 	mul.w	r3, r2, r3
 800895e:	1acb      	subs	r3, r1, r3
 8008960:	00db      	lsls	r3, r3, #3
 8008962:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008966:	4b36      	ldr	r3, [pc, #216]	; (8008a40 <UART_SetConfig+0x2d4>)
 8008968:	fba3 2302 	umull	r2, r3, r3, r2
 800896c:	095b      	lsrs	r3, r3, #5
 800896e:	005b      	lsls	r3, r3, #1
 8008970:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008974:	441c      	add	r4, r3
 8008976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800897a:	2200      	movs	r2, #0
 800897c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008980:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008984:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008988:	4642      	mov	r2, r8
 800898a:	464b      	mov	r3, r9
 800898c:	1891      	adds	r1, r2, r2
 800898e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008990:	415b      	adcs	r3, r3
 8008992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008994:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008998:	4641      	mov	r1, r8
 800899a:	1851      	adds	r1, r2, r1
 800899c:	6339      	str	r1, [r7, #48]	; 0x30
 800899e:	4649      	mov	r1, r9
 80089a0:	414b      	adcs	r3, r1
 80089a2:	637b      	str	r3, [r7, #52]	; 0x34
 80089a4:	f04f 0200 	mov.w	r2, #0
 80089a8:	f04f 0300 	mov.w	r3, #0
 80089ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80089b0:	4659      	mov	r1, fp
 80089b2:	00cb      	lsls	r3, r1, #3
 80089b4:	4651      	mov	r1, sl
 80089b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089ba:	4651      	mov	r1, sl
 80089bc:	00ca      	lsls	r2, r1, #3
 80089be:	4610      	mov	r0, r2
 80089c0:	4619      	mov	r1, r3
 80089c2:	4603      	mov	r3, r0
 80089c4:	4642      	mov	r2, r8
 80089c6:	189b      	adds	r3, r3, r2
 80089c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089cc:	464b      	mov	r3, r9
 80089ce:	460a      	mov	r2, r1
 80089d0:	eb42 0303 	adc.w	r3, r2, r3
 80089d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80089e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80089e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80089ec:	460b      	mov	r3, r1
 80089ee:	18db      	adds	r3, r3, r3
 80089f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80089f2:	4613      	mov	r3, r2
 80089f4:	eb42 0303 	adc.w	r3, r2, r3
 80089f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008a02:	f7f8 f8cd 	bl	8000ba0 <__aeabi_uldivmod>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4b0d      	ldr	r3, [pc, #52]	; (8008a40 <UART_SetConfig+0x2d4>)
 8008a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a10:	095b      	lsrs	r3, r3, #5
 8008a12:	2164      	movs	r1, #100	; 0x64
 8008a14:	fb01 f303 	mul.w	r3, r1, r3
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	00db      	lsls	r3, r3, #3
 8008a1c:	3332      	adds	r3, #50	; 0x32
 8008a1e:	4a08      	ldr	r2, [pc, #32]	; (8008a40 <UART_SetConfig+0x2d4>)
 8008a20:	fba2 2303 	umull	r2, r3, r2, r3
 8008a24:	095b      	lsrs	r3, r3, #5
 8008a26:	f003 0207 	and.w	r2, r3, #7
 8008a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4422      	add	r2, r4
 8008a32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a34:	e105      	b.n	8008c42 <UART_SetConfig+0x4d6>
 8008a36:	bf00      	nop
 8008a38:	40011000 	.word	0x40011000
 8008a3c:	40011400 	.word	0x40011400
 8008a40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008a52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008a56:	4642      	mov	r2, r8
 8008a58:	464b      	mov	r3, r9
 8008a5a:	1891      	adds	r1, r2, r2
 8008a5c:	6239      	str	r1, [r7, #32]
 8008a5e:	415b      	adcs	r3, r3
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
 8008a62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a66:	4641      	mov	r1, r8
 8008a68:	1854      	adds	r4, r2, r1
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	eb43 0501 	adc.w	r5, r3, r1
 8008a70:	f04f 0200 	mov.w	r2, #0
 8008a74:	f04f 0300 	mov.w	r3, #0
 8008a78:	00eb      	lsls	r3, r5, #3
 8008a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a7e:	00e2      	lsls	r2, r4, #3
 8008a80:	4614      	mov	r4, r2
 8008a82:	461d      	mov	r5, r3
 8008a84:	4643      	mov	r3, r8
 8008a86:	18e3      	adds	r3, r4, r3
 8008a88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008a8c:	464b      	mov	r3, r9
 8008a8e:	eb45 0303 	adc.w	r3, r5, r3
 8008a92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008aa2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008aa6:	f04f 0200 	mov.w	r2, #0
 8008aaa:	f04f 0300 	mov.w	r3, #0
 8008aae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	008b      	lsls	r3, r1, #2
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008abc:	4621      	mov	r1, r4
 8008abe:	008a      	lsls	r2, r1, #2
 8008ac0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ac4:	f7f8 f86c 	bl	8000ba0 <__aeabi_uldivmod>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	460b      	mov	r3, r1
 8008acc:	4b60      	ldr	r3, [pc, #384]	; (8008c50 <UART_SetConfig+0x4e4>)
 8008ace:	fba3 2302 	umull	r2, r3, r3, r2
 8008ad2:	095b      	lsrs	r3, r3, #5
 8008ad4:	011c      	lsls	r4, r3, #4
 8008ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ae0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ae4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008ae8:	4642      	mov	r2, r8
 8008aea:	464b      	mov	r3, r9
 8008aec:	1891      	adds	r1, r2, r2
 8008aee:	61b9      	str	r1, [r7, #24]
 8008af0:	415b      	adcs	r3, r3
 8008af2:	61fb      	str	r3, [r7, #28]
 8008af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008af8:	4641      	mov	r1, r8
 8008afa:	1851      	adds	r1, r2, r1
 8008afc:	6139      	str	r1, [r7, #16]
 8008afe:	4649      	mov	r1, r9
 8008b00:	414b      	adcs	r3, r1
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	f04f 0200 	mov.w	r2, #0
 8008b08:	f04f 0300 	mov.w	r3, #0
 8008b0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b10:	4659      	mov	r1, fp
 8008b12:	00cb      	lsls	r3, r1, #3
 8008b14:	4651      	mov	r1, sl
 8008b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b1a:	4651      	mov	r1, sl
 8008b1c:	00ca      	lsls	r2, r1, #3
 8008b1e:	4610      	mov	r0, r2
 8008b20:	4619      	mov	r1, r3
 8008b22:	4603      	mov	r3, r0
 8008b24:	4642      	mov	r2, r8
 8008b26:	189b      	adds	r3, r3, r2
 8008b28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b2c:	464b      	mov	r3, r9
 8008b2e:	460a      	mov	r2, r1
 8008b30:	eb42 0303 	adc.w	r3, r2, r3
 8008b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008b44:	f04f 0200 	mov.w	r2, #0
 8008b48:	f04f 0300 	mov.w	r3, #0
 8008b4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008b50:	4649      	mov	r1, r9
 8008b52:	008b      	lsls	r3, r1, #2
 8008b54:	4641      	mov	r1, r8
 8008b56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b5a:	4641      	mov	r1, r8
 8008b5c:	008a      	lsls	r2, r1, #2
 8008b5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008b62:	f7f8 f81d 	bl	8000ba0 <__aeabi_uldivmod>
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	4b39      	ldr	r3, [pc, #228]	; (8008c50 <UART_SetConfig+0x4e4>)
 8008b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8008b70:	095b      	lsrs	r3, r3, #5
 8008b72:	2164      	movs	r1, #100	; 0x64
 8008b74:	fb01 f303 	mul.w	r3, r1, r3
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	011b      	lsls	r3, r3, #4
 8008b7c:	3332      	adds	r3, #50	; 0x32
 8008b7e:	4a34      	ldr	r2, [pc, #208]	; (8008c50 <UART_SetConfig+0x4e4>)
 8008b80:	fba2 2303 	umull	r2, r3, r2, r3
 8008b84:	095b      	lsrs	r3, r3, #5
 8008b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b8a:	441c      	add	r4, r3
 8008b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b90:	2200      	movs	r2, #0
 8008b92:	673b      	str	r3, [r7, #112]	; 0x70
 8008b94:	677a      	str	r2, [r7, #116]	; 0x74
 8008b96:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008b9a:	4642      	mov	r2, r8
 8008b9c:	464b      	mov	r3, r9
 8008b9e:	1891      	adds	r1, r2, r2
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	415b      	adcs	r3, r3
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008baa:	4641      	mov	r1, r8
 8008bac:	1851      	adds	r1, r2, r1
 8008bae:	6039      	str	r1, [r7, #0]
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	414b      	adcs	r3, r1
 8008bb4:	607b      	str	r3, [r7, #4]
 8008bb6:	f04f 0200 	mov.w	r2, #0
 8008bba:	f04f 0300 	mov.w	r3, #0
 8008bbe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008bc2:	4659      	mov	r1, fp
 8008bc4:	00cb      	lsls	r3, r1, #3
 8008bc6:	4651      	mov	r1, sl
 8008bc8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bcc:	4651      	mov	r1, sl
 8008bce:	00ca      	lsls	r2, r1, #3
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	4642      	mov	r2, r8
 8008bd8:	189b      	adds	r3, r3, r2
 8008bda:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bdc:	464b      	mov	r3, r9
 8008bde:	460a      	mov	r2, r1
 8008be0:	eb42 0303 	adc.w	r3, r2, r3
 8008be4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	663b      	str	r3, [r7, #96]	; 0x60
 8008bf0:	667a      	str	r2, [r7, #100]	; 0x64
 8008bf2:	f04f 0200 	mov.w	r2, #0
 8008bf6:	f04f 0300 	mov.w	r3, #0
 8008bfa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008bfe:	4649      	mov	r1, r9
 8008c00:	008b      	lsls	r3, r1, #2
 8008c02:	4641      	mov	r1, r8
 8008c04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c08:	4641      	mov	r1, r8
 8008c0a:	008a      	lsls	r2, r1, #2
 8008c0c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008c10:	f7f7 ffc6 	bl	8000ba0 <__aeabi_uldivmod>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4b0d      	ldr	r3, [pc, #52]	; (8008c50 <UART_SetConfig+0x4e4>)
 8008c1a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c1e:	095b      	lsrs	r3, r3, #5
 8008c20:	2164      	movs	r1, #100	; 0x64
 8008c22:	fb01 f303 	mul.w	r3, r1, r3
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	011b      	lsls	r3, r3, #4
 8008c2a:	3332      	adds	r3, #50	; 0x32
 8008c2c:	4a08      	ldr	r2, [pc, #32]	; (8008c50 <UART_SetConfig+0x4e4>)
 8008c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c32:	095b      	lsrs	r3, r3, #5
 8008c34:	f003 020f 	and.w	r2, r3, #15
 8008c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4422      	add	r2, r4
 8008c40:	609a      	str	r2, [r3, #8]
}
 8008c42:	bf00      	nop
 8008c44:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c4e:	bf00      	nop
 8008c50:	51eb851f 	.word	0x51eb851f

08008c54 <__errno>:
 8008c54:	4b01      	ldr	r3, [pc, #4]	; (8008c5c <__errno+0x8>)
 8008c56:	6818      	ldr	r0, [r3, #0]
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	20000270 	.word	0x20000270

08008c60 <__libc_init_array>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	4d0d      	ldr	r5, [pc, #52]	; (8008c98 <__libc_init_array+0x38>)
 8008c64:	4c0d      	ldr	r4, [pc, #52]	; (8008c9c <__libc_init_array+0x3c>)
 8008c66:	1b64      	subs	r4, r4, r5
 8008c68:	10a4      	asrs	r4, r4, #2
 8008c6a:	2600      	movs	r6, #0
 8008c6c:	42a6      	cmp	r6, r4
 8008c6e:	d109      	bne.n	8008c84 <__libc_init_array+0x24>
 8008c70:	4d0b      	ldr	r5, [pc, #44]	; (8008ca0 <__libc_init_array+0x40>)
 8008c72:	4c0c      	ldr	r4, [pc, #48]	; (8008ca4 <__libc_init_array+0x44>)
 8008c74:	f001 ff86 	bl	800ab84 <_init>
 8008c78:	1b64      	subs	r4, r4, r5
 8008c7a:	10a4      	asrs	r4, r4, #2
 8008c7c:	2600      	movs	r6, #0
 8008c7e:	42a6      	cmp	r6, r4
 8008c80:	d105      	bne.n	8008c8e <__libc_init_array+0x2e>
 8008c82:	bd70      	pop	{r4, r5, r6, pc}
 8008c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c88:	4798      	blx	r3
 8008c8a:	3601      	adds	r6, #1
 8008c8c:	e7ee      	b.n	8008c6c <__libc_init_array+0xc>
 8008c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c92:	4798      	blx	r3
 8008c94:	3601      	adds	r6, #1
 8008c96:	e7f2      	b.n	8008c7e <__libc_init_array+0x1e>
 8008c98:	0800afe8 	.word	0x0800afe8
 8008c9c:	0800afe8 	.word	0x0800afe8
 8008ca0:	0800afe8 	.word	0x0800afe8
 8008ca4:	0800afec 	.word	0x0800afec

08008ca8 <memcpy>:
 8008ca8:	440a      	add	r2, r1
 8008caa:	4291      	cmp	r1, r2
 8008cac:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb0:	d100      	bne.n	8008cb4 <memcpy+0xc>
 8008cb2:	4770      	bx	lr
 8008cb4:	b510      	push	{r4, lr}
 8008cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cbe:	4291      	cmp	r1, r2
 8008cc0:	d1f9      	bne.n	8008cb6 <memcpy+0xe>
 8008cc2:	bd10      	pop	{r4, pc}

08008cc4 <memset>:
 8008cc4:	4402      	add	r2, r0
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d100      	bne.n	8008cce <memset+0xa>
 8008ccc:	4770      	bx	lr
 8008cce:	f803 1b01 	strb.w	r1, [r3], #1
 8008cd2:	e7f9      	b.n	8008cc8 <memset+0x4>

08008cd4 <cosf>:
 8008cd4:	ee10 3a10 	vmov	r3, s0
 8008cd8:	b507      	push	{r0, r1, r2, lr}
 8008cda:	4a1e      	ldr	r2, [pc, #120]	; (8008d54 <cosf+0x80>)
 8008cdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	dc06      	bgt.n	8008cf2 <cosf+0x1e>
 8008ce4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8008d58 <cosf+0x84>
 8008ce8:	b003      	add	sp, #12
 8008cea:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cee:	f001 ba9b 	b.w	800a228 <__kernel_cosf>
 8008cf2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008cf6:	db04      	blt.n	8008d02 <cosf+0x2e>
 8008cf8:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008cfc:	b003      	add	sp, #12
 8008cfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d02:	4668      	mov	r0, sp
 8008d04:	f001 f954 	bl	8009fb0 <__ieee754_rem_pio2f>
 8008d08:	f000 0003 	and.w	r0, r0, #3
 8008d0c:	2801      	cmp	r0, #1
 8008d0e:	d009      	beq.n	8008d24 <cosf+0x50>
 8008d10:	2802      	cmp	r0, #2
 8008d12:	d010      	beq.n	8008d36 <cosf+0x62>
 8008d14:	b9b0      	cbnz	r0, 8008d44 <cosf+0x70>
 8008d16:	eddd 0a01 	vldr	s1, [sp, #4]
 8008d1a:	ed9d 0a00 	vldr	s0, [sp]
 8008d1e:	f001 fa83 	bl	800a228 <__kernel_cosf>
 8008d22:	e7eb      	b.n	8008cfc <cosf+0x28>
 8008d24:	eddd 0a01 	vldr	s1, [sp, #4]
 8008d28:	ed9d 0a00 	vldr	s0, [sp]
 8008d2c:	f001 fd52 	bl	800a7d4 <__kernel_sinf>
 8008d30:	eeb1 0a40 	vneg.f32	s0, s0
 8008d34:	e7e2      	b.n	8008cfc <cosf+0x28>
 8008d36:	eddd 0a01 	vldr	s1, [sp, #4]
 8008d3a:	ed9d 0a00 	vldr	s0, [sp]
 8008d3e:	f001 fa73 	bl	800a228 <__kernel_cosf>
 8008d42:	e7f5      	b.n	8008d30 <cosf+0x5c>
 8008d44:	eddd 0a01 	vldr	s1, [sp, #4]
 8008d48:	ed9d 0a00 	vldr	s0, [sp]
 8008d4c:	2001      	movs	r0, #1
 8008d4e:	f001 fd41 	bl	800a7d4 <__kernel_sinf>
 8008d52:	e7d3      	b.n	8008cfc <cosf+0x28>
 8008d54:	3f490fd8 	.word	0x3f490fd8
 8008d58:	00000000 	.word	0x00000000

08008d5c <sinf>:
 8008d5c:	ee10 3a10 	vmov	r3, s0
 8008d60:	b507      	push	{r0, r1, r2, lr}
 8008d62:	4a1f      	ldr	r2, [pc, #124]	; (8008de0 <sinf+0x84>)
 8008d64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	dc07      	bgt.n	8008d7c <sinf+0x20>
 8008d6c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8008de4 <sinf+0x88>
 8008d70:	2000      	movs	r0, #0
 8008d72:	b003      	add	sp, #12
 8008d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d78:	f001 bd2c 	b.w	800a7d4 <__kernel_sinf>
 8008d7c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008d80:	db04      	blt.n	8008d8c <sinf+0x30>
 8008d82:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008d86:	b003      	add	sp, #12
 8008d88:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d8c:	4668      	mov	r0, sp
 8008d8e:	f001 f90f 	bl	8009fb0 <__ieee754_rem_pio2f>
 8008d92:	f000 0003 	and.w	r0, r0, #3
 8008d96:	2801      	cmp	r0, #1
 8008d98:	d00a      	beq.n	8008db0 <sinf+0x54>
 8008d9a:	2802      	cmp	r0, #2
 8008d9c:	d00f      	beq.n	8008dbe <sinf+0x62>
 8008d9e:	b9c0      	cbnz	r0, 8008dd2 <sinf+0x76>
 8008da0:	eddd 0a01 	vldr	s1, [sp, #4]
 8008da4:	ed9d 0a00 	vldr	s0, [sp]
 8008da8:	2001      	movs	r0, #1
 8008daa:	f001 fd13 	bl	800a7d4 <__kernel_sinf>
 8008dae:	e7ea      	b.n	8008d86 <sinf+0x2a>
 8008db0:	eddd 0a01 	vldr	s1, [sp, #4]
 8008db4:	ed9d 0a00 	vldr	s0, [sp]
 8008db8:	f001 fa36 	bl	800a228 <__kernel_cosf>
 8008dbc:	e7e3      	b.n	8008d86 <sinf+0x2a>
 8008dbe:	eddd 0a01 	vldr	s1, [sp, #4]
 8008dc2:	ed9d 0a00 	vldr	s0, [sp]
 8008dc6:	2001      	movs	r0, #1
 8008dc8:	f001 fd04 	bl	800a7d4 <__kernel_sinf>
 8008dcc:	eeb1 0a40 	vneg.f32	s0, s0
 8008dd0:	e7d9      	b.n	8008d86 <sinf+0x2a>
 8008dd2:	eddd 0a01 	vldr	s1, [sp, #4]
 8008dd6:	ed9d 0a00 	vldr	s0, [sp]
 8008dda:	f001 fa25 	bl	800a228 <__kernel_cosf>
 8008dde:	e7f5      	b.n	8008dcc <sinf+0x70>
 8008de0:	3f490fd8 	.word	0x3f490fd8
 8008de4:	00000000 	.word	0x00000000

08008de8 <acos>:
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	ed2d 8b02 	vpush	{d8}
 8008dee:	ec55 4b10 	vmov	r4, r5, d0
 8008df2:	f000 f89d 	bl	8008f30 <__ieee754_acos>
 8008df6:	4622      	mov	r2, r4
 8008df8:	462b      	mov	r3, r5
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	eeb0 8a40 	vmov.f32	s16, s0
 8008e02:	eef0 8a60 	vmov.f32	s17, s1
 8008e06:	f7f7 fe3d 	bl	8000a84 <__aeabi_dcmpun>
 8008e0a:	b9a8      	cbnz	r0, 8008e38 <acos+0x50>
 8008e0c:	ec45 4b10 	vmov	d0, r4, r5
 8008e10:	f001 fd58 	bl	800a8c4 <fabs>
 8008e14:	4b0c      	ldr	r3, [pc, #48]	; (8008e48 <acos+0x60>)
 8008e16:	ec51 0b10 	vmov	r0, r1, d0
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f7f7 fe28 	bl	8000a70 <__aeabi_dcmpgt>
 8008e20:	b150      	cbz	r0, 8008e38 <acos+0x50>
 8008e22:	f7ff ff17 	bl	8008c54 <__errno>
 8008e26:	ecbd 8b02 	vpop	{d8}
 8008e2a:	2321      	movs	r3, #33	; 0x21
 8008e2c:	6003      	str	r3, [r0, #0]
 8008e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e32:	4806      	ldr	r0, [pc, #24]	; (8008e4c <acos+0x64>)
 8008e34:	f001 bd5c 	b.w	800a8f0 <nan>
 8008e38:	eeb0 0a48 	vmov.f32	s0, s16
 8008e3c:	eef0 0a68 	vmov.f32	s1, s17
 8008e40:	ecbd 8b02 	vpop	{d8}
 8008e44:	bd38      	pop	{r3, r4, r5, pc}
 8008e46:	bf00      	nop
 8008e48:	3ff00000 	.word	0x3ff00000
 8008e4c:	0800abd8 	.word	0x0800abd8

08008e50 <pow>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	ed2d 8b02 	vpush	{d8}
 8008e56:	eeb0 8a40 	vmov.f32	s16, s0
 8008e5a:	eef0 8a60 	vmov.f32	s17, s1
 8008e5e:	ec55 4b11 	vmov	r4, r5, d1
 8008e62:	f000 fac5 	bl	80093f0 <__ieee754_pow>
 8008e66:	4622      	mov	r2, r4
 8008e68:	462b      	mov	r3, r5
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	ec57 6b10 	vmov	r6, r7, d0
 8008e72:	f7f7 fe07 	bl	8000a84 <__aeabi_dcmpun>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	d13b      	bne.n	8008ef2 <pow+0xa2>
 8008e7a:	ec51 0b18 	vmov	r0, r1, d8
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2300      	movs	r3, #0
 8008e82:	f7f7 fdcd 	bl	8000a20 <__aeabi_dcmpeq>
 8008e86:	b1b8      	cbz	r0, 8008eb8 <pow+0x68>
 8008e88:	2200      	movs	r2, #0
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	4629      	mov	r1, r5
 8008e90:	f7f7 fdc6 	bl	8000a20 <__aeabi_dcmpeq>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d146      	bne.n	8008f26 <pow+0xd6>
 8008e98:	ec45 4b10 	vmov	d0, r4, r5
 8008e9c:	f001 fd1b 	bl	800a8d6 <finite>
 8008ea0:	b338      	cbz	r0, 8008ef2 <pow+0xa2>
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	f7f7 fdc3 	bl	8000a34 <__aeabi_dcmplt>
 8008eae:	b300      	cbz	r0, 8008ef2 <pow+0xa2>
 8008eb0:	f7ff fed0 	bl	8008c54 <__errno>
 8008eb4:	2322      	movs	r3, #34	; 0x22
 8008eb6:	e01b      	b.n	8008ef0 <pow+0xa0>
 8008eb8:	ec47 6b10 	vmov	d0, r6, r7
 8008ebc:	f001 fd0b 	bl	800a8d6 <finite>
 8008ec0:	b9e0      	cbnz	r0, 8008efc <pow+0xac>
 8008ec2:	eeb0 0a48 	vmov.f32	s0, s16
 8008ec6:	eef0 0a68 	vmov.f32	s1, s17
 8008eca:	f001 fd04 	bl	800a8d6 <finite>
 8008ece:	b1a8      	cbz	r0, 8008efc <pow+0xac>
 8008ed0:	ec45 4b10 	vmov	d0, r4, r5
 8008ed4:	f001 fcff 	bl	800a8d6 <finite>
 8008ed8:	b180      	cbz	r0, 8008efc <pow+0xac>
 8008eda:	4632      	mov	r2, r6
 8008edc:	463b      	mov	r3, r7
 8008ede:	4630      	mov	r0, r6
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	f7f7 fdcf 	bl	8000a84 <__aeabi_dcmpun>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d0e2      	beq.n	8008eb0 <pow+0x60>
 8008eea:	f7ff feb3 	bl	8008c54 <__errno>
 8008eee:	2321      	movs	r3, #33	; 0x21
 8008ef0:	6003      	str	r3, [r0, #0]
 8008ef2:	ecbd 8b02 	vpop	{d8}
 8008ef6:	ec47 6b10 	vmov	d0, r6, r7
 8008efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008efc:	2200      	movs	r2, #0
 8008efe:	2300      	movs	r3, #0
 8008f00:	4630      	mov	r0, r6
 8008f02:	4639      	mov	r1, r7
 8008f04:	f7f7 fd8c 	bl	8000a20 <__aeabi_dcmpeq>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d0f2      	beq.n	8008ef2 <pow+0xa2>
 8008f0c:	eeb0 0a48 	vmov.f32	s0, s16
 8008f10:	eef0 0a68 	vmov.f32	s1, s17
 8008f14:	f001 fcdf 	bl	800a8d6 <finite>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d0ea      	beq.n	8008ef2 <pow+0xa2>
 8008f1c:	ec45 4b10 	vmov	d0, r4, r5
 8008f20:	f001 fcd9 	bl	800a8d6 <finite>
 8008f24:	e7c3      	b.n	8008eae <pow+0x5e>
 8008f26:	4f01      	ldr	r7, [pc, #4]	; (8008f2c <pow+0xdc>)
 8008f28:	2600      	movs	r6, #0
 8008f2a:	e7e2      	b.n	8008ef2 <pow+0xa2>
 8008f2c:	3ff00000 	.word	0x3ff00000

08008f30 <__ieee754_acos>:
 8008f30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f34:	ec55 4b10 	vmov	r4, r5, d0
 8008f38:	49b7      	ldr	r1, [pc, #732]	; (8009218 <__ieee754_acos+0x2e8>)
 8008f3a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008f3e:	428b      	cmp	r3, r1
 8008f40:	dd1b      	ble.n	8008f7a <__ieee754_acos+0x4a>
 8008f42:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8008f46:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008f4a:	4323      	orrs	r3, r4
 8008f4c:	d106      	bne.n	8008f5c <__ieee754_acos+0x2c>
 8008f4e:	2d00      	cmp	r5, #0
 8008f50:	f300 8211 	bgt.w	8009376 <__ieee754_acos+0x446>
 8008f54:	ed9f 0b96 	vldr	d0, [pc, #600]	; 80091b0 <__ieee754_acos+0x280>
 8008f58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5c:	ee10 2a10 	vmov	r2, s0
 8008f60:	462b      	mov	r3, r5
 8008f62:	ee10 0a10 	vmov	r0, s0
 8008f66:	4629      	mov	r1, r5
 8008f68:	f7f7 f93a 	bl	80001e0 <__aeabi_dsub>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	460b      	mov	r3, r1
 8008f70:	f7f7 fc18 	bl	80007a4 <__aeabi_ddiv>
 8008f74:	ec41 0b10 	vmov	d0, r0, r1
 8008f78:	e7ee      	b.n	8008f58 <__ieee754_acos+0x28>
 8008f7a:	49a8      	ldr	r1, [pc, #672]	; (800921c <__ieee754_acos+0x2ec>)
 8008f7c:	428b      	cmp	r3, r1
 8008f7e:	f300 8087 	bgt.w	8009090 <__ieee754_acos+0x160>
 8008f82:	4aa7      	ldr	r2, [pc, #668]	; (8009220 <__ieee754_acos+0x2f0>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	f340 81f9 	ble.w	800937c <__ieee754_acos+0x44c>
 8008f8a:	ee10 2a10 	vmov	r2, s0
 8008f8e:	ee10 0a10 	vmov	r0, s0
 8008f92:	462b      	mov	r3, r5
 8008f94:	4629      	mov	r1, r5
 8008f96:	f7f7 fadb 	bl	8000550 <__aeabi_dmul>
 8008f9a:	a387      	add	r3, pc, #540	; (adr r3, 80091b8 <__ieee754_acos+0x288>)
 8008f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa0:	4606      	mov	r6, r0
 8008fa2:	460f      	mov	r7, r1
 8008fa4:	f7f7 fad4 	bl	8000550 <__aeabi_dmul>
 8008fa8:	a385      	add	r3, pc, #532	; (adr r3, 80091c0 <__ieee754_acos+0x290>)
 8008faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fae:	f7f7 f919 	bl	80001e4 <__adddf3>
 8008fb2:	4632      	mov	r2, r6
 8008fb4:	463b      	mov	r3, r7
 8008fb6:	f7f7 facb 	bl	8000550 <__aeabi_dmul>
 8008fba:	a383      	add	r3, pc, #524	; (adr r3, 80091c8 <__ieee754_acos+0x298>)
 8008fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc0:	f7f7 f90e 	bl	80001e0 <__aeabi_dsub>
 8008fc4:	4632      	mov	r2, r6
 8008fc6:	463b      	mov	r3, r7
 8008fc8:	f7f7 fac2 	bl	8000550 <__aeabi_dmul>
 8008fcc:	a380      	add	r3, pc, #512	; (adr r3, 80091d0 <__ieee754_acos+0x2a0>)
 8008fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd2:	f7f7 f907 	bl	80001e4 <__adddf3>
 8008fd6:	4632      	mov	r2, r6
 8008fd8:	463b      	mov	r3, r7
 8008fda:	f7f7 fab9 	bl	8000550 <__aeabi_dmul>
 8008fde:	a37e      	add	r3, pc, #504	; (adr r3, 80091d8 <__ieee754_acos+0x2a8>)
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f7f7 f8fc 	bl	80001e0 <__aeabi_dsub>
 8008fe8:	4632      	mov	r2, r6
 8008fea:	463b      	mov	r3, r7
 8008fec:	f7f7 fab0 	bl	8000550 <__aeabi_dmul>
 8008ff0:	a37b      	add	r3, pc, #492	; (adr r3, 80091e0 <__ieee754_acos+0x2b0>)
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	f7f7 f8f5 	bl	80001e4 <__adddf3>
 8008ffa:	4632      	mov	r2, r6
 8008ffc:	463b      	mov	r3, r7
 8008ffe:	f7f7 faa7 	bl	8000550 <__aeabi_dmul>
 8009002:	a379      	add	r3, pc, #484	; (adr r3, 80091e8 <__ieee754_acos+0x2b8>)
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	4680      	mov	r8, r0
 800900a:	4689      	mov	r9, r1
 800900c:	4630      	mov	r0, r6
 800900e:	4639      	mov	r1, r7
 8009010:	f7f7 fa9e 	bl	8000550 <__aeabi_dmul>
 8009014:	a376      	add	r3, pc, #472	; (adr r3, 80091f0 <__ieee754_acos+0x2c0>)
 8009016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901a:	f7f7 f8e1 	bl	80001e0 <__aeabi_dsub>
 800901e:	4632      	mov	r2, r6
 8009020:	463b      	mov	r3, r7
 8009022:	f7f7 fa95 	bl	8000550 <__aeabi_dmul>
 8009026:	a374      	add	r3, pc, #464	; (adr r3, 80091f8 <__ieee754_acos+0x2c8>)
 8009028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902c:	f7f7 f8da 	bl	80001e4 <__adddf3>
 8009030:	4632      	mov	r2, r6
 8009032:	463b      	mov	r3, r7
 8009034:	f7f7 fa8c 	bl	8000550 <__aeabi_dmul>
 8009038:	a371      	add	r3, pc, #452	; (adr r3, 8009200 <__ieee754_acos+0x2d0>)
 800903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903e:	f7f7 f8cf 	bl	80001e0 <__aeabi_dsub>
 8009042:	4632      	mov	r2, r6
 8009044:	463b      	mov	r3, r7
 8009046:	f7f7 fa83 	bl	8000550 <__aeabi_dmul>
 800904a:	4b76      	ldr	r3, [pc, #472]	; (8009224 <__ieee754_acos+0x2f4>)
 800904c:	2200      	movs	r2, #0
 800904e:	f7f7 f8c9 	bl	80001e4 <__adddf3>
 8009052:	4602      	mov	r2, r0
 8009054:	460b      	mov	r3, r1
 8009056:	4640      	mov	r0, r8
 8009058:	4649      	mov	r1, r9
 800905a:	f7f7 fba3 	bl	80007a4 <__aeabi_ddiv>
 800905e:	4622      	mov	r2, r4
 8009060:	462b      	mov	r3, r5
 8009062:	f7f7 fa75 	bl	8000550 <__aeabi_dmul>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	a167      	add	r1, pc, #412	; (adr r1, 8009208 <__ieee754_acos+0x2d8>)
 800906c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009070:	f7f7 f8b6 	bl	80001e0 <__aeabi_dsub>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	4620      	mov	r0, r4
 800907a:	4629      	mov	r1, r5
 800907c:	f7f7 f8b0 	bl	80001e0 <__aeabi_dsub>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	a162      	add	r1, pc, #392	; (adr r1, 8009210 <__ieee754_acos+0x2e0>)
 8009086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800908a:	f7f7 f8a9 	bl	80001e0 <__aeabi_dsub>
 800908e:	e771      	b.n	8008f74 <__ieee754_acos+0x44>
 8009090:	2d00      	cmp	r5, #0
 8009092:	f280 80cb 	bge.w	800922c <__ieee754_acos+0x2fc>
 8009096:	ee10 0a10 	vmov	r0, s0
 800909a:	4b62      	ldr	r3, [pc, #392]	; (8009224 <__ieee754_acos+0x2f4>)
 800909c:	2200      	movs	r2, #0
 800909e:	4629      	mov	r1, r5
 80090a0:	f7f7 f8a0 	bl	80001e4 <__adddf3>
 80090a4:	4b60      	ldr	r3, [pc, #384]	; (8009228 <__ieee754_acos+0x2f8>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	f7f7 fa52 	bl	8000550 <__aeabi_dmul>
 80090ac:	a342      	add	r3, pc, #264	; (adr r3, 80091b8 <__ieee754_acos+0x288>)
 80090ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b2:	4604      	mov	r4, r0
 80090b4:	460d      	mov	r5, r1
 80090b6:	f7f7 fa4b 	bl	8000550 <__aeabi_dmul>
 80090ba:	a341      	add	r3, pc, #260	; (adr r3, 80091c0 <__ieee754_acos+0x290>)
 80090bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c0:	f7f7 f890 	bl	80001e4 <__adddf3>
 80090c4:	4622      	mov	r2, r4
 80090c6:	462b      	mov	r3, r5
 80090c8:	f7f7 fa42 	bl	8000550 <__aeabi_dmul>
 80090cc:	a33e      	add	r3, pc, #248	; (adr r3, 80091c8 <__ieee754_acos+0x298>)
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	f7f7 f885 	bl	80001e0 <__aeabi_dsub>
 80090d6:	4622      	mov	r2, r4
 80090d8:	462b      	mov	r3, r5
 80090da:	f7f7 fa39 	bl	8000550 <__aeabi_dmul>
 80090de:	a33c      	add	r3, pc, #240	; (adr r3, 80091d0 <__ieee754_acos+0x2a0>)
 80090e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e4:	f7f7 f87e 	bl	80001e4 <__adddf3>
 80090e8:	4622      	mov	r2, r4
 80090ea:	462b      	mov	r3, r5
 80090ec:	f7f7 fa30 	bl	8000550 <__aeabi_dmul>
 80090f0:	a339      	add	r3, pc, #228	; (adr r3, 80091d8 <__ieee754_acos+0x2a8>)
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	f7f7 f873 	bl	80001e0 <__aeabi_dsub>
 80090fa:	4622      	mov	r2, r4
 80090fc:	462b      	mov	r3, r5
 80090fe:	f7f7 fa27 	bl	8000550 <__aeabi_dmul>
 8009102:	a337      	add	r3, pc, #220	; (adr r3, 80091e0 <__ieee754_acos+0x2b0>)
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f7f7 f86c 	bl	80001e4 <__adddf3>
 800910c:	4622      	mov	r2, r4
 800910e:	462b      	mov	r3, r5
 8009110:	f7f7 fa1e 	bl	8000550 <__aeabi_dmul>
 8009114:	ec45 4b10 	vmov	d0, r4, r5
 8009118:	4680      	mov	r8, r0
 800911a:	4689      	mov	r9, r1
 800911c:	f000 fe96 	bl	8009e4c <__ieee754_sqrt>
 8009120:	a331      	add	r3, pc, #196	; (adr r3, 80091e8 <__ieee754_acos+0x2b8>)
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	4620      	mov	r0, r4
 8009128:	4629      	mov	r1, r5
 800912a:	ec57 6b10 	vmov	r6, r7, d0
 800912e:	f7f7 fa0f 	bl	8000550 <__aeabi_dmul>
 8009132:	a32f      	add	r3, pc, #188	; (adr r3, 80091f0 <__ieee754_acos+0x2c0>)
 8009134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009138:	f7f7 f852 	bl	80001e0 <__aeabi_dsub>
 800913c:	4622      	mov	r2, r4
 800913e:	462b      	mov	r3, r5
 8009140:	f7f7 fa06 	bl	8000550 <__aeabi_dmul>
 8009144:	a32c      	add	r3, pc, #176	; (adr r3, 80091f8 <__ieee754_acos+0x2c8>)
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	f7f7 f84b 	bl	80001e4 <__adddf3>
 800914e:	4622      	mov	r2, r4
 8009150:	462b      	mov	r3, r5
 8009152:	f7f7 f9fd 	bl	8000550 <__aeabi_dmul>
 8009156:	a32a      	add	r3, pc, #168	; (adr r3, 8009200 <__ieee754_acos+0x2d0>)
 8009158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915c:	f7f7 f840 	bl	80001e0 <__aeabi_dsub>
 8009160:	4622      	mov	r2, r4
 8009162:	462b      	mov	r3, r5
 8009164:	f7f7 f9f4 	bl	8000550 <__aeabi_dmul>
 8009168:	4b2e      	ldr	r3, [pc, #184]	; (8009224 <__ieee754_acos+0x2f4>)
 800916a:	2200      	movs	r2, #0
 800916c:	f7f7 f83a 	bl	80001e4 <__adddf3>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4640      	mov	r0, r8
 8009176:	4649      	mov	r1, r9
 8009178:	f7f7 fb14 	bl	80007a4 <__aeabi_ddiv>
 800917c:	4632      	mov	r2, r6
 800917e:	463b      	mov	r3, r7
 8009180:	f7f7 f9e6 	bl	8000550 <__aeabi_dmul>
 8009184:	a320      	add	r3, pc, #128	; (adr r3, 8009208 <__ieee754_acos+0x2d8>)
 8009186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918a:	f7f7 f829 	bl	80001e0 <__aeabi_dsub>
 800918e:	4632      	mov	r2, r6
 8009190:	463b      	mov	r3, r7
 8009192:	f7f7 f827 	bl	80001e4 <__adddf3>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	f7f7 f823 	bl	80001e4 <__adddf3>
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	a103      	add	r1, pc, #12	; (adr r1, 80091b0 <__ieee754_acos+0x280>)
 80091a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091a8:	e76f      	b.n	800908a <__ieee754_acos+0x15a>
 80091aa:	bf00      	nop
 80091ac:	f3af 8000 	nop.w
 80091b0:	54442d18 	.word	0x54442d18
 80091b4:	400921fb 	.word	0x400921fb
 80091b8:	0dfdf709 	.word	0x0dfdf709
 80091bc:	3f023de1 	.word	0x3f023de1
 80091c0:	7501b288 	.word	0x7501b288
 80091c4:	3f49efe0 	.word	0x3f49efe0
 80091c8:	b5688f3b 	.word	0xb5688f3b
 80091cc:	3fa48228 	.word	0x3fa48228
 80091d0:	0e884455 	.word	0x0e884455
 80091d4:	3fc9c155 	.word	0x3fc9c155
 80091d8:	03eb6f7d 	.word	0x03eb6f7d
 80091dc:	3fd4d612 	.word	0x3fd4d612
 80091e0:	55555555 	.word	0x55555555
 80091e4:	3fc55555 	.word	0x3fc55555
 80091e8:	b12e9282 	.word	0xb12e9282
 80091ec:	3fb3b8c5 	.word	0x3fb3b8c5
 80091f0:	1b8d0159 	.word	0x1b8d0159
 80091f4:	3fe6066c 	.word	0x3fe6066c
 80091f8:	9c598ac8 	.word	0x9c598ac8
 80091fc:	40002ae5 	.word	0x40002ae5
 8009200:	1c8a2d4b 	.word	0x1c8a2d4b
 8009204:	40033a27 	.word	0x40033a27
 8009208:	33145c07 	.word	0x33145c07
 800920c:	3c91a626 	.word	0x3c91a626
 8009210:	54442d18 	.word	0x54442d18
 8009214:	3ff921fb 	.word	0x3ff921fb
 8009218:	3fefffff 	.word	0x3fefffff
 800921c:	3fdfffff 	.word	0x3fdfffff
 8009220:	3c600000 	.word	0x3c600000
 8009224:	3ff00000 	.word	0x3ff00000
 8009228:	3fe00000 	.word	0x3fe00000
 800922c:	ee10 2a10 	vmov	r2, s0
 8009230:	462b      	mov	r3, r5
 8009232:	496d      	ldr	r1, [pc, #436]	; (80093e8 <__ieee754_acos+0x4b8>)
 8009234:	2000      	movs	r0, #0
 8009236:	f7f6 ffd3 	bl	80001e0 <__aeabi_dsub>
 800923a:	4b6c      	ldr	r3, [pc, #432]	; (80093ec <__ieee754_acos+0x4bc>)
 800923c:	2200      	movs	r2, #0
 800923e:	f7f7 f987 	bl	8000550 <__aeabi_dmul>
 8009242:	4604      	mov	r4, r0
 8009244:	460d      	mov	r5, r1
 8009246:	ec45 4b10 	vmov	d0, r4, r5
 800924a:	f000 fdff 	bl	8009e4c <__ieee754_sqrt>
 800924e:	a34e      	add	r3, pc, #312	; (adr r3, 8009388 <__ieee754_acos+0x458>)
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	4620      	mov	r0, r4
 8009256:	4629      	mov	r1, r5
 8009258:	ec59 8b10 	vmov	r8, r9, d0
 800925c:	f7f7 f978 	bl	8000550 <__aeabi_dmul>
 8009260:	a34b      	add	r3, pc, #300	; (adr r3, 8009390 <__ieee754_acos+0x460>)
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	f7f6 ffbd 	bl	80001e4 <__adddf3>
 800926a:	4622      	mov	r2, r4
 800926c:	462b      	mov	r3, r5
 800926e:	f7f7 f96f 	bl	8000550 <__aeabi_dmul>
 8009272:	a349      	add	r3, pc, #292	; (adr r3, 8009398 <__ieee754_acos+0x468>)
 8009274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009278:	f7f6 ffb2 	bl	80001e0 <__aeabi_dsub>
 800927c:	4622      	mov	r2, r4
 800927e:	462b      	mov	r3, r5
 8009280:	f7f7 f966 	bl	8000550 <__aeabi_dmul>
 8009284:	a346      	add	r3, pc, #280	; (adr r3, 80093a0 <__ieee754_acos+0x470>)
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	f7f6 ffab 	bl	80001e4 <__adddf3>
 800928e:	4622      	mov	r2, r4
 8009290:	462b      	mov	r3, r5
 8009292:	f7f7 f95d 	bl	8000550 <__aeabi_dmul>
 8009296:	a344      	add	r3, pc, #272	; (adr r3, 80093a8 <__ieee754_acos+0x478>)
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	f7f6 ffa0 	bl	80001e0 <__aeabi_dsub>
 80092a0:	4622      	mov	r2, r4
 80092a2:	462b      	mov	r3, r5
 80092a4:	f7f7 f954 	bl	8000550 <__aeabi_dmul>
 80092a8:	a341      	add	r3, pc, #260	; (adr r3, 80093b0 <__ieee754_acos+0x480>)
 80092aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ae:	f7f6 ff99 	bl	80001e4 <__adddf3>
 80092b2:	4622      	mov	r2, r4
 80092b4:	462b      	mov	r3, r5
 80092b6:	f7f7 f94b 	bl	8000550 <__aeabi_dmul>
 80092ba:	a33f      	add	r3, pc, #252	; (adr r3, 80093b8 <__ieee754_acos+0x488>)
 80092bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c0:	4682      	mov	sl, r0
 80092c2:	468b      	mov	fp, r1
 80092c4:	4620      	mov	r0, r4
 80092c6:	4629      	mov	r1, r5
 80092c8:	f7f7 f942 	bl	8000550 <__aeabi_dmul>
 80092cc:	a33c      	add	r3, pc, #240	; (adr r3, 80093c0 <__ieee754_acos+0x490>)
 80092ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d2:	f7f6 ff85 	bl	80001e0 <__aeabi_dsub>
 80092d6:	4622      	mov	r2, r4
 80092d8:	462b      	mov	r3, r5
 80092da:	f7f7 f939 	bl	8000550 <__aeabi_dmul>
 80092de:	a33a      	add	r3, pc, #232	; (adr r3, 80093c8 <__ieee754_acos+0x498>)
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	f7f6 ff7e 	bl	80001e4 <__adddf3>
 80092e8:	4622      	mov	r2, r4
 80092ea:	462b      	mov	r3, r5
 80092ec:	f7f7 f930 	bl	8000550 <__aeabi_dmul>
 80092f0:	a337      	add	r3, pc, #220	; (adr r3, 80093d0 <__ieee754_acos+0x4a0>)
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	f7f6 ff73 	bl	80001e0 <__aeabi_dsub>
 80092fa:	4622      	mov	r2, r4
 80092fc:	462b      	mov	r3, r5
 80092fe:	f7f7 f927 	bl	8000550 <__aeabi_dmul>
 8009302:	4b39      	ldr	r3, [pc, #228]	; (80093e8 <__ieee754_acos+0x4b8>)
 8009304:	2200      	movs	r2, #0
 8009306:	f7f6 ff6d 	bl	80001e4 <__adddf3>
 800930a:	4602      	mov	r2, r0
 800930c:	460b      	mov	r3, r1
 800930e:	4650      	mov	r0, sl
 8009310:	4659      	mov	r1, fp
 8009312:	f7f7 fa47 	bl	80007a4 <__aeabi_ddiv>
 8009316:	4642      	mov	r2, r8
 8009318:	464b      	mov	r3, r9
 800931a:	f7f7 f919 	bl	8000550 <__aeabi_dmul>
 800931e:	2600      	movs	r6, #0
 8009320:	4682      	mov	sl, r0
 8009322:	468b      	mov	fp, r1
 8009324:	4632      	mov	r2, r6
 8009326:	464b      	mov	r3, r9
 8009328:	4630      	mov	r0, r6
 800932a:	4649      	mov	r1, r9
 800932c:	f7f7 f910 	bl	8000550 <__aeabi_dmul>
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	4620      	mov	r0, r4
 8009336:	4629      	mov	r1, r5
 8009338:	f7f6 ff52 	bl	80001e0 <__aeabi_dsub>
 800933c:	4632      	mov	r2, r6
 800933e:	4604      	mov	r4, r0
 8009340:	460d      	mov	r5, r1
 8009342:	464b      	mov	r3, r9
 8009344:	4640      	mov	r0, r8
 8009346:	4649      	mov	r1, r9
 8009348:	f7f6 ff4c 	bl	80001e4 <__adddf3>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4620      	mov	r0, r4
 8009352:	4629      	mov	r1, r5
 8009354:	f7f7 fa26 	bl	80007a4 <__aeabi_ddiv>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	4650      	mov	r0, sl
 800935e:	4659      	mov	r1, fp
 8009360:	f7f6 ff40 	bl	80001e4 <__adddf3>
 8009364:	4632      	mov	r2, r6
 8009366:	464b      	mov	r3, r9
 8009368:	f7f6 ff3c 	bl	80001e4 <__adddf3>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	f7f6 ff38 	bl	80001e4 <__adddf3>
 8009374:	e5fe      	b.n	8008f74 <__ieee754_acos+0x44>
 8009376:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80093d8 <__ieee754_acos+0x4a8>
 800937a:	e5ed      	b.n	8008f58 <__ieee754_acos+0x28>
 800937c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80093e0 <__ieee754_acos+0x4b0>
 8009380:	e5ea      	b.n	8008f58 <__ieee754_acos+0x28>
 8009382:	bf00      	nop
 8009384:	f3af 8000 	nop.w
 8009388:	0dfdf709 	.word	0x0dfdf709
 800938c:	3f023de1 	.word	0x3f023de1
 8009390:	7501b288 	.word	0x7501b288
 8009394:	3f49efe0 	.word	0x3f49efe0
 8009398:	b5688f3b 	.word	0xb5688f3b
 800939c:	3fa48228 	.word	0x3fa48228
 80093a0:	0e884455 	.word	0x0e884455
 80093a4:	3fc9c155 	.word	0x3fc9c155
 80093a8:	03eb6f7d 	.word	0x03eb6f7d
 80093ac:	3fd4d612 	.word	0x3fd4d612
 80093b0:	55555555 	.word	0x55555555
 80093b4:	3fc55555 	.word	0x3fc55555
 80093b8:	b12e9282 	.word	0xb12e9282
 80093bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80093c0:	1b8d0159 	.word	0x1b8d0159
 80093c4:	3fe6066c 	.word	0x3fe6066c
 80093c8:	9c598ac8 	.word	0x9c598ac8
 80093cc:	40002ae5 	.word	0x40002ae5
 80093d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80093d4:	40033a27 	.word	0x40033a27
	...
 80093e0:	54442d18 	.word	0x54442d18
 80093e4:	3ff921fb 	.word	0x3ff921fb
 80093e8:	3ff00000 	.word	0x3ff00000
 80093ec:	3fe00000 	.word	0x3fe00000

080093f0 <__ieee754_pow>:
 80093f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f4:	ed2d 8b06 	vpush	{d8-d10}
 80093f8:	b089      	sub	sp, #36	; 0x24
 80093fa:	ed8d 1b00 	vstr	d1, [sp]
 80093fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009402:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009406:	ea58 0102 	orrs.w	r1, r8, r2
 800940a:	ec57 6b10 	vmov	r6, r7, d0
 800940e:	d115      	bne.n	800943c <__ieee754_pow+0x4c>
 8009410:	19b3      	adds	r3, r6, r6
 8009412:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009416:	4152      	adcs	r2, r2
 8009418:	4299      	cmp	r1, r3
 800941a:	4b89      	ldr	r3, [pc, #548]	; (8009640 <__ieee754_pow+0x250>)
 800941c:	4193      	sbcs	r3, r2
 800941e:	f080 84d2 	bcs.w	8009dc6 <__ieee754_pow+0x9d6>
 8009422:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009426:	4630      	mov	r0, r6
 8009428:	4639      	mov	r1, r7
 800942a:	f7f6 fedb 	bl	80001e4 <__adddf3>
 800942e:	ec41 0b10 	vmov	d0, r0, r1
 8009432:	b009      	add	sp, #36	; 0x24
 8009434:	ecbd 8b06 	vpop	{d8-d10}
 8009438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943c:	4b81      	ldr	r3, [pc, #516]	; (8009644 <__ieee754_pow+0x254>)
 800943e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009442:	429c      	cmp	r4, r3
 8009444:	ee10 aa10 	vmov	sl, s0
 8009448:	463d      	mov	r5, r7
 800944a:	dc06      	bgt.n	800945a <__ieee754_pow+0x6a>
 800944c:	d101      	bne.n	8009452 <__ieee754_pow+0x62>
 800944e:	2e00      	cmp	r6, #0
 8009450:	d1e7      	bne.n	8009422 <__ieee754_pow+0x32>
 8009452:	4598      	cmp	r8, r3
 8009454:	dc01      	bgt.n	800945a <__ieee754_pow+0x6a>
 8009456:	d10f      	bne.n	8009478 <__ieee754_pow+0x88>
 8009458:	b172      	cbz	r2, 8009478 <__ieee754_pow+0x88>
 800945a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800945e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009462:	ea55 050a 	orrs.w	r5, r5, sl
 8009466:	d1dc      	bne.n	8009422 <__ieee754_pow+0x32>
 8009468:	e9dd 3200 	ldrd	r3, r2, [sp]
 800946c:	18db      	adds	r3, r3, r3
 800946e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009472:	4152      	adcs	r2, r2
 8009474:	429d      	cmp	r5, r3
 8009476:	e7d0      	b.n	800941a <__ieee754_pow+0x2a>
 8009478:	2d00      	cmp	r5, #0
 800947a:	da3b      	bge.n	80094f4 <__ieee754_pow+0x104>
 800947c:	4b72      	ldr	r3, [pc, #456]	; (8009648 <__ieee754_pow+0x258>)
 800947e:	4598      	cmp	r8, r3
 8009480:	dc51      	bgt.n	8009526 <__ieee754_pow+0x136>
 8009482:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009486:	4598      	cmp	r8, r3
 8009488:	f340 84ac 	ble.w	8009de4 <__ieee754_pow+0x9f4>
 800948c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009490:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009494:	2b14      	cmp	r3, #20
 8009496:	dd0f      	ble.n	80094b8 <__ieee754_pow+0xc8>
 8009498:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800949c:	fa22 f103 	lsr.w	r1, r2, r3
 80094a0:	fa01 f303 	lsl.w	r3, r1, r3
 80094a4:	4293      	cmp	r3, r2
 80094a6:	f040 849d 	bne.w	8009de4 <__ieee754_pow+0x9f4>
 80094aa:	f001 0101 	and.w	r1, r1, #1
 80094ae:	f1c1 0302 	rsb	r3, r1, #2
 80094b2:	9304      	str	r3, [sp, #16]
 80094b4:	b182      	cbz	r2, 80094d8 <__ieee754_pow+0xe8>
 80094b6:	e05f      	b.n	8009578 <__ieee754_pow+0x188>
 80094b8:	2a00      	cmp	r2, #0
 80094ba:	d15b      	bne.n	8009574 <__ieee754_pow+0x184>
 80094bc:	f1c3 0314 	rsb	r3, r3, #20
 80094c0:	fa48 f103 	asr.w	r1, r8, r3
 80094c4:	fa01 f303 	lsl.w	r3, r1, r3
 80094c8:	4543      	cmp	r3, r8
 80094ca:	f040 8488 	bne.w	8009dde <__ieee754_pow+0x9ee>
 80094ce:	f001 0101 	and.w	r1, r1, #1
 80094d2:	f1c1 0302 	rsb	r3, r1, #2
 80094d6:	9304      	str	r3, [sp, #16]
 80094d8:	4b5c      	ldr	r3, [pc, #368]	; (800964c <__ieee754_pow+0x25c>)
 80094da:	4598      	cmp	r8, r3
 80094dc:	d132      	bne.n	8009544 <__ieee754_pow+0x154>
 80094de:	f1b9 0f00 	cmp.w	r9, #0
 80094e2:	f280 8478 	bge.w	8009dd6 <__ieee754_pow+0x9e6>
 80094e6:	4959      	ldr	r1, [pc, #356]	; (800964c <__ieee754_pow+0x25c>)
 80094e8:	4632      	mov	r2, r6
 80094ea:	463b      	mov	r3, r7
 80094ec:	2000      	movs	r0, #0
 80094ee:	f7f7 f959 	bl	80007a4 <__aeabi_ddiv>
 80094f2:	e79c      	b.n	800942e <__ieee754_pow+0x3e>
 80094f4:	2300      	movs	r3, #0
 80094f6:	9304      	str	r3, [sp, #16]
 80094f8:	2a00      	cmp	r2, #0
 80094fa:	d13d      	bne.n	8009578 <__ieee754_pow+0x188>
 80094fc:	4b51      	ldr	r3, [pc, #324]	; (8009644 <__ieee754_pow+0x254>)
 80094fe:	4598      	cmp	r8, r3
 8009500:	d1ea      	bne.n	80094d8 <__ieee754_pow+0xe8>
 8009502:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009506:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800950a:	ea53 030a 	orrs.w	r3, r3, sl
 800950e:	f000 845a 	beq.w	8009dc6 <__ieee754_pow+0x9d6>
 8009512:	4b4f      	ldr	r3, [pc, #316]	; (8009650 <__ieee754_pow+0x260>)
 8009514:	429c      	cmp	r4, r3
 8009516:	dd08      	ble.n	800952a <__ieee754_pow+0x13a>
 8009518:	f1b9 0f00 	cmp.w	r9, #0
 800951c:	f2c0 8457 	blt.w	8009dce <__ieee754_pow+0x9de>
 8009520:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009524:	e783      	b.n	800942e <__ieee754_pow+0x3e>
 8009526:	2302      	movs	r3, #2
 8009528:	e7e5      	b.n	80094f6 <__ieee754_pow+0x106>
 800952a:	f1b9 0f00 	cmp.w	r9, #0
 800952e:	f04f 0000 	mov.w	r0, #0
 8009532:	f04f 0100 	mov.w	r1, #0
 8009536:	f6bf af7a 	bge.w	800942e <__ieee754_pow+0x3e>
 800953a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800953e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009542:	e774      	b.n	800942e <__ieee754_pow+0x3e>
 8009544:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009548:	d106      	bne.n	8009558 <__ieee754_pow+0x168>
 800954a:	4632      	mov	r2, r6
 800954c:	463b      	mov	r3, r7
 800954e:	4630      	mov	r0, r6
 8009550:	4639      	mov	r1, r7
 8009552:	f7f6 fffd 	bl	8000550 <__aeabi_dmul>
 8009556:	e76a      	b.n	800942e <__ieee754_pow+0x3e>
 8009558:	4b3e      	ldr	r3, [pc, #248]	; (8009654 <__ieee754_pow+0x264>)
 800955a:	4599      	cmp	r9, r3
 800955c:	d10c      	bne.n	8009578 <__ieee754_pow+0x188>
 800955e:	2d00      	cmp	r5, #0
 8009560:	db0a      	blt.n	8009578 <__ieee754_pow+0x188>
 8009562:	ec47 6b10 	vmov	d0, r6, r7
 8009566:	b009      	add	sp, #36	; 0x24
 8009568:	ecbd 8b06 	vpop	{d8-d10}
 800956c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009570:	f000 bc6c 	b.w	8009e4c <__ieee754_sqrt>
 8009574:	2300      	movs	r3, #0
 8009576:	9304      	str	r3, [sp, #16]
 8009578:	ec47 6b10 	vmov	d0, r6, r7
 800957c:	f001 f9a2 	bl	800a8c4 <fabs>
 8009580:	ec51 0b10 	vmov	r0, r1, d0
 8009584:	f1ba 0f00 	cmp.w	sl, #0
 8009588:	d129      	bne.n	80095de <__ieee754_pow+0x1ee>
 800958a:	b124      	cbz	r4, 8009596 <__ieee754_pow+0x1a6>
 800958c:	4b2f      	ldr	r3, [pc, #188]	; (800964c <__ieee754_pow+0x25c>)
 800958e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009592:	429a      	cmp	r2, r3
 8009594:	d123      	bne.n	80095de <__ieee754_pow+0x1ee>
 8009596:	f1b9 0f00 	cmp.w	r9, #0
 800959a:	da05      	bge.n	80095a8 <__ieee754_pow+0x1b8>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	2000      	movs	r0, #0
 80095a2:	492a      	ldr	r1, [pc, #168]	; (800964c <__ieee754_pow+0x25c>)
 80095a4:	f7f7 f8fe 	bl	80007a4 <__aeabi_ddiv>
 80095a8:	2d00      	cmp	r5, #0
 80095aa:	f6bf af40 	bge.w	800942e <__ieee754_pow+0x3e>
 80095ae:	9b04      	ldr	r3, [sp, #16]
 80095b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80095b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80095b8:	4323      	orrs	r3, r4
 80095ba:	d108      	bne.n	80095ce <__ieee754_pow+0x1de>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	4610      	mov	r0, r2
 80095c2:	4619      	mov	r1, r3
 80095c4:	f7f6 fe0c 	bl	80001e0 <__aeabi_dsub>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	e78f      	b.n	80094ee <__ieee754_pow+0xfe>
 80095ce:	9b04      	ldr	r3, [sp, #16]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	f47f af2c 	bne.w	800942e <__ieee754_pow+0x3e>
 80095d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095da:	4619      	mov	r1, r3
 80095dc:	e727      	b.n	800942e <__ieee754_pow+0x3e>
 80095de:	0feb      	lsrs	r3, r5, #31
 80095e0:	3b01      	subs	r3, #1
 80095e2:	9306      	str	r3, [sp, #24]
 80095e4:	9a06      	ldr	r2, [sp, #24]
 80095e6:	9b04      	ldr	r3, [sp, #16]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	d102      	bne.n	80095f2 <__ieee754_pow+0x202>
 80095ec:	4632      	mov	r2, r6
 80095ee:	463b      	mov	r3, r7
 80095f0:	e7e6      	b.n	80095c0 <__ieee754_pow+0x1d0>
 80095f2:	4b19      	ldr	r3, [pc, #100]	; (8009658 <__ieee754_pow+0x268>)
 80095f4:	4598      	cmp	r8, r3
 80095f6:	f340 80fb 	ble.w	80097f0 <__ieee754_pow+0x400>
 80095fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80095fe:	4598      	cmp	r8, r3
 8009600:	4b13      	ldr	r3, [pc, #76]	; (8009650 <__ieee754_pow+0x260>)
 8009602:	dd0c      	ble.n	800961e <__ieee754_pow+0x22e>
 8009604:	429c      	cmp	r4, r3
 8009606:	dc0f      	bgt.n	8009628 <__ieee754_pow+0x238>
 8009608:	f1b9 0f00 	cmp.w	r9, #0
 800960c:	da0f      	bge.n	800962e <__ieee754_pow+0x23e>
 800960e:	2000      	movs	r0, #0
 8009610:	b009      	add	sp, #36	; 0x24
 8009612:	ecbd 8b06 	vpop	{d8-d10}
 8009616:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961a:	f001 b94a 	b.w	800a8b2 <__math_oflow>
 800961e:	429c      	cmp	r4, r3
 8009620:	dbf2      	blt.n	8009608 <__ieee754_pow+0x218>
 8009622:	4b0a      	ldr	r3, [pc, #40]	; (800964c <__ieee754_pow+0x25c>)
 8009624:	429c      	cmp	r4, r3
 8009626:	dd19      	ble.n	800965c <__ieee754_pow+0x26c>
 8009628:	f1b9 0f00 	cmp.w	r9, #0
 800962c:	dcef      	bgt.n	800960e <__ieee754_pow+0x21e>
 800962e:	2000      	movs	r0, #0
 8009630:	b009      	add	sp, #36	; 0x24
 8009632:	ecbd 8b06 	vpop	{d8-d10}
 8009636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963a:	f001 b931 	b.w	800a8a0 <__math_uflow>
 800963e:	bf00      	nop
 8009640:	fff00000 	.word	0xfff00000
 8009644:	7ff00000 	.word	0x7ff00000
 8009648:	433fffff 	.word	0x433fffff
 800964c:	3ff00000 	.word	0x3ff00000
 8009650:	3fefffff 	.word	0x3fefffff
 8009654:	3fe00000 	.word	0x3fe00000
 8009658:	41e00000 	.word	0x41e00000
 800965c:	4b60      	ldr	r3, [pc, #384]	; (80097e0 <__ieee754_pow+0x3f0>)
 800965e:	2200      	movs	r2, #0
 8009660:	f7f6 fdbe 	bl	80001e0 <__aeabi_dsub>
 8009664:	a354      	add	r3, pc, #336	; (adr r3, 80097b8 <__ieee754_pow+0x3c8>)
 8009666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966a:	4604      	mov	r4, r0
 800966c:	460d      	mov	r5, r1
 800966e:	f7f6 ff6f 	bl	8000550 <__aeabi_dmul>
 8009672:	a353      	add	r3, pc, #332	; (adr r3, 80097c0 <__ieee754_pow+0x3d0>)
 8009674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009678:	4606      	mov	r6, r0
 800967a:	460f      	mov	r7, r1
 800967c:	4620      	mov	r0, r4
 800967e:	4629      	mov	r1, r5
 8009680:	f7f6 ff66 	bl	8000550 <__aeabi_dmul>
 8009684:	4b57      	ldr	r3, [pc, #348]	; (80097e4 <__ieee754_pow+0x3f4>)
 8009686:	4682      	mov	sl, r0
 8009688:	468b      	mov	fp, r1
 800968a:	2200      	movs	r2, #0
 800968c:	4620      	mov	r0, r4
 800968e:	4629      	mov	r1, r5
 8009690:	f7f6 ff5e 	bl	8000550 <__aeabi_dmul>
 8009694:	4602      	mov	r2, r0
 8009696:	460b      	mov	r3, r1
 8009698:	a14b      	add	r1, pc, #300	; (adr r1, 80097c8 <__ieee754_pow+0x3d8>)
 800969a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800969e:	f7f6 fd9f 	bl	80001e0 <__aeabi_dsub>
 80096a2:	4622      	mov	r2, r4
 80096a4:	462b      	mov	r3, r5
 80096a6:	f7f6 ff53 	bl	8000550 <__aeabi_dmul>
 80096aa:	4602      	mov	r2, r0
 80096ac:	460b      	mov	r3, r1
 80096ae:	2000      	movs	r0, #0
 80096b0:	494d      	ldr	r1, [pc, #308]	; (80097e8 <__ieee754_pow+0x3f8>)
 80096b2:	f7f6 fd95 	bl	80001e0 <__aeabi_dsub>
 80096b6:	4622      	mov	r2, r4
 80096b8:	4680      	mov	r8, r0
 80096ba:	4689      	mov	r9, r1
 80096bc:	462b      	mov	r3, r5
 80096be:	4620      	mov	r0, r4
 80096c0:	4629      	mov	r1, r5
 80096c2:	f7f6 ff45 	bl	8000550 <__aeabi_dmul>
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	4640      	mov	r0, r8
 80096cc:	4649      	mov	r1, r9
 80096ce:	f7f6 ff3f 	bl	8000550 <__aeabi_dmul>
 80096d2:	a33f      	add	r3, pc, #252	; (adr r3, 80097d0 <__ieee754_pow+0x3e0>)
 80096d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d8:	f7f6 ff3a 	bl	8000550 <__aeabi_dmul>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4650      	mov	r0, sl
 80096e2:	4659      	mov	r1, fp
 80096e4:	f7f6 fd7c 	bl	80001e0 <__aeabi_dsub>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	4680      	mov	r8, r0
 80096ee:	4689      	mov	r9, r1
 80096f0:	4630      	mov	r0, r6
 80096f2:	4639      	mov	r1, r7
 80096f4:	f7f6 fd76 	bl	80001e4 <__adddf3>
 80096f8:	2000      	movs	r0, #0
 80096fa:	4632      	mov	r2, r6
 80096fc:	463b      	mov	r3, r7
 80096fe:	4604      	mov	r4, r0
 8009700:	460d      	mov	r5, r1
 8009702:	f7f6 fd6d 	bl	80001e0 <__aeabi_dsub>
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	4640      	mov	r0, r8
 800970c:	4649      	mov	r1, r9
 800970e:	f7f6 fd67 	bl	80001e0 <__aeabi_dsub>
 8009712:	9b04      	ldr	r3, [sp, #16]
 8009714:	9a06      	ldr	r2, [sp, #24]
 8009716:	3b01      	subs	r3, #1
 8009718:	4313      	orrs	r3, r2
 800971a:	4682      	mov	sl, r0
 800971c:	468b      	mov	fp, r1
 800971e:	f040 81e7 	bne.w	8009af0 <__ieee754_pow+0x700>
 8009722:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80097d8 <__ieee754_pow+0x3e8>
 8009726:	eeb0 8a47 	vmov.f32	s16, s14
 800972a:	eef0 8a67 	vmov.f32	s17, s15
 800972e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009732:	2600      	movs	r6, #0
 8009734:	4632      	mov	r2, r6
 8009736:	463b      	mov	r3, r7
 8009738:	e9dd 0100 	ldrd	r0, r1, [sp]
 800973c:	f7f6 fd50 	bl	80001e0 <__aeabi_dsub>
 8009740:	4622      	mov	r2, r4
 8009742:	462b      	mov	r3, r5
 8009744:	f7f6 ff04 	bl	8000550 <__aeabi_dmul>
 8009748:	e9dd 2300 	ldrd	r2, r3, [sp]
 800974c:	4680      	mov	r8, r0
 800974e:	4689      	mov	r9, r1
 8009750:	4650      	mov	r0, sl
 8009752:	4659      	mov	r1, fp
 8009754:	f7f6 fefc 	bl	8000550 <__aeabi_dmul>
 8009758:	4602      	mov	r2, r0
 800975a:	460b      	mov	r3, r1
 800975c:	4640      	mov	r0, r8
 800975e:	4649      	mov	r1, r9
 8009760:	f7f6 fd40 	bl	80001e4 <__adddf3>
 8009764:	4632      	mov	r2, r6
 8009766:	463b      	mov	r3, r7
 8009768:	4680      	mov	r8, r0
 800976a:	4689      	mov	r9, r1
 800976c:	4620      	mov	r0, r4
 800976e:	4629      	mov	r1, r5
 8009770:	f7f6 feee 	bl	8000550 <__aeabi_dmul>
 8009774:	460b      	mov	r3, r1
 8009776:	4604      	mov	r4, r0
 8009778:	460d      	mov	r5, r1
 800977a:	4602      	mov	r2, r0
 800977c:	4649      	mov	r1, r9
 800977e:	4640      	mov	r0, r8
 8009780:	f7f6 fd30 	bl	80001e4 <__adddf3>
 8009784:	4b19      	ldr	r3, [pc, #100]	; (80097ec <__ieee754_pow+0x3fc>)
 8009786:	4299      	cmp	r1, r3
 8009788:	ec45 4b19 	vmov	d9, r4, r5
 800978c:	4606      	mov	r6, r0
 800978e:	460f      	mov	r7, r1
 8009790:	468b      	mov	fp, r1
 8009792:	f340 82f1 	ble.w	8009d78 <__ieee754_pow+0x988>
 8009796:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800979a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800979e:	4303      	orrs	r3, r0
 80097a0:	f000 81e4 	beq.w	8009b6c <__ieee754_pow+0x77c>
 80097a4:	ec51 0b18 	vmov	r0, r1, d8
 80097a8:	2200      	movs	r2, #0
 80097aa:	2300      	movs	r3, #0
 80097ac:	f7f7 f942 	bl	8000a34 <__aeabi_dcmplt>
 80097b0:	3800      	subs	r0, #0
 80097b2:	bf18      	it	ne
 80097b4:	2001      	movne	r0, #1
 80097b6:	e72b      	b.n	8009610 <__ieee754_pow+0x220>
 80097b8:	60000000 	.word	0x60000000
 80097bc:	3ff71547 	.word	0x3ff71547
 80097c0:	f85ddf44 	.word	0xf85ddf44
 80097c4:	3e54ae0b 	.word	0x3e54ae0b
 80097c8:	55555555 	.word	0x55555555
 80097cc:	3fd55555 	.word	0x3fd55555
 80097d0:	652b82fe 	.word	0x652b82fe
 80097d4:	3ff71547 	.word	0x3ff71547
 80097d8:	00000000 	.word	0x00000000
 80097dc:	bff00000 	.word	0xbff00000
 80097e0:	3ff00000 	.word	0x3ff00000
 80097e4:	3fd00000 	.word	0x3fd00000
 80097e8:	3fe00000 	.word	0x3fe00000
 80097ec:	408fffff 	.word	0x408fffff
 80097f0:	4bd5      	ldr	r3, [pc, #852]	; (8009b48 <__ieee754_pow+0x758>)
 80097f2:	402b      	ands	r3, r5
 80097f4:	2200      	movs	r2, #0
 80097f6:	b92b      	cbnz	r3, 8009804 <__ieee754_pow+0x414>
 80097f8:	4bd4      	ldr	r3, [pc, #848]	; (8009b4c <__ieee754_pow+0x75c>)
 80097fa:	f7f6 fea9 	bl	8000550 <__aeabi_dmul>
 80097fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009802:	460c      	mov	r4, r1
 8009804:	1523      	asrs	r3, r4, #20
 8009806:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800980a:	4413      	add	r3, r2
 800980c:	9305      	str	r3, [sp, #20]
 800980e:	4bd0      	ldr	r3, [pc, #832]	; (8009b50 <__ieee754_pow+0x760>)
 8009810:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009814:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009818:	429c      	cmp	r4, r3
 800981a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800981e:	dd08      	ble.n	8009832 <__ieee754_pow+0x442>
 8009820:	4bcc      	ldr	r3, [pc, #816]	; (8009b54 <__ieee754_pow+0x764>)
 8009822:	429c      	cmp	r4, r3
 8009824:	f340 8162 	ble.w	8009aec <__ieee754_pow+0x6fc>
 8009828:	9b05      	ldr	r3, [sp, #20]
 800982a:	3301      	adds	r3, #1
 800982c:	9305      	str	r3, [sp, #20]
 800982e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009832:	2400      	movs	r4, #0
 8009834:	00e3      	lsls	r3, r4, #3
 8009836:	9307      	str	r3, [sp, #28]
 8009838:	4bc7      	ldr	r3, [pc, #796]	; (8009b58 <__ieee754_pow+0x768>)
 800983a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800983e:	ed93 7b00 	vldr	d7, [r3]
 8009842:	4629      	mov	r1, r5
 8009844:	ec53 2b17 	vmov	r2, r3, d7
 8009848:	eeb0 9a47 	vmov.f32	s18, s14
 800984c:	eef0 9a67 	vmov.f32	s19, s15
 8009850:	4682      	mov	sl, r0
 8009852:	f7f6 fcc5 	bl	80001e0 <__aeabi_dsub>
 8009856:	4652      	mov	r2, sl
 8009858:	4606      	mov	r6, r0
 800985a:	460f      	mov	r7, r1
 800985c:	462b      	mov	r3, r5
 800985e:	ec51 0b19 	vmov	r0, r1, d9
 8009862:	f7f6 fcbf 	bl	80001e4 <__adddf3>
 8009866:	4602      	mov	r2, r0
 8009868:	460b      	mov	r3, r1
 800986a:	2000      	movs	r0, #0
 800986c:	49bb      	ldr	r1, [pc, #748]	; (8009b5c <__ieee754_pow+0x76c>)
 800986e:	f7f6 ff99 	bl	80007a4 <__aeabi_ddiv>
 8009872:	ec41 0b1a 	vmov	d10, r0, r1
 8009876:	4602      	mov	r2, r0
 8009878:	460b      	mov	r3, r1
 800987a:	4630      	mov	r0, r6
 800987c:	4639      	mov	r1, r7
 800987e:	f7f6 fe67 	bl	8000550 <__aeabi_dmul>
 8009882:	2300      	movs	r3, #0
 8009884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009888:	9302      	str	r3, [sp, #8]
 800988a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800988e:	46ab      	mov	fp, r5
 8009890:	106d      	asrs	r5, r5, #1
 8009892:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009896:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800989a:	ec41 0b18 	vmov	d8, r0, r1
 800989e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80098a2:	2200      	movs	r2, #0
 80098a4:	4640      	mov	r0, r8
 80098a6:	4649      	mov	r1, r9
 80098a8:	4614      	mov	r4, r2
 80098aa:	461d      	mov	r5, r3
 80098ac:	f7f6 fe50 	bl	8000550 <__aeabi_dmul>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	4630      	mov	r0, r6
 80098b6:	4639      	mov	r1, r7
 80098b8:	f7f6 fc92 	bl	80001e0 <__aeabi_dsub>
 80098bc:	ec53 2b19 	vmov	r2, r3, d9
 80098c0:	4606      	mov	r6, r0
 80098c2:	460f      	mov	r7, r1
 80098c4:	4620      	mov	r0, r4
 80098c6:	4629      	mov	r1, r5
 80098c8:	f7f6 fc8a 	bl	80001e0 <__aeabi_dsub>
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	4650      	mov	r0, sl
 80098d2:	4659      	mov	r1, fp
 80098d4:	f7f6 fc84 	bl	80001e0 <__aeabi_dsub>
 80098d8:	4642      	mov	r2, r8
 80098da:	464b      	mov	r3, r9
 80098dc:	f7f6 fe38 	bl	8000550 <__aeabi_dmul>
 80098e0:	4602      	mov	r2, r0
 80098e2:	460b      	mov	r3, r1
 80098e4:	4630      	mov	r0, r6
 80098e6:	4639      	mov	r1, r7
 80098e8:	f7f6 fc7a 	bl	80001e0 <__aeabi_dsub>
 80098ec:	ec53 2b1a 	vmov	r2, r3, d10
 80098f0:	f7f6 fe2e 	bl	8000550 <__aeabi_dmul>
 80098f4:	ec53 2b18 	vmov	r2, r3, d8
 80098f8:	ec41 0b19 	vmov	d9, r0, r1
 80098fc:	ec51 0b18 	vmov	r0, r1, d8
 8009900:	f7f6 fe26 	bl	8000550 <__aeabi_dmul>
 8009904:	a37c      	add	r3, pc, #496	; (adr r3, 8009af8 <__ieee754_pow+0x708>)
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	4604      	mov	r4, r0
 800990c:	460d      	mov	r5, r1
 800990e:	f7f6 fe1f 	bl	8000550 <__aeabi_dmul>
 8009912:	a37b      	add	r3, pc, #492	; (adr r3, 8009b00 <__ieee754_pow+0x710>)
 8009914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009918:	f7f6 fc64 	bl	80001e4 <__adddf3>
 800991c:	4622      	mov	r2, r4
 800991e:	462b      	mov	r3, r5
 8009920:	f7f6 fe16 	bl	8000550 <__aeabi_dmul>
 8009924:	a378      	add	r3, pc, #480	; (adr r3, 8009b08 <__ieee754_pow+0x718>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	f7f6 fc5b 	bl	80001e4 <__adddf3>
 800992e:	4622      	mov	r2, r4
 8009930:	462b      	mov	r3, r5
 8009932:	f7f6 fe0d 	bl	8000550 <__aeabi_dmul>
 8009936:	a376      	add	r3, pc, #472	; (adr r3, 8009b10 <__ieee754_pow+0x720>)
 8009938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993c:	f7f6 fc52 	bl	80001e4 <__adddf3>
 8009940:	4622      	mov	r2, r4
 8009942:	462b      	mov	r3, r5
 8009944:	f7f6 fe04 	bl	8000550 <__aeabi_dmul>
 8009948:	a373      	add	r3, pc, #460	; (adr r3, 8009b18 <__ieee754_pow+0x728>)
 800994a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994e:	f7f6 fc49 	bl	80001e4 <__adddf3>
 8009952:	4622      	mov	r2, r4
 8009954:	462b      	mov	r3, r5
 8009956:	f7f6 fdfb 	bl	8000550 <__aeabi_dmul>
 800995a:	a371      	add	r3, pc, #452	; (adr r3, 8009b20 <__ieee754_pow+0x730>)
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	f7f6 fc40 	bl	80001e4 <__adddf3>
 8009964:	4622      	mov	r2, r4
 8009966:	4606      	mov	r6, r0
 8009968:	460f      	mov	r7, r1
 800996a:	462b      	mov	r3, r5
 800996c:	4620      	mov	r0, r4
 800996e:	4629      	mov	r1, r5
 8009970:	f7f6 fdee 	bl	8000550 <__aeabi_dmul>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	4630      	mov	r0, r6
 800997a:	4639      	mov	r1, r7
 800997c:	f7f6 fde8 	bl	8000550 <__aeabi_dmul>
 8009980:	4642      	mov	r2, r8
 8009982:	4604      	mov	r4, r0
 8009984:	460d      	mov	r5, r1
 8009986:	464b      	mov	r3, r9
 8009988:	ec51 0b18 	vmov	r0, r1, d8
 800998c:	f7f6 fc2a 	bl	80001e4 <__adddf3>
 8009990:	ec53 2b19 	vmov	r2, r3, d9
 8009994:	f7f6 fddc 	bl	8000550 <__aeabi_dmul>
 8009998:	4622      	mov	r2, r4
 800999a:	462b      	mov	r3, r5
 800999c:	f7f6 fc22 	bl	80001e4 <__adddf3>
 80099a0:	4642      	mov	r2, r8
 80099a2:	4682      	mov	sl, r0
 80099a4:	468b      	mov	fp, r1
 80099a6:	464b      	mov	r3, r9
 80099a8:	4640      	mov	r0, r8
 80099aa:	4649      	mov	r1, r9
 80099ac:	f7f6 fdd0 	bl	8000550 <__aeabi_dmul>
 80099b0:	4b6b      	ldr	r3, [pc, #428]	; (8009b60 <__ieee754_pow+0x770>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	4606      	mov	r6, r0
 80099b6:	460f      	mov	r7, r1
 80099b8:	f7f6 fc14 	bl	80001e4 <__adddf3>
 80099bc:	4652      	mov	r2, sl
 80099be:	465b      	mov	r3, fp
 80099c0:	f7f6 fc10 	bl	80001e4 <__adddf3>
 80099c4:	2000      	movs	r0, #0
 80099c6:	4604      	mov	r4, r0
 80099c8:	460d      	mov	r5, r1
 80099ca:	4602      	mov	r2, r0
 80099cc:	460b      	mov	r3, r1
 80099ce:	4640      	mov	r0, r8
 80099d0:	4649      	mov	r1, r9
 80099d2:	f7f6 fdbd 	bl	8000550 <__aeabi_dmul>
 80099d6:	4b62      	ldr	r3, [pc, #392]	; (8009b60 <__ieee754_pow+0x770>)
 80099d8:	4680      	mov	r8, r0
 80099da:	4689      	mov	r9, r1
 80099dc:	2200      	movs	r2, #0
 80099de:	4620      	mov	r0, r4
 80099e0:	4629      	mov	r1, r5
 80099e2:	f7f6 fbfd 	bl	80001e0 <__aeabi_dsub>
 80099e6:	4632      	mov	r2, r6
 80099e8:	463b      	mov	r3, r7
 80099ea:	f7f6 fbf9 	bl	80001e0 <__aeabi_dsub>
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	4650      	mov	r0, sl
 80099f4:	4659      	mov	r1, fp
 80099f6:	f7f6 fbf3 	bl	80001e0 <__aeabi_dsub>
 80099fa:	ec53 2b18 	vmov	r2, r3, d8
 80099fe:	f7f6 fda7 	bl	8000550 <__aeabi_dmul>
 8009a02:	4622      	mov	r2, r4
 8009a04:	4606      	mov	r6, r0
 8009a06:	460f      	mov	r7, r1
 8009a08:	462b      	mov	r3, r5
 8009a0a:	ec51 0b19 	vmov	r0, r1, d9
 8009a0e:	f7f6 fd9f 	bl	8000550 <__aeabi_dmul>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	4630      	mov	r0, r6
 8009a18:	4639      	mov	r1, r7
 8009a1a:	f7f6 fbe3 	bl	80001e4 <__adddf3>
 8009a1e:	4606      	mov	r6, r0
 8009a20:	460f      	mov	r7, r1
 8009a22:	4602      	mov	r2, r0
 8009a24:	460b      	mov	r3, r1
 8009a26:	4640      	mov	r0, r8
 8009a28:	4649      	mov	r1, r9
 8009a2a:	f7f6 fbdb 	bl	80001e4 <__adddf3>
 8009a2e:	a33e      	add	r3, pc, #248	; (adr r3, 8009b28 <__ieee754_pow+0x738>)
 8009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a34:	2000      	movs	r0, #0
 8009a36:	4604      	mov	r4, r0
 8009a38:	460d      	mov	r5, r1
 8009a3a:	f7f6 fd89 	bl	8000550 <__aeabi_dmul>
 8009a3e:	4642      	mov	r2, r8
 8009a40:	ec41 0b18 	vmov	d8, r0, r1
 8009a44:	464b      	mov	r3, r9
 8009a46:	4620      	mov	r0, r4
 8009a48:	4629      	mov	r1, r5
 8009a4a:	f7f6 fbc9 	bl	80001e0 <__aeabi_dsub>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	4630      	mov	r0, r6
 8009a54:	4639      	mov	r1, r7
 8009a56:	f7f6 fbc3 	bl	80001e0 <__aeabi_dsub>
 8009a5a:	a335      	add	r3, pc, #212	; (adr r3, 8009b30 <__ieee754_pow+0x740>)
 8009a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a60:	f7f6 fd76 	bl	8000550 <__aeabi_dmul>
 8009a64:	a334      	add	r3, pc, #208	; (adr r3, 8009b38 <__ieee754_pow+0x748>)
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	460f      	mov	r7, r1
 8009a6e:	4620      	mov	r0, r4
 8009a70:	4629      	mov	r1, r5
 8009a72:	f7f6 fd6d 	bl	8000550 <__aeabi_dmul>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	f7f6 fbb1 	bl	80001e4 <__adddf3>
 8009a82:	9a07      	ldr	r2, [sp, #28]
 8009a84:	4b37      	ldr	r3, [pc, #220]	; (8009b64 <__ieee754_pow+0x774>)
 8009a86:	4413      	add	r3, r2
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f7f6 fbaa 	bl	80001e4 <__adddf3>
 8009a90:	4682      	mov	sl, r0
 8009a92:	9805      	ldr	r0, [sp, #20]
 8009a94:	468b      	mov	fp, r1
 8009a96:	f7f6 fcf1 	bl	800047c <__aeabi_i2d>
 8009a9a:	9a07      	ldr	r2, [sp, #28]
 8009a9c:	4b32      	ldr	r3, [pc, #200]	; (8009b68 <__ieee754_pow+0x778>)
 8009a9e:	4413      	add	r3, r2
 8009aa0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009aa4:	4606      	mov	r6, r0
 8009aa6:	460f      	mov	r7, r1
 8009aa8:	4652      	mov	r2, sl
 8009aaa:	465b      	mov	r3, fp
 8009aac:	ec51 0b18 	vmov	r0, r1, d8
 8009ab0:	f7f6 fb98 	bl	80001e4 <__adddf3>
 8009ab4:	4642      	mov	r2, r8
 8009ab6:	464b      	mov	r3, r9
 8009ab8:	f7f6 fb94 	bl	80001e4 <__adddf3>
 8009abc:	4632      	mov	r2, r6
 8009abe:	463b      	mov	r3, r7
 8009ac0:	f7f6 fb90 	bl	80001e4 <__adddf3>
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	4632      	mov	r2, r6
 8009ac8:	463b      	mov	r3, r7
 8009aca:	4604      	mov	r4, r0
 8009acc:	460d      	mov	r5, r1
 8009ace:	f7f6 fb87 	bl	80001e0 <__aeabi_dsub>
 8009ad2:	4642      	mov	r2, r8
 8009ad4:	464b      	mov	r3, r9
 8009ad6:	f7f6 fb83 	bl	80001e0 <__aeabi_dsub>
 8009ada:	ec53 2b18 	vmov	r2, r3, d8
 8009ade:	f7f6 fb7f 	bl	80001e0 <__aeabi_dsub>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	4650      	mov	r0, sl
 8009ae8:	4659      	mov	r1, fp
 8009aea:	e610      	b.n	800970e <__ieee754_pow+0x31e>
 8009aec:	2401      	movs	r4, #1
 8009aee:	e6a1      	b.n	8009834 <__ieee754_pow+0x444>
 8009af0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009b40 <__ieee754_pow+0x750>
 8009af4:	e617      	b.n	8009726 <__ieee754_pow+0x336>
 8009af6:	bf00      	nop
 8009af8:	4a454eef 	.word	0x4a454eef
 8009afc:	3fca7e28 	.word	0x3fca7e28
 8009b00:	93c9db65 	.word	0x93c9db65
 8009b04:	3fcd864a 	.word	0x3fcd864a
 8009b08:	a91d4101 	.word	0xa91d4101
 8009b0c:	3fd17460 	.word	0x3fd17460
 8009b10:	518f264d 	.word	0x518f264d
 8009b14:	3fd55555 	.word	0x3fd55555
 8009b18:	db6fabff 	.word	0xdb6fabff
 8009b1c:	3fdb6db6 	.word	0x3fdb6db6
 8009b20:	33333303 	.word	0x33333303
 8009b24:	3fe33333 	.word	0x3fe33333
 8009b28:	e0000000 	.word	0xe0000000
 8009b2c:	3feec709 	.word	0x3feec709
 8009b30:	dc3a03fd 	.word	0xdc3a03fd
 8009b34:	3feec709 	.word	0x3feec709
 8009b38:	145b01f5 	.word	0x145b01f5
 8009b3c:	be3e2fe0 	.word	0xbe3e2fe0
 8009b40:	00000000 	.word	0x00000000
 8009b44:	3ff00000 	.word	0x3ff00000
 8009b48:	7ff00000 	.word	0x7ff00000
 8009b4c:	43400000 	.word	0x43400000
 8009b50:	0003988e 	.word	0x0003988e
 8009b54:	000bb679 	.word	0x000bb679
 8009b58:	0800abe0 	.word	0x0800abe0
 8009b5c:	3ff00000 	.word	0x3ff00000
 8009b60:	40080000 	.word	0x40080000
 8009b64:	0800ac00 	.word	0x0800ac00
 8009b68:	0800abf0 	.word	0x0800abf0
 8009b6c:	a3b5      	add	r3, pc, #724	; (adr r3, 8009e44 <__ieee754_pow+0xa54>)
 8009b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b72:	4640      	mov	r0, r8
 8009b74:	4649      	mov	r1, r9
 8009b76:	f7f6 fb35 	bl	80001e4 <__adddf3>
 8009b7a:	4622      	mov	r2, r4
 8009b7c:	ec41 0b1a 	vmov	d10, r0, r1
 8009b80:	462b      	mov	r3, r5
 8009b82:	4630      	mov	r0, r6
 8009b84:	4639      	mov	r1, r7
 8009b86:	f7f6 fb2b 	bl	80001e0 <__aeabi_dsub>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	ec51 0b1a 	vmov	r0, r1, d10
 8009b92:	f7f6 ff6d 	bl	8000a70 <__aeabi_dcmpgt>
 8009b96:	2800      	cmp	r0, #0
 8009b98:	f47f ae04 	bne.w	80097a4 <__ieee754_pow+0x3b4>
 8009b9c:	4aa4      	ldr	r2, [pc, #656]	; (8009e30 <__ieee754_pow+0xa40>)
 8009b9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	f340 8108 	ble.w	8009db8 <__ieee754_pow+0x9c8>
 8009ba8:	151b      	asrs	r3, r3, #20
 8009baa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009bae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009bb2:	fa4a f303 	asr.w	r3, sl, r3
 8009bb6:	445b      	add	r3, fp
 8009bb8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009bbc:	4e9d      	ldr	r6, [pc, #628]	; (8009e34 <__ieee754_pow+0xa44>)
 8009bbe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009bc2:	4116      	asrs	r6, r2
 8009bc4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009bc8:	2000      	movs	r0, #0
 8009bca:	ea23 0106 	bic.w	r1, r3, r6
 8009bce:	f1c2 0214 	rsb	r2, r2, #20
 8009bd2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009bd6:	fa4a fa02 	asr.w	sl, sl, r2
 8009bda:	f1bb 0f00 	cmp.w	fp, #0
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	4620      	mov	r0, r4
 8009be4:	4629      	mov	r1, r5
 8009be6:	bfb8      	it	lt
 8009be8:	f1ca 0a00 	rsblt	sl, sl, #0
 8009bec:	f7f6 faf8 	bl	80001e0 <__aeabi_dsub>
 8009bf0:	ec41 0b19 	vmov	d9, r0, r1
 8009bf4:	4642      	mov	r2, r8
 8009bf6:	464b      	mov	r3, r9
 8009bf8:	ec51 0b19 	vmov	r0, r1, d9
 8009bfc:	f7f6 faf2 	bl	80001e4 <__adddf3>
 8009c00:	a37b      	add	r3, pc, #492	; (adr r3, 8009df0 <__ieee754_pow+0xa00>)
 8009c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c06:	2000      	movs	r0, #0
 8009c08:	4604      	mov	r4, r0
 8009c0a:	460d      	mov	r5, r1
 8009c0c:	f7f6 fca0 	bl	8000550 <__aeabi_dmul>
 8009c10:	ec53 2b19 	vmov	r2, r3, d9
 8009c14:	4606      	mov	r6, r0
 8009c16:	460f      	mov	r7, r1
 8009c18:	4620      	mov	r0, r4
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	f7f6 fae0 	bl	80001e0 <__aeabi_dsub>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4640      	mov	r0, r8
 8009c26:	4649      	mov	r1, r9
 8009c28:	f7f6 fada 	bl	80001e0 <__aeabi_dsub>
 8009c2c:	a372      	add	r3, pc, #456	; (adr r3, 8009df8 <__ieee754_pow+0xa08>)
 8009c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c32:	f7f6 fc8d 	bl	8000550 <__aeabi_dmul>
 8009c36:	a372      	add	r3, pc, #456	; (adr r3, 8009e00 <__ieee754_pow+0xa10>)
 8009c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3c:	4680      	mov	r8, r0
 8009c3e:	4689      	mov	r9, r1
 8009c40:	4620      	mov	r0, r4
 8009c42:	4629      	mov	r1, r5
 8009c44:	f7f6 fc84 	bl	8000550 <__aeabi_dmul>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	4640      	mov	r0, r8
 8009c4e:	4649      	mov	r1, r9
 8009c50:	f7f6 fac8 	bl	80001e4 <__adddf3>
 8009c54:	4604      	mov	r4, r0
 8009c56:	460d      	mov	r5, r1
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	4639      	mov	r1, r7
 8009c60:	f7f6 fac0 	bl	80001e4 <__adddf3>
 8009c64:	4632      	mov	r2, r6
 8009c66:	463b      	mov	r3, r7
 8009c68:	4680      	mov	r8, r0
 8009c6a:	4689      	mov	r9, r1
 8009c6c:	f7f6 fab8 	bl	80001e0 <__aeabi_dsub>
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	4620      	mov	r0, r4
 8009c76:	4629      	mov	r1, r5
 8009c78:	f7f6 fab2 	bl	80001e0 <__aeabi_dsub>
 8009c7c:	4642      	mov	r2, r8
 8009c7e:	4606      	mov	r6, r0
 8009c80:	460f      	mov	r7, r1
 8009c82:	464b      	mov	r3, r9
 8009c84:	4640      	mov	r0, r8
 8009c86:	4649      	mov	r1, r9
 8009c88:	f7f6 fc62 	bl	8000550 <__aeabi_dmul>
 8009c8c:	a35e      	add	r3, pc, #376	; (adr r3, 8009e08 <__ieee754_pow+0xa18>)
 8009c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c92:	4604      	mov	r4, r0
 8009c94:	460d      	mov	r5, r1
 8009c96:	f7f6 fc5b 	bl	8000550 <__aeabi_dmul>
 8009c9a:	a35d      	add	r3, pc, #372	; (adr r3, 8009e10 <__ieee754_pow+0xa20>)
 8009c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca0:	f7f6 fa9e 	bl	80001e0 <__aeabi_dsub>
 8009ca4:	4622      	mov	r2, r4
 8009ca6:	462b      	mov	r3, r5
 8009ca8:	f7f6 fc52 	bl	8000550 <__aeabi_dmul>
 8009cac:	a35a      	add	r3, pc, #360	; (adr r3, 8009e18 <__ieee754_pow+0xa28>)
 8009cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb2:	f7f6 fa97 	bl	80001e4 <__adddf3>
 8009cb6:	4622      	mov	r2, r4
 8009cb8:	462b      	mov	r3, r5
 8009cba:	f7f6 fc49 	bl	8000550 <__aeabi_dmul>
 8009cbe:	a358      	add	r3, pc, #352	; (adr r3, 8009e20 <__ieee754_pow+0xa30>)
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	f7f6 fa8c 	bl	80001e0 <__aeabi_dsub>
 8009cc8:	4622      	mov	r2, r4
 8009cca:	462b      	mov	r3, r5
 8009ccc:	f7f6 fc40 	bl	8000550 <__aeabi_dmul>
 8009cd0:	a355      	add	r3, pc, #340	; (adr r3, 8009e28 <__ieee754_pow+0xa38>)
 8009cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd6:	f7f6 fa85 	bl	80001e4 <__adddf3>
 8009cda:	4622      	mov	r2, r4
 8009cdc:	462b      	mov	r3, r5
 8009cde:	f7f6 fc37 	bl	8000550 <__aeabi_dmul>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4640      	mov	r0, r8
 8009ce8:	4649      	mov	r1, r9
 8009cea:	f7f6 fa79 	bl	80001e0 <__aeabi_dsub>
 8009cee:	4604      	mov	r4, r0
 8009cf0:	460d      	mov	r5, r1
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	4640      	mov	r0, r8
 8009cf8:	4649      	mov	r1, r9
 8009cfa:	f7f6 fc29 	bl	8000550 <__aeabi_dmul>
 8009cfe:	2200      	movs	r2, #0
 8009d00:	ec41 0b19 	vmov	d9, r0, r1
 8009d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d08:	4620      	mov	r0, r4
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	f7f6 fa68 	bl	80001e0 <__aeabi_dsub>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	ec51 0b19 	vmov	r0, r1, d9
 8009d18:	f7f6 fd44 	bl	80007a4 <__aeabi_ddiv>
 8009d1c:	4632      	mov	r2, r6
 8009d1e:	4604      	mov	r4, r0
 8009d20:	460d      	mov	r5, r1
 8009d22:	463b      	mov	r3, r7
 8009d24:	4640      	mov	r0, r8
 8009d26:	4649      	mov	r1, r9
 8009d28:	f7f6 fc12 	bl	8000550 <__aeabi_dmul>
 8009d2c:	4632      	mov	r2, r6
 8009d2e:	463b      	mov	r3, r7
 8009d30:	f7f6 fa58 	bl	80001e4 <__adddf3>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	4620      	mov	r0, r4
 8009d3a:	4629      	mov	r1, r5
 8009d3c:	f7f6 fa50 	bl	80001e0 <__aeabi_dsub>
 8009d40:	4642      	mov	r2, r8
 8009d42:	464b      	mov	r3, r9
 8009d44:	f7f6 fa4c 	bl	80001e0 <__aeabi_dsub>
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	493a      	ldr	r1, [pc, #232]	; (8009e38 <__ieee754_pow+0xa48>)
 8009d4e:	2000      	movs	r0, #0
 8009d50:	f7f6 fa46 	bl	80001e0 <__aeabi_dsub>
 8009d54:	ec41 0b10 	vmov	d0, r0, r1
 8009d58:	ee10 3a90 	vmov	r3, s1
 8009d5c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009d60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d64:	da2b      	bge.n	8009dbe <__ieee754_pow+0x9ce>
 8009d66:	4650      	mov	r0, sl
 8009d68:	f000 fdca 	bl	800a900 <scalbn>
 8009d6c:	ec51 0b10 	vmov	r0, r1, d0
 8009d70:	ec53 2b18 	vmov	r2, r3, d8
 8009d74:	f7ff bbed 	b.w	8009552 <__ieee754_pow+0x162>
 8009d78:	4b30      	ldr	r3, [pc, #192]	; (8009e3c <__ieee754_pow+0xa4c>)
 8009d7a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009d7e:	429e      	cmp	r6, r3
 8009d80:	f77f af0c 	ble.w	8009b9c <__ieee754_pow+0x7ac>
 8009d84:	4b2e      	ldr	r3, [pc, #184]	; (8009e40 <__ieee754_pow+0xa50>)
 8009d86:	440b      	add	r3, r1
 8009d88:	4303      	orrs	r3, r0
 8009d8a:	d009      	beq.n	8009da0 <__ieee754_pow+0x9b0>
 8009d8c:	ec51 0b18 	vmov	r0, r1, d8
 8009d90:	2200      	movs	r2, #0
 8009d92:	2300      	movs	r3, #0
 8009d94:	f7f6 fe4e 	bl	8000a34 <__aeabi_dcmplt>
 8009d98:	3800      	subs	r0, #0
 8009d9a:	bf18      	it	ne
 8009d9c:	2001      	movne	r0, #1
 8009d9e:	e447      	b.n	8009630 <__ieee754_pow+0x240>
 8009da0:	4622      	mov	r2, r4
 8009da2:	462b      	mov	r3, r5
 8009da4:	f7f6 fa1c 	bl	80001e0 <__aeabi_dsub>
 8009da8:	4642      	mov	r2, r8
 8009daa:	464b      	mov	r3, r9
 8009dac:	f7f6 fe56 	bl	8000a5c <__aeabi_dcmpge>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	f43f aef3 	beq.w	8009b9c <__ieee754_pow+0x7ac>
 8009db6:	e7e9      	b.n	8009d8c <__ieee754_pow+0x99c>
 8009db8:	f04f 0a00 	mov.w	sl, #0
 8009dbc:	e71a      	b.n	8009bf4 <__ieee754_pow+0x804>
 8009dbe:	ec51 0b10 	vmov	r0, r1, d0
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	e7d4      	b.n	8009d70 <__ieee754_pow+0x980>
 8009dc6:	491c      	ldr	r1, [pc, #112]	; (8009e38 <__ieee754_pow+0xa48>)
 8009dc8:	2000      	movs	r0, #0
 8009dca:	f7ff bb30 	b.w	800942e <__ieee754_pow+0x3e>
 8009dce:	2000      	movs	r0, #0
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	f7ff bb2c 	b.w	800942e <__ieee754_pow+0x3e>
 8009dd6:	4630      	mov	r0, r6
 8009dd8:	4639      	mov	r1, r7
 8009dda:	f7ff bb28 	b.w	800942e <__ieee754_pow+0x3e>
 8009dde:	9204      	str	r2, [sp, #16]
 8009de0:	f7ff bb7a 	b.w	80094d8 <__ieee754_pow+0xe8>
 8009de4:	2300      	movs	r3, #0
 8009de6:	f7ff bb64 	b.w	80094b2 <__ieee754_pow+0xc2>
 8009dea:	bf00      	nop
 8009dec:	f3af 8000 	nop.w
 8009df0:	00000000 	.word	0x00000000
 8009df4:	3fe62e43 	.word	0x3fe62e43
 8009df8:	fefa39ef 	.word	0xfefa39ef
 8009dfc:	3fe62e42 	.word	0x3fe62e42
 8009e00:	0ca86c39 	.word	0x0ca86c39
 8009e04:	be205c61 	.word	0xbe205c61
 8009e08:	72bea4d0 	.word	0x72bea4d0
 8009e0c:	3e663769 	.word	0x3e663769
 8009e10:	c5d26bf1 	.word	0xc5d26bf1
 8009e14:	3ebbbd41 	.word	0x3ebbbd41
 8009e18:	af25de2c 	.word	0xaf25de2c
 8009e1c:	3f11566a 	.word	0x3f11566a
 8009e20:	16bebd93 	.word	0x16bebd93
 8009e24:	3f66c16c 	.word	0x3f66c16c
 8009e28:	5555553e 	.word	0x5555553e
 8009e2c:	3fc55555 	.word	0x3fc55555
 8009e30:	3fe00000 	.word	0x3fe00000
 8009e34:	000fffff 	.word	0x000fffff
 8009e38:	3ff00000 	.word	0x3ff00000
 8009e3c:	4090cbff 	.word	0x4090cbff
 8009e40:	3f6f3400 	.word	0x3f6f3400
 8009e44:	652b82fe 	.word	0x652b82fe
 8009e48:	3c971547 	.word	0x3c971547

08009e4c <__ieee754_sqrt>:
 8009e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e50:	ec55 4b10 	vmov	r4, r5, d0
 8009e54:	4e55      	ldr	r6, [pc, #340]	; (8009fac <__ieee754_sqrt+0x160>)
 8009e56:	43ae      	bics	r6, r5
 8009e58:	ee10 0a10 	vmov	r0, s0
 8009e5c:	ee10 3a10 	vmov	r3, s0
 8009e60:	462a      	mov	r2, r5
 8009e62:	4629      	mov	r1, r5
 8009e64:	d110      	bne.n	8009e88 <__ieee754_sqrt+0x3c>
 8009e66:	ee10 2a10 	vmov	r2, s0
 8009e6a:	462b      	mov	r3, r5
 8009e6c:	f7f6 fb70 	bl	8000550 <__aeabi_dmul>
 8009e70:	4602      	mov	r2, r0
 8009e72:	460b      	mov	r3, r1
 8009e74:	4620      	mov	r0, r4
 8009e76:	4629      	mov	r1, r5
 8009e78:	f7f6 f9b4 	bl	80001e4 <__adddf3>
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	460d      	mov	r5, r1
 8009e80:	ec45 4b10 	vmov	d0, r4, r5
 8009e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e88:	2d00      	cmp	r5, #0
 8009e8a:	dc10      	bgt.n	8009eae <__ieee754_sqrt+0x62>
 8009e8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009e90:	4330      	orrs	r0, r6
 8009e92:	d0f5      	beq.n	8009e80 <__ieee754_sqrt+0x34>
 8009e94:	b15d      	cbz	r5, 8009eae <__ieee754_sqrt+0x62>
 8009e96:	ee10 2a10 	vmov	r2, s0
 8009e9a:	462b      	mov	r3, r5
 8009e9c:	ee10 0a10 	vmov	r0, s0
 8009ea0:	f7f6 f99e 	bl	80001e0 <__aeabi_dsub>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	f7f6 fc7c 	bl	80007a4 <__aeabi_ddiv>
 8009eac:	e7e6      	b.n	8009e7c <__ieee754_sqrt+0x30>
 8009eae:	1512      	asrs	r2, r2, #20
 8009eb0:	d074      	beq.n	8009f9c <__ieee754_sqrt+0x150>
 8009eb2:	07d4      	lsls	r4, r2, #31
 8009eb4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009eb8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009ebc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009ec0:	bf5e      	ittt	pl
 8009ec2:	0fda      	lsrpl	r2, r3, #31
 8009ec4:	005b      	lslpl	r3, r3, #1
 8009ec6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009eca:	2400      	movs	r4, #0
 8009ecc:	0fda      	lsrs	r2, r3, #31
 8009ece:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009ed2:	107f      	asrs	r7, r7, #1
 8009ed4:	005b      	lsls	r3, r3, #1
 8009ed6:	2516      	movs	r5, #22
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009ede:	1886      	adds	r6, r0, r2
 8009ee0:	428e      	cmp	r6, r1
 8009ee2:	bfde      	ittt	le
 8009ee4:	1b89      	suble	r1, r1, r6
 8009ee6:	18b0      	addle	r0, r6, r2
 8009ee8:	18a4      	addle	r4, r4, r2
 8009eea:	0049      	lsls	r1, r1, #1
 8009eec:	3d01      	subs	r5, #1
 8009eee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009ef2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009ef6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009efa:	d1f0      	bne.n	8009ede <__ieee754_sqrt+0x92>
 8009efc:	462a      	mov	r2, r5
 8009efe:	f04f 0e20 	mov.w	lr, #32
 8009f02:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009f06:	4281      	cmp	r1, r0
 8009f08:	eb06 0c05 	add.w	ip, r6, r5
 8009f0c:	dc02      	bgt.n	8009f14 <__ieee754_sqrt+0xc8>
 8009f0e:	d113      	bne.n	8009f38 <__ieee754_sqrt+0xec>
 8009f10:	459c      	cmp	ip, r3
 8009f12:	d811      	bhi.n	8009f38 <__ieee754_sqrt+0xec>
 8009f14:	f1bc 0f00 	cmp.w	ip, #0
 8009f18:	eb0c 0506 	add.w	r5, ip, r6
 8009f1c:	da43      	bge.n	8009fa6 <__ieee754_sqrt+0x15a>
 8009f1e:	2d00      	cmp	r5, #0
 8009f20:	db41      	blt.n	8009fa6 <__ieee754_sqrt+0x15a>
 8009f22:	f100 0801 	add.w	r8, r0, #1
 8009f26:	1a09      	subs	r1, r1, r0
 8009f28:	459c      	cmp	ip, r3
 8009f2a:	bf88      	it	hi
 8009f2c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009f30:	eba3 030c 	sub.w	r3, r3, ip
 8009f34:	4432      	add	r2, r6
 8009f36:	4640      	mov	r0, r8
 8009f38:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009f3c:	f1be 0e01 	subs.w	lr, lr, #1
 8009f40:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009f44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009f4c:	d1db      	bne.n	8009f06 <__ieee754_sqrt+0xba>
 8009f4e:	430b      	orrs	r3, r1
 8009f50:	d006      	beq.n	8009f60 <__ieee754_sqrt+0x114>
 8009f52:	1c50      	adds	r0, r2, #1
 8009f54:	bf13      	iteet	ne
 8009f56:	3201      	addne	r2, #1
 8009f58:	3401      	addeq	r4, #1
 8009f5a:	4672      	moveq	r2, lr
 8009f5c:	f022 0201 	bicne.w	r2, r2, #1
 8009f60:	1063      	asrs	r3, r4, #1
 8009f62:	0852      	lsrs	r2, r2, #1
 8009f64:	07e1      	lsls	r1, r4, #31
 8009f66:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009f6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009f6e:	bf48      	it	mi
 8009f70:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009f74:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009f78:	4614      	mov	r4, r2
 8009f7a:	e781      	b.n	8009e80 <__ieee754_sqrt+0x34>
 8009f7c:	0ad9      	lsrs	r1, r3, #11
 8009f7e:	3815      	subs	r0, #21
 8009f80:	055b      	lsls	r3, r3, #21
 8009f82:	2900      	cmp	r1, #0
 8009f84:	d0fa      	beq.n	8009f7c <__ieee754_sqrt+0x130>
 8009f86:	02cd      	lsls	r5, r1, #11
 8009f88:	d50a      	bpl.n	8009fa0 <__ieee754_sqrt+0x154>
 8009f8a:	f1c2 0420 	rsb	r4, r2, #32
 8009f8e:	fa23 f404 	lsr.w	r4, r3, r4
 8009f92:	1e55      	subs	r5, r2, #1
 8009f94:	4093      	lsls	r3, r2
 8009f96:	4321      	orrs	r1, r4
 8009f98:	1b42      	subs	r2, r0, r5
 8009f9a:	e78a      	b.n	8009eb2 <__ieee754_sqrt+0x66>
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	e7f0      	b.n	8009f82 <__ieee754_sqrt+0x136>
 8009fa0:	0049      	lsls	r1, r1, #1
 8009fa2:	3201      	adds	r2, #1
 8009fa4:	e7ef      	b.n	8009f86 <__ieee754_sqrt+0x13a>
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	e7bd      	b.n	8009f26 <__ieee754_sqrt+0xda>
 8009faa:	bf00      	nop
 8009fac:	7ff00000 	.word	0x7ff00000

08009fb0 <__ieee754_rem_pio2f>:
 8009fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fb2:	ee10 6a10 	vmov	r6, s0
 8009fb6:	4b8e      	ldr	r3, [pc, #568]	; (800a1f0 <__ieee754_rem_pio2f+0x240>)
 8009fb8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8009fbc:	429d      	cmp	r5, r3
 8009fbe:	b087      	sub	sp, #28
 8009fc0:	eef0 7a40 	vmov.f32	s15, s0
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	dc05      	bgt.n	8009fd4 <__ieee754_rem_pio2f+0x24>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	ed80 0a00 	vstr	s0, [r0]
 8009fce:	6043      	str	r3, [r0, #4]
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	e01a      	b.n	800a00a <__ieee754_rem_pio2f+0x5a>
 8009fd4:	4b87      	ldr	r3, [pc, #540]	; (800a1f4 <__ieee754_rem_pio2f+0x244>)
 8009fd6:	429d      	cmp	r5, r3
 8009fd8:	dc46      	bgt.n	800a068 <__ieee754_rem_pio2f+0xb8>
 8009fda:	2e00      	cmp	r6, #0
 8009fdc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800a1f8 <__ieee754_rem_pio2f+0x248>
 8009fe0:	4b86      	ldr	r3, [pc, #536]	; (800a1fc <__ieee754_rem_pio2f+0x24c>)
 8009fe2:	f025 050f 	bic.w	r5, r5, #15
 8009fe6:	dd1f      	ble.n	800a028 <__ieee754_rem_pio2f+0x78>
 8009fe8:	429d      	cmp	r5, r3
 8009fea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009fee:	d00e      	beq.n	800a00e <__ieee754_rem_pio2f+0x5e>
 8009ff0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800a200 <__ieee754_rem_pio2f+0x250>
 8009ff4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8009ff8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009ffc:	ed80 0a00 	vstr	s0, [r0]
 800a000:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a004:	2001      	movs	r0, #1
 800a006:	edc4 7a01 	vstr	s15, [r4, #4]
 800a00a:	b007      	add	sp, #28
 800a00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a00e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800a204 <__ieee754_rem_pio2f+0x254>
 800a012:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a208 <__ieee754_rem_pio2f+0x258>
 800a016:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a01a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a01e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a022:	edc0 6a00 	vstr	s13, [r0]
 800a026:	e7eb      	b.n	800a000 <__ieee754_rem_pio2f+0x50>
 800a028:	429d      	cmp	r5, r3
 800a02a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a02e:	d00e      	beq.n	800a04e <__ieee754_rem_pio2f+0x9e>
 800a030:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a200 <__ieee754_rem_pio2f+0x250>
 800a034:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a038:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a03c:	ed80 0a00 	vstr	s0, [r0]
 800a040:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a044:	f04f 30ff 	mov.w	r0, #4294967295
 800a048:	edc4 7a01 	vstr	s15, [r4, #4]
 800a04c:	e7dd      	b.n	800a00a <__ieee754_rem_pio2f+0x5a>
 800a04e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800a204 <__ieee754_rem_pio2f+0x254>
 800a052:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800a208 <__ieee754_rem_pio2f+0x258>
 800a056:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a05a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a05e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a062:	edc0 6a00 	vstr	s13, [r0]
 800a066:	e7eb      	b.n	800a040 <__ieee754_rem_pio2f+0x90>
 800a068:	4b68      	ldr	r3, [pc, #416]	; (800a20c <__ieee754_rem_pio2f+0x25c>)
 800a06a:	429d      	cmp	r5, r3
 800a06c:	dc72      	bgt.n	800a154 <__ieee754_rem_pio2f+0x1a4>
 800a06e:	f000 fccd 	bl	800aa0c <fabsf>
 800a072:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a210 <__ieee754_rem_pio2f+0x260>
 800a076:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a07a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a07e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a086:	ee17 0a90 	vmov	r0, s15
 800a08a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a1f8 <__ieee754_rem_pio2f+0x248>
 800a08e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a092:	281f      	cmp	r0, #31
 800a094:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a200 <__ieee754_rem_pio2f+0x250>
 800a098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a09c:	eeb1 6a47 	vneg.f32	s12, s14
 800a0a0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a0a4:	ee16 2a90 	vmov	r2, s13
 800a0a8:	dc1c      	bgt.n	800a0e4 <__ieee754_rem_pio2f+0x134>
 800a0aa:	495a      	ldr	r1, [pc, #360]	; (800a214 <__ieee754_rem_pio2f+0x264>)
 800a0ac:	1e47      	subs	r7, r0, #1
 800a0ae:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a0b2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a0b6:	428b      	cmp	r3, r1
 800a0b8:	d014      	beq.n	800a0e4 <__ieee754_rem_pio2f+0x134>
 800a0ba:	6022      	str	r2, [r4, #0]
 800a0bc:	ed94 7a00 	vldr	s14, [r4]
 800a0c0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a0c4:	2e00      	cmp	r6, #0
 800a0c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a0ca:	ed84 0a01 	vstr	s0, [r4, #4]
 800a0ce:	da9c      	bge.n	800a00a <__ieee754_rem_pio2f+0x5a>
 800a0d0:	eeb1 7a47 	vneg.f32	s14, s14
 800a0d4:	eeb1 0a40 	vneg.f32	s0, s0
 800a0d8:	ed84 7a00 	vstr	s14, [r4]
 800a0dc:	ed84 0a01 	vstr	s0, [r4, #4]
 800a0e0:	4240      	negs	r0, r0
 800a0e2:	e792      	b.n	800a00a <__ieee754_rem_pio2f+0x5a>
 800a0e4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a0e8:	15eb      	asrs	r3, r5, #23
 800a0ea:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800a0ee:	2d08      	cmp	r5, #8
 800a0f0:	dde3      	ble.n	800a0ba <__ieee754_rem_pio2f+0x10a>
 800a0f2:	eddf 7a44 	vldr	s15, [pc, #272]	; 800a204 <__ieee754_rem_pio2f+0x254>
 800a0f6:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a208 <__ieee754_rem_pio2f+0x258>
 800a0fa:	eef0 6a40 	vmov.f32	s13, s0
 800a0fe:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a102:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a106:	eea6 0a27 	vfma.f32	s0, s12, s15
 800a10a:	eef0 7a40 	vmov.f32	s15, s0
 800a10e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a112:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a116:	ee15 2a90 	vmov	r2, s11
 800a11a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a11e:	1a5b      	subs	r3, r3, r1
 800a120:	2b19      	cmp	r3, #25
 800a122:	dc04      	bgt.n	800a12e <__ieee754_rem_pio2f+0x17e>
 800a124:	edc4 5a00 	vstr	s11, [r4]
 800a128:	eeb0 0a66 	vmov.f32	s0, s13
 800a12c:	e7c6      	b.n	800a0bc <__ieee754_rem_pio2f+0x10c>
 800a12e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a218 <__ieee754_rem_pio2f+0x268>
 800a132:	eeb0 0a66 	vmov.f32	s0, s13
 800a136:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a13a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a13e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a21c <__ieee754_rem_pio2f+0x26c>
 800a142:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a146:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a14a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a14e:	ed84 7a00 	vstr	s14, [r4]
 800a152:	e7b3      	b.n	800a0bc <__ieee754_rem_pio2f+0x10c>
 800a154:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a158:	db06      	blt.n	800a168 <__ieee754_rem_pio2f+0x1b8>
 800a15a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a15e:	edc0 7a01 	vstr	s15, [r0, #4]
 800a162:	edc0 7a00 	vstr	s15, [r0]
 800a166:	e733      	b.n	8009fd0 <__ieee754_rem_pio2f+0x20>
 800a168:	15ea      	asrs	r2, r5, #23
 800a16a:	3a86      	subs	r2, #134	; 0x86
 800a16c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a170:	ee07 3a90 	vmov	s15, r3
 800a174:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a178:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a220 <__ieee754_rem_pio2f+0x270>
 800a17c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a180:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a184:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a188:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a18c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a190:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a194:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a198:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a19c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a1a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1a8:	edcd 7a05 	vstr	s15, [sp, #20]
 800a1ac:	d11e      	bne.n	800a1ec <__ieee754_rem_pio2f+0x23c>
 800a1ae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a1b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b6:	bf14      	ite	ne
 800a1b8:	2302      	movne	r3, #2
 800a1ba:	2301      	moveq	r3, #1
 800a1bc:	4919      	ldr	r1, [pc, #100]	; (800a224 <__ieee754_rem_pio2f+0x274>)
 800a1be:	9101      	str	r1, [sp, #4]
 800a1c0:	2102      	movs	r1, #2
 800a1c2:	9100      	str	r1, [sp, #0]
 800a1c4:	a803      	add	r0, sp, #12
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	f000 f88e 	bl	800a2e8 <__kernel_rem_pio2f>
 800a1cc:	2e00      	cmp	r6, #0
 800a1ce:	f6bf af1c 	bge.w	800a00a <__ieee754_rem_pio2f+0x5a>
 800a1d2:	edd4 7a00 	vldr	s15, [r4]
 800a1d6:	eef1 7a67 	vneg.f32	s15, s15
 800a1da:	edc4 7a00 	vstr	s15, [r4]
 800a1de:	edd4 7a01 	vldr	s15, [r4, #4]
 800a1e2:	eef1 7a67 	vneg.f32	s15, s15
 800a1e6:	edc4 7a01 	vstr	s15, [r4, #4]
 800a1ea:	e779      	b.n	800a0e0 <__ieee754_rem_pio2f+0x130>
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e7e5      	b.n	800a1bc <__ieee754_rem_pio2f+0x20c>
 800a1f0:	3f490fd8 	.word	0x3f490fd8
 800a1f4:	4016cbe3 	.word	0x4016cbe3
 800a1f8:	3fc90f80 	.word	0x3fc90f80
 800a1fc:	3fc90fd0 	.word	0x3fc90fd0
 800a200:	37354443 	.word	0x37354443
 800a204:	37354400 	.word	0x37354400
 800a208:	2e85a308 	.word	0x2e85a308
 800a20c:	43490f80 	.word	0x43490f80
 800a210:	3f22f984 	.word	0x3f22f984
 800a214:	0800ac10 	.word	0x0800ac10
 800a218:	2e85a300 	.word	0x2e85a300
 800a21c:	248d3132 	.word	0x248d3132
 800a220:	43800000 	.word	0x43800000
 800a224:	0800ac90 	.word	0x0800ac90

0800a228 <__kernel_cosf>:
 800a228:	ee10 3a10 	vmov	r3, s0
 800a22c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a230:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a234:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a238:	da05      	bge.n	800a246 <__kernel_cosf+0x1e>
 800a23a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a23e:	ee17 2a90 	vmov	r2, s15
 800a242:	2a00      	cmp	r2, #0
 800a244:	d03d      	beq.n	800a2c2 <__kernel_cosf+0x9a>
 800a246:	ee60 5a00 	vmul.f32	s11, s0, s0
 800a24a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a2c8 <__kernel_cosf+0xa0>
 800a24e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800a2cc <__kernel_cosf+0xa4>
 800a252:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a2d0 <__kernel_cosf+0xa8>
 800a256:	4a1f      	ldr	r2, [pc, #124]	; (800a2d4 <__kernel_cosf+0xac>)
 800a258:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a25c:	4293      	cmp	r3, r2
 800a25e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a2d8 <__kernel_cosf+0xb0>
 800a262:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a266:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a2dc <__kernel_cosf+0xb4>
 800a26a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a26e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800a2e0 <__kernel_cosf+0xb8>
 800a272:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a276:	eeb0 7a66 	vmov.f32	s14, s13
 800a27a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a27e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a282:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800a286:	ee67 6a25 	vmul.f32	s13, s14, s11
 800a28a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800a28e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a292:	dc04      	bgt.n	800a29e <__kernel_cosf+0x76>
 800a294:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a298:	ee36 0a47 	vsub.f32	s0, s12, s14
 800a29c:	4770      	bx	lr
 800a29e:	4a11      	ldr	r2, [pc, #68]	; (800a2e4 <__kernel_cosf+0xbc>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	bfda      	itte	le
 800a2a4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800a2a8:	ee06 3a90 	vmovle	s13, r3
 800a2ac:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800a2b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a2b4:	ee36 0a66 	vsub.f32	s0, s12, s13
 800a2b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a2bc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a2c0:	4770      	bx	lr
 800a2c2:	eeb0 0a46 	vmov.f32	s0, s12
 800a2c6:	4770      	bx	lr
 800a2c8:	ad47d74e 	.word	0xad47d74e
 800a2cc:	310f74f6 	.word	0x310f74f6
 800a2d0:	3d2aaaab 	.word	0x3d2aaaab
 800a2d4:	3e999999 	.word	0x3e999999
 800a2d8:	b493f27c 	.word	0xb493f27c
 800a2dc:	37d00d01 	.word	0x37d00d01
 800a2e0:	bab60b61 	.word	0xbab60b61
 800a2e4:	3f480000 	.word	0x3f480000

0800a2e8 <__kernel_rem_pio2f>:
 800a2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	ed2d 8b04 	vpush	{d8-d9}
 800a2f0:	b0d9      	sub	sp, #356	; 0x164
 800a2f2:	4688      	mov	r8, r1
 800a2f4:	9002      	str	r0, [sp, #8]
 800a2f6:	49bb      	ldr	r1, [pc, #748]	; (800a5e4 <__kernel_rem_pio2f+0x2fc>)
 800a2f8:	9866      	ldr	r0, [sp, #408]	; 0x198
 800a2fa:	9301      	str	r3, [sp, #4]
 800a2fc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800a300:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800a304:	1e59      	subs	r1, r3, #1
 800a306:	1d13      	adds	r3, r2, #4
 800a308:	db27      	blt.n	800a35a <__kernel_rem_pio2f+0x72>
 800a30a:	f1b2 0b03 	subs.w	fp, r2, #3
 800a30e:	bf48      	it	mi
 800a310:	f102 0b04 	addmi.w	fp, r2, #4
 800a314:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800a318:	1c45      	adds	r5, r0, #1
 800a31a:	00ec      	lsls	r4, r5, #3
 800a31c:	1a47      	subs	r7, r0, r1
 800a31e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800a5f4 <__kernel_rem_pio2f+0x30c>
 800a322:	9403      	str	r4, [sp, #12]
 800a324:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800a328:	eb0a 0c01 	add.w	ip, sl, r1
 800a32c:	ae1c      	add	r6, sp, #112	; 0x70
 800a32e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800a332:	2400      	movs	r4, #0
 800a334:	4564      	cmp	r4, ip
 800a336:	dd12      	ble.n	800a35e <__kernel_rem_pio2f+0x76>
 800a338:	9b01      	ldr	r3, [sp, #4]
 800a33a:	ac1c      	add	r4, sp, #112	; 0x70
 800a33c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a340:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800a344:	f04f 0c00 	mov.w	ip, #0
 800a348:	45d4      	cmp	ip, sl
 800a34a:	dc27      	bgt.n	800a39c <__kernel_rem_pio2f+0xb4>
 800a34c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a350:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800a5f4 <__kernel_rem_pio2f+0x30c>
 800a354:	4627      	mov	r7, r4
 800a356:	2600      	movs	r6, #0
 800a358:	e016      	b.n	800a388 <__kernel_rem_pio2f+0xa0>
 800a35a:	2000      	movs	r0, #0
 800a35c:	e7dc      	b.n	800a318 <__kernel_rem_pio2f+0x30>
 800a35e:	42e7      	cmn	r7, r4
 800a360:	bf5d      	ittte	pl
 800a362:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800a366:	ee07 3a90 	vmovpl	s15, r3
 800a36a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a36e:	eef0 7a47 	vmovmi.f32	s15, s14
 800a372:	ece6 7a01 	vstmia	r6!, {s15}
 800a376:	3401      	adds	r4, #1
 800a378:	e7dc      	b.n	800a334 <__kernel_rem_pio2f+0x4c>
 800a37a:	ecf9 6a01 	vldmia	r9!, {s13}
 800a37e:	ed97 7a00 	vldr	s14, [r7]
 800a382:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a386:	3601      	adds	r6, #1
 800a388:	428e      	cmp	r6, r1
 800a38a:	f1a7 0704 	sub.w	r7, r7, #4
 800a38e:	ddf4      	ble.n	800a37a <__kernel_rem_pio2f+0x92>
 800a390:	eceb 7a01 	vstmia	fp!, {s15}
 800a394:	f10c 0c01 	add.w	ip, ip, #1
 800a398:	3404      	adds	r4, #4
 800a39a:	e7d5      	b.n	800a348 <__kernel_rem_pio2f+0x60>
 800a39c:	ab08      	add	r3, sp, #32
 800a39e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a3a2:	eddf 8a93 	vldr	s17, [pc, #588]	; 800a5f0 <__kernel_rem_pio2f+0x308>
 800a3a6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800a5ec <__kernel_rem_pio2f+0x304>
 800a3aa:	9304      	str	r3, [sp, #16]
 800a3ac:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800a3b0:	4656      	mov	r6, sl
 800a3b2:	00b3      	lsls	r3, r6, #2
 800a3b4:	9305      	str	r3, [sp, #20]
 800a3b6:	ab58      	add	r3, sp, #352	; 0x160
 800a3b8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a3bc:	ac08      	add	r4, sp, #32
 800a3be:	ab44      	add	r3, sp, #272	; 0x110
 800a3c0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800a3c4:	46a4      	mov	ip, r4
 800a3c6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a3ca:	4637      	mov	r7, r6
 800a3cc:	2f00      	cmp	r7, #0
 800a3ce:	f1a0 0004 	sub.w	r0, r0, #4
 800a3d2:	dc4f      	bgt.n	800a474 <__kernel_rem_pio2f+0x18c>
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a3da:	f000 fb61 	bl	800aaa0 <scalbnf>
 800a3de:	eeb0 8a40 	vmov.f32	s16, s0
 800a3e2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800a3e6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a3ea:	f000 fb17 	bl	800aa1c <floorf>
 800a3ee:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800a3f2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a3f6:	2d00      	cmp	r5, #0
 800a3f8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a3fc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a400:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800a404:	ee17 9a90 	vmov	r9, s15
 800a408:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a40c:	dd44      	ble.n	800a498 <__kernel_rem_pio2f+0x1b0>
 800a40e:	f106 3cff 	add.w	ip, r6, #4294967295
 800a412:	ab08      	add	r3, sp, #32
 800a414:	f1c5 0e08 	rsb	lr, r5, #8
 800a418:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800a41c:	fa47 f00e 	asr.w	r0, r7, lr
 800a420:	4481      	add	r9, r0
 800a422:	fa00 f00e 	lsl.w	r0, r0, lr
 800a426:	1a3f      	subs	r7, r7, r0
 800a428:	f1c5 0007 	rsb	r0, r5, #7
 800a42c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800a430:	4107      	asrs	r7, r0
 800a432:	2f00      	cmp	r7, #0
 800a434:	dd3f      	ble.n	800a4b6 <__kernel_rem_pio2f+0x1ce>
 800a436:	f04f 0e00 	mov.w	lr, #0
 800a43a:	f109 0901 	add.w	r9, r9, #1
 800a43e:	4673      	mov	r3, lr
 800a440:	4576      	cmp	r6, lr
 800a442:	dc6b      	bgt.n	800a51c <__kernel_rem_pio2f+0x234>
 800a444:	2d00      	cmp	r5, #0
 800a446:	dd04      	ble.n	800a452 <__kernel_rem_pio2f+0x16a>
 800a448:	2d01      	cmp	r5, #1
 800a44a:	d078      	beq.n	800a53e <__kernel_rem_pio2f+0x256>
 800a44c:	2d02      	cmp	r5, #2
 800a44e:	f000 8081 	beq.w	800a554 <__kernel_rem_pio2f+0x26c>
 800a452:	2f02      	cmp	r7, #2
 800a454:	d12f      	bne.n	800a4b6 <__kernel_rem_pio2f+0x1ce>
 800a456:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a45a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a45e:	b353      	cbz	r3, 800a4b6 <__kernel_rem_pio2f+0x1ce>
 800a460:	4628      	mov	r0, r5
 800a462:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a466:	f000 fb1b 	bl	800aaa0 <scalbnf>
 800a46a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a46e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a472:	e020      	b.n	800a4b6 <__kernel_rem_pio2f+0x1ce>
 800a474:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a478:	3f01      	subs	r7, #1
 800a47a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a47e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a482:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a486:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a48a:	ecac 0a01 	vstmia	ip!, {s0}
 800a48e:	ed90 0a00 	vldr	s0, [r0]
 800a492:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a496:	e799      	b.n	800a3cc <__kernel_rem_pio2f+0xe4>
 800a498:	d105      	bne.n	800a4a6 <__kernel_rem_pio2f+0x1be>
 800a49a:	1e70      	subs	r0, r6, #1
 800a49c:	ab08      	add	r3, sp, #32
 800a49e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800a4a2:	11ff      	asrs	r7, r7, #7
 800a4a4:	e7c5      	b.n	800a432 <__kernel_rem_pio2f+0x14a>
 800a4a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a4aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b2:	da31      	bge.n	800a518 <__kernel_rem_pio2f+0x230>
 800a4b4:	2700      	movs	r7, #0
 800a4b6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4be:	f040 809b 	bne.w	800a5f8 <__kernel_rem_pio2f+0x310>
 800a4c2:	1e74      	subs	r4, r6, #1
 800a4c4:	46a4      	mov	ip, r4
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	45d4      	cmp	ip, sl
 800a4ca:	da4a      	bge.n	800a562 <__kernel_rem_pio2f+0x27a>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d07a      	beq.n	800a5c6 <__kernel_rem_pio2f+0x2de>
 800a4d0:	ab08      	add	r3, sp, #32
 800a4d2:	3d08      	subs	r5, #8
 800a4d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 8081 	beq.w	800a5e0 <__kernel_rem_pio2f+0x2f8>
 800a4de:	4628      	mov	r0, r5
 800a4e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a4e4:	00a5      	lsls	r5, r4, #2
 800a4e6:	f000 fadb 	bl	800aaa0 <scalbnf>
 800a4ea:	aa44      	add	r2, sp, #272	; 0x110
 800a4ec:	1d2b      	adds	r3, r5, #4
 800a4ee:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800a5f0 <__kernel_rem_pio2f+0x308>
 800a4f2:	18d1      	adds	r1, r2, r3
 800a4f4:	4622      	mov	r2, r4
 800a4f6:	2a00      	cmp	r2, #0
 800a4f8:	f280 80ae 	bge.w	800a658 <__kernel_rem_pio2f+0x370>
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	2a00      	cmp	r2, #0
 800a500:	f2c0 80cc 	blt.w	800a69c <__kernel_rem_pio2f+0x3b4>
 800a504:	a944      	add	r1, sp, #272	; 0x110
 800a506:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800a50a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800a5e8 <__kernel_rem_pio2f+0x300>
 800a50e:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a5f4 <__kernel_rem_pio2f+0x30c>
 800a512:	2000      	movs	r0, #0
 800a514:	1aa1      	subs	r1, r4, r2
 800a516:	e0b6      	b.n	800a686 <__kernel_rem_pio2f+0x39e>
 800a518:	2702      	movs	r7, #2
 800a51a:	e78c      	b.n	800a436 <__kernel_rem_pio2f+0x14e>
 800a51c:	6820      	ldr	r0, [r4, #0]
 800a51e:	b94b      	cbnz	r3, 800a534 <__kernel_rem_pio2f+0x24c>
 800a520:	b118      	cbz	r0, 800a52a <__kernel_rem_pio2f+0x242>
 800a522:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800a526:	6020      	str	r0, [r4, #0]
 800a528:	2001      	movs	r0, #1
 800a52a:	f10e 0e01 	add.w	lr, lr, #1
 800a52e:	3404      	adds	r4, #4
 800a530:	4603      	mov	r3, r0
 800a532:	e785      	b.n	800a440 <__kernel_rem_pio2f+0x158>
 800a534:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800a538:	6020      	str	r0, [r4, #0]
 800a53a:	4618      	mov	r0, r3
 800a53c:	e7f5      	b.n	800a52a <__kernel_rem_pio2f+0x242>
 800a53e:	1e74      	subs	r4, r6, #1
 800a540:	a808      	add	r0, sp, #32
 800a542:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a546:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a54a:	f10d 0c20 	add.w	ip, sp, #32
 800a54e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800a552:	e77e      	b.n	800a452 <__kernel_rem_pio2f+0x16a>
 800a554:	1e74      	subs	r4, r6, #1
 800a556:	a808      	add	r0, sp, #32
 800a558:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a55c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a560:	e7f3      	b.n	800a54a <__kernel_rem_pio2f+0x262>
 800a562:	ab08      	add	r3, sp, #32
 800a564:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800a568:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a56c:	4318      	orrs	r0, r3
 800a56e:	e7ab      	b.n	800a4c8 <__kernel_rem_pio2f+0x1e0>
 800a570:	f10c 0c01 	add.w	ip, ip, #1
 800a574:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800a578:	2c00      	cmp	r4, #0
 800a57a:	d0f9      	beq.n	800a570 <__kernel_rem_pio2f+0x288>
 800a57c:	9b05      	ldr	r3, [sp, #20]
 800a57e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800a582:	eb0d 0003 	add.w	r0, sp, r3
 800a586:	9b01      	ldr	r3, [sp, #4]
 800a588:	18f4      	adds	r4, r6, r3
 800a58a:	ab1c      	add	r3, sp, #112	; 0x70
 800a58c:	1c77      	adds	r7, r6, #1
 800a58e:	384c      	subs	r0, #76	; 0x4c
 800a590:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a594:	4466      	add	r6, ip
 800a596:	42be      	cmp	r6, r7
 800a598:	f6ff af0b 	blt.w	800a3b2 <__kernel_rem_pio2f+0xca>
 800a59c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800a5a0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a5a4:	ee07 3a90 	vmov	s15, r3
 800a5a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5ac:	f04f 0c00 	mov.w	ip, #0
 800a5b0:	ece4 7a01 	vstmia	r4!, {s15}
 800a5b4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a5f4 <__kernel_rem_pio2f+0x30c>
 800a5b8:	46a1      	mov	r9, r4
 800a5ba:	458c      	cmp	ip, r1
 800a5bc:	dd07      	ble.n	800a5ce <__kernel_rem_pio2f+0x2e6>
 800a5be:	ece0 7a01 	vstmia	r0!, {s15}
 800a5c2:	3701      	adds	r7, #1
 800a5c4:	e7e7      	b.n	800a596 <__kernel_rem_pio2f+0x2ae>
 800a5c6:	9804      	ldr	r0, [sp, #16]
 800a5c8:	f04f 0c01 	mov.w	ip, #1
 800a5cc:	e7d2      	b.n	800a574 <__kernel_rem_pio2f+0x28c>
 800a5ce:	ecfe 6a01 	vldmia	lr!, {s13}
 800a5d2:	ed39 7a01 	vldmdb	r9!, {s14}
 800a5d6:	f10c 0c01 	add.w	ip, ip, #1
 800a5da:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a5de:	e7ec      	b.n	800a5ba <__kernel_rem_pio2f+0x2d2>
 800a5e0:	3c01      	subs	r4, #1
 800a5e2:	e775      	b.n	800a4d0 <__kernel_rem_pio2f+0x1e8>
 800a5e4:	0800afd4 	.word	0x0800afd4
 800a5e8:	0800afa8 	.word	0x0800afa8
 800a5ec:	43800000 	.word	0x43800000
 800a5f0:	3b800000 	.word	0x3b800000
 800a5f4:	00000000 	.word	0x00000000
 800a5f8:	9b03      	ldr	r3, [sp, #12]
 800a5fa:	eeb0 0a48 	vmov.f32	s0, s16
 800a5fe:	1a98      	subs	r0, r3, r2
 800a600:	f000 fa4e 	bl	800aaa0 <scalbnf>
 800a604:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800a5ec <__kernel_rem_pio2f+0x304>
 800a608:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a610:	db19      	blt.n	800a646 <__kernel_rem_pio2f+0x35e>
 800a612:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800a5f0 <__kernel_rem_pio2f+0x308>
 800a616:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a61a:	aa08      	add	r2, sp, #32
 800a61c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a620:	1c74      	adds	r4, r6, #1
 800a622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a626:	3508      	adds	r5, #8
 800a628:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a62c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a630:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a634:	ee10 3a10 	vmov	r3, s0
 800a638:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800a63c:	ee17 3a90 	vmov	r3, s15
 800a640:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a644:	e74b      	b.n	800a4de <__kernel_rem_pio2f+0x1f6>
 800a646:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a64a:	aa08      	add	r2, sp, #32
 800a64c:	ee10 3a10 	vmov	r3, s0
 800a650:	4634      	mov	r4, r6
 800a652:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800a656:	e742      	b.n	800a4de <__kernel_rem_pio2f+0x1f6>
 800a658:	a808      	add	r0, sp, #32
 800a65a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800a65e:	9001      	str	r0, [sp, #4]
 800a660:	ee07 0a90 	vmov	s15, r0
 800a664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a668:	3a01      	subs	r2, #1
 800a66a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a66e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a672:	ed61 7a01 	vstmdb	r1!, {s15}
 800a676:	e73e      	b.n	800a4f6 <__kernel_rem_pio2f+0x20e>
 800a678:	ecfc 6a01 	vldmia	ip!, {s13}
 800a67c:	ecb6 7a01 	vldmia	r6!, {s14}
 800a680:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a684:	3001      	adds	r0, #1
 800a686:	4550      	cmp	r0, sl
 800a688:	dc01      	bgt.n	800a68e <__kernel_rem_pio2f+0x3a6>
 800a68a:	4288      	cmp	r0, r1
 800a68c:	ddf4      	ble.n	800a678 <__kernel_rem_pio2f+0x390>
 800a68e:	a858      	add	r0, sp, #352	; 0x160
 800a690:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a694:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800a698:	3a01      	subs	r2, #1
 800a69a:	e730      	b.n	800a4fe <__kernel_rem_pio2f+0x216>
 800a69c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800a69e:	2a02      	cmp	r2, #2
 800a6a0:	dc09      	bgt.n	800a6b6 <__kernel_rem_pio2f+0x3ce>
 800a6a2:	2a00      	cmp	r2, #0
 800a6a4:	dc2a      	bgt.n	800a6fc <__kernel_rem_pio2f+0x414>
 800a6a6:	d043      	beq.n	800a730 <__kernel_rem_pio2f+0x448>
 800a6a8:	f009 0007 	and.w	r0, r9, #7
 800a6ac:	b059      	add	sp, #356	; 0x164
 800a6ae:	ecbd 8b04 	vpop	{d8-d9}
 800a6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800a6b8:	2b03      	cmp	r3, #3
 800a6ba:	d1f5      	bne.n	800a6a8 <__kernel_rem_pio2f+0x3c0>
 800a6bc:	ab30      	add	r3, sp, #192	; 0xc0
 800a6be:	442b      	add	r3, r5
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	f1a1 0104 	sub.w	r1, r1, #4
 800a6cc:	dc51      	bgt.n	800a772 <__kernel_rem_pio2f+0x48a>
 800a6ce:	4621      	mov	r1, r4
 800a6d0:	2901      	cmp	r1, #1
 800a6d2:	f1a2 0204 	sub.w	r2, r2, #4
 800a6d6:	dc5c      	bgt.n	800a792 <__kernel_rem_pio2f+0x4aa>
 800a6d8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800a5f4 <__kernel_rem_pio2f+0x30c>
 800a6dc:	3304      	adds	r3, #4
 800a6de:	2c01      	cmp	r4, #1
 800a6e0:	dc67      	bgt.n	800a7b2 <__kernel_rem_pio2f+0x4ca>
 800a6e2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800a6e6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800a6ea:	2f00      	cmp	r7, #0
 800a6ec:	d167      	bne.n	800a7be <__kernel_rem_pio2f+0x4d6>
 800a6ee:	edc8 6a00 	vstr	s13, [r8]
 800a6f2:	ed88 7a01 	vstr	s14, [r8, #4]
 800a6f6:	edc8 7a02 	vstr	s15, [r8, #8]
 800a6fa:	e7d5      	b.n	800a6a8 <__kernel_rem_pio2f+0x3c0>
 800a6fc:	aa30      	add	r2, sp, #192	; 0xc0
 800a6fe:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800a5f4 <__kernel_rem_pio2f+0x30c>
 800a702:	4413      	add	r3, r2
 800a704:	4622      	mov	r2, r4
 800a706:	2a00      	cmp	r2, #0
 800a708:	da24      	bge.n	800a754 <__kernel_rem_pio2f+0x46c>
 800a70a:	b34f      	cbz	r7, 800a760 <__kernel_rem_pio2f+0x478>
 800a70c:	eef1 7a47 	vneg.f32	s15, s14
 800a710:	edc8 7a00 	vstr	s15, [r8]
 800a714:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800a718:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a71c:	aa31      	add	r2, sp, #196	; 0xc4
 800a71e:	2301      	movs	r3, #1
 800a720:	429c      	cmp	r4, r3
 800a722:	da20      	bge.n	800a766 <__kernel_rem_pio2f+0x47e>
 800a724:	b10f      	cbz	r7, 800a72a <__kernel_rem_pio2f+0x442>
 800a726:	eef1 7a67 	vneg.f32	s15, s15
 800a72a:	edc8 7a01 	vstr	s15, [r8, #4]
 800a72e:	e7bb      	b.n	800a6a8 <__kernel_rem_pio2f+0x3c0>
 800a730:	aa30      	add	r2, sp, #192	; 0xc0
 800a732:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800a5f4 <__kernel_rem_pio2f+0x30c>
 800a736:	4413      	add	r3, r2
 800a738:	2c00      	cmp	r4, #0
 800a73a:	da05      	bge.n	800a748 <__kernel_rem_pio2f+0x460>
 800a73c:	b10f      	cbz	r7, 800a742 <__kernel_rem_pio2f+0x45a>
 800a73e:	eef1 7a67 	vneg.f32	s15, s15
 800a742:	edc8 7a00 	vstr	s15, [r8]
 800a746:	e7af      	b.n	800a6a8 <__kernel_rem_pio2f+0x3c0>
 800a748:	ed33 7a01 	vldmdb	r3!, {s14}
 800a74c:	3c01      	subs	r4, #1
 800a74e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a752:	e7f1      	b.n	800a738 <__kernel_rem_pio2f+0x450>
 800a754:	ed73 7a01 	vldmdb	r3!, {s15}
 800a758:	3a01      	subs	r2, #1
 800a75a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a75e:	e7d2      	b.n	800a706 <__kernel_rem_pio2f+0x41e>
 800a760:	eef0 7a47 	vmov.f32	s15, s14
 800a764:	e7d4      	b.n	800a710 <__kernel_rem_pio2f+0x428>
 800a766:	ecb2 7a01 	vldmia	r2!, {s14}
 800a76a:	3301      	adds	r3, #1
 800a76c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a770:	e7d6      	b.n	800a720 <__kernel_rem_pio2f+0x438>
 800a772:	edd1 7a00 	vldr	s15, [r1]
 800a776:	edd1 6a01 	vldr	s13, [r1, #4]
 800a77a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a77e:	3801      	subs	r0, #1
 800a780:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a784:	ed81 7a00 	vstr	s14, [r1]
 800a788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a78c:	edc1 7a01 	vstr	s15, [r1, #4]
 800a790:	e799      	b.n	800a6c6 <__kernel_rem_pio2f+0x3de>
 800a792:	edd2 7a00 	vldr	s15, [r2]
 800a796:	edd2 6a01 	vldr	s13, [r2, #4]
 800a79a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a79e:	3901      	subs	r1, #1
 800a7a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7a4:	ed82 7a00 	vstr	s14, [r2]
 800a7a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ac:	edc2 7a01 	vstr	s15, [r2, #4]
 800a7b0:	e78e      	b.n	800a6d0 <__kernel_rem_pio2f+0x3e8>
 800a7b2:	ed33 7a01 	vldmdb	r3!, {s14}
 800a7b6:	3c01      	subs	r4, #1
 800a7b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a7bc:	e78f      	b.n	800a6de <__kernel_rem_pio2f+0x3f6>
 800a7be:	eef1 6a66 	vneg.f32	s13, s13
 800a7c2:	eeb1 7a47 	vneg.f32	s14, s14
 800a7c6:	edc8 6a00 	vstr	s13, [r8]
 800a7ca:	ed88 7a01 	vstr	s14, [r8, #4]
 800a7ce:	eef1 7a67 	vneg.f32	s15, s15
 800a7d2:	e790      	b.n	800a6f6 <__kernel_rem_pio2f+0x40e>

0800a7d4 <__kernel_sinf>:
 800a7d4:	ee10 3a10 	vmov	r3, s0
 800a7d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a7e0:	da04      	bge.n	800a7ec <__kernel_sinf+0x18>
 800a7e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a7e6:	ee17 3a90 	vmov	r3, s15
 800a7ea:	b35b      	cbz	r3, 800a844 <__kernel_sinf+0x70>
 800a7ec:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a7f0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a848 <__kernel_sinf+0x74>
 800a7f4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800a84c <__kernel_sinf+0x78>
 800a7f8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a7fc:	eddf 7a14 	vldr	s15, [pc, #80]	; 800a850 <__kernel_sinf+0x7c>
 800a800:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a804:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800a854 <__kernel_sinf+0x80>
 800a808:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a80c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800a858 <__kernel_sinf+0x84>
 800a810:	ee60 6a07 	vmul.f32	s13, s0, s14
 800a814:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a818:	b930      	cbnz	r0, 800a828 <__kernel_sinf+0x54>
 800a81a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800a85c <__kernel_sinf+0x88>
 800a81e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a822:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a826:	4770      	bx	lr
 800a828:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a82c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800a830:	eee0 7a86 	vfma.f32	s15, s1, s12
 800a834:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800a838:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a860 <__kernel_sinf+0x8c>
 800a83c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800a840:	ee30 0a60 	vsub.f32	s0, s0, s1
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	2f2ec9d3 	.word	0x2f2ec9d3
 800a84c:	b2d72f34 	.word	0xb2d72f34
 800a850:	3638ef1b 	.word	0x3638ef1b
 800a854:	b9500d01 	.word	0xb9500d01
 800a858:	3c088889 	.word	0x3c088889
 800a85c:	be2aaaab 	.word	0xbe2aaaab
 800a860:	3e2aaaab 	.word	0x3e2aaaab

0800a864 <with_errno>:
 800a864:	b570      	push	{r4, r5, r6, lr}
 800a866:	4604      	mov	r4, r0
 800a868:	460d      	mov	r5, r1
 800a86a:	4616      	mov	r6, r2
 800a86c:	f7fe f9f2 	bl	8008c54 <__errno>
 800a870:	4629      	mov	r1, r5
 800a872:	6006      	str	r6, [r0, #0]
 800a874:	4620      	mov	r0, r4
 800a876:	bd70      	pop	{r4, r5, r6, pc}

0800a878 <xflow>:
 800a878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a87a:	4614      	mov	r4, r2
 800a87c:	461d      	mov	r5, r3
 800a87e:	b108      	cbz	r0, 800a884 <xflow+0xc>
 800a880:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a884:	e9cd 2300 	strd	r2, r3, [sp]
 800a888:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a88c:	4620      	mov	r0, r4
 800a88e:	4629      	mov	r1, r5
 800a890:	f7f5 fe5e 	bl	8000550 <__aeabi_dmul>
 800a894:	2222      	movs	r2, #34	; 0x22
 800a896:	b003      	add	sp, #12
 800a898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a89c:	f7ff bfe2 	b.w	800a864 <with_errno>

0800a8a0 <__math_uflow>:
 800a8a0:	b508      	push	{r3, lr}
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a8a8:	f7ff ffe6 	bl	800a878 <xflow>
 800a8ac:	ec41 0b10 	vmov	d0, r0, r1
 800a8b0:	bd08      	pop	{r3, pc}

0800a8b2 <__math_oflow>:
 800a8b2:	b508      	push	{r3, lr}
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a8ba:	f7ff ffdd 	bl	800a878 <xflow>
 800a8be:	ec41 0b10 	vmov	d0, r0, r1
 800a8c2:	bd08      	pop	{r3, pc}

0800a8c4 <fabs>:
 800a8c4:	ec51 0b10 	vmov	r0, r1, d0
 800a8c8:	ee10 2a10 	vmov	r2, s0
 800a8cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a8d0:	ec43 2b10 	vmov	d0, r2, r3
 800a8d4:	4770      	bx	lr

0800a8d6 <finite>:
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	ed8d 0b00 	vstr	d0, [sp]
 800a8dc:	9801      	ldr	r0, [sp, #4]
 800a8de:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a8e2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a8e6:	0fc0      	lsrs	r0, r0, #31
 800a8e8:	b002      	add	sp, #8
 800a8ea:	4770      	bx	lr
 800a8ec:	0000      	movs	r0, r0
	...

0800a8f0 <nan>:
 800a8f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a8f8 <nan+0x8>
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	00000000 	.word	0x00000000
 800a8fc:	7ff80000 	.word	0x7ff80000

0800a900 <scalbn>:
 800a900:	b570      	push	{r4, r5, r6, lr}
 800a902:	ec55 4b10 	vmov	r4, r5, d0
 800a906:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a90a:	4606      	mov	r6, r0
 800a90c:	462b      	mov	r3, r5
 800a90e:	b99a      	cbnz	r2, 800a938 <scalbn+0x38>
 800a910:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a914:	4323      	orrs	r3, r4
 800a916:	d036      	beq.n	800a986 <scalbn+0x86>
 800a918:	4b39      	ldr	r3, [pc, #228]	; (800aa00 <scalbn+0x100>)
 800a91a:	4629      	mov	r1, r5
 800a91c:	ee10 0a10 	vmov	r0, s0
 800a920:	2200      	movs	r2, #0
 800a922:	f7f5 fe15 	bl	8000550 <__aeabi_dmul>
 800a926:	4b37      	ldr	r3, [pc, #220]	; (800aa04 <scalbn+0x104>)
 800a928:	429e      	cmp	r6, r3
 800a92a:	4604      	mov	r4, r0
 800a92c:	460d      	mov	r5, r1
 800a92e:	da10      	bge.n	800a952 <scalbn+0x52>
 800a930:	a32b      	add	r3, pc, #172	; (adr r3, 800a9e0 <scalbn+0xe0>)
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	e03a      	b.n	800a9ae <scalbn+0xae>
 800a938:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a93c:	428a      	cmp	r2, r1
 800a93e:	d10c      	bne.n	800a95a <scalbn+0x5a>
 800a940:	ee10 2a10 	vmov	r2, s0
 800a944:	4620      	mov	r0, r4
 800a946:	4629      	mov	r1, r5
 800a948:	f7f5 fc4c 	bl	80001e4 <__adddf3>
 800a94c:	4604      	mov	r4, r0
 800a94e:	460d      	mov	r5, r1
 800a950:	e019      	b.n	800a986 <scalbn+0x86>
 800a952:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a956:	460b      	mov	r3, r1
 800a958:	3a36      	subs	r2, #54	; 0x36
 800a95a:	4432      	add	r2, r6
 800a95c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a960:	428a      	cmp	r2, r1
 800a962:	dd08      	ble.n	800a976 <scalbn+0x76>
 800a964:	2d00      	cmp	r5, #0
 800a966:	a120      	add	r1, pc, #128	; (adr r1, 800a9e8 <scalbn+0xe8>)
 800a968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a96c:	da1c      	bge.n	800a9a8 <scalbn+0xa8>
 800a96e:	a120      	add	r1, pc, #128	; (adr r1, 800a9f0 <scalbn+0xf0>)
 800a970:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a974:	e018      	b.n	800a9a8 <scalbn+0xa8>
 800a976:	2a00      	cmp	r2, #0
 800a978:	dd08      	ble.n	800a98c <scalbn+0x8c>
 800a97a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a97e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a982:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a986:	ec45 4b10 	vmov	d0, r4, r5
 800a98a:	bd70      	pop	{r4, r5, r6, pc}
 800a98c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a990:	da19      	bge.n	800a9c6 <scalbn+0xc6>
 800a992:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a996:	429e      	cmp	r6, r3
 800a998:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a99c:	dd0a      	ble.n	800a9b4 <scalbn+0xb4>
 800a99e:	a112      	add	r1, pc, #72	; (adr r1, 800a9e8 <scalbn+0xe8>)
 800a9a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1e2      	bne.n	800a96e <scalbn+0x6e>
 800a9a8:	a30f      	add	r3, pc, #60	; (adr r3, 800a9e8 <scalbn+0xe8>)
 800a9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ae:	f7f5 fdcf 	bl	8000550 <__aeabi_dmul>
 800a9b2:	e7cb      	b.n	800a94c <scalbn+0x4c>
 800a9b4:	a10a      	add	r1, pc, #40	; (adr r1, 800a9e0 <scalbn+0xe0>)
 800a9b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d0b8      	beq.n	800a930 <scalbn+0x30>
 800a9be:	a10e      	add	r1, pc, #56	; (adr r1, 800a9f8 <scalbn+0xf8>)
 800a9c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9c4:	e7b4      	b.n	800a930 <scalbn+0x30>
 800a9c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a9ca:	3236      	adds	r2, #54	; 0x36
 800a9cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a9d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	4b0c      	ldr	r3, [pc, #48]	; (800aa08 <scalbn+0x108>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	e7e8      	b.n	800a9ae <scalbn+0xae>
 800a9dc:	f3af 8000 	nop.w
 800a9e0:	c2f8f359 	.word	0xc2f8f359
 800a9e4:	01a56e1f 	.word	0x01a56e1f
 800a9e8:	8800759c 	.word	0x8800759c
 800a9ec:	7e37e43c 	.word	0x7e37e43c
 800a9f0:	8800759c 	.word	0x8800759c
 800a9f4:	fe37e43c 	.word	0xfe37e43c
 800a9f8:	c2f8f359 	.word	0xc2f8f359
 800a9fc:	81a56e1f 	.word	0x81a56e1f
 800aa00:	43500000 	.word	0x43500000
 800aa04:	ffff3cb0 	.word	0xffff3cb0
 800aa08:	3c900000 	.word	0x3c900000

0800aa0c <fabsf>:
 800aa0c:	ee10 3a10 	vmov	r3, s0
 800aa10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa14:	ee00 3a10 	vmov	s0, r3
 800aa18:	4770      	bx	lr
	...

0800aa1c <floorf>:
 800aa1c:	ee10 3a10 	vmov	r3, s0
 800aa20:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aa24:	3a7f      	subs	r2, #127	; 0x7f
 800aa26:	2a16      	cmp	r2, #22
 800aa28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aa2c:	dc2a      	bgt.n	800aa84 <floorf+0x68>
 800aa2e:	2a00      	cmp	r2, #0
 800aa30:	da11      	bge.n	800aa56 <floorf+0x3a>
 800aa32:	eddf 7a18 	vldr	s15, [pc, #96]	; 800aa94 <floorf+0x78>
 800aa36:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aa3a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aa3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa42:	dd05      	ble.n	800aa50 <floorf+0x34>
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	da23      	bge.n	800aa90 <floorf+0x74>
 800aa48:	4a13      	ldr	r2, [pc, #76]	; (800aa98 <floorf+0x7c>)
 800aa4a:	2900      	cmp	r1, #0
 800aa4c:	bf18      	it	ne
 800aa4e:	4613      	movne	r3, r2
 800aa50:	ee00 3a10 	vmov	s0, r3
 800aa54:	4770      	bx	lr
 800aa56:	4911      	ldr	r1, [pc, #68]	; (800aa9c <floorf+0x80>)
 800aa58:	4111      	asrs	r1, r2
 800aa5a:	420b      	tst	r3, r1
 800aa5c:	d0fa      	beq.n	800aa54 <floorf+0x38>
 800aa5e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800aa94 <floorf+0x78>
 800aa62:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aa66:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aa6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa6e:	ddef      	ble.n	800aa50 <floorf+0x34>
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	bfbe      	ittt	lt
 800aa74:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800aa78:	fa40 f202 	asrlt.w	r2, r0, r2
 800aa7c:	189b      	addlt	r3, r3, r2
 800aa7e:	ea23 0301 	bic.w	r3, r3, r1
 800aa82:	e7e5      	b.n	800aa50 <floorf+0x34>
 800aa84:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800aa88:	d3e4      	bcc.n	800aa54 <floorf+0x38>
 800aa8a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800aa8e:	4770      	bx	lr
 800aa90:	2300      	movs	r3, #0
 800aa92:	e7dd      	b.n	800aa50 <floorf+0x34>
 800aa94:	7149f2ca 	.word	0x7149f2ca
 800aa98:	bf800000 	.word	0xbf800000
 800aa9c:	007fffff 	.word	0x007fffff

0800aaa0 <scalbnf>:
 800aaa0:	ee10 3a10 	vmov	r3, s0
 800aaa4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800aaa8:	d025      	beq.n	800aaf6 <scalbnf+0x56>
 800aaaa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800aaae:	d302      	bcc.n	800aab6 <scalbnf+0x16>
 800aab0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800aab4:	4770      	bx	lr
 800aab6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800aaba:	d122      	bne.n	800ab02 <scalbnf+0x62>
 800aabc:	4b2a      	ldr	r3, [pc, #168]	; (800ab68 <scalbnf+0xc8>)
 800aabe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ab6c <scalbnf+0xcc>
 800aac2:	4298      	cmp	r0, r3
 800aac4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800aac8:	db16      	blt.n	800aaf8 <scalbnf+0x58>
 800aaca:	ee10 3a10 	vmov	r3, s0
 800aace:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aad2:	3a19      	subs	r2, #25
 800aad4:	4402      	add	r2, r0
 800aad6:	2afe      	cmp	r2, #254	; 0xfe
 800aad8:	dd15      	ble.n	800ab06 <scalbnf+0x66>
 800aada:	ee10 3a10 	vmov	r3, s0
 800aade:	eddf 7a24 	vldr	s15, [pc, #144]	; 800ab70 <scalbnf+0xd0>
 800aae2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800ab74 <scalbnf+0xd4>
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	eeb0 7a67 	vmov.f32	s14, s15
 800aaec:	bfb8      	it	lt
 800aaee:	eef0 7a66 	vmovlt.f32	s15, s13
 800aaf2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800aaf6:	4770      	bx	lr
 800aaf8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ab78 <scalbnf+0xd8>
 800aafc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ab00:	4770      	bx	lr
 800ab02:	0dd2      	lsrs	r2, r2, #23
 800ab04:	e7e6      	b.n	800aad4 <scalbnf+0x34>
 800ab06:	2a00      	cmp	r2, #0
 800ab08:	dd06      	ble.n	800ab18 <scalbnf+0x78>
 800ab0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab0e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ab12:	ee00 3a10 	vmov	s0, r3
 800ab16:	4770      	bx	lr
 800ab18:	f112 0f16 	cmn.w	r2, #22
 800ab1c:	da1a      	bge.n	800ab54 <scalbnf+0xb4>
 800ab1e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ab22:	4298      	cmp	r0, r3
 800ab24:	ee10 3a10 	vmov	r3, s0
 800ab28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab2c:	dd0a      	ble.n	800ab44 <scalbnf+0xa4>
 800ab2e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ab70 <scalbnf+0xd0>
 800ab32:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ab74 <scalbnf+0xd4>
 800ab36:	eef0 7a40 	vmov.f32	s15, s0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	bf18      	it	ne
 800ab3e:	eeb0 0a47 	vmovne.f32	s0, s14
 800ab42:	e7db      	b.n	800aafc <scalbnf+0x5c>
 800ab44:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800ab78 <scalbnf+0xd8>
 800ab48:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800ab7c <scalbnf+0xdc>
 800ab4c:	eef0 7a40 	vmov.f32	s15, s0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	e7f3      	b.n	800ab3c <scalbnf+0x9c>
 800ab54:	3219      	adds	r2, #25
 800ab56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab5a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ab5e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ab80 <scalbnf+0xe0>
 800ab62:	ee07 3a10 	vmov	s14, r3
 800ab66:	e7c4      	b.n	800aaf2 <scalbnf+0x52>
 800ab68:	ffff3cb0 	.word	0xffff3cb0
 800ab6c:	4c000000 	.word	0x4c000000
 800ab70:	7149f2ca 	.word	0x7149f2ca
 800ab74:	f149f2ca 	.word	0xf149f2ca
 800ab78:	0da24260 	.word	0x0da24260
 800ab7c:	8da24260 	.word	0x8da24260
 800ab80:	33000000 	.word	0x33000000

0800ab84 <_init>:
 800ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab86:	bf00      	nop
 800ab88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab8a:	bc08      	pop	{r3}
 800ab8c:	469e      	mov	lr, r3
 800ab8e:	4770      	bx	lr

0800ab90 <_fini>:
 800ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab92:	bf00      	nop
 800ab94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab96:	bc08      	pop	{r3}
 800ab98:	469e      	mov	lr, r3
 800ab9a:	4770      	bx	lr
