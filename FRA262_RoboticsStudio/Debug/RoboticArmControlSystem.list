
RoboticArmControlSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000921c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080093b8  080093b8  000193b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009408  08009408  000202b8  2**0
                  CONTENTS
  4 .ARM          00000008  08009408  08009408  00019408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009410  08009410  000202b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009410  08009410  00019410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009414  08009414  00019414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  08009418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b6c  200002b8  080096d0  000202b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e24  080096d0  00020e24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121fe  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002256  00000000  00000000  000324e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  00034740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00035608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017834  00000000  00000000  00036418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c7f  00000000  00000000  0004dc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab9a  00000000  00000000  0005e8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9465  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f8  00000000  00000000  000f94b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002b8 	.word	0x200002b8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800939c 	.word	0x0800939c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002bc 	.word	0x200002bc
 80001d4:	0800939c 	.word	0x0800939c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <modbus_1t5_Timeout+0x1c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	751a      	strb	r2, [r3, #20]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	200002d4 	.word	0x200002d4

08000ec4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <modbus_3t5_Timeout+0x1c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	755a      	strb	r2, [r3, #21]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	200002d4 	.word	0x200002d4

08000ee4 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000efe:	1c59      	adds	r1, r3, #1
 8000f00:	b289      	uxth	r1, r1
 8000f02:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000f06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f0a:	d210      	bcs.n	8000f2e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68d8      	ldr	r0, [r3, #12]
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f1e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f22:	4413      	add	r3, r2
 8000f24:	3302      	adds	r3, #2
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f006 f943 	bl	80071b4 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200002d4 	.word	0x200002d4

08000f48 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f52:	4a24      	ldr	r2, [pc, #144]	; (8000fe4 <Modbus_init+0x9c>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <Modbus_init+0x9c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <Modbus_init+0x9c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <Modbus_init+0xa0>)
 8000f68:	2114      	movs	r1, #20
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f005 fad4 	bl	8006518 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <Modbus_init+0x9c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <Modbus_init+0xa4>)
 8000f78:	210e      	movs	r1, #14
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f005 facc 	bl	8006518 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <Modbus_init+0x9c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <Modbus_init+0xa8>)
 8000f88:	2103      	movs	r1, #3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 f86a 	bl	8007064 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <Modbus_init+0x9c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68d8      	ldr	r0, [r3, #12]
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <Modbus_init+0x9c>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <Modbus_init+0x9c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000fa2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	2201      	movs	r2, #1
 8000fac:	4619      	mov	r1, r3
 8000fae:	f006 f901 	bl	80071b4 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <Modbus_init+0x9c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d10c      	bne.n	8000fdc <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <Modbus_init+0x9c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f004 fb59 	bl	8005680 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <Modbus_init+0x9c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 fd8e 	bl	8005af8 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200002d4 	.word	0x200002d4
 8000fe8:	08000ea5 	.word	0x08000ea5
 8000fec:	08000ec5 	.word	0x08000ec5
 8000ff0:	08000ee5 	.word	0x08000ee5

08000ff4 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001000:	23ff      	movs	r3, #255	; 0xff
 8001002:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001004:	23ff      	movs	r3, #255	; 0xff
 8001006:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001008:	e013      	b.n	8001032 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	4053      	eors	r3, r2
 8001016:	b2db      	uxtb	r3, r3
 8001018:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <CRC16+0x64>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4413      	add	r3, r2
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	4053      	eors	r3, r2
 8001026:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001028:	4a0c      	ldr	r2, [pc, #48]	; (800105c <CRC16+0x68>)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001032:	883b      	ldrh	r3, [r7, #0]
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	803a      	strh	r2, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e6      	bne.n	800100a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20000100 	.word	0x20000100
 800105c:	20000000 	.word	0x20000000

08001060 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001066:	4b81      	ldr	r3, [pc, #516]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	7e1b      	ldrb	r3, [r3, #24]
 800106c:	3b01      	subs	r3, #1
 800106e:	2b03      	cmp	r3, #3
 8001070:	d80a      	bhi.n	8001088 <Modbus_Protocal_Worker+0x28>
 8001072:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <Modbus_Protocal_Worker+0x18>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	08001093 	.word	0x08001093
 800107c:	08001233 	.word	0x08001233
 8001080:	0800111f 	.word	0x0800111f
 8001084:	08001145 	.word	0x08001145
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001088:	4b78      	ldr	r3, [pc, #480]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2201      	movs	r2, #1
 800108e:	761a      	strb	r2, [r3, #24]
		break;
 8001090:	e0e8      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001092:	4b76      	ldr	r3, [pc, #472]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800109e:	f000 f9dd 	bl	800145c <Modbus_Emission>
 80010a2:	e01c      	b.n	80010de <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80010a4:	4b71      	ldr	r3, [pc, #452]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	7d9b      	ldrb	r3, [r3, #22]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d017      	beq.n	80010de <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80010ae:	4b6f      	ldr	r3, [pc, #444]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80010b6:	4b6d      	ldr	r3, [pc, #436]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80010be:	4b6b      	ldr	r3, [pc, #428]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b68      	ldr	r3, [pc, #416]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 0201 	orr.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010d6:	4b65      	ldr	r3, [pc, #404]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2203      	movs	r2, #3
 80010dc:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010de:	4b63      	ldr	r3, [pc, #396]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b20      	cmp	r3, #32
 80010ec:	f040 80b3 	bne.w	8001256 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80010f0:	4b5e      	ldr	r3, [pc, #376]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010fa:	4b5c      	ldr	r3, [pc, #368]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68d8      	ldr	r0, [r3, #12]
 8001100:	4b5a      	ldr	r3, [pc, #360]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b59      	ldr	r3, [pc, #356]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800110c:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001110:	4413      	add	r3, r2
 8001112:	3302      	adds	r3, #2
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	f006 f84c 	bl	80071b4 <HAL_UART_Receive_IT>
		}
		break;
 800111c:	e09b      	b.n	8001256 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800111e:	4b53      	ldr	r3, [pc, #332]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	7d1b      	ldrb	r3, [r3, #20]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 8098 	beq.w	800125a <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800112a:	4b50      	ldr	r3, [pc, #320]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001132:	4b4e      	ldr	r3, [pc, #312]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	22fe      	movs	r2, #254	; 0xfe
 8001138:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800113a:	4b4c      	ldr	r3, [pc, #304]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2204      	movs	r2, #4
 8001140:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001142:	e08a      	b.n	800125a <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001144:	4b49      	ldr	r3, [pc, #292]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	7d9b      	ldrb	r3, [r3, #22]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d009      	beq.n	8001162 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d103      	bne.n	8001162 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800115a:	4b44      	ldr	r3, [pc, #272]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	22ff      	movs	r2, #255	; 0xff
 8001160:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001162:	4b42      	ldr	r3, [pc, #264]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800116a:	f113 0f02 	cmn.w	r3, #2
 800116e:	d150      	bne.n	8001212 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001170:	4b3e      	ldr	r3, [pc, #248]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2200      	movs	r2, #0
 8001176:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001178:	4b3c      	ldr	r3, [pc, #240]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001180:	4b3a      	ldr	r3, [pc, #232]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001188:	3b02      	subs	r3, #2
 800118a:	4619      	mov	r1, r3
 800118c:	4610      	mov	r0, r2
 800118e:	f7ff ff31 	bl	8000ff4 <CRC16>
 8001192:	4603      	mov	r3, r0
 8001194:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001196:	793a      	ldrb	r2, [r7, #4]
 8001198:	4b34      	ldr	r3, [pc, #208]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800119a:	6819      	ldr	r1, [r3, #0]
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011a4:	3b02      	subs	r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d10c      	bne.n	80011ca <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80011b0:	797a      	ldrb	r2, [r7, #5]
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011b4:	6819      	ldr	r1, [r3, #0]
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011be:	3b01      	subs	r3, #1
 80011c0:	440b      	add	r3, r1
 80011c2:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d004      	beq.n	80011d4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	22ff      	movs	r2, #255	; 0xff
 80011d0:	75da      	strb	r2, [r3, #23]
				break;
 80011d2:	e047      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d113      	bne.n	800120e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80011f6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001200:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001202:	461a      	mov	r2, r3
 8001204:	f007 f998 	bl	8008538 <memcpy>

			//execute command
			Modbus_frame_response();
 8001208:	f000 f910 	bl	800142c <Modbus_frame_response>
 800120c:	e001      	b.n	8001212 <Modbus_Protocal_Worker+0x1b2>
				break;
 800120e:	bf00      	nop
					}
		break;


	}
}
 8001210:	e028      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	7d5b      	ldrb	r3, [r3, #21]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2201      	movs	r2, #1
 8001222:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	4618      	mov	r0, r3
 800122c:	f006 f870 	bl	8007310 <HAL_UART_AbortReceive>
		break;
 8001230:	e015      	b.n	800125e <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b20      	cmp	r3, #32
 8001240:	d10f      	bne.n	8001262 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	761a      	strb	r2, [r3, #24]
		break;
 8001254:	e005      	b.n	8001262 <Modbus_Protocal_Worker+0x202>
		break;
 8001256:	bf00      	nop
 8001258:	e004      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 800125a:	bf00      	nop
 800125c:	e002      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 800125e:	bf00      	nop
 8001260:	e000      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 8001262:	bf00      	nop
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200002d4 	.word	0x200002d4

08001270 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <modbusWrite1Register+0x80>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	7e9b      	ldrb	r3, [r3, #26]
 800127c:	b29b      	uxth	r3, r3
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <modbusWrite1Register+0x80>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7edb      	ldrb	r3, [r3, #27]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4413      	add	r3, r2
 800128c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800128e:	88fa      	ldrh	r2, [r7, #6]
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <modbusWrite1Register+0x80>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	429a      	cmp	r2, r3
 8001298:	d903      	bls.n	80012a2 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800129a:	2002      	movs	r0, #2
 800129c:	f000 f8a4 	bl	80013e8 <ModbusErrorReply>
			 return;
 80012a0:	e023      	b.n	80012ea <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <modbusWrite1Register+0x80>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <modbusWrite1Register+0x80>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	440b      	add	r3, r1
 80012b2:	7f12      	ldrb	r2, [r2, #28]
 80012b4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <modbusWrite1Register+0x80>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <modbusWrite1Register+0x80>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6859      	ldr	r1, [r3, #4]
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	440b      	add	r3, r1
 80012c6:	7f52      	ldrb	r2, [r2, #29]
 80012c8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <modbusWrite1Register+0x80>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <modbusWrite1Register+0x80>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 80012d8:	2208      	movs	r2, #8
 80012da:	4619      	mov	r1, r3
 80012dc:	f007 f92c 	bl	8008538 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <modbusWrite1Register+0x80>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2205      	movs	r2, #5
 80012e6:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200002d4 	.word	0x200002d4

080012f4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <modbusRead1Register+0xf0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	7f1b      	ldrb	r3, [r3, #28]
 8001300:	b29b      	uxth	r3, r3
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <modbusRead1Register+0xf0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	7f5b      	ldrb	r3, [r3, #29]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <modbusRead1Register+0xf0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	7e9b      	ldrb	r3, [r3, #26]
 8001318:	b29b      	uxth	r3, r3
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <modbusRead1Register+0xf0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	7edb      	ldrb	r3, [r3, #27]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4413      	add	r3, r2
 8001328:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <modbusRead1Register+0x42>
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	2b7d      	cmp	r3, #125	; 0x7d
 8001334:	d903      	bls.n	800133e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001336:	2003      	movs	r0, #3
 8001338:	f000 f856 	bl	80013e8 <ModbusErrorReply>
		 return;
 800133c:	e04e      	b.n	80013dc <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800133e:	88ba      	ldrh	r2, [r7, #4]
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <modbusRead1Register+0xf0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	429a      	cmp	r2, r3
 8001348:	d808      	bhi.n	800135c <modbusRead1Register+0x68>
 800134a:	88ba      	ldrh	r2, [r7, #4]
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	4413      	add	r3, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <modbusRead1Register+0xf0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	429a      	cmp	r2, r3
 800135a:	d903      	bls.n	8001364 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800135c:	2002      	movs	r0, #2
 800135e:	f000 f843 	bl	80013e8 <ModbusErrorReply>
		 return;
 8001362:	e03b      	b.n	80013dc <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <modbusRead1Register+0xf0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2203      	movs	r2, #3
 800136a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <modbusRead1Register+0xf0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	0052      	lsls	r2, r2, #1
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800137e:	2400      	movs	r4, #0
 8001380:	e020      	b.n	80013c4 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <modbusRead1Register+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	4423      	add	r3, r4
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	18d1      	adds	r1, r2, r3
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <modbusRead1Register+0xf0>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	1c63      	adds	r3, r4, #1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	7849      	ldrb	r1, [r1, #1]
 800139a:	4413      	add	r3, r2
 800139c:	460a      	mov	r2, r1
 800139e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <modbusRead1Register+0xf0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	4423      	add	r3, r4
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	18d1      	adds	r1, r2, r3
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <modbusRead1Register+0xf0>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	0063      	lsls	r3, r4, #1
 80013b6:	3303      	adds	r3, #3
 80013b8:	7809      	ldrb	r1, [r1, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	460a      	mov	r2, r1
 80013be:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80013c2:	3401      	adds	r4, #1
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	429c      	cmp	r4, r3
 80013c8:	dbdb      	blt.n	8001382 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <modbusRead1Register+0xf0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0052      	lsls	r2, r2, #1
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200002d4 	.word	0x200002d4

080013e8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <ModbusErrorReply+0x40>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	7e5a      	ldrb	r2, [r3, #25]
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <ModbusErrorReply+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <ModbusErrorReply+0x40>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <ModbusErrorReply+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2202      	movs	r2, #2
 8001416:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	200002d4 	.word	0x200002d4

0800142c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <Modbus_frame_response+0x2c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	7e5b      	ldrb	r3, [r3, #25]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d004      	beq.n	8001444 <Modbus_frame_response+0x18>
 800143a:	2b06      	cmp	r3, #6
 800143c:	d105      	bne.n	800144a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800143e:	f7ff ff17 	bl	8001270 <modbusWrite1Register>
		break;
 8001442:	e006      	b.n	8001452 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001444:	f7ff ff56 	bl	80012f4 <modbusRead1Register>
		break;
 8001448:	e003      	b.n	8001452 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800144a:	2001      	movs	r0, #1
 800144c:	f7ff ffcc 	bl	80013e8 <ModbusErrorReply>
		break;
 8001450:	bf00      	nop

	}
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200002d4 	.word	0x200002d4

0800145c <Modbus_Emission>:

void Modbus_Emission()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <Modbus_Emission+0xfc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b20      	cmp	r3, #32
 8001470:	d15e      	bne.n	8001530 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <Modbus_Emission+0xfc>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <Modbus_Emission+0xfc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001480:	4b35      	ldr	r3, [pc, #212]	; (8001558 <Modbus_Emission+0xfc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001488:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <Modbus_Emission+0xfc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <Modbus_Emission+0xfc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800149a:	461a      	mov	r2, r3
 800149c:	f007 f84c 	bl	8008538 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <Modbus_Emission+0xfc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <Modbus_Emission+0xfc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3203      	adds	r2, #3
 80014b0:	b292      	uxth	r2, r2
 80014b2:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <Modbus_Emission+0xfc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <Modbus_Emission+0xfc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014c6:	3b02      	subs	r3, #2
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f7ff fd92 	bl	8000ff4 <CRC16>
 80014d0:	4603      	mov	r3, r0
 80014d2:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <Modbus_Emission+0xfc>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <Modbus_Emission+0xfc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014e0:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80014e2:	7939      	ldrb	r1, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	460a      	mov	r2, r1
 80014e8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <Modbus_Emission+0xfc>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <Modbus_Emission+0xfc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014f8:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014fa:	7979      	ldrb	r1, [r7, #5]
 80014fc:	4413      	add	r3, r2
 80014fe:	460a      	mov	r2, r1
 8001500:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <Modbus_Emission+0xfc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b20      	cmp	r3, #32
 8001512:	d10d      	bne.n	8001530 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <Modbus_Emission+0xfc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <Modbus_Emission+0xfc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <Modbus_Emission+0xfc>)
 8001524:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001526:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800152a:	461a      	mov	r2, r3
 800152c:	f005 fe72 	bl	8007214 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <Modbus_Emission+0xfc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <Modbus_Emission+0xfc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <Modbus_Emission+0xfc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <Modbus_Emission+0xfc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2202      	movs	r2, #2
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200002d4 	.word	0x200002d4

0800155c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001560:	f001 fff6 	bl	8003550 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001564:	f000 f85e 	bl	8001624 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001568:	f000 fb4c 	bl	8001c04 <MX_GPIO_Init>
	MX_DMA_Init();
 800156c:	f000 fb14 	bl	8001b98 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001570:	f000 fae6 	bl	8001b40 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001574:	f000 f91e 	bl	80017b4 <MX_TIM1_Init>
	MX_TIM5_Init();
 8001578:	f000 fa3a 	bl	80019f0 <MX_TIM5_Init>
	MX_TIM2_Init();
 800157c:	f000 f99e 	bl	80018bc <MX_TIM2_Init>
	MX_ADC1_Init();
 8001580:	f000 f8b8 	bl	80016f4 <MX_ADC1_Init>
	MX_TIM3_Init();
 8001584:	f000 f9e6 	bl	8001954 <MX_TIM3_Init>
	MX_TIM11_Init();
 8001588:	f000 fa86 	bl	8001a98 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800158c:	2104      	movs	r1, #4
 800158e:	481b      	ldr	r0, [pc, #108]	; (80015fc <main+0xa0>)
 8001590:	f004 fbcc 	bl	8005d2c <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start(&htim1);
 8001594:	481a      	ldr	r0, [pc, #104]	; (8001600 <main+0xa4>)
 8001596:	f004 f819 	bl	80055cc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800159a:	2100      	movs	r1, #0
 800159c:	4818      	ldr	r0, [pc, #96]	; (8001600 <main+0xa4>)
 800159e:	f004 f993 	bl	80058c8 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 80015a2:	4818      	ldr	r0, [pc, #96]	; (8001604 <main+0xa8>)
 80015a4:	f004 f86c 	bl	8005680 <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, (uint16_t*) buffer, 20);
 80015a8:	2214      	movs	r2, #20
 80015aa:	4917      	ldr	r1, [pc, #92]	; (8001608 <main+0xac>)
 80015ac:	4817      	ldr	r0, [pc, #92]	; (800160c <main+0xb0>)
 80015ae:	f002 f885 	bl	80036bc <HAL_ADC_Start_DMA>

	hmodbus.huart = &huart2;
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <main+0xb4>)
 80015b4:	4a17      	ldr	r2, [pc, #92]	; (8001614 <main+0xb8>)
 80015b6:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <main+0xb4>)
 80015ba:	4a17      	ldr	r2, [pc, #92]	; (8001618 <main+0xbc>)
 80015bc:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <main+0xb4>)
 80015c0:	2215      	movs	r2, #21
 80015c2:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70; // 70
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <main+0xb4>)
 80015c6:	2246      	movs	r2, #70	; 0x46
 80015c8:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80015ca:	4914      	ldr	r1, [pc, #80]	; (800161c <main+0xc0>)
 80015cc:	4810      	ldr	r0, [pc, #64]	; (8001610 <main+0xb4>)
 80015ce:	f7ff fcbb 	bl	8000f48 <Modbus_init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Modbus_Protocal_Worker();
 80015d2:	f7ff fd45 	bl	8001060 <Modbus_Protocal_Worker>
		static uint32_t timestamp = 0;
		if (HAL_GetTick() >= timestamp) {
 80015d6:	f002 f821 	bl	800361c <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <main+0xc4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3f6      	bcc.n	80015d2 <main+0x76>
			timestamp = HAL_GetTick() + 100;
 80015e4:	f002 f81a 	bl	800361c <HAL_GetTick>
 80015e8:	4603      	mov	r3, r0
 80015ea:	3364      	adds	r3, #100	; 0x64
 80015ec:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <main+0xc4>)
 80015ee:	6013      	str	r3, [r2, #0]
			registerFrame[0].U16 = 22881;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <main+0xc0>)
 80015f2:	f645 1261 	movw	r2, #22881	; 0x5961
 80015f6:	801a      	strh	r2, [r3, #0]
	while (1) {
 80015f8:	e7eb      	b.n	80015d2 <main+0x76>
 80015fa:	bf00      	nop
 80015fc:	2000059c 	.word	0x2000059c
 8001600:	20000380 	.word	0x20000380
 8001604:	20000434 	.word	0x20000434
 8001608:	20000d44 	.word	0x20000d44
 800160c:	200002d8 	.word	0x200002d8
 8001610:	200007d8 	.word	0x200007d8
 8001614:	20000704 	.word	0x20000704
 8001618:	20000650 	.word	0x20000650
 800161c:	20000cb0 	.word	0x20000cb0
 8001620:	20000e1c 	.word	0x20000e1c

08001624 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b094      	sub	sp, #80	; 0x50
 8001628:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800162a:	f107 0320 	add.w	r3, r7, #32
 800162e:	2230      	movs	r2, #48	; 0x30
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f006 ff8e 	bl	8008554 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <SystemClock_Config+0xc8>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a26      	ldr	r2, [pc, #152]	; (80016ec <SystemClock_Config+0xc8>)
 8001652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <SystemClock_Config+0xc8>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <SystemClock_Config+0xcc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a20      	ldr	r2, [pc, #128]	; (80016f0 <SystemClock_Config+0xcc>)
 800166e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <SystemClock_Config+0xcc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001680:	2302      	movs	r3, #2
 8001682:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001684:	2301      	movs	r3, #1
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001688:	2310      	movs	r3, #16
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168c:	2302      	movs	r3, #2
 800168e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001690:	2300      	movs	r3, #0
 8001692:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001694:	2308      	movs	r3, #8
 8001696:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001698:	2364      	movs	r3, #100	; 0x64
 800169a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800169c:	2302      	movs	r3, #2
 800169e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80016a0:	2304      	movs	r3, #4
 80016a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016a4:	f107 0320 	add.w	r3, r7, #32
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 fa9b 	bl	8004be4 <HAL_RCC_OscConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SystemClock_Config+0x94>
		Error_Handler();
 80016b4:	f001 fc72 	bl	8002f9c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016b8:	230f      	movs	r3, #15
 80016ba:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016bc:	2302      	movs	r3, #2
 80016be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	2103      	movs	r1, #3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fcfd 	bl	80050d4 <HAL_RCC_ClockConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0xc0>
		Error_Handler();
 80016e0:	f001 fc5c 	bl	8002f9c <Error_Handler>
	}
}
 80016e4:	bf00      	nop
 80016e6:	3750      	adds	r7, #80	; 0x50
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40007000 	.word	0x40007000

080016f4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80016fa:	463b      	mov	r3, r7
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001706:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001708:	4a28      	ldr	r2, [pc, #160]	; (80017ac <MX_ADC1_Init+0xb8>)
 800170a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800170c:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <MX_ADC1_Init+0xb4>)
 800170e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001712:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001714:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <MX_ADC1_Init+0xb4>)
 800171c:	2201      	movs	r2, #1
 800171e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001722:	2201      	movs	r2, #1
 8001724:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800172e:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001730:	2200      	movs	r2, #0
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001734:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001736:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <MX_ADC1_Init+0xbc>)
 8001738:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <MX_ADC1_Init+0xb4>)
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001742:	2202      	movs	r2, #2
 8001744:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001750:	2201      	movs	r2, #1
 8001752:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001754:	4814      	ldr	r0, [pc, #80]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001756:	f001 ff6d 	bl	8003634 <HAL_ADC_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001760:	f001 fc1c 	bl	8002f9c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8001764:	230d      	movs	r3, #13
 8001766:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001768:	2301      	movs	r3, #1
 800176a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800176c:	2303      	movs	r3, #3
 800176e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001770:	463b      	mov	r3, r7
 8001772:	4619      	mov	r1, r3
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001776:	f002 f8af 	bl	80038d8 <HAL_ADC_ConfigChannel>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001780:	f001 fc0c 	bl	8002f9c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8001784:	230a      	movs	r3, #10
 8001786:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001788:	2302      	movs	r3, #2
 800178a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800178c:	463b      	mov	r3, r7
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001792:	f002 f8a1 	bl	80038d8 <HAL_ADC_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC1_Init+0xac>
		Error_Handler();
 800179c:	f001 fbfe 	bl	8002f9c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200002d8 	.word	0x200002d8
 80017ac:	40012000 	.word	0x40012000
 80017b0:	0f000001 	.word	0x0f000001

080017b4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b092      	sub	sp, #72	; 0x48
 80017b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
 80017d4:	615a      	str	r2, [r3, #20]
 80017d6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2220      	movs	r2, #32
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f006 feb8 	bl	8008554 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80017e4:	4b33      	ldr	r3, [pc, #204]	; (80018b4 <MX_TIM1_Init+0x100>)
 80017e6:	4a34      	ldr	r2, [pc, #208]	; (80018b8 <MX_TIM1_Init+0x104>)
 80017e8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 99;
 80017ea:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <MX_TIM1_Init+0x100>)
 80017ec:	2263      	movs	r2, #99	; 0x63
 80017ee:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f0:	4b30      	ldr	r3, [pc, #192]	; (80018b4 <MX_TIM1_Init+0x100>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 80017f6:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <MX_TIM1_Init+0x100>)
 80017f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017fc:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fe:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <MX_TIM1_Init+0x100>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <MX_TIM1_Init+0x100>)
 8001806:	2200      	movs	r2, #0
 8001808:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180a:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <MX_TIM1_Init+0x100>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001810:	4828      	ldr	r0, [pc, #160]	; (80018b4 <MX_TIM1_Init+0x100>)
 8001812:	f003 fffd 	bl	8005810 <HAL_TIM_PWM_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM1_Init+0x6c>
		Error_Handler();
 800181c:	f001 fbbe 	bl	8002f9c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001828:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800182c:	4619      	mov	r1, r3
 800182e:	4821      	ldr	r0, [pc, #132]	; (80018b4 <MX_TIM1_Init+0x100>)
 8001830:	f005 fae0 	bl	8006df4 <HAL_TIMEx_MasterConfigSynchronization>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800183a:	f001 fbaf 	bl	8002f9c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183e:	2360      	movs	r3, #96	; 0x60
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800184a:	2300      	movs	r3, #0
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	2200      	movs	r2, #0
 8001860:	4619      	mov	r1, r3
 8001862:	4814      	ldr	r0, [pc, #80]	; (80018b4 <MX_TIM1_Init+0x100>)
 8001864:	f004 fc74 	bl	8006150 <HAL_TIM_PWM_ConfigChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 800186e:	f001 fb95 	bl	8002f9c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001886:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800188a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <MX_TIM1_Init+0x100>)
 8001896:	f005 fb1b 	bl	8006ed0 <HAL_TIMEx_ConfigBreakDeadTime>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 80018a0:	f001 fb7c 	bl	8002f9c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <MX_TIM1_Init+0x100>)
 80018a6:	f001 fcf1 	bl	800328c <HAL_TIM_MspPostInit>

}
 80018aa:	bf00      	nop
 80018ac:	3748      	adds	r7, #72	; 0x48
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000380 	.word	0x20000380
 80018b8:	40010000 	.word	0x40010000

080018bc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80018d0:	463b      	mov	r3, r7
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <MX_TIM2_Init+0x94>)
 80018da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018de:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9999;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <MX_TIM2_Init+0x94>)
 80018e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80018e6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <MX_TIM2_Init+0x94>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <MX_TIM2_Init+0x94>)
 80018f0:	2209      	movs	r2, #9
 80018f2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <MX_TIM2_Init+0x94>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <MX_TIM2_Init+0x94>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001900:	4813      	ldr	r0, [pc, #76]	; (8001950 <MX_TIM2_Init+0x94>)
 8001902:	f003 fe07 	bl	8005514 <HAL_TIM_Base_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM2_Init+0x54>
		Error_Handler();
 800190c:	f001 fb46 	bl	8002f9c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001914:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	4619      	mov	r1, r3
 800191c:	480c      	ldr	r0, [pc, #48]	; (8001950 <MX_TIM2_Init+0x94>)
 800191e:	f004 fcd9 	bl	80062d4 <HAL_TIM_ConfigClockSource>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM2_Init+0x70>
		Error_Handler();
 8001928:	f001 fb38 	bl	8002f9c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001934:	463b      	mov	r3, r7
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_TIM2_Init+0x94>)
 800193a:	f005 fa5b 	bl	8006df4 <HAL_TIMEx_MasterConfigSynchronization>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001944:	f001 fb2a 	bl	8002f9c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000434 	.word	0x20000434

08001954 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001968:	463b      	mov	r3, r7
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001972:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <MX_TIM3_Init+0x98>)
 8001974:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <MX_TIM3_Init+0x94>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001988:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <MX_TIM3_Init+0x94>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001996:	4814      	ldr	r0, [pc, #80]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001998:	f003 fdbc 	bl	8005514 <HAL_TIM_Base_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM3_Init+0x52>
		Error_Handler();
 80019a2:	f001 fafb 	bl	8002f9c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019aa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	4619      	mov	r1, r3
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <MX_TIM3_Init+0x94>)
 80019b4:	f004 fc8e 	bl	80062d4 <HAL_TIM_ConfigClockSource>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM3_Init+0x6e>
		Error_Handler();
 80019be:	f001 faed 	bl	8002f9c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80019ca:	463b      	mov	r3, r7
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	; (80019e8 <MX_TIM3_Init+0x94>)
 80019d0:	f005 fa10 	bl	8006df4 <HAL_TIMEx_MasterConfigSynchronization>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80019da:	f001 fadf 	bl	8002f9c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200004e8 	.word	0x200004e8
 80019ec:	40000400 	.word	0x40000400

080019f0 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	; 0x30
 80019f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	2224      	movs	r2, #36	; 0x24
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f006 fda8 	bl	8008554 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <MX_TIM5_Init+0xa0>)
 8001a0e:	4a21      	ldr	r2, [pc, #132]	; (8001a94 <MX_TIM5_Init+0xa4>)
 8001a10:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <MX_TIM5_Init+0xa0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <MX_TIM5_Init+0xa0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <MX_TIM5_Init+0xa0>)
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <MX_TIM5_Init+0xa0>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2c:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <MX_TIM5_Init+0xa0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a32:	2303      	movs	r3, #3
 8001a34:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <MX_TIM5_Init+0xa0>)
 8001a5e:	f004 f8b1 	bl	8005bc4 <HAL_TIM_Encoder_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM5_Init+0x7c>
		Error_Handler();
 8001a68:	f001 fa98 	bl	8002f9c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_TIM5_Init+0xa0>)
 8001a7a:	f005 f9bb 	bl	8006df4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM5_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001a84:	f001 fa8a 	bl	8002f9c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	3730      	adds	r7, #48	; 0x30
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	2000059c 	.word	0x2000059c
 8001a94:	40000c00 	.word	0x40000c00

08001a98 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
 8001aac:	615a      	str	r2, [r3, #20]
 8001aae:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001ab2:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <MX_TIM11_Init+0xa4>)
 8001ab4:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 99;
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001ab8:	2263      	movs	r2, #99	; 0x63
 8001aba:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 2005;
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001ac4:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8001ac8:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8001ad6:	4818      	ldr	r0, [pc, #96]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001ad8:	f003 fd1c 	bl	8005514 <HAL_TIM_Base_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM11_Init+0x4e>
		Error_Handler();
 8001ae2:	f001 fa5b 	bl	8002f9c <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim11) != HAL_OK) {
 8001ae6:	4814      	ldr	r0, [pc, #80]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001ae8:	f003 fe2c 	bl	8005744 <HAL_TIM_OC_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM11_Init+0x5e>
		Error_Handler();
 8001af2:	f001 fa53 	bl	8002f9c <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK) {
 8001af6:	2108      	movs	r1, #8
 8001af8:	480f      	ldr	r0, [pc, #60]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001afa:	f003 ff95 	bl	8005a28 <HAL_TIM_OnePulse_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM11_Init+0x70>
		Error_Handler();
 8001b04:	f001 fa4a 	bl	8002f9c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001b08:	2310      	movs	r3, #16
 8001b0a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 1433;
 8001b0c:	f240 5399 	movw	r3, #1433	; 0x599
 8001b10:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001b22:	f004 fab9 	bl	8006098 <HAL_TIM_OC_ConfigChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM11_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001b2c:	f001 fa36 	bl	8002f9c <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000650 	.word	0x20000650
 8001b3c:	40014800 	.word	0x40014800

08001b40 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b46:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <MX_USART2_UART_Init+0x54>)
 8001b48:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b4c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001b50:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b58:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b66:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b7c:	f005 fa18 	bl	8006fb0 <HAL_UART_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_USART2_UART_Init+0x4a>
		Error_Handler();
 8001b86:	f001 fa09 	bl	8002f9c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000704 	.word	0x20000704
 8001b94:	40004400 	.word	0x40004400

08001b98 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_DMA_Init+0x68>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a16      	ldr	r2, [pc, #88]	; (8001c00 <MX_DMA_Init+0x68>)
 8001ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_DMA_Init+0x68>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <MX_DMA_Init+0x68>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <MX_DMA_Init+0x68>)
 8001bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <MX_DMA_Init+0x68>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2011      	movs	r0, #17
 8001bdc:	f002 fa07 	bl	8003fee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001be0:	2011      	movs	r0, #17
 8001be2:	f002 fa20 	bl	8004026 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	2038      	movs	r0, #56	; 0x38
 8001bec:	f002 f9ff 	bl	8003fee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001bf0:	2038      	movs	r0, #56	; 0x38
 8001bf2:	f002 fa18 	bl	8004026 <HAL_NVIC_EnableIRQ>

}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800

08001c04 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4b52      	ldr	r3, [pc, #328]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a51      	ldr	r2, [pc, #324]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b4f      	ldr	r3, [pc, #316]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b4b      	ldr	r3, [pc, #300]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a4a      	ldr	r2, [pc, #296]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	4b44      	ldr	r3, [pc, #272]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a43      	ldr	r2, [pc, #268]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a3c      	ldr	r2, [pc, #240]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2120      	movs	r1, #32
 8001c8e:	4837      	ldr	r0, [pc, #220]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001c90:	f002 ff8e 	bl	8004bb0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_11 | GPIO_PIN_12,
 8001c94:	2200      	movs	r2, #0
 8001c96:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8001c9a:	4835      	ldr	r0, [pc, #212]	; (8001d70 <MX_GPIO_Init+0x16c>)
 8001c9c:	f002 ff88 	bl	8004bb0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ca6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001caa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	482e      	ldr	r0, [pc, #184]	; (8001d70 <MX_GPIO_Init+0x16c>)
 8001cb8:	f002 fdde 	bl	8004878 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC2 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_10;
 8001cbc:	f240 4304 	movw	r3, #1028	; 0x404
 8001cc0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4827      	ldr	r0, [pc, #156]	; (8001d70 <MX_GPIO_Init+0x16c>)
 8001cd2:	f002 fdd1 	bl	8004878 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4820      	ldr	r0, [pc, #128]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001cea:	f002 fdc5 	bl	8004878 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001cee:	2320      	movs	r3, #32
 8001cf0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	4819      	ldr	r0, [pc, #100]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001d06:	f002 fdb7 	bl	8004878 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB14 PB5 PB7
	 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_14 | GPIO_PIN_5 | GPIO_PIN_7
 8001d0a:	f244 23a1 	movw	r3, #17057	; 0x42a1
 8001d0e:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4815      	ldr	r0, [pc, #84]	; (8001d74 <MX_GPIO_Init+0x170>)
 8001d20:	f002 fdaa 	bl	8004878 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d24:	2340      	movs	r3, #64	; 0x40
 8001d26:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480d      	ldr	r0, [pc, #52]	; (8001d70 <MX_GPIO_Init+0x16c>)
 8001d3c:	f002 fd9c 	bl	8004878 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC11 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8001d40:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d44:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d46:	2311      	movs	r3, #17
 8001d48:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_GPIO_Init+0x16c>)
 8001d5a:	f002 fd8d 	bl	8004878 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020400 	.word	0x40020400

08001d78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a28      	ldr	r2, [pc, #160]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d148      	bne.n	8001e1a <HAL_TIM_PeriodElapsedCallback+0xa2>
		photoDetect();
 8001d88:	f000 fa90 	bl	80022ac <photoDetect>
		robotArmState(registerFrame[1].U16);
 8001d8c:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001d8e:	885b      	ldrh	r3, [r3, #2]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f001 f805 	bl	8002da0 <robotArmState>
		readEncoder();
 8001d96:	f000 f87f 	bl	8001e98 <readEncoder>

		if (photoSig[0] || photoSig[2]) // Motor Photo Sensor
 8001d9a:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d103      	bne.n	8001daa <HAL_TIM_PeriodElapsedCallback+0x32>
 8001da2:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001da4:	789b      	ldrb	r3, [r3, #2]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x3e>
				{
			duty = 0;
 8001daa:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
			setMotor();
 8001db2:	f000 f84b 	bl	8001e4c <setMotor>
		}
		setMotor();
 8001db6:	f000 f849 	bl	8001e4c <setMotor>



		if (startSetHome) {
 8001dba:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_TIM_PeriodElapsedCallback+0x4e>
			setHome();
 8001dc2:	f000 f885 	bl	8001ed0 <setHome>
		}


		if (startPointModeY)
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d01f      	beq.n	8001e0e <HAL_TIM_PeriodElapsedCallback+0x96>
		{
			targetPos = registerFrame[49].U16;
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001dd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001dd4:	b21a      	sxth	r2, r3
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001dd8:	801a      	strh	r2, [r3, #0]
			onlyPositionControl(initPosY, targetPos/ 10);
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dec:	4a15      	ldr	r2, [pc, #84]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001dee:	fb82 1203 	smull	r1, r2, r2, r3
 8001df2:	1092      	asrs	r2, r2, #2
 8001df4:	17db      	asrs	r3, r3, #31
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	b21b      	sxth	r3, r3
 8001dfa:	ee07 3a10 	vmov	s14, r3
 8001dfe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e02:	eef0 0a47 	vmov.f32	s1, s14
 8001e06:	eeb0 0a67 	vmov.f32	s0, s15
 8001e0a:	f000 f8c9 	bl	8001fa0 <onlyPositionControl>

		if (startTraj) {
			//onlyPositionControl();
		}

		if (startCascadeControl) {
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_TIM_PeriodElapsedCallback+0xa2>
			cascadePIDControl();
 8001e16:	f000 f8bb 	bl	8001f90 <cascadePIDControl>
		}

	}
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000434 	.word	0x20000434
 8001e28:	20000cb0 	.word	0x20000cb0
 8001e2c:	20000d88 	.word	0x20000d88
 8001e30:	20000d70 	.word	0x20000d70
 8001e34:	20000244 	.word	0x20000244
 8001e38:	20000e13 	.word	0x20000e13
 8001e3c:	20000e18 	.word	0x20000e18
 8001e40:	20000e14 	.word	0x20000e14
 8001e44:	66666667 	.word	0x66666667
 8001e48:	20000e12 	.word	0x20000e12

08001e4c <setMotor>:

void setMotor() {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
	if (dirAxisY) {
 8001e50:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <setMotor+0x3c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <setMotor+0x18>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2140      	movs	r1, #64	; 0x40
 8001e5c:	480b      	ldr	r0, [pc, #44]	; (8001e8c <setMotor+0x40>)
 8001e5e:	f002 fea7 	bl	8004bb0 <HAL_GPIO_WritePin>
 8001e62:	e004      	b.n	8001e6e <setMotor+0x22>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e64:	2200      	movs	r2, #0
 8001e66:	2140      	movs	r1, #64	; 0x40
 8001e68:	4808      	ldr	r0, [pc, #32]	; (8001e8c <setMotor+0x40>)
 8001e6a:	f002 fea1 	bl	8004bb0 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <setMotor+0x44>)
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <setMotor+0x48>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e7c:	ee17 2a90 	vmov	r2, s15
 8001e80:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000229 	.word	0x20000229
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	20000d70 	.word	0x20000d70
 8001e94:	20000380 	.word	0x20000380

08001e98 <readEncoder>:

void readEncoder() {
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <readEncoder+0x28>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <readEncoder+0x2c>)
 8001ea6:	601a      	str	r2, [r3, #0]
	QEIReadModified = QEIReadRaw - QEIHome;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <readEncoder+0x2c>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <readEncoder+0x30>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <readEncoder+0x34>)
 8001eb4:	6013      	str	r3, [r2, #0]
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	2000059c 	.word	0x2000059c
 8001ec4:	20000d74 	.word	0x20000d74
 8001ec8:	20000d7c 	.word	0x20000d7c
 8001ecc:	20000d78 	.word	0x20000d78

08001ed0 <setHome>:

void setHome() {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0

	switch (myHomeState) {
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <setHome+0x9c>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d02f      	beq.n	8001f3c <setHome+0x6c>
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	dc42      	bgt.n	8001f66 <setHome+0x96>
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <setHome+0x1a>
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d014      	beq.n	8001f12 <setHome+0x42>
		registerFrame[16].U16 = 0;
		break;

	}

}
 8001ee8:	e03d      	b.n	8001f66 <setHome+0x96>
		if (photoSig[0]) // Motor Photo Sensor
 8001eea:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <setHome+0xa0>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <setHome+0x2a>
			myHomeState = 1;
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <setHome+0x9c>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
		break;
 8001ef8:	e035      	b.n	8001f66 <setHome+0x96>
			dirAxisY = 0;
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <setHome+0xa4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
			duty = 220;
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <setHome+0xa8>)
 8001f02:	4a1e      	ldr	r2, [pc, #120]	; (8001f7c <setHome+0xac>)
 8001f04:	601a      	str	r2, [r3, #0]
			setMotor();
 8001f06:	f7ff ffa1 	bl	8001e4c <setMotor>
			myHomeState = 1;
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <setHome+0x9c>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
		break;
 8001f10:	e029      	b.n	8001f66 <setHome+0x96>
		if (photoSig[0]) // Motor Photo Sensor
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <setHome+0xa0>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d008      	beq.n	8001f2c <setHome+0x5c>
			dirAxisY = 1;
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <setHome+0xa4>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
			duty = 220;
 8001f20:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <setHome+0xa8>)
 8001f22:	4a16      	ldr	r2, [pc, #88]	; (8001f7c <setHome+0xac>)
 8001f24:	601a      	str	r2, [r3, #0]
			setMotor();
 8001f26:	f7ff ff91 	bl	8001e4c <setMotor>
		break;
 8001f2a:	e01b      	b.n	8001f64 <setHome+0x94>
		} else if (photoSig[1]) // Center Photo Sensor
 8001f2c:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <setHome+0xa0>)
 8001f2e:	785b      	ldrb	r3, [r3, #1]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d017      	beq.n	8001f64 <setHome+0x94>
			myHomeState = 2;
 8001f34:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <setHome+0x9c>)
 8001f36:	2202      	movs	r2, #2
 8001f38:	701a      	strb	r2, [r3, #0]
		break;
 8001f3a:	e013      	b.n	8001f64 <setHome+0x94>
		duty = 0;
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <setHome+0xa8>)
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
		setMotor();
 8001f44:	f7ff ff82 	bl	8001e4c <setMotor>
		QEIHome = QEIReadRaw;
 8001f48:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <setHome+0xb0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	; (8001f84 <setHome+0xb4>)
 8001f4e:	6013      	str	r3, [r2, #0]
		startSetHome = 0;
 8001f50:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <setHome+0xb8>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
		myHomeState = 0;
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <setHome+0x9c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
		registerFrame[16].U16 = 0;
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <setHome+0xbc>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	841a      	strh	r2, [r3, #32]
		break;
 8001f62:	e000      	b.n	8001f66 <setHome+0x96>
		break;
 8001f64:	bf00      	nop
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000e10 	.word	0x20000e10
 8001f70:	20000d88 	.word	0x20000d88
 8001f74:	20000229 	.word	0x20000229
 8001f78:	20000d70 	.word	0x20000d70
 8001f7c:	435c0000 	.word	0x435c0000
 8001f80:	20000d74 	.word	0x20000d74
 8001f84:	20000d7c 	.word	0x20000d7c
 8001f88:	20000244 	.word	0x20000244
 8001f8c:	20000cb0 	.word	0x20000cb0

08001f90 <cascadePIDControl>:

void cascadePIDControl() {
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
	// calculationTraj result = trapezoidalTraj();
	// velocityLoop(result.velTraj, positionLoop(result.posTraj));
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <onlyPositionControl>:
	}
	prePos = mmActPos;
	setMotor();
}

void onlyPositionControl(float initPos, float targetPos) {
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001faa:	edc7 0a00 	vstr	s1, [r7]
	calculationTraj result = trapezoidalTraj(initPos, targetPos);
 8001fae:	f107 0308 	add.w	r3, r7, #8
 8001fb2:	edd7 0a00 	vldr	s1, [r7]
 8001fb6:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f998 	bl	80022f0 <trapezoidalTraj>
	mmActPos = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 8001fc0:	4b67      	ldr	r3, [pc, #412]	; (8002160 <onlyPositionControl+0x1c0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fa59 	bl	800047c <__aeabi_i2d>
 8001fca:	a361      	add	r3, pc, #388	; (adr r3, 8002150 <onlyPositionControl+0x1b0>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe fabe 	bl	8000550 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f7fe fd90 	bl	8000b00 <__aeabi_d2f>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a60      	ldr	r2, [pc, #384]	; (8002164 <onlyPositionControl+0x1c4>)
 8001fe4:	6013      	str	r3, [r2, #0]
	mmActVel = (mmActPos - prePos) / 0.001;
 8001fe6:	4b5f      	ldr	r3, [pc, #380]	; (8002164 <onlyPositionControl+0x1c4>)
 8001fe8:	ed93 7a00 	vldr	s14, [r3]
 8001fec:	4b5e      	ldr	r3, [pc, #376]	; (8002168 <onlyPositionControl+0x1c8>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ff6:	ee17 0a90 	vmov	r0, s15
 8001ffa:	f7fe fa51 	bl	80004a0 <__aeabi_f2d>
 8001ffe:	a356      	add	r3, pc, #344	; (adr r3, 8002158 <onlyPositionControl+0x1b8>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe fbce 	bl	80007a4 <__aeabi_ddiv>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fd76 	bl	8000b00 <__aeabi_d2f>
 8002014:	4603      	mov	r3, r0
 8002016:	4a55      	ldr	r2, [pc, #340]	; (800216c <onlyPositionControl+0x1cc>)
 8002018:	6013      	str	r3, [r2, #0]
	mmActAcc = (mmActVel - preVel) / 0.001;
 800201a:	4b54      	ldr	r3, [pc, #336]	; (800216c <onlyPositionControl+0x1cc>)
 800201c:	ed93 7a00 	vldr	s14, [r3]
 8002020:	4b53      	ldr	r3, [pc, #332]	; (8002170 <onlyPositionControl+0x1d0>)
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800202a:	ee17 0a90 	vmov	r0, s15
 800202e:	f7fe fa37 	bl	80004a0 <__aeabi_f2d>
 8002032:	a349      	add	r3, pc, #292	; (adr r3, 8002158 <onlyPositionControl+0x1b8>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	f7fe fbb4 	bl	80007a4 <__aeabi_ddiv>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7fe fd5c 	bl	8000b00 <__aeabi_d2f>
 8002048:	4603      	mov	r3, r0
 800204a:	4a4a      	ldr	r2, [pc, #296]	; (8002174 <onlyPositionControl+0x1d4>)
 800204c:	6013      	str	r3, [r2, #0]

	//mmActPos = kalmanFilter(mmActPos);
	//mmActVel = kalmanFilter(mmActVel);

	mmError = result.posTraj - mmActPos;
 800204e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002052:	4b44      	ldr	r3, [pc, #272]	; (8002164 <onlyPositionControl+0x1c4>)
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800205c:	4b46      	ldr	r3, [pc, #280]	; (8002178 <onlyPositionControl+0x1d8>)
 800205e:	edc3 7a00 	vstr	s15, [r3]
	positionPID.eIntegral = positionPID.eIntegral + (mmError * 0.001);
 8002062:	4b46      	ldr	r3, [pc, #280]	; (800217c <onlyPositionControl+0x1dc>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fa1a 	bl	80004a0 <__aeabi_f2d>
 800206c:	4604      	mov	r4, r0
 800206e:	460d      	mov	r5, r1
 8002070:	4b41      	ldr	r3, [pc, #260]	; (8002178 <onlyPositionControl+0x1d8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fa13 	bl	80004a0 <__aeabi_f2d>
 800207a:	a337      	add	r3, pc, #220	; (adr r3, 8002158 <onlyPositionControl+0x1b8>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	f7fe fa66 	bl	8000550 <__aeabi_dmul>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4620      	mov	r0, r4
 800208a:	4629      	mov	r1, r5
 800208c:	f7fe f8aa 	bl	80001e4 <__adddf3>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f7fe fd32 	bl	8000b00 <__aeabi_d2f>
 800209c:	4603      	mov	r3, r0
 800209e:	4a37      	ldr	r2, [pc, #220]	; (800217c <onlyPositionControl+0x1dc>)
 80020a0:	60d3      	str	r3, [r2, #12]
	duty = (positionPID.pTerm * mmError)
 80020a2:	4b36      	ldr	r3, [pc, #216]	; (800217c <onlyPositionControl+0x1dc>)
 80020a4:	ed93 7a00 	vldr	s14, [r3]
 80020a8:	4b33      	ldr	r3, [pc, #204]	; (8002178 <onlyPositionControl+0x1d8>)
 80020aa:	edd3 7a00 	vldr	s15, [r3]
 80020ae:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (positionPID.iTerm * positionPID.eIntegral);
 80020b2:	4b32      	ldr	r3, [pc, #200]	; (800217c <onlyPositionControl+0x1dc>)
 80020b4:	edd3 6a01 	vldr	s13, [r3, #4]
 80020b8:	4b30      	ldr	r3, [pc, #192]	; (800217c <onlyPositionControl+0x1dc>)
 80020ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80020be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c2:	ee77 7a27 	vadd.f32	s15, s14, s15
	duty = (positionPID.pTerm * mmError)
 80020c6:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <onlyPositionControl+0x1e0>)
 80020c8:	edc3 7a00 	vstr	s15, [r3]
	if (duty < 0) {
 80020cc:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <onlyPositionControl+0x1e0>)
 80020ce:	edd3 7a00 	vldr	s15, [r3]
 80020d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	d50b      	bpl.n	80020f4 <onlyPositionControl+0x154>
		dirAxisY = 0;
 80020dc:	4b29      	ldr	r3, [pc, #164]	; (8002184 <onlyPositionControl+0x1e4>)
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
		duty = (-1) * duty;
 80020e2:	4b27      	ldr	r3, [pc, #156]	; (8002180 <onlyPositionControl+0x1e0>)
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	eef1 7a67 	vneg.f32	s15, s15
 80020ec:	4b24      	ldr	r3, [pc, #144]	; (8002180 <onlyPositionControl+0x1e0>)
 80020ee:	edc3 7a00 	vstr	s15, [r3]
 80020f2:	e002      	b.n	80020fa <onlyPositionControl+0x15a>
	} else {
		dirAxisY = 1;
 80020f4:	4b23      	ldr	r3, [pc, #140]	; (8002184 <onlyPositionControl+0x1e4>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
	}
	if (duty > 1000) {
 80020fa:	4b21      	ldr	r3, [pc, #132]	; (8002180 <onlyPositionControl+0x1e0>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002188 <onlyPositionControl+0x1e8>
 8002104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210c:	dd03      	ble.n	8002116 <onlyPositionControl+0x176>
		duty = 1000;
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <onlyPositionControl+0x1e0>)
 8002110:	4a1e      	ldr	r2, [pc, #120]	; (800218c <onlyPositionControl+0x1ec>)
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	e00d      	b.n	8002132 <onlyPositionControl+0x192>
	} else if (duty <= 120) {
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <onlyPositionControl+0x1e0>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002190 <onlyPositionControl+0x1f0>
 8002120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002128:	d803      	bhi.n	8002132 <onlyPositionControl+0x192>
		duty = 0;
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <onlyPositionControl+0x1e0>)
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
	}
	prePos = mmActPos;
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <onlyPositionControl+0x1c4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a0c      	ldr	r2, [pc, #48]	; (8002168 <onlyPositionControl+0x1c8>)
 8002138:	6013      	str	r3, [r2, #0]
	preVel = mmActVel;
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <onlyPositionControl+0x1cc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a0c      	ldr	r2, [pc, #48]	; (8002170 <onlyPositionControl+0x1d0>)
 8002140:	6013      	str	r3, [r2, #0]
	setMotor();
 8002142:	f7ff fe83 	bl	8001e4c <setMotor>
}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bdb0      	pop	{r4, r5, r7, pc}
 800214e:	bf00      	nop
 8002150:	464f6faa 	.word	0x464f6faa
 8002154:	3f8199cb 	.word	0x3f8199cb
 8002158:	d2f1a9fc 	.word	0xd2f1a9fc
 800215c:	3f50624d 	.word	0x3f50624d
 8002160:	20000d78 	.word	0x20000d78
 8002164:	20000d80 	.word	0x20000d80
 8002168:	20000e08 	.word	0x20000e08
 800216c:	20000e00 	.word	0x20000e00
 8002170:	20000e0c 	.word	0x20000e0c
 8002174:	20000e04 	.word	0x20000e04
 8002178:	20000d84 	.word	0x20000d84
 800217c:	2000022c 	.word	0x2000022c
 8002180:	20000d70 	.word	0x20000d70
 8002184:	20000229 	.word	0x20000229
 8002188:	447a0000 	.word	0x447a0000
 800218c:	447a0000 	.word	0x447a0000
 8002190:	42f00000 	.word	0x42f00000

08002194 <jogAxisY>:
	} else {
		duty = 0;
	}
}

void jogAxisY() {
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
	refYPos = buffer[0].subdata.yAxis;
 8002198:	4b3a      	ldr	r3, [pc, #232]	; (8002284 <jogAxisY+0xf0>)
 800219a:	885b      	ldrh	r3, [r3, #2]
 800219c:	ee07 3a90 	vmov	s15, r3
 80021a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021a4:	4b38      	ldr	r3, [pc, #224]	; (8002288 <jogAxisY+0xf4>)
 80021a6:	edc3 7a00 	vstr	s15, [r3]
	if (refYPos > 2500) {
 80021aa:	4b37      	ldr	r3, [pc, #220]	; (8002288 <jogAxisY+0xf4>)
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800228c <jogAxisY+0xf8>
 80021b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021bc:	dd03      	ble.n	80021c6 <jogAxisY+0x32>
		dirAxisY = 1;
 80021be:	4b34      	ldr	r3, [pc, #208]	; (8002290 <jogAxisY+0xfc>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	e00c      	b.n	80021e0 <jogAxisY+0x4c>
	} else if (refYPos < 1500) {
 80021c6:	4b30      	ldr	r3, [pc, #192]	; (8002288 <jogAxisY+0xf4>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002294 <jogAxisY+0x100>
 80021d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d8:	d502      	bpl.n	80021e0 <jogAxisY+0x4c>
		dirAxisY = 0;
 80021da:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <jogAxisY+0xfc>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
	}
	if (refYPos > 3600 || refYPos < 100) {
 80021e0:	4b29      	ldr	r3, [pc, #164]	; (8002288 <jogAxisY+0xf4>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002298 <jogAxisY+0x104>
 80021ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f2:	dc09      	bgt.n	8002208 <jogAxisY+0x74>
 80021f4:	4b24      	ldr	r3, [pc, #144]	; (8002288 <jogAxisY+0xf4>)
 80021f6:	edd3 7a00 	vldr	s15, [r3]
 80021fa:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800229c <jogAxisY+0x108>
 80021fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002206:	d503      	bpl.n	8002210 <jogAxisY+0x7c>
		duty = 250;
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <jogAxisY+0x10c>)
 800220a:	4a26      	ldr	r2, [pc, #152]	; (80022a4 <jogAxisY+0x110>)
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	e034      	b.n	800227a <jogAxisY+0xe6>
	} else if (refYPos > 2500 && refYPos <= 3600) {
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <jogAxisY+0xf4>)
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800228c <jogAxisY+0xf8>
 800221a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800221e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002222:	dd0d      	ble.n	8002240 <jogAxisY+0xac>
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <jogAxisY+0xf4>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002298 <jogAxisY+0x104>
 800222e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002236:	d803      	bhi.n	8002240 <jogAxisY+0xac>
		duty = 200;
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <jogAxisY+0x10c>)
 800223a:	4a1b      	ldr	r2, [pc, #108]	; (80022a8 <jogAxisY+0x114>)
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e01c      	b.n	800227a <jogAxisY+0xe6>
	}

	else if (refYPos > 100 && refYPos <= 1500) {
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <jogAxisY+0xf4>)
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800229c <jogAxisY+0x108>
 800224a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002252:	dd0d      	ble.n	8002270 <jogAxisY+0xdc>
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <jogAxisY+0xf4>)
 8002256:	edd3 7a00 	vldr	s15, [r3]
 800225a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002294 <jogAxisY+0x100>
 800225e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002266:	d803      	bhi.n	8002270 <jogAxisY+0xdc>
		duty = 200;
 8002268:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <jogAxisY+0x10c>)
 800226a:	4a0f      	ldr	r2, [pc, #60]	; (80022a8 <jogAxisY+0x114>)
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	e004      	b.n	800227a <jogAxisY+0xe6>
	} else {
		duty = 0;
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <jogAxisY+0x10c>)
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
	}
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	20000d44 	.word	0x20000d44
 8002288:	20000224 	.word	0x20000224
 800228c:	451c4000 	.word	0x451c4000
 8002290:	20000229 	.word	0x20000229
 8002294:	44bb8000 	.word	0x44bb8000
 8002298:	45610000 	.word	0x45610000
 800229c:	42c80000 	.word	0x42c80000
 80022a0:	20000d70 	.word	0x20000d70
 80022a4:	437a0000 	.word	0x437a0000
 80022a8:	43480000 	.word	0x43480000

080022ac <photoDetect>:

void photoDetect() {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	photoSig[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);  // Motor Photo Sensor
 80022b0:	2120      	movs	r1, #32
 80022b2:	480d      	ldr	r0, [pc, #52]	; (80022e8 <photoDetect+0x3c>)
 80022b4:	f002 fc64 	bl	8004b80 <HAL_GPIO_ReadPin>
 80022b8:	4603      	mov	r3, r0
 80022ba:	461a      	mov	r2, r3
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <photoDetect+0x40>)
 80022be:	701a      	strb	r2, [r3, #0]
	photoSig[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // CENTER Photo Sensor
 80022c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022c4:	4808      	ldr	r0, [pc, #32]	; (80022e8 <photoDetect+0x3c>)
 80022c6:	f002 fc5b 	bl	8004b80 <HAL_GPIO_ReadPin>
 80022ca:	4603      	mov	r3, r0
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <photoDetect+0x40>)
 80022d0:	705a      	strb	r2, [r3, #1]
	photoSig[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);  // Encoder Photo Sensor
 80022d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022d6:	4804      	ldr	r0, [pc, #16]	; (80022e8 <photoDetect+0x3c>)
 80022d8:	f002 fc52 	bl	8004b80 <HAL_GPIO_ReadPin>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	4b02      	ldr	r3, [pc, #8]	; (80022ec <photoDetect+0x40>)
 80022e2:	709a      	strb	r2, [r3, #2]
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40020400 	.word	0x40020400
 80022ec:	20000d88 	.word	0x20000d88

080022f0 <trapezoidalTraj>:

calculationTraj trapezoidalTraj(float qi, float qf) {
 80022f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022f4:	b094      	sub	sp, #80	; 0x50
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80022fe:	edc7 0a01 	vstr	s1, [r7, #4]
	calculationTraj result;

	float diffPos = abs(qf - qi);
 8002302:	ed97 7a01 	vldr	s14, [r7, #4]
 8002306:	edd7 7a02 	vldr	s15, [r7, #8]
 800230a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800230e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002312:	ee17 3a90 	vmov	r3, s15
 8002316:	2b00      	cmp	r3, #0
 8002318:	bfb8      	it	lt
 800231a:	425b      	neglt	r3, r3
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002324:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	int8_t handleMinus = (qf - qi) / diffPos;
 8002328:	ed97 7a01 	vldr	s14, [r7, #4]
 800232c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002330:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002334:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800233c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002340:	edc7 7a00 	vstr	s15, [r7]
 8002344:	783b      	ldrb	r3, [r7, #0]
 8002346:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	float timeTrapSeg1 = qdm / qddm;
 800234a:	4bb7      	ldr	r3, [pc, #732]	; (8002628 <trapezoidalTraj+0x338>)
 800234c:	edd3 6a00 	vldr	s13, [r3]
 8002350:	4bb6      	ldr	r3, [pc, #728]	; (800262c <trapezoidalTraj+0x33c>)
 8002352:	ed93 7a00 	vldr	s14, [r3]
 8002356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800235a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	timeTriSeg1 = pow((diffPos / qddm), 0.5);
 800235e:	4bb3      	ldr	r3, [pc, #716]	; (800262c <trapezoidalTraj+0x33c>)
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002368:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800236c:	ee16 0a90 	vmov	r0, s13
 8002370:	f7fe f896 	bl	80004a0 <__aeabi_f2d>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	ed9f 1ba9 	vldr	d1, [pc, #676]	; 8002620 <trapezoidalTraj+0x330>
 800237c:	ec43 2b10 	vmov	d0, r2, r3
 8002380:	f006 f8f0 	bl	8008564 <pow>
 8002384:	ec53 2b10 	vmov	r2, r3, d0
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	f7fe fbb8 	bl	8000b00 <__aeabi_d2f>
 8002390:	4603      	mov	r3, r0
 8002392:	4aa7      	ldr	r2, [pc, #668]	; (8002630 <trapezoidalTraj+0x340>)
 8002394:	6013      	str	r3, [r2, #0]

	if (timeTriSeg1 < timeTrapSeg1) // triangle shape
 8002396:	4ba6      	ldr	r3, [pc, #664]	; (8002630 <trapezoidalTraj+0x340>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80023a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a8:	f340 8148 	ble.w	800263c <trapezoidalTraj+0x34c>
			{
		float qTriSeg1 = 0.5 * qddm * timeTriSeg1 * timeTriSeg1;
 80023ac:	4b9f      	ldr	r3, [pc, #636]	; (800262c <trapezoidalTraj+0x33c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe f875 	bl	80004a0 <__aeabi_f2d>
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	4b9e      	ldr	r3, [pc, #632]	; (8002634 <trapezoidalTraj+0x344>)
 80023bc:	f7fe f8c8 	bl	8000550 <__aeabi_dmul>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4614      	mov	r4, r2
 80023c6:	461d      	mov	r5, r3
 80023c8:	4b99      	ldr	r3, [pc, #612]	; (8002630 <trapezoidalTraj+0x340>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe f867 	bl	80004a0 <__aeabi_f2d>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	4620      	mov	r0, r4
 80023d8:	4629      	mov	r1, r5
 80023da:	f7fe f8b9 	bl	8000550 <__aeabi_dmul>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4614      	mov	r4, r2
 80023e4:	461d      	mov	r5, r3
 80023e6:	4b92      	ldr	r3, [pc, #584]	; (8002630 <trapezoidalTraj+0x340>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe f858 	bl	80004a0 <__aeabi_f2d>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4620      	mov	r0, r4
 80023f6:	4629      	mov	r1, r5
 80023f8:	f7fe f8aa 	bl	8000550 <__aeabi_dmul>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe fb7c 	bl	8000b00 <__aeabi_d2f>
 8002408:	4603      	mov	r3, r0
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
		float qdTriSeg1 = qddm * timeTriSeg1;
 800240c:	4b87      	ldr	r3, [pc, #540]	; (800262c <trapezoidalTraj+0x33c>)
 800240e:	ed93 7a00 	vldr	s14, [r3]
 8002412:	4b87      	ldr	r3, [pc, #540]	; (8002630 <trapezoidalTraj+0x340>)
 8002414:	edd3 7a00 	vldr	s15, [r3]
 8002418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		if (actualTime <= timeTriSeg1) {
 8002420:	4b85      	ldr	r3, [pc, #532]	; (8002638 <trapezoidalTraj+0x348>)
 8002422:	ed93 7a00 	vldr	s14, [r3]
 8002426:	4b82      	ldr	r3, [pc, #520]	; (8002630 <trapezoidalTraj+0x340>)
 8002428:	edd3 7a00 	vldr	s15, [r3]
 800242c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002434:	d857      	bhi.n	80024e6 <trapezoidalTraj+0x1f6>
			result.posTraj = qi
					+ (0.5 * qddm * actualTime * actualTime) * handleMinus;
 8002436:	68b8      	ldr	r0, [r7, #8]
 8002438:	f7fe f832 	bl	80004a0 <__aeabi_f2d>
 800243c:	4604      	mov	r4, r0
 800243e:	460d      	mov	r5, r1
 8002440:	4b7a      	ldr	r3, [pc, #488]	; (800262c <trapezoidalTraj+0x33c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe f82b 	bl	80004a0 <__aeabi_f2d>
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	4b79      	ldr	r3, [pc, #484]	; (8002634 <trapezoidalTraj+0x344>)
 8002450:	f7fe f87e 	bl	8000550 <__aeabi_dmul>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4690      	mov	r8, r2
 800245a:	4699      	mov	r9, r3
 800245c:	4b76      	ldr	r3, [pc, #472]	; (8002638 <trapezoidalTraj+0x348>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe f81d 	bl	80004a0 <__aeabi_f2d>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4640      	mov	r0, r8
 800246c:	4649      	mov	r1, r9
 800246e:	f7fe f86f 	bl	8000550 <__aeabi_dmul>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4690      	mov	r8, r2
 8002478:	4699      	mov	r9, r3
 800247a:	4b6f      	ldr	r3, [pc, #444]	; (8002638 <trapezoidalTraj+0x348>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe f80e 	bl	80004a0 <__aeabi_f2d>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4640      	mov	r0, r8
 800248a:	4649      	mov	r1, r9
 800248c:	f7fe f860 	bl	8000550 <__aeabi_dmul>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4690      	mov	r8, r2
 8002496:	4699      	mov	r9, r3
 8002498:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800249c:	4618      	mov	r0, r3
 800249e:	f7fd ffed 	bl	800047c <__aeabi_i2d>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4640      	mov	r0, r8
 80024a8:	4649      	mov	r1, r9
 80024aa:	f7fe f851 	bl	8000550 <__aeabi_dmul>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4620      	mov	r0, r4
 80024b4:	4629      	mov	r1, r5
 80024b6:	f7fd fe95 	bl	80001e4 <__adddf3>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4610      	mov	r0, r2
 80024c0:	4619      	mov	r1, r3
 80024c2:	f7fe fb1d 	bl	8000b00 <__aeabi_d2f>
 80024c6:	4603      	mov	r3, r0
			result.posTraj = qi
 80024c8:	613b      	str	r3, [r7, #16]
			result.velTraj = qddm * actualTime;
 80024ca:	4b58      	ldr	r3, [pc, #352]	; (800262c <trapezoidalTraj+0x33c>)
 80024cc:	ed93 7a00 	vldr	s14, [r3]
 80024d0:	4b59      	ldr	r3, [pc, #356]	; (8002638 <trapezoidalTraj+0x348>)
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024da:	edc7 7a05 	vstr	s15, [r7, #20]
			result.accTraj = qddm;
 80024de:	4b53      	ldr	r3, [pc, #332]	; (800262c <trapezoidalTraj+0x33c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	61bb      	str	r3, [r7, #24]
 80024e4:	e284      	b.n	80029f0 <trapezoidalTraj+0x700>
		}

		else if (actualTime > timeTriSeg1 && actualTime <= (timeTriSeg1 * 2)) {
 80024e6:	4b54      	ldr	r3, [pc, #336]	; (8002638 <trapezoidalTraj+0x348>)
 80024e8:	ed93 7a00 	vldr	s14, [r3]
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <trapezoidalTraj+0x340>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fa:	f340 8088 	ble.w	800260e <trapezoidalTraj+0x31e>
 80024fe:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <trapezoidalTraj+0x340>)
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002508:	4b4b      	ldr	r3, [pc, #300]	; (8002638 <trapezoidalTraj+0x348>)
 800250a:	edd3 7a00 	vldr	s15, [r3]
 800250e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002516:	db7a      	blt.n	800260e <trapezoidalTraj+0x31e>
			float actualTimeSeg2 = actualTime - timeTriSeg1;
 8002518:	4b47      	ldr	r3, [pc, #284]	; (8002638 <trapezoidalTraj+0x348>)
 800251a:	ed93 7a00 	vldr	s14, [r3]
 800251e:	4b44      	ldr	r3, [pc, #272]	; (8002630 <trapezoidalTraj+0x340>)
 8002520:	edd3 7a00 	vldr	s15, [r3]
 8002524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002528:	edc7 7a08 	vstr	s15, [r7, #32]
			result.posTraj = qi
					+ (qTriSeg1 + (qdTriSeg1 * actualTimeSeg2)
 800252c:	68b8      	ldr	r0, [r7, #8]
 800252e:	f7fd ffb7 	bl	80004a0 <__aeabi_f2d>
 8002532:	4604      	mov	r4, r0
 8002534:	460d      	mov	r5, r1
 8002536:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800253a:	edd7 7a08 	vldr	s15, [r7, #32]
 800253e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002542:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254a:	ee17 0a90 	vmov	r0, s15
 800254e:	f7fd ffa7 	bl	80004a0 <__aeabi_f2d>
 8002552:	4680      	mov	r8, r0
 8002554:	4689      	mov	r9, r1
							- (0.5 * qddm * actualTimeSeg2 * actualTimeSeg2))
 8002556:	4b35      	ldr	r3, [pc, #212]	; (800262c <trapezoidalTraj+0x33c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fd ffa0 	bl	80004a0 <__aeabi_f2d>
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	4b33      	ldr	r3, [pc, #204]	; (8002634 <trapezoidalTraj+0x344>)
 8002566:	f7fd fff3 	bl	8000550 <__aeabi_dmul>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4692      	mov	sl, r2
 8002570:	469b      	mov	fp, r3
 8002572:	6a38      	ldr	r0, [r7, #32]
 8002574:	f7fd ff94 	bl	80004a0 <__aeabi_f2d>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4650      	mov	r0, sl
 800257e:	4659      	mov	r1, fp
 8002580:	f7fd ffe6 	bl	8000550 <__aeabi_dmul>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4692      	mov	sl, r2
 800258a:	469b      	mov	fp, r3
 800258c:	6a38      	ldr	r0, [r7, #32]
 800258e:	f7fd ff87 	bl	80004a0 <__aeabi_f2d>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4650      	mov	r0, sl
 8002598:	4659      	mov	r1, fp
 800259a:	f7fd ffd9 	bl	8000550 <__aeabi_dmul>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4640      	mov	r0, r8
 80025a4:	4649      	mov	r1, r9
 80025a6:	f7fd fe1b 	bl	80001e0 <__aeabi_dsub>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4690      	mov	r8, r2
 80025b0:	4699      	mov	r9, r3
							* handleMinus;
 80025b2:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fd ff60 	bl	800047c <__aeabi_i2d>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4640      	mov	r0, r8
 80025c2:	4649      	mov	r1, r9
 80025c4:	f7fd ffc4 	bl	8000550 <__aeabi_dmul>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
					+ (qTriSeg1 + (qdTriSeg1 * actualTimeSeg2)
 80025cc:	4620      	mov	r0, r4
 80025ce:	4629      	mov	r1, r5
 80025d0:	f7fd fe08 	bl	80001e4 <__adddf3>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fa90 	bl	8000b00 <__aeabi_d2f>
 80025e0:	4603      	mov	r3, r0
			result.posTraj = qi
 80025e2:	613b      	str	r3, [r7, #16]
			result.velTraj = qdTriSeg1 - (qddm * actualTimeSeg2);
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <trapezoidalTraj+0x33c>)
 80025e6:	ed93 7a00 	vldr	s14, [r3]
 80025ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80025ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80025f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fa:	edc7 7a05 	vstr	s15, [r7, #20]
			result.accTraj = -qddm;
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <trapezoidalTraj+0x33c>)
 8002600:	edd3 7a00 	vldr	s15, [r3]
 8002604:	eef1 7a67 	vneg.f32	s15, s15
 8002608:	edc7 7a06 	vstr	s15, [r7, #24]
		else if (actualTime > timeTriSeg1 && actualTime <= (timeTriSeg1 * 2)) {
 800260c:	e1f0      	b.n	80029f0 <trapezoidalTraj+0x700>
		}

		else {
			result.posTraj = qf;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	613b      	str	r3, [r7, #16]
			result.velTraj = 0;
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
			result.accTraj = 0;
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	e1e7      	b.n	80029f0 <trapezoidalTraj+0x700>
 8002620:	00000000 	.word	0x00000000
 8002624:	3fe00000 	.word	0x3fe00000
 8002628:	20000240 	.word	0x20000240
 800262c:	2000023c 	.word	0x2000023c
 8002630:	20000df0 	.word	0x20000df0
 8002634:	3fe00000 	.word	0x3fe00000
 8002638:	20000dec 	.word	0x20000dec
	}

	else // trapezoidal shape
	{
		float timeTrapSeg2 = (diffPos
				- (2 * 0.5 * qddm * (timeTrapSeg1) * (timeTrapSeg1))) / qdm;
 800263c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800263e:	f7fd ff2f 	bl	80004a0 <__aeabi_f2d>
 8002642:	4604      	mov	r4, r0
 8002644:	460d      	mov	r5, r1
 8002646:	4b90      	ldr	r3, [pc, #576]	; (8002888 <trapezoidalTraj+0x598>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd ff28 	bl	80004a0 <__aeabi_f2d>
 8002650:	4680      	mov	r8, r0
 8002652:	4689      	mov	r9, r1
 8002654:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002656:	f7fd ff23 	bl	80004a0 <__aeabi_f2d>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4640      	mov	r0, r8
 8002660:	4649      	mov	r1, r9
 8002662:	f7fd ff75 	bl	8000550 <__aeabi_dmul>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4690      	mov	r8, r2
 800266c:	4699      	mov	r9, r3
 800266e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002670:	f7fd ff16 	bl	80004a0 <__aeabi_f2d>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4640      	mov	r0, r8
 800267a:	4649      	mov	r1, r9
 800267c:	f7fd ff68 	bl	8000550 <__aeabi_dmul>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4620      	mov	r0, r4
 8002686:	4629      	mov	r1, r5
 8002688:	f7fd fdaa 	bl	80001e0 <__aeabi_dsub>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4614      	mov	r4, r2
 8002692:	461d      	mov	r5, r3
 8002694:	4b7d      	ldr	r3, [pc, #500]	; (800288c <trapezoidalTraj+0x59c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd ff01 	bl	80004a0 <__aeabi_f2d>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4620      	mov	r0, r4
 80026a4:	4629      	mov	r1, r5
 80026a6:	f7fe f87d 	bl	80007a4 <__aeabi_ddiv>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
		float timeTrapSeg2 = (diffPos
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	f7fe fa25 	bl	8000b00 <__aeabi_d2f>
 80026b6:	4603      	mov	r3, r0
 80026b8:	643b      	str	r3, [r7, #64]	; 0x40
		float timeTrapSeg3 = qdm / qddm;
 80026ba:	4b74      	ldr	r3, [pc, #464]	; (800288c <trapezoidalTraj+0x59c>)
 80026bc:	edd3 6a00 	vldr	s13, [r3]
 80026c0:	4b71      	ldr	r3, [pc, #452]	; (8002888 <trapezoidalTraj+0x598>)
 80026c2:	ed93 7a00 	vldr	s14, [r3]
 80026c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		float qTrapSeg1 = 0.5 * qddm * (timeTrapSeg1) * (timeTrapSeg1);
 80026ce:	4b6e      	ldr	r3, [pc, #440]	; (8002888 <trapezoidalTraj+0x598>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd fee4 	bl	80004a0 <__aeabi_f2d>
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	4b6c      	ldr	r3, [pc, #432]	; (8002890 <trapezoidalTraj+0x5a0>)
 80026de:	f7fd ff37 	bl	8000550 <__aeabi_dmul>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4614      	mov	r4, r2
 80026e8:	461d      	mov	r5, r3
 80026ea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80026ec:	f7fd fed8 	bl	80004a0 <__aeabi_f2d>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4620      	mov	r0, r4
 80026f6:	4629      	mov	r1, r5
 80026f8:	f7fd ff2a 	bl	8000550 <__aeabi_dmul>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4614      	mov	r4, r2
 8002702:	461d      	mov	r5, r3
 8002704:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002706:	f7fd fecb 	bl	80004a0 <__aeabi_f2d>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4620      	mov	r0, r4
 8002710:	4629      	mov	r1, r5
 8002712:	f7fd ff1d 	bl	8000550 <__aeabi_dmul>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	f7fe f9ef 	bl	8000b00 <__aeabi_d2f>
 8002722:	4603      	mov	r3, r0
 8002724:	63bb      	str	r3, [r7, #56]	; 0x38
		float qTrapSeg2 = qTrapSeg1 + (qdm * timeTrapSeg2);
 8002726:	4b59      	ldr	r3, [pc, #356]	; (800288c <trapezoidalTraj+0x59c>)
 8002728:	ed93 7a00 	vldr	s14, [r3]
 800272c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002734:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

		if (actualTime <= timeTrapSeg1) {
 8002740:	4b54      	ldr	r3, [pc, #336]	; (8002894 <trapezoidalTraj+0x5a4>)
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800274a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002752:	db57      	blt.n	8002804 <trapezoidalTraj+0x514>
			result.posTraj = qi
					+ (0.5 * qddm * actualTime * actualTime) * handleMinus;
 8002754:	68b8      	ldr	r0, [r7, #8]
 8002756:	f7fd fea3 	bl	80004a0 <__aeabi_f2d>
 800275a:	4604      	mov	r4, r0
 800275c:	460d      	mov	r5, r1
 800275e:	4b4a      	ldr	r3, [pc, #296]	; (8002888 <trapezoidalTraj+0x598>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fd fe9c 	bl	80004a0 <__aeabi_f2d>
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	4b48      	ldr	r3, [pc, #288]	; (8002890 <trapezoidalTraj+0x5a0>)
 800276e:	f7fd feef 	bl	8000550 <__aeabi_dmul>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4690      	mov	r8, r2
 8002778:	4699      	mov	r9, r3
 800277a:	4b46      	ldr	r3, [pc, #280]	; (8002894 <trapezoidalTraj+0x5a4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd fe8e 	bl	80004a0 <__aeabi_f2d>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4640      	mov	r0, r8
 800278a:	4649      	mov	r1, r9
 800278c:	f7fd fee0 	bl	8000550 <__aeabi_dmul>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4690      	mov	r8, r2
 8002796:	4699      	mov	r9, r3
 8002798:	4b3e      	ldr	r3, [pc, #248]	; (8002894 <trapezoidalTraj+0x5a4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7fd fe7f 	bl	80004a0 <__aeabi_f2d>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4640      	mov	r0, r8
 80027a8:	4649      	mov	r1, r9
 80027aa:	f7fd fed1 	bl	8000550 <__aeabi_dmul>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4690      	mov	r8, r2
 80027b4:	4699      	mov	r9, r3
 80027b6:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fd fe5e 	bl	800047c <__aeabi_i2d>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4640      	mov	r0, r8
 80027c6:	4649      	mov	r1, r9
 80027c8:	f7fd fec2 	bl	8000550 <__aeabi_dmul>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4620      	mov	r0, r4
 80027d2:	4629      	mov	r1, r5
 80027d4:	f7fd fd06 	bl	80001e4 <__adddf3>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	f7fe f98e 	bl	8000b00 <__aeabi_d2f>
 80027e4:	4603      	mov	r3, r0
			result.posTraj = qi
 80027e6:	613b      	str	r3, [r7, #16]
			result.velTraj = qddm * actualTime;
 80027e8:	4b27      	ldr	r3, [pc, #156]	; (8002888 <trapezoidalTraj+0x598>)
 80027ea:	ed93 7a00 	vldr	s14, [r3]
 80027ee:	4b29      	ldr	r3, [pc, #164]	; (8002894 <trapezoidalTraj+0x5a4>)
 80027f0:	edd3 7a00 	vldr	s15, [r3]
 80027f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f8:	edc7 7a05 	vstr	s15, [r7, #20]
			result.accTraj = qddm;
 80027fc:	4b22      	ldr	r3, [pc, #136]	; (8002888 <trapezoidalTraj+0x598>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	e0f5      	b.n	80029f0 <trapezoidalTraj+0x700>
		} else if (actualTime > timeTrapSeg1
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <trapezoidalTraj+0x5a4>)
 8002806:	edd3 7a00 	vldr	s15, [r3]
 800280a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800280e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002816:	d53f      	bpl.n	8002898 <trapezoidalTraj+0x5a8>
				&& actualTime <= timeTrapSeg2 + timeTrapSeg1) {
 8002818:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800281c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002820:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <trapezoidalTraj+0x5a4>)
 8002826:	edd3 7a00 	vldr	s15, [r3]
 800282a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800282e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002832:	db31      	blt.n	8002898 <trapezoidalTraj+0x5a8>
			float t2 = actualTime - timeTrapSeg1;
 8002834:	4b17      	ldr	r3, [pc, #92]	; (8002894 <trapezoidalTraj+0x5a4>)
 8002836:	ed93 7a00 	vldr	s14, [r3]
 800283a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800283e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002842:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			result.posTraj = qi + (qTrapSeg1 + qdm * (t2)) * handleMinus;
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <trapezoidalTraj+0x59c>)
 8002848:	ed93 7a00 	vldr	s14, [r3]
 800284c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002850:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002854:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002858:	ee37 7a27 	vadd.f32	s14, s14, s15
 800285c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8002860:	ee07 3a90 	vmov	s15, r3
 8002864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002868:	ee27 7a27 	vmul.f32	s14, s14, s15
 800286c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002874:	edc7 7a04 	vstr	s15, [r7, #16]
			result.velTraj = qdm;
 8002878:	4b04      	ldr	r3, [pc, #16]	; (800288c <trapezoidalTraj+0x59c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	617b      	str	r3, [r7, #20]
			result.accTraj = 0;
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	61bb      	str	r3, [r7, #24]
				&& actualTime <= timeTrapSeg2 + timeTrapSeg1) {
 8002884:	e0b4      	b.n	80029f0 <trapezoidalTraj+0x700>
 8002886:	bf00      	nop
 8002888:	2000023c 	.word	0x2000023c
 800288c:	20000240 	.word	0x20000240
 8002890:	3fe00000 	.word	0x3fe00000
 8002894:	20000dec 	.word	0x20000dec
		} else if (actualTime > timeTrapSeg2 + timeTrapSeg1
 8002898:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800289c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80028a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a4:	4b7a      	ldr	r3, [pc, #488]	; (8002a90 <trapezoidalTraj+0x7a0>)
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b2:	f140 8095 	bpl.w	80029e0 <trapezoidalTraj+0x6f0>
				&& actualTime <= timeTrapSeg3 + timeTrapSeg2 + timeTrapSeg1) {
 80028b6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80028ba:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80028be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80028c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ca:	4b71      	ldr	r3, [pc, #452]	; (8002a90 <trapezoidalTraj+0x7a0>)
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	f2c0 8082 	blt.w	80029e0 <trapezoidalTraj+0x6f0>
			float t3 = actualTime - timeTrapSeg2 - timeTrapSeg1;
 80028dc:	4b6c      	ldr	r3, [pc, #432]	; (8002a90 <trapezoidalTraj+0x7a0>)
 80028de:	ed93 7a00 	vldr	s14, [r3]
 80028e2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80028e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80028ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			result.posTraj = qi
					+ (qTrapSeg2 + (qdm * t3) - 0.5 * qddm * t3 * t3)
 80028f6:	68b8      	ldr	r0, [r7, #8]
 80028f8:	f7fd fdd2 	bl	80004a0 <__aeabi_f2d>
 80028fc:	4604      	mov	r4, r0
 80028fe:	460d      	mov	r5, r1
 8002900:	4b64      	ldr	r3, [pc, #400]	; (8002a94 <trapezoidalTraj+0x7a4>)
 8002902:	ed93 7a00 	vldr	s14, [r3]
 8002906:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800290a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800290e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002916:	ee17 0a90 	vmov	r0, s15
 800291a:	f7fd fdc1 	bl	80004a0 <__aeabi_f2d>
 800291e:	4680      	mov	r8, r0
 8002920:	4689      	mov	r9, r1
 8002922:	4b5d      	ldr	r3, [pc, #372]	; (8002a98 <trapezoidalTraj+0x7a8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fdba 	bl	80004a0 <__aeabi_f2d>
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	4b5a      	ldr	r3, [pc, #360]	; (8002a9c <trapezoidalTraj+0x7ac>)
 8002932:	f7fd fe0d 	bl	8000550 <__aeabi_dmul>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4692      	mov	sl, r2
 800293c:	469b      	mov	fp, r3
 800293e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002940:	f7fd fdae 	bl	80004a0 <__aeabi_f2d>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4650      	mov	r0, sl
 800294a:	4659      	mov	r1, fp
 800294c:	f7fd fe00 	bl	8000550 <__aeabi_dmul>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4692      	mov	sl, r2
 8002956:	469b      	mov	fp, r3
 8002958:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800295a:	f7fd fda1 	bl	80004a0 <__aeabi_f2d>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4650      	mov	r0, sl
 8002964:	4659      	mov	r1, fp
 8002966:	f7fd fdf3 	bl	8000550 <__aeabi_dmul>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4640      	mov	r0, r8
 8002970:	4649      	mov	r1, r9
 8002972:	f7fd fc35 	bl	80001e0 <__aeabi_dsub>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4690      	mov	r8, r2
 800297c:	4699      	mov	r9, r3
							* handleMinus;
 800297e:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fd7a 	bl	800047c <__aeabi_i2d>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4640      	mov	r0, r8
 800298e:	4649      	mov	r1, r9
 8002990:	f7fd fdde 	bl	8000550 <__aeabi_dmul>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
					+ (qTrapSeg2 + (qdm * t3) - 0.5 * qddm * t3 * t3)
 8002998:	4620      	mov	r0, r4
 800299a:	4629      	mov	r1, r5
 800299c:	f7fd fc22 	bl	80001e4 <__adddf3>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	f7fe f8aa 	bl	8000b00 <__aeabi_d2f>
 80029ac:	4603      	mov	r3, r0
			result.posTraj = qi
 80029ae:	613b      	str	r3, [r7, #16]
			result.velTraj = -qddm * t3 + qdm;
 80029b0:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <trapezoidalTraj+0x7a8>)
 80029b2:	edd3 7a00 	vldr	s15, [r3]
 80029b6:	eeb1 7a67 	vneg.f32	s14, s15
 80029ba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c2:	4b34      	ldr	r3, [pc, #208]	; (8002a94 <trapezoidalTraj+0x7a4>)
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029cc:	edc7 7a05 	vstr	s15, [r7, #20]
			result.accTraj = -qddm;
 80029d0:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <trapezoidalTraj+0x7a8>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	eef1 7a67 	vneg.f32	s15, s15
 80029da:	edc7 7a06 	vstr	s15, [r7, #24]
				&& actualTime <= timeTrapSeg3 + timeTrapSeg2 + timeTrapSeg1) {
 80029de:	e007      	b.n	80029f0 <trapezoidalTraj+0x700>
		} else {
			result.posTraj = qf;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	613b      	str	r3, [r7, #16]
			result.velTraj = 0;
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
			result.accTraj = 0;
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]

		}

	}

	checkPos = result.posTraj;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4a2b      	ldr	r2, [pc, #172]	; (8002aa0 <trapezoidalTraj+0x7b0>)
 80029f4:	6013      	str	r3, [r2, #0]
	checkVel = result.velTraj;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	4a2a      	ldr	r2, [pc, #168]	; (8002aa4 <trapezoidalTraj+0x7b4>)
 80029fa:	6013      	str	r3, [r2, #0]
	checkAcc = result.accTraj;
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <trapezoidalTraj+0x7b8>)
 8002a00:	6013      	str	r3, [r2, #0]
	actualTime += 0.001;
 8002a02:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <trapezoidalTraj+0x7a0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd fd4a 	bl	80004a0 <__aeabi_f2d>
 8002a0c:	a31e      	add	r3, pc, #120	; (adr r3, 8002a88 <trapezoidalTraj+0x798>)
 8002a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a12:	f7fd fbe7 	bl	80001e4 <__adddf3>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f7fe f86f 	bl	8000b00 <__aeabi_d2f>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4a1a      	ldr	r2, [pc, #104]	; (8002a90 <trapezoidalTraj+0x7a0>)
 8002a26:	6013      	str	r3, [r2, #0]
	if (result.posTraj == qf) {
 8002a28:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a2c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a30:	eeb4 7a67 	vcmp.f32	s14, s15
 8002a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a38:	d115      	bne.n	8002a66 <trapezoidalTraj+0x776>
		result.reachTraj = 1;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	773b      	strb	r3, [r7, #28]
		actualTime = 0;
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <trapezoidalTraj+0x7a0>)
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
		startPointModeY = 0;
 8002a46:	4b19      	ldr	r3, [pc, #100]	; (8002aac <trapezoidalTraj+0x7bc>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
		initPosY = mmActPos;
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <trapezoidalTraj+0x7c0>)
 8002a4e:	edd3 7a00 	vldr	s15, [r3]
 8002a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a56:	ee17 2a90 	vmov	r2, s15
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <trapezoidalTraj+0x7c4>)
 8002a5c:	601a      	str	r2, [r3, #0]
		registerFrame[16].U16 = 0;
 8002a5e:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <trapezoidalTraj+0x7c8>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	841a      	strh	r2, [r3, #32]
 8002a64:	e001      	b.n	8002a6a <trapezoidalTraj+0x77a>
	} else {
		result.reachTraj = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	773b      	strb	r3, [r7, #28]
	}

	return result;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	461c      	mov	r4, r3
 8002a6e:	f107 0310 	add.w	r3, r7, #16
 8002a72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	3750      	adds	r7, #80	; 0x50
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a82:	bf00      	nop
 8002a84:	f3af 8000 	nop.w
 8002a88:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a8c:	3f50624d 	.word	0x3f50624d
 8002a90:	20000dec 	.word	0x20000dec
 8002a94:	20000240 	.word	0x20000240
 8002a98:	2000023c 	.word	0x2000023c
 8002a9c:	3fe00000 	.word	0x3fe00000
 8002aa0:	20000df4 	.word	0x20000df4
 8002aa4:	20000df8 	.word	0x20000df8
 8002aa8:	20000dfc 	.word	0x20000dfc
 8002aac:	20000e13 	.word	0x20000e13
 8002ab0:	20000d80 	.word	0x20000d80
 8002ab4:	20000e14 	.word	0x20000e14
 8002ab8:	20000cb0 	.word	0x20000cb0

08002abc <buttonInput>:
			+ centerY;

	return rotatedPoint;
}

void buttonInput() {
 8002abc:	b598      	push	{r3, r4, r7, lr}
 8002abe:	af00      	add	r7, sp, #0
	register int i;
	for (i = 0; i < 4; i++) {
 8002ac0:	2400      	movs	r4, #0
 8002ac2:	e046      	b.n	8002b52 <buttonInput+0x96>
		Button1[i].Current = HAL_GPIO_ReadPin(joyPin[i].PORT, joyPin[i].PIN);
 8002ac4:	4b25      	ldr	r3, [pc, #148]	; (8002b5c <buttonInput+0xa0>)
 8002ac6:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 8002aca:	4924      	ldr	r1, [pc, #144]	; (8002b5c <buttonInput+0xa0>)
 8002acc:	00e3      	lsls	r3, r4, #3
 8002ace:	440b      	add	r3, r1
 8002ad0:	889b      	ldrh	r3, [r3, #4]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	f002 f853 	bl	8004b80 <HAL_GPIO_ReadPin>
 8002ada:	4603      	mov	r3, r0
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <buttonInput+0xa4>)
 8002ae0:	f803 2014 	strb.w	r2, [r3, r4, lsl #1]
		if (Button1[i].Last == 0 && Button1[i].Current == 1) {
 8002ae4:	4a1e      	ldr	r2, [pc, #120]	; (8002b60 <buttonInput+0xa4>)
 8002ae6:	0063      	lsls	r3, r4, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	785b      	ldrb	r3, [r3, #1]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d127      	bne.n	8002b40 <buttonInput+0x84>
 8002af0:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <buttonInput+0xa4>)
 8002af2:	f813 3014 	ldrb.w	r3, [r3, r4, lsl #1]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d122      	bne.n	8002b40 <buttonInput+0x84>
			if (i == 0) {
 8002afa:	2c00      	cmp	r4, #0
 8002afc:	d105      	bne.n	8002b0a <buttonInput+0x4e>
				countTopB += 1;
 8002afe:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <buttonInput+0xa8>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	3301      	adds	r3, #1
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <buttonInput+0xa8>)
 8002b08:	701a      	strb	r2, [r3, #0]
			}
			if (i == 1) {
				// countRightB += 1;
			}
			if (i == 2) {
 8002b0a:	2c02      	cmp	r4, #2
 8002b0c:	d105      	bne.n	8002b1a <buttonInput+0x5e>
				countBottomB += 1;
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <buttonInput+0xac>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	3301      	adds	r3, #1
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <buttonInput+0xac>)
 8002b18:	701a      	strb	r2, [r3, #0]
			}
			if (i == 3) {
 8002b1a:	2c03      	cmp	r4, #3
 8002b1c:	d105      	bne.n	8002b2a <buttonInput+0x6e>
				countLeftB += 1;
 8002b1e:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <buttonInput+0xb0>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	3301      	adds	r3, #1
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <buttonInput+0xb0>)
 8002b28:	701a      	strb	r2, [r3, #0]

			}
			Button1[i].Last = Button1[i].Current;
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <buttonInput+0xa4>)
 8002b2c:	f813 1014 	ldrb.w	r1, [r3, r4, lsl #1]
 8002b30:	4a0b      	ldr	r2, [pc, #44]	; (8002b60 <buttonInput+0xa4>)
 8002b32:	0063      	lsls	r3, r4, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	460a      	mov	r2, r1
 8002b38:	705a      	strb	r2, [r3, #1]
			joyLogic = i;
 8002b3a:	b2e2      	uxtb	r2, r4
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <buttonInput+0xb4>)
 8002b3e:	701a      	strb	r2, [r3, #0]
		}
		Button1[i].Last = Button1[i].Current;
 8002b40:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <buttonInput+0xa4>)
 8002b42:	f813 1014 	ldrb.w	r1, [r3, r4, lsl #1]
 8002b46:	4a06      	ldr	r2, [pc, #24]	; (8002b60 <buttonInput+0xa4>)
 8002b48:	0063      	lsls	r3, r4, #1
 8002b4a:	4413      	add	r3, r2
 8002b4c:	460a      	mov	r2, r1
 8002b4e:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 4; i++) {
 8002b50:	3401      	adds	r4, #1
 8002b52:	2c03      	cmp	r4, #3
 8002b54:	ddb6      	ble.n	8002ac4 <buttonInput+0x8>
	}
}
 8002b56:	bf00      	nop
 8002b58:	bf00      	nop
 8002b5a:	bd98      	pop	{r3, r4, r7, pc}
 8002b5c:	20000200 	.word	0x20000200
 8002b60:	20000d3c 	.word	0x20000d3c
 8002b64:	20000d6d 	.word	0x20000d6d
 8002b68:	20000d6c 	.word	0x20000d6c
 8002b6c:	20000d6f 	.word	0x20000d6f
 8002b70:	20000e11 	.word	0x20000e11

08002b74 <buttonLogic>:

void buttonLogic(uint16_t state) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	80fb      	strh	r3, [r7, #6]
	if (countTopB % 2 == 0) {
 8002b7e:	4b7c      	ldr	r3, [pc, #496]	; (8002d70 <buttonLogic+0x1fc>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d13a      	bne.n	8002c02 <buttonLogic+0x8e>
		switch (state) {
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d838      	bhi.n	8002c04 <buttonLogic+0x90>
 8002b92:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <buttonLogic+0x24>)
 8002b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002bd5 	.word	0x08002bd5
 8002ba0:	08002bdd 	.word	0x08002bdd
 8002ba4:	08002bfb 	.word	0x08002bfb
		case 0:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bae:	4871      	ldr	r0, [pc, #452]	; (8002d74 <buttonLogic+0x200>)
 8002bb0:	f001 fffe 	bl	8004bb0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bba:	486e      	ldr	r0, [pc, #440]	; (8002d74 <buttonLogic+0x200>)
 8002bbc:	f001 fff8 	bl	8004bb0 <HAL_GPIO_WritePin>
			// ENTER JOG MODE
			if (switchAxis) {
 8002bc0:	4b6d      	ldr	r3, [pc, #436]	; (8002d78 <buttonLogic+0x204>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <buttonLogic+0x5a>
				jogAxisY();
 8002bc8:	f7ff fae4 	bl	8002194 <jogAxisY>
			} else {
				jogAxisX();
			}
			break;
 8002bcc:	e01a      	b.n	8002c04 <buttonLogic+0x90>
				jogAxisX();
 8002bce:	f000 f9a1 	bl	8002f14 <jogAxisX>
			break;
 8002bd2:	e017      	b.n	8002c04 <buttonLogic+0x90>
		case 1:
			// Right

			joyLogic = 0;
 8002bd4:	4b69      	ldr	r3, [pc, #420]	; (8002d7c <buttonLogic+0x208>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
			break;
 8002bda:	e013      	b.n	8002c04 <buttonLogic+0x90>
		case 2:
			// Change Axis of Movement
			if (switchAxis) {
 8002bdc:	4b66      	ldr	r3, [pc, #408]	; (8002d78 <buttonLogic+0x204>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <buttonLogic+0x78>
				switchAxis = 0;
 8002be4:	4b64      	ldr	r3, [pc, #400]	; (8002d78 <buttonLogic+0x204>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	e002      	b.n	8002bf2 <buttonLogic+0x7e>
			} else {
				switchAxis = 1;
 8002bec:	4b62      	ldr	r3, [pc, #392]	; (8002d78 <buttonLogic+0x204>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
			}
			joyLogic = 0;
 8002bf2:	4b62      	ldr	r3, [pc, #392]	; (8002d7c <buttonLogic+0x208>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
			break;
 8002bf8:	e004      	b.n	8002c04 <buttonLogic+0x90>
		case 3:
			// Left

			joyLogic = 0;
 8002bfa:	4b60      	ldr	r3, [pc, #384]	; (8002d7c <buttonLogic+0x208>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]

			break;
 8002c00:	e000      	b.n	8002c04 <buttonLogic+0x90>
		}
	}
 8002c02:	bf00      	nop
	if (countTopB % 2 == 1) {
 8002c04:	4b5a      	ldr	r3, [pc, #360]	; (8002d70 <buttonLogic+0x1fc>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80a9 	beq.w	8002d66 <buttonLogic+0x1f2>

		switch (state) {
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	f200 80a6 	bhi.w	8002d68 <buttonLogic+0x1f4>
 8002c1c:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <buttonLogic+0xb0>)
 8002c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c22:	bf00      	nop
 8002c24:	08002c35 	.word	0x08002c35
 8002c28:	08002c4f 	.word	0x08002c4f
 8002c2c:	08002d45 	.word	0x08002d45
 8002c30:	08002d4d 	.word	0x08002d4d
		case 0:
			// ENTER CALIBRATE MODE
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8002c34:	2200      	movs	r2, #0
 8002c36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c3a:	484e      	ldr	r0, [pc, #312]	; (8002d74 <buttonLogic+0x200>)
 8002c3c:	f001 ffb8 	bl	8004bb0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8002c40:	2201      	movs	r2, #1
 8002c42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c46:	484b      	ldr	r0, [pc, #300]	; (8002d74 <buttonLogic+0x200>)
 8002c48:	f001 ffb2 	bl	8004bb0 <HAL_GPIO_WritePin>
			break;
 8002c4c:	e08c      	b.n	8002d68 <buttonLogic+0x1f4>
		case 1:
			// Pick
			if (countRightB == 0) {
 8002c4e:	4b4c      	ldr	r3, [pc, #304]	; (8002d80 <buttonLogic+0x20c>)
 8002c50:	f993 3000 	ldrsb.w	r3, [r3]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10e      	bne.n	8002c76 <buttonLogic+0x102>
				trayPickX.pos1 = registerFrame[68].U16;
 8002c58:	4b4a      	ldr	r3, [pc, #296]	; (8002d84 <buttonLogic+0x210>)
 8002c5a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c66:	4b48      	ldr	r3, [pc, #288]	; (8002d88 <buttonLogic+0x214>)
 8002c68:	edc3 7a00 	vstr	s15, [r3]
				trayPickY.pos1 = mmActPos;
 8002c6c:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <buttonLogic+0x218>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a47      	ldr	r2, [pc, #284]	; (8002d90 <buttonLogic+0x21c>)
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	e062      	b.n	8002d3c <buttonLogic+0x1c8>
			} else if (countRightB == 1) {
 8002c76:	4b42      	ldr	r3, [pc, #264]	; (8002d80 <buttonLogic+0x20c>)
 8002c78:	f993 3000 	ldrsb.w	r3, [r3]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d10e      	bne.n	8002c9e <buttonLogic+0x12a>
				trayPickX.pos2 = registerFrame[68].U16;
 8002c80:	4b40      	ldr	r3, [pc, #256]	; (8002d84 <buttonLogic+0x210>)
 8002c82:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002c86:	ee07 3a90 	vmov	s15, r3
 8002c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c8e:	4b3e      	ldr	r3, [pc, #248]	; (8002d88 <buttonLogic+0x214>)
 8002c90:	edc3 7a01 	vstr	s15, [r3, #4]
				trayPickY.pos2 = mmActPos;
 8002c94:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <buttonLogic+0x218>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a3d      	ldr	r2, [pc, #244]	; (8002d90 <buttonLogic+0x21c>)
 8002c9a:	6053      	str	r3, [r2, #4]
 8002c9c:	e04e      	b.n	8002d3c <buttonLogic+0x1c8>
			} else if (countRightB == 2) {
 8002c9e:	4b38      	ldr	r3, [pc, #224]	; (8002d80 <buttonLogic+0x20c>)
 8002ca0:	f993 3000 	ldrsb.w	r3, [r3]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d10e      	bne.n	8002cc6 <buttonLogic+0x152>
				trayPickX.pos3 = registerFrame[68].U16;
 8002ca8:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <buttonLogic+0x210>)
 8002caa:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002cae:	ee07 3a90 	vmov	s15, r3
 8002cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb6:	4b34      	ldr	r3, [pc, #208]	; (8002d88 <buttonLogic+0x214>)
 8002cb8:	edc3 7a02 	vstr	s15, [r3, #8]
				trayPickY.pos3 = mmActPos;
 8002cbc:	4b33      	ldr	r3, [pc, #204]	; (8002d8c <buttonLogic+0x218>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a33      	ldr	r2, [pc, #204]	; (8002d90 <buttonLogic+0x21c>)
 8002cc2:	6093      	str	r3, [r2, #8]
 8002cc4:	e03a      	b.n	8002d3c <buttonLogic+0x1c8>
			} else if (countRightB == 3) {
 8002cc6:	4b2e      	ldr	r3, [pc, #184]	; (8002d80 <buttonLogic+0x20c>)
 8002cc8:	f993 3000 	ldrsb.w	r3, [r3]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d10e      	bne.n	8002cee <buttonLogic+0x17a>
				trayPlaceX.pos1 = registerFrame[68].U16;
 8002cd0:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <buttonLogic+0x210>)
 8002cd2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cde:	4b2d      	ldr	r3, [pc, #180]	; (8002d94 <buttonLogic+0x220>)
 8002ce0:	edc3 7a00 	vstr	s15, [r3]
				trayPlaceY.pos1 = mmActPos;
 8002ce4:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <buttonLogic+0x218>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a2b      	ldr	r2, [pc, #172]	; (8002d98 <buttonLogic+0x224>)
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	e026      	b.n	8002d3c <buttonLogic+0x1c8>
			} else if (countRightB == 4) {
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <buttonLogic+0x20c>)
 8002cf0:	f993 3000 	ldrsb.w	r3, [r3]
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d10e      	bne.n	8002d16 <buttonLogic+0x1a2>
				trayPlaceX.pos2 = registerFrame[68].U16;
 8002cf8:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <buttonLogic+0x210>)
 8002cfa:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002cfe:	ee07 3a90 	vmov	s15, r3
 8002d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d06:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <buttonLogic+0x220>)
 8002d08:	edc3 7a01 	vstr	s15, [r3, #4]
				trayPlaceY.pos2 = mmActPos;
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <buttonLogic+0x218>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a21      	ldr	r2, [pc, #132]	; (8002d98 <buttonLogic+0x224>)
 8002d12:	6053      	str	r3, [r2, #4]
 8002d14:	e012      	b.n	8002d3c <buttonLogic+0x1c8>
			} else if (countRightB == 5) {
 8002d16:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <buttonLogic+0x20c>)
 8002d18:	f993 3000 	ldrsb.w	r3, [r3]
 8002d1c:	2b05      	cmp	r3, #5
 8002d1e:	d10d      	bne.n	8002d3c <buttonLogic+0x1c8>
				trayPlaceX.pos3 = registerFrame[68].U16;
 8002d20:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <buttonLogic+0x210>)
 8002d22:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002d26:	ee07 3a90 	vmov	s15, r3
 8002d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2e:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <buttonLogic+0x220>)
 8002d30:	edc3 7a02 	vstr	s15, [r3, #8]
				trayPlaceY.pos3 = mmActPos;
 8002d34:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <buttonLogic+0x218>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a17      	ldr	r2, [pc, #92]	; (8002d98 <buttonLogic+0x224>)
 8002d3a:	6093      	str	r3, [r2, #8]
			}
			joyLogic = 0;
 8002d3c:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <buttonLogic+0x208>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
			break;
 8002d42:	e011      	b.n	8002d68 <buttonLogic+0x1f4>
		case 2:
			// Open Laser
			joyLogic = 0;
 8002d44:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <buttonLogic+0x208>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]

			break;
 8002d4a:	e00d      	b.n	8002d68 <buttonLogic+0x1f4>
		case 3:
			//  Delete
			countRightB -= 1;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <buttonLogic+0x20c>)
 8002d4e:	f993 3000 	ldrsb.w	r3, [r3]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	b25a      	sxtb	r2, r3
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <buttonLogic+0x20c>)
 8002d5c:	701a      	strb	r2, [r3, #0]
			joyLogic = 0;
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <buttonLogic+0x208>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
			break;
 8002d64:	e000      	b.n	8002d68 <buttonLogic+0x1f4>
		}
	}
 8002d66:	bf00      	nop

}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20000d6d 	.word	0x20000d6d
 8002d74:	40020800 	.word	0x40020800
 8002d78:	20000228 	.word	0x20000228
 8002d7c:	20000e11 	.word	0x20000e11
 8002d80:	20000d6e 	.word	0x20000d6e
 8002d84:	20000cb0 	.word	0x20000cb0
 8002d88:	20000d8c 	.word	0x20000d8c
 8002d8c:	20000d80 	.word	0x20000d80
 8002d90:	20000da4 	.word	0x20000da4
 8002d94:	20000dbc 	.word	0x20000dbc
 8002d98:	20000dd4 	.word	0x20000dd4
 8002d9c:	00000000 	.word	0x00000000

08002da0 <robotArmState>:



void robotArmState(uint16_t state) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	80fb      	strh	r3, [r7, #6]
	switch (state) {
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	2b0f      	cmp	r3, #15
 8002db0:	f200 8093 	bhi.w	8002eda <robotArmState+0x13a>
 8002db4:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <robotArmState+0x1c>)
 8002db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dba:	bf00      	nop
 8002dbc:	08002dfd 	.word	0x08002dfd
 8002dc0:	08002e0f 	.word	0x08002e0f
 8002dc4:	08002edb 	.word	0x08002edb
 8002dc8:	08002e21 	.word	0x08002e21
 8002dcc:	08002edb 	.word	0x08002edb
 8002dd0:	08002edb 	.word	0x08002edb
 8002dd4:	08002edb 	.word	0x08002edb
 8002dd8:	08002ed9 	.word	0x08002ed9
 8002ddc:	08002edb 	.word	0x08002edb
 8002de0:	08002edb 	.word	0x08002edb
 8002de4:	08002edb 	.word	0x08002edb
 8002de8:	08002edb 	.word	0x08002edb
 8002dec:	08002edb 	.word	0x08002edb
 8002df0:	08002edb 	.word	0x08002edb
 8002df4:	08002edb 	.word	0x08002edb
 8002df8:	08002e3d 	.word	0x08002e3d
	case 0b0000000000000001: // SET PICK TRAY
		buttonInput();
 8002dfc:	f7ff fe5e 	bl	8002abc <buttonInput>
		buttonLogic(joyLogic);
 8002e00:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <robotArmState+0x150>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff feb4 	bl	8002b74 <buttonLogic>
		break;
 8002e0c:	e065      	b.n	8002eda <robotArmState+0x13a>
	case 0b0000000000000010: // SET PLACE TRAY
		buttonInput();
 8002e0e:	f7ff fe55 	bl	8002abc <buttonInput>
		buttonLogic(joyLogic);
 8002e12:	4b37      	ldr	r3, [pc, #220]	; (8002ef0 <robotArmState+0x150>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff feab 	bl	8002b74 <buttonLogic>
		break;
 8002e1e:	e05c      	b.n	8002eda <robotArmState+0x13a>
	case 0b0000000000000100: // HOME
		registerFrame[1].U16 = 0;
 8002e20:	4b34      	ldr	r3, [pc, #208]	; (8002ef4 <robotArmState+0x154>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 0b0000000000000100;
 8002e26:	4b33      	ldr	r3, [pc, #204]	; (8002ef4 <robotArmState+0x154>)
 8002e28:	2204      	movs	r2, #4
 8002e2a:	841a      	strh	r2, [r3, #32]
		startSetHome = 1;
 8002e2c:	4b32      	ldr	r3, [pc, #200]	; (8002ef8 <robotArmState+0x158>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]

		registerFrame[64].U16 = 0b0000000000000001;
 8002e32:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <robotArmState+0x154>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		// registerFrame[16].U16 = 0;

		break;
 8002e3a:	e04e      	b.n	8002eda <robotArmState+0x13a>
	case 0b0000000000001000: // RUN TRAY MODE
		// 18 PATH
		break;
	case 0b0000000000010000: // RUN POINT MODE
		// POSITION
		registerFrame[1].U16 = 0; // RESET BASE SYSTEM STATUS
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <robotArmState+0x154>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	805a      	strh	r2, [r3, #2]

		// : X-Point
		registerFrame[65].U16 = registerFrame[48].U16; //  Read Target Position
 8002e42:	4b2c      	ldr	r3, [pc, #176]	; (8002ef4 <robotArmState+0x154>)
 8002e44:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8002e48:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <robotArmState+0x154>)
 8002e4a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		registerFrame[66].U16 = 3000;
 8002e4e:	4b29      	ldr	r3, [pc, #164]	; (8002ef4 <robotArmState+0x154>)
 8002e50:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e54:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		registerFrame[67].U16 = 1;
 8002e58:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <robotArmState+0x154>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		registerFrame[64].U16 = 2;
 8002e60:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <robotArmState+0x154>)
 8002e62:	2202      	movs	r2, #2
 8002e64:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		// : Y-Point
		startPointModeY = 1;
 8002e68:	4b24      	ldr	r3, [pc, #144]	; (8002efc <robotArmState+0x15c>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
		initPosY = QEIReadModified*(2 * 3.14159 * 11.205 / 8192);
 8002e6e:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <robotArmState+0x160>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd fb02 	bl	800047c <__aeabi_i2d>
 8002e78:	a31b      	add	r3, pc, #108	; (adr r3, 8002ee8 <robotArmState+0x148>)
 8002e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7e:	f7fd fb67 	bl	8000550 <__aeabi_dmul>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	f7fd fe11 	bl	8000ab0 <__aeabi_d2iz>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4a1c      	ldr	r2, [pc, #112]	; (8002f04 <robotArmState+0x164>)
 8002e92:	6013      	str	r3, [r2, #0]

		registerFrame[16].U16 = 0b0000000000100000; // y-axis Moving Status : Go Point
 8002e94:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <robotArmState+0x154>)
 8002e96:	2220      	movs	r2, #32
 8002e98:	841a      	strh	r2, [r3, #32]
		registerFrame[17].U16 = mmActPos; // y-axis Actual Position
 8002e9a:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <robotArmState+0x168>)
 8002e9c:	edd3 7a00 	vldr	s15, [r3]
 8002ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ea4:	ee17 3a90 	vmov	r3, s15
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <robotArmState+0x154>)
 8002eac:	845a      	strh	r2, [r3, #34]	; 0x22
		registerFrame[18].U16 = mmActVel; // y-axis Actual Speed
 8002eae:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <robotArmState+0x16c>)
 8002eb0:	edd3 7a00 	vldr	s15, [r3]
 8002eb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eb8:	ee17 3a90 	vmov	r3, s15
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <robotArmState+0x154>)
 8002ec0:	849a      	strh	r2, [r3, #36]	; 0x24
		registerFrame[19].U16 = mmActAcc; // y-axis Actual Acceleration
 8002ec2:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <robotArmState+0x170>)
 8002ec4:	edd3 7a00 	vldr	s15, [r3]
 8002ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ecc:	ee17 3a90 	vmov	r3, s15
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <robotArmState+0x154>)
 8002ed4:	84da      	strh	r2, [r3, #38]	; 0x26

		// registerFrame[49].U16

		break;
 8002ed6:	e000      	b.n	8002eda <robotArmState+0x13a>
		break;
 8002ed8:	bf00      	nop
	}
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	f3af 8000 	nop.w
 8002ee8:	464f6faa 	.word	0x464f6faa
 8002eec:	3f8199cb 	.word	0x3f8199cb
 8002ef0:	20000e11 	.word	0x20000e11
 8002ef4:	20000cb0 	.word	0x20000cb0
 8002ef8:	20000244 	.word	0x20000244
 8002efc:	20000e13 	.word	0x20000e13
 8002f00:	20000d78 	.word	0x20000d78
 8002f04:	20000e14 	.word	0x20000e14
 8002f08:	20000d80 	.word	0x20000d80
 8002f0c:	20000e00 	.word	0x20000e00
 8002f10:	20000e04 	.word	0x20000e04

08002f14 <jogAxisX>:

void jogAxisX() {
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
		refXPos = buffer[0].subdata.xAxis;
 8002f18:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <jogAxisX+0x70>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f24:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <jogAxisX+0x74>)
 8002f26:	edc3 7a00 	vstr	s15, [r3]
		if (refXPos > 2500) {
 8002f2a:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <jogAxisX+0x74>)
 8002f2c:	edd3 7a00 	vldr	s15, [r3]
 8002f30:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002f8c <jogAxisX+0x78>
 8002f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3c:	dd07      	ble.n	8002f4e <jogAxisX+0x3a>
			dirAxisX = 1;
 8002f3e:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <jogAxisX+0x7c>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
			registerFrame[64].U16 = 0b0000000000000100;
 8002f44:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <jogAxisX+0x80>)
 8002f46:	2204      	movs	r2, #4
 8002f48:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		{
			registerFrame[64].U16 = 0;

		}

}
 8002f4c:	e015      	b.n	8002f7a <jogAxisX+0x66>
		} else if (refXPos < 1500) {
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <jogAxisX+0x74>)
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002f98 <jogAxisX+0x84>
 8002f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f60:	d507      	bpl.n	8002f72 <jogAxisX+0x5e>
			dirAxisX = 0;
 8002f62:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <jogAxisX+0x7c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
			registerFrame[64].U16 = 0b0000000000001000;
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <jogAxisX+0x80>)
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8002f70:	e003      	b.n	8002f7a <jogAxisX+0x66>
			registerFrame[64].U16 = 0;
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <jogAxisX+0x80>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8002f7a:	bf00      	nop
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	20000d44 	.word	0x20000d44
 8002f88:	20000220 	.word	0x20000220
 8002f8c:	451c4000 	.word	0x451c4000
 8002f90:	2000022a 	.word	0x2000022a
 8002f94:	20000cb0 	.word	0x20000cb0
 8002f98:	44bb8000 	.word	0x44bb8000

08002f9c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa0:	b672      	cpsid	i
}
 8002fa2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002fa4:	e7fe      	b.n	8002fa4 <Error_Handler+0x8>
	...

08002fa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <HAL_MspInit+0x4c>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ff4 <HAL_MspInit+0x4c>)
 8002fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <HAL_MspInit+0x4c>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <HAL_MspInit+0x4c>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	4a08      	ldr	r2, [pc, #32]	; (8002ff4 <HAL_MspInit+0x4c>)
 8002fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_MspInit+0x4c>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002fe6:	2007      	movs	r0, #7
 8002fe8:	f000 fff6 	bl	8003fd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40023800 	.word	0x40023800

08002ff8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a2f      	ldr	r2, [pc, #188]	; (80030d4 <HAL_ADC_MspInit+0xdc>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d157      	bne.n	80030ca <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	4b2e      	ldr	r3, [pc, #184]	; (80030d8 <HAL_ADC_MspInit+0xe0>)
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	4a2d      	ldr	r2, [pc, #180]	; (80030d8 <HAL_ADC_MspInit+0xe0>)
 8003024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003028:	6453      	str	r3, [r2, #68]	; 0x44
 800302a:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <HAL_ADC_MspInit+0xe0>)
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <HAL_ADC_MspInit+0xe0>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	4a26      	ldr	r2, [pc, #152]	; (80030d8 <HAL_ADC_MspInit+0xe0>)
 8003040:	f043 0304 	orr.w	r3, r3, #4
 8003044:	6313      	str	r3, [r2, #48]	; 0x30
 8003046:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <HAL_ADC_MspInit+0xe0>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003052:	2309      	movs	r3, #9
 8003054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003056:	2303      	movs	r3, #3
 8003058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800305e:	f107 0314 	add.w	r3, r7, #20
 8003062:	4619      	mov	r1, r3
 8003064:	481d      	ldr	r0, [pc, #116]	; (80030dc <HAL_ADC_MspInit+0xe4>)
 8003066:	f001 fc07 	bl	8004878 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800306a:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_ADC_MspInit+0xe8>)
 800306c:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <HAL_ADC_MspInit+0xec>)
 800306e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_ADC_MspInit+0xe8>)
 8003072:	2200      	movs	r2, #0
 8003074:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003076:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <HAL_ADC_MspInit+0xe8>)
 8003078:	2200      	movs	r2, #0
 800307a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800307c:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <HAL_ADC_MspInit+0xe8>)
 800307e:	2200      	movs	r2, #0
 8003080:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003082:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <HAL_ADC_MspInit+0xe8>)
 8003084:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003088:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <HAL_ADC_MspInit+0xe8>)
 800308c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003090:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003092:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <HAL_ADC_MspInit+0xe8>)
 8003094:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003098:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800309a:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <HAL_ADC_MspInit+0xe8>)
 800309c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030a2:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_ADC_MspInit+0xe8>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030a8:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <HAL_ADC_MspInit+0xe8>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030ae:	480c      	ldr	r0, [pc, #48]	; (80030e0 <HAL_ADC_MspInit+0xe8>)
 80030b0:	f000 ffd4 	bl	800405c <HAL_DMA_Init>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80030ba:	f7ff ff6f 	bl	8002f9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <HAL_ADC_MspInit+0xe8>)
 80030c2:	639a      	str	r2, [r3, #56]	; 0x38
 80030c4:	4a06      	ldr	r2, [pc, #24]	; (80030e0 <HAL_ADC_MspInit+0xe8>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030ca:	bf00      	nop
 80030cc:	3728      	adds	r7, #40	; 0x28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40012000 	.word	0x40012000
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40020800 	.word	0x40020800
 80030e0:	20000320 	.word	0x20000320
 80030e4:	40026410 	.word	0x40026410

080030e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <HAL_TIM_PWM_MspInit+0x48>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d115      	bne.n	8003126 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <HAL_TIM_PWM_MspInit+0x4c>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	4a0c      	ldr	r2, [pc, #48]	; (8003134 <HAL_TIM_PWM_MspInit+0x4c>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6453      	str	r3, [r2, #68]	; 0x44
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <HAL_TIM_PWM_MspInit+0x4c>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003116:	2200      	movs	r2, #0
 8003118:	2100      	movs	r1, #0
 800311a:	201a      	movs	r0, #26
 800311c:	f000 ff67 	bl	8003fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003120:	201a      	movs	r0, #26
 8003122:	f000 ff80 	bl	8004026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40010000 	.word	0x40010000
 8003134:	40023800 	.word	0x40023800

08003138 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003148:	d116      	bne.n	8003178 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	4b28      	ldr	r3, [pc, #160]	; (80031f0 <HAL_TIM_Base_MspInit+0xb8>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	4a27      	ldr	r2, [pc, #156]	; (80031f0 <HAL_TIM_Base_MspInit+0xb8>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6413      	str	r3, [r2, #64]	; 0x40
 800315a:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <HAL_TIM_Base_MspInit+0xb8>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003166:	2200      	movs	r2, #0
 8003168:	2100      	movs	r1, #0
 800316a:	201c      	movs	r0, #28
 800316c:	f000 ff3f 	bl	8003fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003170:	201c      	movs	r0, #28
 8003172:	f000 ff58 	bl	8004026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003176:	e036      	b.n	80031e6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <HAL_TIM_Base_MspInit+0xbc>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d116      	bne.n	80031b0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <HAL_TIM_Base_MspInit+0xb8>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	4a19      	ldr	r2, [pc, #100]	; (80031f0 <HAL_TIM_Base_MspInit+0xb8>)
 800318c:	f043 0302 	orr.w	r3, r3, #2
 8003190:	6413      	str	r3, [r2, #64]	; 0x40
 8003192:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <HAL_TIM_Base_MspInit+0xb8>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800319e:	2200      	movs	r2, #0
 80031a0:	2100      	movs	r1, #0
 80031a2:	201d      	movs	r0, #29
 80031a4:	f000 ff23 	bl	8003fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031a8:	201d      	movs	r0, #29
 80031aa:	f000 ff3c 	bl	8004026 <HAL_NVIC_EnableIRQ>
}
 80031ae:	e01a      	b.n	80031e6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <HAL_TIM_Base_MspInit+0xc0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d115      	bne.n	80031e6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <HAL_TIM_Base_MspInit+0xb8>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	4a0b      	ldr	r2, [pc, #44]	; (80031f0 <HAL_TIM_Base_MspInit+0xb8>)
 80031c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_TIM_Base_MspInit+0xb8>)
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2100      	movs	r1, #0
 80031da:	201a      	movs	r0, #26
 80031dc:	f000 ff07 	bl	8003fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80031e0:	201a      	movs	r0, #26
 80031e2:	f000 ff20 	bl	8004026 <HAL_NVIC_EnableIRQ>
}
 80031e6:	bf00      	nop
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40014800 	.word	0x40014800

080031fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	; 0x28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a19      	ldr	r2, [pc, #100]	; (8003280 <HAL_TIM_Encoder_MspInit+0x84>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d12b      	bne.n	8003276 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	4b18      	ldr	r3, [pc, #96]	; (8003284 <HAL_TIM_Encoder_MspInit+0x88>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	4a17      	ldr	r2, [pc, #92]	; (8003284 <HAL_TIM_Encoder_MspInit+0x88>)
 8003228:	f043 0308 	orr.w	r3, r3, #8
 800322c:	6413      	str	r3, [r2, #64]	; 0x40
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <HAL_TIM_Encoder_MspInit+0x88>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_TIM_Encoder_MspInit+0x88>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a10      	ldr	r2, [pc, #64]	; (8003284 <HAL_TIM_Encoder_MspInit+0x88>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <HAL_TIM_Encoder_MspInit+0x88>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003256:	2303      	movs	r3, #3
 8003258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325a:	2302      	movs	r3, #2
 800325c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800325e:	2301      	movs	r3, #1
 8003260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003262:	2300      	movs	r3, #0
 8003264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003266:	2302      	movs	r3, #2
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326a:	f107 0314 	add.w	r3, r7, #20
 800326e:	4619      	mov	r1, r3
 8003270:	4805      	ldr	r0, [pc, #20]	; (8003288 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003272:	f001 fb01 	bl	8004878 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003276:	bf00      	nop
 8003278:	3728      	adds	r7, #40	; 0x28
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40000c00 	.word	0x40000c00
 8003284:	40023800 	.word	0x40023800
 8003288:	40020000 	.word	0x40020000

0800328c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003294:	f107 030c 	add.w	r3, r7, #12
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <HAL_TIM_MspPostInit+0x68>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d11e      	bne.n	80032ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <HAL_TIM_MspPostInit+0x6c>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4a10      	ldr	r2, [pc, #64]	; (80032f8 <HAL_TIM_MspPostInit+0x6c>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6313      	str	r3, [r2, #48]	; 0x30
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <HAL_TIM_MspPostInit+0x6c>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d8:	2300      	movs	r3, #0
 80032da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032dc:	2301      	movs	r3, #1
 80032de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	f107 030c 	add.w	r3, r7, #12
 80032e4:	4619      	mov	r1, r3
 80032e6:	4805      	ldr	r0, [pc, #20]	; (80032fc <HAL_TIM_MspPostInit+0x70>)
 80032e8:	f001 fac6 	bl	8004878 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80032ec:	bf00      	nop
 80032ee:	3720      	adds	r7, #32
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40010000 	.word	0x40010000
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40020000 	.word	0x40020000

08003300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a34      	ldr	r2, [pc, #208]	; (80033f0 <HAL_UART_MspInit+0xf0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d161      	bne.n	80033e6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	4b33      	ldr	r3, [pc, #204]	; (80033f4 <HAL_UART_MspInit+0xf4>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	4a32      	ldr	r2, [pc, #200]	; (80033f4 <HAL_UART_MspInit+0xf4>)
 800332c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003330:	6413      	str	r3, [r2, #64]	; 0x40
 8003332:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <HAL_UART_MspInit+0xf4>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <HAL_UART_MspInit+0xf4>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <HAL_UART_MspInit+0xf4>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b29      	ldr	r3, [pc, #164]	; (80033f4 <HAL_UART_MspInit+0xf4>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800335a:	230c      	movs	r3, #12
 800335c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335e:	2302      	movs	r3, #2
 8003360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003366:	2303      	movs	r3, #3
 8003368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800336a:	2307      	movs	r3, #7
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336e:	f107 0314 	add.w	r3, r7, #20
 8003372:	4619      	mov	r1, r3
 8003374:	4820      	ldr	r0, [pc, #128]	; (80033f8 <HAL_UART_MspInit+0xf8>)
 8003376:	f001 fa7f 	bl	8004878 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800337a:	4b20      	ldr	r3, [pc, #128]	; (80033fc <HAL_UART_MspInit+0xfc>)
 800337c:	4a20      	ldr	r2, [pc, #128]	; (8003400 <HAL_UART_MspInit+0x100>)
 800337e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003380:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <HAL_UART_MspInit+0xfc>)
 8003382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003386:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003388:	4b1c      	ldr	r3, [pc, #112]	; (80033fc <HAL_UART_MspInit+0xfc>)
 800338a:	2240      	movs	r2, #64	; 0x40
 800338c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800338e:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_UART_MspInit+0xfc>)
 8003390:	2200      	movs	r2, #0
 8003392:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_UART_MspInit+0xfc>)
 8003396:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800339a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800339c:	4b17      	ldr	r3, [pc, #92]	; (80033fc <HAL_UART_MspInit+0xfc>)
 800339e:	2200      	movs	r2, #0
 80033a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033a2:	4b16      	ldr	r3, [pc, #88]	; (80033fc <HAL_UART_MspInit+0xfc>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <HAL_UART_MspInit+0xfc>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <HAL_UART_MspInit+0xfc>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_UART_MspInit+0xfc>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80033ba:	4810      	ldr	r0, [pc, #64]	; (80033fc <HAL_UART_MspInit+0xfc>)
 80033bc:	f000 fe4e 	bl	800405c <HAL_DMA_Init>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80033c6:	f7ff fde9 	bl	8002f9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a0b      	ldr	r2, [pc, #44]	; (80033fc <HAL_UART_MspInit+0xfc>)
 80033ce:	635a      	str	r2, [r3, #52]	; 0x34
 80033d0:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <HAL_UART_MspInit+0xfc>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2100      	movs	r1, #0
 80033da:	2026      	movs	r0, #38	; 0x26
 80033dc:	f000 fe07 	bl	8003fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033e0:	2026      	movs	r0, #38	; 0x26
 80033e2:	f000 fe20 	bl	8004026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033e6:	bf00      	nop
 80033e8:	3728      	adds	r7, #40	; 0x28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40004400 	.word	0x40004400
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40020000 	.word	0x40020000
 80033fc:	20000778 	.word	0x20000778
 8003400:	400260a0 	.word	0x400260a0

08003404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003408:	e7fe      	b.n	8003408 <NMI_Handler+0x4>

0800340a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800340e:	e7fe      	b.n	800340e <HardFault_Handler+0x4>

08003410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003414:	e7fe      	b.n	8003414 <MemManage_Handler+0x4>

08003416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800341a:	e7fe      	b.n	800341a <BusFault_Handler+0x4>

0800341c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003420:	e7fe      	b.n	8003420 <UsageFault_Handler+0x4>

08003422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003422:	b480      	push	{r7}
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800343e:	b480      	push	{r7}
 8003440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003450:	f000 f8d0 	bl	80035f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003454:	bf00      	nop
 8003456:	bd80      	pop	{r7, pc}

08003458 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800345c:	4802      	ldr	r0, [pc, #8]	; (8003468 <DMA1_Stream6_IRQHandler+0x10>)
 800345e:	f000 ff95 	bl	800438c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000778 	.word	0x20000778

0800346c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003470:	4803      	ldr	r0, [pc, #12]	; (8003480 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003472:	f002 fce9 	bl	8005e48 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003476:	4803      	ldr	r0, [pc, #12]	; (8003484 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003478:	f002 fce6 	bl	8005e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800347c:	bf00      	nop
 800347e:	bd80      	pop	{r7, pc}
 8003480:	20000380 	.word	0x20000380
 8003484:	20000650 	.word	0x20000650

08003488 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800348c:	4802      	ldr	r0, [pc, #8]	; (8003498 <TIM2_IRQHandler+0x10>)
 800348e:	f002 fcdb 	bl	8005e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000434 	.word	0x20000434

0800349c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <TIM3_IRQHandler+0x10>)
 80034a2:	f002 fcd1 	bl	8005e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	200004e8 	.word	0x200004e8

080034b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034b4:	4802      	ldr	r0, [pc, #8]	; (80034c0 <USART2_IRQHandler+0x10>)
 80034b6:	f003 ffcf 	bl	8007458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000704 	.word	0x20000704

080034c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034c8:	4802      	ldr	r0, [pc, #8]	; (80034d4 <DMA2_Stream0_IRQHandler+0x10>)
 80034ca:	f000 ff5f 	bl	800438c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000320 	.word	0x20000320

080034d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <SystemInit+0x20>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	4a05      	ldr	r2, [pc, #20]	; (80034f8 <SystemInit+0x20>)
 80034e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003534 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003500:	480d      	ldr	r0, [pc, #52]	; (8003538 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003502:	490e      	ldr	r1, [pc, #56]	; (800353c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003504:	4a0e      	ldr	r2, [pc, #56]	; (8003540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003508:	e002      	b.n	8003510 <LoopCopyDataInit>

0800350a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800350a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800350c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800350e:	3304      	adds	r3, #4

08003510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003514:	d3f9      	bcc.n	800350a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003516:	4a0b      	ldr	r2, [pc, #44]	; (8003544 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003518:	4c0b      	ldr	r4, [pc, #44]	; (8003548 <LoopFillZerobss+0x26>)
  movs r3, #0
 800351a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800351c:	e001      	b.n	8003522 <LoopFillZerobss>

0800351e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800351e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003520:	3204      	adds	r2, #4

08003522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003524:	d3fb      	bcc.n	800351e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003526:	f7ff ffd7 	bl	80034d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800352a:	f004 ffe1 	bl	80084f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800352e:	f7fe f815 	bl	800155c <main>
  bx  lr    
 8003532:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800353c:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8003540:	08009418 	.word	0x08009418
  ldr r2, =_sbss
 8003544:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8003548:	20000e24 	.word	0x20000e24

0800354c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800354c:	e7fe      	b.n	800354c <ADC_IRQHandler>
	...

08003550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <HAL_Init+0x40>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a0d      	ldr	r2, [pc, #52]	; (8003590 <HAL_Init+0x40>)
 800355a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800355e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_Init+0x40>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <HAL_Init+0x40>)
 8003566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800356a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800356c:	4b08      	ldr	r3, [pc, #32]	; (8003590 <HAL_Init+0x40>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a07      	ldr	r2, [pc, #28]	; (8003590 <HAL_Init+0x40>)
 8003572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003578:	2003      	movs	r0, #3
 800357a:	f000 fd2d 	bl	8003fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800357e:	2000      	movs	r0, #0
 8003580:	f000 f808 	bl	8003594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003584:	f7ff fd10 	bl	8002fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023c00 	.word	0x40023c00

08003594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800359c:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_InitTick+0x54>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_InitTick+0x58>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	4619      	mov	r1, r3
 80035a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fd45 	bl	8004042 <HAL_SYSTICK_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e00e      	b.n	80035e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b0f      	cmp	r3, #15
 80035c6:	d80a      	bhi.n	80035de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035c8:	2200      	movs	r2, #0
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	f000 fd0d 	bl	8003fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035d4:	4a06      	ldr	r2, [pc, #24]	; (80035f0 <HAL_InitTick+0x5c>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000248 	.word	0x20000248
 80035ec:	20000250 	.word	0x20000250
 80035f0:	2000024c 	.word	0x2000024c

080035f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_IncTick+0x20>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_IncTick+0x24>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4413      	add	r3, r2
 8003604:	4a04      	ldr	r2, [pc, #16]	; (8003618 <HAL_IncTick+0x24>)
 8003606:	6013      	str	r3, [r2, #0]
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	20000250 	.word	0x20000250
 8003618:	20000e20 	.word	0x20000e20

0800361c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return uwTick;
 8003620:	4b03      	ldr	r3, [pc, #12]	; (8003630 <HAL_GetTick+0x14>)
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20000e20 	.word	0x20000e20

08003634 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e033      	b.n	80036b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff fcd0 	bl	8002ff8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	d118      	bne.n	80036a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800367a:	f023 0302 	bic.w	r3, r3, #2
 800367e:	f043 0202 	orr.w	r2, r3, #2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa58 	bl	8003b3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f023 0303 	bic.w	r3, r3, #3
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
 80036a2:	e001      	b.n	80036a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_ADC_Start_DMA+0x1e>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e0ce      	b.n	8003878 <HAL_ADC_Start_DMA+0x1bc>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d018      	beq.n	8003722 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003700:	4b5f      	ldr	r3, [pc, #380]	; (8003880 <HAL_ADC_Start_DMA+0x1c4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a5f      	ldr	r2, [pc, #380]	; (8003884 <HAL_ADC_Start_DMA+0x1c8>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	0c9a      	lsrs	r2, r3, #18
 800370c:	4613      	mov	r3, r2
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4413      	add	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003714:	e002      	b.n	800371c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	3b01      	subs	r3, #1
 800371a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f9      	bne.n	8003716 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003730:	d107      	bne.n	8003742 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003740:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b01      	cmp	r3, #1
 800374e:	f040 8086 	bne.w	800385e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800377c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800378c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003790:	d106      	bne.n	80037a0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f023 0206 	bic.w	r2, r3, #6
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
 800379e:	e002      	b.n	80037a6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037ae:	4b36      	ldr	r3, [pc, #216]	; (8003888 <HAL_ADC_Start_DMA+0x1cc>)
 80037b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	4a35      	ldr	r2, [pc, #212]	; (800388c <HAL_ADC_Start_DMA+0x1d0>)
 80037b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	4a34      	ldr	r2, [pc, #208]	; (8003890 <HAL_ADC_Start_DMA+0x1d4>)
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	4a33      	ldr	r2, [pc, #204]	; (8003894 <HAL_ADC_Start_DMA+0x1d8>)
 80037c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80037d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80037e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	334c      	adds	r3, #76	; 0x4c
 80037fe:	4619      	mov	r1, r3
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f000 fcd8 	bl	80041b8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10f      	bne.n	8003834 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d129      	bne.n	8003876 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	e020      	b.n	8003876 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a17      	ldr	r2, [pc, #92]	; (8003898 <HAL_ADC_Start_DMA+0x1dc>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d11b      	bne.n	8003876 <HAL_ADC_Start_DMA+0x1ba>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d114      	bne.n	8003876 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	e00b      	b.n	8003876 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f043 0210 	orr.w	r2, r3, #16
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	f043 0201 	orr.w	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	20000248 	.word	0x20000248
 8003884:	431bde83 	.word	0x431bde83
 8003888:	40012300 	.word	0x40012300
 800388c:	08003d35 	.word	0x08003d35
 8003890:	08003def 	.word	0x08003def
 8003894:	08003e0b 	.word	0x08003e0b
 8003898:	40012000 	.word	0x40012000

0800389c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x1c>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e113      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x244>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b09      	cmp	r3, #9
 8003902:	d925      	bls.n	8003950 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68d9      	ldr	r1, [r3, #12]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	4613      	mov	r3, r2
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4413      	add	r3, r2
 8003918:	3b1e      	subs	r3, #30
 800391a:	2207      	movs	r2, #7
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43da      	mvns	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	400a      	ands	r2, r1
 8003928:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68d9      	ldr	r1, [r3, #12]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	b29b      	uxth	r3, r3
 800393a:	4618      	mov	r0, r3
 800393c:	4603      	mov	r3, r0
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4403      	add	r3, r0
 8003942:	3b1e      	subs	r3, #30
 8003944:	409a      	lsls	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	60da      	str	r2, [r3, #12]
 800394e:	e022      	b.n	8003996 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6919      	ldr	r1, [r3, #16]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	b29b      	uxth	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	4613      	mov	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	4413      	add	r3, r2
 8003964:	2207      	movs	r2, #7
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43da      	mvns	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	400a      	ands	r2, r1
 8003972:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6919      	ldr	r1, [r3, #16]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	b29b      	uxth	r3, r3
 8003984:	4618      	mov	r0, r3
 8003986:	4603      	mov	r3, r0
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	4403      	add	r3, r0
 800398c:	409a      	lsls	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b06      	cmp	r3, #6
 800399c:	d824      	bhi.n	80039e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	3b05      	subs	r3, #5
 80039b0:	221f      	movs	r2, #31
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43da      	mvns	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	400a      	ands	r2, r1
 80039be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	4618      	mov	r0, r3
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	3b05      	subs	r3, #5
 80039da:	fa00 f203 	lsl.w	r2, r0, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	635a      	str	r2, [r3, #52]	; 0x34
 80039e6:	e04c      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b0c      	cmp	r3, #12
 80039ee:	d824      	bhi.n	8003a3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	3b23      	subs	r3, #35	; 0x23
 8003a02:	221f      	movs	r2, #31
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	400a      	ands	r2, r1
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	4618      	mov	r0, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	3b23      	subs	r3, #35	; 0x23
 8003a2c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
 8003a38:	e023      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	3b41      	subs	r3, #65	; 0x41
 8003a4c:	221f      	movs	r2, #31
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43da      	mvns	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	400a      	ands	r2, r1
 8003a5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	4618      	mov	r0, r3
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	3b41      	subs	r3, #65	; 0x41
 8003a76:	fa00 f203 	lsl.w	r2, r0, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a82:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <HAL_ADC_ConfigChannel+0x250>)
 8003a84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a28      	ldr	r2, [pc, #160]	; (8003b2c <HAL_ADC_ConfigChannel+0x254>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d10f      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x1d8>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b12      	cmp	r3, #18
 8003a96:	d10b      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <HAL_ADC_ConfigChannel+0x254>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d12b      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x23a>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <HAL_ADC_ConfigChannel+0x258>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <HAL_ADC_ConfigChannel+0x1f4>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b11      	cmp	r3, #17
 8003aca:	d122      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a11      	ldr	r2, [pc, #68]	; (8003b30 <HAL_ADC_ConfigChannel+0x258>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d111      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003aee:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <HAL_ADC_ConfigChannel+0x25c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a11      	ldr	r2, [pc, #68]	; (8003b38 <HAL_ADC_ConfigChannel+0x260>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	0c9a      	lsrs	r2, r3, #18
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b04:	e002      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f9      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40012300 	.word	0x40012300
 8003b2c:	40012000 	.word	0x40012000
 8003b30:	10000012 	.word	0x10000012
 8003b34:	20000248 	.word	0x20000248
 8003b38:	431bde83 	.word	0x431bde83

08003b3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b44:	4b79      	ldr	r3, [pc, #484]	; (8003d2c <ADC_Init+0x1f0>)
 8003b46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6859      	ldr	r1, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	021a      	lsls	r2, r3, #8
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6899      	ldr	r1, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	4a58      	ldr	r2, [pc, #352]	; (8003d30 <ADC_Init+0x1f4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d022      	beq.n	8003c1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003be2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6899      	ldr	r1, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6899      	ldr	r1, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	e00f      	b.n	8003c3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0202 	bic.w	r2, r2, #2
 8003c48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6899      	ldr	r1, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7e1b      	ldrb	r3, [r3, #24]
 8003c54:	005a      	lsls	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01b      	beq.n	8003ca0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6859      	ldr	r1, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	3b01      	subs	r3, #1
 8003c94:	035a      	lsls	r2, r3, #13
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	e007      	b.n	8003cb0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	051a      	lsls	r2, r3, #20
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ce4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6899      	ldr	r1, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cf2:	025a      	lsls	r2, r3, #9
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6899      	ldr	r1, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	029a      	lsls	r2, r3, #10
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	609a      	str	r2, [r3, #8]
}
 8003d20:	bf00      	nop
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40012300 	.word	0x40012300
 8003d30:	0f000001 	.word	0x0f000001

08003d34 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d13c      	bne.n	8003dc8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d12b      	bne.n	8003dc0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d127      	bne.n	8003dc0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d006      	beq.n	8003d8c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d119      	bne.n	8003dc0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0220 	bic.w	r2, r2, #32
 8003d9a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	f043 0201 	orr.w	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f7ff fd6b 	bl	800389c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003dc6:	e00e      	b.n	8003de6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f7ff fd75 	bl	80038c4 <HAL_ADC_ErrorCallback>
}
 8003dda:	e004      	b.n	8003de6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
}
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f7ff fd57 	bl	80038b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e02:	bf00      	nop
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2240      	movs	r2, #64	; 0x40
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	f043 0204 	orr.w	r2, r3, #4
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7ff fd4a 	bl	80038c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e30:	bf00      	nop
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e48:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <__NVIC_SetPriorityGrouping+0x44>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e54:	4013      	ands	r3, r2
 8003e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e6a:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <__NVIC_SetPriorityGrouping+0x44>)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	60d3      	str	r3, [r2, #12]
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <__NVIC_GetPriorityGrouping+0x18>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	0a1b      	lsrs	r3, r3, #8
 8003e8a:	f003 0307 	and.w	r3, r3, #7
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	db0b      	blt.n	8003ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	f003 021f 	and.w	r2, r3, #31
 8003eb4:	4907      	ldr	r1, [pc, #28]	; (8003ed4 <__NVIC_EnableIRQ+0x38>)
 8003eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	2001      	movs	r0, #1
 8003ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8003ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	e000e100 	.word	0xe000e100

08003ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	6039      	str	r1, [r7, #0]
 8003ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	db0a      	blt.n	8003f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	490c      	ldr	r1, [pc, #48]	; (8003f24 <__NVIC_SetPriority+0x4c>)
 8003ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef6:	0112      	lsls	r2, r2, #4
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	440b      	add	r3, r1
 8003efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f00:	e00a      	b.n	8003f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	4908      	ldr	r1, [pc, #32]	; (8003f28 <__NVIC_SetPriority+0x50>)
 8003f08:	79fb      	ldrb	r3, [r7, #7]
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	3b04      	subs	r3, #4
 8003f10:	0112      	lsls	r2, r2, #4
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	440b      	add	r3, r1
 8003f16:	761a      	strb	r2, [r3, #24]
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	e000e100 	.word	0xe000e100
 8003f28:	e000ed00 	.word	0xe000ed00

08003f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b089      	sub	sp, #36	; 0x24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f1c3 0307 	rsb	r3, r3, #7
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	bf28      	it	cs
 8003f4a:	2304      	movcs	r3, #4
 8003f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	3304      	adds	r3, #4
 8003f52:	2b06      	cmp	r3, #6
 8003f54:	d902      	bls.n	8003f5c <NVIC_EncodePriority+0x30>
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	3b03      	subs	r3, #3
 8003f5a:	e000      	b.n	8003f5e <NVIC_EncodePriority+0x32>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f60:	f04f 32ff 	mov.w	r2, #4294967295
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43da      	mvns	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	401a      	ands	r2, r3
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f74:	f04f 31ff 	mov.w	r1, #4294967295
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7e:	43d9      	mvns	r1, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f84:	4313      	orrs	r3, r2
         );
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3724      	adds	r7, #36	; 0x24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fa4:	d301      	bcc.n	8003faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e00f      	b.n	8003fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003faa:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <SysTick_Config+0x40>)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fb2:	210f      	movs	r1, #15
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	f7ff ff8e 	bl	8003ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <SysTick_Config+0x40>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fc2:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <SysTick_Config+0x40>)
 8003fc4:	2207      	movs	r2, #7
 8003fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	e000e010 	.word	0xe000e010

08003fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7ff ff29 	bl	8003e38 <__NVIC_SetPriorityGrouping>
}
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b086      	sub	sp, #24
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004000:	f7ff ff3e 	bl	8003e80 <__NVIC_GetPriorityGrouping>
 8004004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	6978      	ldr	r0, [r7, #20]
 800400c:	f7ff ff8e 	bl	8003f2c <NVIC_EncodePriority>
 8004010:	4602      	mov	r2, r0
 8004012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ff5d 	bl	8003ed8 <__NVIC_SetPriority>
}
 800401e:	bf00      	nop
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	4603      	mov	r3, r0
 800402e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff ff31 	bl	8003e9c <__NVIC_EnableIRQ>
}
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b082      	sub	sp, #8
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff ffa2 	bl	8003f94 <SysTick_Config>
 8004050:	4603      	mov	r3, r0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004068:	f7ff fad8 	bl	800361c <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e099      	b.n	80041ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0201 	bic.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004098:	e00f      	b.n	80040ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800409a:	f7ff fabf 	bl	800361c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b05      	cmp	r3, #5
 80040a6:	d908      	bls.n	80040ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2203      	movs	r2, #3
 80040b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e078      	b.n	80041ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e8      	bne.n	800409a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	4b38      	ldr	r3, [pc, #224]	; (80041b4 <HAL_DMA_Init+0x158>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	2b04      	cmp	r3, #4
 8004112:	d107      	bne.n	8004124 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	4313      	orrs	r3, r2
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f023 0307 	bic.w	r3, r3, #7
 800413a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	2b04      	cmp	r3, #4
 800414c:	d117      	bne.n	800417e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00e      	beq.n	800417e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fb0d 	bl	8004780 <DMA_CheckFifoParam>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2240      	movs	r2, #64	; 0x40
 8004170:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800417a:	2301      	movs	r3, #1
 800417c:	e016      	b.n	80041ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fac4 	bl	8004714 <DMA_CalcBaseAndBitshift>
 800418c:	4603      	mov	r3, r0
 800418e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004194:	223f      	movs	r2, #63	; 0x3f
 8004196:	409a      	lsls	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	f010803f 	.word	0xf010803f

080041b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_DMA_Start_IT+0x26>
 80041da:	2302      	movs	r3, #2
 80041dc:	e040      	b.n	8004260 <HAL_DMA_Start_IT+0xa8>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d12f      	bne.n	8004252 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2202      	movs	r2, #2
 80041f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fa56 	bl	80046b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	223f      	movs	r2, #63	; 0x3f
 8004212:	409a      	lsls	r2, r3
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0216 	orr.w	r2, r2, #22
 8004226:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0208 	orr.w	r2, r2, #8
 800423e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	e005      	b.n	800425e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800425a:	2302      	movs	r3, #2
 800425c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800425e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004276:	f7ff f9d1 	bl	800361c <HAL_GetTick>
 800427a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d008      	beq.n	800429a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2280      	movs	r2, #128	; 0x80
 800428c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e052      	b.n	8004340 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0216 	bic.w	r2, r2, #22
 80042a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d103      	bne.n	80042ca <HAL_DMA_Abort+0x62>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0208 	bic.w	r2, r2, #8
 80042d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042ea:	e013      	b.n	8004314 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042ec:	f7ff f996 	bl	800361c <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b05      	cmp	r3, #5
 80042f8:	d90c      	bls.n	8004314 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2203      	movs	r2, #3
 8004304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e015      	b.n	8004340 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e4      	bne.n	80042ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004326:	223f      	movs	r2, #63	; 0x3f
 8004328:	409a      	lsls	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d004      	beq.n	8004366 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2280      	movs	r2, #128	; 0x80
 8004360:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e00c      	b.n	8004380 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2205      	movs	r2, #5
 800436a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0201 	bic.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004398:	4b8e      	ldr	r3, [pc, #568]	; (80045d4 <HAL_DMA_IRQHandler+0x248>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a8e      	ldr	r2, [pc, #568]	; (80045d8 <HAL_DMA_IRQHandler+0x24c>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	0a9b      	lsrs	r3, r3, #10
 80043a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b6:	2208      	movs	r2, #8
 80043b8:	409a      	lsls	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4013      	ands	r3, r2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01a      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d013      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0204 	bic.w	r2, r2, #4
 80043de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e4:	2208      	movs	r2, #8
 80043e6:	409a      	lsls	r2, r3
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f0:	f043 0201 	orr.w	r2, r3, #1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fc:	2201      	movs	r2, #1
 80043fe:	409a      	lsls	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4013      	ands	r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d012      	beq.n	800442e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00b      	beq.n	800442e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441a:	2201      	movs	r2, #1
 800441c:	409a      	lsls	r2, r3
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004426:	f043 0202 	orr.w	r2, r3, #2
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004432:	2204      	movs	r2, #4
 8004434:	409a      	lsls	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d012      	beq.n	8004464 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00b      	beq.n	8004464 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004450:	2204      	movs	r2, #4
 8004452:	409a      	lsls	r2, r3
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	f043 0204 	orr.w	r2, r3, #4
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004468:	2210      	movs	r2, #16
 800446a:	409a      	lsls	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4013      	ands	r3, r2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d043      	beq.n	80044fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	d03c      	beq.n	80044fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004486:	2210      	movs	r2, #16
 8004488:	409a      	lsls	r2, r3
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d018      	beq.n	80044ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d108      	bne.n	80044bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d024      	beq.n	80044fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	4798      	blx	r3
 80044ba:	e01f      	b.n	80044fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d01b      	beq.n	80044fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	4798      	blx	r3
 80044cc:	e016      	b.n	80044fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d107      	bne.n	80044ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0208 	bic.w	r2, r2, #8
 80044ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004500:	2220      	movs	r2, #32
 8004502:	409a      	lsls	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 808f 	beq.w	800462c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8087 	beq.w	800462c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004522:	2220      	movs	r2, #32
 8004524:	409a      	lsls	r2, r3
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b05      	cmp	r3, #5
 8004534:	d136      	bne.n	80045a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0216 	bic.w	r2, r2, #22
 8004544:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004554:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d103      	bne.n	8004566 <HAL_DMA_IRQHandler+0x1da>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0208 	bic.w	r2, r2, #8
 8004574:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457a:	223f      	movs	r2, #63	; 0x3f
 800457c:	409a      	lsls	r2, r3
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004596:	2b00      	cmp	r3, #0
 8004598:	d07e      	beq.n	8004698 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	4798      	blx	r3
        }
        return;
 80045a2:	e079      	b.n	8004698 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d01d      	beq.n	80045ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10d      	bne.n	80045dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d031      	beq.n	800462c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	4798      	blx	r3
 80045d0:	e02c      	b.n	800462c <HAL_DMA_IRQHandler+0x2a0>
 80045d2:	bf00      	nop
 80045d4:	20000248 	.word	0x20000248
 80045d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d023      	beq.n	800462c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4798      	blx	r3
 80045ec:	e01e      	b.n	800462c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10f      	bne.n	800461c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0210 	bic.w	r2, r2, #16
 800460a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004630:	2b00      	cmp	r3, #0
 8004632:	d032      	beq.n	800469a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d022      	beq.n	8004686 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2205      	movs	r2, #5
 8004644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	3301      	adds	r3, #1
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	429a      	cmp	r2, r3
 8004662:	d307      	bcc.n	8004674 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f2      	bne.n	8004658 <HAL_DMA_IRQHandler+0x2cc>
 8004672:	e000      	b.n	8004676 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004674:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	4798      	blx	r3
 8004696:	e000      	b.n	800469a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004698:	bf00      	nop
    }
  }
}
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b40      	cmp	r3, #64	; 0x40
 80046e4:	d108      	bne.n	80046f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046f6:	e007      	b.n	8004708 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	60da      	str	r2, [r3, #12]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	3b10      	subs	r3, #16
 8004724:	4a14      	ldr	r2, [pc, #80]	; (8004778 <DMA_CalcBaseAndBitshift+0x64>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800472e:	4a13      	ldr	r2, [pc, #76]	; (800477c <DMA_CalcBaseAndBitshift+0x68>)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b03      	cmp	r3, #3
 8004740:	d909      	bls.n	8004756 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800474a:	f023 0303 	bic.w	r3, r3, #3
 800474e:	1d1a      	adds	r2, r3, #4
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	659a      	str	r2, [r3, #88]	; 0x58
 8004754:	e007      	b.n	8004766 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800475e:	f023 0303 	bic.w	r3, r3, #3
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	aaaaaaab 	.word	0xaaaaaaab
 800477c:	080093d0 	.word	0x080093d0

08004780 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d11f      	bne.n	80047da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b03      	cmp	r3, #3
 800479e:	d856      	bhi.n	800484e <DMA_CheckFifoParam+0xce>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <DMA_CheckFifoParam+0x28>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047b9 	.word	0x080047b9
 80047ac:	080047cb 	.word	0x080047cb
 80047b0:	080047b9 	.word	0x080047b9
 80047b4:	0800484f 	.word	0x0800484f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d046      	beq.n	8004852 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047c8:	e043      	b.n	8004852 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047d2:	d140      	bne.n	8004856 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d8:	e03d      	b.n	8004856 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e2:	d121      	bne.n	8004828 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d837      	bhi.n	800485a <DMA_CheckFifoParam+0xda>
 80047ea:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <DMA_CheckFifoParam+0x70>)
 80047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f0:	08004801 	.word	0x08004801
 80047f4:	08004807 	.word	0x08004807
 80047f8:	08004801 	.word	0x08004801
 80047fc:	08004819 	.word	0x08004819
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	73fb      	strb	r3, [r7, #15]
      break;
 8004804:	e030      	b.n	8004868 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d025      	beq.n	800485e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004816:	e022      	b.n	800485e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004820:	d11f      	bne.n	8004862 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004826:	e01c      	b.n	8004862 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d903      	bls.n	8004836 <DMA_CheckFifoParam+0xb6>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d003      	beq.n	800483c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004834:	e018      	b.n	8004868 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	73fb      	strb	r3, [r7, #15]
      break;
 800483a:	e015      	b.n	8004868 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00e      	beq.n	8004866 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	73fb      	strb	r3, [r7, #15]
      break;
 800484c:	e00b      	b.n	8004866 <DMA_CheckFifoParam+0xe6>
      break;
 800484e:	bf00      	nop
 8004850:	e00a      	b.n	8004868 <DMA_CheckFifoParam+0xe8>
      break;
 8004852:	bf00      	nop
 8004854:	e008      	b.n	8004868 <DMA_CheckFifoParam+0xe8>
      break;
 8004856:	bf00      	nop
 8004858:	e006      	b.n	8004868 <DMA_CheckFifoParam+0xe8>
      break;
 800485a:	bf00      	nop
 800485c:	e004      	b.n	8004868 <DMA_CheckFifoParam+0xe8>
      break;
 800485e:	bf00      	nop
 8004860:	e002      	b.n	8004868 <DMA_CheckFifoParam+0xe8>
      break;   
 8004862:	bf00      	nop
 8004864:	e000      	b.n	8004868 <DMA_CheckFifoParam+0xe8>
      break;
 8004866:	bf00      	nop
    }
  } 
  
  return status; 
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop

08004878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004878:	b480      	push	{r7}
 800487a:	b089      	sub	sp, #36	; 0x24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004886:	2300      	movs	r3, #0
 8004888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800488a:	2300      	movs	r3, #0
 800488c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	e159      	b.n	8004b48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004894:	2201      	movs	r2, #1
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4013      	ands	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	f040 8148 	bne.w	8004b42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d005      	beq.n	80048ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d130      	bne.n	800492c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	2203      	movs	r2, #3
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4013      	ands	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004900:	2201      	movs	r2, #1
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	f003 0201 	and.w	r2, r3, #1
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4313      	orrs	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	2b03      	cmp	r3, #3
 8004936:	d017      	beq.n	8004968 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	2203      	movs	r2, #3
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	43db      	mvns	r3, r3
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4013      	ands	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4313      	orrs	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f003 0303 	and.w	r3, r3, #3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d123      	bne.n	80049bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	08da      	lsrs	r2, r3, #3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3208      	adds	r2, #8
 800497c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	220f      	movs	r2, #15
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4013      	ands	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	08da      	lsrs	r2, r3, #3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3208      	adds	r2, #8
 80049b6:	69b9      	ldr	r1, [r7, #24]
 80049b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	2203      	movs	r2, #3
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	43db      	mvns	r3, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4013      	ands	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 0203 	and.w	r2, r3, #3
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80a2 	beq.w	8004b42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	4b57      	ldr	r3, [pc, #348]	; (8004b60 <HAL_GPIO_Init+0x2e8>)
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	4a56      	ldr	r2, [pc, #344]	; (8004b60 <HAL_GPIO_Init+0x2e8>)
 8004a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a0e:	4b54      	ldr	r3, [pc, #336]	; (8004b60 <HAL_GPIO_Init+0x2e8>)
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a1a:	4a52      	ldr	r2, [pc, #328]	; (8004b64 <HAL_GPIO_Init+0x2ec>)
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	089b      	lsrs	r3, r3, #2
 8004a20:	3302      	adds	r3, #2
 8004a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	220f      	movs	r2, #15
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43db      	mvns	r3, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a49      	ldr	r2, [pc, #292]	; (8004b68 <HAL_GPIO_Init+0x2f0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d019      	beq.n	8004a7a <HAL_GPIO_Init+0x202>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a48      	ldr	r2, [pc, #288]	; (8004b6c <HAL_GPIO_Init+0x2f4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <HAL_GPIO_Init+0x1fe>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a47      	ldr	r2, [pc, #284]	; (8004b70 <HAL_GPIO_Init+0x2f8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00d      	beq.n	8004a72 <HAL_GPIO_Init+0x1fa>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a46      	ldr	r2, [pc, #280]	; (8004b74 <HAL_GPIO_Init+0x2fc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d007      	beq.n	8004a6e <HAL_GPIO_Init+0x1f6>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a45      	ldr	r2, [pc, #276]	; (8004b78 <HAL_GPIO_Init+0x300>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d101      	bne.n	8004a6a <HAL_GPIO_Init+0x1f2>
 8004a66:	2304      	movs	r3, #4
 8004a68:	e008      	b.n	8004a7c <HAL_GPIO_Init+0x204>
 8004a6a:	2307      	movs	r3, #7
 8004a6c:	e006      	b.n	8004a7c <HAL_GPIO_Init+0x204>
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e004      	b.n	8004a7c <HAL_GPIO_Init+0x204>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e002      	b.n	8004a7c <HAL_GPIO_Init+0x204>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <HAL_GPIO_Init+0x204>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	f002 0203 	and.w	r2, r2, #3
 8004a82:	0092      	lsls	r2, r2, #2
 8004a84:	4093      	lsls	r3, r2
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a8c:	4935      	ldr	r1, [pc, #212]	; (8004b64 <HAL_GPIO_Init+0x2ec>)
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	089b      	lsrs	r3, r3, #2
 8004a92:	3302      	adds	r3, #2
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a9a:	4b38      	ldr	r3, [pc, #224]	; (8004b7c <HAL_GPIO_Init+0x304>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	43db      	mvns	r3, r3
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004abe:	4a2f      	ldr	r2, [pc, #188]	; (8004b7c <HAL_GPIO_Init+0x304>)
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ac4:	4b2d      	ldr	r3, [pc, #180]	; (8004b7c <HAL_GPIO_Init+0x304>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	43db      	mvns	r3, r3
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ae8:	4a24      	ldr	r2, [pc, #144]	; (8004b7c <HAL_GPIO_Init+0x304>)
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004aee:	4b23      	ldr	r3, [pc, #140]	; (8004b7c <HAL_GPIO_Init+0x304>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	43db      	mvns	r3, r3
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	4013      	ands	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b12:	4a1a      	ldr	r2, [pc, #104]	; (8004b7c <HAL_GPIO_Init+0x304>)
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b18:	4b18      	ldr	r3, [pc, #96]	; (8004b7c <HAL_GPIO_Init+0x304>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	43db      	mvns	r3, r3
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	4013      	ands	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b3c:	4a0f      	ldr	r2, [pc, #60]	; (8004b7c <HAL_GPIO_Init+0x304>)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	3301      	adds	r3, #1
 8004b46:	61fb      	str	r3, [r7, #28]
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	2b0f      	cmp	r3, #15
 8004b4c:	f67f aea2 	bls.w	8004894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	3724      	adds	r7, #36	; 0x24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	40023800 	.word	0x40023800
 8004b64:	40013800 	.word	0x40013800
 8004b68:	40020000 	.word	0x40020000
 8004b6c:	40020400 	.word	0x40020400
 8004b70:	40020800 	.word	0x40020800
 8004b74:	40020c00 	.word	0x40020c00
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	40013c00 	.word	0x40013c00

08004b80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	887b      	ldrh	r3, [r7, #2]
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
 8004b9c:	e001      	b.n	8004ba2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	807b      	strh	r3, [r7, #2]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bc0:	787b      	ldrb	r3, [r7, #1]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bc6:	887a      	ldrh	r2, [r7, #2]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bcc:	e003      	b.n	8004bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bce:	887b      	ldrh	r3, [r7, #2]
 8004bd0:	041a      	lsls	r2, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	619a      	str	r2, [r3, #24]
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
	...

08004be4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e267      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d075      	beq.n	8004cee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c02:	4b88      	ldr	r3, [pc, #544]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d00c      	beq.n	8004c28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c0e:	4b85      	ldr	r3, [pc, #532]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d112      	bne.n	8004c40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c1a:	4b82      	ldr	r3, [pc, #520]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c26:	d10b      	bne.n	8004c40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c28:	4b7e      	ldr	r3, [pc, #504]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d05b      	beq.n	8004cec <HAL_RCC_OscConfig+0x108>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d157      	bne.n	8004cec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e242      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c48:	d106      	bne.n	8004c58 <HAL_RCC_OscConfig+0x74>
 8004c4a:	4b76      	ldr	r3, [pc, #472]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a75      	ldr	r2, [pc, #468]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	e01d      	b.n	8004c94 <HAL_RCC_OscConfig+0xb0>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c60:	d10c      	bne.n	8004c7c <HAL_RCC_OscConfig+0x98>
 8004c62:	4b70      	ldr	r3, [pc, #448]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a6f      	ldr	r2, [pc, #444]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	4b6d      	ldr	r3, [pc, #436]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a6c      	ldr	r2, [pc, #432]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	e00b      	b.n	8004c94 <HAL_RCC_OscConfig+0xb0>
 8004c7c:	4b69      	ldr	r3, [pc, #420]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a68      	ldr	r2, [pc, #416]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	4b66      	ldr	r3, [pc, #408]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a65      	ldr	r2, [pc, #404]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d013      	beq.n	8004cc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9c:	f7fe fcbe 	bl	800361c <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca4:	f7fe fcba 	bl	800361c <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	; 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e207      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb6:	4b5b      	ldr	r3, [pc, #364]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCC_OscConfig+0xc0>
 8004cc2:	e014      	b.n	8004cee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc4:	f7fe fcaa 	bl	800361c <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ccc:	f7fe fca6 	bl	800361c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b64      	cmp	r3, #100	; 0x64
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e1f3      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cde:	4b51      	ldr	r3, [pc, #324]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0xe8>
 8004cea:	e000      	b.n	8004cee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d063      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cfa:	4b4a      	ldr	r3, [pc, #296]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00b      	beq.n	8004d1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d06:	4b47      	ldr	r3, [pc, #284]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d11c      	bne.n	8004d4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d12:	4b44      	ldr	r3, [pc, #272]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d116      	bne.n	8004d4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d1e:	4b41      	ldr	r3, [pc, #260]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_RCC_OscConfig+0x152>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d001      	beq.n	8004d36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e1c7      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d36:	4b3b      	ldr	r3, [pc, #236]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	4937      	ldr	r1, [pc, #220]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4a:	e03a      	b.n	8004dc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d020      	beq.n	8004d96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d54:	4b34      	ldr	r3, [pc, #208]	; (8004e28 <HAL_RCC_OscConfig+0x244>)
 8004d56:	2201      	movs	r2, #1
 8004d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5a:	f7fe fc5f 	bl	800361c <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d62:	f7fe fc5b 	bl	800361c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e1a8      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d74:	4b2b      	ldr	r3, [pc, #172]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f0      	beq.n	8004d62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d80:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	4925      	ldr	r1, [pc, #148]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	600b      	str	r3, [r1, #0]
 8004d94:	e015      	b.n	8004dc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d96:	4b24      	ldr	r3, [pc, #144]	; (8004e28 <HAL_RCC_OscConfig+0x244>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fe fc3e 	bl	800361c <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da4:	f7fe fc3a 	bl	800361c <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e187      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004db6:	4b1b      	ldr	r3, [pc, #108]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f0      	bne.n	8004da4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d036      	beq.n	8004e3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d016      	beq.n	8004e04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dd6:	4b15      	ldr	r3, [pc, #84]	; (8004e2c <HAL_RCC_OscConfig+0x248>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ddc:	f7fe fc1e 	bl	800361c <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004de4:	f7fe fc1a 	bl	800361c <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e167      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004df6:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCC_OscConfig+0x240>)
 8004df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0f0      	beq.n	8004de4 <HAL_RCC_OscConfig+0x200>
 8004e02:	e01b      	b.n	8004e3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e04:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <HAL_RCC_OscConfig+0x248>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e0a:	f7fe fc07 	bl	800361c <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e10:	e00e      	b.n	8004e30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e12:	f7fe fc03 	bl	800361c <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d907      	bls.n	8004e30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e150      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
 8004e24:	40023800 	.word	0x40023800
 8004e28:	42470000 	.word	0x42470000
 8004e2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e30:	4b88      	ldr	r3, [pc, #544]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1ea      	bne.n	8004e12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 8097 	beq.w	8004f78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e4e:	4b81      	ldr	r3, [pc, #516]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10f      	bne.n	8004e7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	4b7d      	ldr	r3, [pc, #500]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	4a7c      	ldr	r2, [pc, #496]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e68:	6413      	str	r3, [r2, #64]	; 0x40
 8004e6a:	4b7a      	ldr	r3, [pc, #488]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e72:	60bb      	str	r3, [r7, #8]
 8004e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e76:	2301      	movs	r3, #1
 8004e78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7a:	4b77      	ldr	r3, [pc, #476]	; (8005058 <HAL_RCC_OscConfig+0x474>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d118      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e86:	4b74      	ldr	r3, [pc, #464]	; (8005058 <HAL_RCC_OscConfig+0x474>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a73      	ldr	r2, [pc, #460]	; (8005058 <HAL_RCC_OscConfig+0x474>)
 8004e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e92:	f7fe fbc3 	bl	800361c <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e9a:	f7fe fbbf 	bl	800361c <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e10c      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eac:	4b6a      	ldr	r3, [pc, #424]	; (8005058 <HAL_RCC_OscConfig+0x474>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0f0      	beq.n	8004e9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d106      	bne.n	8004ece <HAL_RCC_OscConfig+0x2ea>
 8004ec0:	4b64      	ldr	r3, [pc, #400]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec4:	4a63      	ldr	r2, [pc, #396]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	6713      	str	r3, [r2, #112]	; 0x70
 8004ecc:	e01c      	b.n	8004f08 <HAL_RCC_OscConfig+0x324>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b05      	cmp	r3, #5
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x30c>
 8004ed6:	4b5f      	ldr	r3, [pc, #380]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	4a5e      	ldr	r2, [pc, #376]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004edc:	f043 0304 	orr.w	r3, r3, #4
 8004ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee2:	4b5c      	ldr	r3, [pc, #368]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee6:	4a5b      	ldr	r2, [pc, #364]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	6713      	str	r3, [r2, #112]	; 0x70
 8004eee:	e00b      	b.n	8004f08 <HAL_RCC_OscConfig+0x324>
 8004ef0:	4b58      	ldr	r3, [pc, #352]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef4:	4a57      	ldr	r2, [pc, #348]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004ef6:	f023 0301 	bic.w	r3, r3, #1
 8004efa:	6713      	str	r3, [r2, #112]	; 0x70
 8004efc:	4b55      	ldr	r3, [pc, #340]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	4a54      	ldr	r2, [pc, #336]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004f02:	f023 0304 	bic.w	r3, r3, #4
 8004f06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d015      	beq.n	8004f3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f10:	f7fe fb84 	bl	800361c <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f16:	e00a      	b.n	8004f2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f18:	f7fe fb80 	bl	800361c <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e0cb      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2e:	4b49      	ldr	r3, [pc, #292]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0ee      	beq.n	8004f18 <HAL_RCC_OscConfig+0x334>
 8004f3a:	e014      	b.n	8004f66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f3c:	f7fe fb6e 	bl	800361c <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f42:	e00a      	b.n	8004f5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f44:	f7fe fb6a 	bl	800361c <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e0b5      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f5a:	4b3e      	ldr	r3, [pc, #248]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1ee      	bne.n	8004f44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f66:	7dfb      	ldrb	r3, [r7, #23]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d105      	bne.n	8004f78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f6c:	4b39      	ldr	r3, [pc, #228]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	4a38      	ldr	r2, [pc, #224]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80a1 	beq.w	80050c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f82:	4b34      	ldr	r3, [pc, #208]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 030c 	and.w	r3, r3, #12
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d05c      	beq.n	8005048 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d141      	bne.n	800501a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f96:	4b31      	ldr	r3, [pc, #196]	; (800505c <HAL_RCC_OscConfig+0x478>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9c:	f7fe fb3e 	bl	800361c <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa4:	f7fe fb3a 	bl	800361c <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e087      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb6:	4b27      	ldr	r3, [pc, #156]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69da      	ldr	r2, [r3, #28]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	019b      	lsls	r3, r3, #6
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	085b      	lsrs	r3, r3, #1
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	041b      	lsls	r3, r3, #16
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	061b      	lsls	r3, r3, #24
 8004fe6:	491b      	ldr	r1, [pc, #108]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fec:	4b1b      	ldr	r3, [pc, #108]	; (800505c <HAL_RCC_OscConfig+0x478>)
 8004fee:	2201      	movs	r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff2:	f7fe fb13 	bl	800361c <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ffa:	f7fe fb0f 	bl	800361c <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e05c      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800500c:	4b11      	ldr	r3, [pc, #68]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0f0      	beq.n	8004ffa <HAL_RCC_OscConfig+0x416>
 8005018:	e054      	b.n	80050c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800501a:	4b10      	ldr	r3, [pc, #64]	; (800505c <HAL_RCC_OscConfig+0x478>)
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005020:	f7fe fafc 	bl	800361c <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005028:	f7fe faf8 	bl	800361c <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e045      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503a:	4b06      	ldr	r3, [pc, #24]	; (8005054 <HAL_RCC_OscConfig+0x470>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0x444>
 8005046:	e03d      	b.n	80050c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d107      	bne.n	8005060 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e038      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
 8005054:	40023800 	.word	0x40023800
 8005058:	40007000 	.word	0x40007000
 800505c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005060:	4b1b      	ldr	r3, [pc, #108]	; (80050d0 <HAL_RCC_OscConfig+0x4ec>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d028      	beq.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005078:	429a      	cmp	r2, r3
 800507a:	d121      	bne.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005086:	429a      	cmp	r2, r3
 8005088:	d11a      	bne.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005090:	4013      	ands	r3, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005096:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005098:	4293      	cmp	r3, r2
 800509a:	d111      	bne.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a6:	085b      	lsrs	r3, r3, #1
 80050a8:	3b01      	subs	r3, #1
 80050aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d107      	bne.n	80050c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050bc:	429a      	cmp	r2, r3
 80050be:	d001      	beq.n	80050c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40023800 	.word	0x40023800

080050d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0cc      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050e8:	4b68      	ldr	r3, [pc, #416]	; (800528c <HAL_RCC_ClockConfig+0x1b8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d90c      	bls.n	8005110 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f6:	4b65      	ldr	r3, [pc, #404]	; (800528c <HAL_RCC_ClockConfig+0x1b8>)
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050fe:	4b63      	ldr	r3, [pc, #396]	; (800528c <HAL_RCC_ClockConfig+0x1b8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d001      	beq.n	8005110 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e0b8      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d020      	beq.n	800515e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005128:	4b59      	ldr	r3, [pc, #356]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	4a58      	ldr	r2, [pc, #352]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005132:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005140:	4b53      	ldr	r3, [pc, #332]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	4a52      	ldr	r2, [pc, #328]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800514a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800514c:	4b50      	ldr	r3, [pc, #320]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	494d      	ldr	r1, [pc, #308]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 800515a:	4313      	orrs	r3, r2
 800515c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d044      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d107      	bne.n	8005182 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005172:	4b47      	ldr	r3, [pc, #284]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d119      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e07f      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d003      	beq.n	8005192 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800518e:	2b03      	cmp	r3, #3
 8005190:	d107      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005192:	4b3f      	ldr	r3, [pc, #252]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e06f      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a2:	4b3b      	ldr	r3, [pc, #236]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e067      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051b2:	4b37      	ldr	r3, [pc, #220]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f023 0203 	bic.w	r2, r3, #3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	4934      	ldr	r1, [pc, #208]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051c4:	f7fe fa2a 	bl	800361c <HAL_GetTick>
 80051c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ca:	e00a      	b.n	80051e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051cc:	f7fe fa26 	bl	800361c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e04f      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e2:	4b2b      	ldr	r3, [pc, #172]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 020c 	and.w	r2, r3, #12
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d1eb      	bne.n	80051cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051f4:	4b25      	ldr	r3, [pc, #148]	; (800528c <HAL_RCC_ClockConfig+0x1b8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	683a      	ldr	r2, [r7, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d20c      	bcs.n	800521c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005202:	4b22      	ldr	r3, [pc, #136]	; (800528c <HAL_RCC_ClockConfig+0x1b8>)
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800520a:	4b20      	ldr	r3, [pc, #128]	; (800528c <HAL_RCC_ClockConfig+0x1b8>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d001      	beq.n	800521c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e032      	b.n	8005282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	d008      	beq.n	800523a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005228:	4b19      	ldr	r3, [pc, #100]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4916      	ldr	r1, [pc, #88]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005236:	4313      	orrs	r3, r2
 8005238:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d009      	beq.n	800525a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005246:	4b12      	ldr	r3, [pc, #72]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	490e      	ldr	r1, [pc, #56]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800525a:	f000 f821 	bl	80052a0 <HAL_RCC_GetSysClockFreq>
 800525e:	4602      	mov	r2, r0
 8005260:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <HAL_RCC_ClockConfig+0x1bc>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	091b      	lsrs	r3, r3, #4
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	490a      	ldr	r1, [pc, #40]	; (8005294 <HAL_RCC_ClockConfig+0x1c0>)
 800526c:	5ccb      	ldrb	r3, [r1, r3]
 800526e:	fa22 f303 	lsr.w	r3, r2, r3
 8005272:	4a09      	ldr	r2, [pc, #36]	; (8005298 <HAL_RCC_ClockConfig+0x1c4>)
 8005274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005276:	4b09      	ldr	r3, [pc, #36]	; (800529c <HAL_RCC_ClockConfig+0x1c8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe f98a 	bl	8003594 <HAL_InitTick>

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40023c00 	.word	0x40023c00
 8005290:	40023800 	.word	0x40023800
 8005294:	080093b8 	.word	0x080093b8
 8005298:	20000248 	.word	0x20000248
 800529c:	2000024c 	.word	0x2000024c

080052a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a4:	b094      	sub	sp, #80	; 0x50
 80052a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	647b      	str	r3, [r7, #68]	; 0x44
 80052ac:	2300      	movs	r3, #0
 80052ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b0:	2300      	movs	r3, #0
 80052b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052b8:	4b79      	ldr	r3, [pc, #484]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 030c 	and.w	r3, r3, #12
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d00d      	beq.n	80052e0 <HAL_RCC_GetSysClockFreq+0x40>
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	f200 80e1 	bhi.w	800548c <HAL_RCC_GetSysClockFreq+0x1ec>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <HAL_RCC_GetSysClockFreq+0x34>
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d003      	beq.n	80052da <HAL_RCC_GetSysClockFreq+0x3a>
 80052d2:	e0db      	b.n	800548c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052d4:	4b73      	ldr	r3, [pc, #460]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80052d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80052d8:	e0db      	b.n	8005492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052da:	4b73      	ldr	r3, [pc, #460]	; (80054a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80052dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052de:	e0d8      	b.n	8005492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052e0:	4b6f      	ldr	r3, [pc, #444]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052ea:	4b6d      	ldr	r3, [pc, #436]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d063      	beq.n	80053be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f6:	4b6a      	ldr	r3, [pc, #424]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	099b      	lsrs	r3, r3, #6
 80052fc:	2200      	movs	r2, #0
 80052fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005300:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005308:	633b      	str	r3, [r7, #48]	; 0x30
 800530a:	2300      	movs	r3, #0
 800530c:	637b      	str	r3, [r7, #52]	; 0x34
 800530e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005312:	4622      	mov	r2, r4
 8005314:	462b      	mov	r3, r5
 8005316:	f04f 0000 	mov.w	r0, #0
 800531a:	f04f 0100 	mov.w	r1, #0
 800531e:	0159      	lsls	r1, r3, #5
 8005320:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005324:	0150      	lsls	r0, r2, #5
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4621      	mov	r1, r4
 800532c:	1a51      	subs	r1, r2, r1
 800532e:	6139      	str	r1, [r7, #16]
 8005330:	4629      	mov	r1, r5
 8005332:	eb63 0301 	sbc.w	r3, r3, r1
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005344:	4659      	mov	r1, fp
 8005346:	018b      	lsls	r3, r1, #6
 8005348:	4651      	mov	r1, sl
 800534a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800534e:	4651      	mov	r1, sl
 8005350:	018a      	lsls	r2, r1, #6
 8005352:	4651      	mov	r1, sl
 8005354:	ebb2 0801 	subs.w	r8, r2, r1
 8005358:	4659      	mov	r1, fp
 800535a:	eb63 0901 	sbc.w	r9, r3, r1
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800536a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800536e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005372:	4690      	mov	r8, r2
 8005374:	4699      	mov	r9, r3
 8005376:	4623      	mov	r3, r4
 8005378:	eb18 0303 	adds.w	r3, r8, r3
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	462b      	mov	r3, r5
 8005380:	eb49 0303 	adc.w	r3, r9, r3
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005392:	4629      	mov	r1, r5
 8005394:	024b      	lsls	r3, r1, #9
 8005396:	4621      	mov	r1, r4
 8005398:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800539c:	4621      	mov	r1, r4
 800539e:	024a      	lsls	r2, r1, #9
 80053a0:	4610      	mov	r0, r2
 80053a2:	4619      	mov	r1, r3
 80053a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a6:	2200      	movs	r2, #0
 80053a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053b0:	f7fb fbf6 	bl	8000ba0 <__aeabi_uldivmod>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4613      	mov	r3, r2
 80053ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053bc:	e058      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053be:	4b38      	ldr	r3, [pc, #224]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	099b      	lsrs	r3, r3, #6
 80053c4:	2200      	movs	r2, #0
 80053c6:	4618      	mov	r0, r3
 80053c8:	4611      	mov	r1, r2
 80053ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053ce:	623b      	str	r3, [r7, #32]
 80053d0:	2300      	movs	r3, #0
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
 80053d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053d8:	4642      	mov	r2, r8
 80053da:	464b      	mov	r3, r9
 80053dc:	f04f 0000 	mov.w	r0, #0
 80053e0:	f04f 0100 	mov.w	r1, #0
 80053e4:	0159      	lsls	r1, r3, #5
 80053e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053ea:	0150      	lsls	r0, r2, #5
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4641      	mov	r1, r8
 80053f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80053f6:	4649      	mov	r1, r9
 80053f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005408:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800540c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005410:	ebb2 040a 	subs.w	r4, r2, sl
 8005414:	eb63 050b 	sbc.w	r5, r3, fp
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	00eb      	lsls	r3, r5, #3
 8005422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005426:	00e2      	lsls	r2, r4, #3
 8005428:	4614      	mov	r4, r2
 800542a:	461d      	mov	r5, r3
 800542c:	4643      	mov	r3, r8
 800542e:	18e3      	adds	r3, r4, r3
 8005430:	603b      	str	r3, [r7, #0]
 8005432:	464b      	mov	r3, r9
 8005434:	eb45 0303 	adc.w	r3, r5, r3
 8005438:	607b      	str	r3, [r7, #4]
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	f04f 0300 	mov.w	r3, #0
 8005442:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005446:	4629      	mov	r1, r5
 8005448:	028b      	lsls	r3, r1, #10
 800544a:	4621      	mov	r1, r4
 800544c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005450:	4621      	mov	r1, r4
 8005452:	028a      	lsls	r2, r1, #10
 8005454:	4610      	mov	r0, r2
 8005456:	4619      	mov	r1, r3
 8005458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800545a:	2200      	movs	r2, #0
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	61fa      	str	r2, [r7, #28]
 8005460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005464:	f7fb fb9c 	bl	8000ba0 <__aeabi_uldivmod>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	4613      	mov	r3, r2
 800546e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	0c1b      	lsrs	r3, r3, #16
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	3301      	adds	r3, #1
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005480:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005484:	fbb2 f3f3 	udiv	r3, r2, r3
 8005488:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800548a:	e002      	b.n	8005492 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800548c:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800548e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005494:	4618      	mov	r0, r3
 8005496:	3750      	adds	r7, #80	; 0x50
 8005498:	46bd      	mov	sp, r7
 800549a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800549e:	bf00      	nop
 80054a0:	40023800 	.word	0x40023800
 80054a4:	00f42400 	.word	0x00f42400
 80054a8:	007a1200 	.word	0x007a1200

080054ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054b0:	4b03      	ldr	r3, [pc, #12]	; (80054c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80054b2:	681b      	ldr	r3, [r3, #0]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	20000248 	.word	0x20000248

080054c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054c8:	f7ff fff0 	bl	80054ac <HAL_RCC_GetHCLKFreq>
 80054cc:	4602      	mov	r2, r0
 80054ce:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	0a9b      	lsrs	r3, r3, #10
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	4903      	ldr	r1, [pc, #12]	; (80054e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054da:	5ccb      	ldrb	r3, [r1, r3]
 80054dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40023800 	.word	0x40023800
 80054e8:	080093c8 	.word	0x080093c8

080054ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054f0:	f7ff ffdc 	bl	80054ac <HAL_RCC_GetHCLKFreq>
 80054f4:	4602      	mov	r2, r0
 80054f6:	4b05      	ldr	r3, [pc, #20]	; (800550c <HAL_RCC_GetPCLK2Freq+0x20>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	0b5b      	lsrs	r3, r3, #13
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	4903      	ldr	r1, [pc, #12]	; (8005510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005502:	5ccb      	ldrb	r3, [r1, r3]
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005508:	4618      	mov	r0, r3
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40023800 	.word	0x40023800
 8005510:	080093c8 	.word	0x080093c8

08005514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e04c      	b.n	80055c0 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d111      	bne.n	8005556 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f001 fc02 	bl	8006d44 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005544:	2b00      	cmp	r3, #0
 8005546:	d102      	bne.n	800554e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <HAL_TIM_Base_Init+0xb4>)
 800554c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2202      	movs	r2, #2
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3304      	adds	r3, #4
 8005566:	4619      	mov	r1, r3
 8005568:	4610      	mov	r0, r2
 800556a:	f001 f91f 	bl	80067ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	08003139 	.word	0x08003139

080055cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d001      	beq.n	80055e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e03c      	b.n	800565e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a1e      	ldr	r2, [pc, #120]	; (800566c <HAL_TIM_Base_Start+0xa0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d018      	beq.n	8005628 <HAL_TIM_Base_Start+0x5c>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fe:	d013      	beq.n	8005628 <HAL_TIM_Base_Start+0x5c>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a1a      	ldr	r2, [pc, #104]	; (8005670 <HAL_TIM_Base_Start+0xa4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00e      	beq.n	8005628 <HAL_TIM_Base_Start+0x5c>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a19      	ldr	r2, [pc, #100]	; (8005674 <HAL_TIM_Base_Start+0xa8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d009      	beq.n	8005628 <HAL_TIM_Base_Start+0x5c>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a17      	ldr	r2, [pc, #92]	; (8005678 <HAL_TIM_Base_Start+0xac>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d004      	beq.n	8005628 <HAL_TIM_Base_Start+0x5c>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a16      	ldr	r2, [pc, #88]	; (800567c <HAL_TIM_Base_Start+0xb0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d111      	bne.n	800564c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b06      	cmp	r3, #6
 8005638:	d010      	beq.n	800565c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0201 	orr.w	r2, r2, #1
 8005648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564a:	e007      	b.n	800565c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0201 	orr.w	r2, r2, #1
 800565a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40010000 	.word	0x40010000
 8005670:	40000400 	.word	0x40000400
 8005674:	40000800 	.word	0x40000800
 8005678:	40000c00 	.word	0x40000c00
 800567c:	40014000 	.word	0x40014000

08005680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	d001      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e044      	b.n	8005722 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1e      	ldr	r2, [pc, #120]	; (8005730 <HAL_TIM_Base_Start_IT+0xb0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d018      	beq.n	80056ec <HAL_TIM_Base_Start_IT+0x6c>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c2:	d013      	beq.n	80056ec <HAL_TIM_Base_Start_IT+0x6c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1a      	ldr	r2, [pc, #104]	; (8005734 <HAL_TIM_Base_Start_IT+0xb4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00e      	beq.n	80056ec <HAL_TIM_Base_Start_IT+0x6c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a19      	ldr	r2, [pc, #100]	; (8005738 <HAL_TIM_Base_Start_IT+0xb8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d009      	beq.n	80056ec <HAL_TIM_Base_Start_IT+0x6c>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a17      	ldr	r2, [pc, #92]	; (800573c <HAL_TIM_Base_Start_IT+0xbc>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d004      	beq.n	80056ec <HAL_TIM_Base_Start_IT+0x6c>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a16      	ldr	r2, [pc, #88]	; (8005740 <HAL_TIM_Base_Start_IT+0xc0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d111      	bne.n	8005710 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b06      	cmp	r3, #6
 80056fc:	d010      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0201 	orr.w	r2, r2, #1
 800570c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570e:	e007      	b.n	8005720 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40010000 	.word	0x40010000
 8005734:	40000400 	.word	0x40000400
 8005738:	40000800 	.word	0x40000800
 800573c:	40000c00 	.word	0x40000c00
 8005740:	40014000 	.word	0x40014000

08005744 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e04c      	b.n	80057f0 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d111      	bne.n	8005786 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f001 faea 	bl	8006d44 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	2b00      	cmp	r3, #0
 8005776:	d102      	bne.n	800577e <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a1f      	ldr	r2, [pc, #124]	; (80057f8 <HAL_TIM_OC_Init+0xb4>)
 800577c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2202      	movs	r2, #2
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	3304      	adds	r3, #4
 8005796:	4619      	mov	r1, r3
 8005798:	4610      	mov	r0, r2
 800579a:	f001 f807 	bl	80067ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	080057fd 	.word	0x080057fd

080057fc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e04c      	b.n	80058bc <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d111      	bne.n	8005852 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f001 fa84 	bl	8006d44 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005840:	2b00      	cmp	r3, #0
 8005842:	d102      	bne.n	800584a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a1f      	ldr	r2, [pc, #124]	; (80058c4 <HAL_TIM_PWM_Init+0xb4>)
 8005848:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3304      	adds	r3, #4
 8005862:	4619      	mov	r1, r3
 8005864:	4610      	mov	r0, r2
 8005866:	f000 ffa1 	bl	80067ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	080030e9 	.word	0x080030e9

080058c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d109      	bne.n	80058ec <HAL_TIM_PWM_Start+0x24>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	bf14      	ite	ne
 80058e4:	2301      	movne	r3, #1
 80058e6:	2300      	moveq	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	e022      	b.n	8005932 <HAL_TIM_PWM_Start+0x6a>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d109      	bne.n	8005906 <HAL_TIM_PWM_Start+0x3e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	bf14      	ite	ne
 80058fe:	2301      	movne	r3, #1
 8005900:	2300      	moveq	r3, #0
 8005902:	b2db      	uxtb	r3, r3
 8005904:	e015      	b.n	8005932 <HAL_TIM_PWM_Start+0x6a>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b08      	cmp	r3, #8
 800590a:	d109      	bne.n	8005920 <HAL_TIM_PWM_Start+0x58>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	bf14      	ite	ne
 8005918:	2301      	movne	r3, #1
 800591a:	2300      	moveq	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	e008      	b.n	8005932 <HAL_TIM_PWM_Start+0x6a>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b01      	cmp	r3, #1
 800592a:	bf14      	ite	ne
 800592c:	2301      	movne	r3, #1
 800592e:	2300      	moveq	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e068      	b.n	8005a0c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d104      	bne.n	800594a <HAL_TIM_PWM_Start+0x82>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005948:	e013      	b.n	8005972 <HAL_TIM_PWM_Start+0xaa>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b04      	cmp	r3, #4
 800594e:	d104      	bne.n	800595a <HAL_TIM_PWM_Start+0x92>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005958:	e00b      	b.n	8005972 <HAL_TIM_PWM_Start+0xaa>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d104      	bne.n	800596a <HAL_TIM_PWM_Start+0xa2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005968:	e003      	b.n	8005972 <HAL_TIM_PWM_Start+0xaa>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2201      	movs	r2, #1
 8005978:	6839      	ldr	r1, [r7, #0]
 800597a:	4618      	mov	r0, r3
 800597c:	f001 f9bc 	bl	8006cf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a23      	ldr	r2, [pc, #140]	; (8005a14 <HAL_TIM_PWM_Start+0x14c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d107      	bne.n	800599a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005998:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <HAL_TIM_PWM_Start+0x14c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d018      	beq.n	80059d6 <HAL_TIM_PWM_Start+0x10e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ac:	d013      	beq.n	80059d6 <HAL_TIM_PWM_Start+0x10e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a19      	ldr	r2, [pc, #100]	; (8005a18 <HAL_TIM_PWM_Start+0x150>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00e      	beq.n	80059d6 <HAL_TIM_PWM_Start+0x10e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a17      	ldr	r2, [pc, #92]	; (8005a1c <HAL_TIM_PWM_Start+0x154>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d009      	beq.n	80059d6 <HAL_TIM_PWM_Start+0x10e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a16      	ldr	r2, [pc, #88]	; (8005a20 <HAL_TIM_PWM_Start+0x158>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d004      	beq.n	80059d6 <HAL_TIM_PWM_Start+0x10e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a14      	ldr	r2, [pc, #80]	; (8005a24 <HAL_TIM_PWM_Start+0x15c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d111      	bne.n	80059fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b06      	cmp	r3, #6
 80059e6:	d010      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f8:	e007      	b.n	8005a0a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0201 	orr.w	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40010000 	.word	0x40010000
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40000800 	.word	0x40000800
 8005a20:	40000c00 	.word	0x40000c00
 8005a24:	40014000 	.word	0x40014000

08005a28 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e04c      	b.n	8005ad6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d111      	bne.n	8005a6c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f001 f977 	bl	8006d44 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d102      	bne.n	8005a64 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <HAL_TIM_OnePulse_Init+0xb8>)
 8005a62:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4610      	mov	r0, r2
 8005a80:	f000 fe94 	bl	80067ac <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0208 	bic.w	r2, r2, #8
 8005a92:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6819      	ldr	r1, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	08005ae5 	.word	0x08005ae5

08005ae4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b20:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d108      	bne.n	8005b3a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b28:	7bbb      	ldrb	r3, [r7, #14]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d105      	bne.n	8005b3a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b2e:	7b7b      	ldrb	r3, [r7, #13]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d102      	bne.n	8005b3a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b34:	7b3b      	ldrb	r3, [r7, #12]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d001      	beq.n	8005b3e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e03b      	b.n	8005bb6 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2202      	movs	r2, #2
 8005b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2202      	movs	r2, #2
 8005b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0202 	orr.w	r2, r2, #2
 8005b6c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0204 	orr.w	r2, r2, #4
 8005b7c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2201      	movs	r2, #1
 8005b84:	2100      	movs	r1, #0
 8005b86:	4618      	mov	r0, r3
 8005b88:	f001 f8b6 	bl	8006cf8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2201      	movs	r2, #1
 8005b92:	2104      	movs	r1, #4
 8005b94:	4618      	mov	r0, r3
 8005b96:	f001 f8af 	bl	8006cf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a08      	ldr	r2, [pc, #32]	; (8005bc0 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d107      	bne.n	8005bb4 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bb2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40010000 	.word	0x40010000

08005bc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e0a2      	b.n	8005d1e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d111      	bne.n	8005c08 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f001 f8a9 	bl	8006d44 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d102      	bne.n	8005c00 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a4a      	ldr	r2, [pc, #296]	; (8005d28 <HAL_TIM_Encoder_Init+0x164>)
 8005bfe:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c1e:	f023 0307 	bic.w	r3, r3, #7
 8005c22:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f000 fdbc 	bl	80067ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5c:	f023 0303 	bic.w	r3, r3, #3
 8005c60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005c7a:	f023 030c 	bic.w	r3, r3, #12
 8005c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	021b      	lsls	r3, r3, #8
 8005c96:	4313      	orrs	r3, r2
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	011a      	lsls	r2, r3, #4
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	031b      	lsls	r3, r3, #12
 8005caa:	4313      	orrs	r3, r2
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005cb8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005cc0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	080031fd 	.word	0x080031fd

08005d2c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d3c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d44:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d4c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d54:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d110      	bne.n	8005d7e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d102      	bne.n	8005d68 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d62:	7b7b      	ldrb	r3, [r7, #13]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d001      	beq.n	8005d6c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e069      	b.n	8005e40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d7c:	e031      	b.n	8005de2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d110      	bne.n	8005da6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d84:	7bbb      	ldrb	r3, [r7, #14]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d102      	bne.n	8005d90 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d8a:	7b3b      	ldrb	r3, [r7, #12]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d001      	beq.n	8005d94 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e055      	b.n	8005e40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005da4:	e01d      	b.n	8005de2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d108      	bne.n	8005dbe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dac:	7bbb      	ldrb	r3, [r7, #14]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d105      	bne.n	8005dbe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005db2:	7b7b      	ldrb	r3, [r7, #13]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d102      	bne.n	8005dbe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005db8:	7b3b      	ldrb	r3, [r7, #12]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d001      	beq.n	8005dc2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e03e      	b.n	8005e40 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2202      	movs	r2, #2
 8005dde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <HAL_TIM_Encoder_Start+0xc4>
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d008      	beq.n	8005e00 <HAL_TIM_Encoder_Start+0xd4>
 8005dee:	e00f      	b.n	8005e10 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2201      	movs	r2, #1
 8005df6:	2100      	movs	r1, #0
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 ff7d 	bl	8006cf8 <TIM_CCxChannelCmd>
      break;
 8005dfe:	e016      	b.n	8005e2e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2201      	movs	r2, #1
 8005e06:	2104      	movs	r1, #4
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 ff75 	bl	8006cf8 <TIM_CCxChannelCmd>
      break;
 8005e0e:	e00e      	b.n	8005e2e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2201      	movs	r2, #1
 8005e16:	2100      	movs	r1, #0
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 ff6d 	bl	8006cf8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2201      	movs	r2, #1
 8005e24:	2104      	movs	r1, #4
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 ff66 	bl	8006cf8 <TIM_CCxChannelCmd>
      break;
 8005e2c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0201 	orr.w	r2, r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d128      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d121      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0202 	mvn.w	r2, #2
 8005e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	4798      	blx	r3
 8005e94:	e009      	b.n	8005eaa <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d128      	bne.n	8005f10 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d121      	bne.n	8005f10 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0204 	mvn.w	r2, #4
 8005ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d005      	beq.n	8005ef6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	4798      	blx	r3
 8005ef4:	e009      	b.n	8005f0a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d128      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d121      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0208 	mvn.w	r2, #8
 8005f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2204      	movs	r2, #4
 8005f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4798      	blx	r3
 8005f54:	e009      	b.n	8005f6a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0310 	and.w	r3, r3, #16
 8005f7a:	2b10      	cmp	r3, #16
 8005f7c:	d128      	bne.n	8005fd0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	2b10      	cmp	r3, #16
 8005f8a:	d121      	bne.n	8005fd0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0210 	mvn.w	r2, #16
 8005f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2208      	movs	r2, #8
 8005f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d005      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	4798      	blx	r3
 8005fb4:	e009      	b.n	8005fca <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d110      	bne.n	8006000 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d109      	bne.n	8006000 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f06f 0201 	mvn.w	r2, #1
 8005ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600a:	2b80      	cmp	r3, #128	; 0x80
 800600c:	d110      	bne.n	8006030 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006018:	2b80      	cmp	r3, #128	; 0x80
 800601a:	d109      	bne.n	8006030 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d110      	bne.n	8006060 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b40      	cmp	r3, #64	; 0x40
 800604a:	d109      	bne.n	8006060 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b20      	cmp	r3, #32
 800606c:	d110      	bne.n	8006090 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f003 0320 	and.w	r3, r3, #32
 8006078:	2b20      	cmp	r3, #32
 800607a:	d109      	bne.n	8006090 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0220 	mvn.w	r2, #32
 8006084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006090:	bf00      	nop
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e048      	b.n	8006148 <HAL_TIM_OC_ConfigChannel+0xb0>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b0c      	cmp	r3, #12
 80060c2:	d839      	bhi.n	8006138 <HAL_TIM_OC_ConfigChannel+0xa0>
 80060c4:	a201      	add	r2, pc, #4	; (adr r2, 80060cc <HAL_TIM_OC_ConfigChannel+0x34>)
 80060c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ca:	bf00      	nop
 80060cc:	08006101 	.word	0x08006101
 80060d0:	08006139 	.word	0x08006139
 80060d4:	08006139 	.word	0x08006139
 80060d8:	08006139 	.word	0x08006139
 80060dc:	0800610f 	.word	0x0800610f
 80060e0:	08006139 	.word	0x08006139
 80060e4:	08006139 	.word	0x08006139
 80060e8:	08006139 	.word	0x08006139
 80060ec:	0800611d 	.word	0x0800611d
 80060f0:	08006139 	.word	0x08006139
 80060f4:	08006139 	.word	0x08006139
 80060f8:	08006139 	.word	0x08006139
 80060fc:	0800612b 	.word	0x0800612b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fbd0 	bl	80068ac <TIM_OC1_SetConfig>
      break;
 800610c:	e017      	b.n	800613e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fc2f 	bl	8006978 <TIM_OC2_SetConfig>
      break;
 800611a:	e010      	b.n	800613e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68b9      	ldr	r1, [r7, #8]
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fc94 	bl	8006a50 <TIM_OC3_SetConfig>
      break;
 8006128:	e009      	b.n	800613e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68b9      	ldr	r1, [r7, #8]
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fcf7 	bl	8006b24 <TIM_OC4_SetConfig>
      break;
 8006136:	e002      	b.n	800613e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	75fb      	strb	r3, [r7, #23]
      break;
 800613c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006146:	7dfb      	ldrb	r3, [r7, #23]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006166:	2b01      	cmp	r3, #1
 8006168:	d101      	bne.n	800616e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800616a:	2302      	movs	r3, #2
 800616c:	e0ae      	b.n	80062cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b0c      	cmp	r3, #12
 800617a:	f200 809f 	bhi.w	80062bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800617e:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	080061b9 	.word	0x080061b9
 8006188:	080062bd 	.word	0x080062bd
 800618c:	080062bd 	.word	0x080062bd
 8006190:	080062bd 	.word	0x080062bd
 8006194:	080061f9 	.word	0x080061f9
 8006198:	080062bd 	.word	0x080062bd
 800619c:	080062bd 	.word	0x080062bd
 80061a0:	080062bd 	.word	0x080062bd
 80061a4:	0800623b 	.word	0x0800623b
 80061a8:	080062bd 	.word	0x080062bd
 80061ac:	080062bd 	.word	0x080062bd
 80061b0:	080062bd 	.word	0x080062bd
 80061b4:	0800627b 	.word	0x0800627b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68b9      	ldr	r1, [r7, #8]
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 fb74 	bl	80068ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699a      	ldr	r2, [r3, #24]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0208 	orr.w	r2, r2, #8
 80061d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0204 	bic.w	r2, r2, #4
 80061e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6999      	ldr	r1, [r3, #24]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	691a      	ldr	r2, [r3, #16]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	619a      	str	r2, [r3, #24]
      break;
 80061f6:	e064      	b.n	80062c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68b9      	ldr	r1, [r7, #8]
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fbba 	bl	8006978 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699a      	ldr	r2, [r3, #24]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6999      	ldr	r1, [r3, #24]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	021a      	lsls	r2, r3, #8
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	619a      	str	r2, [r3, #24]
      break;
 8006238:	e043      	b.n	80062c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	4618      	mov	r0, r3
 8006242:	f000 fc05 	bl	8006a50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	69da      	ldr	r2, [r3, #28]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f042 0208 	orr.w	r2, r2, #8
 8006254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69da      	ldr	r2, [r3, #28]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0204 	bic.w	r2, r2, #4
 8006264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69d9      	ldr	r1, [r3, #28]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	691a      	ldr	r2, [r3, #16]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	61da      	str	r2, [r3, #28]
      break;
 8006278:	e023      	b.n	80062c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68b9      	ldr	r1, [r7, #8]
 8006280:	4618      	mov	r0, r3
 8006282:	f000 fc4f 	bl	8006b24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69da      	ldr	r2, [r3, #28]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69da      	ldr	r2, [r3, #28]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69d9      	ldr	r1, [r3, #28]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	021a      	lsls	r2, r3, #8
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	61da      	str	r2, [r3, #28]
      break;
 80062ba:	e002      	b.n	80062c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	75fb      	strb	r3, [r7, #23]
      break;
 80062c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_TIM_ConfigClockSource+0x1c>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e0b4      	b.n	800645a <HAL_TIM_ConfigClockSource+0x186>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800630e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006328:	d03e      	beq.n	80063a8 <HAL_TIM_ConfigClockSource+0xd4>
 800632a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800632e:	f200 8087 	bhi.w	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006336:	f000 8086 	beq.w	8006446 <HAL_TIM_ConfigClockSource+0x172>
 800633a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633e:	d87f      	bhi.n	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006340:	2b70      	cmp	r3, #112	; 0x70
 8006342:	d01a      	beq.n	800637a <HAL_TIM_ConfigClockSource+0xa6>
 8006344:	2b70      	cmp	r3, #112	; 0x70
 8006346:	d87b      	bhi.n	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006348:	2b60      	cmp	r3, #96	; 0x60
 800634a:	d050      	beq.n	80063ee <HAL_TIM_ConfigClockSource+0x11a>
 800634c:	2b60      	cmp	r3, #96	; 0x60
 800634e:	d877      	bhi.n	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006350:	2b50      	cmp	r3, #80	; 0x50
 8006352:	d03c      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0xfa>
 8006354:	2b50      	cmp	r3, #80	; 0x50
 8006356:	d873      	bhi.n	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006358:	2b40      	cmp	r3, #64	; 0x40
 800635a:	d058      	beq.n	800640e <HAL_TIM_ConfigClockSource+0x13a>
 800635c:	2b40      	cmp	r3, #64	; 0x40
 800635e:	d86f      	bhi.n	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006360:	2b30      	cmp	r3, #48	; 0x30
 8006362:	d064      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x15a>
 8006364:	2b30      	cmp	r3, #48	; 0x30
 8006366:	d86b      	bhi.n	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006368:	2b20      	cmp	r3, #32
 800636a:	d060      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x15a>
 800636c:	2b20      	cmp	r3, #32
 800636e:	d867      	bhi.n	8006440 <HAL_TIM_ConfigClockSource+0x16c>
 8006370:	2b00      	cmp	r3, #0
 8006372:	d05c      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x15a>
 8006374:	2b10      	cmp	r3, #16
 8006376:	d05a      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x15a>
 8006378:	e062      	b.n	8006440 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6818      	ldr	r0, [r3, #0]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	6899      	ldr	r1, [r3, #8]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f000 fc95 	bl	8006cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800639c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	609a      	str	r2, [r3, #8]
      break;
 80063a6:	e04f      	b.n	8006448 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	6899      	ldr	r1, [r3, #8]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f000 fc7e 	bl	8006cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ca:	609a      	str	r2, [r3, #8]
      break;
 80063cc:	e03c      	b.n	8006448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6818      	ldr	r0, [r3, #0]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	6859      	ldr	r1, [r3, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	461a      	mov	r2, r3
 80063dc:	f000 fbf2 	bl	8006bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2150      	movs	r1, #80	; 0x50
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fc4b 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 80063ec:	e02c      	b.n	8006448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	6859      	ldr	r1, [r3, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	461a      	mov	r2, r3
 80063fc:	f000 fc11 	bl	8006c22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2160      	movs	r1, #96	; 0x60
 8006406:	4618      	mov	r0, r3
 8006408:	f000 fc3b 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 800640c:	e01c      	b.n	8006448 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6859      	ldr	r1, [r3, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	461a      	mov	r2, r3
 800641c:	f000 fbd2 	bl	8006bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2140      	movs	r1, #64	; 0x40
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fc2b 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 800642c:	e00c      	b.n	8006448 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4619      	mov	r1, r3
 8006438:	4610      	mov	r0, r2
 800643a:	f000 fc22 	bl	8006c82 <TIM_ITRx_SetConfig>
      break;
 800643e:	e003      	b.n	8006448 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	73fb      	strb	r3, [r7, #15]
      break;
 8006444:	e000      	b.n	8006448 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006458:	7bfb      	ldrb	r3, [r7, #15]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
	...

08006518 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	460b      	mov	r3, r1
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e135      	b.n	80067a0 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_TIM_RegisterCallback+0x2a>
 800653e:	2302      	movs	r3, #2
 8006540:	e12e      	b.n	80067a0 <HAL_TIM_RegisterCallback+0x288>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b01      	cmp	r3, #1
 8006554:	f040 80ba 	bne.w	80066cc <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8006558:	7afb      	ldrb	r3, [r7, #11]
 800655a:	2b1a      	cmp	r3, #26
 800655c:	f200 80b3 	bhi.w	80066c6 <HAL_TIM_RegisterCallback+0x1ae>
 8006560:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <HAL_TIM_RegisterCallback+0x50>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	080065d5 	.word	0x080065d5
 800656c:	080065dd 	.word	0x080065dd
 8006570:	080065e5 	.word	0x080065e5
 8006574:	080065ed 	.word	0x080065ed
 8006578:	080065f5 	.word	0x080065f5
 800657c:	080065fd 	.word	0x080065fd
 8006580:	08006605 	.word	0x08006605
 8006584:	0800660d 	.word	0x0800660d
 8006588:	08006615 	.word	0x08006615
 800658c:	0800661d 	.word	0x0800661d
 8006590:	08006625 	.word	0x08006625
 8006594:	0800662d 	.word	0x0800662d
 8006598:	08006635 	.word	0x08006635
 800659c:	0800663d 	.word	0x0800663d
 80065a0:	08006645 	.word	0x08006645
 80065a4:	0800664f 	.word	0x0800664f
 80065a8:	08006659 	.word	0x08006659
 80065ac:	08006663 	.word	0x08006663
 80065b0:	0800666d 	.word	0x0800666d
 80065b4:	08006677 	.word	0x08006677
 80065b8:	08006681 	.word	0x08006681
 80065bc:	0800668b 	.word	0x0800668b
 80065c0:	08006695 	.word	0x08006695
 80065c4:	0800669f 	.word	0x0800669f
 80065c8:	080066a9 	.word	0x080066a9
 80065cc:	080066b3 	.word	0x080066b3
 80065d0:	080066bd 	.word	0x080066bd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80065da:	e0dc      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80065e2:	e0d8      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80065ea:	e0d4      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80065f2:	e0d0      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80065fa:	e0cc      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006602:	e0c8      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800660a:	e0c4      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006612:	e0c0      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800661a:	e0bc      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006622:	e0b8      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800662a:	e0b4      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006632:	e0b0      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800663a:	e0ac      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006642:	e0a8      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800664c:	e0a3      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8006656:	e09e      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8006660:	e099      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800666a:	e094      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8006674:	e08f      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800667e:	e08a      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8006688:	e085      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8006692:	e080      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800669c:	e07b      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80066a6:	e076      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80066b0:	e071      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80066ba:	e06c      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80066c4:	e067      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	75fb      	strb	r3, [r7, #23]
        break;
 80066ca:	e064      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d15c      	bne.n	8006792 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 80066d8:	7afb      	ldrb	r3, [r7, #11]
 80066da:	2b0d      	cmp	r3, #13
 80066dc:	d856      	bhi.n	800678c <HAL_TIM_RegisterCallback+0x274>
 80066de:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <HAL_TIM_RegisterCallback+0x1cc>)
 80066e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e4:	0800671d 	.word	0x0800671d
 80066e8:	08006725 	.word	0x08006725
 80066ec:	0800672d 	.word	0x0800672d
 80066f0:	08006735 	.word	0x08006735
 80066f4:	0800673d 	.word	0x0800673d
 80066f8:	08006745 	.word	0x08006745
 80066fc:	0800674d 	.word	0x0800674d
 8006700:	08006755 	.word	0x08006755
 8006704:	0800675d 	.word	0x0800675d
 8006708:	08006765 	.word	0x08006765
 800670c:	0800676d 	.word	0x0800676d
 8006710:	08006775 	.word	0x08006775
 8006714:	0800677d 	.word	0x0800677d
 8006718:	08006785 	.word	0x08006785
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006722:	e038      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800672a:	e034      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006732:	e030      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800673a:	e02c      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006742:	e028      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800674a:	e024      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006752:	e020      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800675a:	e01c      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006762:	e018      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800676a:	e014      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006772:	e010      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800677a:	e00c      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006782:	e008      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800678a:	e004      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	75fb      	strb	r3, [r7, #23]
        break;
 8006790:	e001      	b.n	8006796 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800679e:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	371c      	adds	r7, #28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a34      	ldr	r2, [pc, #208]	; (8006890 <TIM_Base_SetConfig+0xe4>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00f      	beq.n	80067e4 <TIM_Base_SetConfig+0x38>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ca:	d00b      	beq.n	80067e4 <TIM_Base_SetConfig+0x38>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a31      	ldr	r2, [pc, #196]	; (8006894 <TIM_Base_SetConfig+0xe8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d007      	beq.n	80067e4 <TIM_Base_SetConfig+0x38>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a30      	ldr	r2, [pc, #192]	; (8006898 <TIM_Base_SetConfig+0xec>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d003      	beq.n	80067e4 <TIM_Base_SetConfig+0x38>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a2f      	ldr	r2, [pc, #188]	; (800689c <TIM_Base_SetConfig+0xf0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d108      	bne.n	80067f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a25      	ldr	r2, [pc, #148]	; (8006890 <TIM_Base_SetConfig+0xe4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d01b      	beq.n	8006836 <TIM_Base_SetConfig+0x8a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006804:	d017      	beq.n	8006836 <TIM_Base_SetConfig+0x8a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a22      	ldr	r2, [pc, #136]	; (8006894 <TIM_Base_SetConfig+0xe8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d013      	beq.n	8006836 <TIM_Base_SetConfig+0x8a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a21      	ldr	r2, [pc, #132]	; (8006898 <TIM_Base_SetConfig+0xec>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00f      	beq.n	8006836 <TIM_Base_SetConfig+0x8a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a20      	ldr	r2, [pc, #128]	; (800689c <TIM_Base_SetConfig+0xf0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00b      	beq.n	8006836 <TIM_Base_SetConfig+0x8a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <TIM_Base_SetConfig+0xf4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d007      	beq.n	8006836 <TIM_Base_SetConfig+0x8a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a1e      	ldr	r2, [pc, #120]	; (80068a4 <TIM_Base_SetConfig+0xf8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d003      	beq.n	8006836 <TIM_Base_SetConfig+0x8a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a1d      	ldr	r2, [pc, #116]	; (80068a8 <TIM_Base_SetConfig+0xfc>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d108      	bne.n	8006848 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800683c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	4313      	orrs	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a08      	ldr	r2, [pc, #32]	; (8006890 <TIM_Base_SetConfig+0xe4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d103      	bne.n	800687c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	691a      	ldr	r2, [r3, #16]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	615a      	str	r2, [r3, #20]
}
 8006882:	bf00      	nop
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	40010000 	.word	0x40010000
 8006894:	40000400 	.word	0x40000400
 8006898:	40000800 	.word	0x40000800
 800689c:	40000c00 	.word	0x40000c00
 80068a0:	40014000 	.word	0x40014000
 80068a4:	40014400 	.word	0x40014400
 80068a8:	40014800 	.word	0x40014800

080068ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	f023 0201 	bic.w	r2, r3, #1
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0303 	bic.w	r3, r3, #3
 80068e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f023 0302 	bic.w	r3, r3, #2
 80068f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a1c      	ldr	r2, [pc, #112]	; (8006974 <TIM_OC1_SetConfig+0xc8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d10c      	bne.n	8006922 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f023 0308 	bic.w	r3, r3, #8
 800690e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	4313      	orrs	r3, r2
 8006918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f023 0304 	bic.w	r3, r3, #4
 8006920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a13      	ldr	r2, [pc, #76]	; (8006974 <TIM_OC1_SetConfig+0xc8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d111      	bne.n	800694e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	621a      	str	r2, [r3, #32]
}
 8006968:	bf00      	nop
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	40010000 	.word	0x40010000

08006978 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	f023 0210 	bic.w	r2, r3, #16
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	021b      	lsls	r3, r3, #8
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f023 0320 	bic.w	r3, r3, #32
 80069c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	011b      	lsls	r3, r3, #4
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a1e      	ldr	r2, [pc, #120]	; (8006a4c <TIM_OC2_SetConfig+0xd4>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d10d      	bne.n	80069f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a15      	ldr	r2, [pc, #84]	; (8006a4c <TIM_OC2_SetConfig+0xd4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d113      	bne.n	8006a24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	621a      	str	r2, [r3, #32]
}
 8006a3e:	bf00      	nop
 8006a40:	371c      	adds	r7, #28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40010000 	.word	0x40010000

08006a50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b087      	sub	sp, #28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 0303 	bic.w	r3, r3, #3
 8006a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	021b      	lsls	r3, r3, #8
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a1d      	ldr	r2, [pc, #116]	; (8006b20 <TIM_OC3_SetConfig+0xd0>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d10d      	bne.n	8006aca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ab4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	021b      	lsls	r3, r3, #8
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a14      	ldr	r2, [pc, #80]	; (8006b20 <TIM_OC3_SetConfig+0xd0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d113      	bne.n	8006afa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	621a      	str	r2, [r3, #32]
}
 8006b14:	bf00      	nop
 8006b16:	371c      	adds	r7, #28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	40010000 	.word	0x40010000

08006b24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	021b      	lsls	r3, r3, #8
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	031b      	lsls	r3, r3, #12
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a10      	ldr	r2, [pc, #64]	; (8006bc0 <TIM_OC4_SetConfig+0x9c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d109      	bne.n	8006b98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	019b      	lsls	r3, r3, #6
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	621a      	str	r2, [r3, #32]
}
 8006bb2:	bf00      	nop
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40010000 	.word	0x40010000

08006bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f023 0201 	bic.w	r2, r3, #1
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f023 030a 	bic.w	r3, r3, #10
 8006c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	621a      	str	r2, [r3, #32]
}
 8006c16:	bf00      	nop
 8006c18:	371c      	adds	r7, #28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b087      	sub	sp, #28
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f023 0210 	bic.w	r2, r3, #16
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	031b      	lsls	r3, r3, #12
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	621a      	str	r2, [r3, #32]
}
 8006c76:	bf00      	nop
 8006c78:	371c      	adds	r7, #28
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b085      	sub	sp, #20
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	f043 0307 	orr.w	r3, r3, #7
 8006ca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	609a      	str	r2, [r3, #8]
}
 8006cac:	bf00      	nop
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	021a      	lsls	r2, r3, #8
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	609a      	str	r2, [r3, #8]
}
 8006cec:	bf00      	nop
 8006cee:	371c      	adds	r7, #28
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f003 031f 	and.w	r3, r3, #31
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6a1a      	ldr	r2, [r3, #32]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	43db      	mvns	r3, r3
 8006d1a:	401a      	ands	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a1a      	ldr	r2, [r3, #32]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 031f 	and.w	r3, r3, #31
 8006d2a:	6879      	ldr	r1, [r7, #4]
 8006d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d30:	431a      	orrs	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	621a      	str	r2, [r3, #32]
}
 8006d36:	bf00      	nop
 8006d38:	371c      	adds	r7, #28
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
	...

08006d44 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a1c      	ldr	r2, [pc, #112]	; (8006dc0 <TIM_ResetCallback+0x7c>)
 8006d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a1b      	ldr	r2, [pc, #108]	; (8006dc4 <TIM_ResetCallback+0x80>)
 8006d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a1a      	ldr	r2, [pc, #104]	; (8006dc8 <TIM_ResetCallback+0x84>)
 8006d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a19      	ldr	r2, [pc, #100]	; (8006dcc <TIM_ResetCallback+0x88>)
 8006d68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a18      	ldr	r2, [pc, #96]	; (8006dd0 <TIM_ResetCallback+0x8c>)
 8006d70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a17      	ldr	r2, [pc, #92]	; (8006dd4 <TIM_ResetCallback+0x90>)
 8006d78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a16      	ldr	r2, [pc, #88]	; (8006dd8 <TIM_ResetCallback+0x94>)
 8006d80:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a15      	ldr	r2, [pc, #84]	; (8006ddc <TIM_ResetCallback+0x98>)
 8006d88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a14      	ldr	r2, [pc, #80]	; (8006de0 <TIM_ResetCallback+0x9c>)
 8006d90:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a13      	ldr	r2, [pc, #76]	; (8006de4 <TIM_ResetCallback+0xa0>)
 8006d98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a12      	ldr	r2, [pc, #72]	; (8006de8 <TIM_ResetCallback+0xa4>)
 8006da0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a11      	ldr	r2, [pc, #68]	; (8006dec <TIM_ResetCallback+0xa8>)
 8006da8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a10      	ldr	r2, [pc, #64]	; (8006df0 <TIM_ResetCallback+0xac>)
 8006db0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	08001d79 	.word	0x08001d79
 8006dc4:	08006463 	.word	0x08006463
 8006dc8:	080064db 	.word	0x080064db
 8006dcc:	080064ef 	.word	0x080064ef
 8006dd0:	0800648b 	.word	0x0800648b
 8006dd4:	0800649f 	.word	0x0800649f
 8006dd8:	08006477 	.word	0x08006477
 8006ddc:	080064b3 	.word	0x080064b3
 8006de0:	080064c7 	.word	0x080064c7
 8006de4:	08006503 	.word	0x08006503
 8006de8:	08006f75 	.word	0x08006f75
 8006dec:	08006f89 	.word	0x08006f89
 8006df0:	08006f9d 	.word	0x08006f9d

08006df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d101      	bne.n	8006e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e050      	b.n	8006eae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a1c      	ldr	r2, [pc, #112]	; (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d018      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e58:	d013      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a18      	ldr	r2, [pc, #96]	; (8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00e      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a16      	ldr	r2, [pc, #88]	; (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d009      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d004      	beq.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a13      	ldr	r2, [pc, #76]	; (8006ecc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d10c      	bne.n	8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40010000 	.word	0x40010000
 8006ec0:	40000400 	.word	0x40000400
 8006ec4:	40000800 	.word	0x40000800
 8006ec8:	40000c00 	.word	0x40000c00
 8006ecc:	40014000 	.word	0x40014000

08006ed0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e03d      	b.n	8006f68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e04a      	b.n	8007058 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d111      	bne.n	8006ff2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fd2c 	bl	8007a34 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d102      	bne.n	8006fea <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a1e      	ldr	r2, [pc, #120]	; (8007060 <HAL_UART_Init+0xb0>)
 8006fe8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2224      	movs	r2, #36	; 0x24
 8006ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68da      	ldr	r2, [r3, #12]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007008:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fff6 	bl	8007ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	691a      	ldr	r2, [r3, #16]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800701e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	695a      	ldr	r2, [r3, #20]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800702e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800703e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2220      	movs	r2, #32
 8007052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	08003301 	.word	0x08003301

08007064 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	460b      	mov	r3, r1
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d107      	bne.n	800708c <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007080:	f043 0220 	orr.w	r2, r3, #32
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e08c      	b.n	80071a6 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <HAL_UART_RegisterCallback+0x36>
 8007096:	2302      	movs	r3, #2
 8007098:	e085      	b.n	80071a6 <HAL_UART_RegisterCallback+0x142>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	d151      	bne.n	8007152 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 80070ae:	7afb      	ldrb	r3, [r7, #11]
 80070b0:	2b0c      	cmp	r3, #12
 80070b2:	d845      	bhi.n	8007140 <HAL_UART_RegisterCallback+0xdc>
 80070b4:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <HAL_UART_RegisterCallback+0x58>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070f1 	.word	0x080070f1
 80070c0:	080070f9 	.word	0x080070f9
 80070c4:	08007101 	.word	0x08007101
 80070c8:	08007109 	.word	0x08007109
 80070cc:	08007111 	.word	0x08007111
 80070d0:	08007119 	.word	0x08007119
 80070d4:	08007121 	.word	0x08007121
 80070d8:	08007129 	.word	0x08007129
 80070dc:	08007141 	.word	0x08007141
 80070e0:	08007141 	.word	0x08007141
 80070e4:	08007141 	.word	0x08007141
 80070e8:	08007131 	.word	0x08007131
 80070ec:	08007139 	.word	0x08007139
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80070f6:	e051      	b.n	800719c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80070fe:	e04d      	b.n	800719c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007106:	e049      	b.n	800719c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800710e:	e045      	b.n	800719c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007116:	e041      	b.n	800719c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800711e:	e03d      	b.n	800719c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007126:	e039      	b.n	800719c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800712e:	e035      	b.n	800719c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007136:	e031      	b.n	800719c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800713e:	e02d      	b.n	800719c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007144:	f043 0220 	orr.w	r2, r3, #32
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	75fb      	strb	r3, [r7, #23]
        break;
 8007150:	e024      	b.n	800719c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d116      	bne.n	800718c <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800715e:	7afb      	ldrb	r3, [r7, #11]
 8007160:	2b0b      	cmp	r3, #11
 8007162:	d002      	beq.n	800716a <HAL_UART_RegisterCallback+0x106>
 8007164:	2b0c      	cmp	r3, #12
 8007166:	d004      	beq.n	8007172 <HAL_UART_RegisterCallback+0x10e>
 8007168:	e007      	b.n	800717a <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007170:	e014      	b.n	800719c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007178:	e010      	b.n	800719c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	f043 0220 	orr.w	r2, r3, #32
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	75fb      	strb	r3, [r7, #23]
        break;
 800718a:	e007      	b.n	800719c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	f043 0220 	orr.w	r2, r3, #32
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	371c      	adds	r7, #28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop

080071b4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	4613      	mov	r3, r2
 80071c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d11d      	bne.n	800720a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <HAL_UART_Receive_IT+0x26>
 80071d4:	88fb      	ldrh	r3, [r7, #6]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e016      	b.n	800720c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_UART_Receive_IT+0x38>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e00f      	b.n	800720c <HAL_UART_Receive_IT+0x58>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80071fa:	88fb      	ldrh	r3, [r7, #6]
 80071fc:	461a      	mov	r2, r3
 80071fe:	68b9      	ldr	r1, [r7, #8]
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 fcf7 	bl	8007bf4 <UART_Start_Receive_IT>
 8007206:	4603      	mov	r3, r0
 8007208:	e000      	b.n	800720c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800720a:	2302      	movs	r3, #2
  }
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08c      	sub	sp, #48	; 0x30
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b20      	cmp	r3, #32
 800722c:	d165      	bne.n	80072fa <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_UART_Transmit_DMA+0x26>
 8007234:	88fb      	ldrh	r3, [r7, #6]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e05e      	b.n	80072fc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_UART_Transmit_DMA+0x38>
 8007248:	2302      	movs	r3, #2
 800724a:	e057      	b.n	80072fc <HAL_UART_Transmit_DMA+0xe8>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	88fa      	ldrh	r2, [r7, #6]
 800725e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	88fa      	ldrh	r2, [r7, #6]
 8007264:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2221      	movs	r2, #33	; 0x21
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007278:	4a22      	ldr	r2, [pc, #136]	; (8007304 <HAL_UART_Transmit_DMA+0xf0>)
 800727a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007280:	4a21      	ldr	r2, [pc, #132]	; (8007308 <HAL_UART_Transmit_DMA+0xf4>)
 8007282:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007288:	4a20      	ldr	r2, [pc, #128]	; (800730c <HAL_UART_Transmit_DMA+0xf8>)
 800728a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007290:	2200      	movs	r2, #0
 8007292:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007294:	f107 0308 	add.w	r3, r7, #8
 8007298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	6819      	ldr	r1, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3304      	adds	r3, #4
 80072a8:	461a      	mov	r2, r3
 80072aa:	88fb      	ldrh	r3, [r7, #6]
 80072ac:	f7fc ff84 	bl	80041b8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072b8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3314      	adds	r3, #20
 80072c8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	617b      	str	r3, [r7, #20]
   return(result);
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3314      	adds	r3, #20
 80072e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072e2:	627a      	str	r2, [r7, #36]	; 0x24
 80072e4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	6a39      	ldr	r1, [r7, #32]
 80072e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e5      	bne.n	80072c2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	e000      	b.n	80072fc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80072fa:	2302      	movs	r3, #2
  }
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3730      	adds	r7, #48	; 0x30
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	08007aa5 	.word	0x08007aa5
 8007308:	08007b41 	.word	0x08007b41
 800730c:	08007b5f 	.word	0x08007b5f

08007310 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b09a      	sub	sp, #104	; 0x68
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	330c      	adds	r3, #12
 800731e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800732a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800732e:	667b      	str	r3, [r7, #100]	; 0x64
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	330c      	adds	r3, #12
 8007336:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007338:	657a      	str	r2, [r7, #84]	; 0x54
 800733a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800733e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e5      	bne.n	8007318 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3314      	adds	r3, #20
 8007352:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	f023 0301 	bic.w	r3, r3, #1
 8007362:	663b      	str	r3, [r7, #96]	; 0x60
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3314      	adds	r3, #20
 800736a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800736c:	643a      	str	r2, [r7, #64]	; 0x40
 800736e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007372:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e5      	bne.n	800734c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007384:	2b01      	cmp	r3, #1
 8007386:	d119      	bne.n	80073bc <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	330c      	adds	r3, #12
 800738e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	61fb      	str	r3, [r7, #28]
   return(result);
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	f023 0310 	bic.w	r3, r3, #16
 800739e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	330c      	adds	r3, #12
 80073a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073b0:	e841 2300 	strex	r3, r2, [r1]
 80073b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e5      	bne.n	8007388 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c6:	2b40      	cmp	r3, #64	; 0x40
 80073c8:	d136      	bne.n	8007438 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3314      	adds	r3, #20
 80073d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3314      	adds	r3, #20
 80073e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073ea:	61ba      	str	r2, [r7, #24]
 80073ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ee:	6979      	ldr	r1, [r7, #20]
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	613b      	str	r3, [r7, #16]
   return(result);
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1e5      	bne.n	80073ca <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	2b00      	cmp	r3, #0
 8007404:	d018      	beq.n	8007438 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	2200      	movs	r2, #0
 800740c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	4618      	mov	r0, r3
 8007414:	f7fc ff28 	bl	8004268 <HAL_DMA_Abort>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00c      	beq.n	8007438 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	4618      	mov	r0, r3
 8007424:	f7fd f93c 	bl	80046a0 <HAL_DMA_GetError>
 8007428:	4603      	mov	r3, r0
 800742a:	2b20      	cmp	r3, #32
 800742c:	d104      	bne.n	8007438 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2210      	movs	r2, #16
 8007432:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e00a      	b.n	800744e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2220      	movs	r2, #32
 8007442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3768      	adds	r7, #104	; 0x68
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
	...

08007458 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b0ba      	sub	sp, #232	; 0xe8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800747e:	2300      	movs	r3, #0
 8007480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007484:	2300      	movs	r3, #0
 8007486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800748a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748e:	f003 030f 	and.w	r3, r3, #15
 8007492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10f      	bne.n	80074be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800749e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d009      	beq.n	80074be <HAL_UART_IRQHandler+0x66>
 80074aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fce3 	bl	8007e82 <UART_Receive_IT>
      return;
 80074bc:	e25b      	b.n	8007976 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80074be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 80e1 	beq.w	800768a <HAL_UART_IRQHandler+0x232>
 80074c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d106      	bne.n	80074e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 80d4 	beq.w	800768a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00b      	beq.n	8007506 <HAL_UART_IRQHandler+0xae>
 80074ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f043 0201 	orr.w	r2, r3, #1
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800750a:	f003 0304 	and.w	r3, r3, #4
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00b      	beq.n	800752a <HAL_UART_IRQHandler+0xd2>
 8007512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	f043 0202 	orr.w	r2, r3, #2
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800752a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00b      	beq.n	800754e <HAL_UART_IRQHandler+0xf6>
 8007536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d005      	beq.n	800754e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	f043 0204 	orr.w	r2, r3, #4
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800754e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007552:	f003 0308 	and.w	r3, r3, #8
 8007556:	2b00      	cmp	r3, #0
 8007558:	d011      	beq.n	800757e <HAL_UART_IRQHandler+0x126>
 800755a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800755e:	f003 0320 	and.w	r3, r3, #32
 8007562:	2b00      	cmp	r3, #0
 8007564:	d105      	bne.n	8007572 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	d005      	beq.n	800757e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007576:	f043 0208 	orr.w	r2, r3, #8
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 81f2 	beq.w	800796c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	2b00      	cmp	r3, #0
 8007592:	d008      	beq.n	80075a6 <HAL_UART_IRQHandler+0x14e>
 8007594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007598:	f003 0320 	and.w	r3, r3, #32
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fc6e 	bl	8007e82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b0:	2b40      	cmp	r3, #64	; 0x40
 80075b2:	bf0c      	ite	eq
 80075b4:	2301      	moveq	r3, #1
 80075b6:	2300      	movne	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	f003 0308 	and.w	r3, r3, #8
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d103      	bne.n	80075d2 <HAL_UART_IRQHandler+0x17a>
 80075ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d051      	beq.n	8007676 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fb74 	bl	8007cc0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e2:	2b40      	cmp	r3, #64	; 0x40
 80075e4:	d142      	bne.n	800766c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3314      	adds	r3, #20
 80075ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075f4:	e853 3f00 	ldrex	r3, [r3]
 80075f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3314      	adds	r3, #20
 800760e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007612:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800761e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007622:	e841 2300 	strex	r3, r2, [r1]
 8007626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800762a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1d9      	bne.n	80075e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	2b00      	cmp	r3, #0
 8007638:	d013      	beq.n	8007662 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763e:	4a7f      	ldr	r2, [pc, #508]	; (800783c <HAL_UART_IRQHandler+0x3e4>)
 8007640:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007646:	4618      	mov	r0, r3
 8007648:	f7fc fe7e 	bl	8004348 <HAL_DMA_Abort_IT>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d019      	beq.n	8007686 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800765c:	4610      	mov	r0, r2
 800765e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007660:	e011      	b.n	8007686 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800766a:	e00c      	b.n	8007686 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007674:	e007      	b.n	8007686 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007684:	e172      	b.n	800796c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007686:	bf00      	nop
    return;
 8007688:	e170      	b.n	800796c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768e:	2b01      	cmp	r3, #1
 8007690:	f040 814c 	bne.w	800792c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007698:	f003 0310 	and.w	r3, r3, #16
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 8145 	beq.w	800792c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80076a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a6:	f003 0310 	and.w	r3, r3, #16
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 813e 	beq.w	800792c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076b0:	2300      	movs	r3, #0
 80076b2:	60bb      	str	r3, [r7, #8]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60bb      	str	r3, [r7, #8]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	60bb      	str	r3, [r7, #8]
 80076c4:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d0:	2b40      	cmp	r3, #64	; 0x40
 80076d2:	f040 80b5 	bne.w	8007840 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 8142 	beq.w	8007970 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076f4:	429a      	cmp	r2, r3
 80076f6:	f080 813b 	bcs.w	8007970 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007700:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007706:	69db      	ldr	r3, [r3, #28]
 8007708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770c:	f000 8088 	beq.w	8007820 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	330c      	adds	r3, #12
 8007716:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800771e:	e853 3f00 	ldrex	r3, [r3]
 8007722:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007726:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800772a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800772e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	330c      	adds	r3, #12
 8007738:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800773c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007740:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007748:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800774c:	e841 2300 	strex	r3, r2, [r1]
 8007750:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1d9      	bne.n	8007710 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3314      	adds	r3, #20
 8007762:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800776c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800776e:	f023 0301 	bic.w	r3, r3, #1
 8007772:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3314      	adds	r3, #20
 800777c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007780:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007784:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007788:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007792:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e1      	bne.n	800775c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3314      	adds	r3, #20
 800779e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3314      	adds	r3, #20
 80077b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80077c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e3      	bne.n	8007798 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	330c      	adds	r3, #12
 80077e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077f0:	f023 0310 	bic.w	r3, r3, #16
 80077f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	330c      	adds	r3, #12
 80077fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007802:	65ba      	str	r2, [r7, #88]	; 0x58
 8007804:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007806:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007808:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800780a:	e841 2300 	strex	r3, r2, [r1]
 800780e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1e3      	bne.n	80077de <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	4618      	mov	r0, r3
 800781c:	f7fc fd24 	bl	8004268 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800782c:	b292      	uxth	r2, r2
 800782e:	1a8a      	subs	r2, r1, r2
 8007830:	b292      	uxth	r2, r2
 8007832:	4611      	mov	r1, r2
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007838:	e09a      	b.n	8007970 <HAL_UART_IRQHandler+0x518>
 800783a:	bf00      	nop
 800783c:	08007d87 	.word	0x08007d87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007848:	b29b      	uxth	r3, r3
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007854:	b29b      	uxth	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	f000 808c 	beq.w	8007974 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800785c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 8087 	beq.w	8007974 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	330c      	adds	r3, #12
 800786c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007878:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800787c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	330c      	adds	r3, #12
 8007886:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800788a:	647a      	str	r2, [r7, #68]	; 0x44
 800788c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007890:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e3      	bne.n	8007866 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3314      	adds	r3, #20
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	623b      	str	r3, [r7, #32]
   return(result);
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	f023 0301 	bic.w	r3, r3, #1
 80078b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3314      	adds	r3, #20
 80078be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078c2:	633a      	str	r2, [r7, #48]	; 0x30
 80078c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e3      	bne.n	800789e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2220      	movs	r2, #32
 80078da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	330c      	adds	r3, #12
 80078ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 0310 	bic.w	r3, r3, #16
 80078fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	330c      	adds	r3, #12
 8007904:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007908:	61fa      	str	r2, [r7, #28]
 800790a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	69b9      	ldr	r1, [r7, #24]
 800790e:	69fa      	ldr	r2, [r7, #28]
 8007910:	e841 2300 	strex	r3, r2, [r1]
 8007914:	617b      	str	r3, [r7, #20]
   return(result);
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1e3      	bne.n	80078e4 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007920:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8007924:	4611      	mov	r1, r2
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800792a:	e023      	b.n	8007974 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800792c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007934:	2b00      	cmp	r3, #0
 8007936:	d009      	beq.n	800794c <HAL_UART_IRQHandler+0x4f4>
 8007938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800793c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fa33 	bl	8007db0 <UART_Transmit_IT>
    return;
 800794a:	e014      	b.n	8007976 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800794c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00e      	beq.n	8007976 <HAL_UART_IRQHandler+0x51e>
 8007958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800795c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007960:	2b00      	cmp	r3, #0
 8007962:	d008      	beq.n	8007976 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fa73 	bl	8007e50 <UART_EndTransmit_IT>
    return;
 800796a:	e004      	b.n	8007976 <HAL_UART_IRQHandler+0x51e>
    return;
 800796c:	bf00      	nop
 800796e:	e002      	b.n	8007976 <HAL_UART_IRQHandler+0x51e>
      return;
 8007970:	bf00      	nop
 8007972:	e000      	b.n	8007976 <HAL_UART_IRQHandler+0x51e>
      return;
 8007974:	bf00      	nop
  }
}
 8007976:	37e8      	adds	r7, #232	; 0xe8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a10      	ldr	r2, [pc, #64]	; (8007a80 <UART_InitCallbacksToDefault+0x4c>)
 8007a40:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a0f      	ldr	r2, [pc, #60]	; (8007a84 <UART_InitCallbacksToDefault+0x50>)
 8007a46:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a0f      	ldr	r2, [pc, #60]	; (8007a88 <UART_InitCallbacksToDefault+0x54>)
 8007a4c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a0e      	ldr	r2, [pc, #56]	; (8007a8c <UART_InitCallbacksToDefault+0x58>)
 8007a52:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a0e      	ldr	r2, [pc, #56]	; (8007a90 <UART_InitCallbacksToDefault+0x5c>)
 8007a58:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a0d      	ldr	r2, [pc, #52]	; (8007a94 <UART_InitCallbacksToDefault+0x60>)
 8007a5e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a0d      	ldr	r2, [pc, #52]	; (8007a98 <UART_InitCallbacksToDefault+0x64>)
 8007a64:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a0c      	ldr	r2, [pc, #48]	; (8007a9c <UART_InitCallbacksToDefault+0x68>)
 8007a6a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a0c      	ldr	r2, [pc, #48]	; (8007aa0 <UART_InitCallbacksToDefault+0x6c>)
 8007a70:	669a      	str	r2, [r3, #104]	; 0x68

}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	08007991 	.word	0x08007991
 8007a84:	0800797d 	.word	0x0800797d
 8007a88:	080079b9 	.word	0x080079b9
 8007a8c:	080079a5 	.word	0x080079a5
 8007a90:	080079cd 	.word	0x080079cd
 8007a94:	080079e1 	.word	0x080079e1
 8007a98:	080079f5 	.word	0x080079f5
 8007a9c:	08007a09 	.word	0x08007a09
 8007aa0:	08007a1d 	.word	0x08007a1d

08007aa4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b090      	sub	sp, #64	; 0x40
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d137      	bne.n	8007b30 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3314      	adds	r3, #20
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007adc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3314      	adds	r3, #20
 8007ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ae6:	633a      	str	r2, [r7, #48]	; 0x30
 8007ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aee:	e841 2300 	strex	r3, r2, [r1]
 8007af2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1e5      	bne.n	8007ac6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	330c      	adds	r3, #12
 8007b00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b10:	637b      	str	r3, [r7, #52]	; 0x34
 8007b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	330c      	adds	r3, #12
 8007b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b1a:	61fa      	str	r2, [r7, #28]
 8007b1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	69b9      	ldr	r1, [r7, #24]
 8007b20:	69fa      	ldr	r2, [r7, #28]
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	617b      	str	r3, [r7, #20]
   return(result);
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e5      	bne.n	8007afa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b2e:	e003      	b.n	8007b38 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8007b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007b36:	4798      	blx	r3
}
 8007b38:	bf00      	nop
 8007b3a:	3740      	adds	r7, #64	; 0x40
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b56:	bf00      	nop
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b084      	sub	sp, #16
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7a:	2b80      	cmp	r3, #128	; 0x80
 8007b7c:	bf0c      	ite	eq
 8007b7e:	2301      	moveq	r3, #1
 8007b80:	2300      	movne	r3, #0
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b21      	cmp	r3, #33	; 0x21
 8007b90:	d108      	bne.n	8007ba4 <UART_DMAError+0x46>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d005      	beq.n	8007ba4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007b9e:	68b8      	ldr	r0, [r7, #8]
 8007ba0:	f000 f866 	bl	8007c70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bae:	2b40      	cmp	r3, #64	; 0x40
 8007bb0:	bf0c      	ite	eq
 8007bb2:	2301      	moveq	r3, #1
 8007bb4:	2300      	movne	r3, #0
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b22      	cmp	r3, #34	; 0x22
 8007bc4:	d108      	bne.n	8007bd8 <UART_DMAError+0x7a>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d005      	beq.n	8007bd8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007bd2:	68b8      	ldr	r0, [r7, #8]
 8007bd4:	f000 f874 	bl	8007cc0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bdc:	f043 0210 	orr.w	r2, r3, #16
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be8:	68b8      	ldr	r0, [r7, #8]
 8007bea:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bec:	bf00      	nop
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	88fa      	ldrh	r2, [r7, #6]
 8007c0c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	88fa      	ldrh	r2, [r7, #6]
 8007c12:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2222      	movs	r2, #34	; 0x22
 8007c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d007      	beq.n	8007c42 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c40:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	695a      	ldr	r2, [r3, #20]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f042 0201 	orr.w	r2, r2, #1
 8007c50:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68da      	ldr	r2, [r3, #12]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f042 0220 	orr.w	r2, r2, #32
 8007c60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b089      	sub	sp, #36	; 0x24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	330c      	adds	r3, #12
 8007c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	e853 3f00 	ldrex	r3, [r3]
 8007c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c8e:	61fb      	str	r3, [r7, #28]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	330c      	adds	r3, #12
 8007c96:	69fa      	ldr	r2, [r7, #28]
 8007c98:	61ba      	str	r2, [r7, #24]
 8007c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9c:	6979      	ldr	r1, [r7, #20]
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	e841 2300 	strex	r3, r2, [r1]
 8007ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e5      	bne.n	8007c78 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007cb4:	bf00      	nop
 8007cb6:	3724      	adds	r7, #36	; 0x24
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b095      	sub	sp, #84	; 0x54
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	330c      	adds	r3, #12
 8007cce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ce8:	643a      	str	r2, [r7, #64]	; 0x40
 8007cea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e5      	bne.n	8007cc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3314      	adds	r3, #20
 8007d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	e853 3f00 	ldrex	r3, [r3]
 8007d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	f023 0301 	bic.w	r3, r3, #1
 8007d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3314      	adds	r3, #20
 8007d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d24:	e841 2300 	strex	r3, r2, [r1]
 8007d28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e5      	bne.n	8007cfc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d119      	bne.n	8007d6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	330c      	adds	r3, #12
 8007d3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	e853 3f00 	ldrex	r3, [r3]
 8007d46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f023 0310 	bic.w	r3, r3, #16
 8007d4e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	330c      	adds	r3, #12
 8007d56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d58:	61ba      	str	r2, [r7, #24]
 8007d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5c:	6979      	ldr	r1, [r7, #20]
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	e841 2300 	strex	r3, r2, [r1]
 8007d64:	613b      	str	r3, [r7, #16]
   return(result);
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e5      	bne.n	8007d38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d7a:	bf00      	nop
 8007d7c:	3754      	adds	r7, #84	; 0x54
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007da8:	bf00      	nop
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b21      	cmp	r3, #33	; 0x21
 8007dc2:	d13e      	bne.n	8007e42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dcc:	d114      	bne.n	8007df8 <UART_Transmit_IT+0x48>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d110      	bne.n	8007df8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	461a      	mov	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	1c9a      	adds	r2, r3, #2
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	621a      	str	r2, [r3, #32]
 8007df6:	e008      	b.n	8007e0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	1c59      	adds	r1, r3, #1
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	6211      	str	r1, [r2, #32]
 8007e02:	781a      	ldrb	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	3b01      	subs	r3, #1
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	4619      	mov	r1, r3
 8007e18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10f      	bne.n	8007e3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68da      	ldr	r2, [r3, #12]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68da      	ldr	r2, [r3, #12]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	e000      	b.n	8007e44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e42:	2302      	movs	r3, #2
  }
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b08c      	sub	sp, #48	; 0x30
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b22      	cmp	r3, #34	; 0x22
 8007e94:	f040 80ad 	bne.w	8007ff2 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea0:	d117      	bne.n	8007ed2 <UART_Receive_IT+0x50>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d113      	bne.n	8007ed2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eca:	1c9a      	adds	r2, r3, #2
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	629a      	str	r2, [r3, #40]	; 0x28
 8007ed0:	e026      	b.n	8007f20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ee4:	d007      	beq.n	8007ef6 <UART_Receive_IT+0x74>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10a      	bne.n	8007f04 <UART_Receive_IT+0x82>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d106      	bne.n	8007f04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	e008      	b.n	8007f16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	3b01      	subs	r3, #1
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d15c      	bne.n	8007fee <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68da      	ldr	r2, [r3, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 0220 	bic.w	r2, r2, #32
 8007f42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	695a      	ldr	r2, [r3, #20]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0201 	bic.w	r2, r2, #1
 8007f62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d136      	bne.n	8007fe2 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	330c      	adds	r3, #12
 8007f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	613b      	str	r3, [r7, #16]
   return(result);
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f023 0310 	bic.w	r3, r3, #16
 8007f90:	627b      	str	r3, [r7, #36]	; 0x24
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	330c      	adds	r3, #12
 8007f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f9a:	623a      	str	r2, [r7, #32]
 8007f9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	69f9      	ldr	r1, [r7, #28]
 8007fa0:	6a3a      	ldr	r2, [r7, #32]
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e5      	bne.n	8007f7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0310 	and.w	r3, r3, #16
 8007fb8:	2b10      	cmp	r3, #16
 8007fba:	d10a      	bne.n	8007fd2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	60fb      	str	r3, [r7, #12]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007fda:	4611      	mov	r1, r2
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	4798      	blx	r3
 8007fe0:	e003      	b.n	8007fea <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	e002      	b.n	8007ff4 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e000      	b.n	8007ff4 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8007ff2:	2302      	movs	r3, #2
  }
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3730      	adds	r7, #48	; 0x30
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008000:	b0c0      	sub	sp, #256	; 0x100
 8008002:	af00      	add	r7, sp, #0
 8008004:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008018:	68d9      	ldr	r1, [r3, #12]
 800801a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	ea40 0301 	orr.w	r3, r0, r1
 8008024:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	431a      	orrs	r2, r3
 8008034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	431a      	orrs	r2, r3
 800803c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	4313      	orrs	r3, r2
 8008044:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008054:	f021 010c 	bic.w	r1, r1, #12
 8008058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008062:	430b      	orrs	r3, r1
 8008064:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008076:	6999      	ldr	r1, [r3, #24]
 8008078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	ea40 0301 	orr.w	r3, r0, r1
 8008082:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	4b8f      	ldr	r3, [pc, #572]	; (80082c8 <UART_SetConfig+0x2cc>)
 800808c:	429a      	cmp	r2, r3
 800808e:	d005      	beq.n	800809c <UART_SetConfig+0xa0>
 8008090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	4b8d      	ldr	r3, [pc, #564]	; (80082cc <UART_SetConfig+0x2d0>)
 8008098:	429a      	cmp	r2, r3
 800809a:	d104      	bne.n	80080a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800809c:	f7fd fa26 	bl	80054ec <HAL_RCC_GetPCLK2Freq>
 80080a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80080a4:	e003      	b.n	80080ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080a6:	f7fd fa0d 	bl	80054c4 <HAL_RCC_GetPCLK1Freq>
 80080aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080b8:	f040 810c 	bne.w	80082d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80080c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80080ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80080ce:	4622      	mov	r2, r4
 80080d0:	462b      	mov	r3, r5
 80080d2:	1891      	adds	r1, r2, r2
 80080d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80080d6:	415b      	adcs	r3, r3
 80080d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80080de:	4621      	mov	r1, r4
 80080e0:	eb12 0801 	adds.w	r8, r2, r1
 80080e4:	4629      	mov	r1, r5
 80080e6:	eb43 0901 	adc.w	r9, r3, r1
 80080ea:	f04f 0200 	mov.w	r2, #0
 80080ee:	f04f 0300 	mov.w	r3, #0
 80080f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080fe:	4690      	mov	r8, r2
 8008100:	4699      	mov	r9, r3
 8008102:	4623      	mov	r3, r4
 8008104:	eb18 0303 	adds.w	r3, r8, r3
 8008108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800810c:	462b      	mov	r3, r5
 800810e:	eb49 0303 	adc.w	r3, r9, r3
 8008112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008122:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008126:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800812a:	460b      	mov	r3, r1
 800812c:	18db      	adds	r3, r3, r3
 800812e:	653b      	str	r3, [r7, #80]	; 0x50
 8008130:	4613      	mov	r3, r2
 8008132:	eb42 0303 	adc.w	r3, r2, r3
 8008136:	657b      	str	r3, [r7, #84]	; 0x54
 8008138:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800813c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008140:	f7f8 fd2e 	bl	8000ba0 <__aeabi_uldivmod>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4b61      	ldr	r3, [pc, #388]	; (80082d0 <UART_SetConfig+0x2d4>)
 800814a:	fba3 2302 	umull	r2, r3, r3, r2
 800814e:	095b      	lsrs	r3, r3, #5
 8008150:	011c      	lsls	r4, r3, #4
 8008152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008156:	2200      	movs	r2, #0
 8008158:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800815c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008160:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008164:	4642      	mov	r2, r8
 8008166:	464b      	mov	r3, r9
 8008168:	1891      	adds	r1, r2, r2
 800816a:	64b9      	str	r1, [r7, #72]	; 0x48
 800816c:	415b      	adcs	r3, r3
 800816e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008170:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008174:	4641      	mov	r1, r8
 8008176:	eb12 0a01 	adds.w	sl, r2, r1
 800817a:	4649      	mov	r1, r9
 800817c:	eb43 0b01 	adc.w	fp, r3, r1
 8008180:	f04f 0200 	mov.w	r2, #0
 8008184:	f04f 0300 	mov.w	r3, #0
 8008188:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800818c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008194:	4692      	mov	sl, r2
 8008196:	469b      	mov	fp, r3
 8008198:	4643      	mov	r3, r8
 800819a:	eb1a 0303 	adds.w	r3, sl, r3
 800819e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081a2:	464b      	mov	r3, r9
 80081a4:	eb4b 0303 	adc.w	r3, fp, r3
 80081a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80081bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80081c0:	460b      	mov	r3, r1
 80081c2:	18db      	adds	r3, r3, r3
 80081c4:	643b      	str	r3, [r7, #64]	; 0x40
 80081c6:	4613      	mov	r3, r2
 80081c8:	eb42 0303 	adc.w	r3, r2, r3
 80081cc:	647b      	str	r3, [r7, #68]	; 0x44
 80081ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80081d6:	f7f8 fce3 	bl	8000ba0 <__aeabi_uldivmod>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	4611      	mov	r1, r2
 80081e0:	4b3b      	ldr	r3, [pc, #236]	; (80082d0 <UART_SetConfig+0x2d4>)
 80081e2:	fba3 2301 	umull	r2, r3, r3, r1
 80081e6:	095b      	lsrs	r3, r3, #5
 80081e8:	2264      	movs	r2, #100	; 0x64
 80081ea:	fb02 f303 	mul.w	r3, r2, r3
 80081ee:	1acb      	subs	r3, r1, r3
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80081f6:	4b36      	ldr	r3, [pc, #216]	; (80082d0 <UART_SetConfig+0x2d4>)
 80081f8:	fba3 2302 	umull	r2, r3, r3, r2
 80081fc:	095b      	lsrs	r3, r3, #5
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008204:	441c      	add	r4, r3
 8008206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800820a:	2200      	movs	r2, #0
 800820c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008210:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008214:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008218:	4642      	mov	r2, r8
 800821a:	464b      	mov	r3, r9
 800821c:	1891      	adds	r1, r2, r2
 800821e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008220:	415b      	adcs	r3, r3
 8008222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008224:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008228:	4641      	mov	r1, r8
 800822a:	1851      	adds	r1, r2, r1
 800822c:	6339      	str	r1, [r7, #48]	; 0x30
 800822e:	4649      	mov	r1, r9
 8008230:	414b      	adcs	r3, r1
 8008232:	637b      	str	r3, [r7, #52]	; 0x34
 8008234:	f04f 0200 	mov.w	r2, #0
 8008238:	f04f 0300 	mov.w	r3, #0
 800823c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008240:	4659      	mov	r1, fp
 8008242:	00cb      	lsls	r3, r1, #3
 8008244:	4651      	mov	r1, sl
 8008246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800824a:	4651      	mov	r1, sl
 800824c:	00ca      	lsls	r2, r1, #3
 800824e:	4610      	mov	r0, r2
 8008250:	4619      	mov	r1, r3
 8008252:	4603      	mov	r3, r0
 8008254:	4642      	mov	r2, r8
 8008256:	189b      	adds	r3, r3, r2
 8008258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800825c:	464b      	mov	r3, r9
 800825e:	460a      	mov	r2, r1
 8008260:	eb42 0303 	adc.w	r3, r2, r3
 8008264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008274:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008278:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800827c:	460b      	mov	r3, r1
 800827e:	18db      	adds	r3, r3, r3
 8008280:	62bb      	str	r3, [r7, #40]	; 0x28
 8008282:	4613      	mov	r3, r2
 8008284:	eb42 0303 	adc.w	r3, r2, r3
 8008288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800828a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800828e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008292:	f7f8 fc85 	bl	8000ba0 <__aeabi_uldivmod>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4b0d      	ldr	r3, [pc, #52]	; (80082d0 <UART_SetConfig+0x2d4>)
 800829c:	fba3 1302 	umull	r1, r3, r3, r2
 80082a0:	095b      	lsrs	r3, r3, #5
 80082a2:	2164      	movs	r1, #100	; 0x64
 80082a4:	fb01 f303 	mul.w	r3, r1, r3
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	00db      	lsls	r3, r3, #3
 80082ac:	3332      	adds	r3, #50	; 0x32
 80082ae:	4a08      	ldr	r2, [pc, #32]	; (80082d0 <UART_SetConfig+0x2d4>)
 80082b0:	fba2 2303 	umull	r2, r3, r2, r3
 80082b4:	095b      	lsrs	r3, r3, #5
 80082b6:	f003 0207 	and.w	r2, r3, #7
 80082ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4422      	add	r2, r4
 80082c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082c4:	e105      	b.n	80084d2 <UART_SetConfig+0x4d6>
 80082c6:	bf00      	nop
 80082c8:	40011000 	.word	0x40011000
 80082cc:	40011400 	.word	0x40011400
 80082d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082d8:	2200      	movs	r2, #0
 80082da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80082de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80082e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80082e6:	4642      	mov	r2, r8
 80082e8:	464b      	mov	r3, r9
 80082ea:	1891      	adds	r1, r2, r2
 80082ec:	6239      	str	r1, [r7, #32]
 80082ee:	415b      	adcs	r3, r3
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
 80082f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082f6:	4641      	mov	r1, r8
 80082f8:	1854      	adds	r4, r2, r1
 80082fa:	4649      	mov	r1, r9
 80082fc:	eb43 0501 	adc.w	r5, r3, r1
 8008300:	f04f 0200 	mov.w	r2, #0
 8008304:	f04f 0300 	mov.w	r3, #0
 8008308:	00eb      	lsls	r3, r5, #3
 800830a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800830e:	00e2      	lsls	r2, r4, #3
 8008310:	4614      	mov	r4, r2
 8008312:	461d      	mov	r5, r3
 8008314:	4643      	mov	r3, r8
 8008316:	18e3      	adds	r3, r4, r3
 8008318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800831c:	464b      	mov	r3, r9
 800831e:	eb45 0303 	adc.w	r3, r5, r3
 8008322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008332:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008336:	f04f 0200 	mov.w	r2, #0
 800833a:	f04f 0300 	mov.w	r3, #0
 800833e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008342:	4629      	mov	r1, r5
 8008344:	008b      	lsls	r3, r1, #2
 8008346:	4621      	mov	r1, r4
 8008348:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800834c:	4621      	mov	r1, r4
 800834e:	008a      	lsls	r2, r1, #2
 8008350:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008354:	f7f8 fc24 	bl	8000ba0 <__aeabi_uldivmod>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	4b60      	ldr	r3, [pc, #384]	; (80084e0 <UART_SetConfig+0x4e4>)
 800835e:	fba3 2302 	umull	r2, r3, r3, r2
 8008362:	095b      	lsrs	r3, r3, #5
 8008364:	011c      	lsls	r4, r3, #4
 8008366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800836a:	2200      	movs	r2, #0
 800836c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008370:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008374:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008378:	4642      	mov	r2, r8
 800837a:	464b      	mov	r3, r9
 800837c:	1891      	adds	r1, r2, r2
 800837e:	61b9      	str	r1, [r7, #24]
 8008380:	415b      	adcs	r3, r3
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008388:	4641      	mov	r1, r8
 800838a:	1851      	adds	r1, r2, r1
 800838c:	6139      	str	r1, [r7, #16]
 800838e:	4649      	mov	r1, r9
 8008390:	414b      	adcs	r3, r1
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	f04f 0200 	mov.w	r2, #0
 8008398:	f04f 0300 	mov.w	r3, #0
 800839c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083a0:	4659      	mov	r1, fp
 80083a2:	00cb      	lsls	r3, r1, #3
 80083a4:	4651      	mov	r1, sl
 80083a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083aa:	4651      	mov	r1, sl
 80083ac:	00ca      	lsls	r2, r1, #3
 80083ae:	4610      	mov	r0, r2
 80083b0:	4619      	mov	r1, r3
 80083b2:	4603      	mov	r3, r0
 80083b4:	4642      	mov	r2, r8
 80083b6:	189b      	adds	r3, r3, r2
 80083b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083bc:	464b      	mov	r3, r9
 80083be:	460a      	mov	r2, r1
 80083c0:	eb42 0303 	adc.w	r3, r2, r3
 80083c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80083d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80083d4:	f04f 0200 	mov.w	r2, #0
 80083d8:	f04f 0300 	mov.w	r3, #0
 80083dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80083e0:	4649      	mov	r1, r9
 80083e2:	008b      	lsls	r3, r1, #2
 80083e4:	4641      	mov	r1, r8
 80083e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083ea:	4641      	mov	r1, r8
 80083ec:	008a      	lsls	r2, r1, #2
 80083ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80083f2:	f7f8 fbd5 	bl	8000ba0 <__aeabi_uldivmod>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4b39      	ldr	r3, [pc, #228]	; (80084e0 <UART_SetConfig+0x4e4>)
 80083fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008400:	095b      	lsrs	r3, r3, #5
 8008402:	2164      	movs	r1, #100	; 0x64
 8008404:	fb01 f303 	mul.w	r3, r1, r3
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	3332      	adds	r3, #50	; 0x32
 800840e:	4a34      	ldr	r2, [pc, #208]	; (80084e0 <UART_SetConfig+0x4e4>)
 8008410:	fba2 2303 	umull	r2, r3, r2, r3
 8008414:	095b      	lsrs	r3, r3, #5
 8008416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800841a:	441c      	add	r4, r3
 800841c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008420:	2200      	movs	r2, #0
 8008422:	673b      	str	r3, [r7, #112]	; 0x70
 8008424:	677a      	str	r2, [r7, #116]	; 0x74
 8008426:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800842a:	4642      	mov	r2, r8
 800842c:	464b      	mov	r3, r9
 800842e:	1891      	adds	r1, r2, r2
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	415b      	adcs	r3, r3
 8008434:	60fb      	str	r3, [r7, #12]
 8008436:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800843a:	4641      	mov	r1, r8
 800843c:	1851      	adds	r1, r2, r1
 800843e:	6039      	str	r1, [r7, #0]
 8008440:	4649      	mov	r1, r9
 8008442:	414b      	adcs	r3, r1
 8008444:	607b      	str	r3, [r7, #4]
 8008446:	f04f 0200 	mov.w	r2, #0
 800844a:	f04f 0300 	mov.w	r3, #0
 800844e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008452:	4659      	mov	r1, fp
 8008454:	00cb      	lsls	r3, r1, #3
 8008456:	4651      	mov	r1, sl
 8008458:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800845c:	4651      	mov	r1, sl
 800845e:	00ca      	lsls	r2, r1, #3
 8008460:	4610      	mov	r0, r2
 8008462:	4619      	mov	r1, r3
 8008464:	4603      	mov	r3, r0
 8008466:	4642      	mov	r2, r8
 8008468:	189b      	adds	r3, r3, r2
 800846a:	66bb      	str	r3, [r7, #104]	; 0x68
 800846c:	464b      	mov	r3, r9
 800846e:	460a      	mov	r2, r1
 8008470:	eb42 0303 	adc.w	r3, r2, r3
 8008474:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	663b      	str	r3, [r7, #96]	; 0x60
 8008480:	667a      	str	r2, [r7, #100]	; 0x64
 8008482:	f04f 0200 	mov.w	r2, #0
 8008486:	f04f 0300 	mov.w	r3, #0
 800848a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800848e:	4649      	mov	r1, r9
 8008490:	008b      	lsls	r3, r1, #2
 8008492:	4641      	mov	r1, r8
 8008494:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008498:	4641      	mov	r1, r8
 800849a:	008a      	lsls	r2, r1, #2
 800849c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80084a0:	f7f8 fb7e 	bl	8000ba0 <__aeabi_uldivmod>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4b0d      	ldr	r3, [pc, #52]	; (80084e0 <UART_SetConfig+0x4e4>)
 80084aa:	fba3 1302 	umull	r1, r3, r3, r2
 80084ae:	095b      	lsrs	r3, r3, #5
 80084b0:	2164      	movs	r1, #100	; 0x64
 80084b2:	fb01 f303 	mul.w	r3, r1, r3
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	011b      	lsls	r3, r3, #4
 80084ba:	3332      	adds	r3, #50	; 0x32
 80084bc:	4a08      	ldr	r2, [pc, #32]	; (80084e0 <UART_SetConfig+0x4e4>)
 80084be:	fba2 2303 	umull	r2, r3, r2, r3
 80084c2:	095b      	lsrs	r3, r3, #5
 80084c4:	f003 020f 	and.w	r2, r3, #15
 80084c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4422      	add	r2, r4
 80084d0:	609a      	str	r2, [r3, #8]
}
 80084d2:	bf00      	nop
 80084d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80084d8:	46bd      	mov	sp, r7
 80084da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084de:	bf00      	nop
 80084e0:	51eb851f 	.word	0x51eb851f

080084e4 <__errno>:
 80084e4:	4b01      	ldr	r3, [pc, #4]	; (80084ec <__errno+0x8>)
 80084e6:	6818      	ldr	r0, [r3, #0]
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	20000254 	.word	0x20000254

080084f0 <__libc_init_array>:
 80084f0:	b570      	push	{r4, r5, r6, lr}
 80084f2:	4d0d      	ldr	r5, [pc, #52]	; (8008528 <__libc_init_array+0x38>)
 80084f4:	4c0d      	ldr	r4, [pc, #52]	; (800852c <__libc_init_array+0x3c>)
 80084f6:	1b64      	subs	r4, r4, r5
 80084f8:	10a4      	asrs	r4, r4, #2
 80084fa:	2600      	movs	r6, #0
 80084fc:	42a6      	cmp	r6, r4
 80084fe:	d109      	bne.n	8008514 <__libc_init_array+0x24>
 8008500:	4d0b      	ldr	r5, [pc, #44]	; (8008530 <__libc_init_array+0x40>)
 8008502:	4c0c      	ldr	r4, [pc, #48]	; (8008534 <__libc_init_array+0x44>)
 8008504:	f000 ff4a 	bl	800939c <_init>
 8008508:	1b64      	subs	r4, r4, r5
 800850a:	10a4      	asrs	r4, r4, #2
 800850c:	2600      	movs	r6, #0
 800850e:	42a6      	cmp	r6, r4
 8008510:	d105      	bne.n	800851e <__libc_init_array+0x2e>
 8008512:	bd70      	pop	{r4, r5, r6, pc}
 8008514:	f855 3b04 	ldr.w	r3, [r5], #4
 8008518:	4798      	blx	r3
 800851a:	3601      	adds	r6, #1
 800851c:	e7ee      	b.n	80084fc <__libc_init_array+0xc>
 800851e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008522:	4798      	blx	r3
 8008524:	3601      	adds	r6, #1
 8008526:	e7f2      	b.n	800850e <__libc_init_array+0x1e>
 8008528:	08009410 	.word	0x08009410
 800852c:	08009410 	.word	0x08009410
 8008530:	08009410 	.word	0x08009410
 8008534:	08009414 	.word	0x08009414

08008538 <memcpy>:
 8008538:	440a      	add	r2, r1
 800853a:	4291      	cmp	r1, r2
 800853c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008540:	d100      	bne.n	8008544 <memcpy+0xc>
 8008542:	4770      	bx	lr
 8008544:	b510      	push	{r4, lr}
 8008546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800854a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800854e:	4291      	cmp	r1, r2
 8008550:	d1f9      	bne.n	8008546 <memcpy+0xe>
 8008552:	bd10      	pop	{r4, pc}

08008554 <memset>:
 8008554:	4402      	add	r2, r0
 8008556:	4603      	mov	r3, r0
 8008558:	4293      	cmp	r3, r2
 800855a:	d100      	bne.n	800855e <memset+0xa>
 800855c:	4770      	bx	lr
 800855e:	f803 1b01 	strb.w	r1, [r3], #1
 8008562:	e7f9      	b.n	8008558 <memset+0x4>

08008564 <pow>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	ed2d 8b02 	vpush	{d8}
 800856a:	eeb0 8a40 	vmov.f32	s16, s0
 800856e:	eef0 8a60 	vmov.f32	s17, s1
 8008572:	ec55 4b11 	vmov	r4, r5, d1
 8008576:	f000 f867 	bl	8008648 <__ieee754_pow>
 800857a:	4622      	mov	r2, r4
 800857c:	462b      	mov	r3, r5
 800857e:	4620      	mov	r0, r4
 8008580:	4629      	mov	r1, r5
 8008582:	ec57 6b10 	vmov	r6, r7, d0
 8008586:	f7f8 fa7d 	bl	8000a84 <__aeabi_dcmpun>
 800858a:	2800      	cmp	r0, #0
 800858c:	d13b      	bne.n	8008606 <pow+0xa2>
 800858e:	ec51 0b18 	vmov	r0, r1, d8
 8008592:	2200      	movs	r2, #0
 8008594:	2300      	movs	r3, #0
 8008596:	f7f8 fa43 	bl	8000a20 <__aeabi_dcmpeq>
 800859a:	b1b8      	cbz	r0, 80085cc <pow+0x68>
 800859c:	2200      	movs	r2, #0
 800859e:	2300      	movs	r3, #0
 80085a0:	4620      	mov	r0, r4
 80085a2:	4629      	mov	r1, r5
 80085a4:	f7f8 fa3c 	bl	8000a20 <__aeabi_dcmpeq>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d146      	bne.n	800863a <pow+0xd6>
 80085ac:	ec45 4b10 	vmov	d0, r4, r5
 80085b0:	f000 fe63 	bl	800927a <finite>
 80085b4:	b338      	cbz	r0, 8008606 <pow+0xa2>
 80085b6:	2200      	movs	r2, #0
 80085b8:	2300      	movs	r3, #0
 80085ba:	4620      	mov	r0, r4
 80085bc:	4629      	mov	r1, r5
 80085be:	f7f8 fa39 	bl	8000a34 <__aeabi_dcmplt>
 80085c2:	b300      	cbz	r0, 8008606 <pow+0xa2>
 80085c4:	f7ff ff8e 	bl	80084e4 <__errno>
 80085c8:	2322      	movs	r3, #34	; 0x22
 80085ca:	e01b      	b.n	8008604 <pow+0xa0>
 80085cc:	ec47 6b10 	vmov	d0, r6, r7
 80085d0:	f000 fe53 	bl	800927a <finite>
 80085d4:	b9e0      	cbnz	r0, 8008610 <pow+0xac>
 80085d6:	eeb0 0a48 	vmov.f32	s0, s16
 80085da:	eef0 0a68 	vmov.f32	s1, s17
 80085de:	f000 fe4c 	bl	800927a <finite>
 80085e2:	b1a8      	cbz	r0, 8008610 <pow+0xac>
 80085e4:	ec45 4b10 	vmov	d0, r4, r5
 80085e8:	f000 fe47 	bl	800927a <finite>
 80085ec:	b180      	cbz	r0, 8008610 <pow+0xac>
 80085ee:	4632      	mov	r2, r6
 80085f0:	463b      	mov	r3, r7
 80085f2:	4630      	mov	r0, r6
 80085f4:	4639      	mov	r1, r7
 80085f6:	f7f8 fa45 	bl	8000a84 <__aeabi_dcmpun>
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d0e2      	beq.n	80085c4 <pow+0x60>
 80085fe:	f7ff ff71 	bl	80084e4 <__errno>
 8008602:	2321      	movs	r3, #33	; 0x21
 8008604:	6003      	str	r3, [r0, #0]
 8008606:	ecbd 8b02 	vpop	{d8}
 800860a:	ec47 6b10 	vmov	d0, r6, r7
 800860e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008610:	2200      	movs	r2, #0
 8008612:	2300      	movs	r3, #0
 8008614:	4630      	mov	r0, r6
 8008616:	4639      	mov	r1, r7
 8008618:	f7f8 fa02 	bl	8000a20 <__aeabi_dcmpeq>
 800861c:	2800      	cmp	r0, #0
 800861e:	d0f2      	beq.n	8008606 <pow+0xa2>
 8008620:	eeb0 0a48 	vmov.f32	s0, s16
 8008624:	eef0 0a68 	vmov.f32	s1, s17
 8008628:	f000 fe27 	bl	800927a <finite>
 800862c:	2800      	cmp	r0, #0
 800862e:	d0ea      	beq.n	8008606 <pow+0xa2>
 8008630:	ec45 4b10 	vmov	d0, r4, r5
 8008634:	f000 fe21 	bl	800927a <finite>
 8008638:	e7c3      	b.n	80085c2 <pow+0x5e>
 800863a:	4f01      	ldr	r7, [pc, #4]	; (8008640 <pow+0xdc>)
 800863c:	2600      	movs	r6, #0
 800863e:	e7e2      	b.n	8008606 <pow+0xa2>
 8008640:	3ff00000 	.word	0x3ff00000
 8008644:	00000000 	.word	0x00000000

08008648 <__ieee754_pow>:
 8008648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864c:	ed2d 8b06 	vpush	{d8-d10}
 8008650:	b089      	sub	sp, #36	; 0x24
 8008652:	ed8d 1b00 	vstr	d1, [sp]
 8008656:	e9dd 2900 	ldrd	r2, r9, [sp]
 800865a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800865e:	ea58 0102 	orrs.w	r1, r8, r2
 8008662:	ec57 6b10 	vmov	r6, r7, d0
 8008666:	d115      	bne.n	8008694 <__ieee754_pow+0x4c>
 8008668:	19b3      	adds	r3, r6, r6
 800866a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800866e:	4152      	adcs	r2, r2
 8008670:	4299      	cmp	r1, r3
 8008672:	4b89      	ldr	r3, [pc, #548]	; (8008898 <__ieee754_pow+0x250>)
 8008674:	4193      	sbcs	r3, r2
 8008676:	f080 84d2 	bcs.w	800901e <__ieee754_pow+0x9d6>
 800867a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800867e:	4630      	mov	r0, r6
 8008680:	4639      	mov	r1, r7
 8008682:	f7f7 fdaf 	bl	80001e4 <__adddf3>
 8008686:	ec41 0b10 	vmov	d0, r0, r1
 800868a:	b009      	add	sp, #36	; 0x24
 800868c:	ecbd 8b06 	vpop	{d8-d10}
 8008690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008694:	4b81      	ldr	r3, [pc, #516]	; (800889c <__ieee754_pow+0x254>)
 8008696:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800869a:	429c      	cmp	r4, r3
 800869c:	ee10 aa10 	vmov	sl, s0
 80086a0:	463d      	mov	r5, r7
 80086a2:	dc06      	bgt.n	80086b2 <__ieee754_pow+0x6a>
 80086a4:	d101      	bne.n	80086aa <__ieee754_pow+0x62>
 80086a6:	2e00      	cmp	r6, #0
 80086a8:	d1e7      	bne.n	800867a <__ieee754_pow+0x32>
 80086aa:	4598      	cmp	r8, r3
 80086ac:	dc01      	bgt.n	80086b2 <__ieee754_pow+0x6a>
 80086ae:	d10f      	bne.n	80086d0 <__ieee754_pow+0x88>
 80086b0:	b172      	cbz	r2, 80086d0 <__ieee754_pow+0x88>
 80086b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80086b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80086ba:	ea55 050a 	orrs.w	r5, r5, sl
 80086be:	d1dc      	bne.n	800867a <__ieee754_pow+0x32>
 80086c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80086c4:	18db      	adds	r3, r3, r3
 80086c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80086ca:	4152      	adcs	r2, r2
 80086cc:	429d      	cmp	r5, r3
 80086ce:	e7d0      	b.n	8008672 <__ieee754_pow+0x2a>
 80086d0:	2d00      	cmp	r5, #0
 80086d2:	da3b      	bge.n	800874c <__ieee754_pow+0x104>
 80086d4:	4b72      	ldr	r3, [pc, #456]	; (80088a0 <__ieee754_pow+0x258>)
 80086d6:	4598      	cmp	r8, r3
 80086d8:	dc51      	bgt.n	800877e <__ieee754_pow+0x136>
 80086da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80086de:	4598      	cmp	r8, r3
 80086e0:	f340 84ac 	ble.w	800903c <__ieee754_pow+0x9f4>
 80086e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80086e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80086ec:	2b14      	cmp	r3, #20
 80086ee:	dd0f      	ble.n	8008710 <__ieee754_pow+0xc8>
 80086f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80086f4:	fa22 f103 	lsr.w	r1, r2, r3
 80086f8:	fa01 f303 	lsl.w	r3, r1, r3
 80086fc:	4293      	cmp	r3, r2
 80086fe:	f040 849d 	bne.w	800903c <__ieee754_pow+0x9f4>
 8008702:	f001 0101 	and.w	r1, r1, #1
 8008706:	f1c1 0302 	rsb	r3, r1, #2
 800870a:	9304      	str	r3, [sp, #16]
 800870c:	b182      	cbz	r2, 8008730 <__ieee754_pow+0xe8>
 800870e:	e05f      	b.n	80087d0 <__ieee754_pow+0x188>
 8008710:	2a00      	cmp	r2, #0
 8008712:	d15b      	bne.n	80087cc <__ieee754_pow+0x184>
 8008714:	f1c3 0314 	rsb	r3, r3, #20
 8008718:	fa48 f103 	asr.w	r1, r8, r3
 800871c:	fa01 f303 	lsl.w	r3, r1, r3
 8008720:	4543      	cmp	r3, r8
 8008722:	f040 8488 	bne.w	8009036 <__ieee754_pow+0x9ee>
 8008726:	f001 0101 	and.w	r1, r1, #1
 800872a:	f1c1 0302 	rsb	r3, r1, #2
 800872e:	9304      	str	r3, [sp, #16]
 8008730:	4b5c      	ldr	r3, [pc, #368]	; (80088a4 <__ieee754_pow+0x25c>)
 8008732:	4598      	cmp	r8, r3
 8008734:	d132      	bne.n	800879c <__ieee754_pow+0x154>
 8008736:	f1b9 0f00 	cmp.w	r9, #0
 800873a:	f280 8478 	bge.w	800902e <__ieee754_pow+0x9e6>
 800873e:	4959      	ldr	r1, [pc, #356]	; (80088a4 <__ieee754_pow+0x25c>)
 8008740:	4632      	mov	r2, r6
 8008742:	463b      	mov	r3, r7
 8008744:	2000      	movs	r0, #0
 8008746:	f7f8 f82d 	bl	80007a4 <__aeabi_ddiv>
 800874a:	e79c      	b.n	8008686 <__ieee754_pow+0x3e>
 800874c:	2300      	movs	r3, #0
 800874e:	9304      	str	r3, [sp, #16]
 8008750:	2a00      	cmp	r2, #0
 8008752:	d13d      	bne.n	80087d0 <__ieee754_pow+0x188>
 8008754:	4b51      	ldr	r3, [pc, #324]	; (800889c <__ieee754_pow+0x254>)
 8008756:	4598      	cmp	r8, r3
 8008758:	d1ea      	bne.n	8008730 <__ieee754_pow+0xe8>
 800875a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800875e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008762:	ea53 030a 	orrs.w	r3, r3, sl
 8008766:	f000 845a 	beq.w	800901e <__ieee754_pow+0x9d6>
 800876a:	4b4f      	ldr	r3, [pc, #316]	; (80088a8 <__ieee754_pow+0x260>)
 800876c:	429c      	cmp	r4, r3
 800876e:	dd08      	ble.n	8008782 <__ieee754_pow+0x13a>
 8008770:	f1b9 0f00 	cmp.w	r9, #0
 8008774:	f2c0 8457 	blt.w	8009026 <__ieee754_pow+0x9de>
 8008778:	e9dd 0100 	ldrd	r0, r1, [sp]
 800877c:	e783      	b.n	8008686 <__ieee754_pow+0x3e>
 800877e:	2302      	movs	r3, #2
 8008780:	e7e5      	b.n	800874e <__ieee754_pow+0x106>
 8008782:	f1b9 0f00 	cmp.w	r9, #0
 8008786:	f04f 0000 	mov.w	r0, #0
 800878a:	f04f 0100 	mov.w	r1, #0
 800878e:	f6bf af7a 	bge.w	8008686 <__ieee754_pow+0x3e>
 8008792:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008796:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800879a:	e774      	b.n	8008686 <__ieee754_pow+0x3e>
 800879c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80087a0:	d106      	bne.n	80087b0 <__ieee754_pow+0x168>
 80087a2:	4632      	mov	r2, r6
 80087a4:	463b      	mov	r3, r7
 80087a6:	4630      	mov	r0, r6
 80087a8:	4639      	mov	r1, r7
 80087aa:	f7f7 fed1 	bl	8000550 <__aeabi_dmul>
 80087ae:	e76a      	b.n	8008686 <__ieee754_pow+0x3e>
 80087b0:	4b3e      	ldr	r3, [pc, #248]	; (80088ac <__ieee754_pow+0x264>)
 80087b2:	4599      	cmp	r9, r3
 80087b4:	d10c      	bne.n	80087d0 <__ieee754_pow+0x188>
 80087b6:	2d00      	cmp	r5, #0
 80087b8:	db0a      	blt.n	80087d0 <__ieee754_pow+0x188>
 80087ba:	ec47 6b10 	vmov	d0, r6, r7
 80087be:	b009      	add	sp, #36	; 0x24
 80087c0:	ecbd 8b06 	vpop	{d8-d10}
 80087c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c8:	f000 bc6c 	b.w	80090a4 <__ieee754_sqrt>
 80087cc:	2300      	movs	r3, #0
 80087ce:	9304      	str	r3, [sp, #16]
 80087d0:	ec47 6b10 	vmov	d0, r6, r7
 80087d4:	f000 fd48 	bl	8009268 <fabs>
 80087d8:	ec51 0b10 	vmov	r0, r1, d0
 80087dc:	f1ba 0f00 	cmp.w	sl, #0
 80087e0:	d129      	bne.n	8008836 <__ieee754_pow+0x1ee>
 80087e2:	b124      	cbz	r4, 80087ee <__ieee754_pow+0x1a6>
 80087e4:	4b2f      	ldr	r3, [pc, #188]	; (80088a4 <__ieee754_pow+0x25c>)
 80087e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d123      	bne.n	8008836 <__ieee754_pow+0x1ee>
 80087ee:	f1b9 0f00 	cmp.w	r9, #0
 80087f2:	da05      	bge.n	8008800 <__ieee754_pow+0x1b8>
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	2000      	movs	r0, #0
 80087fa:	492a      	ldr	r1, [pc, #168]	; (80088a4 <__ieee754_pow+0x25c>)
 80087fc:	f7f7 ffd2 	bl	80007a4 <__aeabi_ddiv>
 8008800:	2d00      	cmp	r5, #0
 8008802:	f6bf af40 	bge.w	8008686 <__ieee754_pow+0x3e>
 8008806:	9b04      	ldr	r3, [sp, #16]
 8008808:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800880c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008810:	4323      	orrs	r3, r4
 8008812:	d108      	bne.n	8008826 <__ieee754_pow+0x1de>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	4610      	mov	r0, r2
 800881a:	4619      	mov	r1, r3
 800881c:	f7f7 fce0 	bl	80001e0 <__aeabi_dsub>
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	e78f      	b.n	8008746 <__ieee754_pow+0xfe>
 8008826:	9b04      	ldr	r3, [sp, #16]
 8008828:	2b01      	cmp	r3, #1
 800882a:	f47f af2c 	bne.w	8008686 <__ieee754_pow+0x3e>
 800882e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008832:	4619      	mov	r1, r3
 8008834:	e727      	b.n	8008686 <__ieee754_pow+0x3e>
 8008836:	0feb      	lsrs	r3, r5, #31
 8008838:	3b01      	subs	r3, #1
 800883a:	9306      	str	r3, [sp, #24]
 800883c:	9a06      	ldr	r2, [sp, #24]
 800883e:	9b04      	ldr	r3, [sp, #16]
 8008840:	4313      	orrs	r3, r2
 8008842:	d102      	bne.n	800884a <__ieee754_pow+0x202>
 8008844:	4632      	mov	r2, r6
 8008846:	463b      	mov	r3, r7
 8008848:	e7e6      	b.n	8008818 <__ieee754_pow+0x1d0>
 800884a:	4b19      	ldr	r3, [pc, #100]	; (80088b0 <__ieee754_pow+0x268>)
 800884c:	4598      	cmp	r8, r3
 800884e:	f340 80fb 	ble.w	8008a48 <__ieee754_pow+0x400>
 8008852:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008856:	4598      	cmp	r8, r3
 8008858:	4b13      	ldr	r3, [pc, #76]	; (80088a8 <__ieee754_pow+0x260>)
 800885a:	dd0c      	ble.n	8008876 <__ieee754_pow+0x22e>
 800885c:	429c      	cmp	r4, r3
 800885e:	dc0f      	bgt.n	8008880 <__ieee754_pow+0x238>
 8008860:	f1b9 0f00 	cmp.w	r9, #0
 8008864:	da0f      	bge.n	8008886 <__ieee754_pow+0x23e>
 8008866:	2000      	movs	r0, #0
 8008868:	b009      	add	sp, #36	; 0x24
 800886a:	ecbd 8b06 	vpop	{d8-d10}
 800886e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008872:	f000 bcf0 	b.w	8009256 <__math_oflow>
 8008876:	429c      	cmp	r4, r3
 8008878:	dbf2      	blt.n	8008860 <__ieee754_pow+0x218>
 800887a:	4b0a      	ldr	r3, [pc, #40]	; (80088a4 <__ieee754_pow+0x25c>)
 800887c:	429c      	cmp	r4, r3
 800887e:	dd19      	ble.n	80088b4 <__ieee754_pow+0x26c>
 8008880:	f1b9 0f00 	cmp.w	r9, #0
 8008884:	dcef      	bgt.n	8008866 <__ieee754_pow+0x21e>
 8008886:	2000      	movs	r0, #0
 8008888:	b009      	add	sp, #36	; 0x24
 800888a:	ecbd 8b06 	vpop	{d8-d10}
 800888e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008892:	f000 bcd7 	b.w	8009244 <__math_uflow>
 8008896:	bf00      	nop
 8008898:	fff00000 	.word	0xfff00000
 800889c:	7ff00000 	.word	0x7ff00000
 80088a0:	433fffff 	.word	0x433fffff
 80088a4:	3ff00000 	.word	0x3ff00000
 80088a8:	3fefffff 	.word	0x3fefffff
 80088ac:	3fe00000 	.word	0x3fe00000
 80088b0:	41e00000 	.word	0x41e00000
 80088b4:	4b60      	ldr	r3, [pc, #384]	; (8008a38 <__ieee754_pow+0x3f0>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	f7f7 fc92 	bl	80001e0 <__aeabi_dsub>
 80088bc:	a354      	add	r3, pc, #336	; (adr r3, 8008a10 <__ieee754_pow+0x3c8>)
 80088be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c2:	4604      	mov	r4, r0
 80088c4:	460d      	mov	r5, r1
 80088c6:	f7f7 fe43 	bl	8000550 <__aeabi_dmul>
 80088ca:	a353      	add	r3, pc, #332	; (adr r3, 8008a18 <__ieee754_pow+0x3d0>)
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	4606      	mov	r6, r0
 80088d2:	460f      	mov	r7, r1
 80088d4:	4620      	mov	r0, r4
 80088d6:	4629      	mov	r1, r5
 80088d8:	f7f7 fe3a 	bl	8000550 <__aeabi_dmul>
 80088dc:	4b57      	ldr	r3, [pc, #348]	; (8008a3c <__ieee754_pow+0x3f4>)
 80088de:	4682      	mov	sl, r0
 80088e0:	468b      	mov	fp, r1
 80088e2:	2200      	movs	r2, #0
 80088e4:	4620      	mov	r0, r4
 80088e6:	4629      	mov	r1, r5
 80088e8:	f7f7 fe32 	bl	8000550 <__aeabi_dmul>
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	a14b      	add	r1, pc, #300	; (adr r1, 8008a20 <__ieee754_pow+0x3d8>)
 80088f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088f6:	f7f7 fc73 	bl	80001e0 <__aeabi_dsub>
 80088fa:	4622      	mov	r2, r4
 80088fc:	462b      	mov	r3, r5
 80088fe:	f7f7 fe27 	bl	8000550 <__aeabi_dmul>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	2000      	movs	r0, #0
 8008908:	494d      	ldr	r1, [pc, #308]	; (8008a40 <__ieee754_pow+0x3f8>)
 800890a:	f7f7 fc69 	bl	80001e0 <__aeabi_dsub>
 800890e:	4622      	mov	r2, r4
 8008910:	4680      	mov	r8, r0
 8008912:	4689      	mov	r9, r1
 8008914:	462b      	mov	r3, r5
 8008916:	4620      	mov	r0, r4
 8008918:	4629      	mov	r1, r5
 800891a:	f7f7 fe19 	bl	8000550 <__aeabi_dmul>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4640      	mov	r0, r8
 8008924:	4649      	mov	r1, r9
 8008926:	f7f7 fe13 	bl	8000550 <__aeabi_dmul>
 800892a:	a33f      	add	r3, pc, #252	; (adr r3, 8008a28 <__ieee754_pow+0x3e0>)
 800892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008930:	f7f7 fe0e 	bl	8000550 <__aeabi_dmul>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4650      	mov	r0, sl
 800893a:	4659      	mov	r1, fp
 800893c:	f7f7 fc50 	bl	80001e0 <__aeabi_dsub>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4680      	mov	r8, r0
 8008946:	4689      	mov	r9, r1
 8008948:	4630      	mov	r0, r6
 800894a:	4639      	mov	r1, r7
 800894c:	f7f7 fc4a 	bl	80001e4 <__adddf3>
 8008950:	2000      	movs	r0, #0
 8008952:	4632      	mov	r2, r6
 8008954:	463b      	mov	r3, r7
 8008956:	4604      	mov	r4, r0
 8008958:	460d      	mov	r5, r1
 800895a:	f7f7 fc41 	bl	80001e0 <__aeabi_dsub>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4640      	mov	r0, r8
 8008964:	4649      	mov	r1, r9
 8008966:	f7f7 fc3b 	bl	80001e0 <__aeabi_dsub>
 800896a:	9b04      	ldr	r3, [sp, #16]
 800896c:	9a06      	ldr	r2, [sp, #24]
 800896e:	3b01      	subs	r3, #1
 8008970:	4313      	orrs	r3, r2
 8008972:	4682      	mov	sl, r0
 8008974:	468b      	mov	fp, r1
 8008976:	f040 81e7 	bne.w	8008d48 <__ieee754_pow+0x700>
 800897a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008a30 <__ieee754_pow+0x3e8>
 800897e:	eeb0 8a47 	vmov.f32	s16, s14
 8008982:	eef0 8a67 	vmov.f32	s17, s15
 8008986:	e9dd 6700 	ldrd	r6, r7, [sp]
 800898a:	2600      	movs	r6, #0
 800898c:	4632      	mov	r2, r6
 800898e:	463b      	mov	r3, r7
 8008990:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008994:	f7f7 fc24 	bl	80001e0 <__aeabi_dsub>
 8008998:	4622      	mov	r2, r4
 800899a:	462b      	mov	r3, r5
 800899c:	f7f7 fdd8 	bl	8000550 <__aeabi_dmul>
 80089a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089a4:	4680      	mov	r8, r0
 80089a6:	4689      	mov	r9, r1
 80089a8:	4650      	mov	r0, sl
 80089aa:	4659      	mov	r1, fp
 80089ac:	f7f7 fdd0 	bl	8000550 <__aeabi_dmul>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4640      	mov	r0, r8
 80089b6:	4649      	mov	r1, r9
 80089b8:	f7f7 fc14 	bl	80001e4 <__adddf3>
 80089bc:	4632      	mov	r2, r6
 80089be:	463b      	mov	r3, r7
 80089c0:	4680      	mov	r8, r0
 80089c2:	4689      	mov	r9, r1
 80089c4:	4620      	mov	r0, r4
 80089c6:	4629      	mov	r1, r5
 80089c8:	f7f7 fdc2 	bl	8000550 <__aeabi_dmul>
 80089cc:	460b      	mov	r3, r1
 80089ce:	4604      	mov	r4, r0
 80089d0:	460d      	mov	r5, r1
 80089d2:	4602      	mov	r2, r0
 80089d4:	4649      	mov	r1, r9
 80089d6:	4640      	mov	r0, r8
 80089d8:	f7f7 fc04 	bl	80001e4 <__adddf3>
 80089dc:	4b19      	ldr	r3, [pc, #100]	; (8008a44 <__ieee754_pow+0x3fc>)
 80089de:	4299      	cmp	r1, r3
 80089e0:	ec45 4b19 	vmov	d9, r4, r5
 80089e4:	4606      	mov	r6, r0
 80089e6:	460f      	mov	r7, r1
 80089e8:	468b      	mov	fp, r1
 80089ea:	f340 82f1 	ble.w	8008fd0 <__ieee754_pow+0x988>
 80089ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80089f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80089f6:	4303      	orrs	r3, r0
 80089f8:	f000 81e4 	beq.w	8008dc4 <__ieee754_pow+0x77c>
 80089fc:	ec51 0b18 	vmov	r0, r1, d8
 8008a00:	2200      	movs	r2, #0
 8008a02:	2300      	movs	r3, #0
 8008a04:	f7f8 f816 	bl	8000a34 <__aeabi_dcmplt>
 8008a08:	3800      	subs	r0, #0
 8008a0a:	bf18      	it	ne
 8008a0c:	2001      	movne	r0, #1
 8008a0e:	e72b      	b.n	8008868 <__ieee754_pow+0x220>
 8008a10:	60000000 	.word	0x60000000
 8008a14:	3ff71547 	.word	0x3ff71547
 8008a18:	f85ddf44 	.word	0xf85ddf44
 8008a1c:	3e54ae0b 	.word	0x3e54ae0b
 8008a20:	55555555 	.word	0x55555555
 8008a24:	3fd55555 	.word	0x3fd55555
 8008a28:	652b82fe 	.word	0x652b82fe
 8008a2c:	3ff71547 	.word	0x3ff71547
 8008a30:	00000000 	.word	0x00000000
 8008a34:	bff00000 	.word	0xbff00000
 8008a38:	3ff00000 	.word	0x3ff00000
 8008a3c:	3fd00000 	.word	0x3fd00000
 8008a40:	3fe00000 	.word	0x3fe00000
 8008a44:	408fffff 	.word	0x408fffff
 8008a48:	4bd5      	ldr	r3, [pc, #852]	; (8008da0 <__ieee754_pow+0x758>)
 8008a4a:	402b      	ands	r3, r5
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	b92b      	cbnz	r3, 8008a5c <__ieee754_pow+0x414>
 8008a50:	4bd4      	ldr	r3, [pc, #848]	; (8008da4 <__ieee754_pow+0x75c>)
 8008a52:	f7f7 fd7d 	bl	8000550 <__aeabi_dmul>
 8008a56:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	1523      	asrs	r3, r4, #20
 8008a5e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008a62:	4413      	add	r3, r2
 8008a64:	9305      	str	r3, [sp, #20]
 8008a66:	4bd0      	ldr	r3, [pc, #832]	; (8008da8 <__ieee754_pow+0x760>)
 8008a68:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008a6c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008a70:	429c      	cmp	r4, r3
 8008a72:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008a76:	dd08      	ble.n	8008a8a <__ieee754_pow+0x442>
 8008a78:	4bcc      	ldr	r3, [pc, #816]	; (8008dac <__ieee754_pow+0x764>)
 8008a7a:	429c      	cmp	r4, r3
 8008a7c:	f340 8162 	ble.w	8008d44 <__ieee754_pow+0x6fc>
 8008a80:	9b05      	ldr	r3, [sp, #20]
 8008a82:	3301      	adds	r3, #1
 8008a84:	9305      	str	r3, [sp, #20]
 8008a86:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008a8a:	2400      	movs	r4, #0
 8008a8c:	00e3      	lsls	r3, r4, #3
 8008a8e:	9307      	str	r3, [sp, #28]
 8008a90:	4bc7      	ldr	r3, [pc, #796]	; (8008db0 <__ieee754_pow+0x768>)
 8008a92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a96:	ed93 7b00 	vldr	d7, [r3]
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	ec53 2b17 	vmov	r2, r3, d7
 8008aa0:	eeb0 9a47 	vmov.f32	s18, s14
 8008aa4:	eef0 9a67 	vmov.f32	s19, s15
 8008aa8:	4682      	mov	sl, r0
 8008aaa:	f7f7 fb99 	bl	80001e0 <__aeabi_dsub>
 8008aae:	4652      	mov	r2, sl
 8008ab0:	4606      	mov	r6, r0
 8008ab2:	460f      	mov	r7, r1
 8008ab4:	462b      	mov	r3, r5
 8008ab6:	ec51 0b19 	vmov	r0, r1, d9
 8008aba:	f7f7 fb93 	bl	80001e4 <__adddf3>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	49bb      	ldr	r1, [pc, #748]	; (8008db4 <__ieee754_pow+0x76c>)
 8008ac6:	f7f7 fe6d 	bl	80007a4 <__aeabi_ddiv>
 8008aca:	ec41 0b1a 	vmov	d10, r0, r1
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	f7f7 fd3b 	bl	8000550 <__aeabi_dmul>
 8008ada:	2300      	movs	r3, #0
 8008adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ae0:	9302      	str	r3, [sp, #8]
 8008ae2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008ae6:	46ab      	mov	fp, r5
 8008ae8:	106d      	asrs	r5, r5, #1
 8008aea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008aee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008af2:	ec41 0b18 	vmov	d8, r0, r1
 8008af6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008afa:	2200      	movs	r2, #0
 8008afc:	4640      	mov	r0, r8
 8008afe:	4649      	mov	r1, r9
 8008b00:	4614      	mov	r4, r2
 8008b02:	461d      	mov	r5, r3
 8008b04:	f7f7 fd24 	bl	8000550 <__aeabi_dmul>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	4639      	mov	r1, r7
 8008b10:	f7f7 fb66 	bl	80001e0 <__aeabi_dsub>
 8008b14:	ec53 2b19 	vmov	r2, r3, d9
 8008b18:	4606      	mov	r6, r0
 8008b1a:	460f      	mov	r7, r1
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	4629      	mov	r1, r5
 8008b20:	f7f7 fb5e 	bl	80001e0 <__aeabi_dsub>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	4650      	mov	r0, sl
 8008b2a:	4659      	mov	r1, fp
 8008b2c:	f7f7 fb58 	bl	80001e0 <__aeabi_dsub>
 8008b30:	4642      	mov	r2, r8
 8008b32:	464b      	mov	r3, r9
 8008b34:	f7f7 fd0c 	bl	8000550 <__aeabi_dmul>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	4639      	mov	r1, r7
 8008b40:	f7f7 fb4e 	bl	80001e0 <__aeabi_dsub>
 8008b44:	ec53 2b1a 	vmov	r2, r3, d10
 8008b48:	f7f7 fd02 	bl	8000550 <__aeabi_dmul>
 8008b4c:	ec53 2b18 	vmov	r2, r3, d8
 8008b50:	ec41 0b19 	vmov	d9, r0, r1
 8008b54:	ec51 0b18 	vmov	r0, r1, d8
 8008b58:	f7f7 fcfa 	bl	8000550 <__aeabi_dmul>
 8008b5c:	a37c      	add	r3, pc, #496	; (adr r3, 8008d50 <__ieee754_pow+0x708>)
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	4604      	mov	r4, r0
 8008b64:	460d      	mov	r5, r1
 8008b66:	f7f7 fcf3 	bl	8000550 <__aeabi_dmul>
 8008b6a:	a37b      	add	r3, pc, #492	; (adr r3, 8008d58 <__ieee754_pow+0x710>)
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	f7f7 fb38 	bl	80001e4 <__adddf3>
 8008b74:	4622      	mov	r2, r4
 8008b76:	462b      	mov	r3, r5
 8008b78:	f7f7 fcea 	bl	8000550 <__aeabi_dmul>
 8008b7c:	a378      	add	r3, pc, #480	; (adr r3, 8008d60 <__ieee754_pow+0x718>)
 8008b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b82:	f7f7 fb2f 	bl	80001e4 <__adddf3>
 8008b86:	4622      	mov	r2, r4
 8008b88:	462b      	mov	r3, r5
 8008b8a:	f7f7 fce1 	bl	8000550 <__aeabi_dmul>
 8008b8e:	a376      	add	r3, pc, #472	; (adr r3, 8008d68 <__ieee754_pow+0x720>)
 8008b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b94:	f7f7 fb26 	bl	80001e4 <__adddf3>
 8008b98:	4622      	mov	r2, r4
 8008b9a:	462b      	mov	r3, r5
 8008b9c:	f7f7 fcd8 	bl	8000550 <__aeabi_dmul>
 8008ba0:	a373      	add	r3, pc, #460	; (adr r3, 8008d70 <__ieee754_pow+0x728>)
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f7f7 fb1d 	bl	80001e4 <__adddf3>
 8008baa:	4622      	mov	r2, r4
 8008bac:	462b      	mov	r3, r5
 8008bae:	f7f7 fccf 	bl	8000550 <__aeabi_dmul>
 8008bb2:	a371      	add	r3, pc, #452	; (adr r3, 8008d78 <__ieee754_pow+0x730>)
 8008bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb8:	f7f7 fb14 	bl	80001e4 <__adddf3>
 8008bbc:	4622      	mov	r2, r4
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	460f      	mov	r7, r1
 8008bc2:	462b      	mov	r3, r5
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	4629      	mov	r1, r5
 8008bc8:	f7f7 fcc2 	bl	8000550 <__aeabi_dmul>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	4639      	mov	r1, r7
 8008bd4:	f7f7 fcbc 	bl	8000550 <__aeabi_dmul>
 8008bd8:	4642      	mov	r2, r8
 8008bda:	4604      	mov	r4, r0
 8008bdc:	460d      	mov	r5, r1
 8008bde:	464b      	mov	r3, r9
 8008be0:	ec51 0b18 	vmov	r0, r1, d8
 8008be4:	f7f7 fafe 	bl	80001e4 <__adddf3>
 8008be8:	ec53 2b19 	vmov	r2, r3, d9
 8008bec:	f7f7 fcb0 	bl	8000550 <__aeabi_dmul>
 8008bf0:	4622      	mov	r2, r4
 8008bf2:	462b      	mov	r3, r5
 8008bf4:	f7f7 faf6 	bl	80001e4 <__adddf3>
 8008bf8:	4642      	mov	r2, r8
 8008bfa:	4682      	mov	sl, r0
 8008bfc:	468b      	mov	fp, r1
 8008bfe:	464b      	mov	r3, r9
 8008c00:	4640      	mov	r0, r8
 8008c02:	4649      	mov	r1, r9
 8008c04:	f7f7 fca4 	bl	8000550 <__aeabi_dmul>
 8008c08:	4b6b      	ldr	r3, [pc, #428]	; (8008db8 <__ieee754_pow+0x770>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	460f      	mov	r7, r1
 8008c10:	f7f7 fae8 	bl	80001e4 <__adddf3>
 8008c14:	4652      	mov	r2, sl
 8008c16:	465b      	mov	r3, fp
 8008c18:	f7f7 fae4 	bl	80001e4 <__adddf3>
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	4604      	mov	r4, r0
 8008c20:	460d      	mov	r5, r1
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	4640      	mov	r0, r8
 8008c28:	4649      	mov	r1, r9
 8008c2a:	f7f7 fc91 	bl	8000550 <__aeabi_dmul>
 8008c2e:	4b62      	ldr	r3, [pc, #392]	; (8008db8 <__ieee754_pow+0x770>)
 8008c30:	4680      	mov	r8, r0
 8008c32:	4689      	mov	r9, r1
 8008c34:	2200      	movs	r2, #0
 8008c36:	4620      	mov	r0, r4
 8008c38:	4629      	mov	r1, r5
 8008c3a:	f7f7 fad1 	bl	80001e0 <__aeabi_dsub>
 8008c3e:	4632      	mov	r2, r6
 8008c40:	463b      	mov	r3, r7
 8008c42:	f7f7 facd 	bl	80001e0 <__aeabi_dsub>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4650      	mov	r0, sl
 8008c4c:	4659      	mov	r1, fp
 8008c4e:	f7f7 fac7 	bl	80001e0 <__aeabi_dsub>
 8008c52:	ec53 2b18 	vmov	r2, r3, d8
 8008c56:	f7f7 fc7b 	bl	8000550 <__aeabi_dmul>
 8008c5a:	4622      	mov	r2, r4
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	460f      	mov	r7, r1
 8008c60:	462b      	mov	r3, r5
 8008c62:	ec51 0b19 	vmov	r0, r1, d9
 8008c66:	f7f7 fc73 	bl	8000550 <__aeabi_dmul>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4630      	mov	r0, r6
 8008c70:	4639      	mov	r1, r7
 8008c72:	f7f7 fab7 	bl	80001e4 <__adddf3>
 8008c76:	4606      	mov	r6, r0
 8008c78:	460f      	mov	r7, r1
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	4640      	mov	r0, r8
 8008c80:	4649      	mov	r1, r9
 8008c82:	f7f7 faaf 	bl	80001e4 <__adddf3>
 8008c86:	a33e      	add	r3, pc, #248	; (adr r3, 8008d80 <__ieee754_pow+0x738>)
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	4604      	mov	r4, r0
 8008c90:	460d      	mov	r5, r1
 8008c92:	f7f7 fc5d 	bl	8000550 <__aeabi_dmul>
 8008c96:	4642      	mov	r2, r8
 8008c98:	ec41 0b18 	vmov	d8, r0, r1
 8008c9c:	464b      	mov	r3, r9
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	f7f7 fa9d 	bl	80001e0 <__aeabi_dsub>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4630      	mov	r0, r6
 8008cac:	4639      	mov	r1, r7
 8008cae:	f7f7 fa97 	bl	80001e0 <__aeabi_dsub>
 8008cb2:	a335      	add	r3, pc, #212	; (adr r3, 8008d88 <__ieee754_pow+0x740>)
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	f7f7 fc4a 	bl	8000550 <__aeabi_dmul>
 8008cbc:	a334      	add	r3, pc, #208	; (adr r3, 8008d90 <__ieee754_pow+0x748>)
 8008cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	460f      	mov	r7, r1
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	4629      	mov	r1, r5
 8008cca:	f7f7 fc41 	bl	8000550 <__aeabi_dmul>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	4639      	mov	r1, r7
 8008cd6:	f7f7 fa85 	bl	80001e4 <__adddf3>
 8008cda:	9a07      	ldr	r2, [sp, #28]
 8008cdc:	4b37      	ldr	r3, [pc, #220]	; (8008dbc <__ieee754_pow+0x774>)
 8008cde:	4413      	add	r3, r2
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f7f7 fa7e 	bl	80001e4 <__adddf3>
 8008ce8:	4682      	mov	sl, r0
 8008cea:	9805      	ldr	r0, [sp, #20]
 8008cec:	468b      	mov	fp, r1
 8008cee:	f7f7 fbc5 	bl	800047c <__aeabi_i2d>
 8008cf2:	9a07      	ldr	r2, [sp, #28]
 8008cf4:	4b32      	ldr	r3, [pc, #200]	; (8008dc0 <__ieee754_pow+0x778>)
 8008cf6:	4413      	add	r3, r2
 8008cf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cfc:	4606      	mov	r6, r0
 8008cfe:	460f      	mov	r7, r1
 8008d00:	4652      	mov	r2, sl
 8008d02:	465b      	mov	r3, fp
 8008d04:	ec51 0b18 	vmov	r0, r1, d8
 8008d08:	f7f7 fa6c 	bl	80001e4 <__adddf3>
 8008d0c:	4642      	mov	r2, r8
 8008d0e:	464b      	mov	r3, r9
 8008d10:	f7f7 fa68 	bl	80001e4 <__adddf3>
 8008d14:	4632      	mov	r2, r6
 8008d16:	463b      	mov	r3, r7
 8008d18:	f7f7 fa64 	bl	80001e4 <__adddf3>
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	4632      	mov	r2, r6
 8008d20:	463b      	mov	r3, r7
 8008d22:	4604      	mov	r4, r0
 8008d24:	460d      	mov	r5, r1
 8008d26:	f7f7 fa5b 	bl	80001e0 <__aeabi_dsub>
 8008d2a:	4642      	mov	r2, r8
 8008d2c:	464b      	mov	r3, r9
 8008d2e:	f7f7 fa57 	bl	80001e0 <__aeabi_dsub>
 8008d32:	ec53 2b18 	vmov	r2, r3, d8
 8008d36:	f7f7 fa53 	bl	80001e0 <__aeabi_dsub>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	4650      	mov	r0, sl
 8008d40:	4659      	mov	r1, fp
 8008d42:	e610      	b.n	8008966 <__ieee754_pow+0x31e>
 8008d44:	2401      	movs	r4, #1
 8008d46:	e6a1      	b.n	8008a8c <__ieee754_pow+0x444>
 8008d48:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008d98 <__ieee754_pow+0x750>
 8008d4c:	e617      	b.n	800897e <__ieee754_pow+0x336>
 8008d4e:	bf00      	nop
 8008d50:	4a454eef 	.word	0x4a454eef
 8008d54:	3fca7e28 	.word	0x3fca7e28
 8008d58:	93c9db65 	.word	0x93c9db65
 8008d5c:	3fcd864a 	.word	0x3fcd864a
 8008d60:	a91d4101 	.word	0xa91d4101
 8008d64:	3fd17460 	.word	0x3fd17460
 8008d68:	518f264d 	.word	0x518f264d
 8008d6c:	3fd55555 	.word	0x3fd55555
 8008d70:	db6fabff 	.word	0xdb6fabff
 8008d74:	3fdb6db6 	.word	0x3fdb6db6
 8008d78:	33333303 	.word	0x33333303
 8008d7c:	3fe33333 	.word	0x3fe33333
 8008d80:	e0000000 	.word	0xe0000000
 8008d84:	3feec709 	.word	0x3feec709
 8008d88:	dc3a03fd 	.word	0xdc3a03fd
 8008d8c:	3feec709 	.word	0x3feec709
 8008d90:	145b01f5 	.word	0x145b01f5
 8008d94:	be3e2fe0 	.word	0xbe3e2fe0
 8008d98:	00000000 	.word	0x00000000
 8008d9c:	3ff00000 	.word	0x3ff00000
 8008da0:	7ff00000 	.word	0x7ff00000
 8008da4:	43400000 	.word	0x43400000
 8008da8:	0003988e 	.word	0x0003988e
 8008dac:	000bb679 	.word	0x000bb679
 8008db0:	080093d8 	.word	0x080093d8
 8008db4:	3ff00000 	.word	0x3ff00000
 8008db8:	40080000 	.word	0x40080000
 8008dbc:	080093f8 	.word	0x080093f8
 8008dc0:	080093e8 	.word	0x080093e8
 8008dc4:	a3b5      	add	r3, pc, #724	; (adr r3, 800909c <__ieee754_pow+0xa54>)
 8008dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dca:	4640      	mov	r0, r8
 8008dcc:	4649      	mov	r1, r9
 8008dce:	f7f7 fa09 	bl	80001e4 <__adddf3>
 8008dd2:	4622      	mov	r2, r4
 8008dd4:	ec41 0b1a 	vmov	d10, r0, r1
 8008dd8:	462b      	mov	r3, r5
 8008dda:	4630      	mov	r0, r6
 8008ddc:	4639      	mov	r1, r7
 8008dde:	f7f7 f9ff 	bl	80001e0 <__aeabi_dsub>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	ec51 0b1a 	vmov	r0, r1, d10
 8008dea:	f7f7 fe41 	bl	8000a70 <__aeabi_dcmpgt>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	f47f ae04 	bne.w	80089fc <__ieee754_pow+0x3b4>
 8008df4:	4aa4      	ldr	r2, [pc, #656]	; (8009088 <__ieee754_pow+0xa40>)
 8008df6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	f340 8108 	ble.w	8009010 <__ieee754_pow+0x9c8>
 8008e00:	151b      	asrs	r3, r3, #20
 8008e02:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008e06:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008e0a:	fa4a f303 	asr.w	r3, sl, r3
 8008e0e:	445b      	add	r3, fp
 8008e10:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008e14:	4e9d      	ldr	r6, [pc, #628]	; (800908c <__ieee754_pow+0xa44>)
 8008e16:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008e1a:	4116      	asrs	r6, r2
 8008e1c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008e20:	2000      	movs	r0, #0
 8008e22:	ea23 0106 	bic.w	r1, r3, r6
 8008e26:	f1c2 0214 	rsb	r2, r2, #20
 8008e2a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008e2e:	fa4a fa02 	asr.w	sl, sl, r2
 8008e32:	f1bb 0f00 	cmp.w	fp, #0
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	bfb8      	it	lt
 8008e40:	f1ca 0a00 	rsblt	sl, sl, #0
 8008e44:	f7f7 f9cc 	bl	80001e0 <__aeabi_dsub>
 8008e48:	ec41 0b19 	vmov	d9, r0, r1
 8008e4c:	4642      	mov	r2, r8
 8008e4e:	464b      	mov	r3, r9
 8008e50:	ec51 0b19 	vmov	r0, r1, d9
 8008e54:	f7f7 f9c6 	bl	80001e4 <__adddf3>
 8008e58:	a37b      	add	r3, pc, #492	; (adr r3, 8009048 <__ieee754_pow+0xa00>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	2000      	movs	r0, #0
 8008e60:	4604      	mov	r4, r0
 8008e62:	460d      	mov	r5, r1
 8008e64:	f7f7 fb74 	bl	8000550 <__aeabi_dmul>
 8008e68:	ec53 2b19 	vmov	r2, r3, d9
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	460f      	mov	r7, r1
 8008e70:	4620      	mov	r0, r4
 8008e72:	4629      	mov	r1, r5
 8008e74:	f7f7 f9b4 	bl	80001e0 <__aeabi_dsub>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4640      	mov	r0, r8
 8008e7e:	4649      	mov	r1, r9
 8008e80:	f7f7 f9ae 	bl	80001e0 <__aeabi_dsub>
 8008e84:	a372      	add	r3, pc, #456	; (adr r3, 8009050 <__ieee754_pow+0xa08>)
 8008e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8a:	f7f7 fb61 	bl	8000550 <__aeabi_dmul>
 8008e8e:	a372      	add	r3, pc, #456	; (adr r3, 8009058 <__ieee754_pow+0xa10>)
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	4680      	mov	r8, r0
 8008e96:	4689      	mov	r9, r1
 8008e98:	4620      	mov	r0, r4
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	f7f7 fb58 	bl	8000550 <__aeabi_dmul>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4640      	mov	r0, r8
 8008ea6:	4649      	mov	r1, r9
 8008ea8:	f7f7 f99c 	bl	80001e4 <__adddf3>
 8008eac:	4604      	mov	r4, r0
 8008eae:	460d      	mov	r5, r1
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	f7f7 f994 	bl	80001e4 <__adddf3>
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	463b      	mov	r3, r7
 8008ec0:	4680      	mov	r8, r0
 8008ec2:	4689      	mov	r9, r1
 8008ec4:	f7f7 f98c 	bl	80001e0 <__aeabi_dsub>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4620      	mov	r0, r4
 8008ece:	4629      	mov	r1, r5
 8008ed0:	f7f7 f986 	bl	80001e0 <__aeabi_dsub>
 8008ed4:	4642      	mov	r2, r8
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	460f      	mov	r7, r1
 8008eda:	464b      	mov	r3, r9
 8008edc:	4640      	mov	r0, r8
 8008ede:	4649      	mov	r1, r9
 8008ee0:	f7f7 fb36 	bl	8000550 <__aeabi_dmul>
 8008ee4:	a35e      	add	r3, pc, #376	; (adr r3, 8009060 <__ieee754_pow+0xa18>)
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	4604      	mov	r4, r0
 8008eec:	460d      	mov	r5, r1
 8008eee:	f7f7 fb2f 	bl	8000550 <__aeabi_dmul>
 8008ef2:	a35d      	add	r3, pc, #372	; (adr r3, 8009068 <__ieee754_pow+0xa20>)
 8008ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef8:	f7f7 f972 	bl	80001e0 <__aeabi_dsub>
 8008efc:	4622      	mov	r2, r4
 8008efe:	462b      	mov	r3, r5
 8008f00:	f7f7 fb26 	bl	8000550 <__aeabi_dmul>
 8008f04:	a35a      	add	r3, pc, #360	; (adr r3, 8009070 <__ieee754_pow+0xa28>)
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	f7f7 f96b 	bl	80001e4 <__adddf3>
 8008f0e:	4622      	mov	r2, r4
 8008f10:	462b      	mov	r3, r5
 8008f12:	f7f7 fb1d 	bl	8000550 <__aeabi_dmul>
 8008f16:	a358      	add	r3, pc, #352	; (adr r3, 8009078 <__ieee754_pow+0xa30>)
 8008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1c:	f7f7 f960 	bl	80001e0 <__aeabi_dsub>
 8008f20:	4622      	mov	r2, r4
 8008f22:	462b      	mov	r3, r5
 8008f24:	f7f7 fb14 	bl	8000550 <__aeabi_dmul>
 8008f28:	a355      	add	r3, pc, #340	; (adr r3, 8009080 <__ieee754_pow+0xa38>)
 8008f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2e:	f7f7 f959 	bl	80001e4 <__adddf3>
 8008f32:	4622      	mov	r2, r4
 8008f34:	462b      	mov	r3, r5
 8008f36:	f7f7 fb0b 	bl	8000550 <__aeabi_dmul>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	4640      	mov	r0, r8
 8008f40:	4649      	mov	r1, r9
 8008f42:	f7f7 f94d 	bl	80001e0 <__aeabi_dsub>
 8008f46:	4604      	mov	r4, r0
 8008f48:	460d      	mov	r5, r1
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4640      	mov	r0, r8
 8008f50:	4649      	mov	r1, r9
 8008f52:	f7f7 fafd 	bl	8000550 <__aeabi_dmul>
 8008f56:	2200      	movs	r2, #0
 8008f58:	ec41 0b19 	vmov	d9, r0, r1
 8008f5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f60:	4620      	mov	r0, r4
 8008f62:	4629      	mov	r1, r5
 8008f64:	f7f7 f93c 	bl	80001e0 <__aeabi_dsub>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	ec51 0b19 	vmov	r0, r1, d9
 8008f70:	f7f7 fc18 	bl	80007a4 <__aeabi_ddiv>
 8008f74:	4632      	mov	r2, r6
 8008f76:	4604      	mov	r4, r0
 8008f78:	460d      	mov	r5, r1
 8008f7a:	463b      	mov	r3, r7
 8008f7c:	4640      	mov	r0, r8
 8008f7e:	4649      	mov	r1, r9
 8008f80:	f7f7 fae6 	bl	8000550 <__aeabi_dmul>
 8008f84:	4632      	mov	r2, r6
 8008f86:	463b      	mov	r3, r7
 8008f88:	f7f7 f92c 	bl	80001e4 <__adddf3>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	460b      	mov	r3, r1
 8008f90:	4620      	mov	r0, r4
 8008f92:	4629      	mov	r1, r5
 8008f94:	f7f7 f924 	bl	80001e0 <__aeabi_dsub>
 8008f98:	4642      	mov	r2, r8
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	f7f7 f920 	bl	80001e0 <__aeabi_dsub>
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	493a      	ldr	r1, [pc, #232]	; (8009090 <__ieee754_pow+0xa48>)
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	f7f7 f91a 	bl	80001e0 <__aeabi_dsub>
 8008fac:	ec41 0b10 	vmov	d0, r0, r1
 8008fb0:	ee10 3a90 	vmov	r3, s1
 8008fb4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008fb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fbc:	da2b      	bge.n	8009016 <__ieee754_pow+0x9ce>
 8008fbe:	4650      	mov	r0, sl
 8008fc0:	f000 f966 	bl	8009290 <scalbn>
 8008fc4:	ec51 0b10 	vmov	r0, r1, d0
 8008fc8:	ec53 2b18 	vmov	r2, r3, d8
 8008fcc:	f7ff bbed 	b.w	80087aa <__ieee754_pow+0x162>
 8008fd0:	4b30      	ldr	r3, [pc, #192]	; (8009094 <__ieee754_pow+0xa4c>)
 8008fd2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008fd6:	429e      	cmp	r6, r3
 8008fd8:	f77f af0c 	ble.w	8008df4 <__ieee754_pow+0x7ac>
 8008fdc:	4b2e      	ldr	r3, [pc, #184]	; (8009098 <__ieee754_pow+0xa50>)
 8008fde:	440b      	add	r3, r1
 8008fe0:	4303      	orrs	r3, r0
 8008fe2:	d009      	beq.n	8008ff8 <__ieee754_pow+0x9b0>
 8008fe4:	ec51 0b18 	vmov	r0, r1, d8
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2300      	movs	r3, #0
 8008fec:	f7f7 fd22 	bl	8000a34 <__aeabi_dcmplt>
 8008ff0:	3800      	subs	r0, #0
 8008ff2:	bf18      	it	ne
 8008ff4:	2001      	movne	r0, #1
 8008ff6:	e447      	b.n	8008888 <__ieee754_pow+0x240>
 8008ff8:	4622      	mov	r2, r4
 8008ffa:	462b      	mov	r3, r5
 8008ffc:	f7f7 f8f0 	bl	80001e0 <__aeabi_dsub>
 8009000:	4642      	mov	r2, r8
 8009002:	464b      	mov	r3, r9
 8009004:	f7f7 fd2a 	bl	8000a5c <__aeabi_dcmpge>
 8009008:	2800      	cmp	r0, #0
 800900a:	f43f aef3 	beq.w	8008df4 <__ieee754_pow+0x7ac>
 800900e:	e7e9      	b.n	8008fe4 <__ieee754_pow+0x99c>
 8009010:	f04f 0a00 	mov.w	sl, #0
 8009014:	e71a      	b.n	8008e4c <__ieee754_pow+0x804>
 8009016:	ec51 0b10 	vmov	r0, r1, d0
 800901a:	4619      	mov	r1, r3
 800901c:	e7d4      	b.n	8008fc8 <__ieee754_pow+0x980>
 800901e:	491c      	ldr	r1, [pc, #112]	; (8009090 <__ieee754_pow+0xa48>)
 8009020:	2000      	movs	r0, #0
 8009022:	f7ff bb30 	b.w	8008686 <__ieee754_pow+0x3e>
 8009026:	2000      	movs	r0, #0
 8009028:	2100      	movs	r1, #0
 800902a:	f7ff bb2c 	b.w	8008686 <__ieee754_pow+0x3e>
 800902e:	4630      	mov	r0, r6
 8009030:	4639      	mov	r1, r7
 8009032:	f7ff bb28 	b.w	8008686 <__ieee754_pow+0x3e>
 8009036:	9204      	str	r2, [sp, #16]
 8009038:	f7ff bb7a 	b.w	8008730 <__ieee754_pow+0xe8>
 800903c:	2300      	movs	r3, #0
 800903e:	f7ff bb64 	b.w	800870a <__ieee754_pow+0xc2>
 8009042:	bf00      	nop
 8009044:	f3af 8000 	nop.w
 8009048:	00000000 	.word	0x00000000
 800904c:	3fe62e43 	.word	0x3fe62e43
 8009050:	fefa39ef 	.word	0xfefa39ef
 8009054:	3fe62e42 	.word	0x3fe62e42
 8009058:	0ca86c39 	.word	0x0ca86c39
 800905c:	be205c61 	.word	0xbe205c61
 8009060:	72bea4d0 	.word	0x72bea4d0
 8009064:	3e663769 	.word	0x3e663769
 8009068:	c5d26bf1 	.word	0xc5d26bf1
 800906c:	3ebbbd41 	.word	0x3ebbbd41
 8009070:	af25de2c 	.word	0xaf25de2c
 8009074:	3f11566a 	.word	0x3f11566a
 8009078:	16bebd93 	.word	0x16bebd93
 800907c:	3f66c16c 	.word	0x3f66c16c
 8009080:	5555553e 	.word	0x5555553e
 8009084:	3fc55555 	.word	0x3fc55555
 8009088:	3fe00000 	.word	0x3fe00000
 800908c:	000fffff 	.word	0x000fffff
 8009090:	3ff00000 	.word	0x3ff00000
 8009094:	4090cbff 	.word	0x4090cbff
 8009098:	3f6f3400 	.word	0x3f6f3400
 800909c:	652b82fe 	.word	0x652b82fe
 80090a0:	3c971547 	.word	0x3c971547

080090a4 <__ieee754_sqrt>:
 80090a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a8:	ec55 4b10 	vmov	r4, r5, d0
 80090ac:	4e55      	ldr	r6, [pc, #340]	; (8009204 <__ieee754_sqrt+0x160>)
 80090ae:	43ae      	bics	r6, r5
 80090b0:	ee10 0a10 	vmov	r0, s0
 80090b4:	ee10 3a10 	vmov	r3, s0
 80090b8:	462a      	mov	r2, r5
 80090ba:	4629      	mov	r1, r5
 80090bc:	d110      	bne.n	80090e0 <__ieee754_sqrt+0x3c>
 80090be:	ee10 2a10 	vmov	r2, s0
 80090c2:	462b      	mov	r3, r5
 80090c4:	f7f7 fa44 	bl	8000550 <__aeabi_dmul>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	4620      	mov	r0, r4
 80090ce:	4629      	mov	r1, r5
 80090d0:	f7f7 f888 	bl	80001e4 <__adddf3>
 80090d4:	4604      	mov	r4, r0
 80090d6:	460d      	mov	r5, r1
 80090d8:	ec45 4b10 	vmov	d0, r4, r5
 80090dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e0:	2d00      	cmp	r5, #0
 80090e2:	dc10      	bgt.n	8009106 <__ieee754_sqrt+0x62>
 80090e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80090e8:	4330      	orrs	r0, r6
 80090ea:	d0f5      	beq.n	80090d8 <__ieee754_sqrt+0x34>
 80090ec:	b15d      	cbz	r5, 8009106 <__ieee754_sqrt+0x62>
 80090ee:	ee10 2a10 	vmov	r2, s0
 80090f2:	462b      	mov	r3, r5
 80090f4:	ee10 0a10 	vmov	r0, s0
 80090f8:	f7f7 f872 	bl	80001e0 <__aeabi_dsub>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	f7f7 fb50 	bl	80007a4 <__aeabi_ddiv>
 8009104:	e7e6      	b.n	80090d4 <__ieee754_sqrt+0x30>
 8009106:	1512      	asrs	r2, r2, #20
 8009108:	d074      	beq.n	80091f4 <__ieee754_sqrt+0x150>
 800910a:	07d4      	lsls	r4, r2, #31
 800910c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009110:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009114:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009118:	bf5e      	ittt	pl
 800911a:	0fda      	lsrpl	r2, r3, #31
 800911c:	005b      	lslpl	r3, r3, #1
 800911e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009122:	2400      	movs	r4, #0
 8009124:	0fda      	lsrs	r2, r3, #31
 8009126:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800912a:	107f      	asrs	r7, r7, #1
 800912c:	005b      	lsls	r3, r3, #1
 800912e:	2516      	movs	r5, #22
 8009130:	4620      	mov	r0, r4
 8009132:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009136:	1886      	adds	r6, r0, r2
 8009138:	428e      	cmp	r6, r1
 800913a:	bfde      	ittt	le
 800913c:	1b89      	suble	r1, r1, r6
 800913e:	18b0      	addle	r0, r6, r2
 8009140:	18a4      	addle	r4, r4, r2
 8009142:	0049      	lsls	r1, r1, #1
 8009144:	3d01      	subs	r5, #1
 8009146:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800914a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800914e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009152:	d1f0      	bne.n	8009136 <__ieee754_sqrt+0x92>
 8009154:	462a      	mov	r2, r5
 8009156:	f04f 0e20 	mov.w	lr, #32
 800915a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800915e:	4281      	cmp	r1, r0
 8009160:	eb06 0c05 	add.w	ip, r6, r5
 8009164:	dc02      	bgt.n	800916c <__ieee754_sqrt+0xc8>
 8009166:	d113      	bne.n	8009190 <__ieee754_sqrt+0xec>
 8009168:	459c      	cmp	ip, r3
 800916a:	d811      	bhi.n	8009190 <__ieee754_sqrt+0xec>
 800916c:	f1bc 0f00 	cmp.w	ip, #0
 8009170:	eb0c 0506 	add.w	r5, ip, r6
 8009174:	da43      	bge.n	80091fe <__ieee754_sqrt+0x15a>
 8009176:	2d00      	cmp	r5, #0
 8009178:	db41      	blt.n	80091fe <__ieee754_sqrt+0x15a>
 800917a:	f100 0801 	add.w	r8, r0, #1
 800917e:	1a09      	subs	r1, r1, r0
 8009180:	459c      	cmp	ip, r3
 8009182:	bf88      	it	hi
 8009184:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009188:	eba3 030c 	sub.w	r3, r3, ip
 800918c:	4432      	add	r2, r6
 800918e:	4640      	mov	r0, r8
 8009190:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009194:	f1be 0e01 	subs.w	lr, lr, #1
 8009198:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800919c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80091a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80091a4:	d1db      	bne.n	800915e <__ieee754_sqrt+0xba>
 80091a6:	430b      	orrs	r3, r1
 80091a8:	d006      	beq.n	80091b8 <__ieee754_sqrt+0x114>
 80091aa:	1c50      	adds	r0, r2, #1
 80091ac:	bf13      	iteet	ne
 80091ae:	3201      	addne	r2, #1
 80091b0:	3401      	addeq	r4, #1
 80091b2:	4672      	moveq	r2, lr
 80091b4:	f022 0201 	bicne.w	r2, r2, #1
 80091b8:	1063      	asrs	r3, r4, #1
 80091ba:	0852      	lsrs	r2, r2, #1
 80091bc:	07e1      	lsls	r1, r4, #31
 80091be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80091c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80091c6:	bf48      	it	mi
 80091c8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80091cc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80091d0:	4614      	mov	r4, r2
 80091d2:	e781      	b.n	80090d8 <__ieee754_sqrt+0x34>
 80091d4:	0ad9      	lsrs	r1, r3, #11
 80091d6:	3815      	subs	r0, #21
 80091d8:	055b      	lsls	r3, r3, #21
 80091da:	2900      	cmp	r1, #0
 80091dc:	d0fa      	beq.n	80091d4 <__ieee754_sqrt+0x130>
 80091de:	02cd      	lsls	r5, r1, #11
 80091e0:	d50a      	bpl.n	80091f8 <__ieee754_sqrt+0x154>
 80091e2:	f1c2 0420 	rsb	r4, r2, #32
 80091e6:	fa23 f404 	lsr.w	r4, r3, r4
 80091ea:	1e55      	subs	r5, r2, #1
 80091ec:	4093      	lsls	r3, r2
 80091ee:	4321      	orrs	r1, r4
 80091f0:	1b42      	subs	r2, r0, r5
 80091f2:	e78a      	b.n	800910a <__ieee754_sqrt+0x66>
 80091f4:	4610      	mov	r0, r2
 80091f6:	e7f0      	b.n	80091da <__ieee754_sqrt+0x136>
 80091f8:	0049      	lsls	r1, r1, #1
 80091fa:	3201      	adds	r2, #1
 80091fc:	e7ef      	b.n	80091de <__ieee754_sqrt+0x13a>
 80091fe:	4680      	mov	r8, r0
 8009200:	e7bd      	b.n	800917e <__ieee754_sqrt+0xda>
 8009202:	bf00      	nop
 8009204:	7ff00000 	.word	0x7ff00000

08009208 <with_errno>:
 8009208:	b570      	push	{r4, r5, r6, lr}
 800920a:	4604      	mov	r4, r0
 800920c:	460d      	mov	r5, r1
 800920e:	4616      	mov	r6, r2
 8009210:	f7ff f968 	bl	80084e4 <__errno>
 8009214:	4629      	mov	r1, r5
 8009216:	6006      	str	r6, [r0, #0]
 8009218:	4620      	mov	r0, r4
 800921a:	bd70      	pop	{r4, r5, r6, pc}

0800921c <xflow>:
 800921c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800921e:	4614      	mov	r4, r2
 8009220:	461d      	mov	r5, r3
 8009222:	b108      	cbz	r0, 8009228 <xflow+0xc>
 8009224:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009228:	e9cd 2300 	strd	r2, r3, [sp]
 800922c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009230:	4620      	mov	r0, r4
 8009232:	4629      	mov	r1, r5
 8009234:	f7f7 f98c 	bl	8000550 <__aeabi_dmul>
 8009238:	2222      	movs	r2, #34	; 0x22
 800923a:	b003      	add	sp, #12
 800923c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009240:	f7ff bfe2 	b.w	8009208 <with_errno>

08009244 <__math_uflow>:
 8009244:	b508      	push	{r3, lr}
 8009246:	2200      	movs	r2, #0
 8009248:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800924c:	f7ff ffe6 	bl	800921c <xflow>
 8009250:	ec41 0b10 	vmov	d0, r0, r1
 8009254:	bd08      	pop	{r3, pc}

08009256 <__math_oflow>:
 8009256:	b508      	push	{r3, lr}
 8009258:	2200      	movs	r2, #0
 800925a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800925e:	f7ff ffdd 	bl	800921c <xflow>
 8009262:	ec41 0b10 	vmov	d0, r0, r1
 8009266:	bd08      	pop	{r3, pc}

08009268 <fabs>:
 8009268:	ec51 0b10 	vmov	r0, r1, d0
 800926c:	ee10 2a10 	vmov	r2, s0
 8009270:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009274:	ec43 2b10 	vmov	d0, r2, r3
 8009278:	4770      	bx	lr

0800927a <finite>:
 800927a:	b082      	sub	sp, #8
 800927c:	ed8d 0b00 	vstr	d0, [sp]
 8009280:	9801      	ldr	r0, [sp, #4]
 8009282:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009286:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800928a:	0fc0      	lsrs	r0, r0, #31
 800928c:	b002      	add	sp, #8
 800928e:	4770      	bx	lr

08009290 <scalbn>:
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	ec55 4b10 	vmov	r4, r5, d0
 8009296:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800929a:	4606      	mov	r6, r0
 800929c:	462b      	mov	r3, r5
 800929e:	b99a      	cbnz	r2, 80092c8 <scalbn+0x38>
 80092a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80092a4:	4323      	orrs	r3, r4
 80092a6:	d036      	beq.n	8009316 <scalbn+0x86>
 80092a8:	4b39      	ldr	r3, [pc, #228]	; (8009390 <scalbn+0x100>)
 80092aa:	4629      	mov	r1, r5
 80092ac:	ee10 0a10 	vmov	r0, s0
 80092b0:	2200      	movs	r2, #0
 80092b2:	f7f7 f94d 	bl	8000550 <__aeabi_dmul>
 80092b6:	4b37      	ldr	r3, [pc, #220]	; (8009394 <scalbn+0x104>)
 80092b8:	429e      	cmp	r6, r3
 80092ba:	4604      	mov	r4, r0
 80092bc:	460d      	mov	r5, r1
 80092be:	da10      	bge.n	80092e2 <scalbn+0x52>
 80092c0:	a32b      	add	r3, pc, #172	; (adr r3, 8009370 <scalbn+0xe0>)
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	e03a      	b.n	800933e <scalbn+0xae>
 80092c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80092cc:	428a      	cmp	r2, r1
 80092ce:	d10c      	bne.n	80092ea <scalbn+0x5a>
 80092d0:	ee10 2a10 	vmov	r2, s0
 80092d4:	4620      	mov	r0, r4
 80092d6:	4629      	mov	r1, r5
 80092d8:	f7f6 ff84 	bl	80001e4 <__adddf3>
 80092dc:	4604      	mov	r4, r0
 80092de:	460d      	mov	r5, r1
 80092e0:	e019      	b.n	8009316 <scalbn+0x86>
 80092e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80092e6:	460b      	mov	r3, r1
 80092e8:	3a36      	subs	r2, #54	; 0x36
 80092ea:	4432      	add	r2, r6
 80092ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80092f0:	428a      	cmp	r2, r1
 80092f2:	dd08      	ble.n	8009306 <scalbn+0x76>
 80092f4:	2d00      	cmp	r5, #0
 80092f6:	a120      	add	r1, pc, #128	; (adr r1, 8009378 <scalbn+0xe8>)
 80092f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092fc:	da1c      	bge.n	8009338 <scalbn+0xa8>
 80092fe:	a120      	add	r1, pc, #128	; (adr r1, 8009380 <scalbn+0xf0>)
 8009300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009304:	e018      	b.n	8009338 <scalbn+0xa8>
 8009306:	2a00      	cmp	r2, #0
 8009308:	dd08      	ble.n	800931c <scalbn+0x8c>
 800930a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800930e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009312:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009316:	ec45 4b10 	vmov	d0, r4, r5
 800931a:	bd70      	pop	{r4, r5, r6, pc}
 800931c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009320:	da19      	bge.n	8009356 <scalbn+0xc6>
 8009322:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009326:	429e      	cmp	r6, r3
 8009328:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800932c:	dd0a      	ble.n	8009344 <scalbn+0xb4>
 800932e:	a112      	add	r1, pc, #72	; (adr r1, 8009378 <scalbn+0xe8>)
 8009330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1e2      	bne.n	80092fe <scalbn+0x6e>
 8009338:	a30f      	add	r3, pc, #60	; (adr r3, 8009378 <scalbn+0xe8>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f7f7 f907 	bl	8000550 <__aeabi_dmul>
 8009342:	e7cb      	b.n	80092dc <scalbn+0x4c>
 8009344:	a10a      	add	r1, pc, #40	; (adr r1, 8009370 <scalbn+0xe0>)
 8009346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0b8      	beq.n	80092c0 <scalbn+0x30>
 800934e:	a10e      	add	r1, pc, #56	; (adr r1, 8009388 <scalbn+0xf8>)
 8009350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009354:	e7b4      	b.n	80092c0 <scalbn+0x30>
 8009356:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800935a:	3236      	adds	r2, #54	; 0x36
 800935c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009360:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009364:	4620      	mov	r0, r4
 8009366:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <scalbn+0x108>)
 8009368:	2200      	movs	r2, #0
 800936a:	e7e8      	b.n	800933e <scalbn+0xae>
 800936c:	f3af 8000 	nop.w
 8009370:	c2f8f359 	.word	0xc2f8f359
 8009374:	01a56e1f 	.word	0x01a56e1f
 8009378:	8800759c 	.word	0x8800759c
 800937c:	7e37e43c 	.word	0x7e37e43c
 8009380:	8800759c 	.word	0x8800759c
 8009384:	fe37e43c 	.word	0xfe37e43c
 8009388:	c2f8f359 	.word	0xc2f8f359
 800938c:	81a56e1f 	.word	0x81a56e1f
 8009390:	43500000 	.word	0x43500000
 8009394:	ffff3cb0 	.word	0xffff3cb0
 8009398:	3c900000 	.word	0x3c900000

0800939c <_init>:
 800939c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939e:	bf00      	nop
 80093a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a2:	bc08      	pop	{r3}
 80093a4:	469e      	mov	lr, r3
 80093a6:	4770      	bx	lr

080093a8 <_fini>:
 80093a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093aa:	bf00      	nop
 80093ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ae:	bc08      	pop	{r3}
 80093b0:	469e      	mov	lr, r3
 80093b2:	4770      	bx	lr
