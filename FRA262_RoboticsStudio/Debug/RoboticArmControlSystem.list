
RoboticArmControlSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068a8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006a40  08006a40  00016a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a60  08006a60  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a60  08006a60  00016a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a68  08006a68  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a68  08006a68  00016a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08006a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ac0  2000020c  08006c7c  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ccc  08006c7c  00020ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012082  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002290  00000000  00000000  000322be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00034550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00035410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017834  00000000  00000000  00036218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010abd  00000000  00000000  0004da4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aaf9  00000000  00000000  0005e509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9002  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003edc  00000000  00000000  000f9054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000020c 	.word	0x2000020c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006a28 	.word	0x08006a28

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000210 	.word	0x20000210
 80001d4:	08006a28 	.word	0x08006a28

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80004e4:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <modbus_1t5_Timeout+0x1c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2201      	movs	r2, #1
 80004ea:	751a      	strb	r2, [r3, #20]
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	20000228 	.word	0x20000228

080004fc <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <modbus_3t5_Timeout+0x1c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2201      	movs	r2, #1
 800050a:	755a      	strb	r2, [r3, #21]
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	20000228 	.word	0x20000228

0800051c <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <modbus_UART_Recived+0x60>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2201      	movs	r2, #1
 800052c:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <modbus_UART_Recived+0x60>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000536:	1c59      	adds	r1, r3, #1
 8000538:	b289      	uxth	r1, r1
 800053a:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800053e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000542:	d210      	bcs.n	8000566 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000544:	4b0d      	ldr	r3, [pc, #52]	; (800057c <modbus_UART_Recived+0x60>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	68d8      	ldr	r0, [r3, #12]
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <modbus_UART_Recived+0x60>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <modbus_UART_Recived+0x60>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000556:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800055a:	4413      	add	r3, r2
 800055c:	3302      	adds	r3, #2
 800055e:	2201      	movs	r2, #1
 8000560:	4619      	mov	r1, r3
 8000562:	f005 f88f 	bl	8005684 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000566:	4b05      	ldr	r3, [pc, #20]	; (800057c <modbus_UART_Recived+0x60>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	691b      	ldr	r3, [r3, #16]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2200      	movs	r2, #0
 8000570:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000228 	.word	0x20000228

08000580 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800058a:	4a24      	ldr	r2, [pc, #144]	; (800061c <Modbus_init+0x9c>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <Modbus_init+0x9c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000598:	4b20      	ldr	r3, [pc, #128]	; (800061c <Modbus_init+0x9c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	691b      	ldr	r3, [r3, #16]
 800059e:	4a20      	ldr	r2, [pc, #128]	; (8000620 <Modbus_init+0xa0>)
 80005a0:	2114      	movs	r1, #20
 80005a2:	4618      	mov	r0, r3
 80005a4:	f004 fa20 	bl	80049e8 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80005a8:	4b1c      	ldr	r3, [pc, #112]	; (800061c <Modbus_init+0x9c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	691b      	ldr	r3, [r3, #16]
 80005ae:	4a1d      	ldr	r2, [pc, #116]	; (8000624 <Modbus_init+0xa4>)
 80005b0:	210e      	movs	r1, #14
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 fa18 	bl	80049e8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <Modbus_init+0x9c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <Modbus_init+0xa8>)
 80005c0:	2103      	movs	r1, #3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 ffb6 	bl	8005534 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <Modbus_init+0x9c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	68d8      	ldr	r0, [r3, #12]
 80005ce:	4b13      	ldr	r3, [pc, #76]	; (800061c <Modbus_init+0x9c>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <Modbus_init+0x9c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80005da:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80005de:	4413      	add	r3, r2
 80005e0:	3302      	adds	r3, #2
 80005e2:	2201      	movs	r2, #1
 80005e4:	4619      	mov	r1, r3
 80005e6:	f005 f84d 	bl	8005684 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <Modbus_init+0x9c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d10c      	bne.n	8000614 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <Modbus_init+0x9c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	691b      	ldr	r3, [r3, #16]
 8000600:	4618      	mov	r0, r3
 8000602:	f003 faa5 	bl	8003b50 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <Modbus_init+0x9c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fcda 	bl	8003fc8 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000228 	.word	0x20000228
 8000620:	080004dd 	.word	0x080004dd
 8000624:	080004fd 	.word	0x080004fd
 8000628:	0800051d 	.word	0x0800051d

0800062c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000638:	23ff      	movs	r3, #255	; 0xff
 800063a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800063c:	23ff      	movs	r3, #255	; 0xff
 800063e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000640:	e013      	b.n	800066a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	1c5a      	adds	r2, r3, #1
 8000646:	607a      	str	r2, [r7, #4]
 8000648:	781a      	ldrb	r2, [r3, #0]
 800064a:	7bbb      	ldrb	r3, [r7, #14]
 800064c:	4053      	eors	r3, r2
 800064e:	b2db      	uxtb	r3, r3
 8000650:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000652:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <CRC16+0x64>)
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4413      	add	r3, r2
 8000658:	781a      	ldrb	r2, [r3, #0]
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	4053      	eors	r3, r2
 800065e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000660:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <CRC16+0x68>)
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800066a:	883b      	ldrh	r3, [r7, #0]
 800066c:	1e5a      	subs	r2, r3, #1
 800066e:	803a      	strh	r2, [r7, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1e6      	bne.n	8000642 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	b21a      	sxth	r2, r3
 800067a:	7bbb      	ldrb	r3, [r7, #14]
 800067c:	b21b      	sxth	r3, r3
 800067e:	4313      	orrs	r3, r2
 8000680:	b21b      	sxth	r3, r3
 8000682:	b29b      	uxth	r3, r3
}
 8000684:	4618      	mov	r0, r3
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	20000100 	.word	0x20000100
 8000694:	20000000 	.word	0x20000000

08000698 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800069e:	4b81      	ldr	r3, [pc, #516]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	7e1b      	ldrb	r3, [r3, #24]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	d80a      	bhi.n	80006c0 <Modbus_Protocal_Worker+0x28>
 80006aa:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <Modbus_Protocal_Worker+0x18>)
 80006ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b0:	080006cb 	.word	0x080006cb
 80006b4:	0800086b 	.word	0x0800086b
 80006b8:	08000757 	.word	0x08000757
 80006bc:	0800077d 	.word	0x0800077d
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80006c0:	4b78      	ldr	r3, [pc, #480]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2201      	movs	r2, #1
 80006c6:	761a      	strb	r2, [r3, #24]
		break;
 80006c8:	e0e8      	b.n	800089c <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80006ca:	4b76      	ldr	r3, [pc, #472]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d002      	beq.n	80006dc <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 80006d6:	f000 f9dd 	bl	8000a94 <Modbus_Emission>
 80006da:	e01c      	b.n	8000716 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80006dc:	4b71      	ldr	r3, [pc, #452]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	7d9b      	ldrb	r3, [r3, #22]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d017      	beq.n	8000716 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80006e6:	4b6f      	ldr	r3, [pc, #444]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2200      	movs	r2, #0
 80006ec:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80006ee:	4b6d      	ldr	r3, [pc, #436]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2200      	movs	r2, #0
 80006f4:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80006f6:	4b6b      	ldr	r3, [pc, #428]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	691b      	ldr	r3, [r3, #16]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b68      	ldr	r3, [pc, #416]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	691b      	ldr	r3, [r3, #16]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f042 0201 	orr.w	r2, r2, #1
 800070c:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800070e:	4b65      	ldr	r3, [pc, #404]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2203      	movs	r2, #3
 8000714:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000716:	4b63      	ldr	r3, [pc, #396]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000720:	b2db      	uxtb	r3, r3
 8000722:	2b20      	cmp	r3, #32
 8000724:	f040 80b3 	bne.w	800088e <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000728:	4b5e      	ldr	r3, [pc, #376]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2200      	movs	r2, #0
 800072e:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000732:	4b5c      	ldr	r3, [pc, #368]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	68d8      	ldr	r0, [r3, #12]
 8000738:	4b5a      	ldr	r3, [pc, #360]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b59      	ldr	r3, [pc, #356]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000744:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000748:	4413      	add	r3, r2
 800074a:	3302      	adds	r3, #2
 800074c:	2201      	movs	r2, #1
 800074e:	4619      	mov	r1, r3
 8000750:	f004 ff98 	bl	8005684 <HAL_UART_Receive_IT>
		}
		break;
 8000754:	e09b      	b.n	800088e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000756:	4b53      	ldr	r3, [pc, #332]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	7d1b      	ldrb	r3, [r3, #20]
 800075c:	2b00      	cmp	r3, #0
 800075e:	f000 8098 	beq.w	8000892 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8000762:	4b50      	ldr	r3, [pc, #320]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2200      	movs	r2, #0
 8000768:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800076a:	4b4e      	ldr	r3, [pc, #312]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	22fe      	movs	r2, #254	; 0xfe
 8000770:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000772:	4b4c      	ldr	r3, [pc, #304]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2204      	movs	r2, #4
 8000778:	761a      	strb	r2, [r3, #24]
		}
		break;
 800077a:	e08a      	b.n	8000892 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 800077c:	4b49      	ldr	r3, [pc, #292]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	7d9b      	ldrb	r3, [r3, #22]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d009      	beq.n	800079a <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8000786:	4b47      	ldr	r3, [pc, #284]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d103      	bne.n	800079a <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000792:	4b44      	ldr	r3, [pc, #272]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	22ff      	movs	r2, #255	; 0xff
 8000798:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800079a:	4b42      	ldr	r3, [pc, #264]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80007a2:	f113 0f02 	cmn.w	r3, #2
 80007a6:	d150      	bne.n	800084a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80007a8:	4b3e      	ldr	r3, [pc, #248]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2200      	movs	r2, #0
 80007ae:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80007b0:	4b3c      	ldr	r3, [pc, #240]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f203 2272 	addw	r2, r3, #626	; 0x272
 80007b8:	4b3a      	ldr	r3, [pc, #232]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80007c0:	3b02      	subs	r3, #2
 80007c2:	4619      	mov	r1, r3
 80007c4:	4610      	mov	r0, r2
 80007c6:	f7ff ff31 	bl	800062c <CRC16>
 80007ca:	4603      	mov	r3, r0
 80007cc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80007ce:	793a      	ldrb	r2, [r7, #4]
 80007d0:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 80007d2:	6819      	ldr	r1, [r3, #0]
 80007d4:	4b33      	ldr	r3, [pc, #204]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80007dc:	3b02      	subs	r3, #2
 80007de:	440b      	add	r3, r1
 80007e0:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d10c      	bne.n	8000802 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80007e8:	797a      	ldrb	r2, [r7, #5]
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 80007ec:	6819      	ldr	r1, [r3, #0]
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80007f6:	3b01      	subs	r3, #1
 80007f8:	440b      	add	r3, r1
 80007fa:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d004      	beq.n	800080c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000802:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	22ff      	movs	r2, #255	; 0xff
 8000808:	75da      	strb	r2, [r3, #23]
				break;
 800080a:	e047      	b.n	800089c <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800080c:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8000814:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	429a      	cmp	r2, r3
 800081c:	d113      	bne.n	8000846 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000826:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800082e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000838:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800083a:	461a      	mov	r2, r3
 800083c:	f006 f8de 	bl	80069fc <memcpy>

			//execute command
			Modbus_frame_response();
 8000840:	f000 f910 	bl	8000a64 <Modbus_frame_response>
 8000844:	e001      	b.n	800084a <Modbus_Protocal_Worker+0x1b2>
				break;
 8000846:	bf00      	nop
					}
		break;


	}
}
 8000848:	e028      	b.n	800089c <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	7d5b      	ldrb	r3, [r3, #21]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d020      	beq.n	8000896 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2201      	movs	r2, #1
 800085a:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	4618      	mov	r0, r3
 8000864:	f004 ffbc 	bl	80057e0 <HAL_UART_AbortReceive>
		break;
 8000868:	e015      	b.n	8000896 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b20      	cmp	r3, #32
 8000878:	d10f      	bne.n	800089a <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2200      	movs	r2, #0
 8000880:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <Modbus_Protocal_Worker+0x20c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2201      	movs	r2, #1
 800088a:	761a      	strb	r2, [r3, #24]
		break;
 800088c:	e005      	b.n	800089a <Modbus_Protocal_Worker+0x202>
		break;
 800088e:	bf00      	nop
 8000890:	e004      	b.n	800089c <Modbus_Protocal_Worker+0x204>
		break;
 8000892:	bf00      	nop
 8000894:	e002      	b.n	800089c <Modbus_Protocal_Worker+0x204>
		break;
 8000896:	bf00      	nop
 8000898:	e000      	b.n	800089c <Modbus_Protocal_Worker+0x204>
		break;
 800089a:	bf00      	nop
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000228 	.word	0x20000228

080008a8 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <modbusWrite1Register+0x80>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	7e9b      	ldrb	r3, [r3, #26]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <modbusWrite1Register+0x80>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	7edb      	ldrb	r3, [r3, #27]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	4413      	add	r3, r2
 80008c4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80008c6:	88fa      	ldrh	r2, [r7, #6]
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <modbusWrite1Register+0x80>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d903      	bls.n	80008da <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80008d2:	2002      	movs	r0, #2
 80008d4:	f000 f8a4 	bl	8000a20 <ModbusErrorReply>
			 return;
 80008d8:	e023      	b.n	8000922 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <modbusWrite1Register+0x80>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <modbusWrite1Register+0x80>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	6859      	ldr	r1, [r3, #4]
 80008e4:	88fb      	ldrh	r3, [r7, #6]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	440b      	add	r3, r1
 80008ea:	7f12      	ldrb	r2, [r2, #28]
 80008ec:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <modbusWrite1Register+0x80>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <modbusWrite1Register+0x80>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	6859      	ldr	r1, [r3, #4]
 80008f8:	88fb      	ldrh	r3, [r7, #6]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	440b      	add	r3, r1
 80008fe:	7f52      	ldrb	r2, [r2, #29]
 8000900:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <modbusWrite1Register+0x80>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <modbusWrite1Register+0x80>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8000910:	2208      	movs	r2, #8
 8000912:	4619      	mov	r1, r3
 8000914:	f006 f872 	bl	80069fc <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <modbusWrite1Register+0x80>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2205      	movs	r2, #5
 800091e:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000228 	.word	0x20000228

0800092c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000932:	4b3a      	ldr	r3, [pc, #232]	; (8000a1c <modbusRead1Register+0xf0>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	7f1b      	ldrb	r3, [r3, #28]
 8000938:	b29b      	uxth	r3, r3
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	b29a      	uxth	r2, r3
 800093e:	4b37      	ldr	r3, [pc, #220]	; (8000a1c <modbusRead1Register+0xf0>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	7f5b      	ldrb	r3, [r3, #29]
 8000944:	b29b      	uxth	r3, r3
 8000946:	4413      	add	r3, r2
 8000948:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800094a:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <modbusRead1Register+0xf0>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	7e9b      	ldrb	r3, [r3, #26]
 8000950:	b29b      	uxth	r3, r3
 8000952:	021b      	lsls	r3, r3, #8
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <modbusRead1Register+0xf0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	7edb      	ldrb	r3, [r3, #27]
 800095c:	b29b      	uxth	r3, r3
 800095e:	4413      	add	r3, r2
 8000960:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <modbusRead1Register+0x42>
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	2b7d      	cmp	r3, #125	; 0x7d
 800096c:	d903      	bls.n	8000976 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800096e:	2003      	movs	r0, #3
 8000970:	f000 f856 	bl	8000a20 <ModbusErrorReply>
		 return;
 8000974:	e04e      	b.n	8000a14 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000976:	88ba      	ldrh	r2, [r7, #4]
 8000978:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <modbusRead1Register+0xf0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	429a      	cmp	r2, r3
 8000980:	d808      	bhi.n	8000994 <modbusRead1Register+0x68>
 8000982:	88ba      	ldrh	r2, [r7, #4]
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	4413      	add	r3, r2
 8000988:	461a      	mov	r2, r3
 800098a:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <modbusRead1Register+0xf0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	429a      	cmp	r2, r3
 8000992:	d903      	bls.n	800099c <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000994:	2002      	movs	r0, #2
 8000996:	f000 f843 	bl	8000a20 <ModbusErrorReply>
		 return;
 800099a:	e03b      	b.n	8000a14 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <modbusRead1Register+0xf0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2203      	movs	r2, #3
 80009a2:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <modbusRead1Register+0xf0>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	0052      	lsls	r2, r2, #1
 80009b0:	b2d2      	uxtb	r2, r2
 80009b2:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80009b6:	2400      	movs	r4, #0
 80009b8:	e020      	b.n	80009fc <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <modbusRead1Register+0xf0>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	685a      	ldr	r2, [r3, #4]
 80009c0:	88bb      	ldrh	r3, [r7, #4]
 80009c2:	4423      	add	r3, r4
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	18d1      	adds	r1, r2, r3
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <modbusRead1Register+0xf0>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	1c63      	adds	r3, r4, #1
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	7849      	ldrb	r1, [r1, #1]
 80009d2:	4413      	add	r3, r2
 80009d4:	460a      	mov	r2, r1
 80009d6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <modbusRead1Register+0xf0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	685a      	ldr	r2, [r3, #4]
 80009e0:	88bb      	ldrh	r3, [r7, #4]
 80009e2:	4423      	add	r3, r4
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	18d1      	adds	r1, r2, r3
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <modbusRead1Register+0xf0>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	0063      	lsls	r3, r4, #1
 80009ee:	3303      	adds	r3, #3
 80009f0:	7809      	ldrb	r1, [r1, #0]
 80009f2:	4413      	add	r3, r2
 80009f4:	460a      	mov	r2, r1
 80009f6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80009fa:	3401      	adds	r4, #1
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	429c      	cmp	r4, r3
 8000a00:	dbdb      	blt.n	80009ba <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	3301      	adds	r3, #1
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <modbusRead1Register+0xf0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	0052      	lsls	r2, r2, #1
 8000a0e:	b2d2      	uxtb	r2, r2
 8000a10:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd90      	pop	{r4, r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000228 	.word	0x20000228

08000a20 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <ModbusErrorReply+0x40>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	7e5a      	ldrb	r2, [r3, #25]
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <ModbusErrorReply+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <ModbusErrorReply+0x40>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	79fa      	ldrb	r2, [r7, #7]
 8000a44:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <ModbusErrorReply+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000228 	.word	0x20000228

08000a64 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <Modbus_frame_response+0x2c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	7e5b      	ldrb	r3, [r3, #25]
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d004      	beq.n	8000a7c <Modbus_frame_response+0x18>
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d105      	bne.n	8000a82 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000a76:	f7ff ff17 	bl	80008a8 <modbusWrite1Register>
		break;
 8000a7a:	e006      	b.n	8000a8a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000a7c:	f7ff ff56 	bl	800092c <modbusRead1Register>
		break;
 8000a80:	e003      	b.n	8000a8a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000a82:	2001      	movs	r0, #1
 8000a84:	f7ff ffcc 	bl	8000a20 <ModbusErrorReply>
		break;
 8000a88:	bf00      	nop

	}
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000228 	.word	0x20000228

08000a94 <Modbus_Emission>:

void Modbus_Emission()
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000a9a:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <Modbus_Emission+0xfc>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b20      	cmp	r3, #32
 8000aa8:	d15e      	bne.n	8000b68 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000aaa:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <Modbus_Emission+0xfc>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <Modbus_Emission+0xfc>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	7812      	ldrb	r2, [r2, #0]
 8000ab4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000ab8:	4b35      	ldr	r3, [pc, #212]	; (8000b90 <Modbus_Emission+0xfc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8000ac0:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000ac2:	4b33      	ldr	r3, [pc, #204]	; (8000b90 <Modbus_Emission+0xfc>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8000aca:	4b31      	ldr	r3, [pc, #196]	; (8000b90 <Modbus_Emission+0xfc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	f005 ff92 	bl	80069fc <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <Modbus_Emission+0xfc>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <Modbus_Emission+0xfc>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3203      	adds	r2, #3
 8000ae8:	b292      	uxth	r2, r2
 8000aea:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000aee:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <Modbus_Emission+0xfc>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000af6:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <Modbus_Emission+0xfc>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000afe:	3b02      	subs	r3, #2
 8000b00:	4619      	mov	r1, r3
 8000b02:	4610      	mov	r0, r2
 8000b04:	f7ff fd92 	bl	800062c <CRC16>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000b0c:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <Modbus_Emission+0xfc>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <Modbus_Emission+0xfc>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b18:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000b1a:	7939      	ldrb	r1, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	460a      	mov	r2, r1
 8000b20:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000b24:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <Modbus_Emission+0xfc>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <Modbus_Emission+0xfc>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b30:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000b32:	7979      	ldrb	r1, [r7, #5]
 8000b34:	4413      	add	r3, r2
 8000b36:	460a      	mov	r2, r1
 8000b38:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <Modbus_Emission+0xfc>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b20      	cmp	r3, #32
 8000b4a:	d10d      	bne.n	8000b68 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <Modbus_Emission+0xfc>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <Modbus_Emission+0xfc>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <Modbus_Emission+0xfc>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b5e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b62:	461a      	mov	r2, r3
 8000b64:	f004 fdbe 	bl	80056e4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <Modbus_Emission+0xfc>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <Modbus_Emission+0xfc>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2200      	movs	r2, #0
 8000b76:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <Modbus_Emission+0xfc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <Modbus_Emission+0xfc>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2202      	movs	r2, #2
 8000b86:	761a      	strb	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000228 	.word	0x20000228

08000b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b98:	f000 ff42 	bl	8001a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9c:	f000 f85e 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba0:	f000 fb4c 	bl	800123c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ba4:	f000 fb14 	bl	80011d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ba8:	f000 fae6 	bl	8001178 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000bac:	f000 f91e 	bl	8000dec <MX_TIM1_Init>
  MX_TIM5_Init();
 8000bb0:	f000 fa3a 	bl	8001028 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000bb4:	f000 f99e 	bl	8000ef4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000bb8:	f000 f8b8 	bl	8000d2c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000bbc:	f000 f9e6 	bl	8000f8c <MX_TIM3_Init>
  MX_TIM11_Init();
 8000bc0:	f000 fa86 	bl	80010d0 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	481b      	ldr	r0, [pc, #108]	; (8000c34 <main+0xa0>)
 8000bc8:	f003 fb18 	bl	80041fc <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start(&htim1);
 8000bcc:	481a      	ldr	r0, [pc, #104]	; (8000c38 <main+0xa4>)
 8000bce:	f002 ff65 	bl	8003a9c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4818      	ldr	r0, [pc, #96]	; (8000c38 <main+0xa4>)
 8000bd6:	f003 f8df 	bl	8003d98 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 8000bda:	4818      	ldr	r0, [pc, #96]	; (8000c3c <main+0xa8>)
 8000bdc:	f002 ffb8 	bl	8003b50 <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, (uint16_t*) buffer, 20);
 8000be0:	2214      	movs	r2, #20
 8000be2:	4917      	ldr	r1, [pc, #92]	; (8000c40 <main+0xac>)
 8000be4:	4817      	ldr	r0, [pc, #92]	; (8000c44 <main+0xb0>)
 8000be6:	f000 ffd1 	bl	8001b8c <HAL_ADC_Start_DMA>

	hmodbus.huart = &huart2;
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <main+0xb4>)
 8000bec:	4a17      	ldr	r2, [pc, #92]	; (8000c4c <main+0xb8>)
 8000bee:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <main+0xb4>)
 8000bf2:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <main+0xbc>)
 8000bf4:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <main+0xb4>)
 8000bf8:	2215      	movs	r2, #21
 8000bfa:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70; // 70
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <main+0xb4>)
 8000bfe:	2246      	movs	r2, #70	; 0x46
 8000c00:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8000c02:	4914      	ldr	r1, [pc, #80]	; (8000c54 <main+0xc0>)
 8000c04:	4810      	ldr	r0, [pc, #64]	; (8000c48 <main+0xb4>)
 8000c06:	f7ff fcbb 	bl	8000580 <Modbus_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Modbus_Protocal_Worker();
 8000c0a:	f7ff fd45 	bl	8000698 <Modbus_Protocal_Worker>
		static uint32_t timestamp = 0;
		if (HAL_GetTick() >= timestamp) {
 8000c0e:	f000 ff6d 	bl	8001aec <HAL_GetTick>
 8000c12:	4602      	mov	r2, r0
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <main+0xc4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d3f6      	bcc.n	8000c0a <main+0x76>
			timestamp = HAL_GetTick() + 100;
 8000c1c:	f000 ff66 	bl	8001aec <HAL_GetTick>
 8000c20:	4603      	mov	r3, r0
 8000c22:	3364      	adds	r3, #100	; 0x64
 8000c24:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <main+0xc4>)
 8000c26:	6013      	str	r3, [r2, #0]
			registerFrame[0].U16 = 22881;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <main+0xc0>)
 8000c2a:	f645 1261 	movw	r2, #22881	; 0x5961
 8000c2e:	801a      	strh	r2, [r3, #0]
	while (1) {
 8000c30:	e7eb      	b.n	8000c0a <main+0x76>
 8000c32:	bf00      	nop
 8000c34:	200004f0 	.word	0x200004f0
 8000c38:	200002d4 	.word	0x200002d4
 8000c3c:	20000388 	.word	0x20000388
 8000c40:	20000c90 	.word	0x20000c90
 8000c44:	2000022c 	.word	0x2000022c
 8000c48:	2000072c 	.word	0x2000072c
 8000c4c:	20000658 	.word	0x20000658
 8000c50:	200005a4 	.word	0x200005a4
 8000c54:	20000c04 	.word	0x20000c04
 8000c58:	20000cc4 	.word	0x20000cc4

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b094      	sub	sp, #80	; 0x50
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0320 	add.w	r3, r7, #32
 8000c66:	2230      	movs	r2, #48	; 0x30
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f005 fed4 	bl	8006a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <SystemClock_Config+0xc8>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	4a26      	ldr	r2, [pc, #152]	; (8000d24 <SystemClock_Config+0xc8>)
 8000c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c90:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <SystemClock_Config+0xc8>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <SystemClock_Config+0xcc>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a20      	ldr	r2, [pc, #128]	; (8000d28 <SystemClock_Config+0xcc>)
 8000ca6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <SystemClock_Config+0xcc>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc0:	2310      	movs	r3, #16
 8000cc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000cd0:	2364      	movs	r3, #100	; 0x64
 8000cd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cdc:	f107 0320 	add.w	r3, r7, #32
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f002 f9e7 	bl	80030b4 <HAL_RCC_OscConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cec:	f000 fbbe 	bl	800146c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	2103      	movs	r1, #3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 fc49 	bl	80035a4 <HAL_RCC_ClockConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d18:	f000 fba8 	bl	800146c <Error_Handler>
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	3750      	adds	r7, #80	; 0x50
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40007000 	.word	0x40007000

08000d2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d32:	463b      	mov	r3, r7
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d3e:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <MX_ADC1_Init+0xb4>)
 8000d40:	4a28      	ldr	r2, [pc, #160]	; (8000de4 <MX_ADC1_Init+0xb8>)
 8000d42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d44:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <MX_ADC1_Init+0xb4>)
 8000d46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d4c:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <MX_ADC1_Init+0xb4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d52:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <MX_ADC1_Init+0xb4>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d58:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <MX_ADC1_Init+0xb4>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <MX_ADC1_Init+0xb4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d66:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <MX_ADC1_Init+0xb4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_ADC1_Init+0xb4>)
 8000d6e:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <MX_ADC1_Init+0xbc>)
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <MX_ADC1_Init+0xb4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <MX_ADC1_Init+0xb4>)
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <MX_ADC1_Init+0xb4>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <MX_ADC1_Init+0xb4>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d8c:	4814      	ldr	r0, [pc, #80]	; (8000de0 <MX_ADC1_Init+0xb4>)
 8000d8e:	f000 feb9 	bl	8001b04 <HAL_ADC_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d98:	f000 fb68 	bl	800146c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000d9c:	230d      	movs	r3, #13
 8000d9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000da4:	2303      	movs	r3, #3
 8000da6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <MX_ADC1_Init+0xb4>)
 8000dae:	f000 fffb 	bl	8001da8 <HAL_ADC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000db8:	f000 fb58 	bl	800146c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_ADC1_Init+0xb4>)
 8000dca:	f000 ffed 	bl	8001da8 <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000dd4:	f000 fb4a 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	2000022c 	.word	0x2000022c
 8000de4:	40012000 	.word	0x40012000
 8000de8:	0f000001 	.word	0x0f000001

08000dec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b092      	sub	sp, #72	; 0x48
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
 8000e0c:	615a      	str	r2, [r3, #20]
 8000e0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2220      	movs	r2, #32
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f005 fdfe 	bl	8006a18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e1c:	4b33      	ldr	r3, [pc, #204]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e1e:	4a34      	ldr	r2, [pc, #208]	; (8000ef0 <MX_TIM1_Init+0x104>)
 8000e20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8000e22:	4b32      	ldr	r3, [pc, #200]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e24:	2263      	movs	r2, #99	; 0x63
 8000e26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b30      	ldr	r3, [pc, #192]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000e2e:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e36:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e42:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e48:	4828      	ldr	r0, [pc, #160]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e4a:	f002 ff49 	bl	8003ce0 <HAL_TIM_PWM_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000e54:	f000 fb0a 	bl	800146c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e64:	4619      	mov	r1, r3
 8000e66:	4821      	ldr	r0, [pc, #132]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e68:	f004 fa2c 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000e72:	f000 fafb 	bl	800146c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e76:	2360      	movs	r3, #96	; 0x60
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e82:	2300      	movs	r3, #0
 8000e84:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	2200      	movs	r2, #0
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4814      	ldr	r0, [pc, #80]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e9c:	f003 fbc0 	bl	8004620 <HAL_TIM_PWM_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000ea6:	f000 fae1 	bl	800146c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ebe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4807      	ldr	r0, [pc, #28]	; (8000eec <MX_TIM1_Init+0x100>)
 8000ece:	f004 fa67 	bl	80053a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000ed8:	f000 fac8 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <MX_TIM1_Init+0x100>)
 8000ede:	f000 fc3d 	bl	800175c <HAL_TIM_MspPostInit>

}
 8000ee2:	bf00      	nop
 8000ee4:	3748      	adds	r7, #72	; 0x48
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200002d4 	.word	0x200002d4
 8000ef0:	40010000 	.word	0x40010000

08000ef4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_TIM2_Init+0x94>)
 8000f12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_TIM2_Init+0x94>)
 8000f1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_TIM2_Init+0x94>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_TIM2_Init+0x94>)
 8000f28:	2209      	movs	r2, #9
 8000f2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <MX_TIM2_Init+0x94>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_TIM2_Init+0x94>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f38:	4813      	ldr	r0, [pc, #76]	; (8000f88 <MX_TIM2_Init+0x94>)
 8000f3a:	f002 fd53 	bl	80039e4 <HAL_TIM_Base_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f44:	f000 fa92 	bl	800146c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	4619      	mov	r1, r3
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <MX_TIM2_Init+0x94>)
 8000f56:	f003 fc25 	bl	80047a4 <HAL_TIM_ConfigClockSource>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f60:	f000 fa84 	bl	800146c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_TIM2_Init+0x94>)
 8000f72:	f004 f9a7 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f7c:	f000 fa76 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000388 	.word	0x20000388

08000f8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <MX_TIM3_Init+0x94>)
 8000faa:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <MX_TIM3_Init+0x98>)
 8000fac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fae:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <MX_TIM3_Init+0x94>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_TIM3_Init+0x94>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <MX_TIM3_Init+0x94>)
 8000fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <MX_TIM3_Init+0x94>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <MX_TIM3_Init+0x94>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fce:	4814      	ldr	r0, [pc, #80]	; (8001020 <MX_TIM3_Init+0x94>)
 8000fd0:	f002 fd08 	bl	80039e4 <HAL_TIM_Base_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000fda:	f000 fa47 	bl	800146c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480d      	ldr	r0, [pc, #52]	; (8001020 <MX_TIM3_Init+0x94>)
 8000fec:	f003 fbda 	bl	80047a4 <HAL_TIM_ConfigClockSource>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000ff6:	f000 fa39 	bl	800146c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <MX_TIM3_Init+0x94>)
 8001008:	f004 f95c 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001012:	f000 fa2b 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000043c 	.word	0x2000043c
 8001024:	40000400 	.word	0x40000400

08001028 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	; 0x30
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	2224      	movs	r2, #36	; 0x24
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f005 fcee 	bl	8006a18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001044:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <MX_TIM5_Init+0xa0>)
 8001046:	4a21      	ldr	r2, [pc, #132]	; (80010cc <MX_TIM5_Init+0xa4>)
 8001048:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <MX_TIM5_Init+0xa0>)
 800104c:	2200      	movs	r2, #0
 800104e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <MX_TIM5_Init+0xa0>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001056:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <MX_TIM5_Init+0xa0>)
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_TIM5_Init+0xa0>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_TIM5_Init+0xa0>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800106a:	2303      	movs	r3, #3
 800106c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001072:	2301      	movs	r3, #1
 8001074:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001082:	2301      	movs	r3, #1
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	4619      	mov	r1, r3
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <MX_TIM5_Init+0xa0>)
 8001096:	f002 fffd 	bl	8004094 <HAL_TIM_Encoder_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80010a0:	f000 f9e4 	bl	800146c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_TIM5_Init+0xa0>)
 80010b2:	f004 f907 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80010bc:	f000 f9d6 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3730      	adds	r7, #48	; 0x30
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200004f0 	.word	0x200004f0
 80010cc:	40000c00 	.word	0x40000c00

080010d0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	615a      	str	r2, [r3, #20]
 80010e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <MX_TIM11_Init+0xa0>)
 80010ea:	4a22      	ldr	r2, [pc, #136]	; (8001174 <MX_TIM11_Init+0xa4>)
 80010ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <MX_TIM11_Init+0xa0>)
 80010f0:	2263      	movs	r2, #99	; 0x63
 80010f2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f4:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <MX_TIM11_Init+0xa0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_TIM11_Init+0xa0>)
 80010fc:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8001100:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <MX_TIM11_Init+0xa0>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001108:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_TIM11_Init+0xa0>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800110e:	4818      	ldr	r0, [pc, #96]	; (8001170 <MX_TIM11_Init+0xa0>)
 8001110:	f002 fc68 	bl	80039e4 <HAL_TIM_Base_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800111a:	f000 f9a7 	bl	800146c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 800111e:	4814      	ldr	r0, [pc, #80]	; (8001170 <MX_TIM11_Init+0xa0>)
 8001120:	f002 fd78 	bl	8003c14 <HAL_TIM_OC_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800112a:	f000 f99f 	bl	800146c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 800112e:	2108      	movs	r1, #8
 8001130:	480f      	ldr	r0, [pc, #60]	; (8001170 <MX_TIM11_Init+0xa0>)
 8001132:	f002 fee1 	bl	8003ef8 <HAL_TIM_OnePulse_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 800113c:	f000 f996 	bl	800146c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001140:	2310      	movs	r3, #16
 8001142:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8001144:	f240 5399 	movw	r3, #1433	; 0x599
 8001148:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_TIM11_Init+0xa0>)
 800115a:	f003 fa05 	bl	8004568 <HAL_TIM_OC_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8001164:	f000 f982 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200005a4 	.word	0x200005a4
 8001174:	40014800 	.word	0x40014800

08001178 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_USART2_UART_Init+0x50>)
 800117e:	4a13      	ldr	r2, [pc, #76]	; (80011cc <MX_USART2_UART_Init+0x54>)
 8001180:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_USART2_UART_Init+0x50>)
 8001184:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001188:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_USART2_UART_Init+0x50>)
 800118c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001190:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <MX_USART2_UART_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_USART2_UART_Init+0x50>)
 800119a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_USART2_UART_Init+0x50>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_USART2_UART_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_USART2_UART_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_USART2_UART_Init+0x50>)
 80011b4:	f004 f964 	bl	8005480 <HAL_UART_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80011be:	f000 f955 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000658 	.word	0x20000658
 80011cc:	40004400 	.word	0x40004400

080011d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <MX_DMA_Init+0x68>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a16      	ldr	r2, [pc, #88]	; (8001238 <MX_DMA_Init+0x68>)
 80011e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_DMA_Init+0x68>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_DMA_Init+0x68>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a0f      	ldr	r2, [pc, #60]	; (8001238 <MX_DMA_Init+0x68>)
 80011fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <MX_DMA_Init+0x68>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2011      	movs	r0, #17
 8001214:	f001 f953 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001218:	2011      	movs	r0, #17
 800121a:	f001 f96c 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	2038      	movs	r0, #56	; 0x38
 8001224:	f001 f94b 	bl	80024be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001228:	2038      	movs	r0, #56	; 0x38
 800122a:	f001 f964 	bl	80024f6 <HAL_NVIC_EnableIRQ>

}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	4b52      	ldr	r3, [pc, #328]	; (80013a0 <MX_GPIO_Init+0x164>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a51      	ldr	r2, [pc, #324]	; (80013a0 <MX_GPIO_Init+0x164>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <MX_GPIO_Init+0x164>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b4b      	ldr	r3, [pc, #300]	; (80013a0 <MX_GPIO_Init+0x164>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a4a      	ldr	r2, [pc, #296]	; (80013a0 <MX_GPIO_Init+0x164>)
 8001278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b48      	ldr	r3, [pc, #288]	; (80013a0 <MX_GPIO_Init+0x164>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b44      	ldr	r3, [pc, #272]	; (80013a0 <MX_GPIO_Init+0x164>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a43      	ldr	r2, [pc, #268]	; (80013a0 <MX_GPIO_Init+0x164>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <MX_GPIO_Init+0x164>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <MX_GPIO_Init+0x164>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a3c      	ldr	r2, [pc, #240]	; (80013a0 <MX_GPIO_Init+0x164>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <MX_GPIO_Init+0x164>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2120      	movs	r1, #32
 80012c6:	4837      	ldr	r0, [pc, #220]	; (80013a4 <MX_GPIO_Init+0x168>)
 80012c8:	f001 feda 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80012d2:	4835      	ldr	r0, [pc, #212]	; (80013a8 <MX_GPIO_Init+0x16c>)
 80012d4:	f001 fed4 	bl	8003080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	482e      	ldr	r0, [pc, #184]	; (80013a8 <MX_GPIO_Init+0x16c>)
 80012f0:	f001 fd2a 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 80012f4:	f240 4304 	movw	r3, #1028	; 0x404
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4827      	ldr	r0, [pc, #156]	; (80013a8 <MX_GPIO_Init+0x16c>)
 800130a:	f001 fd1d 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800130e:	2310      	movs	r3, #16
 8001310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4820      	ldr	r0, [pc, #128]	; (80013a4 <MX_GPIO_Init+0x168>)
 8001322:	f001 fd11 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001326:	2320      	movs	r3, #32
 8001328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4819      	ldr	r0, [pc, #100]	; (80013a4 <MX_GPIO_Init+0x168>)
 800133e:	f001 fd03 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB5 PB7
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_7
 8001342:	f244 23a1 	movw	r3, #17057	; 0x42a1
 8001346:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4815      	ldr	r0, [pc, #84]	; (80013ac <MX_GPIO_Init+0x170>)
 8001358:	f001 fcf6 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800135c:	2340      	movs	r3, #64	; 0x40
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	480d      	ldr	r0, [pc, #52]	; (80013a8 <MX_GPIO_Init+0x16c>)
 8001374:	f001 fce8 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001378:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800137e:	2311      	movs	r3, #17
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_GPIO_Init+0x16c>)
 8001392:	f001 fcd9 	bl	8002d48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	; 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020800 	.word	0x40020800
 80013ac:	40020400 	.word	0x40020400

080013b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d10f      	bne.n	80013e0 <HAL_TIM_PeriodElapsedCallback+0x30>
		photoDetect();
 80013c0:	f000 f832 	bl	8001428 <photoDetect>
		readEncoder();
 80013c4:	f000 f816 	bl	80013f4 <readEncoder>
		if (startQEI) {
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_TIM_PeriodElapsedCallback+0x24>
			readEncoder();
 80013d0:	f000 f810 	bl	80013f4 <readEncoder>

		if (startTraj) {
			//onlyPositionControl();
		}

		if (startCascadeControl) {
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_TIM_PeriodElapsedCallback+0x30>
			cascadePIDControl();
 80013dc:	f000 f81c 	bl	8001418 <cascadePIDControl>
		}

	}
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000388 	.word	0x20000388
 80013ec:	20000cbc 	.word	0x20000cbc
 80013f0:	20000cc3 	.word	0x20000cc3

080013f4 <readEncoder>:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
}

void readEncoder() {
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <readEncoder+0x1c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fe:	461a      	mov	r2, r3
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <readEncoder+0x20>)
 8001402:	601a      	str	r2, [r3, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	200004f0 	.word	0x200004f0
 8001414:	20000cb8 	.word	0x20000cb8

08001418 <cascadePIDControl>:

void cascadePIDControl() {
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
	// calculationTraj result = trapezoidalTraj();
	// velocityLoop(result.velTraj, positionLoop(result.posTraj));
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <photoDetect>:
	handleJoystick2();
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
}

void photoDetect() {
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	photoSig[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);  // Motor Photo Sensor
 800142c:	2120      	movs	r1, #32
 800142e:	480d      	ldr	r0, [pc, #52]	; (8001464 <photoDetect+0x3c>)
 8001430:	f001 fe0e 	bl	8003050 <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <photoDetect+0x40>)
 800143a:	701a      	strb	r2, [r3, #0]
	photoSig[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9); // CENTER Photo Sensor
 800143c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001440:	4808      	ldr	r0, [pc, #32]	; (8001464 <photoDetect+0x3c>)
 8001442:	f001 fe05 	bl	8003050 <HAL_GPIO_ReadPin>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <photoDetect+0x40>)
 800144c:	705a      	strb	r2, [r3, #1]
	photoSig[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);  // Encoder Photo Sensor
 800144e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001452:	4804      	ldr	r0, [pc, #16]	; (8001464 <photoDetect+0x3c>)
 8001454:	f001 fdfc 	bl	8003050 <HAL_GPIO_ReadPin>
 8001458:	4603      	mov	r3, r0
 800145a:	461a      	mov	r2, r3
 800145c:	4b02      	ldr	r3, [pc, #8]	; (8001468 <photoDetect+0x40>)
 800145e:	709a      	strb	r2, [r3, #2]
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40020400 	.word	0x40020400
 8001468:	20000cc0 	.word	0x20000cc0

0800146c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001470:	b672      	cpsid	i
}
 8001472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001474:	e7fe      	b.n	8001474 <Error_Handler+0x8>
	...

08001478 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <HAL_MspInit+0x4c>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014b6:	2007      	movs	r0, #7
 80014b8:	f000 fff6 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a2f      	ldr	r2, [pc, #188]	; (80015a4 <HAL_ADC_MspInit+0xdc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d157      	bne.n	800159a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <HAL_ADC_MspInit+0xe0>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a2d      	ldr	r2, [pc, #180]	; (80015a8 <HAL_ADC_MspInit+0xe0>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <HAL_ADC_MspInit+0xe0>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_ADC_MspInit+0xe0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a26      	ldr	r2, [pc, #152]	; (80015a8 <HAL_ADC_MspInit+0xe0>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_ADC_MspInit+0xe0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001522:	2309      	movs	r3, #9
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001526:	2303      	movs	r3, #3
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	481d      	ldr	r0, [pc, #116]	; (80015ac <HAL_ADC_MspInit+0xe4>)
 8001536:	f001 fc07 	bl	8002d48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_ADC_MspInit+0xe8>)
 800153c:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <HAL_ADC_MspInit+0xec>)
 800153e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_ADC_MspInit+0xe8>)
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <HAL_ADC_MspInit+0xe8>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_ADC_MspInit+0xe8>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_ADC_MspInit+0xe8>)
 8001554:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001558:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_ADC_MspInit+0xe8>)
 800155c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001560:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_ADC_MspInit+0xe8>)
 8001564:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001568:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_ADC_MspInit+0xe8>)
 800156c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001570:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_ADC_MspInit+0xe8>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <HAL_ADC_MspInit+0xe8>)
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800157e:	480c      	ldr	r0, [pc, #48]	; (80015b0 <HAL_ADC_MspInit+0xe8>)
 8001580:	f000 ffd4 	bl	800252c <HAL_DMA_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800158a:	f7ff ff6f 	bl	800146c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_ADC_MspInit+0xe8>)
 8001592:	639a      	str	r2, [r3, #56]	; 0x38
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_ADC_MspInit+0xe8>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40012000 	.word	0x40012000
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020800 	.word	0x40020800
 80015b0:	20000274 	.word	0x20000274
 80015b4:	40026410 	.word	0x40026410

080015b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_TIM_PWM_MspInit+0x48>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d115      	bne.n	80015f6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <HAL_TIM_PWM_MspInit+0x4c>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <HAL_TIM_PWM_MspInit+0x4c>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_TIM_PWM_MspInit+0x4c>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	201a      	movs	r0, #26
 80015ec:	f000 ff67 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80015f0:	201a      	movs	r0, #26
 80015f2:	f000 ff80 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40010000 	.word	0x40010000
 8001604:	40023800 	.word	0x40023800

08001608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001618:	d116      	bne.n	8001648 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <HAL_TIM_Base_MspInit+0xb8>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a27      	ldr	r2, [pc, #156]	; (80016c0 <HAL_TIM_Base_MspInit+0xb8>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <HAL_TIM_Base_MspInit+0xb8>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	201c      	movs	r0, #28
 800163c:	f000 ff3f 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001640:	201c      	movs	r0, #28
 8001642:	f000 ff58 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001646:	e036      	b.n	80016b6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <HAL_TIM_Base_MspInit+0xbc>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d116      	bne.n	8001680 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_TIM_Base_MspInit+0xb8>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a19      	ldr	r2, [pc, #100]	; (80016c0 <HAL_TIM_Base_MspInit+0xb8>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_TIM_Base_MspInit+0xb8>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	201d      	movs	r0, #29
 8001674:	f000 ff23 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001678:	201d      	movs	r0, #29
 800167a:	f000 ff3c 	bl	80024f6 <HAL_NVIC_EnableIRQ>
}
 800167e:	e01a      	b.n	80016b6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <HAL_TIM_Base_MspInit+0xc0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d115      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_TIM_Base_MspInit+0xb8>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_TIM_Base_MspInit+0xb8>)
 8001694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001698:	6453      	str	r3, [r2, #68]	; 0x44
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_TIM_Base_MspInit+0xb8>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	201a      	movs	r0, #26
 80016ac:	f000 ff07 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80016b0:	201a      	movs	r0, #26
 80016b2:	f000 ff20 	bl	80024f6 <HAL_NVIC_EnableIRQ>
}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40000400 	.word	0x40000400
 80016c8:	40014800 	.word	0x40014800

080016cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a19      	ldr	r2, [pc, #100]	; (8001750 <HAL_TIM_Encoder_MspInit+0x84>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d12b      	bne.n	8001746 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_TIM_Encoder_MspInit+0x88>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a17      	ldr	r2, [pc, #92]	; (8001754 <HAL_TIM_Encoder_MspInit+0x88>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <HAL_TIM_Encoder_MspInit+0x88>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <HAL_TIM_Encoder_MspInit+0x88>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a10      	ldr	r2, [pc, #64]	; (8001754 <HAL_TIM_Encoder_MspInit+0x88>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <HAL_TIM_Encoder_MspInit+0x88>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001726:	2303      	movs	r3, #3
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800172e:	2301      	movs	r3, #1
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001736:	2302      	movs	r3, #2
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001742:	f001 fb01 	bl	8002d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	3728      	adds	r7, #40	; 0x28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40000c00 	.word	0x40000c00
 8001754:	40023800 	.word	0x40023800
 8001758:	40020000 	.word	0x40020000

0800175c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <HAL_TIM_MspPostInit+0x68>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d11e      	bne.n	80017bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_TIM_MspPostInit+0x6c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_TIM_MspPostInit+0x6c>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_TIM_MspPostInit+0x6c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800179a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017ac:	2301      	movs	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	4619      	mov	r1, r3
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <HAL_TIM_MspPostInit+0x70>)
 80017b8:	f001 fac6 	bl	8002d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017bc:	bf00      	nop
 80017be:	3720      	adds	r7, #32
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40010000 	.word	0x40010000
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020000 	.word	0x40020000

080017d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a34      	ldr	r2, [pc, #208]	; (80018c0 <HAL_UART_MspInit+0xf0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d161      	bne.n	80018b6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <HAL_UART_MspInit+0xf4>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a32      	ldr	r2, [pc, #200]	; (80018c4 <HAL_UART_MspInit+0xf4>)
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b30      	ldr	r3, [pc, #192]	; (80018c4 <HAL_UART_MspInit+0xf4>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <HAL_UART_MspInit+0xf4>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a2b      	ldr	r2, [pc, #172]	; (80018c4 <HAL_UART_MspInit+0xf4>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <HAL_UART_MspInit+0xf4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800182a:	230c      	movs	r3, #12
 800182c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800183a:	2307      	movs	r3, #7
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4820      	ldr	r0, [pc, #128]	; (80018c8 <HAL_UART_MspInit+0xf8>)
 8001846:	f001 fa7f 	bl	8002d48 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_UART_MspInit+0xfc>)
 800184c:	4a20      	ldr	r2, [pc, #128]	; (80018d0 <HAL_UART_MspInit+0x100>)
 800184e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001850:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <HAL_UART_MspInit+0xfc>)
 8001852:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001856:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <HAL_UART_MspInit+0xfc>)
 800185a:	2240      	movs	r2, #64	; 0x40
 800185c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800185e:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_UART_MspInit+0xfc>)
 8001860:	2200      	movs	r2, #0
 8001862:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_UART_MspInit+0xfc>)
 8001866:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800186a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_UART_MspInit+0xfc>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <HAL_UART_MspInit+0xfc>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <HAL_UART_MspInit+0xfc>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_UART_MspInit+0xfc>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_UART_MspInit+0xfc>)
 8001886:	2200      	movs	r2, #0
 8001888:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800188a:	4810      	ldr	r0, [pc, #64]	; (80018cc <HAL_UART_MspInit+0xfc>)
 800188c:	f000 fe4e 	bl	800252c <HAL_DMA_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001896:	f7ff fde9 	bl	800146c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <HAL_UART_MspInit+0xfc>)
 800189e:	635a      	str	r2, [r3, #52]	; 0x34
 80018a0:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <HAL_UART_MspInit+0xfc>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	2026      	movs	r0, #38	; 0x26
 80018ac:	f000 fe07 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018b0:	2026      	movs	r0, #38	; 0x26
 80018b2:	f000 fe20 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018b6:	bf00      	nop
 80018b8:	3728      	adds	r7, #40	; 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40004400 	.word	0x40004400
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	200006cc 	.word	0x200006cc
 80018d0:	400260a0 	.word	0x400260a0

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <NMI_Handler+0x4>

080018da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <HardFault_Handler+0x4>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <MemManage_Handler+0x4>

080018e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001920:	f000 f8d0 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}

08001928 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <DMA1_Stream6_IRQHandler+0x10>)
 800192e:	f000 ff95 	bl	800285c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200006cc 	.word	0x200006cc

0800193c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001942:	f002 fce9 	bl	8004318 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001946:	4803      	ldr	r0, [pc, #12]	; (8001954 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001948:	f002 fce6 	bl	8004318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200002d4 	.word	0x200002d4
 8001954:	200005a4 	.word	0x200005a4

08001958 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <TIM2_IRQHandler+0x10>)
 800195e:	f002 fcdb 	bl	8004318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000388 	.word	0x20000388

0800196c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <TIM3_IRQHandler+0x10>)
 8001972:	f002 fcd1 	bl	8004318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000043c 	.word	0x2000043c

08001980 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <USART2_IRQHandler+0x10>)
 8001986:	f003 ffcf 	bl	8005928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000658 	.word	0x20000658

08001994 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <DMA2_Stream0_IRQHandler+0x10>)
 800199a:	f000 ff5f 	bl	800285c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000274 	.word	0x20000274

080019a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <SystemInit+0x20>)
 80019ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <SystemInit+0x20>)
 80019b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d0:	480d      	ldr	r0, [pc, #52]	; (8001a08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019d2:	490e      	ldr	r1, [pc, #56]	; (8001a0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019d4:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019e8:	4c0b      	ldr	r4, [pc, #44]	; (8001a18 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019f6:	f7ff ffd7 	bl	80019a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fa:	f004 ffdb 	bl	80069b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fe:	f7ff f8c9 	bl	8000b94 <main>
  bx  lr    
 8001a02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a0c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001a10:	08006a70 	.word	0x08006a70
  ldr r2, =_sbss
 8001a14:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001a18:	20000ccc 	.word	0x20000ccc

08001a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC_IRQHandler>
	...

08001a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0d      	ldr	r2, [pc, #52]	; (8001a60 <HAL_Init+0x40>)
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <HAL_Init+0x40>)
 8001a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <HAL_Init+0x40>)
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f000 fd2d 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 f808 	bl	8001a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a54:	f7ff fd10 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023c00 	.word	0x40023c00

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_InitTick+0x54>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_InitTick+0x58>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 fd45 	bl	8002512 <HAL_SYSTICK_Config>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00e      	b.n	8001ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0f      	cmp	r3, #15
 8001a96:	d80a      	bhi.n	8001aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f000 fd0d 	bl	80024be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa4:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <HAL_InitTick+0x5c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000200 	.word	0x20000200
 8001abc:	20000208 	.word	0x20000208
 8001ac0:	20000204 	.word	0x20000204

08001ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_IncTick+0x20>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_IncTick+0x24>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_IncTick+0x24>)
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000208 	.word	0x20000208
 8001ae8:	20000cc8 	.word	0x20000cc8

08001aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_GetTick+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000cc8 	.word	0x20000cc8

08001b04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e033      	b.n	8001b82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fcd0 	bl	80014c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d118      	bne.n	8001b74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b4a:	f023 0302 	bic.w	r3, r3, #2
 8001b4e:	f043 0202 	orr.w	r2, r3, #2
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fa58 	bl	800200c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f023 0303 	bic.w	r3, r3, #3
 8001b6a:	f043 0201 	orr.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	641a      	str	r2, [r3, #64]	; 0x40
 8001b72:	e001      	b.n	8001b78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_Start_DMA+0x1e>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e0ce      	b.n	8001d48 <HAL_ADC_Start_DMA+0x1bc>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d018      	beq.n	8001bf2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd0:	4b5f      	ldr	r3, [pc, #380]	; (8001d50 <HAL_ADC_Start_DMA+0x1c4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a5f      	ldr	r2, [pc, #380]	; (8001d54 <HAL_ADC_Start_DMA+0x1c8>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	0c9a      	lsrs	r2, r3, #18
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001be4:	e002      	b.n	8001bec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f9      	bne.n	8001be6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c00:	d107      	bne.n	8001c12 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c10:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	f040 8086 	bne.w	8001d2e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c2a:	f023 0301 	bic.w	r3, r3, #1
 8001c2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d007      	beq.n	8001c54 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c60:	d106      	bne.n	8001c70 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f023 0206 	bic.w	r2, r3, #6
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	645a      	str	r2, [r3, #68]	; 0x44
 8001c6e:	e002      	b.n	8001c76 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c7e:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <HAL_ADC_Start_DMA+0x1cc>)
 8001c80:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c86:	4a35      	ldr	r2, [pc, #212]	; (8001d5c <HAL_ADC_Start_DMA+0x1d0>)
 8001c88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8e:	4a34      	ldr	r2, [pc, #208]	; (8001d60 <HAL_ADC_Start_DMA+0x1d4>)
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c96:	4a33      	ldr	r2, [pc, #204]	; (8001d64 <HAL_ADC_Start_DMA+0x1d8>)
 8001c98:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ca2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001cb2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cc2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	334c      	adds	r3, #76	; 0x4c
 8001cce:	4619      	mov	r1, r3
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f000 fcd8 	bl	8002688 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10f      	bne.n	8001d04 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d129      	bne.n	8001d46 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	e020      	b.n	8001d46 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a17      	ldr	r2, [pc, #92]	; (8001d68 <HAL_ADC_Start_DMA+0x1dc>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d11b      	bne.n	8001d46 <HAL_ADC_Start_DMA+0x1ba>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d114      	bne.n	8001d46 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	e00b      	b.n	8001d46 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f043 0210 	orr.w	r2, r3, #16
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000200 	.word	0x20000200
 8001d54:	431bde83 	.word	0x431bde83
 8001d58:	40012300 	.word	0x40012300
 8001d5c:	08002205 	.word	0x08002205
 8001d60:	080022bf 	.word	0x080022bf
 8001d64:	080022db 	.word	0x080022db
 8001d68:	40012000 	.word	0x40012000

08001d6c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x1c>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e113      	b.n	8001fec <HAL_ADC_ConfigChannel+0x244>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b09      	cmp	r3, #9
 8001dd2:	d925      	bls.n	8001e20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68d9      	ldr	r1, [r3, #12]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	3b1e      	subs	r3, #30
 8001dea:	2207      	movs	r2, #7
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43da      	mvns	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	400a      	ands	r2, r1
 8001df8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68d9      	ldr	r1, [r3, #12]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4403      	add	r3, r0
 8001e12:	3b1e      	subs	r3, #30
 8001e14:	409a      	lsls	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	e022      	b.n	8001e66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6919      	ldr	r1, [r3, #16]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	2207      	movs	r2, #7
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	400a      	ands	r2, r1
 8001e42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6919      	ldr	r1, [r3, #16]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	4603      	mov	r3, r0
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4403      	add	r3, r0
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d824      	bhi.n	8001eb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3b05      	subs	r3, #5
 8001e80:	221f      	movs	r2, #31
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3b05      	subs	r3, #5
 8001eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	635a      	str	r2, [r3, #52]	; 0x34
 8001eb6:	e04c      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b0c      	cmp	r3, #12
 8001ebe:	d824      	bhi.n	8001f0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	3b23      	subs	r3, #35	; 0x23
 8001ed2:	221f      	movs	r2, #31
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43da      	mvns	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	400a      	ands	r2, r1
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	3b23      	subs	r3, #35	; 0x23
 8001efc:	fa00 f203 	lsl.w	r2, r0, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
 8001f08:	e023      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	3b41      	subs	r3, #65	; 0x41
 8001f1c:	221f      	movs	r2, #31
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	400a      	ands	r2, r1
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	4618      	mov	r0, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	3b41      	subs	r3, #65	; 0x41
 8001f46:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f52:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <HAL_ADC_ConfigChannel+0x250>)
 8001f54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a28      	ldr	r2, [pc, #160]	; (8001ffc <HAL_ADC_ConfigChannel+0x254>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d10f      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1d8>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b12      	cmp	r3, #18
 8001f66:	d10b      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <HAL_ADC_ConfigChannel+0x254>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d12b      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x23a>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <HAL_ADC_ConfigChannel+0x258>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d003      	beq.n	8001f9c <HAL_ADC_ConfigChannel+0x1f4>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b11      	cmp	r3, #17
 8001f9a:	d122      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a11      	ldr	r2, [pc, #68]	; (8002000 <HAL_ADC_ConfigChannel+0x258>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d111      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_ADC_ConfigChannel+0x25c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a11      	ldr	r2, [pc, #68]	; (8002008 <HAL_ADC_ConfigChannel+0x260>)
 8001fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc8:	0c9a      	lsrs	r2, r3, #18
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fd4:	e002      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f9      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	40012300 	.word	0x40012300
 8001ffc:	40012000 	.word	0x40012000
 8002000:	10000012 	.word	0x10000012
 8002004:	20000200 	.word	0x20000200
 8002008:	431bde83 	.word	0x431bde83

0800200c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002014:	4b79      	ldr	r3, [pc, #484]	; (80021fc <ADC_Init+0x1f0>)
 8002016:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	431a      	orrs	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002040:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6859      	ldr	r1, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	021a      	lsls	r2, r3, #8
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002064:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6899      	ldr	r1, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	4a58      	ldr	r2, [pc, #352]	; (8002200 <ADC_Init+0x1f4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d022      	beq.n	80020ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6899      	ldr	r1, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	e00f      	b.n	800210a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002108:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0202 	bic.w	r2, r2, #2
 8002118:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6899      	ldr	r1, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	7e1b      	ldrb	r3, [r3, #24]
 8002124:	005a      	lsls	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01b      	beq.n	8002170 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002146:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002156:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6859      	ldr	r1, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	3b01      	subs	r3, #1
 8002164:	035a      	lsls	r2, r3, #13
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	e007      	b.n	8002180 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800217e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	3b01      	subs	r3, #1
 800219c:	051a      	lsls	r2, r3, #20
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6899      	ldr	r1, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021c2:	025a      	lsls	r2, r3, #9
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6899      	ldr	r1, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	029a      	lsls	r2, r3, #10
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	609a      	str	r2, [r3, #8]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40012300 	.word	0x40012300
 8002200:	0f000001 	.word	0x0f000001

08002204 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002210:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800221a:	2b00      	cmp	r3, #0
 800221c:	d13c      	bne.n	8002298 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d12b      	bne.n	8002290 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800223c:	2b00      	cmp	r3, #0
 800223e:	d127      	bne.n	8002290 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800224a:	2b00      	cmp	r3, #0
 800224c:	d006      	beq.n	800225c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002258:	2b00      	cmp	r3, #0
 800225a:	d119      	bne.n	8002290 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0220 	bic.w	r2, r2, #32
 800226a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d105      	bne.n	8002290 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7ff fd6b 	bl	8001d6c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002296:	e00e      	b.n	80022b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f7ff fd75 	bl	8001d94 <HAL_ADC_ErrorCallback>
}
 80022aa:	e004      	b.n	80022b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	4798      	blx	r3
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f7ff fd57 	bl	8001d80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2240      	movs	r2, #64	; 0x40
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f043 0204 	orr.w	r2, r3, #4
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f7ff fd4a 	bl	8001d94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002324:	4013      	ands	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233a:	4a04      	ldr	r2, [pc, #16]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	60d3      	str	r3, [r2, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <__NVIC_GetPriorityGrouping+0x18>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	f003 0307 	and.w	r3, r3, #7
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	2b00      	cmp	r3, #0
 800237c:	db0b      	blt.n	8002396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	4907      	ldr	r1, [pc, #28]	; (80023a4 <__NVIC_EnableIRQ+0x38>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	2001      	movs	r0, #1
 800238e:	fa00 f202 	lsl.w	r2, r0, r2
 8002392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db0a      	blt.n	80023d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	490c      	ldr	r1, [pc, #48]	; (80023f4 <__NVIC_SetPriority+0x4c>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	440b      	add	r3, r1
 80023cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d0:	e00a      	b.n	80023e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4908      	ldr	r1, [pc, #32]	; (80023f8 <__NVIC_SetPriority+0x50>)
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	3b04      	subs	r3, #4
 80023e0:	0112      	lsls	r2, r2, #4
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	440b      	add	r3, r1
 80023e6:	761a      	strb	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f1c3 0307 	rsb	r3, r3, #7
 8002416:	2b04      	cmp	r3, #4
 8002418:	bf28      	it	cs
 800241a:	2304      	movcs	r3, #4
 800241c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3304      	adds	r3, #4
 8002422:	2b06      	cmp	r3, #6
 8002424:	d902      	bls.n	800242c <NVIC_EncodePriority+0x30>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3b03      	subs	r3, #3
 800242a:	e000      	b.n	800242e <NVIC_EncodePriority+0x32>
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	f04f 32ff 	mov.w	r2, #4294967295
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	401a      	ands	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002444:	f04f 31ff 	mov.w	r1, #4294967295
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa01 f303 	lsl.w	r3, r1, r3
 800244e:	43d9      	mvns	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	4313      	orrs	r3, r2
         );
}
 8002456:	4618      	mov	r0, r3
 8002458:	3724      	adds	r7, #36	; 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002474:	d301      	bcc.n	800247a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002476:	2301      	movs	r3, #1
 8002478:	e00f      	b.n	800249a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <SysTick_Config+0x40>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002482:	210f      	movs	r1, #15
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f7ff ff8e 	bl	80023a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <SysTick_Config+0x40>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <SysTick_Config+0x40>)
 8002494:	2207      	movs	r2, #7
 8002496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	e000e010 	.word	0xe000e010

080024a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff29 	bl	8002308 <__NVIC_SetPriorityGrouping>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d0:	f7ff ff3e 	bl	8002350 <__NVIC_GetPriorityGrouping>
 80024d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f7ff ff8e 	bl	80023fc <NVIC_EncodePriority>
 80024e0:	4602      	mov	r2, r0
 80024e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff5d 	bl	80023a8 <__NVIC_SetPriority>
}
 80024ee:	bf00      	nop
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff31 	bl	800236c <__NVIC_EnableIRQ>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffa2 	bl	8002464 <SysTick_Config>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff fad8 	bl	8001aec <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e099      	b.n	800267c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002568:	e00f      	b.n	800258a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800256a:	f7ff fabf 	bl	8001aec <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b05      	cmp	r3, #5
 8002576:	d908      	bls.n	800258a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2203      	movs	r2, #3
 8002582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e078      	b.n	800267c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1e8      	bne.n	800256a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4b38      	ldr	r3, [pc, #224]	; (8002684 <HAL_DMA_Init+0x158>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d107      	bne.n	80025f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	4313      	orrs	r3, r2
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f023 0307 	bic.w	r3, r3, #7
 800260a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	2b04      	cmp	r3, #4
 800261c:	d117      	bne.n	800264e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00e      	beq.n	800264e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fb0d 	bl	8002c50 <DMA_CheckFifoParam>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2240      	movs	r2, #64	; 0x40
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800264a:	2301      	movs	r3, #1
 800264c:	e016      	b.n	800267c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fac4 	bl	8002be4 <DMA_CalcBaseAndBitshift>
 800265c:	4603      	mov	r3, r0
 800265e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	223f      	movs	r2, #63	; 0x3f
 8002666:	409a      	lsls	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	f010803f 	.word	0xf010803f

08002688 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_DMA_Start_IT+0x26>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e040      	b.n	8002730 <HAL_DMA_Start_IT+0xa8>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d12f      	bne.n	8002722 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fa56 	bl	8002b88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	223f      	movs	r2, #63	; 0x3f
 80026e2:	409a      	lsls	r2, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0216 	orr.w	r2, r2, #22
 80026f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0208 	orr.w	r2, r2, #8
 800270e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e005      	b.n	800272e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800272a:	2302      	movs	r3, #2
 800272c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800272e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002746:	f7ff f9d1 	bl	8001aec <HAL_GetTick>
 800274a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d008      	beq.n	800276a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2280      	movs	r2, #128	; 0x80
 800275c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e052      	b.n	8002810 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0216 	bic.w	r2, r2, #22
 8002778:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002788:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d103      	bne.n	800279a <HAL_DMA_Abort+0x62>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0208 	bic.w	r2, r2, #8
 80027a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0201 	bic.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ba:	e013      	b.n	80027e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027bc:	f7ff f996 	bl	8001aec <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b05      	cmp	r3, #5
 80027c8:	d90c      	bls.n	80027e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2220      	movs	r2, #32
 80027ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2203      	movs	r2, #3
 80027d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e015      	b.n	8002810 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1e4      	bne.n	80027bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f6:	223f      	movs	r2, #63	; 0x3f
 80027f8:	409a      	lsls	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d004      	beq.n	8002836 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2280      	movs	r2, #128	; 0x80
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e00c      	b.n	8002850 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2205      	movs	r2, #5
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0201 	bic.w	r2, r2, #1
 800284c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002868:	4b8e      	ldr	r3, [pc, #568]	; (8002aa4 <HAL_DMA_IRQHandler+0x248>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a8e      	ldr	r2, [pc, #568]	; (8002aa8 <HAL_DMA_IRQHandler+0x24c>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	0a9b      	lsrs	r3, r3, #10
 8002874:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002886:	2208      	movs	r2, #8
 8002888:	409a      	lsls	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01a      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d013      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0204 	bic.w	r2, r2, #4
 80028ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	2208      	movs	r2, #8
 80028b6:	409a      	lsls	r2, r3
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f043 0201 	orr.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028cc:	2201      	movs	r2, #1
 80028ce:	409a      	lsls	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d012      	beq.n	80028fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ea:	2201      	movs	r2, #1
 80028ec:	409a      	lsls	r2, r3
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	f043 0202 	orr.w	r2, r3, #2
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002902:	2204      	movs	r2, #4
 8002904:	409a      	lsls	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d012      	beq.n	8002934 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00b      	beq.n	8002934 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	2204      	movs	r2, #4
 8002922:	409a      	lsls	r2, r3
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292c:	f043 0204 	orr.w	r2, r3, #4
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	2210      	movs	r2, #16
 800293a:	409a      	lsls	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d043      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d03c      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002956:	2210      	movs	r2, #16
 8002958:	409a      	lsls	r2, r3
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d018      	beq.n	800299e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d108      	bne.n	800298c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d024      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	4798      	blx	r3
 800298a:	e01f      	b.n	80029cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01b      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
 800299c:	e016      	b.n	80029cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d107      	bne.n	80029bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0208 	bic.w	r2, r2, #8
 80029ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d0:	2220      	movs	r2, #32
 80029d2:	409a      	lsls	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 808f 	beq.w	8002afc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8087 	beq.w	8002afc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	2220      	movs	r2, #32
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	d136      	bne.n	8002a74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0216 	bic.w	r2, r2, #22
 8002a14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <HAL_DMA_IRQHandler+0x1da>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0208 	bic.w	r2, r2, #8
 8002a44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4a:	223f      	movs	r2, #63	; 0x3f
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d07e      	beq.n	8002b68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
        }
        return;
 8002a72:	e079      	b.n	8002b68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d01d      	beq.n	8002abe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10d      	bne.n	8002aac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d031      	beq.n	8002afc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
 8002aa0:	e02c      	b.n	8002afc <HAL_DMA_IRQHandler+0x2a0>
 8002aa2:	bf00      	nop
 8002aa4:	20000200 	.word	0x20000200
 8002aa8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d023      	beq.n	8002afc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
 8002abc:	e01e      	b.n	8002afc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10f      	bne.n	8002aec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0210 	bic.w	r2, r2, #16
 8002ada:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d032      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d022      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2205      	movs	r2, #5
 8002b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d307      	bcc.n	8002b44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f2      	bne.n	8002b28 <HAL_DMA_IRQHandler+0x2cc>
 8002b42:	e000      	b.n	8002b46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	4798      	blx	r3
 8002b66:	e000      	b.n	8002b6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b68:	bf00      	nop
    }
  }
}
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ba4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b40      	cmp	r3, #64	; 0x40
 8002bb4:	d108      	bne.n	8002bc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bc6:	e007      	b.n	8002bd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	60da      	str	r2, [r3, #12]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	3b10      	subs	r3, #16
 8002bf4:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <DMA_CalcBaseAndBitshift+0x64>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bfe:	4a13      	ldr	r2, [pc, #76]	; (8002c4c <DMA_CalcBaseAndBitshift+0x68>)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4413      	add	r3, r2
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d909      	bls.n	8002c26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c1a:	f023 0303 	bic.w	r3, r3, #3
 8002c1e:	1d1a      	adds	r2, r3, #4
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	659a      	str	r2, [r3, #88]	; 0x58
 8002c24:	e007      	b.n	8002c36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c2e:	f023 0303 	bic.w	r3, r3, #3
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	aaaaaaab 	.word	0xaaaaaaab
 8002c4c:	08006a58 	.word	0x08006a58

08002c50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d11f      	bne.n	8002caa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d856      	bhi.n	8002d1e <DMA_CheckFifoParam+0xce>
 8002c70:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <DMA_CheckFifoParam+0x28>)
 8002c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c76:	bf00      	nop
 8002c78:	08002c89 	.word	0x08002c89
 8002c7c:	08002c9b 	.word	0x08002c9b
 8002c80:	08002c89 	.word	0x08002c89
 8002c84:	08002d1f 	.word	0x08002d1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d046      	beq.n	8002d22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c98:	e043      	b.n	8002d22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ca2:	d140      	bne.n	8002d26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca8:	e03d      	b.n	8002d26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb2:	d121      	bne.n	8002cf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d837      	bhi.n	8002d2a <DMA_CheckFifoParam+0xda>
 8002cba:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <DMA_CheckFifoParam+0x70>)
 8002cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc0:	08002cd1 	.word	0x08002cd1
 8002cc4:	08002cd7 	.word	0x08002cd7
 8002cc8:	08002cd1 	.word	0x08002cd1
 8002ccc:	08002ce9 	.word	0x08002ce9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd4:	e030      	b.n	8002d38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d025      	beq.n	8002d2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce6:	e022      	b.n	8002d2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cf0:	d11f      	bne.n	8002d32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cf6:	e01c      	b.n	8002d32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d903      	bls.n	8002d06 <DMA_CheckFifoParam+0xb6>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d003      	beq.n	8002d0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d04:	e018      	b.n	8002d38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0a:	e015      	b.n	8002d38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00e      	beq.n	8002d36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d1c:	e00b      	b.n	8002d36 <DMA_CheckFifoParam+0xe6>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e00a      	b.n	8002d38 <DMA_CheckFifoParam+0xe8>
      break;
 8002d22:	bf00      	nop
 8002d24:	e008      	b.n	8002d38 <DMA_CheckFifoParam+0xe8>
      break;
 8002d26:	bf00      	nop
 8002d28:	e006      	b.n	8002d38 <DMA_CheckFifoParam+0xe8>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e004      	b.n	8002d38 <DMA_CheckFifoParam+0xe8>
      break;
 8002d2e:	bf00      	nop
 8002d30:	e002      	b.n	8002d38 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d32:	bf00      	nop
 8002d34:	e000      	b.n	8002d38 <DMA_CheckFifoParam+0xe8>
      break;
 8002d36:	bf00      	nop
    }
  } 
  
  return status; 
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop

08002d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	e159      	b.n	8003018 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d64:	2201      	movs	r2, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	f040 8148 	bne.w	8003012 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d005      	beq.n	8002d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d130      	bne.n	8002dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2203      	movs	r2, #3
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 0201 	and.w	r2, r3, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d017      	beq.n	8002e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2203      	movs	r2, #3
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d123      	bne.n	8002e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	08da      	lsrs	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3208      	adds	r2, #8
 8002e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	08da      	lsrs	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3208      	adds	r2, #8
 8002e86:	69b9      	ldr	r1, [r7, #24]
 8002e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	2203      	movs	r2, #3
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0203 	and.w	r2, r3, #3
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80a2 	beq.w	8003012 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4b57      	ldr	r3, [pc, #348]	; (8003030 <HAL_GPIO_Init+0x2e8>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	4a56      	ldr	r2, [pc, #344]	; (8003030 <HAL_GPIO_Init+0x2e8>)
 8002ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002edc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ede:	4b54      	ldr	r3, [pc, #336]	; (8003030 <HAL_GPIO_Init+0x2e8>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eea:	4a52      	ldr	r2, [pc, #328]	; (8003034 <HAL_GPIO_Init+0x2ec>)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	089b      	lsrs	r3, r3, #2
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	220f      	movs	r2, #15
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a49      	ldr	r2, [pc, #292]	; (8003038 <HAL_GPIO_Init+0x2f0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d019      	beq.n	8002f4a <HAL_GPIO_Init+0x202>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a48      	ldr	r2, [pc, #288]	; (800303c <HAL_GPIO_Init+0x2f4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <HAL_GPIO_Init+0x1fe>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a47      	ldr	r2, [pc, #284]	; (8003040 <HAL_GPIO_Init+0x2f8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00d      	beq.n	8002f42 <HAL_GPIO_Init+0x1fa>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a46      	ldr	r2, [pc, #280]	; (8003044 <HAL_GPIO_Init+0x2fc>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <HAL_GPIO_Init+0x1f6>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a45      	ldr	r2, [pc, #276]	; (8003048 <HAL_GPIO_Init+0x300>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <HAL_GPIO_Init+0x1f2>
 8002f36:	2304      	movs	r3, #4
 8002f38:	e008      	b.n	8002f4c <HAL_GPIO_Init+0x204>
 8002f3a:	2307      	movs	r3, #7
 8002f3c:	e006      	b.n	8002f4c <HAL_GPIO_Init+0x204>
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e004      	b.n	8002f4c <HAL_GPIO_Init+0x204>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e002      	b.n	8002f4c <HAL_GPIO_Init+0x204>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_GPIO_Init+0x204>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	f002 0203 	and.w	r2, r2, #3
 8002f52:	0092      	lsls	r2, r2, #2
 8002f54:	4093      	lsls	r3, r2
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f5c:	4935      	ldr	r1, [pc, #212]	; (8003034 <HAL_GPIO_Init+0x2ec>)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f6a:	4b38      	ldr	r3, [pc, #224]	; (800304c <HAL_GPIO_Init+0x304>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f8e:	4a2f      	ldr	r2, [pc, #188]	; (800304c <HAL_GPIO_Init+0x304>)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f94:	4b2d      	ldr	r3, [pc, #180]	; (800304c <HAL_GPIO_Init+0x304>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb8:	4a24      	ldr	r2, [pc, #144]	; (800304c <HAL_GPIO_Init+0x304>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fbe:	4b23      	ldr	r3, [pc, #140]	; (800304c <HAL_GPIO_Init+0x304>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fe2:	4a1a      	ldr	r2, [pc, #104]	; (800304c <HAL_GPIO_Init+0x304>)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fe8:	4b18      	ldr	r3, [pc, #96]	; (800304c <HAL_GPIO_Init+0x304>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800300c:	4a0f      	ldr	r2, [pc, #60]	; (800304c <HAL_GPIO_Init+0x304>)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3301      	adds	r3, #1
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2b0f      	cmp	r3, #15
 800301c:	f67f aea2 	bls.w	8002d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3724      	adds	r7, #36	; 0x24
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	40013800 	.word	0x40013800
 8003038:	40020000 	.word	0x40020000
 800303c:	40020400 	.word	0x40020400
 8003040:	40020800 	.word	0x40020800
 8003044:	40020c00 	.word	0x40020c00
 8003048:	40021000 	.word	0x40021000
 800304c:	40013c00 	.word	0x40013c00

08003050 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	887b      	ldrh	r3, [r7, #2]
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
 800306c:	e001      	b.n	8003072 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003072:	7bfb      	ldrb	r3, [r7, #15]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	807b      	strh	r3, [r7, #2]
 800308c:	4613      	mov	r3, r2
 800308e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003090:	787b      	ldrb	r3, [r7, #1]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800309c:	e003      	b.n	80030a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800309e:	887b      	ldrh	r3, [r7, #2]
 80030a0:	041a      	lsls	r2, r3, #16
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	619a      	str	r2, [r3, #24]
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e267      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d075      	beq.n	80031be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030d2:	4b88      	ldr	r3, [pc, #544]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d00c      	beq.n	80030f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030de:	4b85      	ldr	r3, [pc, #532]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d112      	bne.n	8003110 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ea:	4b82      	ldr	r3, [pc, #520]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f6:	d10b      	bne.n	8003110 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	4b7e      	ldr	r3, [pc, #504]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d05b      	beq.n	80031bc <HAL_RCC_OscConfig+0x108>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d157      	bne.n	80031bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e242      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003118:	d106      	bne.n	8003128 <HAL_RCC_OscConfig+0x74>
 800311a:	4b76      	ldr	r3, [pc, #472]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a75      	ldr	r2, [pc, #468]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e01d      	b.n	8003164 <HAL_RCC_OscConfig+0xb0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003130:	d10c      	bne.n	800314c <HAL_RCC_OscConfig+0x98>
 8003132:	4b70      	ldr	r3, [pc, #448]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a6f      	ldr	r2, [pc, #444]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	4b6d      	ldr	r3, [pc, #436]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a6c      	ldr	r2, [pc, #432]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e00b      	b.n	8003164 <HAL_RCC_OscConfig+0xb0>
 800314c:	4b69      	ldr	r3, [pc, #420]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a68      	ldr	r2, [pc, #416]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	4b66      	ldr	r3, [pc, #408]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a65      	ldr	r2, [pc, #404]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 800315e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe fcbe 	bl	8001aec <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003174:	f7fe fcba 	bl	8001aec <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e207      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4b5b      	ldr	r3, [pc, #364]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0xc0>
 8003192:	e014      	b.n	80031be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fe fcaa 	bl	8001aec <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800319c:	f7fe fca6 	bl	8001aec <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e1f3      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ae:	4b51      	ldr	r3, [pc, #324]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0xe8>
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d063      	beq.n	8003292 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ca:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00b      	beq.n	80031ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d11c      	bne.n	800321c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031e2:	4b44      	ldr	r3, [pc, #272]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d116      	bne.n	800321c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_RCC_OscConfig+0x152>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d001      	beq.n	8003206 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e1c7      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003206:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4937      	ldr	r1, [pc, #220]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	e03a      	b.n	8003292 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003224:	4b34      	ldr	r3, [pc, #208]	; (80032f8 <HAL_RCC_OscConfig+0x244>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fe fc5f 	bl	8001aec <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003232:	f7fe fc5b 	bl	8001aec <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1a8      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003244:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003250:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4925      	ldr	r1, [pc, #148]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]
 8003264:	e015      	b.n	8003292 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <HAL_RCC_OscConfig+0x244>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fe fc3e 	bl	8001aec <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003274:	f7fe fc3a 	bl	8001aec <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e187      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003286:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d036      	beq.n	800330c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d016      	beq.n	80032d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a6:	4b15      	ldr	r3, [pc, #84]	; (80032fc <HAL_RCC_OscConfig+0x248>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ac:	f7fe fc1e 	bl	8001aec <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b4:	f7fe fc1a 	bl	8001aec <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e167      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c6:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_OscConfig+0x240>)
 80032c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0x200>
 80032d2:	e01b      	b.n	800330c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <HAL_RCC_OscConfig+0x248>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032da:	f7fe fc07 	bl	8001aec <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	e00e      	b.n	8003300 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e2:	f7fe fc03 	bl	8001aec <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d907      	bls.n	8003300 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e150      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
 80032f4:	40023800 	.word	0x40023800
 80032f8:	42470000 	.word	0x42470000
 80032fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003300:	4b88      	ldr	r3, [pc, #544]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1ea      	bne.n	80032e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 8097 	beq.w	8003448 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331e:	4b81      	ldr	r3, [pc, #516]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10f      	bne.n	800334a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	4b7d      	ldr	r3, [pc, #500]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a7c      	ldr	r2, [pc, #496]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003338:	6413      	str	r3, [r2, #64]	; 0x40
 800333a:	4b7a      	ldr	r3, [pc, #488]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003346:	2301      	movs	r3, #1
 8003348:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334a:	4b77      	ldr	r3, [pc, #476]	; (8003528 <HAL_RCC_OscConfig+0x474>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d118      	bne.n	8003388 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003356:	4b74      	ldr	r3, [pc, #464]	; (8003528 <HAL_RCC_OscConfig+0x474>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a73      	ldr	r2, [pc, #460]	; (8003528 <HAL_RCC_OscConfig+0x474>)
 800335c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003362:	f7fe fbc3 	bl	8001aec <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336a:	f7fe fbbf 	bl	8001aec <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e10c      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337c:	4b6a      	ldr	r3, [pc, #424]	; (8003528 <HAL_RCC_OscConfig+0x474>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x2ea>
 8003390:	4b64      	ldr	r3, [pc, #400]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	4a63      	ldr	r2, [pc, #396]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6713      	str	r3, [r2, #112]	; 0x70
 800339c:	e01c      	b.n	80033d8 <HAL_RCC_OscConfig+0x324>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x30c>
 80033a6:	4b5f      	ldr	r3, [pc, #380]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a5e      	ldr	r2, [pc, #376]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033ac:	f043 0304 	orr.w	r3, r3, #4
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70
 80033b2:	4b5c      	ldr	r3, [pc, #368]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b6:	4a5b      	ldr	r2, [pc, #364]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6713      	str	r3, [r2, #112]	; 0x70
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0x324>
 80033c0:	4b58      	ldr	r3, [pc, #352]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c4:	4a57      	ldr	r2, [pc, #348]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	6713      	str	r3, [r2, #112]	; 0x70
 80033cc:	4b55      	ldr	r3, [pc, #340]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d0:	4a54      	ldr	r2, [pc, #336]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80033d2:	f023 0304 	bic.w	r3, r3, #4
 80033d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d015      	beq.n	800340c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7fe fb84 	bl	8001aec <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7fe fb80 	bl	8001aec <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0cb      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fe:	4b49      	ldr	r3, [pc, #292]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0ee      	beq.n	80033e8 <HAL_RCC_OscConfig+0x334>
 800340a:	e014      	b.n	8003436 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340c:	f7fe fb6e 	bl	8001aec <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003412:	e00a      	b.n	800342a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fe fb6a 	bl	8001aec <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e0b5      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342a:	4b3e      	ldr	r3, [pc, #248]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1ee      	bne.n	8003414 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343c:	4b39      	ldr	r3, [pc, #228]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	4a38      	ldr	r2, [pc, #224]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003446:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80a1 	beq.w	8003594 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003452:	4b34      	ldr	r3, [pc, #208]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b08      	cmp	r3, #8
 800345c:	d05c      	beq.n	8003518 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d141      	bne.n	80034ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003466:	4b31      	ldr	r3, [pc, #196]	; (800352c <HAL_RCC_OscConfig+0x478>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe fb3e 	bl	8001aec <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003474:	f7fe fb3a 	bl	8001aec <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e087      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003486:	4b27      	ldr	r3, [pc, #156]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69da      	ldr	r2, [r3, #28]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	019b      	lsls	r3, r3, #6
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	3b01      	subs	r3, #1
 80034ac:	041b      	lsls	r3, r3, #16
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	061b      	lsls	r3, r3, #24
 80034b6:	491b      	ldr	r1, [pc, #108]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_RCC_OscConfig+0x478>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fe fb13 	bl	8001aec <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ca:	f7fe fb0f 	bl	8001aec <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e05c      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x416>
 80034e8:	e054      	b.n	8003594 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <HAL_RCC_OscConfig+0x478>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fe fafc 	bl	8001aec <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fe faf8 	bl	8001aec <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e045      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_RCC_OscConfig+0x470>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x444>
 8003516:	e03d      	b.n	8003594 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d107      	bne.n	8003530 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e038      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
 8003524:	40023800 	.word	0x40023800
 8003528:	40007000 	.word	0x40007000
 800352c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003530:	4b1b      	ldr	r3, [pc, #108]	; (80035a0 <HAL_RCC_OscConfig+0x4ec>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d028      	beq.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d121      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	429a      	cmp	r2, r3
 8003558:	d11a      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003560:	4013      	ands	r3, r2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003566:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003568:	4293      	cmp	r3, r2
 800356a:	d111      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	3b01      	subs	r3, #1
 800357a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d107      	bne.n	8003590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800

080035a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0cc      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b8:	4b68      	ldr	r3, [pc, #416]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d90c      	bls.n	80035e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c6:	4b65      	ldr	r3, [pc, #404]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	4b63      	ldr	r3, [pc, #396]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0b8      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d020      	beq.n	800362e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f8:	4b59      	ldr	r3, [pc, #356]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a58      	ldr	r2, [pc, #352]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003602:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003610:	4b53      	ldr	r3, [pc, #332]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4a52      	ldr	r2, [pc, #328]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800361a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800361c:	4b50      	ldr	r3, [pc, #320]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	494d      	ldr	r1, [pc, #308]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d044      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	4b47      	ldr	r3, [pc, #284]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d119      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e07f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d003      	beq.n	8003662 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800365e:	2b03      	cmp	r3, #3
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003662:	4b3f      	ldr	r3, [pc, #252]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e06f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003672:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e067      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003682:	4b37      	ldr	r3, [pc, #220]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f023 0203 	bic.w	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4934      	ldr	r1, [pc, #208]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	4313      	orrs	r3, r2
 8003692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003694:	f7fe fa2a 	bl	8001aec <HAL_GetTick>
 8003698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800369c:	f7fe fa26 	bl	8001aec <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e04f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 020c 	and.w	r2, r3, #12
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d1eb      	bne.n	800369c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d20c      	bcs.n	80036ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b22      	ldr	r3, [pc, #136]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b20      	ldr	r3, [pc, #128]	; (800375c <HAL_RCC_ClockConfig+0x1b8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e032      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f8:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4916      	ldr	r1, [pc, #88]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003716:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	490e      	ldr	r1, [pc, #56]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800372a:	f000 f821 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 800372e:	4602      	mov	r2, r0
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	490a      	ldr	r1, [pc, #40]	; (8003764 <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	5ccb      	ldrb	r3, [r1, r3]
 800373e:	fa22 f303 	lsr.w	r3, r2, r3
 8003742:	4a09      	ldr	r2, [pc, #36]	; (8003768 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003746:	4b09      	ldr	r3, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x1c8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe f98a 	bl	8001a64 <HAL_InitTick>

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40023c00 	.word	0x40023c00
 8003760:	40023800 	.word	0x40023800
 8003764:	08006a40 	.word	0x08006a40
 8003768:	20000200 	.word	0x20000200
 800376c:	20000204 	.word	0x20000204

08003770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003774:	b094      	sub	sp, #80	; 0x50
 8003776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	647b      	str	r3, [r7, #68]	; 0x44
 800377c:	2300      	movs	r3, #0
 800377e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003780:	2300      	movs	r3, #0
 8003782:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003788:	4b79      	ldr	r3, [pc, #484]	; (8003970 <HAL_RCC_GetSysClockFreq+0x200>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b08      	cmp	r3, #8
 8003792:	d00d      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003794:	2b08      	cmp	r3, #8
 8003796:	f200 80e1 	bhi.w	800395c <HAL_RCC_GetSysClockFreq+0x1ec>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x34>
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_GetSysClockFreq+0x3a>
 80037a2:	e0db      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a4:	4b73      	ldr	r3, [pc, #460]	; (8003974 <HAL_RCC_GetSysClockFreq+0x204>)
 80037a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80037a8:	e0db      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037aa:	4b73      	ldr	r3, [pc, #460]	; (8003978 <HAL_RCC_GetSysClockFreq+0x208>)
 80037ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ae:	e0d8      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b0:	4b6f      	ldr	r3, [pc, #444]	; (8003970 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ba:	4b6d      	ldr	r3, [pc, #436]	; (8003970 <HAL_RCC_GetSysClockFreq+0x200>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d063      	beq.n	800388e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c6:	4b6a      	ldr	r3, [pc, #424]	; (8003970 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	099b      	lsrs	r3, r3, #6
 80037cc:	2200      	movs	r2, #0
 80037ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80037d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d8:	633b      	str	r3, [r7, #48]	; 0x30
 80037da:	2300      	movs	r3, #0
 80037dc:	637b      	str	r3, [r7, #52]	; 0x34
 80037de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037e2:	4622      	mov	r2, r4
 80037e4:	462b      	mov	r3, r5
 80037e6:	f04f 0000 	mov.w	r0, #0
 80037ea:	f04f 0100 	mov.w	r1, #0
 80037ee:	0159      	lsls	r1, r3, #5
 80037f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037f4:	0150      	lsls	r0, r2, #5
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4621      	mov	r1, r4
 80037fc:	1a51      	subs	r1, r2, r1
 80037fe:	6139      	str	r1, [r7, #16]
 8003800:	4629      	mov	r1, r5
 8003802:	eb63 0301 	sbc.w	r3, r3, r1
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003814:	4659      	mov	r1, fp
 8003816:	018b      	lsls	r3, r1, #6
 8003818:	4651      	mov	r1, sl
 800381a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800381e:	4651      	mov	r1, sl
 8003820:	018a      	lsls	r2, r1, #6
 8003822:	4651      	mov	r1, sl
 8003824:	ebb2 0801 	subs.w	r8, r2, r1
 8003828:	4659      	mov	r1, fp
 800382a:	eb63 0901 	sbc.w	r9, r3, r1
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	f04f 0300 	mov.w	r3, #0
 8003836:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800383a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800383e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003842:	4690      	mov	r8, r2
 8003844:	4699      	mov	r9, r3
 8003846:	4623      	mov	r3, r4
 8003848:	eb18 0303 	adds.w	r3, r8, r3
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	462b      	mov	r3, r5
 8003850:	eb49 0303 	adc.w	r3, r9, r3
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003862:	4629      	mov	r1, r5
 8003864:	024b      	lsls	r3, r1, #9
 8003866:	4621      	mov	r1, r4
 8003868:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800386c:	4621      	mov	r1, r4
 800386e:	024a      	lsls	r2, r1, #9
 8003870:	4610      	mov	r0, r2
 8003872:	4619      	mov	r1, r3
 8003874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003876:	2200      	movs	r2, #0
 8003878:	62bb      	str	r3, [r7, #40]	; 0x28
 800387a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800387c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003880:	f7fc fcaa 	bl	80001d8 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4613      	mov	r3, r2
 800388a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800388c:	e058      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800388e:	4b38      	ldr	r3, [pc, #224]	; (8003970 <HAL_RCC_GetSysClockFreq+0x200>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	099b      	lsrs	r3, r3, #6
 8003894:	2200      	movs	r2, #0
 8003896:	4618      	mov	r0, r3
 8003898:	4611      	mov	r1, r2
 800389a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800389e:	623b      	str	r3, [r7, #32]
 80038a0:	2300      	movs	r3, #0
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
 80038a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038a8:	4642      	mov	r2, r8
 80038aa:	464b      	mov	r3, r9
 80038ac:	f04f 0000 	mov.w	r0, #0
 80038b0:	f04f 0100 	mov.w	r1, #0
 80038b4:	0159      	lsls	r1, r3, #5
 80038b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ba:	0150      	lsls	r0, r2, #5
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4641      	mov	r1, r8
 80038c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80038c6:	4649      	mov	r1, r9
 80038c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038e0:	ebb2 040a 	subs.w	r4, r2, sl
 80038e4:	eb63 050b 	sbc.w	r5, r3, fp
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	00eb      	lsls	r3, r5, #3
 80038f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038f6:	00e2      	lsls	r2, r4, #3
 80038f8:	4614      	mov	r4, r2
 80038fa:	461d      	mov	r5, r3
 80038fc:	4643      	mov	r3, r8
 80038fe:	18e3      	adds	r3, r4, r3
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	464b      	mov	r3, r9
 8003904:	eb45 0303 	adc.w	r3, r5, r3
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003916:	4629      	mov	r1, r5
 8003918:	028b      	lsls	r3, r1, #10
 800391a:	4621      	mov	r1, r4
 800391c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003920:	4621      	mov	r1, r4
 8003922:	028a      	lsls	r2, r1, #10
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800392a:	2200      	movs	r2, #0
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	61fa      	str	r2, [r7, #28]
 8003930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003934:	f7fc fc50 	bl	80001d8 <__aeabi_uldivmod>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4613      	mov	r3, r2
 800393e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <HAL_RCC_GetSysClockFreq+0x200>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	3301      	adds	r3, #1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003950:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800395a:	e002      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_RCC_GetSysClockFreq+0x204>)
 800395e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003964:	4618      	mov	r0, r3
 8003966:	3750      	adds	r7, #80	; 0x50
 8003968:	46bd      	mov	sp, r7
 800396a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	00f42400 	.word	0x00f42400
 8003978:	007a1200 	.word	0x007a1200

0800397c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003980:	4b03      	ldr	r3, [pc, #12]	; (8003990 <HAL_RCC_GetHCLKFreq+0x14>)
 8003982:	681b      	ldr	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000200 	.word	0x20000200

08003994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003998:	f7ff fff0 	bl	800397c <HAL_RCC_GetHCLKFreq>
 800399c:	4602      	mov	r2, r0
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	0a9b      	lsrs	r3, r3, #10
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	4903      	ldr	r1, [pc, #12]	; (80039b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039aa:	5ccb      	ldrb	r3, [r1, r3]
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40023800 	.word	0x40023800
 80039b8:	08006a50 	.word	0x08006a50

080039bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039c0:	f7ff ffdc 	bl	800397c <HAL_RCC_GetHCLKFreq>
 80039c4:	4602      	mov	r2, r0
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	0b5b      	lsrs	r3, r3, #13
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	4903      	ldr	r1, [pc, #12]	; (80039e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039d2:	5ccb      	ldrb	r3, [r1, r3]
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d8:	4618      	mov	r0, r3
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40023800 	.word	0x40023800
 80039e0:	08006a50 	.word	0x08006a50

080039e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e04c      	b.n	8003a90 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d111      	bne.n	8003a26 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f001 fc02 	bl	8005214 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d102      	bne.n	8003a1e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <HAL_TIM_Base_Init+0xb4>)
 8003a1c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3304      	adds	r3, #4
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f001 f91f 	bl	8004c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	08001609 	.word	0x08001609

08003a9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d001      	beq.n	8003ab4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e03c      	b.n	8003b2e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <HAL_TIM_Base_Start+0xa0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d018      	beq.n	8003af8 <HAL_TIM_Base_Start+0x5c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ace:	d013      	beq.n	8003af8 <HAL_TIM_Base_Start+0x5c>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1a      	ldr	r2, [pc, #104]	; (8003b40 <HAL_TIM_Base_Start+0xa4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <HAL_TIM_Base_Start+0x5c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <HAL_TIM_Base_Start+0xa8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <HAL_TIM_Base_Start+0x5c>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <HAL_TIM_Base_Start+0xac>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_TIM_Base_Start+0x5c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <HAL_TIM_Base_Start+0xb0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d111      	bne.n	8003b1c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d010      	beq.n	8003b2c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1a:	e007      	b.n	8003b2c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40000800 	.word	0x40000800
 8003b48:	40000c00 	.word	0x40000c00
 8003b4c:	40014000 	.word	0x40014000

08003b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d001      	beq.n	8003b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e044      	b.n	8003bf2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d018      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x6c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b92:	d013      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x6c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1a      	ldr	r2, [pc, #104]	; (8003c04 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00e      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x6c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a19      	ldr	r2, [pc, #100]	; (8003c08 <HAL_TIM_Base_Start_IT+0xb8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d009      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x6c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a17      	ldr	r2, [pc, #92]	; (8003c0c <HAL_TIM_Base_Start_IT+0xbc>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d004      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x6c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a16      	ldr	r2, [pc, #88]	; (8003c10 <HAL_TIM_Base_Start_IT+0xc0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d111      	bne.n	8003be0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b06      	cmp	r3, #6
 8003bcc:	d010      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0201 	orr.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bde:	e007      	b.n	8003bf0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 0201 	orr.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40010000 	.word	0x40010000
 8003c04:	40000400 	.word	0x40000400
 8003c08:	40000800 	.word	0x40000800
 8003c0c:	40000c00 	.word	0x40000c00
 8003c10:	40014000 	.word	0x40014000

08003c14 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e04c      	b.n	8003cc0 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d111      	bne.n	8003c56 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f001 faea 	bl	8005214 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <HAL_TIM_OC_Init+0xb4>)
 8003c4c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4619      	mov	r1, r3
 8003c68:	4610      	mov	r0, r2
 8003c6a:	f001 f807 	bl	8004c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	08003ccd 	.word	0x08003ccd

08003ccc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e04c      	b.n	8003d8c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d111      	bne.n	8003d22 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f001 fa84 	bl	8005214 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <HAL_TIM_PWM_Init+0xb4>)
 8003d18:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	4619      	mov	r1, r3
 8003d34:	4610      	mov	r0, r2
 8003d36:	f000 ffa1 	bl	8004c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	080015b9 	.word	0x080015b9

08003d98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <HAL_TIM_PWM_Start+0x24>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	bf14      	ite	ne
 8003db4:	2301      	movne	r3, #1
 8003db6:	2300      	moveq	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	e022      	b.n	8003e02 <HAL_TIM_PWM_Start+0x6a>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d109      	bne.n	8003dd6 <HAL_TIM_PWM_Start+0x3e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	bf14      	ite	ne
 8003dce:	2301      	movne	r3, #1
 8003dd0:	2300      	moveq	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	e015      	b.n	8003e02 <HAL_TIM_PWM_Start+0x6a>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d109      	bne.n	8003df0 <HAL_TIM_PWM_Start+0x58>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	e008      	b.n	8003e02 <HAL_TIM_PWM_Start+0x6a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	bf14      	ite	ne
 8003dfc:	2301      	movne	r3, #1
 8003dfe:	2300      	moveq	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e068      	b.n	8003edc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d104      	bne.n	8003e1a <HAL_TIM_PWM_Start+0x82>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e18:	e013      	b.n	8003e42 <HAL_TIM_PWM_Start+0xaa>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d104      	bne.n	8003e2a <HAL_TIM_PWM_Start+0x92>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e28:	e00b      	b.n	8003e42 <HAL_TIM_PWM_Start+0xaa>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d104      	bne.n	8003e3a <HAL_TIM_PWM_Start+0xa2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e38:	e003      	b.n	8003e42 <HAL_TIM_PWM_Start+0xaa>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2201      	movs	r2, #1
 8003e48:	6839      	ldr	r1, [r7, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 f9bc 	bl	80051c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a23      	ldr	r2, [pc, #140]	; (8003ee4 <HAL_TIM_PWM_Start+0x14c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d107      	bne.n	8003e6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <HAL_TIM_PWM_Start+0x14c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d018      	beq.n	8003ea6 <HAL_TIM_PWM_Start+0x10e>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7c:	d013      	beq.n	8003ea6 <HAL_TIM_PWM_Start+0x10e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a19      	ldr	r2, [pc, #100]	; (8003ee8 <HAL_TIM_PWM_Start+0x150>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00e      	beq.n	8003ea6 <HAL_TIM_PWM_Start+0x10e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a17      	ldr	r2, [pc, #92]	; (8003eec <HAL_TIM_PWM_Start+0x154>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d009      	beq.n	8003ea6 <HAL_TIM_PWM_Start+0x10e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <HAL_TIM_PWM_Start+0x158>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d004      	beq.n	8003ea6 <HAL_TIM_PWM_Start+0x10e>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a14      	ldr	r2, [pc, #80]	; (8003ef4 <HAL_TIM_PWM_Start+0x15c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d111      	bne.n	8003eca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b06      	cmp	r3, #6
 8003eb6:	d010      	beq.n	8003eda <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec8:	e007      	b.n	8003eda <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0201 	orr.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40010000 	.word	0x40010000
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800
 8003ef0:	40000c00 	.word	0x40000c00
 8003ef4:	40014000 	.word	0x40014000

08003ef8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e04c      	b.n	8003fa6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d111      	bne.n	8003f3c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f001 f977 	bl	8005214 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d102      	bne.n	8003f34 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a1f      	ldr	r2, [pc, #124]	; (8003fb0 <HAL_TIM_OnePulse_Init+0xb8>)
 8003f32:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f000 fe94 	bl	8004c7c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0208 	bic.w	r2, r2, #8
 8003f62:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6819      	ldr	r1, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	08003fb5 	.word	0x08003fb5

08003fb4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fe0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fe8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ff0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d108      	bne.n	800400a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ff8:	7bbb      	ldrb	r3, [r7, #14]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d105      	bne.n	800400a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ffe:	7b7b      	ldrb	r3, [r7, #13]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d102      	bne.n	800400a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004004:	7b3b      	ldrb	r3, [r7, #12]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d001      	beq.n	800400e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e03b      	b.n	8004086 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2202      	movs	r2, #2
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2202      	movs	r2, #2
 800401a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2202      	movs	r2, #2
 800402a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0202 	orr.w	r2, r2, #2
 800403c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f042 0204 	orr.w	r2, r2, #4
 800404c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2201      	movs	r2, #1
 8004054:	2100      	movs	r1, #0
 8004056:	4618      	mov	r0, r3
 8004058:	f001 f8b6 	bl	80051c8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2201      	movs	r2, #1
 8004062:	2104      	movs	r1, #4
 8004064:	4618      	mov	r0, r3
 8004066:	f001 f8af 	bl	80051c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a08      	ldr	r2, [pc, #32]	; (8004090 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d107      	bne.n	8004084 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004082:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40010000 	.word	0x40010000

08004094 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0a2      	b.n	80041ee <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d111      	bne.n	80040d8 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f001 f8a9 	bl	8005214 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d102      	bne.n	80040d0 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a4a      	ldr	r2, [pc, #296]	; (80041f8 <HAL_TIM_Encoder_Init+0x164>)
 80040ce:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ee:	f023 0307 	bic.w	r3, r3, #7
 80040f2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f000 fdbc 	bl	8004c7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800412c:	f023 0303 	bic.w	r3, r3, #3
 8004130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	4313      	orrs	r3, r2
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800414a:	f023 030c 	bic.w	r3, r3, #12
 800414e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800415a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	021b      	lsls	r3, r3, #8
 8004166:	4313      	orrs	r3, r2
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	011a      	lsls	r2, r3, #4
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	031b      	lsls	r3, r3, #12
 800417a:	4313      	orrs	r3, r2
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004188:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004190:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	4313      	orrs	r3, r2
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	080016cd 	.word	0x080016cd

080041fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800420c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004214:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800421c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004224:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d110      	bne.n	800424e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d102      	bne.n	8004238 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004232:	7b7b      	ldrb	r3, [r7, #13]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d001      	beq.n	800423c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e069      	b.n	8004310 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800424c:	e031      	b.n	80042b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b04      	cmp	r3, #4
 8004252:	d110      	bne.n	8004276 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d102      	bne.n	8004260 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800425a:	7b3b      	ldrb	r3, [r7, #12]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d001      	beq.n	8004264 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e055      	b.n	8004310 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004274:	e01d      	b.n	80042b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d108      	bne.n	800428e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800427c:	7bbb      	ldrb	r3, [r7, #14]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d105      	bne.n	800428e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004282:	7b7b      	ldrb	r3, [r7, #13]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d102      	bne.n	800428e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004288:	7b3b      	ldrb	r3, [r7, #12]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d001      	beq.n	8004292 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e03e      	b.n	8004310 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2202      	movs	r2, #2
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_TIM_Encoder_Start+0xc4>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d008      	beq.n	80042d0 <HAL_TIM_Encoder_Start+0xd4>
 80042be:	e00f      	b.n	80042e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2201      	movs	r2, #1
 80042c6:	2100      	movs	r1, #0
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 ff7d 	bl	80051c8 <TIM_CCxChannelCmd>
      break;
 80042ce:	e016      	b.n	80042fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2201      	movs	r2, #1
 80042d6:	2104      	movs	r1, #4
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 ff75 	bl	80051c8 <TIM_CCxChannelCmd>
      break;
 80042de:	e00e      	b.n	80042fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2201      	movs	r2, #1
 80042e6:	2100      	movs	r1, #0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 ff6d 	bl	80051c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2201      	movs	r2, #1
 80042f4:	2104      	movs	r1, #4
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 ff66 	bl	80051c8 <TIM_CCxChannelCmd>
      break;
 80042fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b02      	cmp	r3, #2
 800432c:	d128      	bne.n	8004380 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b02      	cmp	r3, #2
 800433a:	d121      	bne.n	8004380 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0202 	mvn.w	r2, #2
 8004344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	4798      	blx	r3
 8004364:	e009      	b.n	800437a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b04      	cmp	r3, #4
 800438c:	d128      	bne.n	80043e0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b04      	cmp	r3, #4
 800439a:	d121      	bne.n	80043e0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0204 	mvn.w	r2, #4
 80043a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	4798      	blx	r3
 80043c4:	e009      	b.n	80043da <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d128      	bne.n	8004440 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d121      	bne.n	8004440 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0208 	mvn.w	r2, #8
 8004404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2204      	movs	r2, #4
 800440a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	4798      	blx	r3
 8004424:	e009      	b.n	800443a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b10      	cmp	r3, #16
 800444c:	d128      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b10      	cmp	r3, #16
 800445a:	d121      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0210 	mvn.w	r2, #16
 8004464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2208      	movs	r2, #8
 800446a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4798      	blx	r3
 8004484:	e009      	b.n	800449a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d110      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d109      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0201 	mvn.w	r2, #1
 80044c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044da:	2b80      	cmp	r3, #128	; 0x80
 80044dc:	d110      	bne.n	8004500 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e8:	2b80      	cmp	r3, #128	; 0x80
 80044ea:	d109      	bne.n	8004500 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d110      	bne.n	8004530 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d109      	bne.n	8004530 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b20      	cmp	r3, #32
 800453c:	d110      	bne.n	8004560 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b20      	cmp	r3, #32
 800454a:	d109      	bne.n	8004560 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0220 	mvn.w	r2, #32
 8004554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004582:	2302      	movs	r3, #2
 8004584:	e048      	b.n	8004618 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b0c      	cmp	r3, #12
 8004592:	d839      	bhi.n	8004608 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004594:	a201      	add	r2, pc, #4	; (adr r2, 800459c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045d1 	.word	0x080045d1
 80045a0:	08004609 	.word	0x08004609
 80045a4:	08004609 	.word	0x08004609
 80045a8:	08004609 	.word	0x08004609
 80045ac:	080045df 	.word	0x080045df
 80045b0:	08004609 	.word	0x08004609
 80045b4:	08004609 	.word	0x08004609
 80045b8:	08004609 	.word	0x08004609
 80045bc:	080045ed 	.word	0x080045ed
 80045c0:	08004609 	.word	0x08004609
 80045c4:	08004609 	.word	0x08004609
 80045c8:	08004609 	.word	0x08004609
 80045cc:	080045fb 	.word	0x080045fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fbd0 	bl	8004d7c <TIM_OC1_SetConfig>
      break;
 80045dc:	e017      	b.n	800460e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fc2f 	bl	8004e48 <TIM_OC2_SetConfig>
      break;
 80045ea:	e010      	b.n	800460e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fc94 	bl	8004f20 <TIM_OC3_SetConfig>
      break;
 80045f8:	e009      	b.n	800460e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fcf7 	bl	8004ff4 <TIM_OC4_SetConfig>
      break;
 8004606:	e002      	b.n	800460e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	75fb      	strb	r3, [r7, #23]
      break;
 800460c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004616:	7dfb      	ldrb	r3, [r7, #23]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800463a:	2302      	movs	r3, #2
 800463c:	e0ae      	b.n	800479c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b0c      	cmp	r3, #12
 800464a:	f200 809f 	bhi.w	800478c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800464e:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004654:	08004689 	.word	0x08004689
 8004658:	0800478d 	.word	0x0800478d
 800465c:	0800478d 	.word	0x0800478d
 8004660:	0800478d 	.word	0x0800478d
 8004664:	080046c9 	.word	0x080046c9
 8004668:	0800478d 	.word	0x0800478d
 800466c:	0800478d 	.word	0x0800478d
 8004670:	0800478d 	.word	0x0800478d
 8004674:	0800470b 	.word	0x0800470b
 8004678:	0800478d 	.word	0x0800478d
 800467c:	0800478d 	.word	0x0800478d
 8004680:	0800478d 	.word	0x0800478d
 8004684:	0800474b 	.word	0x0800474b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fb74 	bl	8004d7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0208 	orr.w	r2, r2, #8
 80046a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0204 	bic.w	r2, r2, #4
 80046b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6999      	ldr	r1, [r3, #24]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	619a      	str	r2, [r3, #24]
      break;
 80046c6:	e064      	b.n	8004792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fbba 	bl	8004e48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6999      	ldr	r1, [r3, #24]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	021a      	lsls	r2, r3, #8
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	619a      	str	r2, [r3, #24]
      break;
 8004708:	e043      	b.n	8004792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68b9      	ldr	r1, [r7, #8]
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fc05 	bl	8004f20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69da      	ldr	r2, [r3, #28]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0208 	orr.w	r2, r2, #8
 8004724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69da      	ldr	r2, [r3, #28]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0204 	bic.w	r2, r2, #4
 8004734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69d9      	ldr	r1, [r3, #28]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	61da      	str	r2, [r3, #28]
      break;
 8004748:	e023      	b.n	8004792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68b9      	ldr	r1, [r7, #8]
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fc4f 	bl	8004ff4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69d9      	ldr	r1, [r3, #28]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	021a      	lsls	r2, r3, #8
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	61da      	str	r2, [r3, #28]
      break;
 800478a:	e002      	b.n	8004792 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	75fb      	strb	r3, [r7, #23]
      break;
 8004790:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800479a:	7dfb      	ldrb	r3, [r7, #23]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_TIM_ConfigClockSource+0x1c>
 80047bc:	2302      	movs	r3, #2
 80047be:	e0b4      	b.n	800492a <HAL_TIM_ConfigClockSource+0x186>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f8:	d03e      	beq.n	8004878 <HAL_TIM_ConfigClockSource+0xd4>
 80047fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047fe:	f200 8087 	bhi.w	8004910 <HAL_TIM_ConfigClockSource+0x16c>
 8004802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004806:	f000 8086 	beq.w	8004916 <HAL_TIM_ConfigClockSource+0x172>
 800480a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480e:	d87f      	bhi.n	8004910 <HAL_TIM_ConfigClockSource+0x16c>
 8004810:	2b70      	cmp	r3, #112	; 0x70
 8004812:	d01a      	beq.n	800484a <HAL_TIM_ConfigClockSource+0xa6>
 8004814:	2b70      	cmp	r3, #112	; 0x70
 8004816:	d87b      	bhi.n	8004910 <HAL_TIM_ConfigClockSource+0x16c>
 8004818:	2b60      	cmp	r3, #96	; 0x60
 800481a:	d050      	beq.n	80048be <HAL_TIM_ConfigClockSource+0x11a>
 800481c:	2b60      	cmp	r3, #96	; 0x60
 800481e:	d877      	bhi.n	8004910 <HAL_TIM_ConfigClockSource+0x16c>
 8004820:	2b50      	cmp	r3, #80	; 0x50
 8004822:	d03c      	beq.n	800489e <HAL_TIM_ConfigClockSource+0xfa>
 8004824:	2b50      	cmp	r3, #80	; 0x50
 8004826:	d873      	bhi.n	8004910 <HAL_TIM_ConfigClockSource+0x16c>
 8004828:	2b40      	cmp	r3, #64	; 0x40
 800482a:	d058      	beq.n	80048de <HAL_TIM_ConfigClockSource+0x13a>
 800482c:	2b40      	cmp	r3, #64	; 0x40
 800482e:	d86f      	bhi.n	8004910 <HAL_TIM_ConfigClockSource+0x16c>
 8004830:	2b30      	cmp	r3, #48	; 0x30
 8004832:	d064      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0x15a>
 8004834:	2b30      	cmp	r3, #48	; 0x30
 8004836:	d86b      	bhi.n	8004910 <HAL_TIM_ConfigClockSource+0x16c>
 8004838:	2b20      	cmp	r3, #32
 800483a:	d060      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0x15a>
 800483c:	2b20      	cmp	r3, #32
 800483e:	d867      	bhi.n	8004910 <HAL_TIM_ConfigClockSource+0x16c>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d05c      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0x15a>
 8004844:	2b10      	cmp	r3, #16
 8004846:	d05a      	beq.n	80048fe <HAL_TIM_ConfigClockSource+0x15a>
 8004848:	e062      	b.n	8004910 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	6899      	ldr	r1, [r3, #8]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f000 fc95 	bl	8005188 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800486c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	609a      	str	r2, [r3, #8]
      break;
 8004876:	e04f      	b.n	8004918 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	6899      	ldr	r1, [r3, #8]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f000 fc7e 	bl	8005188 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800489a:	609a      	str	r2, [r3, #8]
      break;
 800489c:	e03c      	b.n	8004918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6859      	ldr	r1, [r3, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	461a      	mov	r2, r3
 80048ac:	f000 fbf2 	bl	8005094 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2150      	movs	r1, #80	; 0x50
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fc4b 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 80048bc:	e02c      	b.n	8004918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6859      	ldr	r1, [r3, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	461a      	mov	r2, r3
 80048cc:	f000 fc11 	bl	80050f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2160      	movs	r1, #96	; 0x60
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fc3b 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 80048dc:	e01c      	b.n	8004918 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6859      	ldr	r1, [r3, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f000 fbd2 	bl	8005094 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2140      	movs	r1, #64	; 0x40
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fc2b 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 80048fc:	e00c      	b.n	8004918 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4619      	mov	r1, r3
 8004908:	4610      	mov	r0, r2
 800490a:	f000 fc22 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 800490e:	e003      	b.n	8004918 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
      break;
 8004914:	e000      	b.n	8004918 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004916:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004928:	7bfb      	ldrb	r3, [r7, #15]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	460b      	mov	r3, r1
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e135      	b.n	8004c70 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_TIM_RegisterCallback+0x2a>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e12e      	b.n	8004c70 <HAL_TIM_RegisterCallback+0x288>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	f040 80ba 	bne.w	8004b9c <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8004a28:	7afb      	ldrb	r3, [r7, #11]
 8004a2a:	2b1a      	cmp	r3, #26
 8004a2c:	f200 80b3 	bhi.w	8004b96 <HAL_TIM_RegisterCallback+0x1ae>
 8004a30:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <HAL_TIM_RegisterCallback+0x50>)
 8004a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a36:	bf00      	nop
 8004a38:	08004aa5 	.word	0x08004aa5
 8004a3c:	08004aad 	.word	0x08004aad
 8004a40:	08004ab5 	.word	0x08004ab5
 8004a44:	08004abd 	.word	0x08004abd
 8004a48:	08004ac5 	.word	0x08004ac5
 8004a4c:	08004acd 	.word	0x08004acd
 8004a50:	08004ad5 	.word	0x08004ad5
 8004a54:	08004add 	.word	0x08004add
 8004a58:	08004ae5 	.word	0x08004ae5
 8004a5c:	08004aed 	.word	0x08004aed
 8004a60:	08004af5 	.word	0x08004af5
 8004a64:	08004afd 	.word	0x08004afd
 8004a68:	08004b05 	.word	0x08004b05
 8004a6c:	08004b0d 	.word	0x08004b0d
 8004a70:	08004b15 	.word	0x08004b15
 8004a74:	08004b1f 	.word	0x08004b1f
 8004a78:	08004b29 	.word	0x08004b29
 8004a7c:	08004b33 	.word	0x08004b33
 8004a80:	08004b3d 	.word	0x08004b3d
 8004a84:	08004b47 	.word	0x08004b47
 8004a88:	08004b51 	.word	0x08004b51
 8004a8c:	08004b5b 	.word	0x08004b5b
 8004a90:	08004b65 	.word	0x08004b65
 8004a94:	08004b6f 	.word	0x08004b6f
 8004a98:	08004b79 	.word	0x08004b79
 8004a9c:	08004b83 	.word	0x08004b83
 8004aa0:	08004b8d 	.word	0x08004b8d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8004aaa:	e0dc      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004ab2:	e0d8      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8004aba:	e0d4      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8004ac2:	e0d0      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8004aca:	e0cc      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8004ad2:	e0c8      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8004ada:	e0c4      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8004ae2:	e0c0      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8004aea:	e0bc      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8004af2:	e0b8      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004afa:	e0b4      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8004b02:	e0b0      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8004b0a:	e0ac      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8004b12:	e0a8      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8004b1c:	e0a3      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8004b26:	e09e      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8004b30:	e099      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8004b3a:	e094      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8004b44:	e08f      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8004b4e:	e08a      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8004b58:	e085      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8004b62:	e080      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8004b6c:	e07b      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8004b76:	e076      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8004b80:	e071      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8004b8a:	e06c      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8004b94:	e067      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	75fb      	strb	r3, [r7, #23]
        break;
 8004b9a:	e064      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d15c      	bne.n	8004c62 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8004ba8:	7afb      	ldrb	r3, [r7, #11]
 8004baa:	2b0d      	cmp	r3, #13
 8004bac:	d856      	bhi.n	8004c5c <HAL_TIM_RegisterCallback+0x274>
 8004bae:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <HAL_TIM_RegisterCallback+0x1cc>)
 8004bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb4:	08004bed 	.word	0x08004bed
 8004bb8:	08004bf5 	.word	0x08004bf5
 8004bbc:	08004bfd 	.word	0x08004bfd
 8004bc0:	08004c05 	.word	0x08004c05
 8004bc4:	08004c0d 	.word	0x08004c0d
 8004bc8:	08004c15 	.word	0x08004c15
 8004bcc:	08004c1d 	.word	0x08004c1d
 8004bd0:	08004c25 	.word	0x08004c25
 8004bd4:	08004c2d 	.word	0x08004c2d
 8004bd8:	08004c35 	.word	0x08004c35
 8004bdc:	08004c3d 	.word	0x08004c3d
 8004be0:	08004c45 	.word	0x08004c45
 8004be4:	08004c4d 	.word	0x08004c4d
 8004be8:	08004c55 	.word	0x08004c55
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8004bf2:	e038      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004bfa:	e034      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8004c02:	e030      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8004c0a:	e02c      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8004c12:	e028      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8004c1a:	e024      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8004c22:	e020      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8004c2a:	e01c      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8004c32:	e018      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8004c3a:	e014      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004c42:	e010      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8004c4a:	e00c      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8004c52:	e008      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8004c5a:	e004      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	75fb      	strb	r3, [r7, #23]
        break;
 8004c60:	e001      	b.n	8004c66 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a34      	ldr	r2, [pc, #208]	; (8004d60 <TIM_Base_SetConfig+0xe4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00f      	beq.n	8004cb4 <TIM_Base_SetConfig+0x38>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9a:	d00b      	beq.n	8004cb4 <TIM_Base_SetConfig+0x38>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a31      	ldr	r2, [pc, #196]	; (8004d64 <TIM_Base_SetConfig+0xe8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d007      	beq.n	8004cb4 <TIM_Base_SetConfig+0x38>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a30      	ldr	r2, [pc, #192]	; (8004d68 <TIM_Base_SetConfig+0xec>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d003      	beq.n	8004cb4 <TIM_Base_SetConfig+0x38>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a2f      	ldr	r2, [pc, #188]	; (8004d6c <TIM_Base_SetConfig+0xf0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d108      	bne.n	8004cc6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a25      	ldr	r2, [pc, #148]	; (8004d60 <TIM_Base_SetConfig+0xe4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d01b      	beq.n	8004d06 <TIM_Base_SetConfig+0x8a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd4:	d017      	beq.n	8004d06 <TIM_Base_SetConfig+0x8a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a22      	ldr	r2, [pc, #136]	; (8004d64 <TIM_Base_SetConfig+0xe8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d013      	beq.n	8004d06 <TIM_Base_SetConfig+0x8a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a21      	ldr	r2, [pc, #132]	; (8004d68 <TIM_Base_SetConfig+0xec>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00f      	beq.n	8004d06 <TIM_Base_SetConfig+0x8a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a20      	ldr	r2, [pc, #128]	; (8004d6c <TIM_Base_SetConfig+0xf0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00b      	beq.n	8004d06 <TIM_Base_SetConfig+0x8a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a1f      	ldr	r2, [pc, #124]	; (8004d70 <TIM_Base_SetConfig+0xf4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d007      	beq.n	8004d06 <TIM_Base_SetConfig+0x8a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a1e      	ldr	r2, [pc, #120]	; (8004d74 <TIM_Base_SetConfig+0xf8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d003      	beq.n	8004d06 <TIM_Base_SetConfig+0x8a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a1d      	ldr	r2, [pc, #116]	; (8004d78 <TIM_Base_SetConfig+0xfc>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d108      	bne.n	8004d18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a08      	ldr	r2, [pc, #32]	; (8004d60 <TIM_Base_SetConfig+0xe4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d103      	bne.n	8004d4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	615a      	str	r2, [r3, #20]
}
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40010000 	.word	0x40010000
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40000800 	.word	0x40000800
 8004d6c:	40000c00 	.word	0x40000c00
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40014400 	.word	0x40014400
 8004d78:	40014800 	.word	0x40014800

08004d7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f023 0201 	bic.w	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f023 0302 	bic.w	r3, r3, #2
 8004dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a1c      	ldr	r2, [pc, #112]	; (8004e44 <TIM_OC1_SetConfig+0xc8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d10c      	bne.n	8004df2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f023 0308 	bic.w	r3, r3, #8
 8004dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f023 0304 	bic.w	r3, r3, #4
 8004df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a13      	ldr	r2, [pc, #76]	; (8004e44 <TIM_OC1_SetConfig+0xc8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d111      	bne.n	8004e1e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	621a      	str	r2, [r3, #32]
}
 8004e38:	bf00      	nop
 8004e3a:	371c      	adds	r7, #28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	40010000 	.word	0x40010000

08004e48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	f023 0210 	bic.w	r2, r3, #16
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	021b      	lsls	r3, r3, #8
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f023 0320 	bic.w	r3, r3, #32
 8004e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a1e      	ldr	r2, [pc, #120]	; (8004f1c <TIM_OC2_SetConfig+0xd4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d10d      	bne.n	8004ec4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a15      	ldr	r2, [pc, #84]	; (8004f1c <TIM_OC2_SetConfig+0xd4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d113      	bne.n	8004ef4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ed2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40010000 	.word	0x40010000

08004f20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0303 	bic.w	r3, r3, #3
 8004f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	021b      	lsls	r3, r3, #8
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <TIM_OC3_SetConfig+0xd0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d10d      	bne.n	8004f9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a14      	ldr	r2, [pc, #80]	; (8004ff0 <TIM_OC3_SetConfig+0xd0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d113      	bne.n	8004fca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	621a      	str	r2, [r3, #32]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	40010000 	.word	0x40010000

08004ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800503e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	031b      	lsls	r3, r3, #12
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a10      	ldr	r2, [pc, #64]	; (8005090 <TIM_OC4_SetConfig+0x9c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d109      	bne.n	8005068 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800505a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	019b      	lsls	r3, r3, #6
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	621a      	str	r2, [r3, #32]
}
 8005082:	bf00      	nop
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	40010000 	.word	0x40010000

08005094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f023 0201 	bic.w	r2, r3, #1
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f023 030a 	bic.w	r3, r3, #10
 80050d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b087      	sub	sp, #28
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	f023 0210 	bic.w	r2, r3, #16
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800511c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	031b      	lsls	r3, r3, #12
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800512e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	f043 0307 	orr.w	r3, r3, #7
 8005174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	609a      	str	r2, [r3, #8]
}
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	021a      	lsls	r2, r3, #8
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	609a      	str	r2, [r3, #8]
}
 80051bc:	bf00      	nop
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f003 031f 	and.w	r3, r3, #31
 80051da:	2201      	movs	r2, #1
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a1a      	ldr	r2, [r3, #32]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	43db      	mvns	r3, r3
 80051ea:	401a      	ands	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a1a      	ldr	r2, [r3, #32]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 031f 	and.w	r3, r3, #31
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005200:	431a      	orrs	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
	...

08005214 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a1c      	ldr	r2, [pc, #112]	; (8005290 <TIM_ResetCallback+0x7c>)
 8005220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a1b      	ldr	r2, [pc, #108]	; (8005294 <TIM_ResetCallback+0x80>)
 8005228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a1a      	ldr	r2, [pc, #104]	; (8005298 <TIM_ResetCallback+0x84>)
 8005230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a19      	ldr	r2, [pc, #100]	; (800529c <TIM_ResetCallback+0x88>)
 8005238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <TIM_ResetCallback+0x8c>)
 8005240:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a17      	ldr	r2, [pc, #92]	; (80052a4 <TIM_ResetCallback+0x90>)
 8005248:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a16      	ldr	r2, [pc, #88]	; (80052a8 <TIM_ResetCallback+0x94>)
 8005250:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a15      	ldr	r2, [pc, #84]	; (80052ac <TIM_ResetCallback+0x98>)
 8005258:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a14      	ldr	r2, [pc, #80]	; (80052b0 <TIM_ResetCallback+0x9c>)
 8005260:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a13      	ldr	r2, [pc, #76]	; (80052b4 <TIM_ResetCallback+0xa0>)
 8005268:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a12      	ldr	r2, [pc, #72]	; (80052b8 <TIM_ResetCallback+0xa4>)
 8005270:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a11      	ldr	r2, [pc, #68]	; (80052bc <TIM_ResetCallback+0xa8>)
 8005278:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a10      	ldr	r2, [pc, #64]	; (80052c0 <TIM_ResetCallback+0xac>)
 8005280:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	080013b1 	.word	0x080013b1
 8005294:	08004933 	.word	0x08004933
 8005298:	080049ab 	.word	0x080049ab
 800529c:	080049bf 	.word	0x080049bf
 80052a0:	0800495b 	.word	0x0800495b
 80052a4:	0800496f 	.word	0x0800496f
 80052a8:	08004947 	.word	0x08004947
 80052ac:	08004983 	.word	0x08004983
 80052b0:	08004997 	.word	0x08004997
 80052b4:	080049d3 	.word	0x080049d3
 80052b8:	08005445 	.word	0x08005445
 80052bc:	08005459 	.word	0x08005459
 80052c0:	0800546d 	.word	0x0800546d

080052c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d8:	2302      	movs	r3, #2
 80052da:	e050      	b.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a1c      	ldr	r2, [pc, #112]	; (800538c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d018      	beq.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005328:	d013      	beq.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a18      	ldr	r2, [pc, #96]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00e      	beq.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a16      	ldr	r2, [pc, #88]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d009      	beq.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a15      	ldr	r2, [pc, #84]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d004      	beq.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a13      	ldr	r2, [pc, #76]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d10c      	bne.n	800536c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005358:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	4313      	orrs	r3, r2
 8005362:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40010000 	.word	0x40010000
 8005390:	40000400 	.word	0x40000400
 8005394:	40000800 	.word	0x40000800
 8005398:	40000c00 	.word	0x40000c00
 800539c:	40014000 	.word	0x40014000

080053a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e03d      	b.n	8005438 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e04a      	b.n	8005528 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d111      	bne.n	80054c2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fd2c 	bl	8005f04 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d102      	bne.n	80054ba <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a1e      	ldr	r2, [pc, #120]	; (8005530 <HAL_UART_Init+0xb0>)
 80054b8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2224      	movs	r2, #36	; 0x24
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fff6 	bl	80064cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695a      	ldr	r2, [r3, #20]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800550e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	080017d1 	.word	0x080017d1

08005534 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	460b      	mov	r3, r1
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d107      	bne.n	800555c <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	f043 0220 	orr.w	r2, r3, #32
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e08c      	b.n	8005676 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005562:	2b01      	cmp	r3, #1
 8005564:	d101      	bne.n	800556a <HAL_UART_RegisterCallback+0x36>
 8005566:	2302      	movs	r3, #2
 8005568:	e085      	b.n	8005676 <HAL_UART_RegisterCallback+0x142>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b20      	cmp	r3, #32
 800557c:	d151      	bne.n	8005622 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800557e:	7afb      	ldrb	r3, [r7, #11]
 8005580:	2b0c      	cmp	r3, #12
 8005582:	d845      	bhi.n	8005610 <HAL_UART_RegisterCallback+0xdc>
 8005584:	a201      	add	r2, pc, #4	; (adr r2, 800558c <HAL_UART_RegisterCallback+0x58>)
 8005586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558a:	bf00      	nop
 800558c:	080055c1 	.word	0x080055c1
 8005590:	080055c9 	.word	0x080055c9
 8005594:	080055d1 	.word	0x080055d1
 8005598:	080055d9 	.word	0x080055d9
 800559c:	080055e1 	.word	0x080055e1
 80055a0:	080055e9 	.word	0x080055e9
 80055a4:	080055f1 	.word	0x080055f1
 80055a8:	080055f9 	.word	0x080055f9
 80055ac:	08005611 	.word	0x08005611
 80055b0:	08005611 	.word	0x08005611
 80055b4:	08005611 	.word	0x08005611
 80055b8:	08005601 	.word	0x08005601
 80055bc:	08005609 	.word	0x08005609
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80055c6:	e051      	b.n	800566c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80055ce:	e04d      	b.n	800566c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80055d6:	e049      	b.n	800566c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80055de:	e045      	b.n	800566c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80055e6:	e041      	b.n	800566c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80055ee:	e03d      	b.n	800566c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80055f6:	e039      	b.n	800566c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80055fe:	e035      	b.n	800566c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8005606:	e031      	b.n	800566c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800560e:	e02d      	b.n	800566c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	75fb      	strb	r3, [r7, #23]
        break;
 8005620:	e024      	b.n	800566c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d116      	bne.n	800565c <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800562e:	7afb      	ldrb	r3, [r7, #11]
 8005630:	2b0b      	cmp	r3, #11
 8005632:	d002      	beq.n	800563a <HAL_UART_RegisterCallback+0x106>
 8005634:	2b0c      	cmp	r3, #12
 8005636:	d004      	beq.n	8005642 <HAL_UART_RegisterCallback+0x10e>
 8005638:	e007      	b.n	800564a <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8005640:	e014      	b.n	800566c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005648:	e010      	b.n	800566c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	f043 0220 	orr.w	r2, r3, #32
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	75fb      	strb	r3, [r7, #23]
        break;
 800565a:	e007      	b.n	800566c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	f043 0220 	orr.w	r2, r3, #32
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005674:	7dfb      	ldrb	r3, [r7, #23]
}
 8005676:	4618      	mov	r0, r3
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop

08005684 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	4613      	mov	r3, r2
 8005690:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b20      	cmp	r3, #32
 800569c:	d11d      	bne.n	80056da <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <HAL_UART_Receive_IT+0x26>
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e016      	b.n	80056dc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_UART_Receive_IT+0x38>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e00f      	b.n	80056dc <HAL_UART_Receive_IT+0x58>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056ca:	88fb      	ldrh	r3, [r7, #6]
 80056cc:	461a      	mov	r2, r3
 80056ce:	68b9      	ldr	r1, [r7, #8]
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 fcf7 	bl	80060c4 <UART_Start_Receive_IT>
 80056d6:	4603      	mov	r3, r0
 80056d8:	e000      	b.n	80056dc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80056da:	2302      	movs	r3, #2
  }
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08c      	sub	sp, #48	; 0x30
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	4613      	mov	r3, r2
 80056f0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d165      	bne.n	80057ca <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <HAL_UART_Transmit_DMA+0x26>
 8005704:	88fb      	ldrh	r3, [r7, #6]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e05e      	b.n	80057cc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_UART_Transmit_DMA+0x38>
 8005718:	2302      	movs	r3, #2
 800571a:	e057      	b.n	80057cc <HAL_UART_Transmit_DMA+0xe8>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	88fa      	ldrh	r2, [r7, #6]
 800572e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	88fa      	ldrh	r2, [r7, #6]
 8005734:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2221      	movs	r2, #33	; 0x21
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005748:	4a22      	ldr	r2, [pc, #136]	; (80057d4 <HAL_UART_Transmit_DMA+0xf0>)
 800574a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005750:	4a21      	ldr	r2, [pc, #132]	; (80057d8 <HAL_UART_Transmit_DMA+0xf4>)
 8005752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005758:	4a20      	ldr	r2, [pc, #128]	; (80057dc <HAL_UART_Transmit_DMA+0xf8>)
 800575a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005760:	2200      	movs	r2, #0
 8005762:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005764:	f107 0308 	add.w	r3, r7, #8
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800576e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005770:	6819      	ldr	r1, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3304      	adds	r3, #4
 8005778:	461a      	mov	r2, r3
 800577a:	88fb      	ldrh	r3, [r7, #6]
 800577c:	f7fc ff84 	bl	8002688 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005788:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3314      	adds	r3, #20
 8005798:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	617b      	str	r3, [r7, #20]
   return(result);
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3314      	adds	r3, #20
 80057b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057b2:	627a      	str	r2, [r7, #36]	; 0x24
 80057b4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6a39      	ldr	r1, [r7, #32]
 80057b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	61fb      	str	r3, [r7, #28]
   return(result);
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e5      	bne.n	8005792 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	e000      	b.n	80057cc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80057ca:	2302      	movs	r3, #2
  }
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3730      	adds	r7, #48	; 0x30
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	08005f75 	.word	0x08005f75
 80057d8:	08006011 	.word	0x08006011
 80057dc:	0800602f 	.word	0x0800602f

080057e0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b09a      	sub	sp, #104	; 0x68
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	330c      	adds	r3, #12
 80057ee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80057f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057fe:	667b      	str	r3, [r7, #100]	; 0x64
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005808:	657a      	str	r2, [r7, #84]	; 0x54
 800580a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800580e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e5      	bne.n	80057e8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3314      	adds	r3, #20
 8005822:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	f023 0301 	bic.w	r3, r3, #1
 8005832:	663b      	str	r3, [r7, #96]	; 0x60
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3314      	adds	r3, #20
 800583a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800583c:	643a      	str	r2, [r7, #64]	; 0x40
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005842:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e5      	bne.n	800581c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	2b01      	cmp	r3, #1
 8005856:	d119      	bne.n	800588c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	330c      	adds	r3, #12
 800585e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	61fb      	str	r3, [r7, #28]
   return(result);
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	f023 0310 	bic.w	r3, r3, #16
 800586e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005878:	62fa      	str	r2, [r7, #44]	; 0x2c
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800587e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e5      	bne.n	8005858 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d136      	bne.n	8005908 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3314      	adds	r3, #20
 80058a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3314      	adds	r3, #20
 80058b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058ba:	61ba      	str	r2, [r7, #24]
 80058bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	6979      	ldr	r1, [r7, #20]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	613b      	str	r3, [r7, #16]
   return(result);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e5      	bne.n	800589a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d018      	beq.n	8005908 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	2200      	movs	r2, #0
 80058dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fc ff28 	bl	8002738 <HAL_DMA_Abort>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00c      	beq.n	8005908 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fd f93c 	bl	8002b70 <HAL_DMA_GetError>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d104      	bne.n	8005908 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2210      	movs	r2, #16
 8005902:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e00a      	b.n	800591e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3768      	adds	r7, #104	; 0x68
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b0ba      	sub	sp, #232	; 0xe8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800594e:	2300      	movs	r3, #0
 8005950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005954:	2300      	movs	r3, #0
 8005956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800595a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10f      	bne.n	800598e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800596e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d009      	beq.n	800598e <HAL_UART_IRQHandler+0x66>
 800597a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fce3 	bl	8006352 <UART_Receive_IT>
      return;
 800598c:	e25b      	b.n	8005e46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800598e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 80e1 	beq.w	8005b5a <HAL_UART_IRQHandler+0x232>
 8005998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 80d4 	beq.w	8005b5a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <HAL_UART_IRQHandler+0xae>
 80059be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d005      	beq.n	80059d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	f043 0201 	orr.w	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <HAL_UART_IRQHandler+0xd2>
 80059e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	f043 0202 	orr.w	r2, r3, #2
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <HAL_UART_IRQHandler+0xf6>
 8005a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f043 0204 	orr.w	r2, r3, #4
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d011      	beq.n	8005a4e <HAL_UART_IRQHandler+0x126>
 8005a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d105      	bne.n	8005a42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f043 0208 	orr.w	r2, r3, #8
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 81f2 	beq.w	8005e3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <HAL_UART_IRQHandler+0x14e>
 8005a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fc6e 	bl	8006352 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	bf0c      	ite	eq
 8005a84:	2301      	moveq	r3, #1
 8005a86:	2300      	movne	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d103      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x17a>
 8005a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d051      	beq.n	8005b46 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fb74 	bl	8006190 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	d142      	bne.n	8005b3c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3314      	adds	r3, #20
 8005abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3314      	adds	r3, #20
 8005ade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ae2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005aee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1d9      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d013      	beq.n	8005b32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	4a7f      	ldr	r2, [pc, #508]	; (8005d0c <HAL_UART_IRQHandler+0x3e4>)
 8005b10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fc fe7e 	bl	8002818 <HAL_DMA_Abort_IT>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d019      	beq.n	8005b56 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b30:	e011      	b.n	8005b56 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b3a:	e00c      	b.n	8005b56 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b44:	e007      	b.n	8005b56 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b54:	e172      	b.n	8005e3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b56:	bf00      	nop
    return;
 8005b58:	e170      	b.n	8005e3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	f040 814c 	bne.w	8005dfc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b68:	f003 0310 	and.w	r3, r3, #16
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 8145 	beq.w	8005dfc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 813e 	beq.w	8005dfc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b80:	2300      	movs	r3, #0
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60bb      	str	r3, [r7, #8]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	60bb      	str	r3, [r7, #8]
 8005b94:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba0:	2b40      	cmp	r3, #64	; 0x40
 8005ba2:	f040 80b5 	bne.w	8005d10 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bb2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 8142 	beq.w	8005e40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	f080 813b 	bcs.w	8005e40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bd0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bdc:	f000 8088 	beq.w	8005cf0 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	330c      	adds	r3, #12
 8005be6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	330c      	adds	r3, #12
 8005c08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c0c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1d9      	bne.n	8005be0 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3314      	adds	r3, #20
 8005c32:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c3e:	f023 0301 	bic.w	r3, r3, #1
 8005c42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3314      	adds	r3, #20
 8005c4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c50:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c54:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c5c:	e841 2300 	strex	r3, r2, [r1]
 8005c60:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1e1      	bne.n	8005c2c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3314      	adds	r3, #20
 8005c6e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c72:	e853 3f00 	ldrex	r3, [r3]
 8005c76:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3314      	adds	r3, #20
 8005c88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c8c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c94:	e841 2300 	strex	r3, r2, [r1]
 8005c98:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e3      	bne.n	8005c68 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	330c      	adds	r3, #12
 8005cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc0:	f023 0310 	bic.w	r3, r3, #16
 8005cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	330c      	adds	r3, #12
 8005cce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005cd2:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cd4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e3      	bne.n	8005cae <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fc fd24 	bl	8002738 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8005cfc:	b292      	uxth	r2, r2
 8005cfe:	1a8a      	subs	r2, r1, r2
 8005d00:	b292      	uxth	r2, r2
 8005d02:	4611      	mov	r1, r2
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d08:	e09a      	b.n	8005e40 <HAL_UART_IRQHandler+0x518>
 8005d0a:	bf00      	nop
 8005d0c:	08006257 	.word	0x08006257
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 808c 	beq.w	8005e44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 8087 	beq.w	8005e44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	330c      	adds	r3, #12
 8005d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	330c      	adds	r3, #12
 8005d56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d5a:	647a      	str	r2, [r7, #68]	; 0x44
 8005d5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1e3      	bne.n	8005d36 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3314      	adds	r3, #20
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	f023 0301 	bic.w	r3, r3, #1
 8005d84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3314      	adds	r3, #20
 8005d8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d92:	633a      	str	r2, [r7, #48]	; 0x30
 8005d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e3      	bne.n	8005d6e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	330c      	adds	r3, #12
 8005dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f023 0310 	bic.w	r3, r3, #16
 8005dca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	330c      	adds	r3, #12
 8005dd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005dd8:	61fa      	str	r2, [r7, #28]
 8005dda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ddc:	69b9      	ldr	r1, [r7, #24]
 8005dde:	69fa      	ldr	r2, [r7, #28]
 8005de0:	e841 2300 	strex	r3, r2, [r1]
 8005de4:	617b      	str	r3, [r7, #20]
   return(result);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e3      	bne.n	8005db4 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8005df4:	4611      	mov	r1, r2
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dfa:	e023      	b.n	8005e44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d009      	beq.n	8005e1c <HAL_UART_IRQHandler+0x4f4>
 8005e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fa33 	bl	8006280 <UART_Transmit_IT>
    return;
 8005e1a:	e014      	b.n	8005e46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00e      	beq.n	8005e46 <HAL_UART_IRQHandler+0x51e>
 8005e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d008      	beq.n	8005e46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fa73 	bl	8006320 <UART_EndTransmit_IT>
    return;
 8005e3a:	e004      	b.n	8005e46 <HAL_UART_IRQHandler+0x51e>
    return;
 8005e3c:	bf00      	nop
 8005e3e:	e002      	b.n	8005e46 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e40:	bf00      	nop
 8005e42:	e000      	b.n	8005e46 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e44:	bf00      	nop
  }
}
 8005e46:	37e8      	adds	r7, #232	; 0xe8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a10      	ldr	r2, [pc, #64]	; (8005f50 <UART_InitCallbacksToDefault+0x4c>)
 8005f10:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a0f      	ldr	r2, [pc, #60]	; (8005f54 <UART_InitCallbacksToDefault+0x50>)
 8005f16:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a0f      	ldr	r2, [pc, #60]	; (8005f58 <UART_InitCallbacksToDefault+0x54>)
 8005f1c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a0e      	ldr	r2, [pc, #56]	; (8005f5c <UART_InitCallbacksToDefault+0x58>)
 8005f22:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a0e      	ldr	r2, [pc, #56]	; (8005f60 <UART_InitCallbacksToDefault+0x5c>)
 8005f28:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a0d      	ldr	r2, [pc, #52]	; (8005f64 <UART_InitCallbacksToDefault+0x60>)
 8005f2e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a0d      	ldr	r2, [pc, #52]	; (8005f68 <UART_InitCallbacksToDefault+0x64>)
 8005f34:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a0c      	ldr	r2, [pc, #48]	; (8005f6c <UART_InitCallbacksToDefault+0x68>)
 8005f3a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a0c      	ldr	r2, [pc, #48]	; (8005f70 <UART_InitCallbacksToDefault+0x6c>)
 8005f40:	669a      	str	r2, [r3, #104]	; 0x68

}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	08005e61 	.word	0x08005e61
 8005f54:	08005e4d 	.word	0x08005e4d
 8005f58:	08005e89 	.word	0x08005e89
 8005f5c:	08005e75 	.word	0x08005e75
 8005f60:	08005e9d 	.word	0x08005e9d
 8005f64:	08005eb1 	.word	0x08005eb1
 8005f68:	08005ec5 	.word	0x08005ec5
 8005f6c:	08005ed9 	.word	0x08005ed9
 8005f70:	08005eed 	.word	0x08005eed

08005f74 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b090      	sub	sp, #64	; 0x40
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d137      	bne.n	8006000 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f92:	2200      	movs	r2, #0
 8005f94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3314      	adds	r3, #20
 8005f9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	623b      	str	r3, [r7, #32]
   return(result);
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fac:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3314      	adds	r3, #20
 8005fb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fb6:	633a      	str	r2, [r7, #48]	; 0x30
 8005fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fbe:	e841 2300 	strex	r3, r2, [r1]
 8005fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e5      	bne.n	8005f96 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	330c      	adds	r3, #12
 8005fd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fea:	61fa      	str	r2, [r7, #28]
 8005fec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	69b9      	ldr	r1, [r7, #24]
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	e841 2300 	strex	r3, r2, [r1]
 8005ff6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1e5      	bne.n	8005fca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ffe:	e003      	b.n	8006008 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8006000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006004:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006006:	4798      	blx	r3
}
 8006008:	bf00      	nop
 800600a:	3740      	adds	r7, #64	; 0x40
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006026:	bf00      	nop
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604a:	2b80      	cmp	r3, #128	; 0x80
 800604c:	bf0c      	ite	eq
 800604e:	2301      	moveq	r3, #1
 8006050:	2300      	movne	r3, #0
 8006052:	b2db      	uxtb	r3, r3
 8006054:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b21      	cmp	r3, #33	; 0x21
 8006060:	d108      	bne.n	8006074 <UART_DMAError+0x46>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2200      	movs	r2, #0
 800606c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800606e:	68b8      	ldr	r0, [r7, #8]
 8006070:	f000 f866 	bl	8006140 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607e:	2b40      	cmp	r3, #64	; 0x40
 8006080:	bf0c      	ite	eq
 8006082:	2301      	moveq	r3, #1
 8006084:	2300      	movne	r3, #0
 8006086:	b2db      	uxtb	r3, r3
 8006088:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b22      	cmp	r3, #34	; 0x22
 8006094:	d108      	bne.n	80060a8 <UART_DMAError+0x7a>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2200      	movs	r2, #0
 80060a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80060a2:	68b8      	ldr	r0, [r7, #8]
 80060a4:	f000 f874 	bl	8006190 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	f043 0210 	orr.w	r2, r3, #16
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b8:	68b8      	ldr	r0, [r7, #8]
 80060ba:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	4613      	mov	r3, r2
 80060d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	88fa      	ldrh	r2, [r7, #6]
 80060dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	88fa      	ldrh	r2, [r7, #6]
 80060e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2222      	movs	r2, #34	; 0x22
 80060ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006110:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695a      	ldr	r2, [r3, #20]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f042 0201 	orr.w	r2, r2, #1
 8006120:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0220 	orr.w	r2, r2, #32
 8006130:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006140:	b480      	push	{r7}
 8006142:	b089      	sub	sp, #36	; 0x24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	e853 3f00 	ldrex	r3, [r3]
 8006156:	60bb      	str	r3, [r7, #8]
   return(result);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	330c      	adds	r3, #12
 8006166:	69fa      	ldr	r2, [r7, #28]
 8006168:	61ba      	str	r2, [r7, #24]
 800616a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6979      	ldr	r1, [r7, #20]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	613b      	str	r3, [r7, #16]
   return(result);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e5      	bne.n	8006148 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006184:	bf00      	nop
 8006186:	3724      	adds	r7, #36	; 0x24
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006190:	b480      	push	{r7}
 8006192:	b095      	sub	sp, #84	; 0x54
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	330c      	adds	r3, #12
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061b8:	643a      	str	r2, [r7, #64]	; 0x40
 80061ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e5      	bne.n	8006198 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3314      	adds	r3, #20
 80061d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	61fb      	str	r3, [r7, #28]
   return(result);
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f023 0301 	bic.w	r3, r3, #1
 80061e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3314      	adds	r3, #20
 80061ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061f4:	e841 2300 	strex	r3, r2, [r1]
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e5      	bne.n	80061cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	2b01      	cmp	r3, #1
 8006206:	d119      	bne.n	800623c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	330c      	adds	r3, #12
 800620e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	60bb      	str	r3, [r7, #8]
   return(result);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f023 0310 	bic.w	r3, r3, #16
 800621e:	647b      	str	r3, [r7, #68]	; 0x44
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	330c      	adds	r3, #12
 8006226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006228:	61ba      	str	r2, [r7, #24]
 800622a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	6979      	ldr	r1, [r7, #20]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	e841 2300 	strex	r3, r2, [r1]
 8006234:	613b      	str	r3, [r7, #16]
   return(result);
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1e5      	bne.n	8006208 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	631a      	str	r2, [r3, #48]	; 0x30
}
 800624a:	bf00      	nop
 800624c:	3754      	adds	r7, #84	; 0x54
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006278:	bf00      	nop
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b21      	cmp	r3, #33	; 0x21
 8006292:	d13e      	bne.n	8006312 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800629c:	d114      	bne.n	80062c8 <UART_Transmit_IT+0x48>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d110      	bne.n	80062c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	1c9a      	adds	r2, r3, #2
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	621a      	str	r2, [r3, #32]
 80062c6:	e008      	b.n	80062da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	1c59      	adds	r1, r3, #1
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6211      	str	r1, [r2, #32]
 80062d2:	781a      	ldrb	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	4619      	mov	r1, r3
 80062e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10f      	bne.n	800630e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800630c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	e000      	b.n	8006314 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006312:	2302      	movs	r3, #2
  }
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006336:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b08c      	sub	sp, #48	; 0x30
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b22      	cmp	r3, #34	; 0x22
 8006364:	f040 80ad 	bne.w	80064c2 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006370:	d117      	bne.n	80063a2 <UART_Receive_IT+0x50>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d113      	bne.n	80063a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800637a:	2300      	movs	r3, #0
 800637c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006382:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	b29b      	uxth	r3, r3
 800638c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006390:	b29a      	uxth	r2, r3
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	1c9a      	adds	r2, r3, #2
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	629a      	str	r2, [r3, #40]	; 0x28
 80063a0:	e026      	b.n	80063f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80063a8:	2300      	movs	r3, #0
 80063aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b4:	d007      	beq.n	80063c6 <UART_Receive_IT+0x74>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <UART_Receive_IT+0x82>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d106      	bne.n	80063d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	701a      	strb	r2, [r3, #0]
 80063d2:	e008      	b.n	80063e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	3b01      	subs	r3, #1
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	4619      	mov	r1, r3
 80063fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006400:	2b00      	cmp	r3, #0
 8006402:	d15c      	bne.n	80064be <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0220 	bic.w	r2, r2, #32
 8006412:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	695a      	ldr	r2, [r3, #20]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0201 	bic.w	r2, r2, #1
 8006432:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2220      	movs	r2, #32
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	2b01      	cmp	r3, #1
 8006442:	d136      	bne.n	80064b2 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	330c      	adds	r3, #12
 8006450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	e853 3f00 	ldrex	r3, [r3]
 8006458:	613b      	str	r3, [r7, #16]
   return(result);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f023 0310 	bic.w	r3, r3, #16
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	330c      	adds	r3, #12
 8006468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646a:	623a      	str	r2, [r7, #32]
 800646c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	69f9      	ldr	r1, [r7, #28]
 8006470:	6a3a      	ldr	r2, [r7, #32]
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	61bb      	str	r3, [r7, #24]
   return(result);
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1e5      	bne.n	800644a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	2b10      	cmp	r3, #16
 800648a:	d10a      	bne.n	80064a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80064aa:	4611      	mov	r1, r2
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
 80064b0:	e003      	b.n	80064ba <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e002      	b.n	80064c4 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	e000      	b.n	80064c4 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 80064c2:	2302      	movs	r3, #2
  }
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3730      	adds	r7, #48	; 0x30
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064d0:	b0c0      	sub	sp, #256	; 0x100
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e8:	68d9      	ldr	r1, [r3, #12]
 80064ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	ea40 0301 	orr.w	r3, r0, r1
 80064f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	431a      	orrs	r2, r3
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	431a      	orrs	r2, r3
 800650c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006524:	f021 010c 	bic.w	r1, r1, #12
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006532:	430b      	orrs	r3, r1
 8006534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006546:	6999      	ldr	r1, [r3, #24]
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	ea40 0301 	orr.w	r3, r0, r1
 8006552:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4b8f      	ldr	r3, [pc, #572]	; (8006798 <UART_SetConfig+0x2cc>)
 800655c:	429a      	cmp	r2, r3
 800655e:	d005      	beq.n	800656c <UART_SetConfig+0xa0>
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	4b8d      	ldr	r3, [pc, #564]	; (800679c <UART_SetConfig+0x2d0>)
 8006568:	429a      	cmp	r2, r3
 800656a:	d104      	bne.n	8006576 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800656c:	f7fd fa26 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 8006570:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006574:	e003      	b.n	800657e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006576:	f7fd fa0d 	bl	8003994 <HAL_RCC_GetPCLK1Freq>
 800657a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006588:	f040 810c 	bne.w	80067a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800658c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006590:	2200      	movs	r2, #0
 8006592:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006596:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800659a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800659e:	4622      	mov	r2, r4
 80065a0:	462b      	mov	r3, r5
 80065a2:	1891      	adds	r1, r2, r2
 80065a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80065a6:	415b      	adcs	r3, r3
 80065a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065ae:	4621      	mov	r1, r4
 80065b0:	eb12 0801 	adds.w	r8, r2, r1
 80065b4:	4629      	mov	r1, r5
 80065b6:	eb43 0901 	adc.w	r9, r3, r1
 80065ba:	f04f 0200 	mov.w	r2, #0
 80065be:	f04f 0300 	mov.w	r3, #0
 80065c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065ce:	4690      	mov	r8, r2
 80065d0:	4699      	mov	r9, r3
 80065d2:	4623      	mov	r3, r4
 80065d4:	eb18 0303 	adds.w	r3, r8, r3
 80065d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065dc:	462b      	mov	r3, r5
 80065de:	eb49 0303 	adc.w	r3, r9, r3
 80065e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80065f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80065fa:	460b      	mov	r3, r1
 80065fc:	18db      	adds	r3, r3, r3
 80065fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006600:	4613      	mov	r3, r2
 8006602:	eb42 0303 	adc.w	r3, r2, r3
 8006606:	657b      	str	r3, [r7, #84]	; 0x54
 8006608:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800660c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006610:	f7f9 fde2 	bl	80001d8 <__aeabi_uldivmod>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4b61      	ldr	r3, [pc, #388]	; (80067a0 <UART_SetConfig+0x2d4>)
 800661a:	fba3 2302 	umull	r2, r3, r3, r2
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	011c      	lsls	r4, r3, #4
 8006622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006626:	2200      	movs	r2, #0
 8006628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800662c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006630:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006634:	4642      	mov	r2, r8
 8006636:	464b      	mov	r3, r9
 8006638:	1891      	adds	r1, r2, r2
 800663a:	64b9      	str	r1, [r7, #72]	; 0x48
 800663c:	415b      	adcs	r3, r3
 800663e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006640:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006644:	4641      	mov	r1, r8
 8006646:	eb12 0a01 	adds.w	sl, r2, r1
 800664a:	4649      	mov	r1, r9
 800664c:	eb43 0b01 	adc.w	fp, r3, r1
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	f04f 0300 	mov.w	r3, #0
 8006658:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800665c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006660:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006664:	4692      	mov	sl, r2
 8006666:	469b      	mov	fp, r3
 8006668:	4643      	mov	r3, r8
 800666a:	eb1a 0303 	adds.w	r3, sl, r3
 800666e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006672:	464b      	mov	r3, r9
 8006674:	eb4b 0303 	adc.w	r3, fp, r3
 8006678:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006688:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800668c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006690:	460b      	mov	r3, r1
 8006692:	18db      	adds	r3, r3, r3
 8006694:	643b      	str	r3, [r7, #64]	; 0x40
 8006696:	4613      	mov	r3, r2
 8006698:	eb42 0303 	adc.w	r3, r2, r3
 800669c:	647b      	str	r3, [r7, #68]	; 0x44
 800669e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80066a6:	f7f9 fd97 	bl	80001d8 <__aeabi_uldivmod>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4611      	mov	r1, r2
 80066b0:	4b3b      	ldr	r3, [pc, #236]	; (80067a0 <UART_SetConfig+0x2d4>)
 80066b2:	fba3 2301 	umull	r2, r3, r3, r1
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	2264      	movs	r2, #100	; 0x64
 80066ba:	fb02 f303 	mul.w	r3, r2, r3
 80066be:	1acb      	subs	r3, r1, r3
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80066c6:	4b36      	ldr	r3, [pc, #216]	; (80067a0 <UART_SetConfig+0x2d4>)
 80066c8:	fba3 2302 	umull	r2, r3, r3, r2
 80066cc:	095b      	lsrs	r3, r3, #5
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066d4:	441c      	add	r4, r3
 80066d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80066e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80066e8:	4642      	mov	r2, r8
 80066ea:	464b      	mov	r3, r9
 80066ec:	1891      	adds	r1, r2, r2
 80066ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80066f0:	415b      	adcs	r3, r3
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066f8:	4641      	mov	r1, r8
 80066fa:	1851      	adds	r1, r2, r1
 80066fc:	6339      	str	r1, [r7, #48]	; 0x30
 80066fe:	4649      	mov	r1, r9
 8006700:	414b      	adcs	r3, r1
 8006702:	637b      	str	r3, [r7, #52]	; 0x34
 8006704:	f04f 0200 	mov.w	r2, #0
 8006708:	f04f 0300 	mov.w	r3, #0
 800670c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006710:	4659      	mov	r1, fp
 8006712:	00cb      	lsls	r3, r1, #3
 8006714:	4651      	mov	r1, sl
 8006716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800671a:	4651      	mov	r1, sl
 800671c:	00ca      	lsls	r2, r1, #3
 800671e:	4610      	mov	r0, r2
 8006720:	4619      	mov	r1, r3
 8006722:	4603      	mov	r3, r0
 8006724:	4642      	mov	r2, r8
 8006726:	189b      	adds	r3, r3, r2
 8006728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800672c:	464b      	mov	r3, r9
 800672e:	460a      	mov	r2, r1
 8006730:	eb42 0303 	adc.w	r3, r2, r3
 8006734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006744:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800674c:	460b      	mov	r3, r1
 800674e:	18db      	adds	r3, r3, r3
 8006750:	62bb      	str	r3, [r7, #40]	; 0x28
 8006752:	4613      	mov	r3, r2
 8006754:	eb42 0303 	adc.w	r3, r2, r3
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800675a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800675e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006762:	f7f9 fd39 	bl	80001d8 <__aeabi_uldivmod>
 8006766:	4602      	mov	r2, r0
 8006768:	460b      	mov	r3, r1
 800676a:	4b0d      	ldr	r3, [pc, #52]	; (80067a0 <UART_SetConfig+0x2d4>)
 800676c:	fba3 1302 	umull	r1, r3, r3, r2
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	2164      	movs	r1, #100	; 0x64
 8006774:	fb01 f303 	mul.w	r3, r1, r3
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	3332      	adds	r3, #50	; 0x32
 800677e:	4a08      	ldr	r2, [pc, #32]	; (80067a0 <UART_SetConfig+0x2d4>)
 8006780:	fba2 2303 	umull	r2, r3, r2, r3
 8006784:	095b      	lsrs	r3, r3, #5
 8006786:	f003 0207 	and.w	r2, r3, #7
 800678a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4422      	add	r2, r4
 8006792:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006794:	e105      	b.n	80069a2 <UART_SetConfig+0x4d6>
 8006796:	bf00      	nop
 8006798:	40011000 	.word	0x40011000
 800679c:	40011400 	.word	0x40011400
 80067a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067a8:	2200      	movs	r2, #0
 80067aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80067b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80067b6:	4642      	mov	r2, r8
 80067b8:	464b      	mov	r3, r9
 80067ba:	1891      	adds	r1, r2, r2
 80067bc:	6239      	str	r1, [r7, #32]
 80067be:	415b      	adcs	r3, r3
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
 80067c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067c6:	4641      	mov	r1, r8
 80067c8:	1854      	adds	r4, r2, r1
 80067ca:	4649      	mov	r1, r9
 80067cc:	eb43 0501 	adc.w	r5, r3, r1
 80067d0:	f04f 0200 	mov.w	r2, #0
 80067d4:	f04f 0300 	mov.w	r3, #0
 80067d8:	00eb      	lsls	r3, r5, #3
 80067da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067de:	00e2      	lsls	r2, r4, #3
 80067e0:	4614      	mov	r4, r2
 80067e2:	461d      	mov	r5, r3
 80067e4:	4643      	mov	r3, r8
 80067e6:	18e3      	adds	r3, r4, r3
 80067e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067ec:	464b      	mov	r3, r9
 80067ee:	eb45 0303 	adc.w	r3, r5, r3
 80067f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006802:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006806:	f04f 0200 	mov.w	r2, #0
 800680a:	f04f 0300 	mov.w	r3, #0
 800680e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006812:	4629      	mov	r1, r5
 8006814:	008b      	lsls	r3, r1, #2
 8006816:	4621      	mov	r1, r4
 8006818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800681c:	4621      	mov	r1, r4
 800681e:	008a      	lsls	r2, r1, #2
 8006820:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006824:	f7f9 fcd8 	bl	80001d8 <__aeabi_uldivmod>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4b60      	ldr	r3, [pc, #384]	; (80069b0 <UART_SetConfig+0x4e4>)
 800682e:	fba3 2302 	umull	r2, r3, r3, r2
 8006832:	095b      	lsrs	r3, r3, #5
 8006834:	011c      	lsls	r4, r3, #4
 8006836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800683a:	2200      	movs	r2, #0
 800683c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006840:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006844:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006848:	4642      	mov	r2, r8
 800684a:	464b      	mov	r3, r9
 800684c:	1891      	adds	r1, r2, r2
 800684e:	61b9      	str	r1, [r7, #24]
 8006850:	415b      	adcs	r3, r3
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006858:	4641      	mov	r1, r8
 800685a:	1851      	adds	r1, r2, r1
 800685c:	6139      	str	r1, [r7, #16]
 800685e:	4649      	mov	r1, r9
 8006860:	414b      	adcs	r3, r1
 8006862:	617b      	str	r3, [r7, #20]
 8006864:	f04f 0200 	mov.w	r2, #0
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006870:	4659      	mov	r1, fp
 8006872:	00cb      	lsls	r3, r1, #3
 8006874:	4651      	mov	r1, sl
 8006876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800687a:	4651      	mov	r1, sl
 800687c:	00ca      	lsls	r2, r1, #3
 800687e:	4610      	mov	r0, r2
 8006880:	4619      	mov	r1, r3
 8006882:	4603      	mov	r3, r0
 8006884:	4642      	mov	r2, r8
 8006886:	189b      	adds	r3, r3, r2
 8006888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800688c:	464b      	mov	r3, r9
 800688e:	460a      	mov	r2, r1
 8006890:	eb42 0303 	adc.w	r3, r2, r3
 8006894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80068a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80068b0:	4649      	mov	r1, r9
 80068b2:	008b      	lsls	r3, r1, #2
 80068b4:	4641      	mov	r1, r8
 80068b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068ba:	4641      	mov	r1, r8
 80068bc:	008a      	lsls	r2, r1, #2
 80068be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80068c2:	f7f9 fc89 	bl	80001d8 <__aeabi_uldivmod>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4b39      	ldr	r3, [pc, #228]	; (80069b0 <UART_SetConfig+0x4e4>)
 80068cc:	fba3 1302 	umull	r1, r3, r3, r2
 80068d0:	095b      	lsrs	r3, r3, #5
 80068d2:	2164      	movs	r1, #100	; 0x64
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	3332      	adds	r3, #50	; 0x32
 80068de:	4a34      	ldr	r2, [pc, #208]	; (80069b0 <UART_SetConfig+0x4e4>)
 80068e0:	fba2 2303 	umull	r2, r3, r2, r3
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068ea:	441c      	add	r4, r3
 80068ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068f0:	2200      	movs	r2, #0
 80068f2:	673b      	str	r3, [r7, #112]	; 0x70
 80068f4:	677a      	str	r2, [r7, #116]	; 0x74
 80068f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80068fa:	4642      	mov	r2, r8
 80068fc:	464b      	mov	r3, r9
 80068fe:	1891      	adds	r1, r2, r2
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	415b      	adcs	r3, r3
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800690a:	4641      	mov	r1, r8
 800690c:	1851      	adds	r1, r2, r1
 800690e:	6039      	str	r1, [r7, #0]
 8006910:	4649      	mov	r1, r9
 8006912:	414b      	adcs	r3, r1
 8006914:	607b      	str	r3, [r7, #4]
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	f04f 0300 	mov.w	r3, #0
 800691e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006922:	4659      	mov	r1, fp
 8006924:	00cb      	lsls	r3, r1, #3
 8006926:	4651      	mov	r1, sl
 8006928:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800692c:	4651      	mov	r1, sl
 800692e:	00ca      	lsls	r2, r1, #3
 8006930:	4610      	mov	r0, r2
 8006932:	4619      	mov	r1, r3
 8006934:	4603      	mov	r3, r0
 8006936:	4642      	mov	r2, r8
 8006938:	189b      	adds	r3, r3, r2
 800693a:	66bb      	str	r3, [r7, #104]	; 0x68
 800693c:	464b      	mov	r3, r9
 800693e:	460a      	mov	r2, r1
 8006940:	eb42 0303 	adc.w	r3, r2, r3
 8006944:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	663b      	str	r3, [r7, #96]	; 0x60
 8006950:	667a      	str	r2, [r7, #100]	; 0x64
 8006952:	f04f 0200 	mov.w	r2, #0
 8006956:	f04f 0300 	mov.w	r3, #0
 800695a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800695e:	4649      	mov	r1, r9
 8006960:	008b      	lsls	r3, r1, #2
 8006962:	4641      	mov	r1, r8
 8006964:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006968:	4641      	mov	r1, r8
 800696a:	008a      	lsls	r2, r1, #2
 800696c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006970:	f7f9 fc32 	bl	80001d8 <__aeabi_uldivmod>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	4b0d      	ldr	r3, [pc, #52]	; (80069b0 <UART_SetConfig+0x4e4>)
 800697a:	fba3 1302 	umull	r1, r3, r3, r2
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	2164      	movs	r1, #100	; 0x64
 8006982:	fb01 f303 	mul.w	r3, r1, r3
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	3332      	adds	r3, #50	; 0x32
 800698c:	4a08      	ldr	r2, [pc, #32]	; (80069b0 <UART_SetConfig+0x4e4>)
 800698e:	fba2 2303 	umull	r2, r3, r2, r3
 8006992:	095b      	lsrs	r3, r3, #5
 8006994:	f003 020f 	and.w	r2, r3, #15
 8006998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4422      	add	r2, r4
 80069a0:	609a      	str	r2, [r3, #8]
}
 80069a2:	bf00      	nop
 80069a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80069a8:	46bd      	mov	sp, r7
 80069aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ae:	bf00      	nop
 80069b0:	51eb851f 	.word	0x51eb851f

080069b4 <__libc_init_array>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	4d0d      	ldr	r5, [pc, #52]	; (80069ec <__libc_init_array+0x38>)
 80069b8:	4c0d      	ldr	r4, [pc, #52]	; (80069f0 <__libc_init_array+0x3c>)
 80069ba:	1b64      	subs	r4, r4, r5
 80069bc:	10a4      	asrs	r4, r4, #2
 80069be:	2600      	movs	r6, #0
 80069c0:	42a6      	cmp	r6, r4
 80069c2:	d109      	bne.n	80069d8 <__libc_init_array+0x24>
 80069c4:	4d0b      	ldr	r5, [pc, #44]	; (80069f4 <__libc_init_array+0x40>)
 80069c6:	4c0c      	ldr	r4, [pc, #48]	; (80069f8 <__libc_init_array+0x44>)
 80069c8:	f000 f82e 	bl	8006a28 <_init>
 80069cc:	1b64      	subs	r4, r4, r5
 80069ce:	10a4      	asrs	r4, r4, #2
 80069d0:	2600      	movs	r6, #0
 80069d2:	42a6      	cmp	r6, r4
 80069d4:	d105      	bne.n	80069e2 <__libc_init_array+0x2e>
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069dc:	4798      	blx	r3
 80069de:	3601      	adds	r6, #1
 80069e0:	e7ee      	b.n	80069c0 <__libc_init_array+0xc>
 80069e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e6:	4798      	blx	r3
 80069e8:	3601      	adds	r6, #1
 80069ea:	e7f2      	b.n	80069d2 <__libc_init_array+0x1e>
 80069ec:	08006a68 	.word	0x08006a68
 80069f0:	08006a68 	.word	0x08006a68
 80069f4:	08006a68 	.word	0x08006a68
 80069f8:	08006a6c 	.word	0x08006a6c

080069fc <memcpy>:
 80069fc:	440a      	add	r2, r1
 80069fe:	4291      	cmp	r1, r2
 8006a00:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a04:	d100      	bne.n	8006a08 <memcpy+0xc>
 8006a06:	4770      	bx	lr
 8006a08:	b510      	push	{r4, lr}
 8006a0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a12:	4291      	cmp	r1, r2
 8006a14:	d1f9      	bne.n	8006a0a <memcpy+0xe>
 8006a16:	bd10      	pop	{r4, pc}

08006a18 <memset>:
 8006a18:	4402      	add	r2, r0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d100      	bne.n	8006a22 <memset+0xa>
 8006a20:	4770      	bx	lr
 8006a22:	f803 1b01 	strb.w	r1, [r3], #1
 8006a26:	e7f9      	b.n	8006a1c <memset+0x4>

08006a28 <_init>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	bf00      	nop
 8006a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2e:	bc08      	pop	{r3}
 8006a30:	469e      	mov	lr, r3
 8006a32:	4770      	bx	lr

08006a34 <_fini>:
 8006a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a36:	bf00      	nop
 8006a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a3a:	bc08      	pop	{r3}
 8006a3c:	469e      	mov	lr, r3
 8006a3e:	4770      	bx	lr
