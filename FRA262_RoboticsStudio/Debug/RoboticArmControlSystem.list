
RoboticArmControlSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006874  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006a10  08006a10  00016a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a60  08006a60  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a60  08006a60  00016a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a68  08006a68  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a68  08006a68  00016a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000008c  08006afc  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08006afc  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2b2  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e88  00000000  00000000  0002f36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  000311f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00031fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001754f  00000000  00000000  00032cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1ec  00000000  00000000  0004a1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009982a  00000000  00000000  000593eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2c15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f00  00000000  00000000  000f2c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000008c 	.word	0x2000008c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080069f4 	.word	0x080069f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000090 	.word	0x20000090
 80001d4:	080069f4 	.word	0x080069f4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b974 	b.w	8000e50 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	4604      	mov	r4, r0
 8000b88:	468e      	mov	lr, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d14d      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8e:	428a      	cmp	r2, r1
 8000b90:	4694      	mov	ip, r2
 8000b92:	d969      	bls.n	8000c68 <__udivmoddi4+0xe8>
 8000b94:	fab2 f282 	clz	r2, r2
 8000b98:	b152      	cbz	r2, 8000bb0 <__udivmoddi4+0x30>
 8000b9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b9e:	f1c2 0120 	rsb	r1, r2, #32
 8000ba2:	fa20 f101 	lsr.w	r1, r0, r1
 8000ba6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000baa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bae:	4094      	lsls	r4, r2
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	0c21      	lsrs	r1, r4, #16
 8000bb6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bba:	fa1f f78c 	uxth.w	r7, ip
 8000bbe:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bc6:	fb06 f107 	mul.w	r1, r6, r7
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bd6:	f080 811f 	bcs.w	8000e18 <__udivmoddi4+0x298>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 811c 	bls.w	8000e18 <__udivmoddi4+0x298>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 f707 	mul.w	r7, r0, r7
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x92>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c04:	f080 810a 	bcs.w	8000e1c <__udivmoddi4+0x29c>
 8000c08:	42a7      	cmp	r7, r4
 8000c0a:	f240 8107 	bls.w	8000e1c <__udivmoddi4+0x29c>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	1be4      	subs	r4, r4, r7
 8000c18:	2600      	movs	r6, #0
 8000c1a:	b11d      	cbz	r5, 8000c24 <__udivmoddi4+0xa4>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c5 4300 	strd	r4, r3, [r5]
 8000c24:	4631      	mov	r1, r6
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xc2>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80ef 	beq.w	8000e12 <__udivmoddi4+0x292>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x160>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd4>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80f9 	bhi.w	8000e46 <__udivmoddi4+0x2c6>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	469e      	mov	lr, r3
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa4>
 8000c62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xec>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 8092 	bne.w	8000d9a <__udivmoddi4+0x21a>
 8000c76:	eba1 010c 	sub.w	r1, r1, ip
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2601      	movs	r6, #1
 8000c84:	0c20      	lsrs	r0, r4, #16
 8000c86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c92:	fb0e f003 	mul.w	r0, lr, r3
 8000c96:	4288      	cmp	r0, r1
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x12c>
 8000c9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x12a>
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2c0>
 8000caa:	4643      	mov	r3, r8
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x156>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x154>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2ca>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cde:	e79c      	b.n	8000c1a <__udivmoddi4+0x9a>
 8000ce0:	f1c6 0720 	rsb	r7, r6, #32
 8000ce4:	40b3      	lsls	r3, r6
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	431c      	orrs	r4, r3
 8000cf8:	40f9      	lsrs	r1, r7
 8000cfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000d02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d14:	fb08 f00e 	mul.w	r0, r8, lr
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b8>
 8000d20:	eb1c 0101 	adds.w	r1, ip, r1
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2bc>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2bc>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	1a09      	subs	r1, r1, r0
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d40:	fb09 1110 	mls	r1, r9, r0, r1
 8000d44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	458e      	cmp	lr, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1e2>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5a:	458e      	cmp	lr, r1
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2b4>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d66:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6a:	eba1 010e 	sub.w	r1, r1, lr
 8000d6e:	42a1      	cmp	r1, r4
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46a6      	mov	lr, r4
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x2a4>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x2a0>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x212>
 8000d7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d82:	fa01 f707 	lsl.w	r7, r1, r7
 8000d86:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8a:	40f1      	lsrs	r1, r6
 8000d8c:	431f      	orrs	r7, r3
 8000d8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	f1c2 0320 	rsb	r3, r2, #32
 8000d9e:	40d8      	lsrs	r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa21 f303 	lsr.w	r3, r1, r3
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4301      	orrs	r1, r0
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dbc:	0c0b      	lsrs	r3, r1, #16
 8000dbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000dc6:	429e      	cmp	r6, r3
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x260>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b8>
 8000dd8:	429e      	cmp	r6, r3
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b8>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1b9b      	subs	r3, r3, r6
 8000de2:	b289      	uxth	r1, r1
 8000de4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb06 f30e 	mul.w	r3, r6, lr
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x28a>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000e06:	3e02      	subs	r6, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0x104>
 8000e12:	462e      	mov	r6, r5
 8000e14:	4628      	mov	r0, r5
 8000e16:	e705      	b.n	8000c24 <__udivmoddi4+0xa4>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	e6e3      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6f8      	b.n	8000c12 <__udivmoddi4+0x92>
 8000e20:	454b      	cmp	r3, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f8>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f8>
 8000e30:	4646      	mov	r6, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x28a>
 8000e34:	4620      	mov	r0, r4
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1e2>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x260>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b8>
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x12c>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e709      	b.n	8000c5e <__udivmoddi4+0xde>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x156>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e58:	f001 faf6 	bl	8002448 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e5c:	f000 f83e 	bl	8000edc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e60:	f000 fa72 	bl	8001348 <MX_GPIO_Init>
	MX_DMA_Init();
 8000e64:	f000 fa50 	bl	8001308 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000e68:	f000 fa24 	bl	80012b4 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8000e6c:	f000 f8fe 	bl	800106c <MX_TIM1_Init>
	MX_TIM5_Init();
 8000e70:	f000 f9cc 	bl	800120c <MX_TIM5_Init>
	MX_TIM2_Init();
 8000e74:	f000 f97e 	bl	8001174 <MX_TIM2_Init>
	MX_ADC1_Init();
 8000e78:	f000 f898 	bl	8000fac <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000e7c:	2104      	movs	r1, #4
 8000e7e:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <main+0x70>)
 8000e80:	f003 fcc0 	bl	8004804 <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start(&htim1);
 8000e84:	4810      	ldr	r0, [pc, #64]	; (8000ec8 <main+0x74>)
 8000e86:	f003 fa5b 	bl	8004340 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	480e      	ldr	r0, [pc, #56]	; (8000ec8 <main+0x74>)
 8000e8e:	f003 fb63 	bl	8004558 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 8000e92:	480e      	ldr	r0, [pc, #56]	; (8000ecc <main+0x78>)
 8000e94:	f003 faae 	bl	80043f4 <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, (uint16_t*) buffer, 20);
 8000e98:	2214      	movs	r2, #20
 8000e9a:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <main+0x7c>)
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <main+0x80>)
 8000e9e:	f001 fb89 	bl	80025b4 <HAL_ADC_Start_DMA>

	calibrateTray();
 8000ea2:	f000 fb23 	bl	80014ec <calibrateTray>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		static uint32_t timestamp = 0;

		if (HAL_GetTick() >= timestamp) {
 8000ea6:	f001 fb35 	bl	8002514 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <main+0x84>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d3f8      	bcc.n	8000ea6 <main+0x52>
			timestamp = HAL_GetTick() + 10; // 50 mill seconds
 8000eb4:	f001 fb2e 	bl	8002514 <HAL_GetTick>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	330a      	adds	r3, #10
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <main+0x84>)
 8000ebe:	6013      	str	r3, [r2, #0]
	while (1) {
 8000ec0:	e7f1      	b.n	8000ea6 <main+0x52>
 8000ec2:	bf00      	nop
 8000ec4:	200001e0 	.word	0x200001e0
 8000ec8:	20000150 	.word	0x20000150
 8000ecc:	20000198 	.word	0x20000198
 8000ed0:	2000026c 	.word	0x2000026c
 8000ed4:	200000a8 	.word	0x200000a8
 8000ed8:	20000354 	.word	0x20000354

08000edc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b094      	sub	sp, #80	; 0x50
 8000ee0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	2230      	movs	r2, #48	; 0x30
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 fe5e 	bl	8005bac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <SystemClock_Config+0xc8>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	4a26      	ldr	r2, [pc, #152]	; (8000fa4 <SystemClock_Config+0xc8>)
 8000f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <SystemClock_Config+0xc8>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <SystemClock_Config+0xcc>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a20      	ldr	r2, [pc, #128]	; (8000fa8 <SystemClock_Config+0xcc>)
 8000f26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <SystemClock_Config+0xcc>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f40:	2310      	movs	r3, #16
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f44:	2302      	movs	r3, #2
 8000f46:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000f4c:	2308      	movs	r3, #8
 8000f4e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8000f50:	2364      	movs	r3, #100	; 0x64
 8000f52:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f5c:	f107 0320 	add.w	r3, r7, #32
 8000f60:	4618      	mov	r0, r3
 8000f62:	f002 fd05 	bl	8003970 <HAL_RCC_OscConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0x94>
		Error_Handler();
 8000f6c:	f001 f83a 	bl	8001fe4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f70:	230f      	movs	r3, #15
 8000f72:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f74:	2302      	movs	r3, #2
 8000f76:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f80:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	2103      	movs	r1, #3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 ff67 	bl	8003e60 <HAL_RCC_ClockConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0xc0>
		Error_Handler();
 8000f98:	f001 f824 	bl	8001fe4 <Error_Handler>
	}
}
 8000f9c:	bf00      	nop
 8000f9e:	3750      	adds	r7, #80	; 0x50
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40007000 	.word	0x40007000

08000fac <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <MX_ADC1_Init+0xb4>)
 8000fc0:	4a28      	ldr	r2, [pc, #160]	; (8001064 <MX_ADC1_Init+0xb8>)
 8000fc2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <MX_ADC1_Init+0xb4>)
 8000fc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fca:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <MX_ADC1_Init+0xb4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <MX_ADC1_Init+0xb4>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_ADC1_Init+0xb4>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <MX_ADC1_Init+0xb4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_ADC1_Init+0xb4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_ADC1_Init+0xb4>)
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <MX_ADC1_Init+0xbc>)
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_ADC1_Init+0xb4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_ADC1_Init+0xb4>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_ADC1_Init+0xb4>)
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <MX_ADC1_Init+0xb4>)
 8001008:	2201      	movs	r2, #1
 800100a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800100c:	4814      	ldr	r0, [pc, #80]	; (8001060 <MX_ADC1_Init+0xb4>)
 800100e:	f001 fa8d 	bl	800252c <HAL_ADC_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC1_Init+0x70>
		Error_Handler();
 8001018:	f000 ffe4 	bl	8001fe4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 800101c:	230d      	movs	r3, #13
 800101e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001020:	2301      	movs	r3, #1
 8001022:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001024:	2303      	movs	r3, #3
 8001026:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001028:	463b      	mov	r3, r7
 800102a:	4619      	mov	r1, r3
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <MX_ADC1_Init+0xb4>)
 800102e:	f001 fbcf 	bl	80027d0 <HAL_ADC_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x90>
		Error_Handler();
 8001038:	f000 ffd4 	bl	8001fe4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 800103c:	230a      	movs	r3, #10
 800103e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001044:	463b      	mov	r3, r7
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_ADC1_Init+0xb4>)
 800104a:	f001 fbc1 	bl	80027d0 <HAL_ADC_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0xac>
		Error_Handler();
 8001054:	f000 ffc6 	bl	8001fe4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200000a8 	.word	0x200000a8
 8001064:	40012000 	.word	0x40012000
 8001068:	0f000001 	.word	0x0f000001

0800106c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b092      	sub	sp, #72	; 0x48
 8001070:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001072:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800107c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2220      	movs	r2, #32
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f004 fd88 	bl	8005bac <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800109c:	4b33      	ldr	r3, [pc, #204]	; (800116c <MX_TIM1_Init+0x100>)
 800109e:	4a34      	ldr	r2, [pc, #208]	; (8001170 <MX_TIM1_Init+0x104>)
 80010a0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 99;
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <MX_TIM1_Init+0x100>)
 80010a4:	2263      	movs	r2, #99	; 0x63
 80010a6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b30      	ldr	r3, [pc, #192]	; (800116c <MX_TIM1_Init+0x100>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <MX_TIM1_Init+0x100>)
 80010b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010b4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b2d      	ldr	r3, [pc, #180]	; (800116c <MX_TIM1_Init+0x100>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <MX_TIM1_Init+0x100>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <MX_TIM1_Init+0x100>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80010c8:	4828      	ldr	r0, [pc, #160]	; (800116c <MX_TIM1_Init+0x100>)
 80010ca:	f003 f9f5 	bl	80044b8 <HAL_TIM_PWM_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0x6c>
		Error_Handler();
 80010d4:	f000 ff86 	bl	8001fe4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80010e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010e4:	4619      	mov	r1, r3
 80010e6:	4821      	ldr	r0, [pc, #132]	; (800116c <MX_TIM1_Init+0x100>)
 80010e8:	f004 f9a0 	bl	800542c <HAL_TIMEx_MasterConfigSynchronization>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80010f2:	f000 ff77 	bl	8001fe4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f6:	2360      	movs	r3, #96	; 0x60
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001102:	2300      	movs	r3, #0
 8001104:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	4814      	ldr	r0, [pc, #80]	; (800116c <MX_TIM1_Init+0x100>)
 800111c:	f003 fd08 	bl	8004b30 <HAL_TIM_PWM_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 8001126:	f000 ff5d 	bl	8001fe4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800113e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001142:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	4619      	mov	r1, r3
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <MX_TIM1_Init+0x100>)
 800114e:	f004 f9db 	bl	8005508 <HAL_TIMEx_ConfigBreakDeadTime>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 8001158:	f000 ff44 	bl	8001fe4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <MX_TIM1_Init+0x100>)
 800115e:	f001 f877 	bl	8002250 <HAL_TIM_MspPostInit>

}
 8001162:	bf00      	nop
 8001164:	3748      	adds	r7, #72	; 0x48
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000150 	.word	0x20000150
 8001170:	40010000 	.word	0x40010000

08001174 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001188:	463b      	mov	r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_TIM2_Init+0x94>)
 8001192:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001196:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9999;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_TIM2_Init+0x94>)
 800119a:	f242 720f 	movw	r2, #9999	; 0x270f
 800119e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MX_TIM2_Init+0x94>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_TIM2_Init+0x94>)
 80011a8:	2209      	movs	r2, #9
 80011aa:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_TIM2_Init+0x94>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_TIM2_Init+0x94>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80011b8:	4813      	ldr	r0, [pc, #76]	; (8001208 <MX_TIM2_Init+0x94>)
 80011ba:	f003 f871 	bl	80042a0 <HAL_TIM_Base_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0x54>
		Error_Handler();
 80011c4:	f000 ff0e 	bl	8001fe4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011cc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	4619      	mov	r1, r3
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <MX_TIM2_Init+0x94>)
 80011d6:	f003 fd6d 	bl	8004cb4 <HAL_TIM_ConfigClockSource>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM2_Init+0x70>
		Error_Handler();
 80011e0:	f000 ff00 	bl	8001fe4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_TIM2_Init+0x94>)
 80011f2:	f004 f91b 	bl	800542c <HAL_TIMEx_MasterConfigSynchronization>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80011fc:	f000 fef2 	bl	8001fe4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000198 	.word	0x20000198

0800120c <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	; 0x30
 8001210:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2224      	movs	r2, #36	; 0x24
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f004 fcc6 	bl	8005bac <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <MX_TIM5_Init+0xa0>)
 800122a:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <MX_TIM5_Init+0xa4>)
 800122c:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_TIM5_Init+0xa0>)
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <MX_TIM5_Init+0xa0>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_TIM5_Init+0xa0>)
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_TIM5_Init+0xa0>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_TIM5_Init+0xa0>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800124e:	2303      	movs	r3, #3
 8001250:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001256:	2301      	movs	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001266:	2301      	movs	r3, #1
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	4619      	mov	r1, r3
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <MX_TIM5_Init+0xa0>)
 800127a:	f003 fa1d 	bl	80046b8 <HAL_TIM_Encoder_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM5_Init+0x7c>
		Error_Handler();
 8001284:	f000 feae 	bl	8001fe4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_TIM5_Init+0xa0>)
 8001296:	f004 f8c9 	bl	800542c <HAL_TIMEx_MasterConfigSynchronization>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM5_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80012a0:	f000 fea0 	bl	8001fe4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3730      	adds	r7, #48	; 0x30
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200001e0 	.word	0x200001e0
 80012b0:	40000c00 	.word	0x40000c00

080012b4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <MX_USART2_UART_Init+0x50>)
 80012bc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ec:	f004 f972 	bl	80055d4 <HAL_UART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80012f6:	f000 fe75 	bl	8001fe4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000228 	.word	0x20000228
 8001304:	40004400 	.word	0x40004400

08001308 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_DMA_Init+0x3c>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <MX_DMA_Init+0x3c>)
 8001318:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_DMA_Init+0x3c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2038      	movs	r0, #56	; 0x38
 8001330:	f001 fdd9 	bl	8002ee6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001334:	2038      	movs	r0, #56	; 0x38
 8001336:	f001 fdf2 	bl	8002f1e <HAL_NVIC_EnableIRQ>

}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800

08001348 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b52      	ldr	r3, [pc, #328]	; (80014ac <MX_GPIO_Init+0x164>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a51      	ldr	r2, [pc, #324]	; (80014ac <MX_GPIO_Init+0x164>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b4f      	ldr	r3, [pc, #316]	; (80014ac <MX_GPIO_Init+0x164>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b4b      	ldr	r3, [pc, #300]	; (80014ac <MX_GPIO_Init+0x164>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a4a      	ldr	r2, [pc, #296]	; (80014ac <MX_GPIO_Init+0x164>)
 8001384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b48      	ldr	r3, [pc, #288]	; (80014ac <MX_GPIO_Init+0x164>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	4b44      	ldr	r3, [pc, #272]	; (80014ac <MX_GPIO_Init+0x164>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a43      	ldr	r2, [pc, #268]	; (80014ac <MX_GPIO_Init+0x164>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b41      	ldr	r3, [pc, #260]	; (80014ac <MX_GPIO_Init+0x164>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <MX_GPIO_Init+0x164>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a3c      	ldr	r2, [pc, #240]	; (80014ac <MX_GPIO_Init+0x164>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b3a      	ldr	r3, [pc, #232]	; (80014ac <MX_GPIO_Init+0x164>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2120      	movs	r1, #32
 80013d2:	4837      	ldr	r0, [pc, #220]	; (80014b0 <MX_GPIO_Init+0x168>)
 80013d4:	f002 fab2 	bl	800393c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_11 | GPIO_PIN_12,
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 80013de:	4835      	ldr	r0, [pc, #212]	; (80014b4 <MX_GPIO_Init+0x16c>)
 80013e0:	f002 faac 	bl	800393c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80013e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	482e      	ldr	r0, [pc, #184]	; (80014b4 <MX_GPIO_Init+0x16c>)
 80013fc:	f002 f91a 	bl	8003634 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC2 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_10;
 8001400:	f240 4304 	movw	r3, #1028	; 0x404
 8001404:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4827      	ldr	r0, [pc, #156]	; (80014b4 <MX_GPIO_Init+0x16c>)
 8001416:	f002 f90d 	bl	8003634 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800141a:	2310      	movs	r3, #16
 800141c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4820      	ldr	r0, [pc, #128]	; (80014b0 <MX_GPIO_Init+0x168>)
 800142e:	f002 f901 	bl	8003634 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001432:	2320      	movs	r3, #32
 8001434:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	4819      	ldr	r0, [pc, #100]	; (80014b0 <MX_GPIO_Init+0x168>)
 800144a:	f002 f8f3 	bl	8003634 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB7 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_9;
 800144e:	f240 2381 	movw	r3, #641	; 0x281
 8001452:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	4815      	ldr	r0, [pc, #84]	; (80014b8 <MX_GPIO_Init+0x170>)
 8001464:	f002 f8e6 	bl	8003634 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001468:	2340      	movs	r3, #64	; 0x40
 800146a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_GPIO_Init+0x16c>)
 8001480:	f002 f8d8 	bl	8003634 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC11 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8001484:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001488:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800148a:	2311      	movs	r3, #17
 800148c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_GPIO_Init+0x16c>)
 800149e:	f002 f8c9 	bl	8003634 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020800 	.word	0x40020800
 80014b8:	40020400 	.word	0x40020400

080014bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d107      	bne.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x20>

		readEncoder();
 80014cc:	f000 f880 	bl	80015d0 <readEncoder>
		//positionControl();
		//photoDetect();

		if (startTraj)
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			cascadePIDControl();
 80014d8:	f000 f88c 	bl	80015f4 <cascadePIDControl>
		}
	}
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000198 	.word	0x20000198
 80014e8:	20000340 	.word	0x20000340

080014ec <calibrateTray>:

void calibrateTray()
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
	trajPath[0].yPath = 0;
 80014f0:	4b23      	ldr	r3, [pc, #140]	; (8001580 <calibrateTray+0x94>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	605a      	str	r2, [r3, #4]
	trajPath[1].yPath = 500;
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <calibrateTray+0x94>)
 80014f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014fc:	60da      	str	r2, [r3, #12]
	trajPath[2].yPath = 200;
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <calibrateTray+0x94>)
 8001500:	22c8      	movs	r2, #200	; 0xc8
 8001502:	615a      	str	r2, [r3, #20]
	trajPath[3].yPath = 400;
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <calibrateTray+0x94>)
 8001506:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800150a:	61da      	str	r2, [r3, #28]
	trajPath[4].yPath = 500;
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <calibrateTray+0x94>)
 800150e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
	trajPath[5].yPath = 600;
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <calibrateTray+0x94>)
 8001516:	f44f 7216 	mov.w	r2, #600	; 0x258
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
	trajPath[6].yPath = 300;
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <calibrateTray+0x94>)
 800151e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001522:	635a      	str	r2, [r3, #52]	; 0x34
	trajPath[7].yPath = 200;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <calibrateTray+0x94>)
 8001526:	22c8      	movs	r2, #200	; 0xc8
 8001528:	63da      	str	r2, [r3, #60]	; 0x3c
	trajPath[8].yPath = 100;
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <calibrateTray+0x94>)
 800152c:	2264      	movs	r2, #100	; 0x64
 800152e:	645a      	str	r2, [r3, #68]	; 0x44
	trajPath[9].yPath = 500;
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <calibrateTray+0x94>)
 8001532:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001536:	64da      	str	r2, [r3, #76]	; 0x4c
	trajPath[10].yPath = 400;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <calibrateTray+0x94>)
 800153a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800153e:	655a      	str	r2, [r3, #84]	; 0x54
	trajPath[11].yPath = 100;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <calibrateTray+0x94>)
 8001542:	2264      	movs	r2, #100	; 0x64
 8001544:	65da      	str	r2, [r3, #92]	; 0x5c
	trajPath[12].yPath = 500;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <calibrateTray+0x94>)
 8001548:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800154c:	665a      	str	r2, [r3, #100]	; 0x64
	trajPath[13].yPath = 300;
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <calibrateTray+0x94>)
 8001550:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001554:	66da      	str	r2, [r3, #108]	; 0x6c
	trajPath[14].yPath = 200;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <calibrateTray+0x94>)
 8001558:	22c8      	movs	r2, #200	; 0xc8
 800155a:	675a      	str	r2, [r3, #116]	; 0x74
	trajPath[15].yPath = 50;
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <calibrateTray+0x94>)
 800155e:	2232      	movs	r2, #50	; 0x32
 8001560:	67da      	str	r2, [r3, #124]	; 0x7c
	trajPath[16].yPath = 500;
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <calibrateTray+0x94>)
 8001564:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	trajPath[17].yPath = 0;
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <calibrateTray+0x94>)
 800156e:	2200      	movs	r2, #0
 8001570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	200002ac 	.word	0x200002ac

08001584 <setMotor>:

void setMotor() {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	if (motorDirection) {
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <setMotor+0x3c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <setMotor+0x18>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001590:	2201      	movs	r2, #1
 8001592:	2140      	movs	r1, #64	; 0x40
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <setMotor+0x40>)
 8001596:	f002 f9d1 	bl	800393c <HAL_GPIO_WritePin>
 800159a:	e004      	b.n	80015a6 <setMotor+0x22>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	2140      	movs	r1, #64	; 0x40
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <setMotor+0x40>)
 80015a2:	f002 f9cb 	bl	800393c <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <setMotor+0x44>)
 80015a8:	edd3 7a00 	vldr	s15, [r3]
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <setMotor+0x48>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015b4:	ee17 2a90 	vmov	r2, s15
 80015b8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000000 	.word	0x20000000
 80015c4:	40020800 	.word	0x40020800
 80015c8:	20000294 	.word	0x20000294
 80015cc:	20000150 	.word	0x20000150

080015d0 <readEncoder>:

void readEncoder() {
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <readEncoder+0x1c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	461a      	mov	r2, r3
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <readEncoder+0x20>)
 80015de:	601a      	str	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	200001e0 	.word	0x200001e0
 80015f0:	200002a0 	.word	0x200002a0

080015f4 <cascadePIDControl>:

void cascadePIDControl()
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
	calculationTraj result = trapezoidalTraj();
 80015fa:	f000 f8e5 	bl	80017c8 <trapezoidalTraj>
 80015fe:	eeb0 7a40 	vmov.f32	s14, s0
 8001602:	eef0 7a60 	vmov.f32	s15, s1
 8001606:	ed87 7a00 	vstr	s14, [r7]
 800160a:	edc7 7a01 	vstr	s15, [r7, #4]
	positionLoop(result.posTraj);
 800160e:	edd7 7a00 	vldr	s15, [r7]
 8001612:	eeb0 0a67 	vmov.f32	s0, s15
 8001616:	f000 f807 	bl	8001628 <positionLoop>
	 //velocityLoop(result.velTraj);
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	0000      	movs	r0, r0
 8001624:	0000      	movs	r0, r0
	...

08001628 <positionLoop>:

void positionLoop(float targetPos)
{
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	ed87 0a01 	vstr	s0, [r7, #4]
	// mmActPos = QEIReadRaw * (2*3.14159*11.205/8192);
	mmActPos = QEIReadRaw * (2 * 3.14159 * 11.205 / 80);
 8001632:	4b59      	ldr	r3, [pc, #356]	; (8001798 <positionLoop+0x170>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff20 	bl	800047c <__aeabi_i2d>
 800163c:	a352      	add	r3, pc, #328	; (adr r3, 8001788 <positionLoop+0x160>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7fe ff85 	bl	8000550 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff fa2f 	bl	8000ab0 <__aeabi_d2f>
 8001652:	4603      	mov	r3, r0
 8001654:	4a51      	ldr	r2, [pc, #324]	; (800179c <positionLoop+0x174>)
 8001656:	6013      	str	r3, [r2, #0]
	mmActVel = (mmActPos - prePos)/0.001;
 8001658:	4b50      	ldr	r3, [pc, #320]	; (800179c <positionLoop+0x174>)
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	4b50      	ldr	r3, [pc, #320]	; (80017a0 <positionLoop+0x178>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001668:	ee17 0a90 	vmov	r0, s15
 800166c:	f7fe ff18 	bl	80004a0 <__aeabi_f2d>
 8001670:	a347      	add	r3, pc, #284	; (adr r3, 8001790 <positionLoop+0x168>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7ff f895 	bl	80007a4 <__aeabi_ddiv>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff fa15 	bl	8000ab0 <__aeabi_d2f>
 8001686:	4603      	mov	r3, r0
 8001688:	4a46      	ldr	r2, [pc, #280]	; (80017a4 <positionLoop+0x17c>)
 800168a:	6013      	str	r3, [r2, #0]
	mmError = targetPos - mmActPos;
 800168c:	4b43      	ldr	r3, [pc, #268]	; (800179c <positionLoop+0x174>)
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	ed97 7a01 	vldr	s14, [r7, #4]
 8001696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169a:	4b43      	ldr	r3, [pc, #268]	; (80017a8 <positionLoop+0x180>)
 800169c:	edc3 7a00 	vstr	s15, [r3]
	positionPID.eIntegral = positionPID.eIntegral + (mmError * 0.001);
 80016a0:	4b42      	ldr	r3, [pc, #264]	; (80017ac <positionLoop+0x184>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe fefb 	bl	80004a0 <__aeabi_f2d>
 80016aa:	4604      	mov	r4, r0
 80016ac:	460d      	mov	r5, r1
 80016ae:	4b3e      	ldr	r3, [pc, #248]	; (80017a8 <positionLoop+0x180>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fef4 	bl	80004a0 <__aeabi_f2d>
 80016b8:	a335      	add	r3, pc, #212	; (adr r3, 8001790 <positionLoop+0x168>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7fe ff47 	bl	8000550 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4620      	mov	r0, r4
 80016c8:	4629      	mov	r1, r5
 80016ca:	f7fe fd8b 	bl	80001e4 <__adddf3>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff f9eb 	bl	8000ab0 <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a33      	ldr	r2, [pc, #204]	; (80017ac <positionLoop+0x184>)
 80016de:	60d3      	str	r3, [r2, #12]
	duty = (positionPID.pTerm * mmError)
 80016e0:	4b32      	ldr	r3, [pc, #200]	; (80017ac <positionLoop+0x184>)
 80016e2:	ed93 7a00 	vldr	s14, [r3]
 80016e6:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <positionLoop+0x180>)
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (positionPID.iTerm * positionPID.eIntegral);
 80016f0:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <positionLoop+0x184>)
 80016f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80016f6:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <positionLoop+0x184>)
 80016f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80016fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001700:	ee77 7a27 	vadd.f32	s15, s14, s15
	duty = (positionPID.pTerm * mmError)
 8001704:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <positionLoop+0x188>)
 8001706:	edc3 7a00 	vstr	s15, [r3]
	if (duty < 0) {
 800170a:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <positionLoop+0x188>)
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001718:	d50b      	bpl.n	8001732 <positionLoop+0x10a>
		motorDirection = 0;
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <positionLoop+0x18c>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
		duty = (-1) * duty;
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <positionLoop+0x188>)
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	eef1 7a67 	vneg.f32	s15, s15
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <positionLoop+0x188>)
 800172c:	edc3 7a00 	vstr	s15, [r3]
 8001730:	e002      	b.n	8001738 <positionLoop+0x110>
	} else {
		motorDirection = 1;
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <positionLoop+0x18c>)
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
	}
	if (duty > 1000) {
 8001738:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <positionLoop+0x188>)
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80017b8 <positionLoop+0x190>
 8001742:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174a:	dd03      	ble.n	8001754 <positionLoop+0x12c>
		duty = 1000;
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <positionLoop+0x188>)
 800174e:	4a1b      	ldr	r2, [pc, #108]	; (80017bc <positionLoop+0x194>)
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e00d      	b.n	8001770 <positionLoop+0x148>
	} else if (duty <= 120) {
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <positionLoop+0x188>)
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80017c0 <positionLoop+0x198>
 800175e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001766:	d803      	bhi.n	8001770 <positionLoop+0x148>
		duty = 0;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <positionLoop+0x188>)
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
	}
	prePos = mmActPos;
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <positionLoop+0x174>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <positionLoop+0x178>)
 8001776:	6013      	str	r3, [r2, #0]
	setMotor();
 8001778:	f7ff ff04 	bl	8001584 <setMotor>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bdb0      	pop	{r4, r5, r7, pc}
 8001784:	f3af 8000 	nop.w
 8001788:	3d4be5dd 	.word	0x3d4be5dd
 800178c:	3fec2945 	.word	0x3fec2945
 8001790:	d2f1a9fc 	.word	0xd2f1a9fc
 8001794:	3f50624d 	.word	0x3f50624d
 8001798:	200002a0 	.word	0x200002a0
 800179c:	200002a4 	.word	0x200002a4
 80017a0:	20000350 	.word	0x20000350
 80017a4:	2000034c 	.word	0x2000034c
 80017a8:	200002a8 	.word	0x200002a8
 80017ac:	20000004 	.word	0x20000004
 80017b0:	20000294 	.word	0x20000294
 80017b4:	20000000 	.word	0x20000000
 80017b8:	447a0000 	.word	0x447a0000
 80017bc:	447a0000 	.word	0x447a0000
 80017c0:	42f00000 	.word	0x42f00000
 80017c4:	00000000 	.word	0x00000000

080017c8 <trapezoidalTraj>:
	// 	photoSig[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
	// photoSig[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
}


calculationTraj trapezoidalTraj() {
 80017c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017cc:	b094      	sub	sp, #80	; 0x50
 80017ce:	af00      	add	r7, sp, #0
	calculationTraj result;
	qi = trajPath[subTrajState%18].yPath;
 80017d0:	4b8f      	ldr	r3, [pc, #572]	; (8001a10 <trapezoidalTraj+0x248>)
 80017d2:	881a      	ldrh	r2, [r3, #0]
 80017d4:	4b8f      	ldr	r3, [pc, #572]	; (8001a14 <trapezoidalTraj+0x24c>)
 80017d6:	fba3 1302 	umull	r1, r3, r3, r2
 80017da:	0899      	lsrs	r1, r3, #2
 80017dc:	460b      	mov	r3, r1
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	4a8b      	ldr	r2, [pc, #556]	; (8001a18 <trapezoidalTraj+0x250>)
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4413      	add	r3, r2
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	4b8a      	ldr	r3, [pc, #552]	; (8001a1c <trapezoidalTraj+0x254>)
 80017f4:	801a      	strh	r2, [r3, #0]
	qf = trajPath[(subTrajState+1)%18].yPath;
 80017f6:	4b86      	ldr	r3, [pc, #536]	; (8001a10 <trapezoidalTraj+0x248>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	1c59      	adds	r1, r3, #1
 80017fc:	4b85      	ldr	r3, [pc, #532]	; (8001a14 <trapezoidalTraj+0x24c>)
 80017fe:	fb83 2301 	smull	r2, r3, r3, r1
 8001802:	109a      	asrs	r2, r3, #2
 8001804:	17cb      	asrs	r3, r1, #31
 8001806:	1ad2      	subs	r2, r2, r3
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	1aca      	subs	r2, r1, r3
 8001812:	4981      	ldr	r1, [pc, #516]	; (8001a18 <trapezoidalTraj+0x250>)
 8001814:	00d3      	lsls	r3, r2, #3
 8001816:	440b      	add	r3, r1
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b80      	ldr	r3, [pc, #512]	; (8001a20 <trapezoidalTraj+0x258>)
 800181e:	801a      	strh	r2, [r3, #0]
	float diffPos = abs(qf-qi);
 8001820:	4b7f      	ldr	r3, [pc, #508]	; (8001a20 <trapezoidalTraj+0x258>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b7d      	ldr	r3, [pc, #500]	; (8001a1c <trapezoidalTraj+0x254>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	bfb8      	it	lt
 8001830:	425b      	neglt	r3, r3
 8001832:	ee07 3a90 	vmov	s15, r3
 8001836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	int8_t handleMinus = (qf-qi)/diffPos;
 800183e:	4b78      	ldr	r3, [pc, #480]	; (8001a20 <trapezoidalTraj+0x258>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <trapezoidalTraj+0x254>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001852:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800185a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001862:	793b      	ldrb	r3, [r7, #4]
 8001864:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	float timeTrapSeg1 = qdm / qddm;
 8001868:	4b6e      	ldr	r3, [pc, #440]	; (8001a24 <trapezoidalTraj+0x25c>)
 800186a:	edd3 6a00 	vldr	s13, [r3]
 800186e:	4b6e      	ldr	r3, [pc, #440]	; (8001a28 <trapezoidalTraj+0x260>)
 8001870:	ed93 7a00 	vldr	s14, [r3]
 8001874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001878:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	timeTriSeg1 = pow((diffPos/qddm), 0.5);
 800187c:	4b6a      	ldr	r3, [pc, #424]	; (8001a28 <trapezoidalTraj+0x260>)
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001886:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800188a:	ee16 0a90 	vmov	r0, s13
 800188e:	f7fe fe07 	bl	80004a0 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8001a08 <trapezoidalTraj+0x240>
 800189a:	ec43 2b10 	vmov	d0, r2, r3
 800189e:	f004 f98d 	bl	8005bbc <pow>
 80018a2:	ec53 2b10 	vmov	r2, r3, d0
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f901 	bl	8000ab0 <__aeabi_d2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a5e      	ldr	r2, [pc, #376]	; (8001a2c <trapezoidalTraj+0x264>)
 80018b2:	6013      	str	r3, [r2, #0]

	if (timeTriSeg1 < timeTrapSeg1) // triangle shape
 80018b4:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <trapezoidalTraj+0x264>)
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80018be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	f340 8152 	ble.w	8001b6e <trapezoidalTraj+0x3a6>
			{
		float qTriSeg1 = 0.5 * qddm * timeTriSeg1 * timeTriSeg1;
 80018ca:	4b57      	ldr	r3, [pc, #348]	; (8001a28 <trapezoidalTraj+0x260>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fde6 	bl	80004a0 <__aeabi_f2d>
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	4b55      	ldr	r3, [pc, #340]	; (8001a30 <trapezoidalTraj+0x268>)
 80018da:	f7fe fe39 	bl	8000550 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4614      	mov	r4, r2
 80018e4:	461d      	mov	r5, r3
 80018e6:	4b51      	ldr	r3, [pc, #324]	; (8001a2c <trapezoidalTraj+0x264>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fdd8 	bl	80004a0 <__aeabi_f2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe fe2a 	bl	8000550 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4614      	mov	r4, r2
 8001902:	461d      	mov	r5, r3
 8001904:	4b49      	ldr	r3, [pc, #292]	; (8001a2c <trapezoidalTraj+0x264>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fdc9 	bl	80004a0 <__aeabi_f2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4620      	mov	r0, r4
 8001914:	4629      	mov	r1, r5
 8001916:	f7fe fe1b 	bl	8000550 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f8c5 	bl	8000ab0 <__aeabi_d2f>
 8001926:	4603      	mov	r3, r0
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
		float qdTriSeg1 = qddm * timeTriSeg1;
 800192a:	4b3f      	ldr	r3, [pc, #252]	; (8001a28 <trapezoidalTraj+0x260>)
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	4b3e      	ldr	r3, [pc, #248]	; (8001a2c <trapezoidalTraj+0x264>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		if (actualTime <= timeTriSeg1) {
 800193e:	4b3d      	ldr	r3, [pc, #244]	; (8001a34 <trapezoidalTraj+0x26c>)
 8001940:	ed93 7a00 	vldr	s14, [r3]
 8001944:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <trapezoidalTraj+0x264>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	d871      	bhi.n	8001a38 <trapezoidalTraj+0x270>
			result.posTraj = qi + (0.5 * qddm * actualTime * actualTime)*handleMinus ;
 8001954:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <trapezoidalTraj+0x254>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fd8f 	bl	800047c <__aeabi_i2d>
 800195e:	4604      	mov	r4, r0
 8001960:	460d      	mov	r5, r1
 8001962:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <trapezoidalTraj+0x260>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fd9a 	bl	80004a0 <__aeabi_f2d>
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	4b2f      	ldr	r3, [pc, #188]	; (8001a30 <trapezoidalTraj+0x268>)
 8001972:	f7fe fded 	bl	8000550 <__aeabi_dmul>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4690      	mov	r8, r2
 800197c:	4699      	mov	r9, r3
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <trapezoidalTraj+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fd8c 	bl	80004a0 <__aeabi_f2d>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4640      	mov	r0, r8
 800198e:	4649      	mov	r1, r9
 8001990:	f7fe fdde 	bl	8000550 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4690      	mov	r8, r2
 800199a:	4699      	mov	r9, r3
 800199c:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <trapezoidalTraj+0x26c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fd7d 	bl	80004a0 <__aeabi_f2d>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4640      	mov	r0, r8
 80019ac:	4649      	mov	r1, r9
 80019ae:	f7fe fdcf 	bl	8000550 <__aeabi_dmul>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4690      	mov	r8, r2
 80019b8:	4699      	mov	r9, r3
 80019ba:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fd5c 	bl	800047c <__aeabi_i2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4640      	mov	r0, r8
 80019ca:	4649      	mov	r1, r9
 80019cc:	f7fe fdc0 	bl	8000550 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4620      	mov	r0, r4
 80019d6:	4629      	mov	r1, r5
 80019d8:	f7fe fc04 	bl	80001e4 <__adddf3>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7ff f864 	bl	8000ab0 <__aeabi_d2f>
 80019e8:	4603      	mov	r3, r0
 80019ea:	613b      	str	r3, [r7, #16]
			result.velTraj = qddm * actualTime;
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <trapezoidalTraj+0x260>)
 80019ee:	ed93 7a00 	vldr	s14, [r3]
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <trapezoidalTraj+0x26c>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fc:	edc7 7a05 	vstr	s15, [r7, #20]
 8001a00:	e291      	b.n	8001f26 <trapezoidalTraj+0x75e>
 8001a02:	bf00      	nop
 8001a04:	f3af 8000 	nop.w
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	3fe00000 	.word	0x3fe00000
 8001a10:	20000346 	.word	0x20000346
 8001a14:	38e38e39 	.word	0x38e38e39
 8001a18:	200002ac 	.word	0x200002ac
 8001a1c:	20000344 	.word	0x20000344
 8001a20:	20000342 	.word	0x20000342
 8001a24:	20000018 	.word	0x20000018
 8001a28:	20000014 	.word	0x20000014
 8001a2c:	20000348 	.word	0x20000348
 8001a30:	3fe00000 	.word	0x3fe00000
 8001a34:	2000033c 	.word	0x2000033c
		}

		else if (actualTime > timeTriSeg1 && actualTime <= (timeTriSeg1 * 2)) {
 8001a38:	4bbe      	ldr	r3, [pc, #760]	; (8001d34 <trapezoidalTraj+0x56c>)
 8001a3a:	ed93 7a00 	vldr	s14, [r3]
 8001a3e:	4bbe      	ldr	r3, [pc, #760]	; (8001d38 <trapezoidalTraj+0x570>)
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4c:	f340 8083 	ble.w	8001b56 <trapezoidalTraj+0x38e>
 8001a50:	4bb9      	ldr	r3, [pc, #740]	; (8001d38 <trapezoidalTraj+0x570>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a5a:	4bb6      	ldr	r3, [pc, #728]	; (8001d34 <trapezoidalTraj+0x56c>)
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a68:	db75      	blt.n	8001b56 <trapezoidalTraj+0x38e>
			float actualTimeSeg2 = actualTime - timeTriSeg1;
 8001a6a:	4bb2      	ldr	r3, [pc, #712]	; (8001d34 <trapezoidalTraj+0x56c>)
 8001a6c:	ed93 7a00 	vldr	s14, [r3]
 8001a70:	4bb1      	ldr	r3, [pc, #708]	; (8001d38 <trapezoidalTraj+0x570>)
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a7a:	edc7 7a08 	vstr	s15, [r7, #32]
			result.posTraj = qi + (qTriSeg1 + (qdTriSeg1 *  actualTimeSeg2)
 8001a7e:	4baf      	ldr	r3, [pc, #700]	; (8001d3c <trapezoidalTraj+0x574>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fcfa 	bl	800047c <__aeabi_i2d>
 8001a88:	4604      	mov	r4, r0
 8001a8a:	460d      	mov	r5, r1
 8001a8c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a90:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa0:	ee17 0a90 	vmov	r0, s15
 8001aa4:	f7fe fcfc 	bl	80004a0 <__aeabi_f2d>
 8001aa8:	4680      	mov	r8, r0
 8001aaa:	4689      	mov	r9, r1
					- (0.5 * qddm *  actualTimeSeg2 *  actualTimeSeg2))*handleMinus ;
 8001aac:	4ba4      	ldr	r3, [pc, #656]	; (8001d40 <trapezoidalTraj+0x578>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fcf5 	bl	80004a0 <__aeabi_f2d>
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	4ba2      	ldr	r3, [pc, #648]	; (8001d44 <trapezoidalTraj+0x57c>)
 8001abc:	f7fe fd48 	bl	8000550 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4692      	mov	sl, r2
 8001ac6:	469b      	mov	fp, r3
 8001ac8:	6a38      	ldr	r0, [r7, #32]
 8001aca:	f7fe fce9 	bl	80004a0 <__aeabi_f2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4650      	mov	r0, sl
 8001ad4:	4659      	mov	r1, fp
 8001ad6:	f7fe fd3b 	bl	8000550 <__aeabi_dmul>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4692      	mov	sl, r2
 8001ae0:	469b      	mov	fp, r3
 8001ae2:	6a38      	ldr	r0, [r7, #32]
 8001ae4:	f7fe fcdc 	bl	80004a0 <__aeabi_f2d>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4650      	mov	r0, sl
 8001aee:	4659      	mov	r1, fp
 8001af0:	f7fe fd2e 	bl	8000550 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4640      	mov	r0, r8
 8001afa:	4649      	mov	r1, r9
 8001afc:	f7fe fb70 	bl	80001e0 <__aeabi_dsub>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4690      	mov	r8, r2
 8001b06:	4699      	mov	r9, r3
 8001b08:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fcb5 	bl	800047c <__aeabi_i2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4640      	mov	r0, r8
 8001b18:	4649      	mov	r1, r9
 8001b1a:	f7fe fd19 	bl	8000550 <__aeabi_dmul>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
			result.posTraj = qi + (qTriSeg1 + (qdTriSeg1 *  actualTimeSeg2)
 8001b22:	4620      	mov	r0, r4
 8001b24:	4629      	mov	r1, r5
 8001b26:	f7fe fb5d 	bl	80001e4 <__adddf3>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7fe ffbd 	bl	8000ab0 <__aeabi_d2f>
 8001b36:	4603      	mov	r3, r0
 8001b38:	613b      	str	r3, [r7, #16]
			result.velTraj = qdTriSeg1 - (qddm * actualTimeSeg2);
 8001b3a:	4b81      	ldr	r3, [pc, #516]	; (8001d40 <trapezoidalTraj+0x578>)
 8001b3c:	ed93 7a00 	vldr	s14, [r3]
 8001b40:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b48:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b50:	edc7 7a05 	vstr	s15, [r7, #20]
		else if (actualTime > timeTriSeg1 && actualTime <= (timeTriSeg1 * 2)) {
 8001b54:	e1e7      	b.n	8001f26 <trapezoidalTraj+0x75e>
		}

		else {
			result.posTraj = qf;
 8001b56:	4b7c      	ldr	r3, [pc, #496]	; (8001d48 <trapezoidalTraj+0x580>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b62:	edc7 7a04 	vstr	s15, [r7, #16]
			result.velTraj = 0;
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e1db      	b.n	8001f26 <trapezoidalTraj+0x75e>
	}

	else // trapezoidal shape
	{
		float timeTrapSeg2 = (diffPos
				- (2 * 0.5 * qddm * (timeTrapSeg1) * (timeTrapSeg1))) / qdm;
 8001b6e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b70:	f7fe fc96 	bl	80004a0 <__aeabi_f2d>
 8001b74:	4604      	mov	r4, r0
 8001b76:	460d      	mov	r5, r1
 8001b78:	4b71      	ldr	r3, [pc, #452]	; (8001d40 <trapezoidalTraj+0x578>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fc8f 	bl	80004a0 <__aeabi_f2d>
 8001b82:	4680      	mov	r8, r0
 8001b84:	4689      	mov	r9, r1
 8001b86:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001b88:	f7fe fc8a 	bl	80004a0 <__aeabi_f2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4640      	mov	r0, r8
 8001b92:	4649      	mov	r1, r9
 8001b94:	f7fe fcdc 	bl	8000550 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4690      	mov	r8, r2
 8001b9e:	4699      	mov	r9, r3
 8001ba0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001ba2:	f7fe fc7d 	bl	80004a0 <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4640      	mov	r0, r8
 8001bac:	4649      	mov	r1, r9
 8001bae:	f7fe fccf 	bl	8000550 <__aeabi_dmul>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	4629      	mov	r1, r5
 8001bba:	f7fe fb11 	bl	80001e0 <__aeabi_dsub>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4614      	mov	r4, r2
 8001bc4:	461d      	mov	r5, r3
 8001bc6:	4b61      	ldr	r3, [pc, #388]	; (8001d4c <trapezoidalTraj+0x584>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fc68 	bl	80004a0 <__aeabi_f2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	f7fe fde4 	bl	80007a4 <__aeabi_ddiv>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
		float timeTrapSeg2 = (diffPos
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	f7fe ff64 	bl	8000ab0 <__aeabi_d2f>
 8001be8:	4603      	mov	r3, r0
 8001bea:	643b      	str	r3, [r7, #64]	; 0x40
		float timeTrapSeg3 = qdm / qddm;
 8001bec:	4b57      	ldr	r3, [pc, #348]	; (8001d4c <trapezoidalTraj+0x584>)
 8001bee:	edd3 6a00 	vldr	s13, [r3]
 8001bf2:	4b53      	ldr	r3, [pc, #332]	; (8001d40 <trapezoidalTraj+0x578>)
 8001bf4:	ed93 7a00 	vldr	s14, [r3]
 8001bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bfc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		float qTrapSeg1 = 0.5 * qddm * (timeTrapSeg1) * (timeTrapSeg1);
 8001c00:	4b4f      	ldr	r3, [pc, #316]	; (8001d40 <trapezoidalTraj+0x578>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fc4b 	bl	80004a0 <__aeabi_f2d>
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	4b4d      	ldr	r3, [pc, #308]	; (8001d44 <trapezoidalTraj+0x57c>)
 8001c10:	f7fe fc9e 	bl	8000550 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4614      	mov	r4, r2
 8001c1a:	461d      	mov	r5, r3
 8001c1c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001c1e:	f7fe fc3f 	bl	80004a0 <__aeabi_f2d>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4620      	mov	r0, r4
 8001c28:	4629      	mov	r1, r5
 8001c2a:	f7fe fc91 	bl	8000550 <__aeabi_dmul>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4614      	mov	r4, r2
 8001c34:	461d      	mov	r5, r3
 8001c36:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001c38:	f7fe fc32 	bl	80004a0 <__aeabi_f2d>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4620      	mov	r0, r4
 8001c42:	4629      	mov	r1, r5
 8001c44:	f7fe fc84 	bl	8000550 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f7fe ff2e 	bl	8000ab0 <__aeabi_d2f>
 8001c54:	4603      	mov	r3, r0
 8001c56:	63bb      	str	r3, [r7, #56]	; 0x38
		float qTrapSeg2 = qTrapSeg1 + (qdm * timeTrapSeg2);
 8001c58:	4b3c      	ldr	r3, [pc, #240]	; (8001d4c <trapezoidalTraj+0x584>)
 8001c5a:	ed93 7a00 	vldr	s14, [r3]
 8001c5e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c66:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

		if (actualTime <= timeTrapSeg1) {
 8001c72:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <trapezoidalTraj+0x56c>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001c7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c84:	db64      	blt.n	8001d50 <trapezoidalTraj+0x588>
			result.posTraj = qi + (0.5 * qddm * actualTime * actualTime)*handleMinus ;
 8001c86:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <trapezoidalTraj+0x574>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fbf6 	bl	800047c <__aeabi_i2d>
 8001c90:	4604      	mov	r4, r0
 8001c92:	460d      	mov	r5, r1
 8001c94:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <trapezoidalTraj+0x578>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc01 	bl	80004a0 <__aeabi_f2d>
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <trapezoidalTraj+0x57c>)
 8001ca4:	f7fe fc54 	bl	8000550 <__aeabi_dmul>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4690      	mov	r8, r2
 8001cae:	4699      	mov	r9, r3
 8001cb0:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <trapezoidalTraj+0x56c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fbf3 	bl	80004a0 <__aeabi_f2d>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4640      	mov	r0, r8
 8001cc0:	4649      	mov	r1, r9
 8001cc2:	f7fe fc45 	bl	8000550 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4690      	mov	r8, r2
 8001ccc:	4699      	mov	r9, r3
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <trapezoidalTraj+0x56c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fbe4 	bl	80004a0 <__aeabi_f2d>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4640      	mov	r0, r8
 8001cde:	4649      	mov	r1, r9
 8001ce0:	f7fe fc36 	bl	8000550 <__aeabi_dmul>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4690      	mov	r8, r2
 8001cea:	4699      	mov	r9, r3
 8001cec:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fbc3 	bl	800047c <__aeabi_i2d>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4640      	mov	r0, r8
 8001cfc:	4649      	mov	r1, r9
 8001cfe:	f7fe fc27 	bl	8000550 <__aeabi_dmul>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4620      	mov	r0, r4
 8001d08:	4629      	mov	r1, r5
 8001d0a:	f7fe fa6b 	bl	80001e4 <__adddf3>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f7fe fecb 	bl	8000ab0 <__aeabi_d2f>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	613b      	str	r3, [r7, #16]
			result.velTraj = qddm * actualTime;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <trapezoidalTraj+0x578>)
 8001d20:	ed93 7a00 	vldr	s14, [r3]
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <trapezoidalTraj+0x56c>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2e:	edc7 7a05 	vstr	s15, [r7, #20]
 8001d32:	e0f8      	b.n	8001f26 <trapezoidalTraj+0x75e>
 8001d34:	2000033c 	.word	0x2000033c
 8001d38:	20000348 	.word	0x20000348
 8001d3c:	20000344 	.word	0x20000344
 8001d40:	20000014 	.word	0x20000014
 8001d44:	3fe00000 	.word	0x3fe00000
 8001d48:	20000342 	.word	0x20000342
 8001d4c:	20000018 	.word	0x20000018
		} else if (actualTime > timeTrapSeg1
 8001d50:	4b9b      	ldr	r3, [pc, #620]	; (8001fc0 <trapezoidalTraj+0x7f8>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001d5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	d537      	bpl.n	8001dd4 <trapezoidalTraj+0x60c>
				&& actualTime <= timeTrapSeg2 + timeTrapSeg1) {
 8001d64:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001d68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d70:	4b93      	ldr	r3, [pc, #588]	; (8001fc0 <trapezoidalTraj+0x7f8>)
 8001d72:	edd3 7a00 	vldr	s15, [r3]
 8001d76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7e:	db29      	blt.n	8001dd4 <trapezoidalTraj+0x60c>
			float t2 = actualTime - timeTrapSeg1;
 8001d80:	4b8f      	ldr	r3, [pc, #572]	; (8001fc0 <trapezoidalTraj+0x7f8>)
 8001d82:	ed93 7a00 	vldr	s14, [r3]
 8001d86:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			result.posTraj = qi + (qTrapSeg1 + qdm * (t2))*handleMinus ;
 8001d92:	4b8c      	ldr	r3, [pc, #560]	; (8001fc4 <trapezoidalTraj+0x7fc>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d9e:	4b8a      	ldr	r3, [pc, #552]	; (8001fc8 <trapezoidalTraj+0x800>)
 8001da0:	edd3 6a00 	vldr	s13, [r3]
 8001da4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001da8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001db0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001db4:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8001db8:	ee07 3a90 	vmov	s15, r3
 8001dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc8:	edc7 7a04 	vstr	s15, [r7, #16]
			result.velTraj = qdm;
 8001dcc:	4b7e      	ldr	r3, [pc, #504]	; (8001fc8 <trapezoidalTraj+0x800>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	617b      	str	r3, [r7, #20]
				&& actualTime <= timeTrapSeg2 + timeTrapSeg1) {
 8001dd2:	e0a8      	b.n	8001f26 <trapezoidalTraj+0x75e>

		} else if (actualTime > timeTrapSeg2 + timeTrapSeg1
 8001dd4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001dd8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ddc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de0:	4b77      	ldr	r3, [pc, #476]	; (8001fc0 <trapezoidalTraj+0x7f8>)
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dee:	f140 808f 	bpl.w	8001f10 <trapezoidalTraj+0x748>
				&& actualTime <= timeTrapSeg3 + timeTrapSeg2 + timeTrapSeg1) {
 8001df2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001df6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001dfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dfe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e06:	4b6e      	ldr	r3, [pc, #440]	; (8001fc0 <trapezoidalTraj+0x7f8>)
 8001e08:	edd3 7a00 	vldr	s15, [r3]
 8001e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e14:	db7c      	blt.n	8001f10 <trapezoidalTraj+0x748>
			float t3 = actualTime - timeTrapSeg2 - timeTrapSeg1;
 8001e16:	4b6a      	ldr	r3, [pc, #424]	; (8001fc0 <trapezoidalTraj+0x7f8>)
 8001e18:	ed93 7a00 	vldr	s14, [r3]
 8001e1c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001e20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e24:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e2c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			result.posTraj = qi + (qTrapSeg2 + (qdm * t3) - 0.5 * qddm * t3 * t3)*handleMinus ;
 8001e30:	4b64      	ldr	r3, [pc, #400]	; (8001fc4 <trapezoidalTraj+0x7fc>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fb21 	bl	800047c <__aeabi_i2d>
 8001e3a:	4604      	mov	r4, r0
 8001e3c:	460d      	mov	r5, r1
 8001e3e:	4b62      	ldr	r3, [pc, #392]	; (8001fc8 <trapezoidalTraj+0x800>)
 8001e40:	ed93 7a00 	vldr	s14, [r3]
 8001e44:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e54:	ee17 0a90 	vmov	r0, s15
 8001e58:	f7fe fb22 	bl	80004a0 <__aeabi_f2d>
 8001e5c:	4680      	mov	r8, r0
 8001e5e:	4689      	mov	r9, r1
 8001e60:	4b5a      	ldr	r3, [pc, #360]	; (8001fcc <trapezoidalTraj+0x804>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fb1b 	bl	80004a0 <__aeabi_f2d>
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	4b58      	ldr	r3, [pc, #352]	; (8001fd0 <trapezoidalTraj+0x808>)
 8001e70:	f7fe fb6e 	bl	8000550 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4692      	mov	sl, r2
 8001e7a:	469b      	mov	fp, r3
 8001e7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e7e:	f7fe fb0f 	bl	80004a0 <__aeabi_f2d>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4650      	mov	r0, sl
 8001e88:	4659      	mov	r1, fp
 8001e8a:	f7fe fb61 	bl	8000550 <__aeabi_dmul>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4692      	mov	sl, r2
 8001e94:	469b      	mov	fp, r3
 8001e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e98:	f7fe fb02 	bl	80004a0 <__aeabi_f2d>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4650      	mov	r0, sl
 8001ea2:	4659      	mov	r1, fp
 8001ea4:	f7fe fb54 	bl	8000550 <__aeabi_dmul>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4640      	mov	r0, r8
 8001eae:	4649      	mov	r1, r9
 8001eb0:	f7fe f996 	bl	80001e0 <__aeabi_dsub>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4690      	mov	r8, r2
 8001eba:	4699      	mov	r9, r3
 8001ebc:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fadb 	bl	800047c <__aeabi_i2d>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4640      	mov	r0, r8
 8001ecc:	4649      	mov	r1, r9
 8001ece:	f7fe fb3f 	bl	8000550 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	4629      	mov	r1, r5
 8001eda:	f7fe f983 	bl	80001e4 <__adddf3>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f7fe fde3 	bl	8000ab0 <__aeabi_d2f>
 8001eea:	4603      	mov	r3, r0
 8001eec:	613b      	str	r3, [r7, #16]
			result.velTraj = -qddm * t3 + qdm;
 8001eee:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <trapezoidalTraj+0x804>)
 8001ef0:	edd3 7a00 	vldr	s15, [r3]
 8001ef4:	eeb1 7a67 	vneg.f32	s14, s15
 8001ef8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001efc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f00:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <trapezoidalTraj+0x800>)
 8001f02:	edd3 7a00 	vldr	s15, [r3]
 8001f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0a:	edc7 7a05 	vstr	s15, [r7, #20]
				&& actualTime <= timeTrapSeg3 + timeTrapSeg2 + timeTrapSeg1) {
 8001f0e:	e00a      	b.n	8001f26 <trapezoidalTraj+0x75e>
		} else {
			result.posTraj = qf;
 8001f10:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <trapezoidalTraj+0x80c>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f1c:	edc7 7a04 	vstr	s15, [r7, #16]
			result.velTraj = 0;
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
		}

	}

	checkPos = result.posTraj;
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4a2b      	ldr	r2, [pc, #172]	; (8001fd8 <trapezoidalTraj+0x810>)
 8001f2a:	6013      	str	r3, [r2, #0]
	checkVel = result.velTraj;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	4a2b      	ldr	r2, [pc, #172]	; (8001fdc <trapezoidalTraj+0x814>)
 8001f30:	6013      	str	r3, [r2, #0]
	actualTime += 0.001;
 8001f32:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <trapezoidalTraj+0x7f8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fab2 	bl	80004a0 <__aeabi_f2d>
 8001f3c:	a31e      	add	r3, pc, #120	; (adr r3, 8001fb8 <trapezoidalTraj+0x7f0>)
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	f7fe f94f 	bl	80001e4 <__adddf3>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f7fe fdaf 	bl	8000ab0 <__aeabi_d2f>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4a1a      	ldr	r2, [pc, #104]	; (8001fc0 <trapezoidalTraj+0x7f8>)
 8001f56:	6013      	str	r3, [r2, #0]
	if (result.posTraj == qf)
 8001f58:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <trapezoidalTraj+0x80c>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	ee07 3a90 	vmov	s15, r3
 8001f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f68:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f70:	d109      	bne.n	8001f86 <trapezoidalTraj+0x7be>
	{
		subTrajState += 1;
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <trapezoidalTraj+0x818>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <trapezoidalTraj+0x818>)
 8001f7c:	801a      	strh	r2, [r3, #0]
		actualTime = 0;
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <trapezoidalTraj+0x7f8>)
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
	}


	return result;
 8001f86:	f107 0318 	add.w	r3, r7, #24
 8001f8a:	f107 0210 	add.w	r2, r7, #16
 8001f8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f92:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	ee07 2a10 	vmov	s14, r2
 8001f9e:	ee07 3a90 	vmov	s15, r3
}
 8001fa2:	eeb0 0a47 	vmov.f32	s0, s14
 8001fa6:	eef0 0a67 	vmov.f32	s1, s15
 8001faa:	3750      	adds	r7, #80	; 0x50
 8001fac:	46bd      	mov	sp, r7
 8001fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fb2:	bf00      	nop
 8001fb4:	f3af 8000 	nop.w
 8001fb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001fbc:	3f50624d 	.word	0x3f50624d
 8001fc0:	2000033c 	.word	0x2000033c
 8001fc4:	20000344 	.word	0x20000344
 8001fc8:	20000018 	.word	0x20000018
 8001fcc:	20000014 	.word	0x20000014
 8001fd0:	3fe00000 	.word	0x3fe00000
 8001fd4:	20000342 	.word	0x20000342
 8001fd8:	20000298 	.word	0x20000298
 8001fdc:	2000029c 	.word	0x2000029c
 8001fe0:	20000346 	.word	0x20000346

08001fe4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe8:	b672      	cpsid	i
}
 8001fea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001fec:	e7fe      	b.n	8001fec <Error_Handler+0x8>
	...

08001ff0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_MspInit+0x4c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a0f      	ldr	r2, [pc, #60]	; (800203c <HAL_MspInit+0x4c>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_MspInit+0x4c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_MspInit+0x4c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a08      	ldr	r2, [pc, #32]	; (800203c <HAL_MspInit+0x4c>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_MspInit+0x4c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800202e:	2007      	movs	r0, #7
 8002030:	f000 ff4e 	bl	8002ed0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800

08002040 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a2f      	ldr	r2, [pc, #188]	; (800211c <HAL_ADC_MspInit+0xdc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d157      	bne.n	8002112 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	4b2e      	ldr	r3, [pc, #184]	; (8002120 <HAL_ADC_MspInit+0xe0>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	4a2d      	ldr	r2, [pc, #180]	; (8002120 <HAL_ADC_MspInit+0xe0>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002070:	6453      	str	r3, [r2, #68]	; 0x44
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_ADC_MspInit+0xe0>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b27      	ldr	r3, [pc, #156]	; (8002120 <HAL_ADC_MspInit+0xe0>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a26      	ldr	r2, [pc, #152]	; (8002120 <HAL_ADC_MspInit+0xe0>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b24      	ldr	r3, [pc, #144]	; (8002120 <HAL_ADC_MspInit+0xe0>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800209a:	2309      	movs	r3, #9
 800209c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800209e:	2303      	movs	r3, #3
 80020a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	481d      	ldr	r0, [pc, #116]	; (8002124 <HAL_ADC_MspInit+0xe4>)
 80020ae:	f001 fac1 	bl	8003634 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_ADC_MspInit+0xe8>)
 80020b4:	4a1d      	ldr	r2, [pc, #116]	; (800212c <HAL_ADC_MspInit+0xec>)
 80020b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_ADC_MspInit+0xe8>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HAL_ADC_MspInit+0xe8>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c4:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_ADC_MspInit+0xe8>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <HAL_ADC_MspInit+0xe8>)
 80020cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <HAL_ADC_MspInit+0xe8>)
 80020d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_ADC_MspInit+0xe8>)
 80020dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HAL_ADC_MspInit+0xe8>)
 80020e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_ADC_MspInit+0xe8>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_ADC_MspInit+0xe8>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020f6:	480c      	ldr	r0, [pc, #48]	; (8002128 <HAL_ADC_MspInit+0xe8>)
 80020f8:	f000 ff2c 	bl	8002f54 <HAL_DMA_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002102:	f7ff ff6f 	bl	8001fe4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a07      	ldr	r2, [pc, #28]	; (8002128 <HAL_ADC_MspInit+0xe8>)
 800210a:	639a      	str	r2, [r3, #56]	; 0x38
 800210c:	4a06      	ldr	r2, [pc, #24]	; (8002128 <HAL_ADC_MspInit+0xe8>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002112:	bf00      	nop
 8002114:	3728      	adds	r7, #40	; 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40012000 	.word	0x40012000
 8002120:	40023800 	.word	0x40023800
 8002124:	40020800 	.word	0x40020800
 8002128:	200000f0 	.word	0x200000f0
 800212c:	40026410 	.word	0x40026410

08002130 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0b      	ldr	r2, [pc, #44]	; (800216c <HAL_TIM_PWM_MspInit+0x3c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d10d      	bne.n	800215e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <HAL_TIM_PWM_MspInit+0x40>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	4a09      	ldr	r2, [pc, #36]	; (8002170 <HAL_TIM_PWM_MspInit+0x40>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6453      	str	r3, [r2, #68]	; 0x44
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <HAL_TIM_PWM_MspInit+0x40>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40010000 	.word	0x40010000
 8002170:	40023800 	.word	0x40023800

08002174 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002184:	d115      	bne.n	80021b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_TIM_Base_MspInit+0x48>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <HAL_TIM_Base_MspInit+0x48>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_TIM_Base_MspInit+0x48>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	201c      	movs	r0, #28
 80021a8:	f000 fe9d 	bl	8002ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021ac:	201c      	movs	r0, #28
 80021ae:	f000 feb6 	bl	8002f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800

080021c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a19      	ldr	r2, [pc, #100]	; (8002244 <HAL_TIM_Encoder_MspInit+0x84>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d12b      	bne.n	800223a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	4b18      	ldr	r3, [pc, #96]	; (8002248 <HAL_TIM_Encoder_MspInit+0x88>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a17      	ldr	r2, [pc, #92]	; (8002248 <HAL_TIM_Encoder_MspInit+0x88>)
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_TIM_Encoder_MspInit+0x88>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_TIM_Encoder_MspInit+0x88>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a10      	ldr	r2, [pc, #64]	; (8002248 <HAL_TIM_Encoder_MspInit+0x88>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <HAL_TIM_Encoder_MspInit+0x88>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800221a:	2303      	movs	r3, #3
 800221c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002222:	2301      	movs	r3, #1
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800222a:	2302      	movs	r3, #2
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	4805      	ldr	r0, [pc, #20]	; (800224c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002236:	f001 f9fd 	bl	8003634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	; 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40000c00 	.word	0x40000c00
 8002248:	40023800 	.word	0x40023800
 800224c:	40020000 	.word	0x40020000

08002250 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <HAL_TIM_MspPostInit+0x68>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d11e      	bne.n	80022b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_TIM_MspPostInit+0x6c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a10      	ldr	r2, [pc, #64]	; (80022bc <HAL_TIM_MspPostInit+0x6c>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_TIM_MspPostInit+0x6c>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800228e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002292:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022a0:	2301      	movs	r3, #1
 80022a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	4619      	mov	r1, r3
 80022aa:	4805      	ldr	r0, [pc, #20]	; (80022c0 <HAL_TIM_MspPostInit+0x70>)
 80022ac:	f001 f9c2 	bl	8003634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022b0:	bf00      	nop
 80022b2:	3720      	adds	r7, #32
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40010000 	.word	0x40010000
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40020000 	.word	0x40020000

080022c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a19      	ldr	r2, [pc, #100]	; (8002348 <HAL_UART_MspInit+0x84>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d12b      	bne.n	800233e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	4b18      	ldr	r3, [pc, #96]	; (800234c <HAL_UART_MspInit+0x88>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	4a17      	ldr	r2, [pc, #92]	; (800234c <HAL_UART_MspInit+0x88>)
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f4:	6413      	str	r3, [r2, #64]	; 0x40
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <HAL_UART_MspInit+0x88>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_UART_MspInit+0x88>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a10      	ldr	r2, [pc, #64]	; (800234c <HAL_UART_MspInit+0x88>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_UART_MspInit+0x88>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800231e:	230c      	movs	r3, #12
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232a:	2303      	movs	r3, #3
 800232c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800232e:	2307      	movs	r3, #7
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	4805      	ldr	r0, [pc, #20]	; (8002350 <HAL_UART_MspInit+0x8c>)
 800233a:	f001 f97b 	bl	8003634 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800233e:	bf00      	nop
 8002340:	3728      	adds	r7, #40	; 0x28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40004400 	.word	0x40004400
 800234c:	40023800 	.word	0x40023800
 8002350:	40020000 	.word	0x40020000

08002354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <NMI_Handler+0x4>

0800235a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235e:	e7fe      	b.n	800235e <HardFault_Handler+0x4>

08002360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <MemManage_Handler+0x4>

08002366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <BusFault_Handler+0x4>

0800236c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <UsageFault_Handler+0x4>

08002372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a0:	f000 f8a4 	bl	80024ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <TIM2_IRQHandler+0x10>)
 80023ae:	f002 fab7 	bl	8004920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000198 	.word	0x20000198

080023bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <DMA2_Stream0_IRQHandler+0x10>)
 80023c2:	f000 fecd 	bl	8003160 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200000f0 	.word	0x200000f0

080023d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <SystemInit+0x20>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <SystemInit+0x20>)
 80023dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800242c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023fa:	490e      	ldr	r1, [pc, #56]	; (8002434 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023fc:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002400:	e002      	b.n	8002408 <LoopCopyDataInit>

08002402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002406:	3304      	adds	r3, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800240c:	d3f9      	bcc.n	8002402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002410:	4c0b      	ldr	r4, [pc, #44]	; (8002440 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002414:	e001      	b.n	800241a <LoopFillZerobss>

08002416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002418:	3204      	adds	r2, #4

0800241a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800241c:	d3fb      	bcc.n	8002416 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800241e:	f7ff ffd7 	bl	80023d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002422:	f003 fb9f 	bl	8005b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002426:	f7fe fd15 	bl	8000e54 <main>
  bx  lr    
 800242a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800242c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002434:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002438:	08006a70 	.word	0x08006a70
  ldr r2, =_sbss
 800243c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002440:	2000035c 	.word	0x2000035c

08002444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002444:	e7fe      	b.n	8002444 <ADC_IRQHandler>
	...

08002448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <HAL_Init+0x40>)
 8002452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002456:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_Init+0x40>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <HAL_Init+0x40>)
 800245e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002462:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a07      	ldr	r2, [pc, #28]	; (8002488 <HAL_Init+0x40>)
 800246a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002470:	2003      	movs	r0, #3
 8002472:	f000 fd2d 	bl	8002ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002476:	2000      	movs	r0, #0
 8002478:	f000 f808 	bl	800248c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800247c:	f7ff fdb8 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023c00 	.word	0x40023c00

0800248c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_InitTick+0x54>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_InitTick+0x58>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fd45 	bl	8002f3a <HAL_SYSTICK_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00e      	b.n	80024d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b0f      	cmp	r3, #15
 80024be:	d80a      	bhi.n	80024d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c0:	2200      	movs	r2, #0
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f000 fd0d 	bl	8002ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024cc:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <HAL_InitTick+0x5c>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	2000001c 	.word	0x2000001c
 80024e4:	20000024 	.word	0x20000024
 80024e8:	20000020 	.word	0x20000020

080024ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_IncTick+0x20>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_IncTick+0x24>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <HAL_IncTick+0x24>)
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000024 	.word	0x20000024
 8002510:	20000358 	.word	0x20000358

08002514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return uwTick;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_GetTick+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000358 	.word	0x20000358

0800252c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e033      	b.n	80025aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff fd78 	bl	8002040 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b00      	cmp	r3, #0
 8002568:	d118      	bne.n	800259c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002572:	f023 0302 	bic.w	r3, r3, #2
 8002576:	f043 0202 	orr.w	r2, r3, #2
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 fa58 	bl	8002a34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	f043 0201 	orr.w	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
 800259a:	e001      	b.n	80025a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_Start_DMA+0x1e>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e0ce      	b.n	8002770 <HAL_ADC_Start_DMA+0x1bc>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d018      	beq.n	800261a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025f8:	4b5f      	ldr	r3, [pc, #380]	; (8002778 <HAL_ADC_Start_DMA+0x1c4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a5f      	ldr	r2, [pc, #380]	; (800277c <HAL_ADC_Start_DMA+0x1c8>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	0c9a      	lsrs	r2, r3, #18
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800260c:	e002      	b.n	8002614 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	3b01      	subs	r3, #1
 8002612:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f9      	bne.n	800260e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002628:	d107      	bne.n	800263a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002638:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b01      	cmp	r3, #1
 8002646:	f040 8086 	bne.w	8002756 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002674:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002688:	d106      	bne.n	8002698 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f023 0206 	bic.w	r2, r3, #6
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
 8002696:	e002      	b.n	800269e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026a6:	4b36      	ldr	r3, [pc, #216]	; (8002780 <HAL_ADC_Start_DMA+0x1cc>)
 80026a8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	4a35      	ldr	r2, [pc, #212]	; (8002784 <HAL_ADC_Start_DMA+0x1d0>)
 80026b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b6:	4a34      	ldr	r2, [pc, #208]	; (8002788 <HAL_ADC_Start_DMA+0x1d4>)
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	4a33      	ldr	r2, [pc, #204]	; (800278c <HAL_ADC_Start_DMA+0x1d8>)
 80026c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80026da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	334c      	adds	r3, #76	; 0x4c
 80026f6:	4619      	mov	r1, r3
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f000 fcd8 	bl	80030b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10f      	bne.n	800272c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d129      	bne.n	800276e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	e020      	b.n	800276e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a17      	ldr	r2, [pc, #92]	; (8002790 <HAL_ADC_Start_DMA+0x1dc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d11b      	bne.n	800276e <HAL_ADC_Start_DMA+0x1ba>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d114      	bne.n	800276e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	e00b      	b.n	800276e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f043 0210 	orr.w	r2, r3, #16
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	2000001c 	.word	0x2000001c
 800277c:	431bde83 	.word	0x431bde83
 8002780:	40012300 	.word	0x40012300
 8002784:	08002c2d 	.word	0x08002c2d
 8002788:	08002ce7 	.word	0x08002ce7
 800278c:	08002d03 	.word	0x08002d03
 8002790:	40012000 	.word	0x40012000

08002794 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x1c>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e113      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x244>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b09      	cmp	r3, #9
 80027fa:	d925      	bls.n	8002848 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68d9      	ldr	r1, [r3, #12]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	3b1e      	subs	r3, #30
 8002812:	2207      	movs	r2, #7
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43da      	mvns	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	400a      	ands	r2, r1
 8002820:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68d9      	ldr	r1, [r3, #12]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	b29b      	uxth	r3, r3
 8002832:	4618      	mov	r0, r3
 8002834:	4603      	mov	r3, r0
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4403      	add	r3, r0
 800283a:	3b1e      	subs	r3, #30
 800283c:	409a      	lsls	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	e022      	b.n	800288e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6919      	ldr	r1, [r3, #16]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	b29b      	uxth	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	2207      	movs	r2, #7
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43da      	mvns	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	400a      	ands	r2, r1
 800286a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6919      	ldr	r1, [r3, #16]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	4618      	mov	r0, r3
 800287e:	4603      	mov	r3, r0
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4403      	add	r3, r0
 8002884:	409a      	lsls	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b06      	cmp	r3, #6
 8002894:	d824      	bhi.n	80028e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	3b05      	subs	r3, #5
 80028a8:	221f      	movs	r2, #31
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	400a      	ands	r2, r1
 80028b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	4618      	mov	r0, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	3b05      	subs	r3, #5
 80028d2:	fa00 f203 	lsl.w	r2, r0, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	635a      	str	r2, [r3, #52]	; 0x34
 80028de:	e04c      	b.n	800297a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	d824      	bhi.n	8002932 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	3b23      	subs	r3, #35	; 0x23
 80028fa:	221f      	movs	r2, #31
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43da      	mvns	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	400a      	ands	r2, r1
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	b29b      	uxth	r3, r3
 8002916:	4618      	mov	r0, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	3b23      	subs	r3, #35	; 0x23
 8002924:	fa00 f203 	lsl.w	r2, r0, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
 8002930:	e023      	b.n	800297a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	3b41      	subs	r3, #65	; 0x41
 8002944:	221f      	movs	r2, #31
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	400a      	ands	r2, r1
 8002952:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	4618      	mov	r0, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	3b41      	subs	r3, #65	; 0x41
 800296e:	fa00 f203 	lsl.w	r2, r0, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800297a:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <HAL_ADC_ConfigChannel+0x250>)
 800297c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a28      	ldr	r2, [pc, #160]	; (8002a24 <HAL_ADC_ConfigChannel+0x254>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d10f      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1d8>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b12      	cmp	r3, #18
 800298e:	d10b      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1d      	ldr	r2, [pc, #116]	; (8002a24 <HAL_ADC_ConfigChannel+0x254>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d12b      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x23a>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1c      	ldr	r2, [pc, #112]	; (8002a28 <HAL_ADC_ConfigChannel+0x258>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <HAL_ADC_ConfigChannel+0x1f4>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b11      	cmp	r3, #17
 80029c2:	d122      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a11      	ldr	r2, [pc, #68]	; (8002a28 <HAL_ADC_ConfigChannel+0x258>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d111      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <HAL_ADC_ConfigChannel+0x25c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <HAL_ADC_ConfigChannel+0x260>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	0c9a      	lsrs	r2, r3, #18
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029fc:	e002      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f9      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	40012300 	.word	0x40012300
 8002a24:	40012000 	.word	0x40012000
 8002a28:	10000012 	.word	0x10000012
 8002a2c:	2000001c 	.word	0x2000001c
 8002a30:	431bde83 	.word	0x431bde83

08002a34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a3c:	4b79      	ldr	r3, [pc, #484]	; (8002c24 <ADC_Init+0x1f0>)
 8002a3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	021a      	lsls	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6899      	ldr	r1, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	4a58      	ldr	r2, [pc, #352]	; (8002c28 <ADC_Init+0x1f4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d022      	beq.n	8002b12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ada:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6899      	ldr	r1, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	e00f      	b.n	8002b32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0202 	bic.w	r2, r2, #2
 8002b40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6899      	ldr	r1, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7e1b      	ldrb	r3, [r3, #24]
 8002b4c:	005a      	lsls	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01b      	beq.n	8002b98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6859      	ldr	r1, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	035a      	lsls	r2, r3, #13
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	e007      	b.n	8002ba8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	051a      	lsls	r2, r3, #20
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6899      	ldr	r1, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bea:	025a      	lsls	r2, r3, #9
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6899      	ldr	r1, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	029a      	lsls	r2, r3, #10
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	609a      	str	r2, [r3, #8]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40012300 	.word	0x40012300
 8002c28:	0f000001 	.word	0x0f000001

08002c2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c38:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d13c      	bne.n	8002cc0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d12b      	bne.n	8002cb8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d127      	bne.n	8002cb8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d006      	beq.n	8002c84 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d119      	bne.n	8002cb8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0220 	bic.w	r2, r2, #32
 8002c92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f043 0201 	orr.w	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f7ff fd6b 	bl	8002794 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cbe:	e00e      	b.n	8002cde <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f7ff fd75 	bl	80027bc <HAL_ADC_ErrorCallback>
}
 8002cd2:	e004      	b.n	8002cde <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	4798      	blx	r3
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7ff fd57 	bl	80027a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2240      	movs	r2, #64	; 0x40
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f043 0204 	orr.w	r2, r3, #4
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f7ff fd4a 	bl	80027bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d28:	bf00      	nop
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <__NVIC_SetPriorityGrouping+0x44>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d62:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <__NVIC_SetPriorityGrouping+0x44>)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	60d3      	str	r3, [r2, #12]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d7c:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <__NVIC_GetPriorityGrouping+0x18>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	f003 0307 	and.w	r3, r3, #7
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	db0b      	blt.n	8002dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	f003 021f 	and.w	r2, r3, #31
 8002dac:	4907      	ldr	r1, [pc, #28]	; (8002dcc <__NVIC_EnableIRQ+0x38>)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	2001      	movs	r0, #1
 8002db6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	e000e100 	.word	0xe000e100

08002dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	6039      	str	r1, [r7, #0]
 8002dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	db0a      	blt.n	8002dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	490c      	ldr	r1, [pc, #48]	; (8002e1c <__NVIC_SetPriority+0x4c>)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	0112      	lsls	r2, r2, #4
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	440b      	add	r3, r1
 8002df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df8:	e00a      	b.n	8002e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	4908      	ldr	r1, [pc, #32]	; (8002e20 <__NVIC_SetPriority+0x50>)
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	3b04      	subs	r3, #4
 8002e08:	0112      	lsls	r2, r2, #4
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	761a      	strb	r2, [r3, #24]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000e100 	.word	0xe000e100
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	; 0x24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f1c3 0307 	rsb	r3, r3, #7
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	bf28      	it	cs
 8002e42:	2304      	movcs	r3, #4
 8002e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	2b06      	cmp	r3, #6
 8002e4c:	d902      	bls.n	8002e54 <NVIC_EncodePriority+0x30>
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3b03      	subs	r3, #3
 8002e52:	e000      	b.n	8002e56 <NVIC_EncodePriority+0x32>
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e58:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43da      	mvns	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	401a      	ands	r2, r3
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	43d9      	mvns	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e7c:	4313      	orrs	r3, r2
         );
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3724      	adds	r7, #36	; 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e9c:	d301      	bcc.n	8002ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e00f      	b.n	8002ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <SysTick_Config+0x40>)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eaa:	210f      	movs	r1, #15
 8002eac:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb0:	f7ff ff8e 	bl	8002dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <SysTick_Config+0x40>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eba:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <SysTick_Config+0x40>)
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	e000e010 	.word	0xe000e010

08002ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ff29 	bl	8002d30 <__NVIC_SetPriorityGrouping>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef8:	f7ff ff3e 	bl	8002d78 <__NVIC_GetPriorityGrouping>
 8002efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68b9      	ldr	r1, [r7, #8]
 8002f02:	6978      	ldr	r0, [r7, #20]
 8002f04:	f7ff ff8e 	bl	8002e24 <NVIC_EncodePriority>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff ff5d 	bl	8002dd0 <__NVIC_SetPriority>
}
 8002f16:	bf00      	nop
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	4603      	mov	r3, r0
 8002f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff31 	bl	8002d94 <__NVIC_EnableIRQ>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff ffa2 	bl	8002e8c <SysTick_Config>
 8002f48:	4603      	mov	r3, r0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f60:	f7ff fad8 	bl	8002514 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e099      	b.n	80030a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f90:	e00f      	b.n	8002fb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f92:	f7ff fabf 	bl	8002514 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b05      	cmp	r3, #5
 8002f9e:	d908      	bls.n	8002fb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2203      	movs	r2, #3
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e078      	b.n	80030a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1e8      	bne.n	8002f92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4b38      	ldr	r3, [pc, #224]	; (80030ac <HAL_DMA_Init+0x158>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	2b04      	cmp	r3, #4
 800300a:	d107      	bne.n	800301c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	4313      	orrs	r3, r2
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f023 0307 	bic.w	r3, r3, #7
 8003032:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	2b04      	cmp	r3, #4
 8003044:	d117      	bne.n	8003076 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00e      	beq.n	8003076 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fa6f 	bl	800353c <DMA_CheckFifoParam>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2240      	movs	r2, #64	; 0x40
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003072:	2301      	movs	r3, #1
 8003074:	e016      	b.n	80030a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fa26 	bl	80034d0 <DMA_CalcBaseAndBitshift>
 8003084:	4603      	mov	r3, r0
 8003086:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	223f      	movs	r2, #63	; 0x3f
 800308e:	409a      	lsls	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	f010803f 	.word	0xf010803f

080030b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_DMA_Start_IT+0x26>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e040      	b.n	8003158 <HAL_DMA_Start_IT+0xa8>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d12f      	bne.n	800314a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2202      	movs	r2, #2
 80030ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f9b8 	bl	8003474 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	223f      	movs	r2, #63	; 0x3f
 800310a:	409a      	lsls	r2, r3
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0216 	orr.w	r2, r2, #22
 800311e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0208 	orr.w	r2, r2, #8
 8003136:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	e005      	b.n	8003156 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003152:	2302      	movs	r3, #2
 8003154:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003156:	7dfb      	ldrb	r3, [r7, #23]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800316c:	4b8e      	ldr	r3, [pc, #568]	; (80033a8 <HAL_DMA_IRQHandler+0x248>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a8e      	ldr	r2, [pc, #568]	; (80033ac <HAL_DMA_IRQHandler+0x24c>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	0a9b      	lsrs	r3, r3, #10
 8003178:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	2208      	movs	r2, #8
 800318c:	409a      	lsls	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4013      	ands	r3, r2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d01a      	beq.n	80031cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d013      	beq.n	80031cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0204 	bic.w	r2, r2, #4
 80031b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	2208      	movs	r2, #8
 80031ba:	409a      	lsls	r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d0:	2201      	movs	r2, #1
 80031d2:	409a      	lsls	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d012      	beq.n	8003202 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00b      	beq.n	8003202 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ee:	2201      	movs	r2, #1
 80031f0:	409a      	lsls	r2, r3
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fa:	f043 0202 	orr.w	r2, r3, #2
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003206:	2204      	movs	r2, #4
 8003208:	409a      	lsls	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d012      	beq.n	8003238 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00b      	beq.n	8003238 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003224:	2204      	movs	r2, #4
 8003226:	409a      	lsls	r2, r3
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	f043 0204 	orr.w	r2, r3, #4
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	2210      	movs	r2, #16
 800323e:	409a      	lsls	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d043      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d03c      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325a:	2210      	movs	r2, #16
 800325c:	409a      	lsls	r2, r3
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d018      	beq.n	80032a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d108      	bne.n	8003290 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d024      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	4798      	blx	r3
 800328e:	e01f      	b.n	80032d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01b      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	4798      	blx	r3
 80032a0:	e016      	b.n	80032d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d107      	bne.n	80032c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0208 	bic.w	r2, r2, #8
 80032be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d4:	2220      	movs	r2, #32
 80032d6:	409a      	lsls	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 808f 	beq.w	8003400 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8087 	beq.w	8003400 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	2220      	movs	r2, #32
 80032f8:	409a      	lsls	r2, r3
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b05      	cmp	r3, #5
 8003308:	d136      	bne.n	8003378 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0216 	bic.w	r2, r2, #22
 8003318:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003328:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d103      	bne.n	800333a <HAL_DMA_IRQHandler+0x1da>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0208 	bic.w	r2, r2, #8
 8003348:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334e:	223f      	movs	r2, #63	; 0x3f
 8003350:	409a      	lsls	r2, r3
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800336a:	2b00      	cmp	r3, #0
 800336c:	d07e      	beq.n	800346c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4798      	blx	r3
        }
        return;
 8003376:	e079      	b.n	800346c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d01d      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10d      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003398:	2b00      	cmp	r3, #0
 800339a:	d031      	beq.n	8003400 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
 80033a4:	e02c      	b.n	8003400 <HAL_DMA_IRQHandler+0x2a0>
 80033a6:	bf00      	nop
 80033a8:	2000001c 	.word	0x2000001c
 80033ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d023      	beq.n	8003400 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
 80033c0:	e01e      	b.n	8003400 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10f      	bne.n	80033f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0210 	bic.w	r2, r2, #16
 80033de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	2b00      	cmp	r3, #0
 8003406:	d032      	beq.n	800346e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d022      	beq.n	800345a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2205      	movs	r2, #5
 8003418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	3301      	adds	r3, #1
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	429a      	cmp	r2, r3
 8003436:	d307      	bcc.n	8003448 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f2      	bne.n	800342c <HAL_DMA_IRQHandler+0x2cc>
 8003446:	e000      	b.n	800344a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003448:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	4798      	blx	r3
 800346a:	e000      	b.n	800346e <HAL_DMA_IRQHandler+0x30e>
        return;
 800346c:	bf00      	nop
    }
  }
}
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003490:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d108      	bne.n	80034b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034b2:	e007      	b.n	80034c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	60da      	str	r2, [r3, #12]
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	3b10      	subs	r3, #16
 80034e0:	4a14      	ldr	r2, [pc, #80]	; (8003534 <DMA_CalcBaseAndBitshift+0x64>)
 80034e2:	fba2 2303 	umull	r2, r3, r2, r3
 80034e6:	091b      	lsrs	r3, r3, #4
 80034e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034ea:	4a13      	ldr	r2, [pc, #76]	; (8003538 <DMA_CalcBaseAndBitshift+0x68>)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d909      	bls.n	8003512 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003506:	f023 0303 	bic.w	r3, r3, #3
 800350a:	1d1a      	adds	r2, r3, #4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	659a      	str	r2, [r3, #88]	; 0x58
 8003510:	e007      	b.n	8003522 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800351a:	f023 0303 	bic.w	r3, r3, #3
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	aaaaaaab 	.word	0xaaaaaaab
 8003538:	08006a28 	.word	0x08006a28

0800353c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d11f      	bne.n	8003596 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b03      	cmp	r3, #3
 800355a:	d856      	bhi.n	800360a <DMA_CheckFifoParam+0xce>
 800355c:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <DMA_CheckFifoParam+0x28>)
 800355e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003562:	bf00      	nop
 8003564:	08003575 	.word	0x08003575
 8003568:	08003587 	.word	0x08003587
 800356c:	08003575 	.word	0x08003575
 8003570:	0800360b 	.word	0x0800360b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d046      	beq.n	800360e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003584:	e043      	b.n	800360e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800358e:	d140      	bne.n	8003612 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003594:	e03d      	b.n	8003612 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359e:	d121      	bne.n	80035e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d837      	bhi.n	8003616 <DMA_CheckFifoParam+0xda>
 80035a6:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <DMA_CheckFifoParam+0x70>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035bd 	.word	0x080035bd
 80035b0:	080035c3 	.word	0x080035c3
 80035b4:	080035bd 	.word	0x080035bd
 80035b8:	080035d5 	.word	0x080035d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	73fb      	strb	r3, [r7, #15]
      break;
 80035c0:	e030      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d025      	beq.n	800361a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d2:	e022      	b.n	800361a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035dc:	d11f      	bne.n	800361e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035e2:	e01c      	b.n	800361e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d903      	bls.n	80035f2 <DMA_CheckFifoParam+0xb6>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d003      	beq.n	80035f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035f0:	e018      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
      break;
 80035f6:	e015      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00e      	beq.n	8003622 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
      break;
 8003608:	e00b      	b.n	8003622 <DMA_CheckFifoParam+0xe6>
      break;
 800360a:	bf00      	nop
 800360c:	e00a      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
      break;
 800360e:	bf00      	nop
 8003610:	e008      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
      break;
 8003612:	bf00      	nop
 8003614:	e006      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
      break;
 8003616:	bf00      	nop
 8003618:	e004      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
      break;
 800361a:	bf00      	nop
 800361c:	e002      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
      break;   
 800361e:	bf00      	nop
 8003620:	e000      	b.n	8003624 <DMA_CheckFifoParam+0xe8>
      break;
 8003622:	bf00      	nop
    }
  } 
  
  return status; 
 8003624:	7bfb      	ldrb	r3, [r7, #15]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop

08003634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003634:	b480      	push	{r7}
 8003636:	b089      	sub	sp, #36	; 0x24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	e159      	b.n	8003904 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003650:	2201      	movs	r2, #1
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4013      	ands	r3, r2
 8003662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	429a      	cmp	r2, r3
 800366a:	f040 8148 	bne.w	80038fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b01      	cmp	r3, #1
 8003678:	d005      	beq.n	8003686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003682:	2b02      	cmp	r3, #2
 8003684:	d130      	bne.n	80036e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	2203      	movs	r2, #3
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4013      	ands	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036bc:	2201      	movs	r2, #1
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 0201 	and.w	r2, r3, #1
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d017      	beq.n	8003724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	2203      	movs	r2, #3
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d123      	bne.n	8003778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	08da      	lsrs	r2, r3, #3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3208      	adds	r2, #8
 8003738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800373c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	220f      	movs	r2, #15
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	08da      	lsrs	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3208      	adds	r2, #8
 8003772:	69b9      	ldr	r1, [r7, #24]
 8003774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	2203      	movs	r2, #3
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0203 	and.w	r2, r3, #3
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a2 	beq.w	80038fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	4b57      	ldr	r3, [pc, #348]	; (800391c <HAL_GPIO_Init+0x2e8>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	4a56      	ldr	r2, [pc, #344]	; (800391c <HAL_GPIO_Init+0x2e8>)
 80037c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037c8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ca:	4b54      	ldr	r3, [pc, #336]	; (800391c <HAL_GPIO_Init+0x2e8>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037d6:	4a52      	ldr	r2, [pc, #328]	; (8003920 <HAL_GPIO_Init+0x2ec>)
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	089b      	lsrs	r3, r3, #2
 80037dc:	3302      	adds	r3, #2
 80037de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	220f      	movs	r2, #15
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4013      	ands	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a49      	ldr	r2, [pc, #292]	; (8003924 <HAL_GPIO_Init+0x2f0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d019      	beq.n	8003836 <HAL_GPIO_Init+0x202>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a48      	ldr	r2, [pc, #288]	; (8003928 <HAL_GPIO_Init+0x2f4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <HAL_GPIO_Init+0x1fe>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a47      	ldr	r2, [pc, #284]	; (800392c <HAL_GPIO_Init+0x2f8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00d      	beq.n	800382e <HAL_GPIO_Init+0x1fa>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a46      	ldr	r2, [pc, #280]	; (8003930 <HAL_GPIO_Init+0x2fc>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d007      	beq.n	800382a <HAL_GPIO_Init+0x1f6>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a45      	ldr	r2, [pc, #276]	; (8003934 <HAL_GPIO_Init+0x300>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d101      	bne.n	8003826 <HAL_GPIO_Init+0x1f2>
 8003822:	2304      	movs	r3, #4
 8003824:	e008      	b.n	8003838 <HAL_GPIO_Init+0x204>
 8003826:	2307      	movs	r3, #7
 8003828:	e006      	b.n	8003838 <HAL_GPIO_Init+0x204>
 800382a:	2303      	movs	r3, #3
 800382c:	e004      	b.n	8003838 <HAL_GPIO_Init+0x204>
 800382e:	2302      	movs	r3, #2
 8003830:	e002      	b.n	8003838 <HAL_GPIO_Init+0x204>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_GPIO_Init+0x204>
 8003836:	2300      	movs	r3, #0
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	f002 0203 	and.w	r2, r2, #3
 800383e:	0092      	lsls	r2, r2, #2
 8003840:	4093      	lsls	r3, r2
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003848:	4935      	ldr	r1, [pc, #212]	; (8003920 <HAL_GPIO_Init+0x2ec>)
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	089b      	lsrs	r3, r3, #2
 800384e:	3302      	adds	r3, #2
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003856:	4b38      	ldr	r3, [pc, #224]	; (8003938 <HAL_GPIO_Init+0x304>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800387a:	4a2f      	ldr	r2, [pc, #188]	; (8003938 <HAL_GPIO_Init+0x304>)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003880:	4b2d      	ldr	r3, [pc, #180]	; (8003938 <HAL_GPIO_Init+0x304>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038a4:	4a24      	ldr	r2, [pc, #144]	; (8003938 <HAL_GPIO_Init+0x304>)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038aa:	4b23      	ldr	r3, [pc, #140]	; (8003938 <HAL_GPIO_Init+0x304>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	43db      	mvns	r3, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038ce:	4a1a      	ldr	r2, [pc, #104]	; (8003938 <HAL_GPIO_Init+0x304>)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038d4:	4b18      	ldr	r3, [pc, #96]	; (8003938 <HAL_GPIO_Init+0x304>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038f8:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <HAL_GPIO_Init+0x304>)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3301      	adds	r3, #1
 8003902:	61fb      	str	r3, [r7, #28]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	2b0f      	cmp	r3, #15
 8003908:	f67f aea2 	bls.w	8003650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	3724      	adds	r7, #36	; 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800
 8003920:	40013800 	.word	0x40013800
 8003924:	40020000 	.word	0x40020000
 8003928:	40020400 	.word	0x40020400
 800392c:	40020800 	.word	0x40020800
 8003930:	40020c00 	.word	0x40020c00
 8003934:	40021000 	.word	0x40021000
 8003938:	40013c00 	.word	0x40013c00

0800393c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	807b      	strh	r3, [r7, #2]
 8003948:	4613      	mov	r3, r2
 800394a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800394c:	787b      	ldrb	r3, [r7, #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003952:	887a      	ldrh	r2, [r7, #2]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003958:	e003      	b.n	8003962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800395a:	887b      	ldrh	r3, [r7, #2]
 800395c:	041a      	lsls	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	619a      	str	r2, [r3, #24]
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e267      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d075      	beq.n	8003a7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800398e:	4b88      	ldr	r3, [pc, #544]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b04      	cmp	r3, #4
 8003998:	d00c      	beq.n	80039b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399a:	4b85      	ldr	r3, [pc, #532]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d112      	bne.n	80039cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a6:	4b82      	ldr	r3, [pc, #520]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039b2:	d10b      	bne.n	80039cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b4:	4b7e      	ldr	r3, [pc, #504]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d05b      	beq.n	8003a78 <HAL_RCC_OscConfig+0x108>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d157      	bne.n	8003a78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e242      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d4:	d106      	bne.n	80039e4 <HAL_RCC_OscConfig+0x74>
 80039d6:	4b76      	ldr	r3, [pc, #472]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a75      	ldr	r2, [pc, #468]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 80039dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e01d      	b.n	8003a20 <HAL_RCC_OscConfig+0xb0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x98>
 80039ee:	4b70      	ldr	r3, [pc, #448]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a6f      	ldr	r2, [pc, #444]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 80039f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4b6d      	ldr	r3, [pc, #436]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a6c      	ldr	r2, [pc, #432]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e00b      	b.n	8003a20 <HAL_RCC_OscConfig+0xb0>
 8003a08:	4b69      	ldr	r3, [pc, #420]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a68      	ldr	r2, [pc, #416]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a65      	ldr	r2, [pc, #404]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fe fd74 	bl	8002514 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a30:	f7fe fd70 	bl	8002514 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e207      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a42:	4b5b      	ldr	r3, [pc, #364]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0xc0>
 8003a4e:	e014      	b.n	8003a7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a50:	f7fe fd60 	bl	8002514 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a58:	f7fe fd5c 	bl	8002514 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e1f3      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6a:	4b51      	ldr	r3, [pc, #324]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0xe8>
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d063      	beq.n	8003b4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a86:	4b4a      	ldr	r3, [pc, #296]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a92:	4b47      	ldr	r3, [pc, #284]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d11c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9e:	4b44      	ldr	r3, [pc, #272]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d116      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	4b41      	ldr	r3, [pc, #260]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x152>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d001      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e1c7      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac2:	4b3b      	ldr	r3, [pc, #236]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4937      	ldr	r1, [pc, #220]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad6:	e03a      	b.n	8003b4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d020      	beq.n	8003b22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae0:	4b34      	ldr	r3, [pc, #208]	; (8003bb4 <HAL_RCC_OscConfig+0x244>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae6:	f7fe fd15 	bl	8002514 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aee:	f7fe fd11 	bl	8002514 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e1a8      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b00:	4b2b      	ldr	r3, [pc, #172]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0c:	4b28      	ldr	r3, [pc, #160]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4925      	ldr	r1, [pc, #148]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	600b      	str	r3, [r1, #0]
 8003b20:	e015      	b.n	8003b4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b22:	4b24      	ldr	r3, [pc, #144]	; (8003bb4 <HAL_RCC_OscConfig+0x244>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7fe fcf4 	bl	8002514 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b30:	f7fe fcf0 	bl	8002514 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e187      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b42:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d036      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d016      	beq.n	8003b90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <HAL_RCC_OscConfig+0x248>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b68:	f7fe fcd4 	bl	8002514 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b70:	f7fe fcd0 	bl	8002514 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e167      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b82:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCC_OscConfig+0x240>)
 8003b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x200>
 8003b8e:	e01b      	b.n	8003bc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b90:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <HAL_RCC_OscConfig+0x248>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b96:	f7fe fcbd 	bl	8002514 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b9c:	e00e      	b.n	8003bbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b9e:	f7fe fcb9 	bl	8002514 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d907      	bls.n	8003bbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e150      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	42470000 	.word	0x42470000
 8003bb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bbc:	4b88      	ldr	r3, [pc, #544]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1ea      	bne.n	8003b9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8097 	beq.w	8003d04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bda:	4b81      	ldr	r3, [pc, #516]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10f      	bne.n	8003c06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	4b7d      	ldr	r3, [pc, #500]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	4a7c      	ldr	r2, [pc, #496]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf6:	4b7a      	ldr	r3, [pc, #488]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c02:	2301      	movs	r3, #1
 8003c04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c06:	4b77      	ldr	r3, [pc, #476]	; (8003de4 <HAL_RCC_OscConfig+0x474>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d118      	bne.n	8003c44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c12:	4b74      	ldr	r3, [pc, #464]	; (8003de4 <HAL_RCC_OscConfig+0x474>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a73      	ldr	r2, [pc, #460]	; (8003de4 <HAL_RCC_OscConfig+0x474>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1e:	f7fe fc79 	bl	8002514 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c26:	f7fe fc75 	bl	8002514 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e10c      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c38:	4b6a      	ldr	r3, [pc, #424]	; (8003de4 <HAL_RCC_OscConfig+0x474>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCC_OscConfig+0x2ea>
 8003c4c:	4b64      	ldr	r3, [pc, #400]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4a63      	ldr	r2, [pc, #396]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	6713      	str	r3, [r2, #112]	; 0x70
 8003c58:	e01c      	b.n	8003c94 <HAL_RCC_OscConfig+0x324>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b05      	cmp	r3, #5
 8003c60:	d10c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x30c>
 8003c62:	4b5f      	ldr	r3, [pc, #380]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	4a5e      	ldr	r2, [pc, #376]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003c68:	f043 0304 	orr.w	r3, r3, #4
 8003c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6e:	4b5c      	ldr	r3, [pc, #368]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a5b      	ldr	r2, [pc, #364]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7a:	e00b      	b.n	8003c94 <HAL_RCC_OscConfig+0x324>
 8003c7c:	4b58      	ldr	r3, [pc, #352]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	4a57      	ldr	r2, [pc, #348]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003c82:	f023 0301 	bic.w	r3, r3, #1
 8003c86:	6713      	str	r3, [r2, #112]	; 0x70
 8003c88:	4b55      	ldr	r3, [pc, #340]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8c:	4a54      	ldr	r2, [pc, #336]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003c8e:	f023 0304 	bic.w	r3, r3, #4
 8003c92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d015      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fe fc3a 	bl	8002514 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca4:	f7fe fc36 	bl	8002514 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e0cb      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cba:	4b49      	ldr	r3, [pc, #292]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0ee      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x334>
 8003cc6:	e014      	b.n	8003cf2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc8:	f7fe fc24 	bl	8002514 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd0:	f7fe fc20 	bl	8002514 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e0b5      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce6:	4b3e      	ldr	r3, [pc, #248]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1ee      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d105      	bne.n	8003d04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf8:	4b39      	ldr	r3, [pc, #228]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	4a38      	ldr	r2, [pc, #224]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80a1 	beq.w	8003e50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d0e:	4b34      	ldr	r3, [pc, #208]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d05c      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d141      	bne.n	8003da6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d22:	4b31      	ldr	r3, [pc, #196]	; (8003de8 <HAL_RCC_OscConfig+0x478>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fe fbf4 	bl	8002514 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fe fbf0 	bl	8002514 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e087      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d42:	4b27      	ldr	r3, [pc, #156]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69da      	ldr	r2, [r3, #28]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	019b      	lsls	r3, r3, #6
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	3b01      	subs	r3, #1
 8003d68:	041b      	lsls	r3, r3, #16
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	491b      	ldr	r1, [pc, #108]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d78:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <HAL_RCC_OscConfig+0x478>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7e:	f7fe fbc9 	bl	8002514 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d86:	f7fe fbc5 	bl	8002514 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e05c      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d98:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x416>
 8003da4:	e054      	b.n	8003e50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <HAL_RCC_OscConfig+0x478>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dac:	f7fe fbb2 	bl	8002514 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fe fbae 	bl	8002514 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e045      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc6:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x444>
 8003dd2:	e03d      	b.n	8003e50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d107      	bne.n	8003dec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e038      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
 8003de0:	40023800 	.word	0x40023800
 8003de4:	40007000 	.word	0x40007000
 8003de8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dec:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_RCC_OscConfig+0x4ec>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d028      	beq.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d121      	bne.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d11a      	bne.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d111      	bne.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	3b01      	subs	r3, #1
 8003e36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d107      	bne.n	8003e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e000      	b.n	8003e52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40023800 	.word	0x40023800

08003e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0cc      	b.n	800400e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e74:	4b68      	ldr	r3, [pc, #416]	; (8004018 <HAL_RCC_ClockConfig+0x1b8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d90c      	bls.n	8003e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b65      	ldr	r3, [pc, #404]	; (8004018 <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b63      	ldr	r3, [pc, #396]	; (8004018 <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0b8      	b.n	800400e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d020      	beq.n	8003eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb4:	4b59      	ldr	r3, [pc, #356]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	4a58      	ldr	r2, [pc, #352]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ebe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ecc:	4b53      	ldr	r3, [pc, #332]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	4a52      	ldr	r2, [pc, #328]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ed6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed8:	4b50      	ldr	r3, [pc, #320]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	494d      	ldr	r1, [pc, #308]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d044      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d107      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efe:	4b47      	ldr	r3, [pc, #284]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d119      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e07f      	b.n	800400e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d003      	beq.n	8003f1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1e:	4b3f      	ldr	r3, [pc, #252]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e06f      	b.n	800400e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2e:	4b3b      	ldr	r3, [pc, #236]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e067      	b.n	800400e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f3e:	4b37      	ldr	r3, [pc, #220]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f023 0203 	bic.w	r2, r3, #3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	4934      	ldr	r1, [pc, #208]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f50:	f7fe fae0 	bl	8002514 <HAL_GetTick>
 8003f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f56:	e00a      	b.n	8003f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f58:	f7fe fadc 	bl	8002514 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e04f      	b.n	800400e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6e:	4b2b      	ldr	r3, [pc, #172]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 020c 	and.w	r2, r3, #12
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d1eb      	bne.n	8003f58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f80:	4b25      	ldr	r3, [pc, #148]	; (8004018 <HAL_RCC_ClockConfig+0x1b8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d20c      	bcs.n	8003fa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8e:	4b22      	ldr	r3, [pc, #136]	; (8004018 <HAL_RCC_ClockConfig+0x1b8>)
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	4b20      	ldr	r3, [pc, #128]	; (8004018 <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e032      	b.n	800400e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb4:	4b19      	ldr	r3, [pc, #100]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4916      	ldr	r1, [pc, #88]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d009      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fd2:	4b12      	ldr	r3, [pc, #72]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	490e      	ldr	r1, [pc, #56]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fe6:	f000 f821 	bl	800402c <HAL_RCC_GetSysClockFreq>
 8003fea:	4602      	mov	r2, r0
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	490a      	ldr	r1, [pc, #40]	; (8004020 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff8:	5ccb      	ldrb	r3, [r1, r3]
 8003ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffe:	4a09      	ldr	r2, [pc, #36]	; (8004024 <HAL_RCC_ClockConfig+0x1c4>)
 8004000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <HAL_RCC_ClockConfig+0x1c8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe fa40 	bl	800248c <HAL_InitTick>

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40023c00 	.word	0x40023c00
 800401c:	40023800 	.word	0x40023800
 8004020:	08006a10 	.word	0x08006a10
 8004024:	2000001c 	.word	0x2000001c
 8004028:	20000020 	.word	0x20000020

0800402c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800402c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004030:	b094      	sub	sp, #80	; 0x50
 8004032:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	647b      	str	r3, [r7, #68]	; 0x44
 8004038:	2300      	movs	r3, #0
 800403a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800403c:	2300      	movs	r3, #0
 800403e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004044:	4b79      	ldr	r3, [pc, #484]	; (800422c <HAL_RCC_GetSysClockFreq+0x200>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 030c 	and.w	r3, r3, #12
 800404c:	2b08      	cmp	r3, #8
 800404e:	d00d      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0x40>
 8004050:	2b08      	cmp	r3, #8
 8004052:	f200 80e1 	bhi.w	8004218 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_RCC_GetSysClockFreq+0x34>
 800405a:	2b04      	cmp	r3, #4
 800405c:	d003      	beq.n	8004066 <HAL_RCC_GetSysClockFreq+0x3a>
 800405e:	e0db      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004060:	4b73      	ldr	r3, [pc, #460]	; (8004230 <HAL_RCC_GetSysClockFreq+0x204>)
 8004062:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004064:	e0db      	b.n	800421e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004066:	4b73      	ldr	r3, [pc, #460]	; (8004234 <HAL_RCC_GetSysClockFreq+0x208>)
 8004068:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800406a:	e0d8      	b.n	800421e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800406c:	4b6f      	ldr	r3, [pc, #444]	; (800422c <HAL_RCC_GetSysClockFreq+0x200>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004074:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004076:	4b6d      	ldr	r3, [pc, #436]	; (800422c <HAL_RCC_GetSysClockFreq+0x200>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d063      	beq.n	800414a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004082:	4b6a      	ldr	r3, [pc, #424]	; (800422c <HAL_RCC_GetSysClockFreq+0x200>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	099b      	lsrs	r3, r3, #6
 8004088:	2200      	movs	r2, #0
 800408a:	63bb      	str	r3, [r7, #56]	; 0x38
 800408c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800408e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004094:	633b      	str	r3, [r7, #48]	; 0x30
 8004096:	2300      	movs	r3, #0
 8004098:	637b      	str	r3, [r7, #52]	; 0x34
 800409a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800409e:	4622      	mov	r2, r4
 80040a0:	462b      	mov	r3, r5
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f04f 0100 	mov.w	r1, #0
 80040aa:	0159      	lsls	r1, r3, #5
 80040ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040b0:	0150      	lsls	r0, r2, #5
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4621      	mov	r1, r4
 80040b8:	1a51      	subs	r1, r2, r1
 80040ba:	6139      	str	r1, [r7, #16]
 80040bc:	4629      	mov	r1, r5
 80040be:	eb63 0301 	sbc.w	r3, r3, r1
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040d0:	4659      	mov	r1, fp
 80040d2:	018b      	lsls	r3, r1, #6
 80040d4:	4651      	mov	r1, sl
 80040d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040da:	4651      	mov	r1, sl
 80040dc:	018a      	lsls	r2, r1, #6
 80040de:	4651      	mov	r1, sl
 80040e0:	ebb2 0801 	subs.w	r8, r2, r1
 80040e4:	4659      	mov	r1, fp
 80040e6:	eb63 0901 	sbc.w	r9, r3, r1
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040fe:	4690      	mov	r8, r2
 8004100:	4699      	mov	r9, r3
 8004102:	4623      	mov	r3, r4
 8004104:	eb18 0303 	adds.w	r3, r8, r3
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	462b      	mov	r3, r5
 800410c:	eb49 0303 	adc.w	r3, r9, r3
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800411e:	4629      	mov	r1, r5
 8004120:	024b      	lsls	r3, r1, #9
 8004122:	4621      	mov	r1, r4
 8004124:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004128:	4621      	mov	r1, r4
 800412a:	024a      	lsls	r2, r1, #9
 800412c:	4610      	mov	r0, r2
 800412e:	4619      	mov	r1, r3
 8004130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004132:	2200      	movs	r2, #0
 8004134:	62bb      	str	r3, [r7, #40]	; 0x28
 8004136:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004138:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800413c:	f7fc fd08 	bl	8000b50 <__aeabi_uldivmod>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4613      	mov	r3, r2
 8004146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004148:	e058      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800414a:	4b38      	ldr	r3, [pc, #224]	; (800422c <HAL_RCC_GetSysClockFreq+0x200>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	099b      	lsrs	r3, r3, #6
 8004150:	2200      	movs	r2, #0
 8004152:	4618      	mov	r0, r3
 8004154:	4611      	mov	r1, r2
 8004156:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800415a:	623b      	str	r3, [r7, #32]
 800415c:	2300      	movs	r3, #0
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
 8004160:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004164:	4642      	mov	r2, r8
 8004166:	464b      	mov	r3, r9
 8004168:	f04f 0000 	mov.w	r0, #0
 800416c:	f04f 0100 	mov.w	r1, #0
 8004170:	0159      	lsls	r1, r3, #5
 8004172:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004176:	0150      	lsls	r0, r2, #5
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4641      	mov	r1, r8
 800417e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004182:	4649      	mov	r1, r9
 8004184:	eb63 0b01 	sbc.w	fp, r3, r1
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004194:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004198:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800419c:	ebb2 040a 	subs.w	r4, r2, sl
 80041a0:	eb63 050b 	sbc.w	r5, r3, fp
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	00eb      	lsls	r3, r5, #3
 80041ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041b2:	00e2      	lsls	r2, r4, #3
 80041b4:	4614      	mov	r4, r2
 80041b6:	461d      	mov	r5, r3
 80041b8:	4643      	mov	r3, r8
 80041ba:	18e3      	adds	r3, r4, r3
 80041bc:	603b      	str	r3, [r7, #0]
 80041be:	464b      	mov	r3, r9
 80041c0:	eb45 0303 	adc.w	r3, r5, r3
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041d2:	4629      	mov	r1, r5
 80041d4:	028b      	lsls	r3, r1, #10
 80041d6:	4621      	mov	r1, r4
 80041d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041dc:	4621      	mov	r1, r4
 80041de:	028a      	lsls	r2, r1, #10
 80041e0:	4610      	mov	r0, r2
 80041e2:	4619      	mov	r1, r3
 80041e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e6:	2200      	movs	r2, #0
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	61fa      	str	r2, [r7, #28]
 80041ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041f0:	f7fc fcae 	bl	8000b50 <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4613      	mov	r3, r2
 80041fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <HAL_RCC_GetSysClockFreq+0x200>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	0c1b      	lsrs	r3, r3, #16
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	3301      	adds	r3, #1
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800420c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800420e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004210:	fbb2 f3f3 	udiv	r3, r2, r3
 8004214:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004216:	e002      	b.n	800421e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_RCC_GetSysClockFreq+0x204>)
 800421a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800421c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800421e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004220:	4618      	mov	r0, r3
 8004222:	3750      	adds	r7, #80	; 0x50
 8004224:	46bd      	mov	sp, r7
 8004226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800422a:	bf00      	nop
 800422c:	40023800 	.word	0x40023800
 8004230:	00f42400 	.word	0x00f42400
 8004234:	007a1200 	.word	0x007a1200

08004238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800423c:	4b03      	ldr	r3, [pc, #12]	; (800424c <HAL_RCC_GetHCLKFreq+0x14>)
 800423e:	681b      	ldr	r3, [r3, #0]
}
 8004240:	4618      	mov	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	2000001c 	.word	0x2000001c

08004250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004254:	f7ff fff0 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 8004258:	4602      	mov	r2, r0
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	0a9b      	lsrs	r3, r3, #10
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	4903      	ldr	r1, [pc, #12]	; (8004274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004266:	5ccb      	ldrb	r3, [r1, r3]
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40023800 	.word	0x40023800
 8004274:	08006a20 	.word	0x08006a20

08004278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800427c:	f7ff ffdc 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 8004280:	4602      	mov	r2, r0
 8004282:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	0b5b      	lsrs	r3, r3, #13
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	4903      	ldr	r1, [pc, #12]	; (800429c <HAL_RCC_GetPCLK2Freq+0x24>)
 800428e:	5ccb      	ldrb	r3, [r1, r3]
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004294:	4618      	mov	r0, r3
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40023800 	.word	0x40023800
 800429c:	08006a20 	.word	0x08006a20

080042a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e041      	b.n	8004336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fd ff54 	bl	8002174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	4619      	mov	r1, r3
 80042de:	4610      	mov	r0, r2
 80042e0:	f000 fdd8 	bl	8004e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d001      	beq.n	8004358 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e03c      	b.n	80043d2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <HAL_TIM_Base_Start+0xa0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d018      	beq.n	800439c <HAL_TIM_Base_Start+0x5c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004372:	d013      	beq.n	800439c <HAL_TIM_Base_Start+0x5c>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1a      	ldr	r2, [pc, #104]	; (80043e4 <HAL_TIM_Base_Start+0xa4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00e      	beq.n	800439c <HAL_TIM_Base_Start+0x5c>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a19      	ldr	r2, [pc, #100]	; (80043e8 <HAL_TIM_Base_Start+0xa8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d009      	beq.n	800439c <HAL_TIM_Base_Start+0x5c>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a17      	ldr	r2, [pc, #92]	; (80043ec <HAL_TIM_Base_Start+0xac>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_TIM_Base_Start+0x5c>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a16      	ldr	r2, [pc, #88]	; (80043f0 <HAL_TIM_Base_Start+0xb0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d111      	bne.n	80043c0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b06      	cmp	r3, #6
 80043ac:	d010      	beq.n	80043d0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043be:	e007      	b.n	80043d0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40010000 	.word	0x40010000
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40000800 	.word	0x40000800
 80043ec:	40000c00 	.word	0x40000c00
 80043f0:	40014000 	.word	0x40014000

080043f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	d001      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e044      	b.n	8004496 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a1e      	ldr	r2, [pc, #120]	; (80044a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d018      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x6c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004436:	d013      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x6c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1a      	ldr	r2, [pc, #104]	; (80044a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00e      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x6c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a19      	ldr	r2, [pc, #100]	; (80044ac <HAL_TIM_Base_Start_IT+0xb8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d009      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x6c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a17      	ldr	r2, [pc, #92]	; (80044b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x6c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a16      	ldr	r2, [pc, #88]	; (80044b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d111      	bne.n	8004484 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b06      	cmp	r3, #6
 8004470:	d010      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0201 	orr.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004482:	e007      	b.n	8004494 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40010000 	.word	0x40010000
 80044a8:	40000400 	.word	0x40000400
 80044ac:	40000800 	.word	0x40000800
 80044b0:	40000c00 	.word	0x40000c00
 80044b4:	40014000 	.word	0x40014000

080044b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e041      	b.n	800454e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fd fe26 	bl	8002130 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f000 fccc 	bl	8004e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <HAL_TIM_PWM_Start+0x24>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	bf14      	ite	ne
 8004574:	2301      	movne	r3, #1
 8004576:	2300      	moveq	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	e022      	b.n	80045c2 <HAL_TIM_PWM_Start+0x6a>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b04      	cmp	r3, #4
 8004580:	d109      	bne.n	8004596 <HAL_TIM_PWM_Start+0x3e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b01      	cmp	r3, #1
 800458c:	bf14      	ite	ne
 800458e:	2301      	movne	r3, #1
 8004590:	2300      	moveq	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	e015      	b.n	80045c2 <HAL_TIM_PWM_Start+0x6a>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d109      	bne.n	80045b0 <HAL_TIM_PWM_Start+0x58>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	bf14      	ite	ne
 80045a8:	2301      	movne	r3, #1
 80045aa:	2300      	moveq	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	e008      	b.n	80045c2 <HAL_TIM_PWM_Start+0x6a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	bf14      	ite	ne
 80045bc:	2301      	movne	r3, #1
 80045be:	2300      	moveq	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e068      	b.n	800469c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d104      	bne.n	80045da <HAL_TIM_PWM_Start+0x82>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d8:	e013      	b.n	8004602 <HAL_TIM_PWM_Start+0xaa>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d104      	bne.n	80045ea <HAL_TIM_PWM_Start+0x92>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045e8:	e00b      	b.n	8004602 <HAL_TIM_PWM_Start+0xaa>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d104      	bne.n	80045fa <HAL_TIM_PWM_Start+0xa2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045f8:	e003      	b.n	8004602 <HAL_TIM_PWM_Start+0xaa>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2201      	movs	r2, #1
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fee8 	bl	80053e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a23      	ldr	r2, [pc, #140]	; (80046a4 <HAL_TIM_PWM_Start+0x14c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d107      	bne.n	800462a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004628:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a1d      	ldr	r2, [pc, #116]	; (80046a4 <HAL_TIM_PWM_Start+0x14c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d018      	beq.n	8004666 <HAL_TIM_PWM_Start+0x10e>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463c:	d013      	beq.n	8004666 <HAL_TIM_PWM_Start+0x10e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a19      	ldr	r2, [pc, #100]	; (80046a8 <HAL_TIM_PWM_Start+0x150>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00e      	beq.n	8004666 <HAL_TIM_PWM_Start+0x10e>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a17      	ldr	r2, [pc, #92]	; (80046ac <HAL_TIM_PWM_Start+0x154>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d009      	beq.n	8004666 <HAL_TIM_PWM_Start+0x10e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a16      	ldr	r2, [pc, #88]	; (80046b0 <HAL_TIM_PWM_Start+0x158>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d004      	beq.n	8004666 <HAL_TIM_PWM_Start+0x10e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a14      	ldr	r2, [pc, #80]	; (80046b4 <HAL_TIM_PWM_Start+0x15c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d111      	bne.n	800468a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b06      	cmp	r3, #6
 8004676:	d010      	beq.n	800469a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004688:	e007      	b.n	800469a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40010000 	.word	0x40010000
 80046a8:	40000400 	.word	0x40000400
 80046ac:	40000800 	.word	0x40000800
 80046b0:	40000c00 	.word	0x40000c00
 80046b4:	40014000 	.word	0x40014000

080046b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e097      	b.n	80047fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fd fd6d 	bl	80021c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2202      	movs	r2, #2
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046fc:	f023 0307 	bic.w	r3, r3, #7
 8004700:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3304      	adds	r3, #4
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f000 fbc1 	bl	8004e94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473a:	f023 0303 	bic.w	r3, r3, #3
 800473e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	4313      	orrs	r3, r2
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004758:	f023 030c 	bic.w	r3, r3, #12
 800475c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004768:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	4313      	orrs	r3, r2
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	011a      	lsls	r2, r3, #4
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	031b      	lsls	r3, r3, #12
 8004788:	4313      	orrs	r3, r2
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004796:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800479e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	4313      	orrs	r3, r2
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004814:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800481c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004824:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800482c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d110      	bne.n	8004856 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d102      	bne.n	8004840 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800483a:	7b7b      	ldrb	r3, [r7, #13]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d001      	beq.n	8004844 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e069      	b.n	8004918 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004854:	e031      	b.n	80048ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b04      	cmp	r3, #4
 800485a:	d110      	bne.n	800487e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800485c:	7bbb      	ldrb	r3, [r7, #14]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d102      	bne.n	8004868 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004862:	7b3b      	ldrb	r3, [r7, #12]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d001      	beq.n	800486c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e055      	b.n	8004918 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800487c:	e01d      	b.n	80048ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d108      	bne.n	8004896 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004884:	7bbb      	ldrb	r3, [r7, #14]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d105      	bne.n	8004896 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800488a:	7b7b      	ldrb	r3, [r7, #13]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d102      	bne.n	8004896 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004890:	7b3b      	ldrb	r3, [r7, #12]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d001      	beq.n	800489a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e03e      	b.n	8004918 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2202      	movs	r2, #2
 800489e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2202      	movs	r2, #2
 80048a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2202      	movs	r2, #2
 80048ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2202      	movs	r2, #2
 80048b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_TIM_Encoder_Start+0xc4>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d008      	beq.n	80048d8 <HAL_TIM_Encoder_Start+0xd4>
 80048c6:	e00f      	b.n	80048e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2201      	movs	r2, #1
 80048ce:	2100      	movs	r1, #0
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fd85 	bl	80053e0 <TIM_CCxChannelCmd>
      break;
 80048d6:	e016      	b.n	8004906 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2201      	movs	r2, #1
 80048de:	2104      	movs	r1, #4
 80048e0:	4618      	mov	r0, r3
 80048e2:	f000 fd7d 	bl	80053e0 <TIM_CCxChannelCmd>
      break;
 80048e6:	e00e      	b.n	8004906 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2201      	movs	r2, #1
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fd75 	bl	80053e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2201      	movs	r2, #1
 80048fc:	2104      	movs	r1, #4
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fd6e 	bl	80053e0 <TIM_CCxChannelCmd>
      break;
 8004904:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0201 	orr.w	r2, r2, #1
 8004914:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b02      	cmp	r3, #2
 8004934:	d122      	bne.n	800497c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b02      	cmp	r3, #2
 8004942:	d11b      	bne.n	800497c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0202 	mvn.w	r2, #2
 800494c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa77 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fa69 	bl	8004e42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fa7a 	bl	8004e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b04      	cmp	r3, #4
 8004988:	d122      	bne.n	80049d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b04      	cmp	r3, #4
 8004996:	d11b      	bne.n	80049d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f06f 0204 	mvn.w	r2, #4
 80049a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fa4d 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 80049bc:	e005      	b.n	80049ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa3f 	bl	8004e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fa50 	bl	8004e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d122      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d11b      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0208 	mvn.w	r2, #8
 80049f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2204      	movs	r2, #4
 80049fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fa23 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fa15 	bl	8004e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fa26 	bl	8004e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d122      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b10      	cmp	r3, #16
 8004a3e:	d11b      	bne.n	8004a78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0210 	mvn.w	r2, #16
 8004a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f9f9 	bl	8004e56 <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f9eb 	bl	8004e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f9fc 	bl	8004e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d10e      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d107      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0201 	mvn.w	r2, #1
 8004a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fc fd0c 	bl	80014bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aae:	2b80      	cmp	r3, #128	; 0x80
 8004ab0:	d10e      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abc:	2b80      	cmp	r3, #128	; 0x80
 8004abe:	d107      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fd78 	bl	80055c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	d10e      	bne.n	8004afc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b40      	cmp	r3, #64	; 0x40
 8004aea:	d107      	bne.n	8004afc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f9c1 	bl	8004e7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d10e      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d107      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0220 	mvn.w	r2, #32
 8004b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fd42 	bl	80055ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b28:	bf00      	nop
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	e0ae      	b.n	8004cac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b0c      	cmp	r3, #12
 8004b5a:	f200 809f 	bhi.w	8004c9c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b5e:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b64:	08004b99 	.word	0x08004b99
 8004b68:	08004c9d 	.word	0x08004c9d
 8004b6c:	08004c9d 	.word	0x08004c9d
 8004b70:	08004c9d 	.word	0x08004c9d
 8004b74:	08004bd9 	.word	0x08004bd9
 8004b78:	08004c9d 	.word	0x08004c9d
 8004b7c:	08004c9d 	.word	0x08004c9d
 8004b80:	08004c9d 	.word	0x08004c9d
 8004b84:	08004c1b 	.word	0x08004c1b
 8004b88:	08004c9d 	.word	0x08004c9d
 8004b8c:	08004c9d 	.word	0x08004c9d
 8004b90:	08004c9d 	.word	0x08004c9d
 8004b94:	08004c5b 	.word	0x08004c5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f9f8 	bl	8004f94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0208 	orr.w	r2, r2, #8
 8004bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0204 	bic.w	r2, r2, #4
 8004bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6999      	ldr	r1, [r3, #24]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	619a      	str	r2, [r3, #24]
      break;
 8004bd6:	e064      	b.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fa3e 	bl	8005060 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6999      	ldr	r1, [r3, #24]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	021a      	lsls	r2, r3, #8
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	619a      	str	r2, [r3, #24]
      break;
 8004c18:	e043      	b.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fa89 	bl	8005138 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0208 	orr.w	r2, r2, #8
 8004c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69da      	ldr	r2, [r3, #28]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0204 	bic.w	r2, r2, #4
 8004c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69d9      	ldr	r1, [r3, #28]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	61da      	str	r2, [r3, #28]
      break;
 8004c58:	e023      	b.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fad3 	bl	800520c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69d9      	ldr	r1, [r3, #28]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	021a      	lsls	r2, r3, #8
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	61da      	str	r2, [r3, #28]
      break;
 8004c9a:	e002      	b.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_TIM_ConfigClockSource+0x1c>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e0b4      	b.n	8004e3a <HAL_TIM_ConfigClockSource+0x186>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d08:	d03e      	beq.n	8004d88 <HAL_TIM_ConfigClockSource+0xd4>
 8004d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d0e:	f200 8087 	bhi.w	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d16:	f000 8086 	beq.w	8004e26 <HAL_TIM_ConfigClockSource+0x172>
 8004d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1e:	d87f      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d20:	2b70      	cmp	r3, #112	; 0x70
 8004d22:	d01a      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0xa6>
 8004d24:	2b70      	cmp	r3, #112	; 0x70
 8004d26:	d87b      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d28:	2b60      	cmp	r3, #96	; 0x60
 8004d2a:	d050      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0x11a>
 8004d2c:	2b60      	cmp	r3, #96	; 0x60
 8004d2e:	d877      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d30:	2b50      	cmp	r3, #80	; 0x50
 8004d32:	d03c      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0xfa>
 8004d34:	2b50      	cmp	r3, #80	; 0x50
 8004d36:	d873      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	d058      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0x13a>
 8004d3c:	2b40      	cmp	r3, #64	; 0x40
 8004d3e:	d86f      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d40:	2b30      	cmp	r3, #48	; 0x30
 8004d42:	d064      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x15a>
 8004d44:	2b30      	cmp	r3, #48	; 0x30
 8004d46:	d86b      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d060      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x15a>
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d867      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d05c      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x15a>
 8004d54:	2b10      	cmp	r3, #16
 8004d56:	d05a      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x15a>
 8004d58:	e062      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6899      	ldr	r1, [r3, #8]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f000 fb19 	bl	80053a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	609a      	str	r2, [r3, #8]
      break;
 8004d86:	e04f      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	6899      	ldr	r1, [r3, #8]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f000 fb02 	bl	80053a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004daa:	609a      	str	r2, [r3, #8]
      break;
 8004dac:	e03c      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	6859      	ldr	r1, [r3, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f000 fa76 	bl	80052ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2150      	movs	r1, #80	; 0x50
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 facf 	bl	800536a <TIM_ITRx_SetConfig>
      break;
 8004dcc:	e02c      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6859      	ldr	r1, [r3, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	f000 fa95 	bl	800530a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2160      	movs	r1, #96	; 0x60
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fabf 	bl	800536a <TIM_ITRx_SetConfig>
      break;
 8004dec:	e01c      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6859      	ldr	r1, [r3, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f000 fa56 	bl	80052ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2140      	movs	r1, #64	; 0x40
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 faaf 	bl	800536a <TIM_ITRx_SetConfig>
      break;
 8004e0c:	e00c      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4619      	mov	r1, r3
 8004e18:	4610      	mov	r0, r2
 8004e1a:	f000 faa6 	bl	800536a <TIM_ITRx_SetConfig>
      break;
 8004e1e:	e003      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	73fb      	strb	r3, [r7, #15]
      break;
 8004e24:	e000      	b.n	8004e28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a34      	ldr	r2, [pc, #208]	; (8004f78 <TIM_Base_SetConfig+0xe4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00f      	beq.n	8004ecc <TIM_Base_SetConfig+0x38>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb2:	d00b      	beq.n	8004ecc <TIM_Base_SetConfig+0x38>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a31      	ldr	r2, [pc, #196]	; (8004f7c <TIM_Base_SetConfig+0xe8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d007      	beq.n	8004ecc <TIM_Base_SetConfig+0x38>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a30      	ldr	r2, [pc, #192]	; (8004f80 <TIM_Base_SetConfig+0xec>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d003      	beq.n	8004ecc <TIM_Base_SetConfig+0x38>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a2f      	ldr	r2, [pc, #188]	; (8004f84 <TIM_Base_SetConfig+0xf0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d108      	bne.n	8004ede <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a25      	ldr	r2, [pc, #148]	; (8004f78 <TIM_Base_SetConfig+0xe4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d01b      	beq.n	8004f1e <TIM_Base_SetConfig+0x8a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eec:	d017      	beq.n	8004f1e <TIM_Base_SetConfig+0x8a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a22      	ldr	r2, [pc, #136]	; (8004f7c <TIM_Base_SetConfig+0xe8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <TIM_Base_SetConfig+0x8a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a21      	ldr	r2, [pc, #132]	; (8004f80 <TIM_Base_SetConfig+0xec>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00f      	beq.n	8004f1e <TIM_Base_SetConfig+0x8a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a20      	ldr	r2, [pc, #128]	; (8004f84 <TIM_Base_SetConfig+0xf0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00b      	beq.n	8004f1e <TIM_Base_SetConfig+0x8a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a1f      	ldr	r2, [pc, #124]	; (8004f88 <TIM_Base_SetConfig+0xf4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d007      	beq.n	8004f1e <TIM_Base_SetConfig+0x8a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a1e      	ldr	r2, [pc, #120]	; (8004f8c <TIM_Base_SetConfig+0xf8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d003      	beq.n	8004f1e <TIM_Base_SetConfig+0x8a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a1d      	ldr	r2, [pc, #116]	; (8004f90 <TIM_Base_SetConfig+0xfc>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d108      	bne.n	8004f30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a08      	ldr	r2, [pc, #32]	; (8004f78 <TIM_Base_SetConfig+0xe4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d103      	bne.n	8004f64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	615a      	str	r2, [r3, #20]
}
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40010000 	.word	0x40010000
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40000c00 	.word	0x40000c00
 8004f88:	40014000 	.word	0x40014000
 8004f8c:	40014400 	.word	0x40014400
 8004f90:	40014800 	.word	0x40014800

08004f94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f023 0201 	bic.w	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0303 	bic.w	r3, r3, #3
 8004fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f023 0302 	bic.w	r3, r3, #2
 8004fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a1c      	ldr	r2, [pc, #112]	; (800505c <TIM_OC1_SetConfig+0xc8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d10c      	bne.n	800500a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 0308 	bic.w	r3, r3, #8
 8004ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f023 0304 	bic.w	r3, r3, #4
 8005008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a13      	ldr	r2, [pc, #76]	; (800505c <TIM_OC1_SetConfig+0xc8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d111      	bne.n	8005036 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	621a      	str	r2, [r3, #32]
}
 8005050:	bf00      	nop
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	40010000 	.word	0x40010000

08005060 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f023 0210 	bic.w	r2, r3, #16
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f023 0320 	bic.w	r3, r3, #32
 80050aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a1e      	ldr	r2, [pc, #120]	; (8005134 <TIM_OC2_SetConfig+0xd4>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d10d      	bne.n	80050dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a15      	ldr	r2, [pc, #84]	; (8005134 <TIM_OC2_SetConfig+0xd4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d113      	bne.n	800510c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	621a      	str	r2, [r3, #32]
}
 8005126:	bf00      	nop
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40010000 	.word	0x40010000

08005138 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0303 	bic.w	r3, r3, #3
 800516e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1d      	ldr	r2, [pc, #116]	; (8005208 <TIM_OC3_SetConfig+0xd0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d10d      	bne.n	80051b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800519c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a14      	ldr	r2, [pc, #80]	; (8005208 <TIM_OC3_SetConfig+0xd0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d113      	bne.n	80051e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	621a      	str	r2, [r3, #32]
}
 80051fc:	bf00      	nop
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	40010000 	.word	0x40010000

0800520c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	021b      	lsls	r3, r3, #8
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	031b      	lsls	r3, r3, #12
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a10      	ldr	r2, [pc, #64]	; (80052a8 <TIM_OC4_SetConfig+0x9c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d109      	bne.n	8005280 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005272:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	019b      	lsls	r3, r3, #6
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	621a      	str	r2, [r3, #32]
}
 800529a:	bf00      	nop
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40010000 	.word	0x40010000

080052ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f023 0201 	bic.w	r2, r3, #1
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f023 030a 	bic.w	r3, r3, #10
 80052e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	621a      	str	r2, [r3, #32]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800530a:	b480      	push	{r7}
 800530c:	b087      	sub	sp, #28
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	f023 0210 	bic.w	r2, r3, #16
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005334:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	031b      	lsls	r3, r3, #12
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005346:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800536a:	b480      	push	{r7}
 800536c:	b085      	sub	sp, #20
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005380:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	f043 0307 	orr.w	r3, r3, #7
 800538c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	609a      	str	r2, [r3, #8]
}
 8005394:	bf00      	nop
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	021a      	lsls	r2, r3, #8
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	609a      	str	r2, [r3, #8]
}
 80053d4:	bf00      	nop
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f003 031f 	and.w	r3, r3, #31
 80053f2:	2201      	movs	r2, #1
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a1a      	ldr	r2, [r3, #32]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	43db      	mvns	r3, r3
 8005402:	401a      	ands	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a1a      	ldr	r2, [r3, #32]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f003 031f 	and.w	r3, r3, #31
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	fa01 f303 	lsl.w	r3, r1, r3
 8005418:	431a      	orrs	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
	...

0800542c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005440:	2302      	movs	r3, #2
 8005442:	e050      	b.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1c      	ldr	r2, [pc, #112]	; (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d018      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005490:	d013      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a18      	ldr	r2, [pc, #96]	; (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00e      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a16      	ldr	r2, [pc, #88]	; (80054fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d009      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a15      	ldr	r2, [pc, #84]	; (8005500 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d004      	beq.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a13      	ldr	r2, [pc, #76]	; (8005504 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d10c      	bne.n	80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40010000 	.word	0x40010000
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40014000 	.word	0x40014000

08005508 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005520:	2302      	movs	r3, #2
 8005522:	e03d      	b.n	80055a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e03f      	b.n	8005666 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fc fe62 	bl	80022c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2224      	movs	r2, #36	; 0x24
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005616:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f829 	bl	8005670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800562c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800563c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800564c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005674:	b0c0      	sub	sp, #256	; 0x100
 8005676:	af00      	add	r7, sp, #0
 8005678:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568c:	68d9      	ldr	r1, [r3, #12]
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	ea40 0301 	orr.w	r3, r0, r1
 8005698:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800569a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056c8:	f021 010c 	bic.w	r1, r1, #12
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056d6:	430b      	orrs	r3, r1
 80056d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ea:	6999      	ldr	r1, [r3, #24]
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	ea40 0301 	orr.w	r3, r0, r1
 80056f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4b8f      	ldr	r3, [pc, #572]	; (800593c <UART_SetConfig+0x2cc>)
 8005700:	429a      	cmp	r2, r3
 8005702:	d005      	beq.n	8005710 <UART_SetConfig+0xa0>
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4b8d      	ldr	r3, [pc, #564]	; (8005940 <UART_SetConfig+0x2d0>)
 800570c:	429a      	cmp	r2, r3
 800570e:	d104      	bne.n	800571a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005710:	f7fe fdb2 	bl	8004278 <HAL_RCC_GetPCLK2Freq>
 8005714:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005718:	e003      	b.n	8005722 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800571a:	f7fe fd99 	bl	8004250 <HAL_RCC_GetPCLK1Freq>
 800571e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572c:	f040 810c 	bne.w	8005948 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005734:	2200      	movs	r2, #0
 8005736:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800573a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800573e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005742:	4622      	mov	r2, r4
 8005744:	462b      	mov	r3, r5
 8005746:	1891      	adds	r1, r2, r2
 8005748:	65b9      	str	r1, [r7, #88]	; 0x58
 800574a:	415b      	adcs	r3, r3
 800574c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800574e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005752:	4621      	mov	r1, r4
 8005754:	eb12 0801 	adds.w	r8, r2, r1
 8005758:	4629      	mov	r1, r5
 800575a:	eb43 0901 	adc.w	r9, r3, r1
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800576a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800576e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005772:	4690      	mov	r8, r2
 8005774:	4699      	mov	r9, r3
 8005776:	4623      	mov	r3, r4
 8005778:	eb18 0303 	adds.w	r3, r8, r3
 800577c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005780:	462b      	mov	r3, r5
 8005782:	eb49 0303 	adc.w	r3, r9, r3
 8005786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800578a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005796:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800579a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800579e:	460b      	mov	r3, r1
 80057a0:	18db      	adds	r3, r3, r3
 80057a2:	653b      	str	r3, [r7, #80]	; 0x50
 80057a4:	4613      	mov	r3, r2
 80057a6:	eb42 0303 	adc.w	r3, r2, r3
 80057aa:	657b      	str	r3, [r7, #84]	; 0x54
 80057ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057b4:	f7fb f9cc 	bl	8000b50 <__aeabi_uldivmod>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4b61      	ldr	r3, [pc, #388]	; (8005944 <UART_SetConfig+0x2d4>)
 80057be:	fba3 2302 	umull	r2, r3, r3, r2
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	011c      	lsls	r4, r3, #4
 80057c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057ca:	2200      	movs	r2, #0
 80057cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057d8:	4642      	mov	r2, r8
 80057da:	464b      	mov	r3, r9
 80057dc:	1891      	adds	r1, r2, r2
 80057de:	64b9      	str	r1, [r7, #72]	; 0x48
 80057e0:	415b      	adcs	r3, r3
 80057e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057e8:	4641      	mov	r1, r8
 80057ea:	eb12 0a01 	adds.w	sl, r2, r1
 80057ee:	4649      	mov	r1, r9
 80057f0:	eb43 0b01 	adc.w	fp, r3, r1
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005800:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005804:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005808:	4692      	mov	sl, r2
 800580a:	469b      	mov	fp, r3
 800580c:	4643      	mov	r3, r8
 800580e:	eb1a 0303 	adds.w	r3, sl, r3
 8005812:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005816:	464b      	mov	r3, r9
 8005818:	eb4b 0303 	adc.w	r3, fp, r3
 800581c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800582c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005830:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005834:	460b      	mov	r3, r1
 8005836:	18db      	adds	r3, r3, r3
 8005838:	643b      	str	r3, [r7, #64]	; 0x40
 800583a:	4613      	mov	r3, r2
 800583c:	eb42 0303 	adc.w	r3, r2, r3
 8005840:	647b      	str	r3, [r7, #68]	; 0x44
 8005842:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005846:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800584a:	f7fb f981 	bl	8000b50 <__aeabi_uldivmod>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4611      	mov	r1, r2
 8005854:	4b3b      	ldr	r3, [pc, #236]	; (8005944 <UART_SetConfig+0x2d4>)
 8005856:	fba3 2301 	umull	r2, r3, r3, r1
 800585a:	095b      	lsrs	r3, r3, #5
 800585c:	2264      	movs	r2, #100	; 0x64
 800585e:	fb02 f303 	mul.w	r3, r2, r3
 8005862:	1acb      	subs	r3, r1, r3
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800586a:	4b36      	ldr	r3, [pc, #216]	; (8005944 <UART_SetConfig+0x2d4>)
 800586c:	fba3 2302 	umull	r2, r3, r3, r2
 8005870:	095b      	lsrs	r3, r3, #5
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005878:	441c      	add	r4, r3
 800587a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800587e:	2200      	movs	r2, #0
 8005880:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005884:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005888:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800588c:	4642      	mov	r2, r8
 800588e:	464b      	mov	r3, r9
 8005890:	1891      	adds	r1, r2, r2
 8005892:	63b9      	str	r1, [r7, #56]	; 0x38
 8005894:	415b      	adcs	r3, r3
 8005896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005898:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800589c:	4641      	mov	r1, r8
 800589e:	1851      	adds	r1, r2, r1
 80058a0:	6339      	str	r1, [r7, #48]	; 0x30
 80058a2:	4649      	mov	r1, r9
 80058a4:	414b      	adcs	r3, r1
 80058a6:	637b      	str	r3, [r7, #52]	; 0x34
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80058b4:	4659      	mov	r1, fp
 80058b6:	00cb      	lsls	r3, r1, #3
 80058b8:	4651      	mov	r1, sl
 80058ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058be:	4651      	mov	r1, sl
 80058c0:	00ca      	lsls	r2, r1, #3
 80058c2:	4610      	mov	r0, r2
 80058c4:	4619      	mov	r1, r3
 80058c6:	4603      	mov	r3, r0
 80058c8:	4642      	mov	r2, r8
 80058ca:	189b      	adds	r3, r3, r2
 80058cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058d0:	464b      	mov	r3, r9
 80058d2:	460a      	mov	r2, r1
 80058d4:	eb42 0303 	adc.w	r3, r2, r3
 80058d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80058ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058f0:	460b      	mov	r3, r1
 80058f2:	18db      	adds	r3, r3, r3
 80058f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058f6:	4613      	mov	r3, r2
 80058f8:	eb42 0303 	adc.w	r3, r2, r3
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005902:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005906:	f7fb f923 	bl	8000b50 <__aeabi_uldivmod>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <UART_SetConfig+0x2d4>)
 8005910:	fba3 1302 	umull	r1, r3, r3, r2
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	2164      	movs	r1, #100	; 0x64
 8005918:	fb01 f303 	mul.w	r3, r1, r3
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	3332      	adds	r3, #50	; 0x32
 8005922:	4a08      	ldr	r2, [pc, #32]	; (8005944 <UART_SetConfig+0x2d4>)
 8005924:	fba2 2303 	umull	r2, r3, r2, r3
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	f003 0207 	and.w	r2, r3, #7
 800592e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4422      	add	r2, r4
 8005936:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005938:	e105      	b.n	8005b46 <UART_SetConfig+0x4d6>
 800593a:	bf00      	nop
 800593c:	40011000 	.word	0x40011000
 8005940:	40011400 	.word	0x40011400
 8005944:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800594c:	2200      	movs	r2, #0
 800594e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005952:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005956:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800595a:	4642      	mov	r2, r8
 800595c:	464b      	mov	r3, r9
 800595e:	1891      	adds	r1, r2, r2
 8005960:	6239      	str	r1, [r7, #32]
 8005962:	415b      	adcs	r3, r3
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
 8005966:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800596a:	4641      	mov	r1, r8
 800596c:	1854      	adds	r4, r2, r1
 800596e:	4649      	mov	r1, r9
 8005970:	eb43 0501 	adc.w	r5, r3, r1
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	f04f 0300 	mov.w	r3, #0
 800597c:	00eb      	lsls	r3, r5, #3
 800597e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005982:	00e2      	lsls	r2, r4, #3
 8005984:	4614      	mov	r4, r2
 8005986:	461d      	mov	r5, r3
 8005988:	4643      	mov	r3, r8
 800598a:	18e3      	adds	r3, r4, r3
 800598c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005990:	464b      	mov	r3, r9
 8005992:	eb45 0303 	adc.w	r3, r5, r3
 8005996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800599a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059b6:	4629      	mov	r1, r5
 80059b8:	008b      	lsls	r3, r1, #2
 80059ba:	4621      	mov	r1, r4
 80059bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059c0:	4621      	mov	r1, r4
 80059c2:	008a      	lsls	r2, r1, #2
 80059c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059c8:	f7fb f8c2 	bl	8000b50 <__aeabi_uldivmod>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4b60      	ldr	r3, [pc, #384]	; (8005b54 <UART_SetConfig+0x4e4>)
 80059d2:	fba3 2302 	umull	r2, r3, r3, r2
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	011c      	lsls	r4, r3, #4
 80059da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059de:	2200      	movs	r2, #0
 80059e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80059ec:	4642      	mov	r2, r8
 80059ee:	464b      	mov	r3, r9
 80059f0:	1891      	adds	r1, r2, r2
 80059f2:	61b9      	str	r1, [r7, #24]
 80059f4:	415b      	adcs	r3, r3
 80059f6:	61fb      	str	r3, [r7, #28]
 80059f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059fc:	4641      	mov	r1, r8
 80059fe:	1851      	adds	r1, r2, r1
 8005a00:	6139      	str	r1, [r7, #16]
 8005a02:	4649      	mov	r1, r9
 8005a04:	414b      	adcs	r3, r1
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	f04f 0300 	mov.w	r3, #0
 8005a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a14:	4659      	mov	r1, fp
 8005a16:	00cb      	lsls	r3, r1, #3
 8005a18:	4651      	mov	r1, sl
 8005a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a1e:	4651      	mov	r1, sl
 8005a20:	00ca      	lsls	r2, r1, #3
 8005a22:	4610      	mov	r0, r2
 8005a24:	4619      	mov	r1, r3
 8005a26:	4603      	mov	r3, r0
 8005a28:	4642      	mov	r2, r8
 8005a2a:	189b      	adds	r3, r3, r2
 8005a2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a30:	464b      	mov	r3, r9
 8005a32:	460a      	mov	r2, r1
 8005a34:	eb42 0303 	adc.w	r3, r2, r3
 8005a38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a54:	4649      	mov	r1, r9
 8005a56:	008b      	lsls	r3, r1, #2
 8005a58:	4641      	mov	r1, r8
 8005a5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a5e:	4641      	mov	r1, r8
 8005a60:	008a      	lsls	r2, r1, #2
 8005a62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a66:	f7fb f873 	bl	8000b50 <__aeabi_uldivmod>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4b39      	ldr	r3, [pc, #228]	; (8005b54 <UART_SetConfig+0x4e4>)
 8005a70:	fba3 1302 	umull	r1, r3, r3, r2
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	2164      	movs	r1, #100	; 0x64
 8005a78:	fb01 f303 	mul.w	r3, r1, r3
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	3332      	adds	r3, #50	; 0x32
 8005a82:	4a34      	ldr	r2, [pc, #208]	; (8005b54 <UART_SetConfig+0x4e4>)
 8005a84:	fba2 2303 	umull	r2, r3, r2, r3
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a8e:	441c      	add	r4, r3
 8005a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a94:	2200      	movs	r2, #0
 8005a96:	673b      	str	r3, [r7, #112]	; 0x70
 8005a98:	677a      	str	r2, [r7, #116]	; 0x74
 8005a9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a9e:	4642      	mov	r2, r8
 8005aa0:	464b      	mov	r3, r9
 8005aa2:	1891      	adds	r1, r2, r2
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	415b      	adcs	r3, r3
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aae:	4641      	mov	r1, r8
 8005ab0:	1851      	adds	r1, r2, r1
 8005ab2:	6039      	str	r1, [r7, #0]
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	414b      	adcs	r3, r1
 8005ab8:	607b      	str	r3, [r7, #4]
 8005aba:	f04f 0200 	mov.w	r2, #0
 8005abe:	f04f 0300 	mov.w	r3, #0
 8005ac2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ac6:	4659      	mov	r1, fp
 8005ac8:	00cb      	lsls	r3, r1, #3
 8005aca:	4651      	mov	r1, sl
 8005acc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ad0:	4651      	mov	r1, sl
 8005ad2:	00ca      	lsls	r2, r1, #3
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4603      	mov	r3, r0
 8005ada:	4642      	mov	r2, r8
 8005adc:	189b      	adds	r3, r3, r2
 8005ade:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ae0:	464b      	mov	r3, r9
 8005ae2:	460a      	mov	r2, r1
 8005ae4:	eb42 0303 	adc.w	r3, r2, r3
 8005ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	663b      	str	r3, [r7, #96]	; 0x60
 8005af4:	667a      	str	r2, [r7, #100]	; 0x64
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b02:	4649      	mov	r1, r9
 8005b04:	008b      	lsls	r3, r1, #2
 8005b06:	4641      	mov	r1, r8
 8005b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b0c:	4641      	mov	r1, r8
 8005b0e:	008a      	lsls	r2, r1, #2
 8005b10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b14:	f7fb f81c 	bl	8000b50 <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <UART_SetConfig+0x4e4>)
 8005b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	2164      	movs	r1, #100	; 0x64
 8005b26:	fb01 f303 	mul.w	r3, r1, r3
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	3332      	adds	r3, #50	; 0x32
 8005b30:	4a08      	ldr	r2, [pc, #32]	; (8005b54 <UART_SetConfig+0x4e4>)
 8005b32:	fba2 2303 	umull	r2, r3, r2, r3
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	f003 020f 	and.w	r2, r3, #15
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4422      	add	r2, r4
 8005b44:	609a      	str	r2, [r3, #8]
}
 8005b46:	bf00      	nop
 8005b48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b52:	bf00      	nop
 8005b54:	51eb851f 	.word	0x51eb851f

08005b58 <__errno>:
 8005b58:	4b01      	ldr	r3, [pc, #4]	; (8005b60 <__errno+0x8>)
 8005b5a:	6818      	ldr	r0, [r3, #0]
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20000028 	.word	0x20000028

08005b64 <__libc_init_array>:
 8005b64:	b570      	push	{r4, r5, r6, lr}
 8005b66:	4d0d      	ldr	r5, [pc, #52]	; (8005b9c <__libc_init_array+0x38>)
 8005b68:	4c0d      	ldr	r4, [pc, #52]	; (8005ba0 <__libc_init_array+0x3c>)
 8005b6a:	1b64      	subs	r4, r4, r5
 8005b6c:	10a4      	asrs	r4, r4, #2
 8005b6e:	2600      	movs	r6, #0
 8005b70:	42a6      	cmp	r6, r4
 8005b72:	d109      	bne.n	8005b88 <__libc_init_array+0x24>
 8005b74:	4d0b      	ldr	r5, [pc, #44]	; (8005ba4 <__libc_init_array+0x40>)
 8005b76:	4c0c      	ldr	r4, [pc, #48]	; (8005ba8 <__libc_init_array+0x44>)
 8005b78:	f000 ff3c 	bl	80069f4 <_init>
 8005b7c:	1b64      	subs	r4, r4, r5
 8005b7e:	10a4      	asrs	r4, r4, #2
 8005b80:	2600      	movs	r6, #0
 8005b82:	42a6      	cmp	r6, r4
 8005b84:	d105      	bne.n	8005b92 <__libc_init_array+0x2e>
 8005b86:	bd70      	pop	{r4, r5, r6, pc}
 8005b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b8c:	4798      	blx	r3
 8005b8e:	3601      	adds	r6, #1
 8005b90:	e7ee      	b.n	8005b70 <__libc_init_array+0xc>
 8005b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b96:	4798      	blx	r3
 8005b98:	3601      	adds	r6, #1
 8005b9a:	e7f2      	b.n	8005b82 <__libc_init_array+0x1e>
 8005b9c:	08006a68 	.word	0x08006a68
 8005ba0:	08006a68 	.word	0x08006a68
 8005ba4:	08006a68 	.word	0x08006a68
 8005ba8:	08006a6c 	.word	0x08006a6c

08005bac <memset>:
 8005bac:	4402      	add	r2, r0
 8005bae:	4603      	mov	r3, r0
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d100      	bne.n	8005bb6 <memset+0xa>
 8005bb4:	4770      	bx	lr
 8005bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bba:	e7f9      	b.n	8005bb0 <memset+0x4>

08005bbc <pow>:
 8005bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbe:	ed2d 8b02 	vpush	{d8}
 8005bc2:	eeb0 8a40 	vmov.f32	s16, s0
 8005bc6:	eef0 8a60 	vmov.f32	s17, s1
 8005bca:	ec55 4b11 	vmov	r4, r5, d1
 8005bce:	f000 f867 	bl	8005ca0 <__ieee754_pow>
 8005bd2:	4622      	mov	r2, r4
 8005bd4:	462b      	mov	r3, r5
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	4629      	mov	r1, r5
 8005bda:	ec57 6b10 	vmov	r6, r7, d0
 8005bde:	f7fa ff51 	bl	8000a84 <__aeabi_dcmpun>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d13b      	bne.n	8005c5e <pow+0xa2>
 8005be6:	ec51 0b18 	vmov	r0, r1, d8
 8005bea:	2200      	movs	r2, #0
 8005bec:	2300      	movs	r3, #0
 8005bee:	f7fa ff17 	bl	8000a20 <__aeabi_dcmpeq>
 8005bf2:	b1b8      	cbz	r0, 8005c24 <pow+0x68>
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	f7fa ff10 	bl	8000a20 <__aeabi_dcmpeq>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d146      	bne.n	8005c92 <pow+0xd6>
 8005c04:	ec45 4b10 	vmov	d0, r4, r5
 8005c08:	f000 fe63 	bl	80068d2 <finite>
 8005c0c:	b338      	cbz	r0, 8005c5e <pow+0xa2>
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2300      	movs	r3, #0
 8005c12:	4620      	mov	r0, r4
 8005c14:	4629      	mov	r1, r5
 8005c16:	f7fa ff0d 	bl	8000a34 <__aeabi_dcmplt>
 8005c1a:	b300      	cbz	r0, 8005c5e <pow+0xa2>
 8005c1c:	f7ff ff9c 	bl	8005b58 <__errno>
 8005c20:	2322      	movs	r3, #34	; 0x22
 8005c22:	e01b      	b.n	8005c5c <pow+0xa0>
 8005c24:	ec47 6b10 	vmov	d0, r6, r7
 8005c28:	f000 fe53 	bl	80068d2 <finite>
 8005c2c:	b9e0      	cbnz	r0, 8005c68 <pow+0xac>
 8005c2e:	eeb0 0a48 	vmov.f32	s0, s16
 8005c32:	eef0 0a68 	vmov.f32	s1, s17
 8005c36:	f000 fe4c 	bl	80068d2 <finite>
 8005c3a:	b1a8      	cbz	r0, 8005c68 <pow+0xac>
 8005c3c:	ec45 4b10 	vmov	d0, r4, r5
 8005c40:	f000 fe47 	bl	80068d2 <finite>
 8005c44:	b180      	cbz	r0, 8005c68 <pow+0xac>
 8005c46:	4632      	mov	r2, r6
 8005c48:	463b      	mov	r3, r7
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	4639      	mov	r1, r7
 8005c4e:	f7fa ff19 	bl	8000a84 <__aeabi_dcmpun>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d0e2      	beq.n	8005c1c <pow+0x60>
 8005c56:	f7ff ff7f 	bl	8005b58 <__errno>
 8005c5a:	2321      	movs	r3, #33	; 0x21
 8005c5c:	6003      	str	r3, [r0, #0]
 8005c5e:	ecbd 8b02 	vpop	{d8}
 8005c62:	ec47 6b10 	vmov	d0, r6, r7
 8005c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	4639      	mov	r1, r7
 8005c70:	f7fa fed6 	bl	8000a20 <__aeabi_dcmpeq>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d0f2      	beq.n	8005c5e <pow+0xa2>
 8005c78:	eeb0 0a48 	vmov.f32	s0, s16
 8005c7c:	eef0 0a68 	vmov.f32	s1, s17
 8005c80:	f000 fe27 	bl	80068d2 <finite>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d0ea      	beq.n	8005c5e <pow+0xa2>
 8005c88:	ec45 4b10 	vmov	d0, r4, r5
 8005c8c:	f000 fe21 	bl	80068d2 <finite>
 8005c90:	e7c3      	b.n	8005c1a <pow+0x5e>
 8005c92:	4f01      	ldr	r7, [pc, #4]	; (8005c98 <pow+0xdc>)
 8005c94:	2600      	movs	r6, #0
 8005c96:	e7e2      	b.n	8005c5e <pow+0xa2>
 8005c98:	3ff00000 	.word	0x3ff00000
 8005c9c:	00000000 	.word	0x00000000

08005ca0 <__ieee754_pow>:
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	ed2d 8b06 	vpush	{d8-d10}
 8005ca8:	b089      	sub	sp, #36	; 0x24
 8005caa:	ed8d 1b00 	vstr	d1, [sp]
 8005cae:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005cb2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005cb6:	ea58 0102 	orrs.w	r1, r8, r2
 8005cba:	ec57 6b10 	vmov	r6, r7, d0
 8005cbe:	d115      	bne.n	8005cec <__ieee754_pow+0x4c>
 8005cc0:	19b3      	adds	r3, r6, r6
 8005cc2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005cc6:	4152      	adcs	r2, r2
 8005cc8:	4299      	cmp	r1, r3
 8005cca:	4b89      	ldr	r3, [pc, #548]	; (8005ef0 <__ieee754_pow+0x250>)
 8005ccc:	4193      	sbcs	r3, r2
 8005cce:	f080 84d2 	bcs.w	8006676 <__ieee754_pow+0x9d6>
 8005cd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	4639      	mov	r1, r7
 8005cda:	f7fa fa83 	bl	80001e4 <__adddf3>
 8005cde:	ec41 0b10 	vmov	d0, r0, r1
 8005ce2:	b009      	add	sp, #36	; 0x24
 8005ce4:	ecbd 8b06 	vpop	{d8-d10}
 8005ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cec:	4b81      	ldr	r3, [pc, #516]	; (8005ef4 <__ieee754_pow+0x254>)
 8005cee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005cf2:	429c      	cmp	r4, r3
 8005cf4:	ee10 aa10 	vmov	sl, s0
 8005cf8:	463d      	mov	r5, r7
 8005cfa:	dc06      	bgt.n	8005d0a <__ieee754_pow+0x6a>
 8005cfc:	d101      	bne.n	8005d02 <__ieee754_pow+0x62>
 8005cfe:	2e00      	cmp	r6, #0
 8005d00:	d1e7      	bne.n	8005cd2 <__ieee754_pow+0x32>
 8005d02:	4598      	cmp	r8, r3
 8005d04:	dc01      	bgt.n	8005d0a <__ieee754_pow+0x6a>
 8005d06:	d10f      	bne.n	8005d28 <__ieee754_pow+0x88>
 8005d08:	b172      	cbz	r2, 8005d28 <__ieee754_pow+0x88>
 8005d0a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005d0e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005d12:	ea55 050a 	orrs.w	r5, r5, sl
 8005d16:	d1dc      	bne.n	8005cd2 <__ieee754_pow+0x32>
 8005d18:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005d1c:	18db      	adds	r3, r3, r3
 8005d1e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005d22:	4152      	adcs	r2, r2
 8005d24:	429d      	cmp	r5, r3
 8005d26:	e7d0      	b.n	8005cca <__ieee754_pow+0x2a>
 8005d28:	2d00      	cmp	r5, #0
 8005d2a:	da3b      	bge.n	8005da4 <__ieee754_pow+0x104>
 8005d2c:	4b72      	ldr	r3, [pc, #456]	; (8005ef8 <__ieee754_pow+0x258>)
 8005d2e:	4598      	cmp	r8, r3
 8005d30:	dc51      	bgt.n	8005dd6 <__ieee754_pow+0x136>
 8005d32:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005d36:	4598      	cmp	r8, r3
 8005d38:	f340 84ac 	ble.w	8006694 <__ieee754_pow+0x9f4>
 8005d3c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005d40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005d44:	2b14      	cmp	r3, #20
 8005d46:	dd0f      	ble.n	8005d68 <__ieee754_pow+0xc8>
 8005d48:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005d4c:	fa22 f103 	lsr.w	r1, r2, r3
 8005d50:	fa01 f303 	lsl.w	r3, r1, r3
 8005d54:	4293      	cmp	r3, r2
 8005d56:	f040 849d 	bne.w	8006694 <__ieee754_pow+0x9f4>
 8005d5a:	f001 0101 	and.w	r1, r1, #1
 8005d5e:	f1c1 0302 	rsb	r3, r1, #2
 8005d62:	9304      	str	r3, [sp, #16]
 8005d64:	b182      	cbz	r2, 8005d88 <__ieee754_pow+0xe8>
 8005d66:	e05f      	b.n	8005e28 <__ieee754_pow+0x188>
 8005d68:	2a00      	cmp	r2, #0
 8005d6a:	d15b      	bne.n	8005e24 <__ieee754_pow+0x184>
 8005d6c:	f1c3 0314 	rsb	r3, r3, #20
 8005d70:	fa48 f103 	asr.w	r1, r8, r3
 8005d74:	fa01 f303 	lsl.w	r3, r1, r3
 8005d78:	4543      	cmp	r3, r8
 8005d7a:	f040 8488 	bne.w	800668e <__ieee754_pow+0x9ee>
 8005d7e:	f001 0101 	and.w	r1, r1, #1
 8005d82:	f1c1 0302 	rsb	r3, r1, #2
 8005d86:	9304      	str	r3, [sp, #16]
 8005d88:	4b5c      	ldr	r3, [pc, #368]	; (8005efc <__ieee754_pow+0x25c>)
 8005d8a:	4598      	cmp	r8, r3
 8005d8c:	d132      	bne.n	8005df4 <__ieee754_pow+0x154>
 8005d8e:	f1b9 0f00 	cmp.w	r9, #0
 8005d92:	f280 8478 	bge.w	8006686 <__ieee754_pow+0x9e6>
 8005d96:	4959      	ldr	r1, [pc, #356]	; (8005efc <__ieee754_pow+0x25c>)
 8005d98:	4632      	mov	r2, r6
 8005d9a:	463b      	mov	r3, r7
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	f7fa fd01 	bl	80007a4 <__aeabi_ddiv>
 8005da2:	e79c      	b.n	8005cde <__ieee754_pow+0x3e>
 8005da4:	2300      	movs	r3, #0
 8005da6:	9304      	str	r3, [sp, #16]
 8005da8:	2a00      	cmp	r2, #0
 8005daa:	d13d      	bne.n	8005e28 <__ieee754_pow+0x188>
 8005dac:	4b51      	ldr	r3, [pc, #324]	; (8005ef4 <__ieee754_pow+0x254>)
 8005dae:	4598      	cmp	r8, r3
 8005db0:	d1ea      	bne.n	8005d88 <__ieee754_pow+0xe8>
 8005db2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005db6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005dba:	ea53 030a 	orrs.w	r3, r3, sl
 8005dbe:	f000 845a 	beq.w	8006676 <__ieee754_pow+0x9d6>
 8005dc2:	4b4f      	ldr	r3, [pc, #316]	; (8005f00 <__ieee754_pow+0x260>)
 8005dc4:	429c      	cmp	r4, r3
 8005dc6:	dd08      	ble.n	8005dda <__ieee754_pow+0x13a>
 8005dc8:	f1b9 0f00 	cmp.w	r9, #0
 8005dcc:	f2c0 8457 	blt.w	800667e <__ieee754_pow+0x9de>
 8005dd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dd4:	e783      	b.n	8005cde <__ieee754_pow+0x3e>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e7e5      	b.n	8005da6 <__ieee754_pow+0x106>
 8005dda:	f1b9 0f00 	cmp.w	r9, #0
 8005dde:	f04f 0000 	mov.w	r0, #0
 8005de2:	f04f 0100 	mov.w	r1, #0
 8005de6:	f6bf af7a 	bge.w	8005cde <__ieee754_pow+0x3e>
 8005dea:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005dee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005df2:	e774      	b.n	8005cde <__ieee754_pow+0x3e>
 8005df4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005df8:	d106      	bne.n	8005e08 <__ieee754_pow+0x168>
 8005dfa:	4632      	mov	r2, r6
 8005dfc:	463b      	mov	r3, r7
 8005dfe:	4630      	mov	r0, r6
 8005e00:	4639      	mov	r1, r7
 8005e02:	f7fa fba5 	bl	8000550 <__aeabi_dmul>
 8005e06:	e76a      	b.n	8005cde <__ieee754_pow+0x3e>
 8005e08:	4b3e      	ldr	r3, [pc, #248]	; (8005f04 <__ieee754_pow+0x264>)
 8005e0a:	4599      	cmp	r9, r3
 8005e0c:	d10c      	bne.n	8005e28 <__ieee754_pow+0x188>
 8005e0e:	2d00      	cmp	r5, #0
 8005e10:	db0a      	blt.n	8005e28 <__ieee754_pow+0x188>
 8005e12:	ec47 6b10 	vmov	d0, r6, r7
 8005e16:	b009      	add	sp, #36	; 0x24
 8005e18:	ecbd 8b06 	vpop	{d8-d10}
 8005e1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e20:	f000 bc6c 	b.w	80066fc <__ieee754_sqrt>
 8005e24:	2300      	movs	r3, #0
 8005e26:	9304      	str	r3, [sp, #16]
 8005e28:	ec47 6b10 	vmov	d0, r6, r7
 8005e2c:	f000 fd48 	bl	80068c0 <fabs>
 8005e30:	ec51 0b10 	vmov	r0, r1, d0
 8005e34:	f1ba 0f00 	cmp.w	sl, #0
 8005e38:	d129      	bne.n	8005e8e <__ieee754_pow+0x1ee>
 8005e3a:	b124      	cbz	r4, 8005e46 <__ieee754_pow+0x1a6>
 8005e3c:	4b2f      	ldr	r3, [pc, #188]	; (8005efc <__ieee754_pow+0x25c>)
 8005e3e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d123      	bne.n	8005e8e <__ieee754_pow+0x1ee>
 8005e46:	f1b9 0f00 	cmp.w	r9, #0
 8005e4a:	da05      	bge.n	8005e58 <__ieee754_pow+0x1b8>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	2000      	movs	r0, #0
 8005e52:	492a      	ldr	r1, [pc, #168]	; (8005efc <__ieee754_pow+0x25c>)
 8005e54:	f7fa fca6 	bl	80007a4 <__aeabi_ddiv>
 8005e58:	2d00      	cmp	r5, #0
 8005e5a:	f6bf af40 	bge.w	8005cde <__ieee754_pow+0x3e>
 8005e5e:	9b04      	ldr	r3, [sp, #16]
 8005e60:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005e64:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005e68:	4323      	orrs	r3, r4
 8005e6a:	d108      	bne.n	8005e7e <__ieee754_pow+0x1de>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4610      	mov	r0, r2
 8005e72:	4619      	mov	r1, r3
 8005e74:	f7fa f9b4 	bl	80001e0 <__aeabi_dsub>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	e78f      	b.n	8005d9e <__ieee754_pow+0xfe>
 8005e7e:	9b04      	ldr	r3, [sp, #16]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	f47f af2c 	bne.w	8005cde <__ieee754_pow+0x3e>
 8005e86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	e727      	b.n	8005cde <__ieee754_pow+0x3e>
 8005e8e:	0feb      	lsrs	r3, r5, #31
 8005e90:	3b01      	subs	r3, #1
 8005e92:	9306      	str	r3, [sp, #24]
 8005e94:	9a06      	ldr	r2, [sp, #24]
 8005e96:	9b04      	ldr	r3, [sp, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	d102      	bne.n	8005ea2 <__ieee754_pow+0x202>
 8005e9c:	4632      	mov	r2, r6
 8005e9e:	463b      	mov	r3, r7
 8005ea0:	e7e6      	b.n	8005e70 <__ieee754_pow+0x1d0>
 8005ea2:	4b19      	ldr	r3, [pc, #100]	; (8005f08 <__ieee754_pow+0x268>)
 8005ea4:	4598      	cmp	r8, r3
 8005ea6:	f340 80fb 	ble.w	80060a0 <__ieee754_pow+0x400>
 8005eaa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005eae:	4598      	cmp	r8, r3
 8005eb0:	4b13      	ldr	r3, [pc, #76]	; (8005f00 <__ieee754_pow+0x260>)
 8005eb2:	dd0c      	ble.n	8005ece <__ieee754_pow+0x22e>
 8005eb4:	429c      	cmp	r4, r3
 8005eb6:	dc0f      	bgt.n	8005ed8 <__ieee754_pow+0x238>
 8005eb8:	f1b9 0f00 	cmp.w	r9, #0
 8005ebc:	da0f      	bge.n	8005ede <__ieee754_pow+0x23e>
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	b009      	add	sp, #36	; 0x24
 8005ec2:	ecbd 8b06 	vpop	{d8-d10}
 8005ec6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eca:	f000 bcf0 	b.w	80068ae <__math_oflow>
 8005ece:	429c      	cmp	r4, r3
 8005ed0:	dbf2      	blt.n	8005eb8 <__ieee754_pow+0x218>
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <__ieee754_pow+0x25c>)
 8005ed4:	429c      	cmp	r4, r3
 8005ed6:	dd19      	ble.n	8005f0c <__ieee754_pow+0x26c>
 8005ed8:	f1b9 0f00 	cmp.w	r9, #0
 8005edc:	dcef      	bgt.n	8005ebe <__ieee754_pow+0x21e>
 8005ede:	2000      	movs	r0, #0
 8005ee0:	b009      	add	sp, #36	; 0x24
 8005ee2:	ecbd 8b06 	vpop	{d8-d10}
 8005ee6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eea:	f000 bcd7 	b.w	800689c <__math_uflow>
 8005eee:	bf00      	nop
 8005ef0:	fff00000 	.word	0xfff00000
 8005ef4:	7ff00000 	.word	0x7ff00000
 8005ef8:	433fffff 	.word	0x433fffff
 8005efc:	3ff00000 	.word	0x3ff00000
 8005f00:	3fefffff 	.word	0x3fefffff
 8005f04:	3fe00000 	.word	0x3fe00000
 8005f08:	41e00000 	.word	0x41e00000
 8005f0c:	4b60      	ldr	r3, [pc, #384]	; (8006090 <__ieee754_pow+0x3f0>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f7fa f966 	bl	80001e0 <__aeabi_dsub>
 8005f14:	a354      	add	r3, pc, #336	; (adr r3, 8006068 <__ieee754_pow+0x3c8>)
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	460d      	mov	r5, r1
 8005f1e:	f7fa fb17 	bl	8000550 <__aeabi_dmul>
 8005f22:	a353      	add	r3, pc, #332	; (adr r3, 8006070 <__ieee754_pow+0x3d0>)
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	4606      	mov	r6, r0
 8005f2a:	460f      	mov	r7, r1
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	4629      	mov	r1, r5
 8005f30:	f7fa fb0e 	bl	8000550 <__aeabi_dmul>
 8005f34:	4b57      	ldr	r3, [pc, #348]	; (8006094 <__ieee754_pow+0x3f4>)
 8005f36:	4682      	mov	sl, r0
 8005f38:	468b      	mov	fp, r1
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	4629      	mov	r1, r5
 8005f40:	f7fa fb06 	bl	8000550 <__aeabi_dmul>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	a14b      	add	r1, pc, #300	; (adr r1, 8006078 <__ieee754_pow+0x3d8>)
 8005f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f4e:	f7fa f947 	bl	80001e0 <__aeabi_dsub>
 8005f52:	4622      	mov	r2, r4
 8005f54:	462b      	mov	r3, r5
 8005f56:	f7fa fafb 	bl	8000550 <__aeabi_dmul>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	2000      	movs	r0, #0
 8005f60:	494d      	ldr	r1, [pc, #308]	; (8006098 <__ieee754_pow+0x3f8>)
 8005f62:	f7fa f93d 	bl	80001e0 <__aeabi_dsub>
 8005f66:	4622      	mov	r2, r4
 8005f68:	4680      	mov	r8, r0
 8005f6a:	4689      	mov	r9, r1
 8005f6c:	462b      	mov	r3, r5
 8005f6e:	4620      	mov	r0, r4
 8005f70:	4629      	mov	r1, r5
 8005f72:	f7fa faed 	bl	8000550 <__aeabi_dmul>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	f7fa fae7 	bl	8000550 <__aeabi_dmul>
 8005f82:	a33f      	add	r3, pc, #252	; (adr r3, 8006080 <__ieee754_pow+0x3e0>)
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f7fa fae2 	bl	8000550 <__aeabi_dmul>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4650      	mov	r0, sl
 8005f92:	4659      	mov	r1, fp
 8005f94:	f7fa f924 	bl	80001e0 <__aeabi_dsub>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4680      	mov	r8, r0
 8005f9e:	4689      	mov	r9, r1
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	4639      	mov	r1, r7
 8005fa4:	f7fa f91e 	bl	80001e4 <__adddf3>
 8005fa8:	2000      	movs	r0, #0
 8005faa:	4632      	mov	r2, r6
 8005fac:	463b      	mov	r3, r7
 8005fae:	4604      	mov	r4, r0
 8005fb0:	460d      	mov	r5, r1
 8005fb2:	f7fa f915 	bl	80001e0 <__aeabi_dsub>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4640      	mov	r0, r8
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	f7fa f90f 	bl	80001e0 <__aeabi_dsub>
 8005fc2:	9b04      	ldr	r3, [sp, #16]
 8005fc4:	9a06      	ldr	r2, [sp, #24]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	4682      	mov	sl, r0
 8005fcc:	468b      	mov	fp, r1
 8005fce:	f040 81e7 	bne.w	80063a0 <__ieee754_pow+0x700>
 8005fd2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006088 <__ieee754_pow+0x3e8>
 8005fd6:	eeb0 8a47 	vmov.f32	s16, s14
 8005fda:	eef0 8a67 	vmov.f32	s17, s15
 8005fde:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005fe2:	2600      	movs	r6, #0
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fec:	f7fa f8f8 	bl	80001e0 <__aeabi_dsub>
 8005ff0:	4622      	mov	r2, r4
 8005ff2:	462b      	mov	r3, r5
 8005ff4:	f7fa faac 	bl	8000550 <__aeabi_dmul>
 8005ff8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ffc:	4680      	mov	r8, r0
 8005ffe:	4689      	mov	r9, r1
 8006000:	4650      	mov	r0, sl
 8006002:	4659      	mov	r1, fp
 8006004:	f7fa faa4 	bl	8000550 <__aeabi_dmul>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4640      	mov	r0, r8
 800600e:	4649      	mov	r1, r9
 8006010:	f7fa f8e8 	bl	80001e4 <__adddf3>
 8006014:	4632      	mov	r2, r6
 8006016:	463b      	mov	r3, r7
 8006018:	4680      	mov	r8, r0
 800601a:	4689      	mov	r9, r1
 800601c:	4620      	mov	r0, r4
 800601e:	4629      	mov	r1, r5
 8006020:	f7fa fa96 	bl	8000550 <__aeabi_dmul>
 8006024:	460b      	mov	r3, r1
 8006026:	4604      	mov	r4, r0
 8006028:	460d      	mov	r5, r1
 800602a:	4602      	mov	r2, r0
 800602c:	4649      	mov	r1, r9
 800602e:	4640      	mov	r0, r8
 8006030:	f7fa f8d8 	bl	80001e4 <__adddf3>
 8006034:	4b19      	ldr	r3, [pc, #100]	; (800609c <__ieee754_pow+0x3fc>)
 8006036:	4299      	cmp	r1, r3
 8006038:	ec45 4b19 	vmov	d9, r4, r5
 800603c:	4606      	mov	r6, r0
 800603e:	460f      	mov	r7, r1
 8006040:	468b      	mov	fp, r1
 8006042:	f340 82f1 	ble.w	8006628 <__ieee754_pow+0x988>
 8006046:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800604a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800604e:	4303      	orrs	r3, r0
 8006050:	f000 81e4 	beq.w	800641c <__ieee754_pow+0x77c>
 8006054:	ec51 0b18 	vmov	r0, r1, d8
 8006058:	2200      	movs	r2, #0
 800605a:	2300      	movs	r3, #0
 800605c:	f7fa fcea 	bl	8000a34 <__aeabi_dcmplt>
 8006060:	3800      	subs	r0, #0
 8006062:	bf18      	it	ne
 8006064:	2001      	movne	r0, #1
 8006066:	e72b      	b.n	8005ec0 <__ieee754_pow+0x220>
 8006068:	60000000 	.word	0x60000000
 800606c:	3ff71547 	.word	0x3ff71547
 8006070:	f85ddf44 	.word	0xf85ddf44
 8006074:	3e54ae0b 	.word	0x3e54ae0b
 8006078:	55555555 	.word	0x55555555
 800607c:	3fd55555 	.word	0x3fd55555
 8006080:	652b82fe 	.word	0x652b82fe
 8006084:	3ff71547 	.word	0x3ff71547
 8006088:	00000000 	.word	0x00000000
 800608c:	bff00000 	.word	0xbff00000
 8006090:	3ff00000 	.word	0x3ff00000
 8006094:	3fd00000 	.word	0x3fd00000
 8006098:	3fe00000 	.word	0x3fe00000
 800609c:	408fffff 	.word	0x408fffff
 80060a0:	4bd5      	ldr	r3, [pc, #852]	; (80063f8 <__ieee754_pow+0x758>)
 80060a2:	402b      	ands	r3, r5
 80060a4:	2200      	movs	r2, #0
 80060a6:	b92b      	cbnz	r3, 80060b4 <__ieee754_pow+0x414>
 80060a8:	4bd4      	ldr	r3, [pc, #848]	; (80063fc <__ieee754_pow+0x75c>)
 80060aa:	f7fa fa51 	bl	8000550 <__aeabi_dmul>
 80060ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80060b2:	460c      	mov	r4, r1
 80060b4:	1523      	asrs	r3, r4, #20
 80060b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80060ba:	4413      	add	r3, r2
 80060bc:	9305      	str	r3, [sp, #20]
 80060be:	4bd0      	ldr	r3, [pc, #832]	; (8006400 <__ieee754_pow+0x760>)
 80060c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80060c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80060c8:	429c      	cmp	r4, r3
 80060ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80060ce:	dd08      	ble.n	80060e2 <__ieee754_pow+0x442>
 80060d0:	4bcc      	ldr	r3, [pc, #816]	; (8006404 <__ieee754_pow+0x764>)
 80060d2:	429c      	cmp	r4, r3
 80060d4:	f340 8162 	ble.w	800639c <__ieee754_pow+0x6fc>
 80060d8:	9b05      	ldr	r3, [sp, #20]
 80060da:	3301      	adds	r3, #1
 80060dc:	9305      	str	r3, [sp, #20]
 80060de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80060e2:	2400      	movs	r4, #0
 80060e4:	00e3      	lsls	r3, r4, #3
 80060e6:	9307      	str	r3, [sp, #28]
 80060e8:	4bc7      	ldr	r3, [pc, #796]	; (8006408 <__ieee754_pow+0x768>)
 80060ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80060ee:	ed93 7b00 	vldr	d7, [r3]
 80060f2:	4629      	mov	r1, r5
 80060f4:	ec53 2b17 	vmov	r2, r3, d7
 80060f8:	eeb0 9a47 	vmov.f32	s18, s14
 80060fc:	eef0 9a67 	vmov.f32	s19, s15
 8006100:	4682      	mov	sl, r0
 8006102:	f7fa f86d 	bl	80001e0 <__aeabi_dsub>
 8006106:	4652      	mov	r2, sl
 8006108:	4606      	mov	r6, r0
 800610a:	460f      	mov	r7, r1
 800610c:	462b      	mov	r3, r5
 800610e:	ec51 0b19 	vmov	r0, r1, d9
 8006112:	f7fa f867 	bl	80001e4 <__adddf3>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	2000      	movs	r0, #0
 800611c:	49bb      	ldr	r1, [pc, #748]	; (800640c <__ieee754_pow+0x76c>)
 800611e:	f7fa fb41 	bl	80007a4 <__aeabi_ddiv>
 8006122:	ec41 0b1a 	vmov	d10, r0, r1
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	4630      	mov	r0, r6
 800612c:	4639      	mov	r1, r7
 800612e:	f7fa fa0f 	bl	8000550 <__aeabi_dmul>
 8006132:	2300      	movs	r3, #0
 8006134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006138:	9302      	str	r3, [sp, #8]
 800613a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800613e:	46ab      	mov	fp, r5
 8006140:	106d      	asrs	r5, r5, #1
 8006142:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006146:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800614a:	ec41 0b18 	vmov	d8, r0, r1
 800614e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006152:	2200      	movs	r2, #0
 8006154:	4640      	mov	r0, r8
 8006156:	4649      	mov	r1, r9
 8006158:	4614      	mov	r4, r2
 800615a:	461d      	mov	r5, r3
 800615c:	f7fa f9f8 	bl	8000550 <__aeabi_dmul>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4630      	mov	r0, r6
 8006166:	4639      	mov	r1, r7
 8006168:	f7fa f83a 	bl	80001e0 <__aeabi_dsub>
 800616c:	ec53 2b19 	vmov	r2, r3, d9
 8006170:	4606      	mov	r6, r0
 8006172:	460f      	mov	r7, r1
 8006174:	4620      	mov	r0, r4
 8006176:	4629      	mov	r1, r5
 8006178:	f7fa f832 	bl	80001e0 <__aeabi_dsub>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4650      	mov	r0, sl
 8006182:	4659      	mov	r1, fp
 8006184:	f7fa f82c 	bl	80001e0 <__aeabi_dsub>
 8006188:	4642      	mov	r2, r8
 800618a:	464b      	mov	r3, r9
 800618c:	f7fa f9e0 	bl	8000550 <__aeabi_dmul>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4630      	mov	r0, r6
 8006196:	4639      	mov	r1, r7
 8006198:	f7fa f822 	bl	80001e0 <__aeabi_dsub>
 800619c:	ec53 2b1a 	vmov	r2, r3, d10
 80061a0:	f7fa f9d6 	bl	8000550 <__aeabi_dmul>
 80061a4:	ec53 2b18 	vmov	r2, r3, d8
 80061a8:	ec41 0b19 	vmov	d9, r0, r1
 80061ac:	ec51 0b18 	vmov	r0, r1, d8
 80061b0:	f7fa f9ce 	bl	8000550 <__aeabi_dmul>
 80061b4:	a37c      	add	r3, pc, #496	; (adr r3, 80063a8 <__ieee754_pow+0x708>)
 80061b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ba:	4604      	mov	r4, r0
 80061bc:	460d      	mov	r5, r1
 80061be:	f7fa f9c7 	bl	8000550 <__aeabi_dmul>
 80061c2:	a37b      	add	r3, pc, #492	; (adr r3, 80063b0 <__ieee754_pow+0x710>)
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	f7fa f80c 	bl	80001e4 <__adddf3>
 80061cc:	4622      	mov	r2, r4
 80061ce:	462b      	mov	r3, r5
 80061d0:	f7fa f9be 	bl	8000550 <__aeabi_dmul>
 80061d4:	a378      	add	r3, pc, #480	; (adr r3, 80063b8 <__ieee754_pow+0x718>)
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	f7fa f803 	bl	80001e4 <__adddf3>
 80061de:	4622      	mov	r2, r4
 80061e0:	462b      	mov	r3, r5
 80061e2:	f7fa f9b5 	bl	8000550 <__aeabi_dmul>
 80061e6:	a376      	add	r3, pc, #472	; (adr r3, 80063c0 <__ieee754_pow+0x720>)
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f7f9 fffa 	bl	80001e4 <__adddf3>
 80061f0:	4622      	mov	r2, r4
 80061f2:	462b      	mov	r3, r5
 80061f4:	f7fa f9ac 	bl	8000550 <__aeabi_dmul>
 80061f8:	a373      	add	r3, pc, #460	; (adr r3, 80063c8 <__ieee754_pow+0x728>)
 80061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fe:	f7f9 fff1 	bl	80001e4 <__adddf3>
 8006202:	4622      	mov	r2, r4
 8006204:	462b      	mov	r3, r5
 8006206:	f7fa f9a3 	bl	8000550 <__aeabi_dmul>
 800620a:	a371      	add	r3, pc, #452	; (adr r3, 80063d0 <__ieee754_pow+0x730>)
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f7f9 ffe8 	bl	80001e4 <__adddf3>
 8006214:	4622      	mov	r2, r4
 8006216:	4606      	mov	r6, r0
 8006218:	460f      	mov	r7, r1
 800621a:	462b      	mov	r3, r5
 800621c:	4620      	mov	r0, r4
 800621e:	4629      	mov	r1, r5
 8006220:	f7fa f996 	bl	8000550 <__aeabi_dmul>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4630      	mov	r0, r6
 800622a:	4639      	mov	r1, r7
 800622c:	f7fa f990 	bl	8000550 <__aeabi_dmul>
 8006230:	4642      	mov	r2, r8
 8006232:	4604      	mov	r4, r0
 8006234:	460d      	mov	r5, r1
 8006236:	464b      	mov	r3, r9
 8006238:	ec51 0b18 	vmov	r0, r1, d8
 800623c:	f7f9 ffd2 	bl	80001e4 <__adddf3>
 8006240:	ec53 2b19 	vmov	r2, r3, d9
 8006244:	f7fa f984 	bl	8000550 <__aeabi_dmul>
 8006248:	4622      	mov	r2, r4
 800624a:	462b      	mov	r3, r5
 800624c:	f7f9 ffca 	bl	80001e4 <__adddf3>
 8006250:	4642      	mov	r2, r8
 8006252:	4682      	mov	sl, r0
 8006254:	468b      	mov	fp, r1
 8006256:	464b      	mov	r3, r9
 8006258:	4640      	mov	r0, r8
 800625a:	4649      	mov	r1, r9
 800625c:	f7fa f978 	bl	8000550 <__aeabi_dmul>
 8006260:	4b6b      	ldr	r3, [pc, #428]	; (8006410 <__ieee754_pow+0x770>)
 8006262:	2200      	movs	r2, #0
 8006264:	4606      	mov	r6, r0
 8006266:	460f      	mov	r7, r1
 8006268:	f7f9 ffbc 	bl	80001e4 <__adddf3>
 800626c:	4652      	mov	r2, sl
 800626e:	465b      	mov	r3, fp
 8006270:	f7f9 ffb8 	bl	80001e4 <__adddf3>
 8006274:	2000      	movs	r0, #0
 8006276:	4604      	mov	r4, r0
 8006278:	460d      	mov	r5, r1
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4640      	mov	r0, r8
 8006280:	4649      	mov	r1, r9
 8006282:	f7fa f965 	bl	8000550 <__aeabi_dmul>
 8006286:	4b62      	ldr	r3, [pc, #392]	; (8006410 <__ieee754_pow+0x770>)
 8006288:	4680      	mov	r8, r0
 800628a:	4689      	mov	r9, r1
 800628c:	2200      	movs	r2, #0
 800628e:	4620      	mov	r0, r4
 8006290:	4629      	mov	r1, r5
 8006292:	f7f9 ffa5 	bl	80001e0 <__aeabi_dsub>
 8006296:	4632      	mov	r2, r6
 8006298:	463b      	mov	r3, r7
 800629a:	f7f9 ffa1 	bl	80001e0 <__aeabi_dsub>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4650      	mov	r0, sl
 80062a4:	4659      	mov	r1, fp
 80062a6:	f7f9 ff9b 	bl	80001e0 <__aeabi_dsub>
 80062aa:	ec53 2b18 	vmov	r2, r3, d8
 80062ae:	f7fa f94f 	bl	8000550 <__aeabi_dmul>
 80062b2:	4622      	mov	r2, r4
 80062b4:	4606      	mov	r6, r0
 80062b6:	460f      	mov	r7, r1
 80062b8:	462b      	mov	r3, r5
 80062ba:	ec51 0b19 	vmov	r0, r1, d9
 80062be:	f7fa f947 	bl	8000550 <__aeabi_dmul>
 80062c2:	4602      	mov	r2, r0
 80062c4:	460b      	mov	r3, r1
 80062c6:	4630      	mov	r0, r6
 80062c8:	4639      	mov	r1, r7
 80062ca:	f7f9 ff8b 	bl	80001e4 <__adddf3>
 80062ce:	4606      	mov	r6, r0
 80062d0:	460f      	mov	r7, r1
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4640      	mov	r0, r8
 80062d8:	4649      	mov	r1, r9
 80062da:	f7f9 ff83 	bl	80001e4 <__adddf3>
 80062de:	a33e      	add	r3, pc, #248	; (adr r3, 80063d8 <__ieee754_pow+0x738>)
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	2000      	movs	r0, #0
 80062e6:	4604      	mov	r4, r0
 80062e8:	460d      	mov	r5, r1
 80062ea:	f7fa f931 	bl	8000550 <__aeabi_dmul>
 80062ee:	4642      	mov	r2, r8
 80062f0:	ec41 0b18 	vmov	d8, r0, r1
 80062f4:	464b      	mov	r3, r9
 80062f6:	4620      	mov	r0, r4
 80062f8:	4629      	mov	r1, r5
 80062fa:	f7f9 ff71 	bl	80001e0 <__aeabi_dsub>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4630      	mov	r0, r6
 8006304:	4639      	mov	r1, r7
 8006306:	f7f9 ff6b 	bl	80001e0 <__aeabi_dsub>
 800630a:	a335      	add	r3, pc, #212	; (adr r3, 80063e0 <__ieee754_pow+0x740>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f7fa f91e 	bl	8000550 <__aeabi_dmul>
 8006314:	a334      	add	r3, pc, #208	; (adr r3, 80063e8 <__ieee754_pow+0x748>)
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	4606      	mov	r6, r0
 800631c:	460f      	mov	r7, r1
 800631e:	4620      	mov	r0, r4
 8006320:	4629      	mov	r1, r5
 8006322:	f7fa f915 	bl	8000550 <__aeabi_dmul>
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	4630      	mov	r0, r6
 800632c:	4639      	mov	r1, r7
 800632e:	f7f9 ff59 	bl	80001e4 <__adddf3>
 8006332:	9a07      	ldr	r2, [sp, #28]
 8006334:	4b37      	ldr	r3, [pc, #220]	; (8006414 <__ieee754_pow+0x774>)
 8006336:	4413      	add	r3, r2
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	f7f9 ff52 	bl	80001e4 <__adddf3>
 8006340:	4682      	mov	sl, r0
 8006342:	9805      	ldr	r0, [sp, #20]
 8006344:	468b      	mov	fp, r1
 8006346:	f7fa f899 	bl	800047c <__aeabi_i2d>
 800634a:	9a07      	ldr	r2, [sp, #28]
 800634c:	4b32      	ldr	r3, [pc, #200]	; (8006418 <__ieee754_pow+0x778>)
 800634e:	4413      	add	r3, r2
 8006350:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006354:	4606      	mov	r6, r0
 8006356:	460f      	mov	r7, r1
 8006358:	4652      	mov	r2, sl
 800635a:	465b      	mov	r3, fp
 800635c:	ec51 0b18 	vmov	r0, r1, d8
 8006360:	f7f9 ff40 	bl	80001e4 <__adddf3>
 8006364:	4642      	mov	r2, r8
 8006366:	464b      	mov	r3, r9
 8006368:	f7f9 ff3c 	bl	80001e4 <__adddf3>
 800636c:	4632      	mov	r2, r6
 800636e:	463b      	mov	r3, r7
 8006370:	f7f9 ff38 	bl	80001e4 <__adddf3>
 8006374:	2000      	movs	r0, #0
 8006376:	4632      	mov	r2, r6
 8006378:	463b      	mov	r3, r7
 800637a:	4604      	mov	r4, r0
 800637c:	460d      	mov	r5, r1
 800637e:	f7f9 ff2f 	bl	80001e0 <__aeabi_dsub>
 8006382:	4642      	mov	r2, r8
 8006384:	464b      	mov	r3, r9
 8006386:	f7f9 ff2b 	bl	80001e0 <__aeabi_dsub>
 800638a:	ec53 2b18 	vmov	r2, r3, d8
 800638e:	f7f9 ff27 	bl	80001e0 <__aeabi_dsub>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4650      	mov	r0, sl
 8006398:	4659      	mov	r1, fp
 800639a:	e610      	b.n	8005fbe <__ieee754_pow+0x31e>
 800639c:	2401      	movs	r4, #1
 800639e:	e6a1      	b.n	80060e4 <__ieee754_pow+0x444>
 80063a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80063f0 <__ieee754_pow+0x750>
 80063a4:	e617      	b.n	8005fd6 <__ieee754_pow+0x336>
 80063a6:	bf00      	nop
 80063a8:	4a454eef 	.word	0x4a454eef
 80063ac:	3fca7e28 	.word	0x3fca7e28
 80063b0:	93c9db65 	.word	0x93c9db65
 80063b4:	3fcd864a 	.word	0x3fcd864a
 80063b8:	a91d4101 	.word	0xa91d4101
 80063bc:	3fd17460 	.word	0x3fd17460
 80063c0:	518f264d 	.word	0x518f264d
 80063c4:	3fd55555 	.word	0x3fd55555
 80063c8:	db6fabff 	.word	0xdb6fabff
 80063cc:	3fdb6db6 	.word	0x3fdb6db6
 80063d0:	33333303 	.word	0x33333303
 80063d4:	3fe33333 	.word	0x3fe33333
 80063d8:	e0000000 	.word	0xe0000000
 80063dc:	3feec709 	.word	0x3feec709
 80063e0:	dc3a03fd 	.word	0xdc3a03fd
 80063e4:	3feec709 	.word	0x3feec709
 80063e8:	145b01f5 	.word	0x145b01f5
 80063ec:	be3e2fe0 	.word	0xbe3e2fe0
 80063f0:	00000000 	.word	0x00000000
 80063f4:	3ff00000 	.word	0x3ff00000
 80063f8:	7ff00000 	.word	0x7ff00000
 80063fc:	43400000 	.word	0x43400000
 8006400:	0003988e 	.word	0x0003988e
 8006404:	000bb679 	.word	0x000bb679
 8006408:	08006a30 	.word	0x08006a30
 800640c:	3ff00000 	.word	0x3ff00000
 8006410:	40080000 	.word	0x40080000
 8006414:	08006a50 	.word	0x08006a50
 8006418:	08006a40 	.word	0x08006a40
 800641c:	a3b5      	add	r3, pc, #724	; (adr r3, 80066f4 <__ieee754_pow+0xa54>)
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	4640      	mov	r0, r8
 8006424:	4649      	mov	r1, r9
 8006426:	f7f9 fedd 	bl	80001e4 <__adddf3>
 800642a:	4622      	mov	r2, r4
 800642c:	ec41 0b1a 	vmov	d10, r0, r1
 8006430:	462b      	mov	r3, r5
 8006432:	4630      	mov	r0, r6
 8006434:	4639      	mov	r1, r7
 8006436:	f7f9 fed3 	bl	80001e0 <__aeabi_dsub>
 800643a:	4602      	mov	r2, r0
 800643c:	460b      	mov	r3, r1
 800643e:	ec51 0b1a 	vmov	r0, r1, d10
 8006442:	f7fa fb15 	bl	8000a70 <__aeabi_dcmpgt>
 8006446:	2800      	cmp	r0, #0
 8006448:	f47f ae04 	bne.w	8006054 <__ieee754_pow+0x3b4>
 800644c:	4aa4      	ldr	r2, [pc, #656]	; (80066e0 <__ieee754_pow+0xa40>)
 800644e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006452:	4293      	cmp	r3, r2
 8006454:	f340 8108 	ble.w	8006668 <__ieee754_pow+0x9c8>
 8006458:	151b      	asrs	r3, r3, #20
 800645a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800645e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006462:	fa4a f303 	asr.w	r3, sl, r3
 8006466:	445b      	add	r3, fp
 8006468:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800646c:	4e9d      	ldr	r6, [pc, #628]	; (80066e4 <__ieee754_pow+0xa44>)
 800646e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006472:	4116      	asrs	r6, r2
 8006474:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006478:	2000      	movs	r0, #0
 800647a:	ea23 0106 	bic.w	r1, r3, r6
 800647e:	f1c2 0214 	rsb	r2, r2, #20
 8006482:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006486:	fa4a fa02 	asr.w	sl, sl, r2
 800648a:	f1bb 0f00 	cmp.w	fp, #0
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	4620      	mov	r0, r4
 8006494:	4629      	mov	r1, r5
 8006496:	bfb8      	it	lt
 8006498:	f1ca 0a00 	rsblt	sl, sl, #0
 800649c:	f7f9 fea0 	bl	80001e0 <__aeabi_dsub>
 80064a0:	ec41 0b19 	vmov	d9, r0, r1
 80064a4:	4642      	mov	r2, r8
 80064a6:	464b      	mov	r3, r9
 80064a8:	ec51 0b19 	vmov	r0, r1, d9
 80064ac:	f7f9 fe9a 	bl	80001e4 <__adddf3>
 80064b0:	a37b      	add	r3, pc, #492	; (adr r3, 80066a0 <__ieee754_pow+0xa00>)
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	2000      	movs	r0, #0
 80064b8:	4604      	mov	r4, r0
 80064ba:	460d      	mov	r5, r1
 80064bc:	f7fa f848 	bl	8000550 <__aeabi_dmul>
 80064c0:	ec53 2b19 	vmov	r2, r3, d9
 80064c4:	4606      	mov	r6, r0
 80064c6:	460f      	mov	r7, r1
 80064c8:	4620      	mov	r0, r4
 80064ca:	4629      	mov	r1, r5
 80064cc:	f7f9 fe88 	bl	80001e0 <__aeabi_dsub>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4640      	mov	r0, r8
 80064d6:	4649      	mov	r1, r9
 80064d8:	f7f9 fe82 	bl	80001e0 <__aeabi_dsub>
 80064dc:	a372      	add	r3, pc, #456	; (adr r3, 80066a8 <__ieee754_pow+0xa08>)
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	f7fa f835 	bl	8000550 <__aeabi_dmul>
 80064e6:	a372      	add	r3, pc, #456	; (adr r3, 80066b0 <__ieee754_pow+0xa10>)
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	4680      	mov	r8, r0
 80064ee:	4689      	mov	r9, r1
 80064f0:	4620      	mov	r0, r4
 80064f2:	4629      	mov	r1, r5
 80064f4:	f7fa f82c 	bl	8000550 <__aeabi_dmul>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4640      	mov	r0, r8
 80064fe:	4649      	mov	r1, r9
 8006500:	f7f9 fe70 	bl	80001e4 <__adddf3>
 8006504:	4604      	mov	r4, r0
 8006506:	460d      	mov	r5, r1
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4630      	mov	r0, r6
 800650e:	4639      	mov	r1, r7
 8006510:	f7f9 fe68 	bl	80001e4 <__adddf3>
 8006514:	4632      	mov	r2, r6
 8006516:	463b      	mov	r3, r7
 8006518:	4680      	mov	r8, r0
 800651a:	4689      	mov	r9, r1
 800651c:	f7f9 fe60 	bl	80001e0 <__aeabi_dsub>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	4620      	mov	r0, r4
 8006526:	4629      	mov	r1, r5
 8006528:	f7f9 fe5a 	bl	80001e0 <__aeabi_dsub>
 800652c:	4642      	mov	r2, r8
 800652e:	4606      	mov	r6, r0
 8006530:	460f      	mov	r7, r1
 8006532:	464b      	mov	r3, r9
 8006534:	4640      	mov	r0, r8
 8006536:	4649      	mov	r1, r9
 8006538:	f7fa f80a 	bl	8000550 <__aeabi_dmul>
 800653c:	a35e      	add	r3, pc, #376	; (adr r3, 80066b8 <__ieee754_pow+0xa18>)
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	4604      	mov	r4, r0
 8006544:	460d      	mov	r5, r1
 8006546:	f7fa f803 	bl	8000550 <__aeabi_dmul>
 800654a:	a35d      	add	r3, pc, #372	; (adr r3, 80066c0 <__ieee754_pow+0xa20>)
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	f7f9 fe46 	bl	80001e0 <__aeabi_dsub>
 8006554:	4622      	mov	r2, r4
 8006556:	462b      	mov	r3, r5
 8006558:	f7f9 fffa 	bl	8000550 <__aeabi_dmul>
 800655c:	a35a      	add	r3, pc, #360	; (adr r3, 80066c8 <__ieee754_pow+0xa28>)
 800655e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006562:	f7f9 fe3f 	bl	80001e4 <__adddf3>
 8006566:	4622      	mov	r2, r4
 8006568:	462b      	mov	r3, r5
 800656a:	f7f9 fff1 	bl	8000550 <__aeabi_dmul>
 800656e:	a358      	add	r3, pc, #352	; (adr r3, 80066d0 <__ieee754_pow+0xa30>)
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	f7f9 fe34 	bl	80001e0 <__aeabi_dsub>
 8006578:	4622      	mov	r2, r4
 800657a:	462b      	mov	r3, r5
 800657c:	f7f9 ffe8 	bl	8000550 <__aeabi_dmul>
 8006580:	a355      	add	r3, pc, #340	; (adr r3, 80066d8 <__ieee754_pow+0xa38>)
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	f7f9 fe2d 	bl	80001e4 <__adddf3>
 800658a:	4622      	mov	r2, r4
 800658c:	462b      	mov	r3, r5
 800658e:	f7f9 ffdf 	bl	8000550 <__aeabi_dmul>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	4640      	mov	r0, r8
 8006598:	4649      	mov	r1, r9
 800659a:	f7f9 fe21 	bl	80001e0 <__aeabi_dsub>
 800659e:	4604      	mov	r4, r0
 80065a0:	460d      	mov	r5, r1
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4640      	mov	r0, r8
 80065a8:	4649      	mov	r1, r9
 80065aa:	f7f9 ffd1 	bl	8000550 <__aeabi_dmul>
 80065ae:	2200      	movs	r2, #0
 80065b0:	ec41 0b19 	vmov	d9, r0, r1
 80065b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065b8:	4620      	mov	r0, r4
 80065ba:	4629      	mov	r1, r5
 80065bc:	f7f9 fe10 	bl	80001e0 <__aeabi_dsub>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	ec51 0b19 	vmov	r0, r1, d9
 80065c8:	f7fa f8ec 	bl	80007a4 <__aeabi_ddiv>
 80065cc:	4632      	mov	r2, r6
 80065ce:	4604      	mov	r4, r0
 80065d0:	460d      	mov	r5, r1
 80065d2:	463b      	mov	r3, r7
 80065d4:	4640      	mov	r0, r8
 80065d6:	4649      	mov	r1, r9
 80065d8:	f7f9 ffba 	bl	8000550 <__aeabi_dmul>
 80065dc:	4632      	mov	r2, r6
 80065de:	463b      	mov	r3, r7
 80065e0:	f7f9 fe00 	bl	80001e4 <__adddf3>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4620      	mov	r0, r4
 80065ea:	4629      	mov	r1, r5
 80065ec:	f7f9 fdf8 	bl	80001e0 <__aeabi_dsub>
 80065f0:	4642      	mov	r2, r8
 80065f2:	464b      	mov	r3, r9
 80065f4:	f7f9 fdf4 	bl	80001e0 <__aeabi_dsub>
 80065f8:	460b      	mov	r3, r1
 80065fa:	4602      	mov	r2, r0
 80065fc:	493a      	ldr	r1, [pc, #232]	; (80066e8 <__ieee754_pow+0xa48>)
 80065fe:	2000      	movs	r0, #0
 8006600:	f7f9 fdee 	bl	80001e0 <__aeabi_dsub>
 8006604:	ec41 0b10 	vmov	d0, r0, r1
 8006608:	ee10 3a90 	vmov	r3, s1
 800660c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006610:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006614:	da2b      	bge.n	800666e <__ieee754_pow+0x9ce>
 8006616:	4650      	mov	r0, sl
 8006618:	f000 f966 	bl	80068e8 <scalbn>
 800661c:	ec51 0b10 	vmov	r0, r1, d0
 8006620:	ec53 2b18 	vmov	r2, r3, d8
 8006624:	f7ff bbed 	b.w	8005e02 <__ieee754_pow+0x162>
 8006628:	4b30      	ldr	r3, [pc, #192]	; (80066ec <__ieee754_pow+0xa4c>)
 800662a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800662e:	429e      	cmp	r6, r3
 8006630:	f77f af0c 	ble.w	800644c <__ieee754_pow+0x7ac>
 8006634:	4b2e      	ldr	r3, [pc, #184]	; (80066f0 <__ieee754_pow+0xa50>)
 8006636:	440b      	add	r3, r1
 8006638:	4303      	orrs	r3, r0
 800663a:	d009      	beq.n	8006650 <__ieee754_pow+0x9b0>
 800663c:	ec51 0b18 	vmov	r0, r1, d8
 8006640:	2200      	movs	r2, #0
 8006642:	2300      	movs	r3, #0
 8006644:	f7fa f9f6 	bl	8000a34 <__aeabi_dcmplt>
 8006648:	3800      	subs	r0, #0
 800664a:	bf18      	it	ne
 800664c:	2001      	movne	r0, #1
 800664e:	e447      	b.n	8005ee0 <__ieee754_pow+0x240>
 8006650:	4622      	mov	r2, r4
 8006652:	462b      	mov	r3, r5
 8006654:	f7f9 fdc4 	bl	80001e0 <__aeabi_dsub>
 8006658:	4642      	mov	r2, r8
 800665a:	464b      	mov	r3, r9
 800665c:	f7fa f9fe 	bl	8000a5c <__aeabi_dcmpge>
 8006660:	2800      	cmp	r0, #0
 8006662:	f43f aef3 	beq.w	800644c <__ieee754_pow+0x7ac>
 8006666:	e7e9      	b.n	800663c <__ieee754_pow+0x99c>
 8006668:	f04f 0a00 	mov.w	sl, #0
 800666c:	e71a      	b.n	80064a4 <__ieee754_pow+0x804>
 800666e:	ec51 0b10 	vmov	r0, r1, d0
 8006672:	4619      	mov	r1, r3
 8006674:	e7d4      	b.n	8006620 <__ieee754_pow+0x980>
 8006676:	491c      	ldr	r1, [pc, #112]	; (80066e8 <__ieee754_pow+0xa48>)
 8006678:	2000      	movs	r0, #0
 800667a:	f7ff bb30 	b.w	8005cde <__ieee754_pow+0x3e>
 800667e:	2000      	movs	r0, #0
 8006680:	2100      	movs	r1, #0
 8006682:	f7ff bb2c 	b.w	8005cde <__ieee754_pow+0x3e>
 8006686:	4630      	mov	r0, r6
 8006688:	4639      	mov	r1, r7
 800668a:	f7ff bb28 	b.w	8005cde <__ieee754_pow+0x3e>
 800668e:	9204      	str	r2, [sp, #16]
 8006690:	f7ff bb7a 	b.w	8005d88 <__ieee754_pow+0xe8>
 8006694:	2300      	movs	r3, #0
 8006696:	f7ff bb64 	b.w	8005d62 <__ieee754_pow+0xc2>
 800669a:	bf00      	nop
 800669c:	f3af 8000 	nop.w
 80066a0:	00000000 	.word	0x00000000
 80066a4:	3fe62e43 	.word	0x3fe62e43
 80066a8:	fefa39ef 	.word	0xfefa39ef
 80066ac:	3fe62e42 	.word	0x3fe62e42
 80066b0:	0ca86c39 	.word	0x0ca86c39
 80066b4:	be205c61 	.word	0xbe205c61
 80066b8:	72bea4d0 	.word	0x72bea4d0
 80066bc:	3e663769 	.word	0x3e663769
 80066c0:	c5d26bf1 	.word	0xc5d26bf1
 80066c4:	3ebbbd41 	.word	0x3ebbbd41
 80066c8:	af25de2c 	.word	0xaf25de2c
 80066cc:	3f11566a 	.word	0x3f11566a
 80066d0:	16bebd93 	.word	0x16bebd93
 80066d4:	3f66c16c 	.word	0x3f66c16c
 80066d8:	5555553e 	.word	0x5555553e
 80066dc:	3fc55555 	.word	0x3fc55555
 80066e0:	3fe00000 	.word	0x3fe00000
 80066e4:	000fffff 	.word	0x000fffff
 80066e8:	3ff00000 	.word	0x3ff00000
 80066ec:	4090cbff 	.word	0x4090cbff
 80066f0:	3f6f3400 	.word	0x3f6f3400
 80066f4:	652b82fe 	.word	0x652b82fe
 80066f8:	3c971547 	.word	0x3c971547

080066fc <__ieee754_sqrt>:
 80066fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006700:	ec55 4b10 	vmov	r4, r5, d0
 8006704:	4e55      	ldr	r6, [pc, #340]	; (800685c <__ieee754_sqrt+0x160>)
 8006706:	43ae      	bics	r6, r5
 8006708:	ee10 0a10 	vmov	r0, s0
 800670c:	ee10 3a10 	vmov	r3, s0
 8006710:	462a      	mov	r2, r5
 8006712:	4629      	mov	r1, r5
 8006714:	d110      	bne.n	8006738 <__ieee754_sqrt+0x3c>
 8006716:	ee10 2a10 	vmov	r2, s0
 800671a:	462b      	mov	r3, r5
 800671c:	f7f9 ff18 	bl	8000550 <__aeabi_dmul>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4620      	mov	r0, r4
 8006726:	4629      	mov	r1, r5
 8006728:	f7f9 fd5c 	bl	80001e4 <__adddf3>
 800672c:	4604      	mov	r4, r0
 800672e:	460d      	mov	r5, r1
 8006730:	ec45 4b10 	vmov	d0, r4, r5
 8006734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006738:	2d00      	cmp	r5, #0
 800673a:	dc10      	bgt.n	800675e <__ieee754_sqrt+0x62>
 800673c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006740:	4330      	orrs	r0, r6
 8006742:	d0f5      	beq.n	8006730 <__ieee754_sqrt+0x34>
 8006744:	b15d      	cbz	r5, 800675e <__ieee754_sqrt+0x62>
 8006746:	ee10 2a10 	vmov	r2, s0
 800674a:	462b      	mov	r3, r5
 800674c:	ee10 0a10 	vmov	r0, s0
 8006750:	f7f9 fd46 	bl	80001e0 <__aeabi_dsub>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	f7fa f824 	bl	80007a4 <__aeabi_ddiv>
 800675c:	e7e6      	b.n	800672c <__ieee754_sqrt+0x30>
 800675e:	1512      	asrs	r2, r2, #20
 8006760:	d074      	beq.n	800684c <__ieee754_sqrt+0x150>
 8006762:	07d4      	lsls	r4, r2, #31
 8006764:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006768:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800676c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006770:	bf5e      	ittt	pl
 8006772:	0fda      	lsrpl	r2, r3, #31
 8006774:	005b      	lslpl	r3, r3, #1
 8006776:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800677a:	2400      	movs	r4, #0
 800677c:	0fda      	lsrs	r2, r3, #31
 800677e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006782:	107f      	asrs	r7, r7, #1
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	2516      	movs	r5, #22
 8006788:	4620      	mov	r0, r4
 800678a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800678e:	1886      	adds	r6, r0, r2
 8006790:	428e      	cmp	r6, r1
 8006792:	bfde      	ittt	le
 8006794:	1b89      	suble	r1, r1, r6
 8006796:	18b0      	addle	r0, r6, r2
 8006798:	18a4      	addle	r4, r4, r2
 800679a:	0049      	lsls	r1, r1, #1
 800679c:	3d01      	subs	r5, #1
 800679e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80067a2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80067a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80067aa:	d1f0      	bne.n	800678e <__ieee754_sqrt+0x92>
 80067ac:	462a      	mov	r2, r5
 80067ae:	f04f 0e20 	mov.w	lr, #32
 80067b2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80067b6:	4281      	cmp	r1, r0
 80067b8:	eb06 0c05 	add.w	ip, r6, r5
 80067bc:	dc02      	bgt.n	80067c4 <__ieee754_sqrt+0xc8>
 80067be:	d113      	bne.n	80067e8 <__ieee754_sqrt+0xec>
 80067c0:	459c      	cmp	ip, r3
 80067c2:	d811      	bhi.n	80067e8 <__ieee754_sqrt+0xec>
 80067c4:	f1bc 0f00 	cmp.w	ip, #0
 80067c8:	eb0c 0506 	add.w	r5, ip, r6
 80067cc:	da43      	bge.n	8006856 <__ieee754_sqrt+0x15a>
 80067ce:	2d00      	cmp	r5, #0
 80067d0:	db41      	blt.n	8006856 <__ieee754_sqrt+0x15a>
 80067d2:	f100 0801 	add.w	r8, r0, #1
 80067d6:	1a09      	subs	r1, r1, r0
 80067d8:	459c      	cmp	ip, r3
 80067da:	bf88      	it	hi
 80067dc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80067e0:	eba3 030c 	sub.w	r3, r3, ip
 80067e4:	4432      	add	r2, r6
 80067e6:	4640      	mov	r0, r8
 80067e8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80067ec:	f1be 0e01 	subs.w	lr, lr, #1
 80067f0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80067f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80067f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80067fc:	d1db      	bne.n	80067b6 <__ieee754_sqrt+0xba>
 80067fe:	430b      	orrs	r3, r1
 8006800:	d006      	beq.n	8006810 <__ieee754_sqrt+0x114>
 8006802:	1c50      	adds	r0, r2, #1
 8006804:	bf13      	iteet	ne
 8006806:	3201      	addne	r2, #1
 8006808:	3401      	addeq	r4, #1
 800680a:	4672      	moveq	r2, lr
 800680c:	f022 0201 	bicne.w	r2, r2, #1
 8006810:	1063      	asrs	r3, r4, #1
 8006812:	0852      	lsrs	r2, r2, #1
 8006814:	07e1      	lsls	r1, r4, #31
 8006816:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800681a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800681e:	bf48      	it	mi
 8006820:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006824:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006828:	4614      	mov	r4, r2
 800682a:	e781      	b.n	8006730 <__ieee754_sqrt+0x34>
 800682c:	0ad9      	lsrs	r1, r3, #11
 800682e:	3815      	subs	r0, #21
 8006830:	055b      	lsls	r3, r3, #21
 8006832:	2900      	cmp	r1, #0
 8006834:	d0fa      	beq.n	800682c <__ieee754_sqrt+0x130>
 8006836:	02cd      	lsls	r5, r1, #11
 8006838:	d50a      	bpl.n	8006850 <__ieee754_sqrt+0x154>
 800683a:	f1c2 0420 	rsb	r4, r2, #32
 800683e:	fa23 f404 	lsr.w	r4, r3, r4
 8006842:	1e55      	subs	r5, r2, #1
 8006844:	4093      	lsls	r3, r2
 8006846:	4321      	orrs	r1, r4
 8006848:	1b42      	subs	r2, r0, r5
 800684a:	e78a      	b.n	8006762 <__ieee754_sqrt+0x66>
 800684c:	4610      	mov	r0, r2
 800684e:	e7f0      	b.n	8006832 <__ieee754_sqrt+0x136>
 8006850:	0049      	lsls	r1, r1, #1
 8006852:	3201      	adds	r2, #1
 8006854:	e7ef      	b.n	8006836 <__ieee754_sqrt+0x13a>
 8006856:	4680      	mov	r8, r0
 8006858:	e7bd      	b.n	80067d6 <__ieee754_sqrt+0xda>
 800685a:	bf00      	nop
 800685c:	7ff00000 	.word	0x7ff00000

08006860 <with_errno>:
 8006860:	b570      	push	{r4, r5, r6, lr}
 8006862:	4604      	mov	r4, r0
 8006864:	460d      	mov	r5, r1
 8006866:	4616      	mov	r6, r2
 8006868:	f7ff f976 	bl	8005b58 <__errno>
 800686c:	4629      	mov	r1, r5
 800686e:	6006      	str	r6, [r0, #0]
 8006870:	4620      	mov	r0, r4
 8006872:	bd70      	pop	{r4, r5, r6, pc}

08006874 <xflow>:
 8006874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006876:	4614      	mov	r4, r2
 8006878:	461d      	mov	r5, r3
 800687a:	b108      	cbz	r0, 8006880 <xflow+0xc>
 800687c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006880:	e9cd 2300 	strd	r2, r3, [sp]
 8006884:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006888:	4620      	mov	r0, r4
 800688a:	4629      	mov	r1, r5
 800688c:	f7f9 fe60 	bl	8000550 <__aeabi_dmul>
 8006890:	2222      	movs	r2, #34	; 0x22
 8006892:	b003      	add	sp, #12
 8006894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006898:	f7ff bfe2 	b.w	8006860 <with_errno>

0800689c <__math_uflow>:
 800689c:	b508      	push	{r3, lr}
 800689e:	2200      	movs	r2, #0
 80068a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80068a4:	f7ff ffe6 	bl	8006874 <xflow>
 80068a8:	ec41 0b10 	vmov	d0, r0, r1
 80068ac:	bd08      	pop	{r3, pc}

080068ae <__math_oflow>:
 80068ae:	b508      	push	{r3, lr}
 80068b0:	2200      	movs	r2, #0
 80068b2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80068b6:	f7ff ffdd 	bl	8006874 <xflow>
 80068ba:	ec41 0b10 	vmov	d0, r0, r1
 80068be:	bd08      	pop	{r3, pc}

080068c0 <fabs>:
 80068c0:	ec51 0b10 	vmov	r0, r1, d0
 80068c4:	ee10 2a10 	vmov	r2, s0
 80068c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80068cc:	ec43 2b10 	vmov	d0, r2, r3
 80068d0:	4770      	bx	lr

080068d2 <finite>:
 80068d2:	b082      	sub	sp, #8
 80068d4:	ed8d 0b00 	vstr	d0, [sp]
 80068d8:	9801      	ldr	r0, [sp, #4]
 80068da:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80068de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80068e2:	0fc0      	lsrs	r0, r0, #31
 80068e4:	b002      	add	sp, #8
 80068e6:	4770      	bx	lr

080068e8 <scalbn>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	ec55 4b10 	vmov	r4, r5, d0
 80068ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80068f2:	4606      	mov	r6, r0
 80068f4:	462b      	mov	r3, r5
 80068f6:	b99a      	cbnz	r2, 8006920 <scalbn+0x38>
 80068f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80068fc:	4323      	orrs	r3, r4
 80068fe:	d036      	beq.n	800696e <scalbn+0x86>
 8006900:	4b39      	ldr	r3, [pc, #228]	; (80069e8 <scalbn+0x100>)
 8006902:	4629      	mov	r1, r5
 8006904:	ee10 0a10 	vmov	r0, s0
 8006908:	2200      	movs	r2, #0
 800690a:	f7f9 fe21 	bl	8000550 <__aeabi_dmul>
 800690e:	4b37      	ldr	r3, [pc, #220]	; (80069ec <scalbn+0x104>)
 8006910:	429e      	cmp	r6, r3
 8006912:	4604      	mov	r4, r0
 8006914:	460d      	mov	r5, r1
 8006916:	da10      	bge.n	800693a <scalbn+0x52>
 8006918:	a32b      	add	r3, pc, #172	; (adr r3, 80069c8 <scalbn+0xe0>)
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	e03a      	b.n	8006996 <scalbn+0xae>
 8006920:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006924:	428a      	cmp	r2, r1
 8006926:	d10c      	bne.n	8006942 <scalbn+0x5a>
 8006928:	ee10 2a10 	vmov	r2, s0
 800692c:	4620      	mov	r0, r4
 800692e:	4629      	mov	r1, r5
 8006930:	f7f9 fc58 	bl	80001e4 <__adddf3>
 8006934:	4604      	mov	r4, r0
 8006936:	460d      	mov	r5, r1
 8006938:	e019      	b.n	800696e <scalbn+0x86>
 800693a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800693e:	460b      	mov	r3, r1
 8006940:	3a36      	subs	r2, #54	; 0x36
 8006942:	4432      	add	r2, r6
 8006944:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006948:	428a      	cmp	r2, r1
 800694a:	dd08      	ble.n	800695e <scalbn+0x76>
 800694c:	2d00      	cmp	r5, #0
 800694e:	a120      	add	r1, pc, #128	; (adr r1, 80069d0 <scalbn+0xe8>)
 8006950:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006954:	da1c      	bge.n	8006990 <scalbn+0xa8>
 8006956:	a120      	add	r1, pc, #128	; (adr r1, 80069d8 <scalbn+0xf0>)
 8006958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800695c:	e018      	b.n	8006990 <scalbn+0xa8>
 800695e:	2a00      	cmp	r2, #0
 8006960:	dd08      	ble.n	8006974 <scalbn+0x8c>
 8006962:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006966:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800696a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800696e:	ec45 4b10 	vmov	d0, r4, r5
 8006972:	bd70      	pop	{r4, r5, r6, pc}
 8006974:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006978:	da19      	bge.n	80069ae <scalbn+0xc6>
 800697a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800697e:	429e      	cmp	r6, r3
 8006980:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006984:	dd0a      	ble.n	800699c <scalbn+0xb4>
 8006986:	a112      	add	r1, pc, #72	; (adr r1, 80069d0 <scalbn+0xe8>)
 8006988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e2      	bne.n	8006956 <scalbn+0x6e>
 8006990:	a30f      	add	r3, pc, #60	; (adr r3, 80069d0 <scalbn+0xe8>)
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	f7f9 fddb 	bl	8000550 <__aeabi_dmul>
 800699a:	e7cb      	b.n	8006934 <scalbn+0x4c>
 800699c:	a10a      	add	r1, pc, #40	; (adr r1, 80069c8 <scalbn+0xe0>)
 800699e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d0b8      	beq.n	8006918 <scalbn+0x30>
 80069a6:	a10e      	add	r1, pc, #56	; (adr r1, 80069e0 <scalbn+0xf8>)
 80069a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069ac:	e7b4      	b.n	8006918 <scalbn+0x30>
 80069ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80069b2:	3236      	adds	r2, #54	; 0x36
 80069b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80069bc:	4620      	mov	r0, r4
 80069be:	4b0c      	ldr	r3, [pc, #48]	; (80069f0 <scalbn+0x108>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	e7e8      	b.n	8006996 <scalbn+0xae>
 80069c4:	f3af 8000 	nop.w
 80069c8:	c2f8f359 	.word	0xc2f8f359
 80069cc:	01a56e1f 	.word	0x01a56e1f
 80069d0:	8800759c 	.word	0x8800759c
 80069d4:	7e37e43c 	.word	0x7e37e43c
 80069d8:	8800759c 	.word	0x8800759c
 80069dc:	fe37e43c 	.word	0xfe37e43c
 80069e0:	c2f8f359 	.word	0xc2f8f359
 80069e4:	81a56e1f 	.word	0x81a56e1f
 80069e8:	43500000 	.word	0x43500000
 80069ec:	ffff3cb0 	.word	0xffff3cb0
 80069f0:	3c900000 	.word	0x3c900000

080069f4 <_init>:
 80069f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f6:	bf00      	nop
 80069f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069fa:	bc08      	pop	{r3}
 80069fc:	469e      	mov	lr, r3
 80069fe:	4770      	bx	lr

08006a00 <_fini>:
 8006a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a02:	bf00      	nop
 8006a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a06:	bc08      	pop	{r3}
 8006a08:	469e      	mov	lr, r3
 8006a0a:	4770      	bx	lr
