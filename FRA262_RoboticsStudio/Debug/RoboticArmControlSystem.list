
RoboticArmControlSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000925c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080093f8  080093f8  000193f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009448  08009448  000202b8  2**0
                  CONTENTS
  4 .ARM          00000008  08009448  08009448  00019448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009450  08009450  000202b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009450  08009450  00019450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009454  08009454  00019454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  08009458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b6c  200002b8  08009710  000202b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e24  08009710  00020e24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001220b  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002256  00000000  00000000  000324f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00034750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00035608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017834  00000000  00000000  00036408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bfc  00000000  00000000  0004dc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab8f  00000000  00000000  0005e838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f93c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b8  00000000  00000000  000f9418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002b8 	.word	0x200002b8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080093dc 	.word	0x080093dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002bc 	.word	0x200002bc
 80001d4:	080093dc 	.word	0x080093dc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <modbus_1t5_Timeout+0x1c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	751a      	strb	r2, [r3, #20]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	200002d4 	.word	0x200002d4

08000ec4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <modbus_3t5_Timeout+0x1c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	755a      	strb	r2, [r3, #21]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	200002d4 	.word	0x200002d4

08000ee4 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000efe:	1c59      	adds	r1, r3, #1
 8000f00:	b289      	uxth	r1, r1
 8000f02:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000f06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f0a:	d210      	bcs.n	8000f2e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68d8      	ldr	r0, [r3, #12]
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f1e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f22:	4413      	add	r3, r2
 8000f24:	3302      	adds	r3, #2
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f006 f963 	bl	80071f4 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200002d4 	.word	0x200002d4

08000f48 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f52:	4a24      	ldr	r2, [pc, #144]	; (8000fe4 <Modbus_init+0x9c>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <Modbus_init+0x9c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <Modbus_init+0x9c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <Modbus_init+0xa0>)
 8000f68:	2114      	movs	r1, #20
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f005 faf4 	bl	8006558 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <Modbus_init+0x9c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <Modbus_init+0xa4>)
 8000f78:	210e      	movs	r1, #14
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f005 faec 	bl	8006558 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <Modbus_init+0x9c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <Modbus_init+0xa8>)
 8000f88:	2103      	movs	r1, #3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f006 f88a 	bl	80070a4 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <Modbus_init+0x9c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68d8      	ldr	r0, [r3, #12]
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <Modbus_init+0x9c>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <Modbus_init+0x9c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000fa2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	2201      	movs	r2, #1
 8000fac:	4619      	mov	r1, r3
 8000fae:	f006 f921 	bl	80071f4 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <Modbus_init+0x9c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d10c      	bne.n	8000fdc <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <Modbus_init+0x9c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f004 fb79 	bl	80056c0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <Modbus_init+0x9c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 fdae 	bl	8005b38 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200002d4 	.word	0x200002d4
 8000fe8:	08000ea5 	.word	0x08000ea5
 8000fec:	08000ec5 	.word	0x08000ec5
 8000ff0:	08000ee5 	.word	0x08000ee5

08000ff4 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001000:	23ff      	movs	r3, #255	; 0xff
 8001002:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001004:	23ff      	movs	r3, #255	; 0xff
 8001006:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001008:	e013      	b.n	8001032 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	4053      	eors	r3, r2
 8001016:	b2db      	uxtb	r3, r3
 8001018:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <CRC16+0x64>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4413      	add	r3, r2
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	4053      	eors	r3, r2
 8001026:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001028:	4a0c      	ldr	r2, [pc, #48]	; (800105c <CRC16+0x68>)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001032:	883b      	ldrh	r3, [r7, #0]
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	803a      	strh	r2, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e6      	bne.n	800100a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20000100 	.word	0x20000100
 800105c:	20000000 	.word	0x20000000

08001060 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001066:	4b81      	ldr	r3, [pc, #516]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	7e1b      	ldrb	r3, [r3, #24]
 800106c:	3b01      	subs	r3, #1
 800106e:	2b03      	cmp	r3, #3
 8001070:	d80a      	bhi.n	8001088 <Modbus_Protocal_Worker+0x28>
 8001072:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <Modbus_Protocal_Worker+0x18>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	08001093 	.word	0x08001093
 800107c:	08001233 	.word	0x08001233
 8001080:	0800111f 	.word	0x0800111f
 8001084:	08001145 	.word	0x08001145
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001088:	4b78      	ldr	r3, [pc, #480]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2201      	movs	r2, #1
 800108e:	761a      	strb	r2, [r3, #24]
		break;
 8001090:	e0e8      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001092:	4b76      	ldr	r3, [pc, #472]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800109e:	f000 f9dd 	bl	800145c <Modbus_Emission>
 80010a2:	e01c      	b.n	80010de <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80010a4:	4b71      	ldr	r3, [pc, #452]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	7d9b      	ldrb	r3, [r3, #22]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d017      	beq.n	80010de <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80010ae:	4b6f      	ldr	r3, [pc, #444]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80010b6:	4b6d      	ldr	r3, [pc, #436]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80010be:	4b6b      	ldr	r3, [pc, #428]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b68      	ldr	r3, [pc, #416]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 0201 	orr.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010d6:	4b65      	ldr	r3, [pc, #404]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2203      	movs	r2, #3
 80010dc:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010de:	4b63      	ldr	r3, [pc, #396]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b20      	cmp	r3, #32
 80010ec:	f040 80b3 	bne.w	8001256 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80010f0:	4b5e      	ldr	r3, [pc, #376]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010fa:	4b5c      	ldr	r3, [pc, #368]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68d8      	ldr	r0, [r3, #12]
 8001100:	4b5a      	ldr	r3, [pc, #360]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b59      	ldr	r3, [pc, #356]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800110c:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001110:	4413      	add	r3, r2
 8001112:	3302      	adds	r3, #2
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	f006 f86c 	bl	80071f4 <HAL_UART_Receive_IT>
		}
		break;
 800111c:	e09b      	b.n	8001256 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800111e:	4b53      	ldr	r3, [pc, #332]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	7d1b      	ldrb	r3, [r3, #20]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 8098 	beq.w	800125a <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800112a:	4b50      	ldr	r3, [pc, #320]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001132:	4b4e      	ldr	r3, [pc, #312]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	22fe      	movs	r2, #254	; 0xfe
 8001138:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800113a:	4b4c      	ldr	r3, [pc, #304]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2204      	movs	r2, #4
 8001140:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001142:	e08a      	b.n	800125a <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001144:	4b49      	ldr	r3, [pc, #292]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	7d9b      	ldrb	r3, [r3, #22]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d009      	beq.n	8001162 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d103      	bne.n	8001162 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800115a:	4b44      	ldr	r3, [pc, #272]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	22ff      	movs	r2, #255	; 0xff
 8001160:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001162:	4b42      	ldr	r3, [pc, #264]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800116a:	f113 0f02 	cmn.w	r3, #2
 800116e:	d150      	bne.n	8001212 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001170:	4b3e      	ldr	r3, [pc, #248]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2200      	movs	r2, #0
 8001176:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001178:	4b3c      	ldr	r3, [pc, #240]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001180:	4b3a      	ldr	r3, [pc, #232]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001188:	3b02      	subs	r3, #2
 800118a:	4619      	mov	r1, r3
 800118c:	4610      	mov	r0, r2
 800118e:	f7ff ff31 	bl	8000ff4 <CRC16>
 8001192:	4603      	mov	r3, r0
 8001194:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001196:	793a      	ldrb	r2, [r7, #4]
 8001198:	4b34      	ldr	r3, [pc, #208]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800119a:	6819      	ldr	r1, [r3, #0]
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011a4:	3b02      	subs	r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d10c      	bne.n	80011ca <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80011b0:	797a      	ldrb	r2, [r7, #5]
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011b4:	6819      	ldr	r1, [r3, #0]
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011be:	3b01      	subs	r3, #1
 80011c0:	440b      	add	r3, r1
 80011c2:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d004      	beq.n	80011d4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	22ff      	movs	r2, #255	; 0xff
 80011d0:	75da      	strb	r2, [r3, #23]
				break;
 80011d2:	e047      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d113      	bne.n	800120e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80011f6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001200:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001202:	461a      	mov	r2, r3
 8001204:	f007 f9b8 	bl	8008578 <memcpy>

			//execute command
			Modbus_frame_response();
 8001208:	f000 f910 	bl	800142c <Modbus_frame_response>
 800120c:	e001      	b.n	8001212 <Modbus_Protocal_Worker+0x1b2>
				break;
 800120e:	bf00      	nop
					}
		break;


	}
}
 8001210:	e028      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	7d5b      	ldrb	r3, [r3, #21]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2201      	movs	r2, #1
 8001222:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	4618      	mov	r0, r3
 800122c:	f006 f890 	bl	8007350 <HAL_UART_AbortReceive>
		break;
 8001230:	e015      	b.n	800125e <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b20      	cmp	r3, #32
 8001240:	d10f      	bne.n	8001262 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	761a      	strb	r2, [r3, #24]
		break;
 8001254:	e005      	b.n	8001262 <Modbus_Protocal_Worker+0x202>
		break;
 8001256:	bf00      	nop
 8001258:	e004      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 800125a:	bf00      	nop
 800125c:	e002      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 800125e:	bf00      	nop
 8001260:	e000      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 8001262:	bf00      	nop
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200002d4 	.word	0x200002d4

08001270 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <modbusWrite1Register+0x80>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	7e9b      	ldrb	r3, [r3, #26]
 800127c:	b29b      	uxth	r3, r3
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <modbusWrite1Register+0x80>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7edb      	ldrb	r3, [r3, #27]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4413      	add	r3, r2
 800128c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800128e:	88fa      	ldrh	r2, [r7, #6]
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <modbusWrite1Register+0x80>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	429a      	cmp	r2, r3
 8001298:	d903      	bls.n	80012a2 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800129a:	2002      	movs	r0, #2
 800129c:	f000 f8a4 	bl	80013e8 <ModbusErrorReply>
			 return;
 80012a0:	e023      	b.n	80012ea <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <modbusWrite1Register+0x80>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <modbusWrite1Register+0x80>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	440b      	add	r3, r1
 80012b2:	7f12      	ldrb	r2, [r2, #28]
 80012b4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <modbusWrite1Register+0x80>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <modbusWrite1Register+0x80>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6859      	ldr	r1, [r3, #4]
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	440b      	add	r3, r1
 80012c6:	7f52      	ldrb	r2, [r2, #29]
 80012c8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <modbusWrite1Register+0x80>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <modbusWrite1Register+0x80>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 80012d8:	2208      	movs	r2, #8
 80012da:	4619      	mov	r1, r3
 80012dc:	f007 f94c 	bl	8008578 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <modbusWrite1Register+0x80>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2205      	movs	r2, #5
 80012e6:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200002d4 	.word	0x200002d4

080012f4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <modbusRead1Register+0xf0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	7f1b      	ldrb	r3, [r3, #28]
 8001300:	b29b      	uxth	r3, r3
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <modbusRead1Register+0xf0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	7f5b      	ldrb	r3, [r3, #29]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <modbusRead1Register+0xf0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	7e9b      	ldrb	r3, [r3, #26]
 8001318:	b29b      	uxth	r3, r3
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <modbusRead1Register+0xf0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	7edb      	ldrb	r3, [r3, #27]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4413      	add	r3, r2
 8001328:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <modbusRead1Register+0x42>
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	2b7d      	cmp	r3, #125	; 0x7d
 8001334:	d903      	bls.n	800133e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001336:	2003      	movs	r0, #3
 8001338:	f000 f856 	bl	80013e8 <ModbusErrorReply>
		 return;
 800133c:	e04e      	b.n	80013dc <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800133e:	88ba      	ldrh	r2, [r7, #4]
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <modbusRead1Register+0xf0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	429a      	cmp	r2, r3
 8001348:	d808      	bhi.n	800135c <modbusRead1Register+0x68>
 800134a:	88ba      	ldrh	r2, [r7, #4]
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	4413      	add	r3, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <modbusRead1Register+0xf0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	429a      	cmp	r2, r3
 800135a:	d903      	bls.n	8001364 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800135c:	2002      	movs	r0, #2
 800135e:	f000 f843 	bl	80013e8 <ModbusErrorReply>
		 return;
 8001362:	e03b      	b.n	80013dc <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <modbusRead1Register+0xf0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2203      	movs	r2, #3
 800136a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <modbusRead1Register+0xf0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	0052      	lsls	r2, r2, #1
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800137e:	2400      	movs	r4, #0
 8001380:	e020      	b.n	80013c4 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <modbusRead1Register+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	4423      	add	r3, r4
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	18d1      	adds	r1, r2, r3
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <modbusRead1Register+0xf0>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	1c63      	adds	r3, r4, #1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	7849      	ldrb	r1, [r1, #1]
 800139a:	4413      	add	r3, r2
 800139c:	460a      	mov	r2, r1
 800139e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <modbusRead1Register+0xf0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	4423      	add	r3, r4
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	18d1      	adds	r1, r2, r3
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <modbusRead1Register+0xf0>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	0063      	lsls	r3, r4, #1
 80013b6:	3303      	adds	r3, #3
 80013b8:	7809      	ldrb	r1, [r1, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	460a      	mov	r2, r1
 80013be:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80013c2:	3401      	adds	r4, #1
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	429c      	cmp	r4, r3
 80013c8:	dbdb      	blt.n	8001382 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <modbusRead1Register+0xf0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0052      	lsls	r2, r2, #1
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200002d4 	.word	0x200002d4

080013e8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <ModbusErrorReply+0x40>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	7e5a      	ldrb	r2, [r3, #25]
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <ModbusErrorReply+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <ModbusErrorReply+0x40>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <ModbusErrorReply+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2202      	movs	r2, #2
 8001416:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	200002d4 	.word	0x200002d4

0800142c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <Modbus_frame_response+0x2c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	7e5b      	ldrb	r3, [r3, #25]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d004      	beq.n	8001444 <Modbus_frame_response+0x18>
 800143a:	2b06      	cmp	r3, #6
 800143c:	d105      	bne.n	800144a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800143e:	f7ff ff17 	bl	8001270 <modbusWrite1Register>
		break;
 8001442:	e006      	b.n	8001452 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001444:	f7ff ff56 	bl	80012f4 <modbusRead1Register>
		break;
 8001448:	e003      	b.n	8001452 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800144a:	2001      	movs	r0, #1
 800144c:	f7ff ffcc 	bl	80013e8 <ModbusErrorReply>
		break;
 8001450:	bf00      	nop

	}
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200002d4 	.word	0x200002d4

0800145c <Modbus_Emission>:

void Modbus_Emission()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <Modbus_Emission+0xfc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b20      	cmp	r3, #32
 8001470:	d15e      	bne.n	8001530 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <Modbus_Emission+0xfc>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <Modbus_Emission+0xfc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001480:	4b35      	ldr	r3, [pc, #212]	; (8001558 <Modbus_Emission+0xfc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001488:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <Modbus_Emission+0xfc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <Modbus_Emission+0xfc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800149a:	461a      	mov	r2, r3
 800149c:	f007 f86c 	bl	8008578 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <Modbus_Emission+0xfc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <Modbus_Emission+0xfc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3203      	adds	r2, #3
 80014b0:	b292      	uxth	r2, r2
 80014b2:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <Modbus_Emission+0xfc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <Modbus_Emission+0xfc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014c6:	3b02      	subs	r3, #2
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f7ff fd92 	bl	8000ff4 <CRC16>
 80014d0:	4603      	mov	r3, r0
 80014d2:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <Modbus_Emission+0xfc>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <Modbus_Emission+0xfc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014e0:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80014e2:	7939      	ldrb	r1, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	460a      	mov	r2, r1
 80014e8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <Modbus_Emission+0xfc>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <Modbus_Emission+0xfc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014f8:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014fa:	7979      	ldrb	r1, [r7, #5]
 80014fc:	4413      	add	r3, r2
 80014fe:	460a      	mov	r2, r1
 8001500:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <Modbus_Emission+0xfc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b20      	cmp	r3, #32
 8001512:	d10d      	bne.n	8001530 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <Modbus_Emission+0xfc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <Modbus_Emission+0xfc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <Modbus_Emission+0xfc>)
 8001524:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001526:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800152a:	461a      	mov	r2, r3
 800152c:	f005 fe92 	bl	8007254 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <Modbus_Emission+0xfc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <Modbus_Emission+0xfc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <Modbus_Emission+0xfc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <Modbus_Emission+0xfc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2202      	movs	r2, #2
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200002d4 	.word	0x200002d4

0800155c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001560:	f002 f816 	bl	8003590 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001564:	f000 f85e 	bl	8001624 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001568:	f000 fb4c 	bl	8001c04 <MX_GPIO_Init>
	MX_DMA_Init();
 800156c:	f000 fb14 	bl	8001b98 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001570:	f000 fae6 	bl	8001b40 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001574:	f000 f91e 	bl	80017b4 <MX_TIM1_Init>
	MX_TIM5_Init();
 8001578:	f000 fa3a 	bl	80019f0 <MX_TIM5_Init>
	MX_TIM2_Init();
 800157c:	f000 f99e 	bl	80018bc <MX_TIM2_Init>
	MX_ADC1_Init();
 8001580:	f000 f8b8 	bl	80016f4 <MX_ADC1_Init>
	MX_TIM3_Init();
 8001584:	f000 f9e6 	bl	8001954 <MX_TIM3_Init>
	MX_TIM11_Init();
 8001588:	f000 fa86 	bl	8001a98 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800158c:	2104      	movs	r1, #4
 800158e:	481b      	ldr	r0, [pc, #108]	; (80015fc <main+0xa0>)
 8001590:	f004 fbec 	bl	8005d6c <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start(&htim1);
 8001594:	481a      	ldr	r0, [pc, #104]	; (8001600 <main+0xa4>)
 8001596:	f004 f839 	bl	800560c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800159a:	2100      	movs	r1, #0
 800159c:	4818      	ldr	r0, [pc, #96]	; (8001600 <main+0xa4>)
 800159e:	f004 f9b3 	bl	8005908 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 80015a2:	4818      	ldr	r0, [pc, #96]	; (8001604 <main+0xa8>)
 80015a4:	f004 f88c 	bl	80056c0 <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, (uint16_t*) buffer, 20);
 80015a8:	2214      	movs	r2, #20
 80015aa:	4917      	ldr	r1, [pc, #92]	; (8001608 <main+0xac>)
 80015ac:	4817      	ldr	r0, [pc, #92]	; (800160c <main+0xb0>)
 80015ae:	f002 f8a5 	bl	80036fc <HAL_ADC_Start_DMA>

	hmodbus.huart = &huart2;
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <main+0xb4>)
 80015b4:	4a17      	ldr	r2, [pc, #92]	; (8001614 <main+0xb8>)
 80015b6:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <main+0xb4>)
 80015ba:	4a17      	ldr	r2, [pc, #92]	; (8001618 <main+0xbc>)
 80015bc:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <main+0xb4>)
 80015c0:	2215      	movs	r2, #21
 80015c2:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70; // 70
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <main+0xb4>)
 80015c6:	2246      	movs	r2, #70	; 0x46
 80015c8:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80015ca:	4914      	ldr	r1, [pc, #80]	; (800161c <main+0xc0>)
 80015cc:	4810      	ldr	r0, [pc, #64]	; (8001610 <main+0xb4>)
 80015ce:	f7ff fcbb 	bl	8000f48 <Modbus_init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Modbus_Protocal_Worker();
 80015d2:	f7ff fd45 	bl	8001060 <Modbus_Protocal_Worker>
		static uint32_t timestamp = 0;
		if (HAL_GetTick() >= timestamp) {
 80015d6:	f002 f841 	bl	800365c <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <main+0xc4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3f6      	bcc.n	80015d2 <main+0x76>
			timestamp = HAL_GetTick() + 100;
 80015e4:	f002 f83a 	bl	800365c <HAL_GetTick>
 80015e8:	4603      	mov	r3, r0
 80015ea:	3364      	adds	r3, #100	; 0x64
 80015ec:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <main+0xc4>)
 80015ee:	6013      	str	r3, [r2, #0]
			registerFrame[0].U16 = 22881;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <main+0xc0>)
 80015f2:	f645 1261 	movw	r2, #22881	; 0x5961
 80015f6:	801a      	strh	r2, [r3, #0]
	while (1) {
 80015f8:	e7eb      	b.n	80015d2 <main+0x76>
 80015fa:	bf00      	nop
 80015fc:	2000059c 	.word	0x2000059c
 8001600:	20000380 	.word	0x20000380
 8001604:	20000434 	.word	0x20000434
 8001608:	20000d44 	.word	0x20000d44
 800160c:	200002d8 	.word	0x200002d8
 8001610:	200007d8 	.word	0x200007d8
 8001614:	20000704 	.word	0x20000704
 8001618:	20000650 	.word	0x20000650
 800161c:	20000cb0 	.word	0x20000cb0
 8001620:	20000e1c 	.word	0x20000e1c

08001624 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b094      	sub	sp, #80	; 0x50
 8001628:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800162a:	f107 0320 	add.w	r3, r7, #32
 800162e:	2230      	movs	r2, #48	; 0x30
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f006 ffae 	bl	8008594 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <SystemClock_Config+0xc8>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a26      	ldr	r2, [pc, #152]	; (80016ec <SystemClock_Config+0xc8>)
 8001652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <SystemClock_Config+0xc8>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <SystemClock_Config+0xcc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a20      	ldr	r2, [pc, #128]	; (80016f0 <SystemClock_Config+0xcc>)
 800166e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <SystemClock_Config+0xcc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001680:	2302      	movs	r3, #2
 8001682:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001684:	2301      	movs	r3, #1
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001688:	2310      	movs	r3, #16
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168c:	2302      	movs	r3, #2
 800168e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001690:	2300      	movs	r3, #0
 8001692:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001694:	2308      	movs	r3, #8
 8001696:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001698:	2364      	movs	r3, #100	; 0x64
 800169a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800169c:	2302      	movs	r3, #2
 800169e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80016a0:	2304      	movs	r3, #4
 80016a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016a4:	f107 0320 	add.w	r3, r7, #32
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 fabb 	bl	8004c24 <HAL_RCC_OscConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SystemClock_Config+0x94>
		Error_Handler();
 80016b4:	f001 fc92 	bl	8002fdc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016b8:	230f      	movs	r3, #15
 80016ba:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016bc:	2302      	movs	r3, #2
 80016be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	2103      	movs	r1, #3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fd1d 	bl	8005114 <HAL_RCC_ClockConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0xc0>
		Error_Handler();
 80016e0:	f001 fc7c 	bl	8002fdc <Error_Handler>
	}
}
 80016e4:	bf00      	nop
 80016e6:	3750      	adds	r7, #80	; 0x50
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40007000 	.word	0x40007000

080016f4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80016fa:	463b      	mov	r3, r7
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001706:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001708:	4a28      	ldr	r2, [pc, #160]	; (80017ac <MX_ADC1_Init+0xb8>)
 800170a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800170c:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <MX_ADC1_Init+0xb4>)
 800170e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001712:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001714:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <MX_ADC1_Init+0xb4>)
 800171c:	2201      	movs	r2, #1
 800171e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001722:	2201      	movs	r2, #1
 8001724:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800172e:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001730:	2200      	movs	r2, #0
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001734:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001736:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <MX_ADC1_Init+0xbc>)
 8001738:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <MX_ADC1_Init+0xb4>)
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001742:	2202      	movs	r2, #2
 8001744:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001750:	2201      	movs	r2, #1
 8001752:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001754:	4814      	ldr	r0, [pc, #80]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001756:	f001 ff8d 	bl	8003674 <HAL_ADC_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001760:	f001 fc3c 	bl	8002fdc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8001764:	230d      	movs	r3, #13
 8001766:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001768:	2301      	movs	r3, #1
 800176a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800176c:	2303      	movs	r3, #3
 800176e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001770:	463b      	mov	r3, r7
 8001772:	4619      	mov	r1, r3
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001776:	f002 f8cf 	bl	8003918 <HAL_ADC_ConfigChannel>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001780:	f001 fc2c 	bl	8002fdc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8001784:	230a      	movs	r3, #10
 8001786:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001788:	2302      	movs	r3, #2
 800178a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800178c:	463b      	mov	r3, r7
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_ADC1_Init+0xb4>)
 8001792:	f002 f8c1 	bl	8003918 <HAL_ADC_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC1_Init+0xac>
		Error_Handler();
 800179c:	f001 fc1e 	bl	8002fdc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200002d8 	.word	0x200002d8
 80017ac:	40012000 	.word	0x40012000
 80017b0:	0f000001 	.word	0x0f000001

080017b4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b092      	sub	sp, #72	; 0x48
 80017b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
 80017d4:	615a      	str	r2, [r3, #20]
 80017d6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2220      	movs	r2, #32
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f006 fed8 	bl	8008594 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80017e4:	4b33      	ldr	r3, [pc, #204]	; (80018b4 <MX_TIM1_Init+0x100>)
 80017e6:	4a34      	ldr	r2, [pc, #208]	; (80018b8 <MX_TIM1_Init+0x104>)
 80017e8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 99;
 80017ea:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <MX_TIM1_Init+0x100>)
 80017ec:	2263      	movs	r2, #99	; 0x63
 80017ee:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f0:	4b30      	ldr	r3, [pc, #192]	; (80018b4 <MX_TIM1_Init+0x100>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 80017f6:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <MX_TIM1_Init+0x100>)
 80017f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017fc:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fe:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <MX_TIM1_Init+0x100>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <MX_TIM1_Init+0x100>)
 8001806:	2200      	movs	r2, #0
 8001808:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180a:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <MX_TIM1_Init+0x100>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001810:	4828      	ldr	r0, [pc, #160]	; (80018b4 <MX_TIM1_Init+0x100>)
 8001812:	f004 f81d 	bl	8005850 <HAL_TIM_PWM_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM1_Init+0x6c>
		Error_Handler();
 800181c:	f001 fbde 	bl	8002fdc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001828:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800182c:	4619      	mov	r1, r3
 800182e:	4821      	ldr	r0, [pc, #132]	; (80018b4 <MX_TIM1_Init+0x100>)
 8001830:	f005 fb00 	bl	8006e34 <HAL_TIMEx_MasterConfigSynchronization>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800183a:	f001 fbcf 	bl	8002fdc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183e:	2360      	movs	r3, #96	; 0x60
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800184a:	2300      	movs	r3, #0
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	2200      	movs	r2, #0
 8001860:	4619      	mov	r1, r3
 8001862:	4814      	ldr	r0, [pc, #80]	; (80018b4 <MX_TIM1_Init+0x100>)
 8001864:	f004 fc94 	bl	8006190 <HAL_TIM_PWM_ConfigChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 800186e:	f001 fbb5 	bl	8002fdc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001886:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800188a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <MX_TIM1_Init+0x100>)
 8001896:	f005 fb3b 	bl	8006f10 <HAL_TIMEx_ConfigBreakDeadTime>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 80018a0:	f001 fb9c 	bl	8002fdc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <MX_TIM1_Init+0x100>)
 80018a6:	f001 fd11 	bl	80032cc <HAL_TIM_MspPostInit>

}
 80018aa:	bf00      	nop
 80018ac:	3748      	adds	r7, #72	; 0x48
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000380 	.word	0x20000380
 80018b8:	40010000 	.word	0x40010000

080018bc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80018d0:	463b      	mov	r3, r7
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <MX_TIM2_Init+0x94>)
 80018da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018de:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9999;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <MX_TIM2_Init+0x94>)
 80018e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80018e6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	4b19      	ldr	r3, [pc, #100]	; (8001950 <MX_TIM2_Init+0x94>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <MX_TIM2_Init+0x94>)
 80018f0:	2209      	movs	r2, #9
 80018f2:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <MX_TIM2_Init+0x94>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <MX_TIM2_Init+0x94>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001900:	4813      	ldr	r0, [pc, #76]	; (8001950 <MX_TIM2_Init+0x94>)
 8001902:	f003 fe27 	bl	8005554 <HAL_TIM_Base_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM2_Init+0x54>
		Error_Handler();
 800190c:	f001 fb66 	bl	8002fdc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001914:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	4619      	mov	r1, r3
 800191c:	480c      	ldr	r0, [pc, #48]	; (8001950 <MX_TIM2_Init+0x94>)
 800191e:	f004 fcf9 	bl	8006314 <HAL_TIM_ConfigClockSource>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM2_Init+0x70>
		Error_Handler();
 8001928:	f001 fb58 	bl	8002fdc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001934:	463b      	mov	r3, r7
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_TIM2_Init+0x94>)
 800193a:	f005 fa7b 	bl	8006e34 <HAL_TIMEx_MasterConfigSynchronization>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001944:	f001 fb4a 	bl	8002fdc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000434 	.word	0x20000434

08001954 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001968:	463b      	mov	r3, r7
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001970:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001972:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <MX_TIM3_Init+0x98>)
 8001974:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <MX_TIM3_Init+0x94>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001988:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <MX_TIM3_Init+0x94>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001996:	4814      	ldr	r0, [pc, #80]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001998:	f003 fddc 	bl	8005554 <HAL_TIM_Base_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM3_Init+0x52>
		Error_Handler();
 80019a2:	f001 fb1b 	bl	8002fdc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019aa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	4619      	mov	r1, r3
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <MX_TIM3_Init+0x94>)
 80019b4:	f004 fcae 	bl	8006314 <HAL_TIM_ConfigClockSource>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM3_Init+0x6e>
		Error_Handler();
 80019be:	f001 fb0d 	bl	8002fdc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80019ca:	463b      	mov	r3, r7
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	; (80019e8 <MX_TIM3_Init+0x94>)
 80019d0:	f005 fa30 	bl	8006e34 <HAL_TIMEx_MasterConfigSynchronization>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80019da:	f001 faff 	bl	8002fdc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200004e8 	.word	0x200004e8
 80019ec:	40000400 	.word	0x40000400

080019f0 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	; 0x30
 80019f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	2224      	movs	r2, #36	; 0x24
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f006 fdc8 	bl	8008594 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <MX_TIM5_Init+0xa0>)
 8001a0e:	4a21      	ldr	r2, [pc, #132]	; (8001a94 <MX_TIM5_Init+0xa4>)
 8001a10:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <MX_TIM5_Init+0xa0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <MX_TIM5_Init+0xa0>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <MX_TIM5_Init+0xa0>)
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <MX_TIM5_Init+0xa0>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2c:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <MX_TIM5_Init+0xa0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a32:	2303      	movs	r3, #3
 8001a34:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <MX_TIM5_Init+0xa0>)
 8001a5e:	f004 f8d1 	bl	8005c04 <HAL_TIM_Encoder_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM5_Init+0x7c>
		Error_Handler();
 8001a68:	f001 fab8 	bl	8002fdc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_TIM5_Init+0xa0>)
 8001a7a:	f005 f9db 	bl	8006e34 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM5_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001a84:	f001 faaa 	bl	8002fdc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	3730      	adds	r7, #48	; 0x30
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	2000059c 	.word	0x2000059c
 8001a94:	40000c00 	.word	0x40000c00

08001a98 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
 8001aac:	615a      	str	r2, [r3, #20]
 8001aae:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001ab2:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <MX_TIM11_Init+0xa4>)
 8001ab4:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 99;
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001ab8:	2263      	movs	r2, #99	; 0x63
 8001aba:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 2005;
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001ac4:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8001ac8:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8001ad6:	4818      	ldr	r0, [pc, #96]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001ad8:	f003 fd3c 	bl	8005554 <HAL_TIM_Base_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM11_Init+0x4e>
		Error_Handler();
 8001ae2:	f001 fa7b 	bl	8002fdc <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim11) != HAL_OK) {
 8001ae6:	4814      	ldr	r0, [pc, #80]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001ae8:	f003 fe4c 	bl	8005784 <HAL_TIM_OC_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM11_Init+0x5e>
		Error_Handler();
 8001af2:	f001 fa73 	bl	8002fdc <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK) {
 8001af6:	2108      	movs	r1, #8
 8001af8:	480f      	ldr	r0, [pc, #60]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001afa:	f003 ffb5 	bl	8005a68 <HAL_TIM_OnePulse_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM11_Init+0x70>
		Error_Handler();
 8001b04:	f001 fa6a 	bl	8002fdc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001b08:	2310      	movs	r3, #16
 8001b0a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 1433;
 8001b0c:	f240 5399 	movw	r3, #1433	; 0x599
 8001b10:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_TIM11_Init+0xa0>)
 8001b22:	f004 fad9 	bl	80060d8 <HAL_TIM_OC_ConfigChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM11_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001b2c:	f001 fa56 	bl	8002fdc <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000650 	.word	0x20000650
 8001b3c:	40014800 	.word	0x40014800

08001b40 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b46:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <MX_USART2_UART_Init+0x54>)
 8001b48:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b4c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001b50:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b58:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b66:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_USART2_UART_Init+0x50>)
 8001b7c:	f005 fa38 	bl	8006ff0 <HAL_UART_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_USART2_UART_Init+0x4a>
		Error_Handler();
 8001b86:	f001 fa29 	bl	8002fdc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000704 	.word	0x20000704
 8001b94:	40004400 	.word	0x40004400

08001b98 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_DMA_Init+0x68>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a16      	ldr	r2, [pc, #88]	; (8001c00 <MX_DMA_Init+0x68>)
 8001ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_DMA_Init+0x68>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <MX_DMA_Init+0x68>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <MX_DMA_Init+0x68>)
 8001bc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <MX_DMA_Init+0x68>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2011      	movs	r0, #17
 8001bdc:	f002 fa27 	bl	800402e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001be0:	2011      	movs	r0, #17
 8001be2:	f002 fa40 	bl	8004066 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	2038      	movs	r0, #56	; 0x38
 8001bec:	f002 fa1f 	bl	800402e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001bf0:	2038      	movs	r0, #56	; 0x38
 8001bf2:	f002 fa38 	bl	8004066 <HAL_NVIC_EnableIRQ>

}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800

08001c04 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4b52      	ldr	r3, [pc, #328]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a51      	ldr	r2, [pc, #324]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b4f      	ldr	r3, [pc, #316]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b4b      	ldr	r3, [pc, #300]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a4a      	ldr	r2, [pc, #296]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	4b44      	ldr	r3, [pc, #272]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a43      	ldr	r2, [pc, #268]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a3c      	ldr	r2, [pc, #240]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <MX_GPIO_Init+0x164>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2120      	movs	r1, #32
 8001c8e:	4837      	ldr	r0, [pc, #220]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001c90:	f002 ffae 	bl	8004bf0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_11 | GPIO_PIN_12,
 8001c94:	2200      	movs	r2, #0
 8001c96:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
 8001c9a:	4835      	ldr	r0, [pc, #212]	; (8001d70 <MX_GPIO_Init+0x16c>)
 8001c9c:	f002 ffa8 	bl	8004bf0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ca6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001caa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	482e      	ldr	r0, [pc, #184]	; (8001d70 <MX_GPIO_Init+0x16c>)
 8001cb8:	f002 fdfe 	bl	80048b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC2 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_10;
 8001cbc:	f240 4304 	movw	r3, #1028	; 0x404
 8001cc0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4827      	ldr	r0, [pc, #156]	; (8001d70 <MX_GPIO_Init+0x16c>)
 8001cd2:	f002 fdf1 	bl	80048b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4820      	ldr	r0, [pc, #128]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001cea:	f002 fde5 	bl	80048b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001cee:	2320      	movs	r3, #32
 8001cf0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	4819      	ldr	r0, [pc, #100]	; (8001d6c <MX_GPIO_Init+0x168>)
 8001d06:	f002 fdd7 	bl	80048b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB14 PB5 PB7
	 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_14 | GPIO_PIN_5 | GPIO_PIN_7
 8001d0a:	f244 23a1 	movw	r3, #17057	; 0x42a1
 8001d0e:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4815      	ldr	r0, [pc, #84]	; (8001d74 <MX_GPIO_Init+0x170>)
 8001d20:	f002 fdca 	bl	80048b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d24:	2340      	movs	r3, #64	; 0x40
 8001d26:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480d      	ldr	r0, [pc, #52]	; (8001d70 <MX_GPIO_Init+0x16c>)
 8001d3c:	f002 fdbc 	bl	80048b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC11 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8001d40:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d44:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d46:	2311      	movs	r3, #17
 8001d48:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_GPIO_Init+0x16c>)
 8001d5a:	f002 fdad 	bl	80048b8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020400 	.word	0x40020400

08001d78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d140      	bne.n	8001e0a <HAL_TIM_PeriodElapsedCallback+0x92>
		photoDetect();
 8001d88:	f000 fa80 	bl	800228c <photoDetect>
		robotArmState(registerFrame[1].U16);
 8001d8c:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001d8e:	885b      	ldrh	r3, [r3, #2]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f001 f825 	bl	8002de0 <robotArmState>
		readEncoder();
 8001d96:	f000 f875 	bl	8001e84 <readEncoder>

		if (photoSig[0] || photoSig[2]) // Motor Photo Sensor : SOFTWARELIMIT
 8001d9a:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d103      	bne.n	8001daa <HAL_TIM_PeriodElapsedCallback+0x32>
 8001da2:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001da4:	789b      	ldrb	r3, [r3, #2]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x3e>
				{
			duty = 0;
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
			setMotor();
 8001db2:	f000 f841 	bl	8001e38 <setMotor>
		}

		if (startSetHome) {
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x4a>
			setHome();
 8001dbe:	f000 f87d 	bl	8001ebc <setHome>
		}


		if (startPointModeY)
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01f      	beq.n	8001e0a <HAL_TIM_PeriodElapsedCallback+0x92>
		{
			targetPos = registerFrame[49].U16;
 8001dca:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001dcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001dd0:	b21a      	sxth	r2, r3
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001dd4:	801a      	strh	r2, [r3, #0]
			onlyPositionControl(initPosY, targetPos/ 10);
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de8:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001dea:	fb82 1203 	smull	r1, r2, r2, r3
 8001dee:	1092      	asrs	r2, r2, #2
 8001df0:	17db      	asrs	r3, r3, #31
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	ee07 3a10 	vmov	s14, r3
 8001dfa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001dfe:	eef0 0a47 	vmov.f32	s1, s14
 8001e02:	eeb0 0a67 	vmov.f32	s0, s15
 8001e06:	f000 f8bb 	bl	8001f80 <onlyPositionControl>
		}


	}
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000434 	.word	0x20000434
 8001e18:	20000cb0 	.word	0x20000cb0
 8001e1c:	20000d88 	.word	0x20000d88
 8001e20:	20000d70 	.word	0x20000d70
 8001e24:	20000244 	.word	0x20000244
 8001e28:	20000e12 	.word	0x20000e12
 8001e2c:	20000e18 	.word	0x20000e18
 8001e30:	20000e14 	.word	0x20000e14
 8001e34:	66666667 	.word	0x66666667

08001e38 <setMotor>:

void setMotor() {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	if (dirAxisY) {
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <setMotor+0x3c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <setMotor+0x18>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001e44:	2201      	movs	r2, #1
 8001e46:	2140      	movs	r1, #64	; 0x40
 8001e48:	480b      	ldr	r0, [pc, #44]	; (8001e78 <setMotor+0x40>)
 8001e4a:	f002 fed1 	bl	8004bf0 <HAL_GPIO_WritePin>
 8001e4e:	e004      	b.n	8001e5a <setMotor+0x22>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2140      	movs	r1, #64	; 0x40
 8001e54:	4808      	ldr	r0, [pc, #32]	; (8001e78 <setMotor+0x40>)
 8001e56:	f002 fecb 	bl	8004bf0 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <setMotor+0x44>)
 8001e5c:	edd3 7a00 	vldr	s15, [r3]
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <setMotor+0x48>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e68:	ee17 2a90 	vmov	r2, s15
 8001e6c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000229 	.word	0x20000229
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	20000d70 	.word	0x20000d70
 8001e80:	20000380 	.word	0x20000380

08001e84 <readEncoder>:

void readEncoder() {
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <readEncoder+0x28>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <readEncoder+0x2c>)
 8001e92:	601a      	str	r2, [r3, #0]
	QEIReadModified = QEIReadRaw - QEIHome;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <readEncoder+0x2c>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <readEncoder+0x30>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	4a06      	ldr	r2, [pc, #24]	; (8001eb8 <readEncoder+0x34>)
 8001ea0:	6013      	str	r3, [r2, #0]
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	2000059c 	.word	0x2000059c
 8001eb0:	20000d74 	.word	0x20000d74
 8001eb4:	20000d7c 	.word	0x20000d7c
 8001eb8:	20000d78 	.word	0x20000d78

08001ebc <setHome>:

void setHome() {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0

	switch (myHomeState) {
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <setHome+0x9c>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d02f      	beq.n	8001f28 <setHome+0x6c>
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	dc42      	bgt.n	8001f52 <setHome+0x96>
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <setHome+0x1a>
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d014      	beq.n	8001efe <setHome+0x42>
		registerFrame[16].U16 = 0;
		break;

	}

}
 8001ed4:	e03d      	b.n	8001f52 <setHome+0x96>
		if (photoSig[0]) // Motor Photo Sensor
 8001ed6:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <setHome+0xa0>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <setHome+0x2a>
			myHomeState = 1;
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <setHome+0x9c>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
		break;
 8001ee4:	e035      	b.n	8001f52 <setHome+0x96>
			dirAxisY = 0;
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <setHome+0xa4>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
			duty = 220;
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <setHome+0xa8>)
 8001eee:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <setHome+0xac>)
 8001ef0:	601a      	str	r2, [r3, #0]
			setMotor();
 8001ef2:	f7ff ffa1 	bl	8001e38 <setMotor>
			myHomeState = 1;
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <setHome+0x9c>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
		break;
 8001efc:	e029      	b.n	8001f52 <setHome+0x96>
		if (photoSig[0]) // Motor Photo Sensor
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <setHome+0xa0>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d008      	beq.n	8001f18 <setHome+0x5c>
			dirAxisY = 1;
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <setHome+0xa4>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
			duty = 220;
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <setHome+0xa8>)
 8001f0e:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <setHome+0xac>)
 8001f10:	601a      	str	r2, [r3, #0]
			setMotor();
 8001f12:	f7ff ff91 	bl	8001e38 <setMotor>
		break;
 8001f16:	e01b      	b.n	8001f50 <setHome+0x94>
		} else if (photoSig[1]) // Center Photo Sensor
 8001f18:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <setHome+0xa0>)
 8001f1a:	785b      	ldrb	r3, [r3, #1]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d017      	beq.n	8001f50 <setHome+0x94>
			myHomeState = 2;
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <setHome+0x9c>)
 8001f22:	2202      	movs	r2, #2
 8001f24:	701a      	strb	r2, [r3, #0]
		break;
 8001f26:	e013      	b.n	8001f50 <setHome+0x94>
		duty = 0;
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <setHome+0xa8>)
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
		setMotor();
 8001f30:	f7ff ff82 	bl	8001e38 <setMotor>
		QEIHome = QEIReadRaw;
 8001f34:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <setHome+0xb0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <setHome+0xb4>)
 8001f3a:	6013      	str	r3, [r2, #0]
		startSetHome = 0;
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <setHome+0xb8>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
		myHomeState = 0;
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <setHome+0x9c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
		registerFrame[16].U16 = 0;
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <setHome+0xbc>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	841a      	strh	r2, [r3, #32]
		break;
 8001f4e:	e000      	b.n	8001f52 <setHome+0x96>
		break;
 8001f50:	bf00      	nop
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000e10 	.word	0x20000e10
 8001f5c:	20000d88 	.word	0x20000d88
 8001f60:	20000229 	.word	0x20000229
 8001f64:	20000d70 	.word	0x20000d70
 8001f68:	435c0000 	.word	0x435c0000
 8001f6c:	20000d74 	.word	0x20000d74
 8001f70:	20000d7c 	.word	0x20000d7c
 8001f74:	20000244 	.word	0x20000244
 8001f78:	20000cb0 	.word	0x20000cb0
 8001f7c:	00000000 	.word	0x00000000

08001f80 <onlyPositionControl>:
	}
	prePos = mmActPos;
	setMotor();
}

void onlyPositionControl(float initPos, float targetPos) {
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f8a:	edc7 0a00 	vstr	s1, [r7]
	calculationTraj result = trapezoidalTraj(initPos, targetPos);
 8001f8e:	f107 0308 	add.w	r3, r7, #8
 8001f92:	edd7 0a00 	vldr	s1, [r7]
 8001f96:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f998 	bl	80022d0 <trapezoidalTraj>
	mmActPos = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 8001fa0:	4b67      	ldr	r3, [pc, #412]	; (8002140 <onlyPositionControl+0x1c0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fa69 	bl	800047c <__aeabi_i2d>
 8001faa:	a361      	add	r3, pc, #388	; (adr r3, 8002130 <onlyPositionControl+0x1b0>)
 8001fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb0:	f7fe face 	bl	8000550 <__aeabi_dmul>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7fe fda0 	bl	8000b00 <__aeabi_d2f>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4a60      	ldr	r2, [pc, #384]	; (8002144 <onlyPositionControl+0x1c4>)
 8001fc4:	6013      	str	r3, [r2, #0]
	mmActVel = (mmActPos - prePos) / 0.001;
 8001fc6:	4b5f      	ldr	r3, [pc, #380]	; (8002144 <onlyPositionControl+0x1c4>)
 8001fc8:	ed93 7a00 	vldr	s14, [r3]
 8001fcc:	4b5e      	ldr	r3, [pc, #376]	; (8002148 <onlyPositionControl+0x1c8>)
 8001fce:	edd3 7a00 	vldr	s15, [r3]
 8001fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd6:	ee17 0a90 	vmov	r0, s15
 8001fda:	f7fe fa61 	bl	80004a0 <__aeabi_f2d>
 8001fde:	a356      	add	r3, pc, #344	; (adr r3, 8002138 <onlyPositionControl+0x1b8>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	f7fe fbde 	bl	80007a4 <__aeabi_ddiv>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f7fe fd86 	bl	8000b00 <__aeabi_d2f>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4a55      	ldr	r2, [pc, #340]	; (800214c <onlyPositionControl+0x1cc>)
 8001ff8:	6013      	str	r3, [r2, #0]
	mmActAcc = (mmActVel - preVel) / 0.001;
 8001ffa:	4b54      	ldr	r3, [pc, #336]	; (800214c <onlyPositionControl+0x1cc>)
 8001ffc:	ed93 7a00 	vldr	s14, [r3]
 8002000:	4b53      	ldr	r3, [pc, #332]	; (8002150 <onlyPositionControl+0x1d0>)
 8002002:	edd3 7a00 	vldr	s15, [r3]
 8002006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200a:	ee17 0a90 	vmov	r0, s15
 800200e:	f7fe fa47 	bl	80004a0 <__aeabi_f2d>
 8002012:	a349      	add	r3, pc, #292	; (adr r3, 8002138 <onlyPositionControl+0x1b8>)
 8002014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002018:	f7fe fbc4 	bl	80007a4 <__aeabi_ddiv>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	f7fe fd6c 	bl	8000b00 <__aeabi_d2f>
 8002028:	4603      	mov	r3, r0
 800202a:	4a4a      	ldr	r2, [pc, #296]	; (8002154 <onlyPositionControl+0x1d4>)
 800202c:	6013      	str	r3, [r2, #0]

	mmError = result.posTraj - mmActPos;
 800202e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002032:	4b44      	ldr	r3, [pc, #272]	; (8002144 <onlyPositionControl+0x1c4>)
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800203c:	4b46      	ldr	r3, [pc, #280]	; (8002158 <onlyPositionControl+0x1d8>)
 800203e:	edc3 7a00 	vstr	s15, [r3]
	positionPID.eIntegral = positionPID.eIntegral + (mmError * 0.001);
 8002042:	4b46      	ldr	r3, [pc, #280]	; (800215c <onlyPositionControl+0x1dc>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa2a 	bl	80004a0 <__aeabi_f2d>
 800204c:	4604      	mov	r4, r0
 800204e:	460d      	mov	r5, r1
 8002050:	4b41      	ldr	r3, [pc, #260]	; (8002158 <onlyPositionControl+0x1d8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fa23 	bl	80004a0 <__aeabi_f2d>
 800205a:	a337      	add	r3, pc, #220	; (adr r3, 8002138 <onlyPositionControl+0x1b8>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe fa76 	bl	8000550 <__aeabi_dmul>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4620      	mov	r0, r4
 800206a:	4629      	mov	r1, r5
 800206c:	f7fe f8ba 	bl	80001e4 <__adddf3>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	f7fe fd42 	bl	8000b00 <__aeabi_d2f>
 800207c:	4603      	mov	r3, r0
 800207e:	4a37      	ldr	r2, [pc, #220]	; (800215c <onlyPositionControl+0x1dc>)
 8002080:	60d3      	str	r3, [r2, #12]
	duty = (positionPID.pTerm * mmError)
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <onlyPositionControl+0x1dc>)
 8002084:	ed93 7a00 	vldr	s14, [r3]
 8002088:	4b33      	ldr	r3, [pc, #204]	; (8002158 <onlyPositionControl+0x1d8>)
 800208a:	edd3 7a00 	vldr	s15, [r3]
 800208e:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (positionPID.iTerm * positionPID.eIntegral);
 8002092:	4b32      	ldr	r3, [pc, #200]	; (800215c <onlyPositionControl+0x1dc>)
 8002094:	edd3 6a01 	vldr	s13, [r3, #4]
 8002098:	4b30      	ldr	r3, [pc, #192]	; (800215c <onlyPositionControl+0x1dc>)
 800209a:	edd3 7a03 	vldr	s15, [r3, #12]
 800209e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a2:	ee77 7a27 	vadd.f32	s15, s14, s15
	duty = (positionPID.pTerm * mmError)
 80020a6:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <onlyPositionControl+0x1e0>)
 80020a8:	edc3 7a00 	vstr	s15, [r3]
	if (duty < 0) {
 80020ac:	4b2c      	ldr	r3, [pc, #176]	; (8002160 <onlyPositionControl+0x1e0>)
 80020ae:	edd3 7a00 	vldr	s15, [r3]
 80020b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ba:	d50b      	bpl.n	80020d4 <onlyPositionControl+0x154>
		dirAxisY = 0;
 80020bc:	4b29      	ldr	r3, [pc, #164]	; (8002164 <onlyPositionControl+0x1e4>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
		duty = (-1) * duty;
 80020c2:	4b27      	ldr	r3, [pc, #156]	; (8002160 <onlyPositionControl+0x1e0>)
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	eef1 7a67 	vneg.f32	s15, s15
 80020cc:	4b24      	ldr	r3, [pc, #144]	; (8002160 <onlyPositionControl+0x1e0>)
 80020ce:	edc3 7a00 	vstr	s15, [r3]
 80020d2:	e002      	b.n	80020da <onlyPositionControl+0x15a>
	} else {
		dirAxisY = 1;
 80020d4:	4b23      	ldr	r3, [pc, #140]	; (8002164 <onlyPositionControl+0x1e4>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
	}
	if (duty > 1000) {
 80020da:	4b21      	ldr	r3, [pc, #132]	; (8002160 <onlyPositionControl+0x1e0>)
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002168 <onlyPositionControl+0x1e8>
 80020e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ec:	dd03      	ble.n	80020f6 <onlyPositionControl+0x176>
		duty = 1000;
 80020ee:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <onlyPositionControl+0x1e0>)
 80020f0:	4a1e      	ldr	r2, [pc, #120]	; (800216c <onlyPositionControl+0x1ec>)
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	e00d      	b.n	8002112 <onlyPositionControl+0x192>
	} else if (duty <= 120) {
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <onlyPositionControl+0x1e0>)
 80020f8:	edd3 7a00 	vldr	s15, [r3]
 80020fc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002170 <onlyPositionControl+0x1f0>
 8002100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002108:	d803      	bhi.n	8002112 <onlyPositionControl+0x192>
		duty = 0;
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <onlyPositionControl+0x1e0>)
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
	}
	prePos = mmActPos;
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <onlyPositionControl+0x1c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <onlyPositionControl+0x1c8>)
 8002118:	6013      	str	r3, [r2, #0]
	preVel = mmActVel;
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <onlyPositionControl+0x1cc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a0c      	ldr	r2, [pc, #48]	; (8002150 <onlyPositionControl+0x1d0>)
 8002120:	6013      	str	r3, [r2, #0]
	setMotor();
 8002122:	f7ff fe89 	bl	8001e38 <setMotor>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bdb0      	pop	{r4, r5, r7, pc}
 800212e:	bf00      	nop
 8002130:	464f6faa 	.word	0x464f6faa
 8002134:	3f8199cb 	.word	0x3f8199cb
 8002138:	d2f1a9fc 	.word	0xd2f1a9fc
 800213c:	3f50624d 	.word	0x3f50624d
 8002140:	20000d78 	.word	0x20000d78
 8002144:	20000d80 	.word	0x20000d80
 8002148:	20000e08 	.word	0x20000e08
 800214c:	20000e00 	.word	0x20000e00
 8002150:	20000e0c 	.word	0x20000e0c
 8002154:	20000e04 	.word	0x20000e04
 8002158:	20000d84 	.word	0x20000d84
 800215c:	2000022c 	.word	0x2000022c
 8002160:	20000d70 	.word	0x20000d70
 8002164:	20000229 	.word	0x20000229
 8002168:	447a0000 	.word	0x447a0000
 800216c:	447a0000 	.word	0x447a0000
 8002170:	42f00000 	.word	0x42f00000

08002174 <jogAxisY>:


void jogAxisY() {
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
	refYPos = buffer[0].subdata.yAxis;
 8002178:	4b3a      	ldr	r3, [pc, #232]	; (8002264 <jogAxisY+0xf0>)
 800217a:	885b      	ldrh	r3, [r3, #2]
 800217c:	ee07 3a90 	vmov	s15, r3
 8002180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002184:	4b38      	ldr	r3, [pc, #224]	; (8002268 <jogAxisY+0xf4>)
 8002186:	edc3 7a00 	vstr	s15, [r3]
	if (refYPos > 2500) {
 800218a:	4b37      	ldr	r3, [pc, #220]	; (8002268 <jogAxisY+0xf4>)
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800226c <jogAxisY+0xf8>
 8002194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219c:	dd03      	ble.n	80021a6 <jogAxisY+0x32>
		dirAxisY = 1;
 800219e:	4b34      	ldr	r3, [pc, #208]	; (8002270 <jogAxisY+0xfc>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e00c      	b.n	80021c0 <jogAxisY+0x4c>
	} else if (refYPos < 1500) {
 80021a6:	4b30      	ldr	r3, [pc, #192]	; (8002268 <jogAxisY+0xf4>)
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002274 <jogAxisY+0x100>
 80021b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b8:	d502      	bpl.n	80021c0 <jogAxisY+0x4c>
		dirAxisY = 0;
 80021ba:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <jogAxisY+0xfc>)
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
	}
	if (refYPos > 3600 || refYPos < 100) {
 80021c0:	4b29      	ldr	r3, [pc, #164]	; (8002268 <jogAxisY+0xf4>)
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002278 <jogAxisY+0x104>
 80021ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d2:	dc09      	bgt.n	80021e8 <jogAxisY+0x74>
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <jogAxisY+0xf4>)
 80021d6:	edd3 7a00 	vldr	s15, [r3]
 80021da:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800227c <jogAxisY+0x108>
 80021de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e6:	d503      	bpl.n	80021f0 <jogAxisY+0x7c>
		duty = 250;
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <jogAxisY+0x10c>)
 80021ea:	4a26      	ldr	r2, [pc, #152]	; (8002284 <jogAxisY+0x110>)
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	e034      	b.n	800225a <jogAxisY+0xe6>
	} else if (refYPos > 2500 && refYPos <= 3600) {
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <jogAxisY+0xf4>)
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800226c <jogAxisY+0xf8>
 80021fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002202:	dd0d      	ble.n	8002220 <jogAxisY+0xac>
 8002204:	4b18      	ldr	r3, [pc, #96]	; (8002268 <jogAxisY+0xf4>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002278 <jogAxisY+0x104>
 800220e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002216:	d803      	bhi.n	8002220 <jogAxisY+0xac>
		duty = 200;
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <jogAxisY+0x10c>)
 800221a:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <jogAxisY+0x114>)
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	e01c      	b.n	800225a <jogAxisY+0xe6>
	}

	else if (refYPos > 100 && refYPos <= 1500) {
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <jogAxisY+0xf4>)
 8002222:	edd3 7a00 	vldr	s15, [r3]
 8002226:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800227c <jogAxisY+0x108>
 800222a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800222e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002232:	dd0d      	ble.n	8002250 <jogAxisY+0xdc>
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <jogAxisY+0xf4>)
 8002236:	edd3 7a00 	vldr	s15, [r3]
 800223a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002274 <jogAxisY+0x100>
 800223e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002246:	d803      	bhi.n	8002250 <jogAxisY+0xdc>
		duty = 200;
 8002248:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <jogAxisY+0x10c>)
 800224a:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <jogAxisY+0x114>)
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	e004      	b.n	800225a <jogAxisY+0xe6>
	} else {
		duty = 0;
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <jogAxisY+0x10c>)
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
	}
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	20000d44 	.word	0x20000d44
 8002268:	20000224 	.word	0x20000224
 800226c:	451c4000 	.word	0x451c4000
 8002270:	20000229 	.word	0x20000229
 8002274:	44bb8000 	.word	0x44bb8000
 8002278:	45610000 	.word	0x45610000
 800227c:	42c80000 	.word	0x42c80000
 8002280:	20000d70 	.word	0x20000d70
 8002284:	437a0000 	.word	0x437a0000
 8002288:	43480000 	.word	0x43480000

0800228c <photoDetect>:

void photoDetect() {
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	photoSig[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);  // Motor Photo Sensor
 8002290:	2120      	movs	r1, #32
 8002292:	480d      	ldr	r0, [pc, #52]	; (80022c8 <photoDetect+0x3c>)
 8002294:	f002 fc94 	bl	8004bc0 <HAL_GPIO_ReadPin>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <photoDetect+0x40>)
 800229e:	701a      	strb	r2, [r3, #0]
	photoSig[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // CENTER Photo Sensor
 80022a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022a4:	4808      	ldr	r0, [pc, #32]	; (80022c8 <photoDetect+0x3c>)
 80022a6:	f002 fc8b 	bl	8004bc0 <HAL_GPIO_ReadPin>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b07      	ldr	r3, [pc, #28]	; (80022cc <photoDetect+0x40>)
 80022b0:	705a      	strb	r2, [r3, #1]
	photoSig[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);  // Encoder Photo Sensor
 80022b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022b6:	4804      	ldr	r0, [pc, #16]	; (80022c8 <photoDetect+0x3c>)
 80022b8:	f002 fc82 	bl	8004bc0 <HAL_GPIO_ReadPin>
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	4b02      	ldr	r3, [pc, #8]	; (80022cc <photoDetect+0x40>)
 80022c2:	709a      	strb	r2, [r3, #2]
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40020400 	.word	0x40020400
 80022cc:	20000d88 	.word	0x20000d88

080022d0 <trapezoidalTraj>:

calculationTraj trapezoidalTraj(float qi, float qf) {
 80022d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022d4:	b096      	sub	sp, #88	; 0x58
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	ed87 0a02 	vstr	s0, [r7, #8]
 80022de:	edc7 0a01 	vstr	s1, [r7, #4]
	calculationTraj result;

	float diffPos = abs(qf - qi);
 80022e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80022e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80022ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022f2:	ee17 3a90 	vmov	r3, s15
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bfb8      	it	lt
 80022fa:	425b      	neglt	r3, r3
 80022fc:	ee07 3a90 	vmov	s15, r3
 8002300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002304:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	int8_t handleMinus = (qf - qi) / diffPos;
 8002308:	ed97 7a01 	vldr	s14, [r7, #4]
 800230c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002310:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002314:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800231c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002320:	edc7 7a00 	vstr	s15, [r7]
 8002324:	783b      	ldrb	r3, [r7, #0]
 8002326:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	float timeTrapSeg1 = qdm / qddm;
 800232a:	4bb7      	ldr	r3, [pc, #732]	; (8002608 <trapezoidalTraj+0x338>)
 800232c:	edd3 6a00 	vldr	s13, [r3]
 8002330:	4bb6      	ldr	r3, [pc, #728]	; (800260c <trapezoidalTraj+0x33c>)
 8002332:	ed93 7a00 	vldr	s14, [r3]
 8002336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800233a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	timeTriSeg1 = pow((diffPos / qddm), 0.5);
 800233e:	4bb3      	ldr	r3, [pc, #716]	; (800260c <trapezoidalTraj+0x33c>)
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002348:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800234c:	ee16 0a90 	vmov	r0, s13
 8002350:	f7fe f8a6 	bl	80004a0 <__aeabi_f2d>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	ed9f 1ba9 	vldr	d1, [pc, #676]	; 8002600 <trapezoidalTraj+0x330>
 800235c:	ec43 2b10 	vmov	d0, r2, r3
 8002360:	f006 f920 	bl	80085a4 <pow>
 8002364:	ec53 2b10 	vmov	r2, r3, d0
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	f7fe fbc8 	bl	8000b00 <__aeabi_d2f>
 8002370:	4603      	mov	r3, r0
 8002372:	4aa7      	ldr	r2, [pc, #668]	; (8002610 <trapezoidalTraj+0x340>)
 8002374:	6013      	str	r3, [r2, #0]

	if (timeTriSeg1 < timeTrapSeg1) // triangle shape
 8002376:	4ba6      	ldr	r3, [pc, #664]	; (8002610 <trapezoidalTraj+0x340>)
 8002378:	edd3 7a00 	vldr	s15, [r3]
 800237c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002388:	f340 8148 	ble.w	800261c <trapezoidalTraj+0x34c>
			{
		float qTriSeg1 = 0.5 * qddm * timeTriSeg1 * timeTriSeg1;
 800238c:	4b9f      	ldr	r3, [pc, #636]	; (800260c <trapezoidalTraj+0x33c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f885 	bl	80004a0 <__aeabi_f2d>
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	4b9e      	ldr	r3, [pc, #632]	; (8002614 <trapezoidalTraj+0x344>)
 800239c:	f7fe f8d8 	bl	8000550 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4614      	mov	r4, r2
 80023a6:	461d      	mov	r5, r3
 80023a8:	4b99      	ldr	r3, [pc, #612]	; (8002610 <trapezoidalTraj+0x340>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f877 	bl	80004a0 <__aeabi_f2d>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4620      	mov	r0, r4
 80023b8:	4629      	mov	r1, r5
 80023ba:	f7fe f8c9 	bl	8000550 <__aeabi_dmul>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4614      	mov	r4, r2
 80023c4:	461d      	mov	r5, r3
 80023c6:	4b92      	ldr	r3, [pc, #584]	; (8002610 <trapezoidalTraj+0x340>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe f868 	bl	80004a0 <__aeabi_f2d>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4620      	mov	r0, r4
 80023d6:	4629      	mov	r1, r5
 80023d8:	f7fe f8ba 	bl	8000550 <__aeabi_dmul>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	f7fe fb8c 	bl	8000b00 <__aeabi_d2f>
 80023e8:	4603      	mov	r3, r0
 80023ea:	633b      	str	r3, [r7, #48]	; 0x30
		float qdTriSeg1 = qddm * timeTriSeg1;
 80023ec:	4b87      	ldr	r3, [pc, #540]	; (800260c <trapezoidalTraj+0x33c>)
 80023ee:	ed93 7a00 	vldr	s14, [r3]
 80023f2:	4b87      	ldr	r3, [pc, #540]	; (8002610 <trapezoidalTraj+0x340>)
 80023f4:	edd3 7a00 	vldr	s15, [r3]
 80023f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		if (actualTime <= timeTriSeg1) {
 8002400:	4b85      	ldr	r3, [pc, #532]	; (8002618 <trapezoidalTraj+0x348>)
 8002402:	ed93 7a00 	vldr	s14, [r3]
 8002406:	4b82      	ldr	r3, [pc, #520]	; (8002610 <trapezoidalTraj+0x340>)
 8002408:	edd3 7a00 	vldr	s15, [r3]
 800240c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002414:	d857      	bhi.n	80024c6 <trapezoidalTraj+0x1f6>
			result.posTraj = qi
					+ (0.5 * qddm * actualTime * actualTime) * handleMinus;
 8002416:	68b8      	ldr	r0, [r7, #8]
 8002418:	f7fe f842 	bl	80004a0 <__aeabi_f2d>
 800241c:	4604      	mov	r4, r0
 800241e:	460d      	mov	r5, r1
 8002420:	4b7a      	ldr	r3, [pc, #488]	; (800260c <trapezoidalTraj+0x33c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe f83b 	bl	80004a0 <__aeabi_f2d>
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	4b79      	ldr	r3, [pc, #484]	; (8002614 <trapezoidalTraj+0x344>)
 8002430:	f7fe f88e 	bl	8000550 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4690      	mov	r8, r2
 800243a:	4699      	mov	r9, r3
 800243c:	4b76      	ldr	r3, [pc, #472]	; (8002618 <trapezoidalTraj+0x348>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe f82d 	bl	80004a0 <__aeabi_f2d>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4640      	mov	r0, r8
 800244c:	4649      	mov	r1, r9
 800244e:	f7fe f87f 	bl	8000550 <__aeabi_dmul>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4690      	mov	r8, r2
 8002458:	4699      	mov	r9, r3
 800245a:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <trapezoidalTraj+0x348>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe f81e 	bl	80004a0 <__aeabi_f2d>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4640      	mov	r0, r8
 800246a:	4649      	mov	r1, r9
 800246c:	f7fe f870 	bl	8000550 <__aeabi_dmul>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4690      	mov	r8, r2
 8002476:	4699      	mov	r9, r3
 8002478:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800247c:	4618      	mov	r0, r3
 800247e:	f7fd fffd 	bl	800047c <__aeabi_i2d>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4640      	mov	r0, r8
 8002488:	4649      	mov	r1, r9
 800248a:	f7fe f861 	bl	8000550 <__aeabi_dmul>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4620      	mov	r0, r4
 8002494:	4629      	mov	r1, r5
 8002496:	f7fd fea5 	bl	80001e4 <__adddf3>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	f7fe fb2d 	bl	8000b00 <__aeabi_d2f>
 80024a6:	4603      	mov	r3, r0
			result.posTraj = qi
 80024a8:	613b      	str	r3, [r7, #16]
			result.velTraj = qddm * actualTime;
 80024aa:	4b58      	ldr	r3, [pc, #352]	; (800260c <trapezoidalTraj+0x33c>)
 80024ac:	ed93 7a00 	vldr	s14, [r3]
 80024b0:	4b59      	ldr	r3, [pc, #356]	; (8002618 <trapezoidalTraj+0x348>)
 80024b2:	edd3 7a00 	vldr	s15, [r3]
 80024b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ba:	edc7 7a05 	vstr	s15, [r7, #20]
			result.accTraj = qddm;
 80024be:	4b53      	ldr	r3, [pc, #332]	; (800260c <trapezoidalTraj+0x33c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	e284      	b.n	80029d0 <trapezoidalTraj+0x700>
		}

		else if (actualTime > timeTriSeg1 && actualTime <= (timeTriSeg1 * 2)) {
 80024c6:	4b54      	ldr	r3, [pc, #336]	; (8002618 <trapezoidalTraj+0x348>)
 80024c8:	ed93 7a00 	vldr	s14, [r3]
 80024cc:	4b50      	ldr	r3, [pc, #320]	; (8002610 <trapezoidalTraj+0x340>)
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024da:	f340 8088 	ble.w	80025ee <trapezoidalTraj+0x31e>
 80024de:	4b4c      	ldr	r3, [pc, #304]	; (8002610 <trapezoidalTraj+0x340>)
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80024e8:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <trapezoidalTraj+0x348>)
 80024ea:	edd3 7a00 	vldr	s15, [r3]
 80024ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	db7a      	blt.n	80025ee <trapezoidalTraj+0x31e>
			float actualTimeSeg2 = actualTime - timeTriSeg1;
 80024f8:	4b47      	ldr	r3, [pc, #284]	; (8002618 <trapezoidalTraj+0x348>)
 80024fa:	ed93 7a00 	vldr	s14, [r3]
 80024fe:	4b44      	ldr	r3, [pc, #272]	; (8002610 <trapezoidalTraj+0x340>)
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002508:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			result.posTraj = qi
					+ (qTriSeg1 + (qdTriSeg1 * actualTimeSeg2)
 800250c:	68b8      	ldr	r0, [r7, #8]
 800250e:	f7fd ffc7 	bl	80004a0 <__aeabi_f2d>
 8002512:	4604      	mov	r4, r0
 8002514:	460d      	mov	r5, r1
 8002516:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800251a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800251e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002522:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800252a:	ee17 0a90 	vmov	r0, s15
 800252e:	f7fd ffb7 	bl	80004a0 <__aeabi_f2d>
 8002532:	4680      	mov	r8, r0
 8002534:	4689      	mov	r9, r1
							- (0.5 * qddm * actualTimeSeg2 * actualTimeSeg2))
 8002536:	4b35      	ldr	r3, [pc, #212]	; (800260c <trapezoidalTraj+0x33c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd ffb0 	bl	80004a0 <__aeabi_f2d>
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	4b33      	ldr	r3, [pc, #204]	; (8002614 <trapezoidalTraj+0x344>)
 8002546:	f7fe f803 	bl	8000550 <__aeabi_dmul>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4692      	mov	sl, r2
 8002550:	469b      	mov	fp, r3
 8002552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002554:	f7fd ffa4 	bl	80004a0 <__aeabi_f2d>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4650      	mov	r0, sl
 800255e:	4659      	mov	r1, fp
 8002560:	f7fd fff6 	bl	8000550 <__aeabi_dmul>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4692      	mov	sl, r2
 800256a:	469b      	mov	fp, r3
 800256c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800256e:	f7fd ff97 	bl	80004a0 <__aeabi_f2d>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4650      	mov	r0, sl
 8002578:	4659      	mov	r1, fp
 800257a:	f7fd ffe9 	bl	8000550 <__aeabi_dmul>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4640      	mov	r0, r8
 8002584:	4649      	mov	r1, r9
 8002586:	f7fd fe2b 	bl	80001e0 <__aeabi_dsub>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
							* handleMinus;
 8002592:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002596:	4618      	mov	r0, r3
 8002598:	f7fd ff70 	bl	800047c <__aeabi_i2d>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4640      	mov	r0, r8
 80025a2:	4649      	mov	r1, r9
 80025a4:	f7fd ffd4 	bl	8000550 <__aeabi_dmul>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
					+ (qTriSeg1 + (qdTriSeg1 * actualTimeSeg2)
 80025ac:	4620      	mov	r0, r4
 80025ae:	4629      	mov	r1, r5
 80025b0:	f7fd fe18 	bl	80001e4 <__adddf3>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f7fe faa0 	bl	8000b00 <__aeabi_d2f>
 80025c0:	4603      	mov	r3, r0
			result.posTraj = qi
 80025c2:	613b      	str	r3, [r7, #16]
			result.velTraj = qdTriSeg1 - (qddm * actualTimeSeg2);
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <trapezoidalTraj+0x33c>)
 80025c6:	ed93 7a00 	vldr	s14, [r3]
 80025ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80025d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025da:	edc7 7a05 	vstr	s15, [r7, #20]
			result.accTraj = -qddm;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <trapezoidalTraj+0x33c>)
 80025e0:	edd3 7a00 	vldr	s15, [r3]
 80025e4:	eef1 7a67 	vneg.f32	s15, s15
 80025e8:	edc7 7a06 	vstr	s15, [r7, #24]
		else if (actualTime > timeTriSeg1 && actualTime <= (timeTriSeg1 * 2)) {
 80025ec:	e1f0      	b.n	80029d0 <trapezoidalTraj+0x700>
		}

		else {
			result.posTraj = qf;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	613b      	str	r3, [r7, #16]
			result.velTraj = 0;
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
			result.accTraj = 0;
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	e1e7      	b.n	80029d0 <trapezoidalTraj+0x700>
 8002600:	00000000 	.word	0x00000000
 8002604:	3fe00000 	.word	0x3fe00000
 8002608:	20000240 	.word	0x20000240
 800260c:	2000023c 	.word	0x2000023c
 8002610:	20000df0 	.word	0x20000df0
 8002614:	3fe00000 	.word	0x3fe00000
 8002618:	20000dec 	.word	0x20000dec
	}

	else // trapezoidal shape
	{
		float timeTrapSeg2 = (diffPos
				- (2 * 0.5 * qddm * (timeTrapSeg1) * (timeTrapSeg1))) / qdm;
 800261c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800261e:	f7fd ff3f 	bl	80004a0 <__aeabi_f2d>
 8002622:	4604      	mov	r4, r0
 8002624:	460d      	mov	r5, r1
 8002626:	4b90      	ldr	r3, [pc, #576]	; (8002868 <trapezoidalTraj+0x598>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd ff38 	bl	80004a0 <__aeabi_f2d>
 8002630:	4680      	mov	r8, r0
 8002632:	4689      	mov	r9, r1
 8002634:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002636:	f7fd ff33 	bl	80004a0 <__aeabi_f2d>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4640      	mov	r0, r8
 8002640:	4649      	mov	r1, r9
 8002642:	f7fd ff85 	bl	8000550 <__aeabi_dmul>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	4690      	mov	r8, r2
 800264c:	4699      	mov	r9, r3
 800264e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002650:	f7fd ff26 	bl	80004a0 <__aeabi_f2d>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4640      	mov	r0, r8
 800265a:	4649      	mov	r1, r9
 800265c:	f7fd ff78 	bl	8000550 <__aeabi_dmul>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4620      	mov	r0, r4
 8002666:	4629      	mov	r1, r5
 8002668:	f7fd fdba 	bl	80001e0 <__aeabi_dsub>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4614      	mov	r4, r2
 8002672:	461d      	mov	r5, r3
 8002674:	4b7d      	ldr	r3, [pc, #500]	; (800286c <trapezoidalTraj+0x59c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd ff11 	bl	80004a0 <__aeabi_f2d>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4620      	mov	r0, r4
 8002684:	4629      	mov	r1, r5
 8002686:	f7fe f88d 	bl	80007a4 <__aeabi_ddiv>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
		float timeTrapSeg2 = (diffPos
 800268e:	4610      	mov	r0, r2
 8002690:	4619      	mov	r1, r3
 8002692:	f7fe fa35 	bl	8000b00 <__aeabi_d2f>
 8002696:	4603      	mov	r3, r0
 8002698:	64bb      	str	r3, [r7, #72]	; 0x48
		float timeTrapSeg3 = qdm / qddm;
 800269a:	4b74      	ldr	r3, [pc, #464]	; (800286c <trapezoidalTraj+0x59c>)
 800269c:	edd3 6a00 	vldr	s13, [r3]
 80026a0:	4b71      	ldr	r3, [pc, #452]	; (8002868 <trapezoidalTraj+0x598>)
 80026a2:	ed93 7a00 	vldr	s14, [r3]
 80026a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026aa:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		float qTrapSeg1 = 0.5 * qddm * (timeTrapSeg1) * (timeTrapSeg1);
 80026ae:	4b6e      	ldr	r3, [pc, #440]	; (8002868 <trapezoidalTraj+0x598>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fd fef4 	bl	80004a0 <__aeabi_f2d>
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	4b6c      	ldr	r3, [pc, #432]	; (8002870 <trapezoidalTraj+0x5a0>)
 80026be:	f7fd ff47 	bl	8000550 <__aeabi_dmul>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4614      	mov	r4, r2
 80026c8:	461d      	mov	r5, r3
 80026ca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80026cc:	f7fd fee8 	bl	80004a0 <__aeabi_f2d>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4620      	mov	r0, r4
 80026d6:	4629      	mov	r1, r5
 80026d8:	f7fd ff3a 	bl	8000550 <__aeabi_dmul>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4614      	mov	r4, r2
 80026e2:	461d      	mov	r5, r3
 80026e4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80026e6:	f7fd fedb 	bl	80004a0 <__aeabi_f2d>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4620      	mov	r0, r4
 80026f0:	4629      	mov	r1, r5
 80026f2:	f7fd ff2d 	bl	8000550 <__aeabi_dmul>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	f7fe f9ff 	bl	8000b00 <__aeabi_d2f>
 8002702:	4603      	mov	r3, r0
 8002704:	643b      	str	r3, [r7, #64]	; 0x40
		float qTrapSeg2 = qTrapSeg1 + (qdm * timeTrapSeg2);
 8002706:	4b59      	ldr	r3, [pc, #356]	; (800286c <trapezoidalTraj+0x59c>)
 8002708:	ed93 7a00 	vldr	s14, [r3]
 800270c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002714:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800271c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		if (actualTime <= timeTrapSeg1) {
 8002720:	4b54      	ldr	r3, [pc, #336]	; (8002874 <trapezoidalTraj+0x5a4>)
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800272a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800272e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002732:	db57      	blt.n	80027e4 <trapezoidalTraj+0x514>
			result.posTraj = qi
					+ (0.5 * qddm * actualTime * actualTime) * handleMinus;
 8002734:	68b8      	ldr	r0, [r7, #8]
 8002736:	f7fd feb3 	bl	80004a0 <__aeabi_f2d>
 800273a:	4604      	mov	r4, r0
 800273c:	460d      	mov	r5, r1
 800273e:	4b4a      	ldr	r3, [pc, #296]	; (8002868 <trapezoidalTraj+0x598>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fd feac 	bl	80004a0 <__aeabi_f2d>
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	4b48      	ldr	r3, [pc, #288]	; (8002870 <trapezoidalTraj+0x5a0>)
 800274e:	f7fd feff 	bl	8000550 <__aeabi_dmul>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4690      	mov	r8, r2
 8002758:	4699      	mov	r9, r3
 800275a:	4b46      	ldr	r3, [pc, #280]	; (8002874 <trapezoidalTraj+0x5a4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd fe9e 	bl	80004a0 <__aeabi_f2d>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4640      	mov	r0, r8
 800276a:	4649      	mov	r1, r9
 800276c:	f7fd fef0 	bl	8000550 <__aeabi_dmul>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4690      	mov	r8, r2
 8002776:	4699      	mov	r9, r3
 8002778:	4b3e      	ldr	r3, [pc, #248]	; (8002874 <trapezoidalTraj+0x5a4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fd fe8f 	bl	80004a0 <__aeabi_f2d>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4640      	mov	r0, r8
 8002788:	4649      	mov	r1, r9
 800278a:	f7fd fee1 	bl	8000550 <__aeabi_dmul>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4690      	mov	r8, r2
 8002794:	4699      	mov	r9, r3
 8002796:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fe6e 	bl	800047c <__aeabi_i2d>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4640      	mov	r0, r8
 80027a6:	4649      	mov	r1, r9
 80027a8:	f7fd fed2 	bl	8000550 <__aeabi_dmul>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4620      	mov	r0, r4
 80027b2:	4629      	mov	r1, r5
 80027b4:	f7fd fd16 	bl	80001e4 <__adddf3>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	f7fe f99e 	bl	8000b00 <__aeabi_d2f>
 80027c4:	4603      	mov	r3, r0
			result.posTraj = qi
 80027c6:	613b      	str	r3, [r7, #16]
			result.velTraj = qddm * actualTime;
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <trapezoidalTraj+0x598>)
 80027ca:	ed93 7a00 	vldr	s14, [r3]
 80027ce:	4b29      	ldr	r3, [pc, #164]	; (8002874 <trapezoidalTraj+0x5a4>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d8:	edc7 7a05 	vstr	s15, [r7, #20]
			result.accTraj = qddm;
 80027dc:	4b22      	ldr	r3, [pc, #136]	; (8002868 <trapezoidalTraj+0x598>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	e0f5      	b.n	80029d0 <trapezoidalTraj+0x700>
		} else if (actualTime > timeTrapSeg1
 80027e4:	4b23      	ldr	r3, [pc, #140]	; (8002874 <trapezoidalTraj+0x5a4>)
 80027e6:	edd3 7a00 	vldr	s15, [r3]
 80027ea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80027ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f6:	d53f      	bpl.n	8002878 <trapezoidalTraj+0x5a8>
				&& actualTime <= timeTrapSeg2 + timeTrapSeg1) {
 80027f8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80027fc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <trapezoidalTraj+0x5a4>)
 8002806:	edd3 7a00 	vldr	s15, [r3]
 800280a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800280e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002812:	db31      	blt.n	8002878 <trapezoidalTraj+0x5a8>
			float t2 = actualTime - timeTrapSeg1;
 8002814:	4b17      	ldr	r3, [pc, #92]	; (8002874 <trapezoidalTraj+0x5a4>)
 8002816:	ed93 7a00 	vldr	s14, [r3]
 800281a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800281e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002822:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			result.posTraj = qi + (qTrapSeg1 + qdm * (t2)) * handleMinus;
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <trapezoidalTraj+0x59c>)
 8002828:	ed93 7a00 	vldr	s14, [r3]
 800282c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002830:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002834:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002838:	ee37 7a27 	vadd.f32	s14, s14, s15
 800283c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002848:	ee27 7a27 	vmul.f32	s14, s14, s15
 800284c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002854:	edc7 7a04 	vstr	s15, [r7, #16]
			result.velTraj = qdm;
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <trapezoidalTraj+0x59c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	617b      	str	r3, [r7, #20]
			result.accTraj = 0;
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	61bb      	str	r3, [r7, #24]
				&& actualTime <= timeTrapSeg2 + timeTrapSeg1) {
 8002864:	e0b4      	b.n	80029d0 <trapezoidalTraj+0x700>
 8002866:	bf00      	nop
 8002868:	2000023c 	.word	0x2000023c
 800286c:	20000240 	.word	0x20000240
 8002870:	3fe00000 	.word	0x3fe00000
 8002874:	20000dec 	.word	0x20000dec
		} else if (actualTime > timeTrapSeg2 + timeTrapSeg1
 8002878:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800287c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002880:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002884:	4b90      	ldr	r3, [pc, #576]	; (8002ac8 <trapezoidalTraj+0x7f8>)
 8002886:	edd3 7a00 	vldr	s15, [r3]
 800288a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002892:	f140 8095 	bpl.w	80029c0 <trapezoidalTraj+0x6f0>
				&& actualTime <= timeTrapSeg3 + timeTrapSeg2 + timeTrapSeg1) {
 8002896:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800289a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800289e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80028a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028aa:	4b87      	ldr	r3, [pc, #540]	; (8002ac8 <trapezoidalTraj+0x7f8>)
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b8:	f2c0 8082 	blt.w	80029c0 <trapezoidalTraj+0x6f0>
			float t3 = actualTime - timeTrapSeg2 - timeTrapSeg1;
 80028bc:	4b82      	ldr	r3, [pc, #520]	; (8002ac8 <trapezoidalTraj+0x7f8>)
 80028be:	ed93 7a00 	vldr	s14, [r3]
 80028c2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80028c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028ca:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80028ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			result.posTraj = qi
					+ (qTrapSeg2 + (qdm * t3) - 0.5 * qddm * t3 * t3)
 80028d6:	68b8      	ldr	r0, [r7, #8]
 80028d8:	f7fd fde2 	bl	80004a0 <__aeabi_f2d>
 80028dc:	4604      	mov	r4, r0
 80028de:	460d      	mov	r5, r1
 80028e0:	4b7a      	ldr	r3, [pc, #488]	; (8002acc <trapezoidalTraj+0x7fc>)
 80028e2:	ed93 7a00 	vldr	s14, [r3]
 80028e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ee:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80028f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f6:	ee17 0a90 	vmov	r0, s15
 80028fa:	f7fd fdd1 	bl	80004a0 <__aeabi_f2d>
 80028fe:	4680      	mov	r8, r0
 8002900:	4689      	mov	r9, r1
 8002902:	4b73      	ldr	r3, [pc, #460]	; (8002ad0 <trapezoidalTraj+0x800>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd fdca 	bl	80004a0 <__aeabi_f2d>
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	4b70      	ldr	r3, [pc, #448]	; (8002ad4 <trapezoidalTraj+0x804>)
 8002912:	f7fd fe1d 	bl	8000550 <__aeabi_dmul>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4692      	mov	sl, r2
 800291c:	469b      	mov	fp, r3
 800291e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002920:	f7fd fdbe 	bl	80004a0 <__aeabi_f2d>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4650      	mov	r0, sl
 800292a:	4659      	mov	r1, fp
 800292c:	f7fd fe10 	bl	8000550 <__aeabi_dmul>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4692      	mov	sl, r2
 8002936:	469b      	mov	fp, r3
 8002938:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800293a:	f7fd fdb1 	bl	80004a0 <__aeabi_f2d>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4650      	mov	r0, sl
 8002944:	4659      	mov	r1, fp
 8002946:	f7fd fe03 	bl	8000550 <__aeabi_dmul>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4640      	mov	r0, r8
 8002950:	4649      	mov	r1, r9
 8002952:	f7fd fc45 	bl	80001e0 <__aeabi_dsub>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4690      	mov	r8, r2
 800295c:	4699      	mov	r9, r3
							* handleMinus;
 800295e:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd fd8a 	bl	800047c <__aeabi_i2d>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4640      	mov	r0, r8
 800296e:	4649      	mov	r1, r9
 8002970:	f7fd fdee 	bl	8000550 <__aeabi_dmul>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
					+ (qTrapSeg2 + (qdm * t3) - 0.5 * qddm * t3 * t3)
 8002978:	4620      	mov	r0, r4
 800297a:	4629      	mov	r1, r5
 800297c:	f7fd fc32 	bl	80001e4 <__adddf3>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	f7fe f8ba 	bl	8000b00 <__aeabi_d2f>
 800298c:	4603      	mov	r3, r0
			result.posTraj = qi
 800298e:	613b      	str	r3, [r7, #16]
			result.velTraj = -qddm * t3 + qdm;
 8002990:	4b4f      	ldr	r3, [pc, #316]	; (8002ad0 <trapezoidalTraj+0x800>)
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	eeb1 7a67 	vneg.f32	s14, s15
 800299a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800299e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a2:	4b4a      	ldr	r3, [pc, #296]	; (8002acc <trapezoidalTraj+0x7fc>)
 80029a4:	edd3 7a00 	vldr	s15, [r3]
 80029a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ac:	edc7 7a05 	vstr	s15, [r7, #20]
			result.accTraj = -qddm;
 80029b0:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <trapezoidalTraj+0x800>)
 80029b2:	edd3 7a00 	vldr	s15, [r3]
 80029b6:	eef1 7a67 	vneg.f32	s15, s15
 80029ba:	edc7 7a06 	vstr	s15, [r7, #24]
				&& actualTime <= timeTrapSeg3 + timeTrapSeg2 + timeTrapSeg1) {
 80029be:	e007      	b.n	80029d0 <trapezoidalTraj+0x700>
		} else {
			result.posTraj = qf;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	613b      	str	r3, [r7, #16]
			result.velTraj = 0;
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
			result.accTraj = 0;
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]

		}

	}

	checkPos = result.posTraj;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4a41      	ldr	r2, [pc, #260]	; (8002ad8 <trapezoidalTraj+0x808>)
 80029d4:	6013      	str	r3, [r2, #0]
	checkVel = result.velTraj;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	4a40      	ldr	r2, [pc, #256]	; (8002adc <trapezoidalTraj+0x80c>)
 80029da:	6013      	str	r3, [r2, #0]
	checkAcc = result.accTraj;
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	4a40      	ldr	r2, [pc, #256]	; (8002ae0 <trapezoidalTraj+0x810>)
 80029e0:	6013      	str	r3, [r2, #0]

	int16_t sentPos = mmActPos * 10;
 80029e2:	4b40      	ldr	r3, [pc, #256]	; (8002ae4 <trapezoidalTraj+0x814>)
 80029e4:	edd3 7a00 	vldr	s15, [r3]
 80029e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029f4:	ee17 3a90 	vmov	r3, s15
 80029f8:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t sentVel = mmActVel * 10;
 80029fa:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <trapezoidalTraj+0x818>)
 80029fc:	edd3 7a00 	vldr	s15, [r3]
 8002a00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a0c:	ee17 3a90 	vmov	r3, s15
 8002a10:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t sentAcc = mmActAcc * 10;
 8002a12:	4b36      	ldr	r3, [pc, #216]	; (8002aec <trapezoidalTraj+0x81c>)
 8002a14:	edd3 7a00 	vldr	s15, [r3]
 8002a18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a24:	ee17 3a90 	vmov	r3, s15
 8002a28:	847b      	strh	r3, [r7, #34]	; 0x22
	registerFrame[17].U16 = sentPos;
 8002a2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002a2c:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <trapezoidalTraj+0x820>)
 8002a2e:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = sentVel;
 8002a30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a32:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <trapezoidalTraj+0x820>)
 8002a34:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = sentAcc;
 8002a36:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002a38:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <trapezoidalTraj+0x820>)
 8002a3a:	84da      	strh	r2, [r3, #38]	; 0x26

	actualTime += 0.001;
 8002a3c:	4b22      	ldr	r3, [pc, #136]	; (8002ac8 <trapezoidalTraj+0x7f8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd fd2d 	bl	80004a0 <__aeabi_f2d>
 8002a46:	a31e      	add	r3, pc, #120	; (adr r3, 8002ac0 <trapezoidalTraj+0x7f0>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f7fd fbca 	bl	80001e4 <__adddf3>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	f7fe f852 	bl	8000b00 <__aeabi_d2f>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4a1a      	ldr	r2, [pc, #104]	; (8002ac8 <trapezoidalTraj+0x7f8>)
 8002a60:	6013      	str	r3, [r2, #0]
	if (result.posTraj == qf) {
 8002a62:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a66:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a6a:	eeb4 7a67 	vcmp.f32	s14, s15
 8002a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a72:	d115      	bne.n	8002aa0 <trapezoidalTraj+0x7d0>
		result.reachTraj = 1;
 8002a74:	2301      	movs	r3, #1
 8002a76:	773b      	strb	r3, [r7, #28]
		actualTime = 0;
 8002a78:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <trapezoidalTraj+0x7f8>)
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
		startPointModeY = 0;
 8002a80:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <trapezoidalTraj+0x824>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
		initPosY = mmActPos;
 8002a86:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <trapezoidalTraj+0x814>)
 8002a88:	edd3 7a00 	vldr	s15, [r3]
 8002a8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a90:	ee17 2a90 	vmov	r2, s15
 8002a94:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <trapezoidalTraj+0x828>)
 8002a96:	601a      	str	r2, [r3, #0]
		registerFrame[16].U16 = 0;
 8002a98:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <trapezoidalTraj+0x820>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	841a      	strh	r2, [r3, #32]
 8002a9e:	e001      	b.n	8002aa4 <trapezoidalTraj+0x7d4>
	} else {
		result.reachTraj = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	773b      	strb	r3, [r7, #28]
	}

	return result;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	461c      	mov	r4, r3
 8002aa8:	f107 0310 	add.w	r3, r7, #16
 8002aac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	3758      	adds	r7, #88	; 0x58
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002abc:	f3af 8000 	nop.w
 8002ac0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ac4:	3f50624d 	.word	0x3f50624d
 8002ac8:	20000dec 	.word	0x20000dec
 8002acc:	20000240 	.word	0x20000240
 8002ad0:	2000023c 	.word	0x2000023c
 8002ad4:	3fe00000 	.word	0x3fe00000
 8002ad8:	20000df4 	.word	0x20000df4
 8002adc:	20000df8 	.word	0x20000df8
 8002ae0:	20000dfc 	.word	0x20000dfc
 8002ae4:	20000d80 	.word	0x20000d80
 8002ae8:	20000e00 	.word	0x20000e00
 8002aec:	20000e04 	.word	0x20000e04
 8002af0:	20000cb0 	.word	0x20000cb0
 8002af4:	20000e12 	.word	0x20000e12
 8002af8:	20000e14 	.word	0x20000e14

08002afc <buttonInput>:
			+ centerY;

	return rotatedPoint;
}

void buttonInput() {
 8002afc:	b598      	push	{r3, r4, r7, lr}
 8002afe:	af00      	add	r7, sp, #0
	register int i;
	for (i = 0; i < 4; i++) {
 8002b00:	2400      	movs	r4, #0
 8002b02:	e046      	b.n	8002b92 <buttonInput+0x96>
		Button1[i].Current = HAL_GPIO_ReadPin(joyPin[i].PORT, joyPin[i].PIN);
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <buttonInput+0xa0>)
 8002b06:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 8002b0a:	4924      	ldr	r1, [pc, #144]	; (8002b9c <buttonInput+0xa0>)
 8002b0c:	00e3      	lsls	r3, r4, #3
 8002b0e:	440b      	add	r3, r1
 8002b10:	889b      	ldrh	r3, [r3, #4]
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f002 f853 	bl	8004bc0 <HAL_GPIO_ReadPin>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <buttonInput+0xa4>)
 8002b20:	f803 2014 	strb.w	r2, [r3, r4, lsl #1]
		if (Button1[i].Last == 0 && Button1[i].Current == 1) {
 8002b24:	4a1e      	ldr	r2, [pc, #120]	; (8002ba0 <buttonInput+0xa4>)
 8002b26:	0063      	lsls	r3, r4, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	785b      	ldrb	r3, [r3, #1]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d127      	bne.n	8002b80 <buttonInput+0x84>
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <buttonInput+0xa4>)
 8002b32:	f813 3014 	ldrb.w	r3, [r3, r4, lsl #1]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d122      	bne.n	8002b80 <buttonInput+0x84>
			if (i == 0) {
 8002b3a:	2c00      	cmp	r4, #0
 8002b3c:	d105      	bne.n	8002b4a <buttonInput+0x4e>
				countTopB += 1;
 8002b3e:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <buttonInput+0xa8>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	3301      	adds	r3, #1
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <buttonInput+0xa8>)
 8002b48:	701a      	strb	r2, [r3, #0]
			}
			if (i == 1) {
				// countRightB += 1;
			}
			if (i == 2) {
 8002b4a:	2c02      	cmp	r4, #2
 8002b4c:	d105      	bne.n	8002b5a <buttonInput+0x5e>
				countBottomB += 1;
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <buttonInput+0xac>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <buttonInput+0xac>)
 8002b58:	701a      	strb	r2, [r3, #0]
			}
			if (i == 3) {
 8002b5a:	2c03      	cmp	r4, #3
 8002b5c:	d105      	bne.n	8002b6a <buttonInput+0x6e>
				countLeftB += 1;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <buttonInput+0xb0>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <buttonInput+0xb0>)
 8002b68:	701a      	strb	r2, [r3, #0]

			}
			Button1[i].Last = Button1[i].Current;
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <buttonInput+0xa4>)
 8002b6c:	f813 1014 	ldrb.w	r1, [r3, r4, lsl #1]
 8002b70:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <buttonInput+0xa4>)
 8002b72:	0063      	lsls	r3, r4, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	460a      	mov	r2, r1
 8002b78:	705a      	strb	r2, [r3, #1]
			joyLogic = i;
 8002b7a:	b2e2      	uxtb	r2, r4
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <buttonInput+0xb4>)
 8002b7e:	701a      	strb	r2, [r3, #0]
		}
		Button1[i].Last = Button1[i].Current;
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <buttonInput+0xa4>)
 8002b82:	f813 1014 	ldrb.w	r1, [r3, r4, lsl #1]
 8002b86:	4a06      	ldr	r2, [pc, #24]	; (8002ba0 <buttonInput+0xa4>)
 8002b88:	0063      	lsls	r3, r4, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	460a      	mov	r2, r1
 8002b8e:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 4; i++) {
 8002b90:	3401      	adds	r4, #1
 8002b92:	2c03      	cmp	r4, #3
 8002b94:	ddb6      	ble.n	8002b04 <buttonInput+0x8>
	}
}
 8002b96:	bf00      	nop
 8002b98:	bf00      	nop
 8002b9a:	bd98      	pop	{r3, r4, r7, pc}
 8002b9c:	20000200 	.word	0x20000200
 8002ba0:	20000d3c 	.word	0x20000d3c
 8002ba4:	20000d6d 	.word	0x20000d6d
 8002ba8:	20000d6c 	.word	0x20000d6c
 8002bac:	20000d6f 	.word	0x20000d6f
 8002bb0:	20000e11 	.word	0x20000e11

08002bb4 <buttonLogic>:

void buttonLogic(uint16_t state) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	80fb      	strh	r3, [r7, #6]
	if (countTopB % 2 == 0) {
 8002bbe:	4b7c      	ldr	r3, [pc, #496]	; (8002db0 <buttonLogic+0x1fc>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d13a      	bne.n	8002c42 <buttonLogic+0x8e>
		switch (state) {
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d838      	bhi.n	8002c44 <buttonLogic+0x90>
 8002bd2:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <buttonLogic+0x24>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002be9 	.word	0x08002be9
 8002bdc:	08002c15 	.word	0x08002c15
 8002be0:	08002c1d 	.word	0x08002c1d
 8002be4:	08002c3b 	.word	0x08002c3b
		case 0:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8002be8:	2201      	movs	r2, #1
 8002bea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bee:	4871      	ldr	r0, [pc, #452]	; (8002db4 <buttonLogic+0x200>)
 8002bf0:	f001 fffe 	bl	8004bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bfa:	486e      	ldr	r0, [pc, #440]	; (8002db4 <buttonLogic+0x200>)
 8002bfc:	f001 fff8 	bl	8004bf0 <HAL_GPIO_WritePin>
			// ENTER JOG MODE
			if (switchAxis) {
 8002c00:	4b6d      	ldr	r3, [pc, #436]	; (8002db8 <buttonLogic+0x204>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <buttonLogic+0x5a>
				jogAxisY();
 8002c08:	f7ff fab4 	bl	8002174 <jogAxisY>
			} else {
				jogAxisX();
			}
			break;
 8002c0c:	e01a      	b.n	8002c44 <buttonLogic+0x90>
				jogAxisX();
 8002c0e:	f000 f9a1 	bl	8002f54 <jogAxisX>
			break;
 8002c12:	e017      	b.n	8002c44 <buttonLogic+0x90>
		case 1:
			// Right

			joyLogic = 0;
 8002c14:	4b69      	ldr	r3, [pc, #420]	; (8002dbc <buttonLogic+0x208>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
			break;
 8002c1a:	e013      	b.n	8002c44 <buttonLogic+0x90>
		case 2:
			// Change Axis of Movement
			if (switchAxis) {
 8002c1c:	4b66      	ldr	r3, [pc, #408]	; (8002db8 <buttonLogic+0x204>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <buttonLogic+0x78>
				switchAxis = 0;
 8002c24:	4b64      	ldr	r3, [pc, #400]	; (8002db8 <buttonLogic+0x204>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e002      	b.n	8002c32 <buttonLogic+0x7e>
			} else {
				switchAxis = 1;
 8002c2c:	4b62      	ldr	r3, [pc, #392]	; (8002db8 <buttonLogic+0x204>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
			}
			joyLogic = 0;
 8002c32:	4b62      	ldr	r3, [pc, #392]	; (8002dbc <buttonLogic+0x208>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
			break;
 8002c38:	e004      	b.n	8002c44 <buttonLogic+0x90>
		case 3:
			// Left

			joyLogic = 0;
 8002c3a:	4b60      	ldr	r3, [pc, #384]	; (8002dbc <buttonLogic+0x208>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]

			break;
 8002c40:	e000      	b.n	8002c44 <buttonLogic+0x90>
		}
	}
 8002c42:	bf00      	nop
	if (countTopB % 2 == 1) {
 8002c44:	4b5a      	ldr	r3, [pc, #360]	; (8002db0 <buttonLogic+0x1fc>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80a9 	beq.w	8002da6 <buttonLogic+0x1f2>

		switch (state) {
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	f200 80a6 	bhi.w	8002da8 <buttonLogic+0x1f4>
 8002c5c:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <buttonLogic+0xb0>)
 8002c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c62:	bf00      	nop
 8002c64:	08002c75 	.word	0x08002c75
 8002c68:	08002c8f 	.word	0x08002c8f
 8002c6c:	08002d85 	.word	0x08002d85
 8002c70:	08002d8d 	.word	0x08002d8d
		case 0:
			// ENTER CALIBRATE MODE
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8002c74:	2200      	movs	r2, #0
 8002c76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c7a:	484e      	ldr	r0, [pc, #312]	; (8002db4 <buttonLogic+0x200>)
 8002c7c:	f001 ffb8 	bl	8004bf0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8002c80:	2201      	movs	r2, #1
 8002c82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c86:	484b      	ldr	r0, [pc, #300]	; (8002db4 <buttonLogic+0x200>)
 8002c88:	f001 ffb2 	bl	8004bf0 <HAL_GPIO_WritePin>
			break;
 8002c8c:	e08c      	b.n	8002da8 <buttonLogic+0x1f4>
		case 1:
			// Pick
			if (countRightB == 0) {
 8002c8e:	4b4c      	ldr	r3, [pc, #304]	; (8002dc0 <buttonLogic+0x20c>)
 8002c90:	f993 3000 	ldrsb.w	r3, [r3]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10e      	bne.n	8002cb6 <buttonLogic+0x102>
				trayPickX.pos1 = registerFrame[68].U16;
 8002c98:	4b4a      	ldr	r3, [pc, #296]	; (8002dc4 <buttonLogic+0x210>)
 8002c9a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002c9e:	ee07 3a90 	vmov	s15, r3
 8002ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca6:	4b48      	ldr	r3, [pc, #288]	; (8002dc8 <buttonLogic+0x214>)
 8002ca8:	edc3 7a00 	vstr	s15, [r3]
				trayPickY.pos1 = mmActPos;
 8002cac:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <buttonLogic+0x218>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a47      	ldr	r2, [pc, #284]	; (8002dd0 <buttonLogic+0x21c>)
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	e062      	b.n	8002d7c <buttonLogic+0x1c8>
			} else if (countRightB == 1) {
 8002cb6:	4b42      	ldr	r3, [pc, #264]	; (8002dc0 <buttonLogic+0x20c>)
 8002cb8:	f993 3000 	ldrsb.w	r3, [r3]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d10e      	bne.n	8002cde <buttonLogic+0x12a>
				trayPickX.pos2 = registerFrame[68].U16;
 8002cc0:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <buttonLogic+0x210>)
 8002cc2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cce:	4b3e      	ldr	r3, [pc, #248]	; (8002dc8 <buttonLogic+0x214>)
 8002cd0:	edc3 7a01 	vstr	s15, [r3, #4]
				trayPickY.pos2 = mmActPos;
 8002cd4:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <buttonLogic+0x218>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a3d      	ldr	r2, [pc, #244]	; (8002dd0 <buttonLogic+0x21c>)
 8002cda:	6053      	str	r3, [r2, #4]
 8002cdc:	e04e      	b.n	8002d7c <buttonLogic+0x1c8>
			} else if (countRightB == 2) {
 8002cde:	4b38      	ldr	r3, [pc, #224]	; (8002dc0 <buttonLogic+0x20c>)
 8002ce0:	f993 3000 	ldrsb.w	r3, [r3]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d10e      	bne.n	8002d06 <buttonLogic+0x152>
				trayPickX.pos3 = registerFrame[68].U16;
 8002ce8:	4b36      	ldr	r3, [pc, #216]	; (8002dc4 <buttonLogic+0x210>)
 8002cea:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002cee:	ee07 3a90 	vmov	s15, r3
 8002cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cf6:	4b34      	ldr	r3, [pc, #208]	; (8002dc8 <buttonLogic+0x214>)
 8002cf8:	edc3 7a02 	vstr	s15, [r3, #8]
				trayPickY.pos3 = mmActPos;
 8002cfc:	4b33      	ldr	r3, [pc, #204]	; (8002dcc <buttonLogic+0x218>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a33      	ldr	r2, [pc, #204]	; (8002dd0 <buttonLogic+0x21c>)
 8002d02:	6093      	str	r3, [r2, #8]
 8002d04:	e03a      	b.n	8002d7c <buttonLogic+0x1c8>
			} else if (countRightB == 3) {
 8002d06:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <buttonLogic+0x20c>)
 8002d08:	f993 3000 	ldrsb.w	r3, [r3]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d10e      	bne.n	8002d2e <buttonLogic+0x17a>
				trayPlaceX.pos1 = registerFrame[68].U16;
 8002d10:	4b2c      	ldr	r3, [pc, #176]	; (8002dc4 <buttonLogic+0x210>)
 8002d12:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d1e:	4b2d      	ldr	r3, [pc, #180]	; (8002dd4 <buttonLogic+0x220>)
 8002d20:	edc3 7a00 	vstr	s15, [r3]
				trayPlaceY.pos1 = mmActPos;
 8002d24:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <buttonLogic+0x218>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a2b      	ldr	r2, [pc, #172]	; (8002dd8 <buttonLogic+0x224>)
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	e026      	b.n	8002d7c <buttonLogic+0x1c8>
			} else if (countRightB == 4) {
 8002d2e:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <buttonLogic+0x20c>)
 8002d30:	f993 3000 	ldrsb.w	r3, [r3]
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d10e      	bne.n	8002d56 <buttonLogic+0x1a2>
				trayPlaceX.pos2 = registerFrame[68].U16;
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <buttonLogic+0x210>)
 8002d3a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d46:	4b23      	ldr	r3, [pc, #140]	; (8002dd4 <buttonLogic+0x220>)
 8002d48:	edc3 7a01 	vstr	s15, [r3, #4]
				trayPlaceY.pos2 = mmActPos;
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <buttonLogic+0x218>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <buttonLogic+0x224>)
 8002d52:	6053      	str	r3, [r2, #4]
 8002d54:	e012      	b.n	8002d7c <buttonLogic+0x1c8>
			} else if (countRightB == 5) {
 8002d56:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <buttonLogic+0x20c>)
 8002d58:	f993 3000 	ldrsb.w	r3, [r3]
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d10d      	bne.n	8002d7c <buttonLogic+0x1c8>
				trayPlaceX.pos3 = registerFrame[68].U16;
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <buttonLogic+0x210>)
 8002d62:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6e:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <buttonLogic+0x220>)
 8002d70:	edc3 7a02 	vstr	s15, [r3, #8]
				trayPlaceY.pos3 = mmActPos;
 8002d74:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <buttonLogic+0x218>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <buttonLogic+0x224>)
 8002d7a:	6093      	str	r3, [r2, #8]
			}
			joyLogic = 0;
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <buttonLogic+0x208>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
			break;
 8002d82:	e011      	b.n	8002da8 <buttonLogic+0x1f4>
		case 2:
			// Open Laser
			joyLogic = 0;
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <buttonLogic+0x208>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]

			break;
 8002d8a:	e00d      	b.n	8002da8 <buttonLogic+0x1f4>
		case 3:
			//  Delete
			countRightB -= 1;
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <buttonLogic+0x20c>)
 8002d8e:	f993 3000 	ldrsb.w	r3, [r3]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	b25a      	sxtb	r2, r3
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <buttonLogic+0x20c>)
 8002d9c:	701a      	strb	r2, [r3, #0]
			joyLogic = 0;
 8002d9e:	4b07      	ldr	r3, [pc, #28]	; (8002dbc <buttonLogic+0x208>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
			break;
 8002da4:	e000      	b.n	8002da8 <buttonLogic+0x1f4>
		}
	}
 8002da6:	bf00      	nop

}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000d6d 	.word	0x20000d6d
 8002db4:	40020800 	.word	0x40020800
 8002db8:	20000228 	.word	0x20000228
 8002dbc:	20000e11 	.word	0x20000e11
 8002dc0:	20000d6e 	.word	0x20000d6e
 8002dc4:	20000cb0 	.word	0x20000cb0
 8002dc8:	20000d8c 	.word	0x20000d8c
 8002dcc:	20000d80 	.word	0x20000d80
 8002dd0:	20000da4 	.word	0x20000da4
 8002dd4:	20000dbc 	.word	0x20000dbc
 8002dd8:	20000dd4 	.word	0x20000dd4
 8002ddc:	00000000 	.word	0x00000000

08002de0 <robotArmState>:



void robotArmState(uint16_t state) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	80fb      	strh	r3, [r7, #6]
	switch (state) {
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	2b0f      	cmp	r3, #15
 8002df0:	f200 8093 	bhi.w	8002f1a <robotArmState+0x13a>
 8002df4:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <robotArmState+0x1c>)
 8002df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfa:	bf00      	nop
 8002dfc:	08002e3d 	.word	0x08002e3d
 8002e00:	08002e4f 	.word	0x08002e4f
 8002e04:	08002f1b 	.word	0x08002f1b
 8002e08:	08002e61 	.word	0x08002e61
 8002e0c:	08002f1b 	.word	0x08002f1b
 8002e10:	08002f1b 	.word	0x08002f1b
 8002e14:	08002f1b 	.word	0x08002f1b
 8002e18:	08002f19 	.word	0x08002f19
 8002e1c:	08002f1b 	.word	0x08002f1b
 8002e20:	08002f1b 	.word	0x08002f1b
 8002e24:	08002f1b 	.word	0x08002f1b
 8002e28:	08002f1b 	.word	0x08002f1b
 8002e2c:	08002f1b 	.word	0x08002f1b
 8002e30:	08002f1b 	.word	0x08002f1b
 8002e34:	08002f1b 	.word	0x08002f1b
 8002e38:	08002e7d 	.word	0x08002e7d
	case 0b0000000000000001: // SET PICK TRAY
		buttonInput();
 8002e3c:	f7ff fe5e 	bl	8002afc <buttonInput>
		buttonLogic(joyLogic);
 8002e40:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <robotArmState+0x150>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff feb4 	bl	8002bb4 <buttonLogic>
		break;
 8002e4c:	e065      	b.n	8002f1a <robotArmState+0x13a>
	case 0b0000000000000010: // SET PLACE TRAY
		buttonInput();
 8002e4e:	f7ff fe55 	bl	8002afc <buttonInput>
		buttonLogic(joyLogic);
 8002e52:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <robotArmState+0x150>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff feab 	bl	8002bb4 <buttonLogic>
		break;
 8002e5e:	e05c      	b.n	8002f1a <robotArmState+0x13a>
	case 0b0000000000000100: // HOME
		registerFrame[1].U16 = 0;
 8002e60:	4b34      	ldr	r3, [pc, #208]	; (8002f34 <robotArmState+0x154>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 0b0000000000000100;
 8002e66:	4b33      	ldr	r3, [pc, #204]	; (8002f34 <robotArmState+0x154>)
 8002e68:	2204      	movs	r2, #4
 8002e6a:	841a      	strh	r2, [r3, #32]
		startSetHome = 1;
 8002e6c:	4b32      	ldr	r3, [pc, #200]	; (8002f38 <robotArmState+0x158>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]

		registerFrame[64].U16 = 0b0000000000000001;
 8002e72:	4b30      	ldr	r3, [pc, #192]	; (8002f34 <robotArmState+0x154>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		// registerFrame[16].U16 = 0;

		break;
 8002e7a:	e04e      	b.n	8002f1a <robotArmState+0x13a>
	case 0b0000000000001000: // RUN TRAY MODE
		// 18 PATH
		break;
	case 0b0000000000010000: // RUN POINT MODE
		// POSITION
		registerFrame[1].U16 = 0; // RESET BASE SYSTEM STATUS
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <robotArmState+0x154>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	805a      	strh	r2, [r3, #2]

		// : X-Point
		registerFrame[65].U16 = registerFrame[48].U16; //  Read Target Position
 8002e82:	4b2c      	ldr	r3, [pc, #176]	; (8002f34 <robotArmState+0x154>)
 8002e84:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8002e88:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <robotArmState+0x154>)
 8002e8a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		registerFrame[66].U16 = 3000;
 8002e8e:	4b29      	ldr	r3, [pc, #164]	; (8002f34 <robotArmState+0x154>)
 8002e90:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e94:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		registerFrame[67].U16 = 1;
 8002e98:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <robotArmState+0x154>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		registerFrame[64].U16 = 2;
 8002ea0:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <robotArmState+0x154>)
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

		// : Y-Point
		startPointModeY = 1;
 8002ea8:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <robotArmState+0x15c>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
		initPosY = QEIReadModified*(2 * 3.14159 * 11.205 / 8192);
 8002eae:	4b24      	ldr	r3, [pc, #144]	; (8002f40 <robotArmState+0x160>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fd fae2 	bl	800047c <__aeabi_i2d>
 8002eb8:	a31b      	add	r3, pc, #108	; (adr r3, 8002f28 <robotArmState+0x148>)
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	f7fd fb47 	bl	8000550 <__aeabi_dmul>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f7fd fdf1 	bl	8000ab0 <__aeabi_d2iz>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4a1c      	ldr	r2, [pc, #112]	; (8002f44 <robotArmState+0x164>)
 8002ed2:	6013      	str	r3, [r2, #0]

		registerFrame[16].U16 = 0b0000000000100000; // y-axis Moving Status : Go Point
 8002ed4:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <robotArmState+0x154>)
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	841a      	strh	r2, [r3, #32]
		registerFrame[17].U16 = mmActPos; // y-axis Actual Position
 8002eda:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <robotArmState+0x168>)
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ee4:	ee17 3a90 	vmov	r3, s15
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <robotArmState+0x154>)
 8002eec:	845a      	strh	r2, [r3, #34]	; 0x22
		registerFrame[18].U16 = mmActVel; // y-axis Actual Speed
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <robotArmState+0x16c>)
 8002ef0:	edd3 7a00 	vldr	s15, [r3]
 8002ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ef8:	ee17 3a90 	vmov	r3, s15
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <robotArmState+0x154>)
 8002f00:	849a      	strh	r2, [r3, #36]	; 0x24
		registerFrame[19].U16 = mmActAcc; // y-axis Actual Acceleration
 8002f02:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <robotArmState+0x170>)
 8002f04:	edd3 7a00 	vldr	s15, [r3]
 8002f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f0c:	ee17 3a90 	vmov	r3, s15
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <robotArmState+0x154>)
 8002f14:	84da      	strh	r2, [r3, #38]	; 0x26
		break;
 8002f16:	e000      	b.n	8002f1a <robotArmState+0x13a>
		break;
 8002f18:	bf00      	nop
	}
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	f3af 8000 	nop.w
 8002f28:	464f6faa 	.word	0x464f6faa
 8002f2c:	3f8199cb 	.word	0x3f8199cb
 8002f30:	20000e11 	.word	0x20000e11
 8002f34:	20000cb0 	.word	0x20000cb0
 8002f38:	20000244 	.word	0x20000244
 8002f3c:	20000e12 	.word	0x20000e12
 8002f40:	20000d78 	.word	0x20000d78
 8002f44:	20000e14 	.word	0x20000e14
 8002f48:	20000d80 	.word	0x20000d80
 8002f4c:	20000e00 	.word	0x20000e00
 8002f50:	20000e04 	.word	0x20000e04

08002f54 <jogAxisX>:

void jogAxisX() {
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
		refXPos = buffer[0].subdata.xAxis;
 8002f58:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <jogAxisX+0x70>)
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	ee07 3a90 	vmov	s15, r3
 8002f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f64:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <jogAxisX+0x74>)
 8002f66:	edc3 7a00 	vstr	s15, [r3]
		if (refXPos > 2500) {
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <jogAxisX+0x74>)
 8002f6c:	edd3 7a00 	vldr	s15, [r3]
 8002f70:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002fcc <jogAxisX+0x78>
 8002f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7c:	dd07      	ble.n	8002f8e <jogAxisX+0x3a>
			dirAxisX = 1;
 8002f7e:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <jogAxisX+0x7c>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
			registerFrame[64].U16 = 0b0000000000000100;
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <jogAxisX+0x80>)
 8002f86:	2204      	movs	r2, #4
 8002f88:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		{
			registerFrame[64].U16 = 0;

		}

}
 8002f8c:	e015      	b.n	8002fba <jogAxisX+0x66>
		} else if (refXPos < 1500) {
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <jogAxisX+0x74>)
 8002f90:	edd3 7a00 	vldr	s15, [r3]
 8002f94:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002fd8 <jogAxisX+0x84>
 8002f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa0:	d507      	bpl.n	8002fb2 <jogAxisX+0x5e>
			dirAxisX = 0;
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <jogAxisX+0x7c>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
			registerFrame[64].U16 = 0b0000000000001000;
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <jogAxisX+0x80>)
 8002faa:	2208      	movs	r2, #8
 8002fac:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8002fb0:	e003      	b.n	8002fba <jogAxisX+0x66>
			registerFrame[64].U16 = 0;
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <jogAxisX+0x80>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	20000d44 	.word	0x20000d44
 8002fc8:	20000220 	.word	0x20000220
 8002fcc:	451c4000 	.word	0x451c4000
 8002fd0:	2000022a 	.word	0x2000022a
 8002fd4:	20000cb0 	.word	0x20000cb0
 8002fd8:	44bb8000 	.word	0x44bb8000

08002fdc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe0:	b672      	cpsid	i
}
 8002fe2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002fe4:	e7fe      	b.n	8002fe4 <Error_Handler+0x8>
	...

08002fe8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_MspInit+0x4c>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	4a0f      	ldr	r2, [pc, #60]	; (8003034 <HAL_MspInit+0x4c>)
 8002ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <HAL_MspInit+0x4c>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	603b      	str	r3, [r7, #0]
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_MspInit+0x4c>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	4a08      	ldr	r2, [pc, #32]	; (8003034 <HAL_MspInit+0x4c>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003018:	6413      	str	r3, [r2, #64]	; 0x40
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_MspInit+0x4c>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003026:	2007      	movs	r0, #7
 8003028:	f000 fff6 	bl	8004018 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40023800 	.word	0x40023800

08003038 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a2f      	ldr	r2, [pc, #188]	; (8003114 <HAL_ADC_MspInit+0xdc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d157      	bne.n	800310a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	4b2e      	ldr	r3, [pc, #184]	; (8003118 <HAL_ADC_MspInit+0xe0>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	4a2d      	ldr	r2, [pc, #180]	; (8003118 <HAL_ADC_MspInit+0xe0>)
 8003064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003068:	6453      	str	r3, [r2, #68]	; 0x44
 800306a:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <HAL_ADC_MspInit+0xe0>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b27      	ldr	r3, [pc, #156]	; (8003118 <HAL_ADC_MspInit+0xe0>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	4a26      	ldr	r2, [pc, #152]	; (8003118 <HAL_ADC_MspInit+0xe0>)
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
 8003086:	4b24      	ldr	r3, [pc, #144]	; (8003118 <HAL_ADC_MspInit+0xe0>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003092:	2309      	movs	r3, #9
 8003094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003096:	2303      	movs	r3, #3
 8003098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	4619      	mov	r1, r3
 80030a4:	481d      	ldr	r0, [pc, #116]	; (800311c <HAL_ADC_MspInit+0xe4>)
 80030a6:	f001 fc07 	bl	80048b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80030aa:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_ADC_MspInit+0xe8>)
 80030ac:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <HAL_ADC_MspInit+0xec>)
 80030ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80030b0:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <HAL_ADC_MspInit+0xe8>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030b6:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <HAL_ADC_MspInit+0xe8>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030bc:	4b18      	ldr	r3, [pc, #96]	; (8003120 <HAL_ADC_MspInit+0xe8>)
 80030be:	2200      	movs	r2, #0
 80030c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80030c2:	4b17      	ldr	r3, [pc, #92]	; (8003120 <HAL_ADC_MspInit+0xe8>)
 80030c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_ADC_MspInit+0xe8>)
 80030cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <HAL_ADC_MspInit+0xe8>)
 80030d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <HAL_ADC_MspInit+0xe8>)
 80030dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030e2:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <HAL_ADC_MspInit+0xe8>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030e8:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <HAL_ADC_MspInit+0xe8>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030ee:	480c      	ldr	r0, [pc, #48]	; (8003120 <HAL_ADC_MspInit+0xe8>)
 80030f0:	f000 ffd4 	bl	800409c <HAL_DMA_Init>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80030fa:	f7ff ff6f 	bl	8002fdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a07      	ldr	r2, [pc, #28]	; (8003120 <HAL_ADC_MspInit+0xe8>)
 8003102:	639a      	str	r2, [r3, #56]	; 0x38
 8003104:	4a06      	ldr	r2, [pc, #24]	; (8003120 <HAL_ADC_MspInit+0xe8>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800310a:	bf00      	nop
 800310c:	3728      	adds	r7, #40	; 0x28
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40012000 	.word	0x40012000
 8003118:	40023800 	.word	0x40023800
 800311c:	40020800 	.word	0x40020800
 8003120:	20000320 	.word	0x20000320
 8003124:	40026410 	.word	0x40026410

08003128 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0e      	ldr	r2, [pc, #56]	; (8003170 <HAL_TIM_PWM_MspInit+0x48>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d115      	bne.n	8003166 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <HAL_TIM_PWM_MspInit+0x4c>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <HAL_TIM_PWM_MspInit+0x4c>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	6453      	str	r3, [r2, #68]	; 0x44
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <HAL_TIM_PWM_MspInit+0x4c>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003156:	2200      	movs	r2, #0
 8003158:	2100      	movs	r1, #0
 800315a:	201a      	movs	r0, #26
 800315c:	f000 ff67 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003160:	201a      	movs	r0, #26
 8003162:	f000 ff80 	bl	8004066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40010000 	.word	0x40010000
 8003174:	40023800 	.word	0x40023800

08003178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d116      	bne.n	80031b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	4b28      	ldr	r3, [pc, #160]	; (8003230 <HAL_TIM_Base_MspInit+0xb8>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	4a27      	ldr	r2, [pc, #156]	; (8003230 <HAL_TIM_Base_MspInit+0xb8>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6413      	str	r3, [r2, #64]	; 0x40
 800319a:	4b25      	ldr	r3, [pc, #148]	; (8003230 <HAL_TIM_Base_MspInit+0xb8>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031a6:	2200      	movs	r2, #0
 80031a8:	2100      	movs	r1, #0
 80031aa:	201c      	movs	r0, #28
 80031ac:	f000 ff3f 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031b0:	201c      	movs	r0, #28
 80031b2:	f000 ff58 	bl	8004066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80031b6:	e036      	b.n	8003226 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <HAL_TIM_Base_MspInit+0xbc>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d116      	bne.n	80031f0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <HAL_TIM_Base_MspInit+0xb8>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a19      	ldr	r2, [pc, #100]	; (8003230 <HAL_TIM_Base_MspInit+0xb8>)
 80031cc:	f043 0302 	orr.w	r3, r3, #2
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
 80031d2:	4b17      	ldr	r3, [pc, #92]	; (8003230 <HAL_TIM_Base_MspInit+0xb8>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031de:	2200      	movs	r2, #0
 80031e0:	2100      	movs	r1, #0
 80031e2:	201d      	movs	r0, #29
 80031e4:	f000 ff23 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031e8:	201d      	movs	r0, #29
 80031ea:	f000 ff3c 	bl	8004066 <HAL_NVIC_EnableIRQ>
}
 80031ee:	e01a      	b.n	8003226 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a10      	ldr	r2, [pc, #64]	; (8003238 <HAL_TIM_Base_MspInit+0xc0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d115      	bne.n	8003226 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <HAL_TIM_Base_MspInit+0xb8>)
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <HAL_TIM_Base_MspInit+0xb8>)
 8003204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003208:	6453      	str	r3, [r2, #68]	; 0x44
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <HAL_TIM_Base_MspInit+0xb8>)
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	2100      	movs	r1, #0
 800321a:	201a      	movs	r0, #26
 800321c:	f000 ff07 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003220:	201a      	movs	r0, #26
 8003222:	f000 ff20 	bl	8004066 <HAL_NVIC_EnableIRQ>
}
 8003226:	bf00      	nop
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800
 8003234:	40000400 	.word	0x40000400
 8003238:	40014800 	.word	0x40014800

0800323c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	; 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a19      	ldr	r2, [pc, #100]	; (80032c0 <HAL_TIM_Encoder_MspInit+0x84>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d12b      	bne.n	80032b6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	4a17      	ldr	r2, [pc, #92]	; (80032c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003268:	f043 0308 	orr.w	r3, r3, #8
 800326c:	6413      	str	r3, [r2, #64]	; 0x40
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <HAL_TIM_Encoder_MspInit+0x88>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <HAL_TIM_Encoder_MspInit+0x88>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003296:	2303      	movs	r3, #3
 8003298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800329e:	2301      	movs	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a2:	2300      	movs	r3, #0
 80032a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80032a6:	2302      	movs	r3, #2
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032aa:	f107 0314 	add.w	r3, r7, #20
 80032ae:	4619      	mov	r1, r3
 80032b0:	4805      	ldr	r0, [pc, #20]	; (80032c8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80032b2:	f001 fb01 	bl	80048b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80032b6:	bf00      	nop
 80032b8:	3728      	adds	r7, #40	; 0x28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40000c00 	.word	0x40000c00
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40020000 	.word	0x40020000

080032cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 030c 	add.w	r3, r7, #12
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a12      	ldr	r2, [pc, #72]	; (8003334 <HAL_TIM_MspPostInit+0x68>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d11e      	bne.n	800332c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	4b11      	ldr	r3, [pc, #68]	; (8003338 <HAL_TIM_MspPostInit+0x6c>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4a10      	ldr	r2, [pc, #64]	; (8003338 <HAL_TIM_MspPostInit+0x6c>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30
 80032fe:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <HAL_TIM_MspPostInit+0x6c>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800330a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800330e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003310:	2302      	movs	r3, #2
 8003312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003318:	2300      	movs	r3, #0
 800331a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800331c:	2301      	movs	r3, #1
 800331e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003320:	f107 030c 	add.w	r3, r7, #12
 8003324:	4619      	mov	r1, r3
 8003326:	4805      	ldr	r0, [pc, #20]	; (800333c <HAL_TIM_MspPostInit+0x70>)
 8003328:	f001 fac6 	bl	80048b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800332c:	bf00      	nop
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40010000 	.word	0x40010000
 8003338:	40023800 	.word	0x40023800
 800333c:	40020000 	.word	0x40020000

08003340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003348:	f107 0314 	add.w	r3, r7, #20
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a34      	ldr	r2, [pc, #208]	; (8003430 <HAL_UART_MspInit+0xf0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d161      	bne.n	8003426 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	4b33      	ldr	r3, [pc, #204]	; (8003434 <HAL_UART_MspInit+0xf4>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a32      	ldr	r2, [pc, #200]	; (8003434 <HAL_UART_MspInit+0xf4>)
 800336c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b30      	ldr	r3, [pc, #192]	; (8003434 <HAL_UART_MspInit+0xf4>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	4b2c      	ldr	r3, [pc, #176]	; (8003434 <HAL_UART_MspInit+0xf4>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	4a2b      	ldr	r2, [pc, #172]	; (8003434 <HAL_UART_MspInit+0xf4>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	6313      	str	r3, [r2, #48]	; 0x30
 800338e:	4b29      	ldr	r3, [pc, #164]	; (8003434 <HAL_UART_MspInit+0xf4>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800339a:	230c      	movs	r3, #12
 800339c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339e:	2302      	movs	r3, #2
 80033a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a6:	2303      	movs	r3, #3
 80033a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033aa:	2307      	movs	r3, #7
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ae:	f107 0314 	add.w	r3, r7, #20
 80033b2:	4619      	mov	r1, r3
 80033b4:	4820      	ldr	r0, [pc, #128]	; (8003438 <HAL_UART_MspInit+0xf8>)
 80033b6:	f001 fa7f 	bl	80048b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <HAL_UART_MspInit+0xfc>)
 80033bc:	4a20      	ldr	r2, [pc, #128]	; (8003440 <HAL_UART_MspInit+0x100>)
 80033be:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80033c0:	4b1e      	ldr	r3, [pc, #120]	; (800343c <HAL_UART_MspInit+0xfc>)
 80033c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033c8:	4b1c      	ldr	r3, [pc, #112]	; (800343c <HAL_UART_MspInit+0xfc>)
 80033ca:	2240      	movs	r2, #64	; 0x40
 80033cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ce:	4b1b      	ldr	r3, [pc, #108]	; (800343c <HAL_UART_MspInit+0xfc>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033d4:	4b19      	ldr	r3, [pc, #100]	; (800343c <HAL_UART_MspInit+0xfc>)
 80033d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033da:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033dc:	4b17      	ldr	r3, [pc, #92]	; (800343c <HAL_UART_MspInit+0xfc>)
 80033de:	2200      	movs	r2, #0
 80033e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033e2:	4b16      	ldr	r3, [pc, #88]	; (800343c <HAL_UART_MspInit+0xfc>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <HAL_UART_MspInit+0xfc>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <HAL_UART_MspInit+0xfc>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <HAL_UART_MspInit+0xfc>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80033fa:	4810      	ldr	r0, [pc, #64]	; (800343c <HAL_UART_MspInit+0xfc>)
 80033fc:	f000 fe4e 	bl	800409c <HAL_DMA_Init>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003406:	f7ff fde9 	bl	8002fdc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a0b      	ldr	r2, [pc, #44]	; (800343c <HAL_UART_MspInit+0xfc>)
 800340e:	635a      	str	r2, [r3, #52]	; 0x34
 8003410:	4a0a      	ldr	r2, [pc, #40]	; (800343c <HAL_UART_MspInit+0xfc>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003416:	2200      	movs	r2, #0
 8003418:	2100      	movs	r1, #0
 800341a:	2026      	movs	r0, #38	; 0x26
 800341c:	f000 fe07 	bl	800402e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003420:	2026      	movs	r0, #38	; 0x26
 8003422:	f000 fe20 	bl	8004066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003426:	bf00      	nop
 8003428:	3728      	adds	r7, #40	; 0x28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40004400 	.word	0x40004400
 8003434:	40023800 	.word	0x40023800
 8003438:	40020000 	.word	0x40020000
 800343c:	20000778 	.word	0x20000778
 8003440:	400260a0 	.word	0x400260a0

08003444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003448:	e7fe      	b.n	8003448 <NMI_Handler+0x4>

0800344a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800344a:	b480      	push	{r7}
 800344c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800344e:	e7fe      	b.n	800344e <HardFault_Handler+0x4>

08003450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003454:	e7fe      	b.n	8003454 <MemManage_Handler+0x4>

08003456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003456:	b480      	push	{r7}
 8003458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800345a:	e7fe      	b.n	800345a <BusFault_Handler+0x4>

0800345c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003460:	e7fe      	b.n	8003460 <UsageFault_Handler+0x4>

08003462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003462:	b480      	push	{r7}
 8003464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800347e:	b480      	push	{r7}
 8003480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003482:	bf00      	nop
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003490:	f000 f8d0 	bl	8003634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}

08003498 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800349c:	4802      	ldr	r0, [pc, #8]	; (80034a8 <DMA1_Stream6_IRQHandler+0x10>)
 800349e:	f000 ff95 	bl	80043cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000778 	.word	0x20000778

080034ac <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034b0:	4803      	ldr	r0, [pc, #12]	; (80034c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80034b2:	f002 fce9 	bl	8005e88 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80034b6:	4803      	ldr	r0, [pc, #12]	; (80034c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80034b8:	f002 fce6 	bl	8005e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80034bc:	bf00      	nop
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000380 	.word	0x20000380
 80034c4:	20000650 	.word	0x20000650

080034c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034cc:	4802      	ldr	r0, [pc, #8]	; (80034d8 <TIM2_IRQHandler+0x10>)
 80034ce:	f002 fcdb 	bl	8005e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000434 	.word	0x20000434

080034dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034e0:	4802      	ldr	r0, [pc, #8]	; (80034ec <TIM3_IRQHandler+0x10>)
 80034e2:	f002 fcd1 	bl	8005e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	200004e8 	.word	0x200004e8

080034f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034f4:	4802      	ldr	r0, [pc, #8]	; (8003500 <USART2_IRQHandler+0x10>)
 80034f6:	f003 ffcf 	bl	8007498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000704 	.word	0x20000704

08003504 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003508:	4802      	ldr	r0, [pc, #8]	; (8003514 <DMA2_Stream0_IRQHandler+0x10>)
 800350a:	f000 ff5f 	bl	80043cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000320 	.word	0x20000320

08003518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <SystemInit+0x20>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003522:	4a05      	ldr	r2, [pc, #20]	; (8003538 <SystemInit+0x20>)
 8003524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800353c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003574 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003540:	480d      	ldr	r0, [pc, #52]	; (8003578 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003542:	490e      	ldr	r1, [pc, #56]	; (800357c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003544:	4a0e      	ldr	r2, [pc, #56]	; (8003580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003548:	e002      	b.n	8003550 <LoopCopyDataInit>

0800354a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800354a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800354c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800354e:	3304      	adds	r3, #4

08003550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003554:	d3f9      	bcc.n	800354a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003556:	4a0b      	ldr	r2, [pc, #44]	; (8003584 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003558:	4c0b      	ldr	r4, [pc, #44]	; (8003588 <LoopFillZerobss+0x26>)
  movs r3, #0
 800355a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800355c:	e001      	b.n	8003562 <LoopFillZerobss>

0800355e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800355e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003560:	3204      	adds	r2, #4

08003562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003564:	d3fb      	bcc.n	800355e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003566:	f7ff ffd7 	bl	8003518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800356a:	f004 ffe1 	bl	8008530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800356e:	f7fd fff5 	bl	800155c <main>
  bx  lr    
 8003572:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003574:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800357c:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8003580:	08009458 	.word	0x08009458
  ldr r2, =_sbss
 8003584:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8003588:	20000e24 	.word	0x20000e24

0800358c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800358c:	e7fe      	b.n	800358c <ADC_IRQHandler>
	...

08003590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003594:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <HAL_Init+0x40>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a0d      	ldr	r2, [pc, #52]	; (80035d0 <HAL_Init+0x40>)
 800359a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800359e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_Init+0x40>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <HAL_Init+0x40>)
 80035a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035ac:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <HAL_Init+0x40>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <HAL_Init+0x40>)
 80035b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035b8:	2003      	movs	r0, #3
 80035ba:	f000 fd2d 	bl	8004018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035be:	2000      	movs	r0, #0
 80035c0:	f000 f808 	bl	80035d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035c4:	f7ff fd10 	bl	8002fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40023c00 	.word	0x40023c00

080035d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035dc:	4b12      	ldr	r3, [pc, #72]	; (8003628 <HAL_InitTick+0x54>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <HAL_InitTick+0x58>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	4619      	mov	r1, r3
 80035e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fd45 	bl	8004082 <HAL_SYSTICK_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e00e      	b.n	8003620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b0f      	cmp	r3, #15
 8003606:	d80a      	bhi.n	800361e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003608:	2200      	movs	r2, #0
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	f04f 30ff 	mov.w	r0, #4294967295
 8003610:	f000 fd0d 	bl	800402e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003614:	4a06      	ldr	r2, [pc, #24]	; (8003630 <HAL_InitTick+0x5c>)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	e000      	b.n	8003620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20000248 	.word	0x20000248
 800362c:	20000250 	.word	0x20000250
 8003630:	2000024c 	.word	0x2000024c

08003634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_IncTick+0x20>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_IncTick+0x24>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4413      	add	r3, r2
 8003644:	4a04      	ldr	r2, [pc, #16]	; (8003658 <HAL_IncTick+0x24>)
 8003646:	6013      	str	r3, [r2, #0]
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000250 	.word	0x20000250
 8003658:	20000e20 	.word	0x20000e20

0800365c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return uwTick;
 8003660:	4b03      	ldr	r3, [pc, #12]	; (8003670 <HAL_GetTick+0x14>)
 8003662:	681b      	ldr	r3, [r3, #0]
}
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000e20 	.word	0x20000e20

08003674 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e033      	b.n	80036f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff fcd0 	bl	8003038 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d118      	bne.n	80036e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036ba:	f023 0302 	bic.w	r3, r3, #2
 80036be:	f043 0202 	orr.w	r2, r3, #2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fa58 	bl	8003b7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	f043 0201 	orr.w	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40
 80036e2:	e001      	b.n	80036e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_ADC_Start_DMA+0x1e>
 8003716:	2302      	movs	r3, #2
 8003718:	e0ce      	b.n	80038b8 <HAL_ADC_Start_DMA+0x1bc>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b01      	cmp	r3, #1
 800372e:	d018      	beq.n	8003762 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003740:	4b5f      	ldr	r3, [pc, #380]	; (80038c0 <HAL_ADC_Start_DMA+0x1c4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a5f      	ldr	r2, [pc, #380]	; (80038c4 <HAL_ADC_Start_DMA+0x1c8>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	0c9a      	lsrs	r2, r3, #18
 800374c:	4613      	mov	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003754:	e002      	b.n	800375c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	3b01      	subs	r3, #1
 800375a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f9      	bne.n	8003756 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003770:	d107      	bne.n	8003782 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003780:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b01      	cmp	r3, #1
 800378e:	f040 8086 	bne.w	800389e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800379a:	f023 0301 	bic.w	r3, r3, #1
 800379e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d0:	d106      	bne.n	80037e0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	f023 0206 	bic.w	r2, r3, #6
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
 80037de:	e002      	b.n	80037e6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037ee:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <HAL_ADC_Start_DMA+0x1cc>)
 80037f0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	4a35      	ldr	r2, [pc, #212]	; (80038cc <HAL_ADC_Start_DMA+0x1d0>)
 80037f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	4a34      	ldr	r2, [pc, #208]	; (80038d0 <HAL_ADC_Start_DMA+0x1d4>)
 8003800:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	4a33      	ldr	r2, [pc, #204]	; (80038d4 <HAL_ADC_Start_DMA+0x1d8>)
 8003808:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003812:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003822:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003832:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	334c      	adds	r3, #76	; 0x4c
 800383e:	4619      	mov	r1, r3
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f000 fcd8 	bl	80041f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10f      	bne.n	8003874 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d129      	bne.n	80038b6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003870:	609a      	str	r2, [r3, #8]
 8003872:	e020      	b.n	80038b6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a17      	ldr	r2, [pc, #92]	; (80038d8 <HAL_ADC_Start_DMA+0x1dc>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d11b      	bne.n	80038b6 <HAL_ADC_Start_DMA+0x1ba>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d114      	bne.n	80038b6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	e00b      	b.n	80038b6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f043 0210 	orr.w	r2, r3, #16
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ae:	f043 0201 	orr.w	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000248 	.word	0x20000248
 80038c4:	431bde83 	.word	0x431bde83
 80038c8:	40012300 	.word	0x40012300
 80038cc:	08003d75 	.word	0x08003d75
 80038d0:	08003e2f 	.word	0x08003e2f
 80038d4:	08003e4b 	.word	0x08003e4b
 80038d8:	40012000 	.word	0x40012000

080038dc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x1c>
 8003930:	2302      	movs	r3, #2
 8003932:	e113      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x244>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b09      	cmp	r3, #9
 8003942:	d925      	bls.n	8003990 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68d9      	ldr	r1, [r3, #12]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	b29b      	uxth	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	4613      	mov	r3, r2
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	4413      	add	r3, r2
 8003958:	3b1e      	subs	r3, #30
 800395a:	2207      	movs	r2, #7
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43da      	mvns	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	400a      	ands	r2, r1
 8003968:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68d9      	ldr	r1, [r3, #12]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	b29b      	uxth	r3, r3
 800397a:	4618      	mov	r0, r3
 800397c:	4603      	mov	r3, r0
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4403      	add	r3, r0
 8003982:	3b1e      	subs	r3, #30
 8003984:	409a      	lsls	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	e022      	b.n	80039d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6919      	ldr	r1, [r3, #16]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	2207      	movs	r2, #7
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43da      	mvns	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	400a      	ands	r2, r1
 80039b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6919      	ldr	r1, [r3, #16]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	4618      	mov	r0, r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	4403      	add	r3, r0
 80039cc:	409a      	lsls	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b06      	cmp	r3, #6
 80039dc:	d824      	bhi.n	8003a28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	3b05      	subs	r3, #5
 80039f0:	221f      	movs	r2, #31
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43da      	mvns	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	400a      	ands	r2, r1
 80039fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	3b05      	subs	r3, #5
 8003a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	635a      	str	r2, [r3, #52]	; 0x34
 8003a26:	e04c      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b0c      	cmp	r3, #12
 8003a2e:	d824      	bhi.n	8003a7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	3b23      	subs	r3, #35	; 0x23
 8003a42:	221f      	movs	r2, #31
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	43da      	mvns	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	400a      	ands	r2, r1
 8003a50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	4618      	mov	r0, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	3b23      	subs	r3, #35	; 0x23
 8003a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
 8003a78:	e023      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	3b41      	subs	r3, #65	; 0x41
 8003a8c:	221f      	movs	r2, #31
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43da      	mvns	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	400a      	ands	r2, r1
 8003a9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3b41      	subs	r3, #65	; 0x41
 8003ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ac2:	4b29      	ldr	r3, [pc, #164]	; (8003b68 <HAL_ADC_ConfigChannel+0x250>)
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a28      	ldr	r2, [pc, #160]	; (8003b6c <HAL_ADC_ConfigChannel+0x254>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d10f      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x1d8>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b12      	cmp	r3, #18
 8003ad6:	d10b      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <HAL_ADC_ConfigChannel+0x254>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d12b      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x23a>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <HAL_ADC_ConfigChannel+0x258>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <HAL_ADC_ConfigChannel+0x1f4>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b11      	cmp	r3, #17
 8003b0a:	d122      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a11      	ldr	r2, [pc, #68]	; (8003b70 <HAL_ADC_ConfigChannel+0x258>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d111      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b2e:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_ADC_ConfigChannel+0x25c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a11      	ldr	r2, [pc, #68]	; (8003b78 <HAL_ADC_ConfigChannel+0x260>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	0c9a      	lsrs	r2, r3, #18
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b44:	e002      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f9      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	40012300 	.word	0x40012300
 8003b6c:	40012000 	.word	0x40012000
 8003b70:	10000012 	.word	0x10000012
 8003b74:	20000248 	.word	0x20000248
 8003b78:	431bde83 	.word	0x431bde83

08003b7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b84:	4b79      	ldr	r3, [pc, #484]	; (8003d6c <ADC_Init+0x1f0>)
 8003b86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	021a      	lsls	r2, r3, #8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6899      	ldr	r1, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	4a58      	ldr	r2, [pc, #352]	; (8003d70 <ADC_Init+0x1f4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d022      	beq.n	8003c5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6899      	ldr	r1, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6899      	ldr	r1, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	e00f      	b.n	8003c7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0202 	bic.w	r2, r2, #2
 8003c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6899      	ldr	r1, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	7e1b      	ldrb	r3, [r3, #24]
 8003c94:	005a      	lsls	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01b      	beq.n	8003ce0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6859      	ldr	r1, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	035a      	lsls	r2, r3, #13
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	e007      	b.n	8003cf0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	051a      	lsls	r2, r3, #20
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6899      	ldr	r1, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d32:	025a      	lsls	r2, r3, #9
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6899      	ldr	r1, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	029a      	lsls	r2, r3, #10
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]
}
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	40012300 	.word	0x40012300
 8003d70:	0f000001 	.word	0x0f000001

08003d74 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d13c      	bne.n	8003e08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d12b      	bne.n	8003e00 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d127      	bne.n	8003e00 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d006      	beq.n	8003dcc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d119      	bne.n	8003e00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0220 	bic.w	r2, r2, #32
 8003dda:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d105      	bne.n	8003e00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff fd6b 	bl	80038dc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e06:	e00e      	b.n	8003e26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7ff fd75 	bl	8003904 <HAL_ADC_ErrorCallback>
}
 8003e1a:	e004      	b.n	8003e26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	4798      	blx	r3
}
 8003e26:	bf00      	nop
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f7ff fd57 	bl	80038f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e42:	bf00      	nop
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2240      	movs	r2, #64	; 0x40
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f043 0204 	orr.w	r2, r3, #4
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f7ff fd4a 	bl	8003904 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e70:	bf00      	nop
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <__NVIC_SetPriorityGrouping+0x44>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e94:	4013      	ands	r3, r2
 8003e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eaa:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <__NVIC_SetPriorityGrouping+0x44>)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	60d3      	str	r3, [r2, #12]
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec4:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	f003 0307 	and.w	r3, r3, #7
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	db0b      	blt.n	8003f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	f003 021f 	and.w	r2, r3, #31
 8003ef4:	4907      	ldr	r1, [pc, #28]	; (8003f14 <__NVIC_EnableIRQ+0x38>)
 8003ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2001      	movs	r0, #1
 8003efe:	fa00 f202 	lsl.w	r2, r0, r2
 8003f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	e000e100 	.word	0xe000e100

08003f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	6039      	str	r1, [r7, #0]
 8003f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	db0a      	blt.n	8003f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	490c      	ldr	r1, [pc, #48]	; (8003f64 <__NVIC_SetPriority+0x4c>)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	0112      	lsls	r2, r2, #4
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f40:	e00a      	b.n	8003f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	4908      	ldr	r1, [pc, #32]	; (8003f68 <__NVIC_SetPriority+0x50>)
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	3b04      	subs	r3, #4
 8003f50:	0112      	lsls	r2, r2, #4
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	440b      	add	r3, r1
 8003f56:	761a      	strb	r2, [r3, #24]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	e000e100 	.word	0xe000e100
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b089      	sub	sp, #36	; 0x24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f1c3 0307 	rsb	r3, r3, #7
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	bf28      	it	cs
 8003f8a:	2304      	movcs	r3, #4
 8003f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	3304      	adds	r3, #4
 8003f92:	2b06      	cmp	r3, #6
 8003f94:	d902      	bls.n	8003f9c <NVIC_EncodePriority+0x30>
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3b03      	subs	r3, #3
 8003f9a:	e000      	b.n	8003f9e <NVIC_EncodePriority+0x32>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43da      	mvns	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	401a      	ands	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbe:	43d9      	mvns	r1, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc4:	4313      	orrs	r3, r2
         );
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3724      	adds	r7, #36	; 0x24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
	...

08003fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe4:	d301      	bcc.n	8003fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e00f      	b.n	800400a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fea:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <SysTick_Config+0x40>)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ff2:	210f      	movs	r1, #15
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	f7ff ff8e 	bl	8003f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <SysTick_Config+0x40>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004002:	4b04      	ldr	r3, [pc, #16]	; (8004014 <SysTick_Config+0x40>)
 8004004:	2207      	movs	r2, #7
 8004006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	e000e010 	.word	0xe000e010

08004018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff29 	bl	8003e78 <__NVIC_SetPriorityGrouping>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	4603      	mov	r3, r0
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004040:	f7ff ff3e 	bl	8003ec0 <__NVIC_GetPriorityGrouping>
 8004044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	6978      	ldr	r0, [r7, #20]
 800404c:	f7ff ff8e 	bl	8003f6c <NVIC_EncodePriority>
 8004050:	4602      	mov	r2, r0
 8004052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff ff5d 	bl	8003f18 <__NVIC_SetPriority>
}
 800405e:	bf00      	nop
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	4603      	mov	r3, r0
 800406e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ff31 	bl	8003edc <__NVIC_EnableIRQ>
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff ffa2 	bl	8003fd4 <SysTick_Config>
 8004090:	4603      	mov	r3, r0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
	...

0800409c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040a8:	f7ff fad8 	bl	800365c <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e099      	b.n	80041ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040d8:	e00f      	b.n	80040fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040da:	f7ff fabf 	bl	800365c <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b05      	cmp	r3, #5
 80040e6:	d908      	bls.n	80040fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2203      	movs	r2, #3
 80040f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e078      	b.n	80041ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e8      	bne.n	80040da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4b38      	ldr	r3, [pc, #224]	; (80041f4 <HAL_DMA_Init+0x158>)
 8004114:	4013      	ands	r3, r2
 8004116:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004126:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004132:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800413e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	2b04      	cmp	r3, #4
 8004152:	d107      	bne.n	8004164 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	4313      	orrs	r3, r2
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f023 0307 	bic.w	r3, r3, #7
 800417a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2b04      	cmp	r3, #4
 800418c:	d117      	bne.n	80041be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00e      	beq.n	80041be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fb0d 	bl	80047c0 <DMA_CheckFifoParam>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2240      	movs	r2, #64	; 0x40
 80041b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041ba:	2301      	movs	r3, #1
 80041bc:	e016      	b.n	80041ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fac4 	bl	8004754 <DMA_CalcBaseAndBitshift>
 80041cc:	4603      	mov	r3, r0
 80041ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d4:	223f      	movs	r2, #63	; 0x3f
 80041d6:	409a      	lsls	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	f010803f 	.word	0xf010803f

080041f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <HAL_DMA_Start_IT+0x26>
 800421a:	2302      	movs	r3, #2
 800421c:	e040      	b.n	80042a0 <HAL_DMA_Start_IT+0xa8>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	d12f      	bne.n	8004292 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2202      	movs	r2, #2
 8004236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 fa56 	bl	80046f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004250:	223f      	movs	r2, #63	; 0x3f
 8004252:	409a      	lsls	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0216 	orr.w	r2, r2, #22
 8004266:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0208 	orr.w	r2, r2, #8
 800427e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	e005      	b.n	800429e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800429a:	2302      	movs	r3, #2
 800429c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800429e:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042b6:	f7ff f9d1 	bl	800365c <HAL_GetTick>
 80042ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d008      	beq.n	80042da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2280      	movs	r2, #128	; 0x80
 80042cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e052      	b.n	8004380 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0216 	bic.w	r2, r2, #22
 80042e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d103      	bne.n	800430a <HAL_DMA_Abort+0x62>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0208 	bic.w	r2, r2, #8
 8004318:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0201 	bic.w	r2, r2, #1
 8004328:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800432a:	e013      	b.n	8004354 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800432c:	f7ff f996 	bl	800365c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b05      	cmp	r3, #5
 8004338:	d90c      	bls.n	8004354 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2203      	movs	r2, #3
 8004344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e015      	b.n	8004380 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e4      	bne.n	800432c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004366:	223f      	movs	r2, #63	; 0x3f
 8004368:	409a      	lsls	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d004      	beq.n	80043a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2280      	movs	r2, #128	; 0x80
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e00c      	b.n	80043c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2205      	movs	r2, #5
 80043aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0201 	bic.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043d8:	4b8e      	ldr	r3, [pc, #568]	; (8004614 <HAL_DMA_IRQHandler+0x248>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a8e      	ldr	r2, [pc, #568]	; (8004618 <HAL_DMA_IRQHandler+0x24c>)
 80043de:	fba2 2303 	umull	r2, r3, r2, r3
 80043e2:	0a9b      	lsrs	r3, r3, #10
 80043e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f6:	2208      	movs	r2, #8
 80043f8:	409a      	lsls	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d01a      	beq.n	8004438 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d013      	beq.n	8004438 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0204 	bic.w	r2, r2, #4
 800441e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004424:	2208      	movs	r2, #8
 8004426:	409a      	lsls	r2, r3
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004430:	f043 0201 	orr.w	r2, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443c:	2201      	movs	r2, #1
 800443e:	409a      	lsls	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d012      	beq.n	800446e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445a:	2201      	movs	r2, #1
 800445c:	409a      	lsls	r2, r3
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f043 0202 	orr.w	r2, r3, #2
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004472:	2204      	movs	r2, #4
 8004474:	409a      	lsls	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4013      	ands	r3, r2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d012      	beq.n	80044a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00b      	beq.n	80044a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	2204      	movs	r2, #4
 8004492:	409a      	lsls	r2, r3
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	f043 0204 	orr.w	r2, r3, #4
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a8:	2210      	movs	r2, #16
 80044aa:	409a      	lsls	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4013      	ands	r3, r2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d043      	beq.n	800453c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d03c      	beq.n	800453c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c6:	2210      	movs	r2, #16
 80044c8:	409a      	lsls	r2, r3
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d018      	beq.n	800450e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d108      	bne.n	80044fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d024      	beq.n	800453c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	4798      	blx	r3
 80044fa:	e01f      	b.n	800453c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01b      	beq.n	800453c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	4798      	blx	r3
 800450c:	e016      	b.n	800453c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d107      	bne.n	800452c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0208 	bic.w	r2, r2, #8
 800452a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004540:	2220      	movs	r2, #32
 8004542:	409a      	lsls	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4013      	ands	r3, r2
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 808f 	beq.w	800466c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8087 	beq.w	800466c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004562:	2220      	movs	r2, #32
 8004564:	409a      	lsls	r2, r3
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b05      	cmp	r3, #5
 8004574:	d136      	bne.n	80045e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0216 	bic.w	r2, r2, #22
 8004584:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004594:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d103      	bne.n	80045a6 <HAL_DMA_IRQHandler+0x1da>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d007      	beq.n	80045b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0208 	bic.w	r2, r2, #8
 80045b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ba:	223f      	movs	r2, #63	; 0x3f
 80045bc:	409a      	lsls	r2, r3
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d07e      	beq.n	80046d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	4798      	blx	r3
        }
        return;
 80045e2:	e079      	b.n	80046d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d01d      	beq.n	800462e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10d      	bne.n	800461c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004604:	2b00      	cmp	r3, #0
 8004606:	d031      	beq.n	800466c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4798      	blx	r3
 8004610:	e02c      	b.n	800466c <HAL_DMA_IRQHandler+0x2a0>
 8004612:	bf00      	nop
 8004614:	20000248 	.word	0x20000248
 8004618:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d023      	beq.n	800466c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	4798      	blx	r3
 800462c:	e01e      	b.n	800466c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10f      	bne.n	800465c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0210 	bic.w	r2, r2, #16
 800464a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004670:	2b00      	cmp	r3, #0
 8004672:	d032      	beq.n	80046da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d022      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2205      	movs	r2, #5
 8004684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	3301      	adds	r3, #1
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d307      	bcc.n	80046b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f2      	bne.n	8004698 <HAL_DMA_IRQHandler+0x2cc>
 80046b2:	e000      	b.n	80046b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80046b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	4798      	blx	r3
 80046d6:	e000      	b.n	80046da <HAL_DMA_IRQHandler+0x30e>
        return;
 80046d8:	bf00      	nop
    }
  }
}
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004714:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d108      	bne.n	8004738 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004736:	e007      	b.n	8004748 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	60da      	str	r2, [r3, #12]
}
 8004748:	bf00      	nop
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	3b10      	subs	r3, #16
 8004764:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <DMA_CalcBaseAndBitshift+0x64>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	091b      	lsrs	r3, r3, #4
 800476c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800476e:	4a13      	ldr	r2, [pc, #76]	; (80047bc <DMA_CalcBaseAndBitshift+0x68>)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d909      	bls.n	8004796 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800478a:	f023 0303 	bic.w	r3, r3, #3
 800478e:	1d1a      	adds	r2, r3, #4
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	659a      	str	r2, [r3, #88]	; 0x58
 8004794:	e007      	b.n	80047a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800479e:	f023 0303 	bic.w	r3, r3, #3
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	aaaaaaab 	.word	0xaaaaaaab
 80047bc:	08009410 	.word	0x08009410

080047c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d11f      	bne.n	800481a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d856      	bhi.n	800488e <DMA_CheckFifoParam+0xce>
 80047e0:	a201      	add	r2, pc, #4	; (adr r2, 80047e8 <DMA_CheckFifoParam+0x28>)
 80047e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e6:	bf00      	nop
 80047e8:	080047f9 	.word	0x080047f9
 80047ec:	0800480b 	.word	0x0800480b
 80047f0:	080047f9 	.word	0x080047f9
 80047f4:	0800488f 	.word	0x0800488f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d046      	beq.n	8004892 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004808:	e043      	b.n	8004892 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004812:	d140      	bne.n	8004896 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004818:	e03d      	b.n	8004896 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004822:	d121      	bne.n	8004868 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b03      	cmp	r3, #3
 8004828:	d837      	bhi.n	800489a <DMA_CheckFifoParam+0xda>
 800482a:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <DMA_CheckFifoParam+0x70>)
 800482c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004830:	08004841 	.word	0x08004841
 8004834:	08004847 	.word	0x08004847
 8004838:	08004841 	.word	0x08004841
 800483c:	08004859 	.word	0x08004859
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
      break;
 8004844:	e030      	b.n	80048a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d025      	beq.n	800489e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004856:	e022      	b.n	800489e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004860:	d11f      	bne.n	80048a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004866:	e01c      	b.n	80048a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d903      	bls.n	8004876 <DMA_CheckFifoParam+0xb6>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b03      	cmp	r3, #3
 8004872:	d003      	beq.n	800487c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004874:	e018      	b.n	80048a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
      break;
 800487a:	e015      	b.n	80048a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00e      	beq.n	80048a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]
      break;
 800488c:	e00b      	b.n	80048a6 <DMA_CheckFifoParam+0xe6>
      break;
 800488e:	bf00      	nop
 8004890:	e00a      	b.n	80048a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004892:	bf00      	nop
 8004894:	e008      	b.n	80048a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004896:	bf00      	nop
 8004898:	e006      	b.n	80048a8 <DMA_CheckFifoParam+0xe8>
      break;
 800489a:	bf00      	nop
 800489c:	e004      	b.n	80048a8 <DMA_CheckFifoParam+0xe8>
      break;
 800489e:	bf00      	nop
 80048a0:	e002      	b.n	80048a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80048a2:	bf00      	nop
 80048a4:	e000      	b.n	80048a8 <DMA_CheckFifoParam+0xe8>
      break;
 80048a6:	bf00      	nop
    }
  } 
  
  return status; 
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop

080048b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b089      	sub	sp, #36	; 0x24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ce:	2300      	movs	r3, #0
 80048d0:	61fb      	str	r3, [r7, #28]
 80048d2:	e159      	b.n	8004b88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048d4:	2201      	movs	r2, #1
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4013      	ands	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	f040 8148 	bne.w	8004b82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d005      	beq.n	800490a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004906:	2b02      	cmp	r3, #2
 8004908:	d130      	bne.n	800496c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	2203      	movs	r2, #3
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43db      	mvns	r3, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4013      	ands	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4313      	orrs	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004940:	2201      	movs	r2, #1
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	43db      	mvns	r3, r3
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4013      	ands	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	091b      	lsrs	r3, r3, #4
 8004956:	f003 0201 	and.w	r2, r3, #1
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	4313      	orrs	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	2b03      	cmp	r3, #3
 8004976:	d017      	beq.n	80049a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	2203      	movs	r2, #3
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4013      	ands	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4313      	orrs	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 0303 	and.w	r3, r3, #3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d123      	bne.n	80049fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	08da      	lsrs	r2, r3, #3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3208      	adds	r2, #8
 80049bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	220f      	movs	r2, #15
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	43db      	mvns	r3, r3
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4013      	ands	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	08da      	lsrs	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3208      	adds	r2, #8
 80049f6:	69b9      	ldr	r1, [r7, #24]
 80049f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	2203      	movs	r2, #3
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4013      	ands	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f003 0203 	and.w	r2, r3, #3
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80a2 	beq.w	8004b82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	4b57      	ldr	r3, [pc, #348]	; (8004ba0 <HAL_GPIO_Init+0x2e8>)
 8004a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a46:	4a56      	ldr	r2, [pc, #344]	; (8004ba0 <HAL_GPIO_Init+0x2e8>)
 8004a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a4e:	4b54      	ldr	r3, [pc, #336]	; (8004ba0 <HAL_GPIO_Init+0x2e8>)
 8004a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a5a:	4a52      	ldr	r2, [pc, #328]	; (8004ba4 <HAL_GPIO_Init+0x2ec>)
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	089b      	lsrs	r3, r3, #2
 8004a60:	3302      	adds	r3, #2
 8004a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	220f      	movs	r2, #15
 8004a72:	fa02 f303 	lsl.w	r3, r2, r3
 8004a76:	43db      	mvns	r3, r3
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a49      	ldr	r2, [pc, #292]	; (8004ba8 <HAL_GPIO_Init+0x2f0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d019      	beq.n	8004aba <HAL_GPIO_Init+0x202>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a48      	ldr	r2, [pc, #288]	; (8004bac <HAL_GPIO_Init+0x2f4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d013      	beq.n	8004ab6 <HAL_GPIO_Init+0x1fe>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a47      	ldr	r2, [pc, #284]	; (8004bb0 <HAL_GPIO_Init+0x2f8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00d      	beq.n	8004ab2 <HAL_GPIO_Init+0x1fa>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a46      	ldr	r2, [pc, #280]	; (8004bb4 <HAL_GPIO_Init+0x2fc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d007      	beq.n	8004aae <HAL_GPIO_Init+0x1f6>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a45      	ldr	r2, [pc, #276]	; (8004bb8 <HAL_GPIO_Init+0x300>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d101      	bne.n	8004aaa <HAL_GPIO_Init+0x1f2>
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	e008      	b.n	8004abc <HAL_GPIO_Init+0x204>
 8004aaa:	2307      	movs	r3, #7
 8004aac:	e006      	b.n	8004abc <HAL_GPIO_Init+0x204>
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e004      	b.n	8004abc <HAL_GPIO_Init+0x204>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e002      	b.n	8004abc <HAL_GPIO_Init+0x204>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <HAL_GPIO_Init+0x204>
 8004aba:	2300      	movs	r3, #0
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	f002 0203 	and.w	r2, r2, #3
 8004ac2:	0092      	lsls	r2, r2, #2
 8004ac4:	4093      	lsls	r3, r2
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004acc:	4935      	ldr	r1, [pc, #212]	; (8004ba4 <HAL_GPIO_Init+0x2ec>)
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	089b      	lsrs	r3, r3, #2
 8004ad2:	3302      	adds	r3, #2
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ada:	4b38      	ldr	r3, [pc, #224]	; (8004bbc <HAL_GPIO_Init+0x304>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004afe:	4a2f      	ldr	r2, [pc, #188]	; (8004bbc <HAL_GPIO_Init+0x304>)
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b04:	4b2d      	ldr	r3, [pc, #180]	; (8004bbc <HAL_GPIO_Init+0x304>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4013      	ands	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b28:	4a24      	ldr	r2, [pc, #144]	; (8004bbc <HAL_GPIO_Init+0x304>)
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b2e:	4b23      	ldr	r3, [pc, #140]	; (8004bbc <HAL_GPIO_Init+0x304>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	43db      	mvns	r3, r3
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b52:	4a1a      	ldr	r2, [pc, #104]	; (8004bbc <HAL_GPIO_Init+0x304>)
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b58:	4b18      	ldr	r3, [pc, #96]	; (8004bbc <HAL_GPIO_Init+0x304>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	43db      	mvns	r3, r3
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	4013      	ands	r3, r2
 8004b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b7c:	4a0f      	ldr	r2, [pc, #60]	; (8004bbc <HAL_GPIO_Init+0x304>)
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	3301      	adds	r3, #1
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	2b0f      	cmp	r3, #15
 8004b8c:	f67f aea2 	bls.w	80048d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b90:	bf00      	nop
 8004b92:	bf00      	nop
 8004b94:	3724      	adds	r7, #36	; 0x24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	40013800 	.word	0x40013800
 8004ba8:	40020000 	.word	0x40020000
 8004bac:	40020400 	.word	0x40020400
 8004bb0:	40020800 	.word	0x40020800
 8004bb4:	40020c00 	.word	0x40020c00
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	40013c00 	.word	0x40013c00

08004bc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	887b      	ldrh	r3, [r7, #2]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
 8004bdc:	e001      	b.n	8004be2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bde:	2300      	movs	r3, #0
 8004be0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	807b      	strh	r3, [r7, #2]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c00:	787b      	ldrb	r3, [r7, #1]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c06:	887a      	ldrh	r2, [r7, #2]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c0c:	e003      	b.n	8004c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c0e:	887b      	ldrh	r3, [r7, #2]
 8004c10:	041a      	lsls	r2, r3, #16
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	619a      	str	r2, [r3, #24]
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e267      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d075      	beq.n	8004d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c42:	4b88      	ldr	r3, [pc, #544]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 030c 	and.w	r3, r3, #12
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d00c      	beq.n	8004c68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c4e:	4b85      	ldr	r3, [pc, #532]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d112      	bne.n	8004c80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c5a:	4b82      	ldr	r3, [pc, #520]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c66:	d10b      	bne.n	8004c80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c68:	4b7e      	ldr	r3, [pc, #504]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d05b      	beq.n	8004d2c <HAL_RCC_OscConfig+0x108>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d157      	bne.n	8004d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e242      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c88:	d106      	bne.n	8004c98 <HAL_RCC_OscConfig+0x74>
 8004c8a:	4b76      	ldr	r3, [pc, #472]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a75      	ldr	r2, [pc, #468]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	e01d      	b.n	8004cd4 <HAL_RCC_OscConfig+0xb0>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ca0:	d10c      	bne.n	8004cbc <HAL_RCC_OscConfig+0x98>
 8004ca2:	4b70      	ldr	r3, [pc, #448]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a6f      	ldr	r2, [pc, #444]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	4b6d      	ldr	r3, [pc, #436]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a6c      	ldr	r2, [pc, #432]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	e00b      	b.n	8004cd4 <HAL_RCC_OscConfig+0xb0>
 8004cbc:	4b69      	ldr	r3, [pc, #420]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a68      	ldr	r2, [pc, #416]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	4b66      	ldr	r3, [pc, #408]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a65      	ldr	r2, [pc, #404]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d013      	beq.n	8004d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cdc:	f7fe fcbe 	bl	800365c <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ce4:	f7fe fcba 	bl	800365c <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	; 0x64
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e207      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf6:	4b5b      	ldr	r3, [pc, #364]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCC_OscConfig+0xc0>
 8004d02:	e014      	b.n	8004d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d04:	f7fe fcaa 	bl	800365c <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d0c:	f7fe fca6 	bl	800365c <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b64      	cmp	r3, #100	; 0x64
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e1f3      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d1e:	4b51      	ldr	r3, [pc, #324]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0xe8>
 8004d2a:	e000      	b.n	8004d2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d063      	beq.n	8004e02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d3a:	4b4a      	ldr	r3, [pc, #296]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00b      	beq.n	8004d5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d46:	4b47      	ldr	r3, [pc, #284]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d11c      	bne.n	8004d8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d52:	4b44      	ldr	r3, [pc, #272]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d116      	bne.n	8004d8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d5e:	4b41      	ldr	r3, [pc, #260]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_RCC_OscConfig+0x152>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d001      	beq.n	8004d76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e1c7      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d76:	4b3b      	ldr	r3, [pc, #236]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	4937      	ldr	r1, [pc, #220]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8a:	e03a      	b.n	8004e02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d020      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d94:	4b34      	ldr	r3, [pc, #208]	; (8004e68 <HAL_RCC_OscConfig+0x244>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9a:	f7fe fc5f 	bl	800365c <HAL_GetTick>
 8004d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da2:	f7fe fc5b 	bl	800365c <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e1a8      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db4:	4b2b      	ldr	r3, [pc, #172]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0f0      	beq.n	8004da2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc0:	4b28      	ldr	r3, [pc, #160]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	4925      	ldr	r1, [pc, #148]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	600b      	str	r3, [r1, #0]
 8004dd4:	e015      	b.n	8004e02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dd6:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <HAL_RCC_OscConfig+0x244>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ddc:	f7fe fc3e 	bl	800365c <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004de4:	f7fe fc3a 	bl	800365c <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e187      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004df6:	4b1b      	ldr	r3, [pc, #108]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f0      	bne.n	8004de4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0308 	and.w	r3, r3, #8
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d036      	beq.n	8004e7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d016      	beq.n	8004e44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e16:	4b15      	ldr	r3, [pc, #84]	; (8004e6c <HAL_RCC_OscConfig+0x248>)
 8004e18:	2201      	movs	r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1c:	f7fe fc1e 	bl	800365c <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e24:	f7fe fc1a 	bl	800365c <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e167      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e36:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <HAL_RCC_OscConfig+0x240>)
 8004e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0f0      	beq.n	8004e24 <HAL_RCC_OscConfig+0x200>
 8004e42:	e01b      	b.n	8004e7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e44:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <HAL_RCC_OscConfig+0x248>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4a:	f7fe fc07 	bl	800365c <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e50:	e00e      	b.n	8004e70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e52:	f7fe fc03 	bl	800365c <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d907      	bls.n	8004e70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e150      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
 8004e64:	40023800 	.word	0x40023800
 8004e68:	42470000 	.word	0x42470000
 8004e6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e70:	4b88      	ldr	r3, [pc, #544]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1ea      	bne.n	8004e52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 8097 	beq.w	8004fb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e8e:	4b81      	ldr	r3, [pc, #516]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10f      	bne.n	8004eba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	4b7d      	ldr	r3, [pc, #500]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	4a7c      	ldr	r2, [pc, #496]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eaa:	4b7a      	ldr	r3, [pc, #488]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb2:	60bb      	str	r3, [r7, #8]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eba:	4b77      	ldr	r3, [pc, #476]	; (8005098 <HAL_RCC_OscConfig+0x474>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d118      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ec6:	4b74      	ldr	r3, [pc, #464]	; (8005098 <HAL_RCC_OscConfig+0x474>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a73      	ldr	r2, [pc, #460]	; (8005098 <HAL_RCC_OscConfig+0x474>)
 8004ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ed2:	f7fe fbc3 	bl	800365c <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eda:	f7fe fbbf 	bl	800365c <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e10c      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eec:	4b6a      	ldr	r3, [pc, #424]	; (8005098 <HAL_RCC_OscConfig+0x474>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f0      	beq.n	8004eda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d106      	bne.n	8004f0e <HAL_RCC_OscConfig+0x2ea>
 8004f00:	4b64      	ldr	r3, [pc, #400]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f04:	4a63      	ldr	r2, [pc, #396]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f0c:	e01c      	b.n	8004f48 <HAL_RCC_OscConfig+0x324>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2b05      	cmp	r3, #5
 8004f14:	d10c      	bne.n	8004f30 <HAL_RCC_OscConfig+0x30c>
 8004f16:	4b5f      	ldr	r3, [pc, #380]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1a:	4a5e      	ldr	r2, [pc, #376]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004f1c:	f043 0304 	orr.w	r3, r3, #4
 8004f20:	6713      	str	r3, [r2, #112]	; 0x70
 8004f22:	4b5c      	ldr	r3, [pc, #368]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	4a5b      	ldr	r2, [pc, #364]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004f28:	f043 0301 	orr.w	r3, r3, #1
 8004f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2e:	e00b      	b.n	8004f48 <HAL_RCC_OscConfig+0x324>
 8004f30:	4b58      	ldr	r3, [pc, #352]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f34:	4a57      	ldr	r2, [pc, #348]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f3c:	4b55      	ldr	r3, [pc, #340]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f40:	4a54      	ldr	r2, [pc, #336]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004f42:	f023 0304 	bic.w	r3, r3, #4
 8004f46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d015      	beq.n	8004f7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f50:	f7fe fb84 	bl	800365c <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f56:	e00a      	b.n	8004f6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f58:	f7fe fb80 	bl	800365c <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e0cb      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f6e:	4b49      	ldr	r3, [pc, #292]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0ee      	beq.n	8004f58 <HAL_RCC_OscConfig+0x334>
 8004f7a:	e014      	b.n	8004fa6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f7c:	f7fe fb6e 	bl	800365c <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f82:	e00a      	b.n	8004f9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f84:	f7fe fb6a 	bl	800365c <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e0b5      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f9a:	4b3e      	ldr	r3, [pc, #248]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1ee      	bne.n	8004f84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d105      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fac:	4b39      	ldr	r3, [pc, #228]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	4a38      	ldr	r2, [pc, #224]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80a1 	beq.w	8005104 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fc2:	4b34      	ldr	r3, [pc, #208]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 030c 	and.w	r3, r3, #12
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d05c      	beq.n	8005088 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d141      	bne.n	800505a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd6:	4b31      	ldr	r3, [pc, #196]	; (800509c <HAL_RCC_OscConfig+0x478>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fdc:	f7fe fb3e 	bl	800365c <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fe fb3a 	bl	800365c <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e087      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff6:	4b27      	ldr	r3, [pc, #156]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69da      	ldr	r2, [r3, #28]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	019b      	lsls	r3, r3, #6
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	3b01      	subs	r3, #1
 800501c:	041b      	lsls	r3, r3, #16
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	061b      	lsls	r3, r3, #24
 8005026:	491b      	ldr	r1, [pc, #108]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 8005028:	4313      	orrs	r3, r2
 800502a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800502c:	4b1b      	ldr	r3, [pc, #108]	; (800509c <HAL_RCC_OscConfig+0x478>)
 800502e:	2201      	movs	r2, #1
 8005030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005032:	f7fe fb13 	bl	800365c <HAL_GetTick>
 8005036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005038:	e008      	b.n	800504c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800503a:	f7fe fb0f 	bl	800365c <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e05c      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800504c:	4b11      	ldr	r3, [pc, #68]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0f0      	beq.n	800503a <HAL_RCC_OscConfig+0x416>
 8005058:	e054      	b.n	8005104 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505a:	4b10      	ldr	r3, [pc, #64]	; (800509c <HAL_RCC_OscConfig+0x478>)
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005060:	f7fe fafc 	bl	800365c <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005068:	f7fe faf8 	bl	800365c <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e045      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507a:	4b06      	ldr	r3, [pc, #24]	; (8005094 <HAL_RCC_OscConfig+0x470>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x444>
 8005086:	e03d      	b.n	8005104 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d107      	bne.n	80050a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e038      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
 8005094:	40023800 	.word	0x40023800
 8005098:	40007000 	.word	0x40007000
 800509c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050a0:	4b1b      	ldr	r3, [pc, #108]	; (8005110 <HAL_RCC_OscConfig+0x4ec>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d028      	beq.n	8005100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d121      	bne.n	8005100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d11a      	bne.n	8005100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050d0:	4013      	ands	r3, r2
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050d8:	4293      	cmp	r3, r2
 80050da:	d111      	bne.n	8005100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e6:	085b      	lsrs	r3, r3, #1
 80050e8:	3b01      	subs	r3, #1
 80050ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d107      	bne.n	8005100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d001      	beq.n	8005104 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e000      	b.n	8005106 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40023800 	.word	0x40023800

08005114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0cc      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005128:	4b68      	ldr	r3, [pc, #416]	; (80052cc <HAL_RCC_ClockConfig+0x1b8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d90c      	bls.n	8005150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005136:	4b65      	ldr	r3, [pc, #404]	; (80052cc <HAL_RCC_ClockConfig+0x1b8>)
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800513e:	4b63      	ldr	r3, [pc, #396]	; (80052cc <HAL_RCC_ClockConfig+0x1b8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d001      	beq.n	8005150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e0b8      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d020      	beq.n	800519e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005168:	4b59      	ldr	r3, [pc, #356]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4a58      	ldr	r2, [pc, #352]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005172:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005180:	4b53      	ldr	r3, [pc, #332]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	4a52      	ldr	r2, [pc, #328]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800518a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800518c:	4b50      	ldr	r3, [pc, #320]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	494d      	ldr	r1, [pc, #308]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	4313      	orrs	r3, r2
 800519c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d044      	beq.n	8005234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d107      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b2:	4b47      	ldr	r3, [pc, #284]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d119      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e07f      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d003      	beq.n	80051d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d107      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051d2:	4b3f      	ldr	r3, [pc, #252]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e06f      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e2:	4b3b      	ldr	r3, [pc, #236]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e067      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051f2:	4b37      	ldr	r3, [pc, #220]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f023 0203 	bic.w	r2, r3, #3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	4934      	ldr	r1, [pc, #208]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005200:	4313      	orrs	r3, r2
 8005202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005204:	f7fe fa2a 	bl	800365c <HAL_GetTick>
 8005208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520a:	e00a      	b.n	8005222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800520c:	f7fe fa26 	bl	800365c <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f241 3288 	movw	r2, #5000	; 0x1388
 800521a:	4293      	cmp	r3, r2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e04f      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005222:	4b2b      	ldr	r3, [pc, #172]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 020c 	and.w	r2, r3, #12
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	429a      	cmp	r2, r3
 8005232:	d1eb      	bne.n	800520c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005234:	4b25      	ldr	r3, [pc, #148]	; (80052cc <HAL_RCC_ClockConfig+0x1b8>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d20c      	bcs.n	800525c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005242:	4b22      	ldr	r3, [pc, #136]	; (80052cc <HAL_RCC_ClockConfig+0x1b8>)
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800524a:	4b20      	ldr	r3, [pc, #128]	; (80052cc <HAL_RCC_ClockConfig+0x1b8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d001      	beq.n	800525c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e032      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d008      	beq.n	800527a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005268:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4916      	ldr	r1, [pc, #88]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	4313      	orrs	r3, r2
 8005278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d009      	beq.n	800529a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005286:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	490e      	ldr	r1, [pc, #56]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	4313      	orrs	r3, r2
 8005298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800529a:	f000 f821 	bl	80052e0 <HAL_RCC_GetSysClockFreq>
 800529e:	4602      	mov	r2, r0
 80052a0:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	490a      	ldr	r1, [pc, #40]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 80052ac:	5ccb      	ldrb	r3, [r1, r3]
 80052ae:	fa22 f303 	lsr.w	r3, r2, r3
 80052b2:	4a09      	ldr	r2, [pc, #36]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 80052b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052b6:	4b09      	ldr	r3, [pc, #36]	; (80052dc <HAL_RCC_ClockConfig+0x1c8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fe f98a 	bl	80035d4 <HAL_InitTick>

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40023c00 	.word	0x40023c00
 80052d0:	40023800 	.word	0x40023800
 80052d4:	080093f8 	.word	0x080093f8
 80052d8:	20000248 	.word	0x20000248
 80052dc:	2000024c 	.word	0x2000024c

080052e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052e4:	b094      	sub	sp, #80	; 0x50
 80052e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	647b      	str	r3, [r7, #68]	; 0x44
 80052ec:	2300      	movs	r3, #0
 80052ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f0:	2300      	movs	r3, #0
 80052f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052f8:	4b79      	ldr	r3, [pc, #484]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 030c 	and.w	r3, r3, #12
 8005300:	2b08      	cmp	r3, #8
 8005302:	d00d      	beq.n	8005320 <HAL_RCC_GetSysClockFreq+0x40>
 8005304:	2b08      	cmp	r3, #8
 8005306:	f200 80e1 	bhi.w	80054cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <HAL_RCC_GetSysClockFreq+0x34>
 800530e:	2b04      	cmp	r3, #4
 8005310:	d003      	beq.n	800531a <HAL_RCC_GetSysClockFreq+0x3a>
 8005312:	e0db      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005314:	4b73      	ldr	r3, [pc, #460]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005316:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005318:	e0db      	b.n	80054d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800531a:	4b73      	ldr	r3, [pc, #460]	; (80054e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800531c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800531e:	e0d8      	b.n	80054d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005320:	4b6f      	ldr	r3, [pc, #444]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005328:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800532a:	4b6d      	ldr	r3, [pc, #436]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d063      	beq.n	80053fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005336:	4b6a      	ldr	r3, [pc, #424]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	099b      	lsrs	r3, r3, #6
 800533c:	2200      	movs	r2, #0
 800533e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005340:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005348:	633b      	str	r3, [r7, #48]	; 0x30
 800534a:	2300      	movs	r3, #0
 800534c:	637b      	str	r3, [r7, #52]	; 0x34
 800534e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005352:	4622      	mov	r2, r4
 8005354:	462b      	mov	r3, r5
 8005356:	f04f 0000 	mov.w	r0, #0
 800535a:	f04f 0100 	mov.w	r1, #0
 800535e:	0159      	lsls	r1, r3, #5
 8005360:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005364:	0150      	lsls	r0, r2, #5
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4621      	mov	r1, r4
 800536c:	1a51      	subs	r1, r2, r1
 800536e:	6139      	str	r1, [r7, #16]
 8005370:	4629      	mov	r1, r5
 8005372:	eb63 0301 	sbc.w	r3, r3, r1
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005384:	4659      	mov	r1, fp
 8005386:	018b      	lsls	r3, r1, #6
 8005388:	4651      	mov	r1, sl
 800538a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800538e:	4651      	mov	r1, sl
 8005390:	018a      	lsls	r2, r1, #6
 8005392:	4651      	mov	r1, sl
 8005394:	ebb2 0801 	subs.w	r8, r2, r1
 8005398:	4659      	mov	r1, fp
 800539a:	eb63 0901 	sbc.w	r9, r3, r1
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053b2:	4690      	mov	r8, r2
 80053b4:	4699      	mov	r9, r3
 80053b6:	4623      	mov	r3, r4
 80053b8:	eb18 0303 	adds.w	r3, r8, r3
 80053bc:	60bb      	str	r3, [r7, #8]
 80053be:	462b      	mov	r3, r5
 80053c0:	eb49 0303 	adc.w	r3, r9, r3
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	f04f 0300 	mov.w	r3, #0
 80053ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053d2:	4629      	mov	r1, r5
 80053d4:	024b      	lsls	r3, r1, #9
 80053d6:	4621      	mov	r1, r4
 80053d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053dc:	4621      	mov	r1, r4
 80053de:	024a      	lsls	r2, r1, #9
 80053e0:	4610      	mov	r0, r2
 80053e2:	4619      	mov	r1, r3
 80053e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e6:	2200      	movs	r2, #0
 80053e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053f0:	f7fb fbd6 	bl	8000ba0 <__aeabi_uldivmod>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4613      	mov	r3, r2
 80053fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053fc:	e058      	b.n	80054b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053fe:	4b38      	ldr	r3, [pc, #224]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	099b      	lsrs	r3, r3, #6
 8005404:	2200      	movs	r2, #0
 8005406:	4618      	mov	r0, r3
 8005408:	4611      	mov	r1, r2
 800540a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800540e:	623b      	str	r3, [r7, #32]
 8005410:	2300      	movs	r3, #0
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
 8005414:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005418:	4642      	mov	r2, r8
 800541a:	464b      	mov	r3, r9
 800541c:	f04f 0000 	mov.w	r0, #0
 8005420:	f04f 0100 	mov.w	r1, #0
 8005424:	0159      	lsls	r1, r3, #5
 8005426:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800542a:	0150      	lsls	r0, r2, #5
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4641      	mov	r1, r8
 8005432:	ebb2 0a01 	subs.w	sl, r2, r1
 8005436:	4649      	mov	r1, r9
 8005438:	eb63 0b01 	sbc.w	fp, r3, r1
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005448:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800544c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005450:	ebb2 040a 	subs.w	r4, r2, sl
 8005454:	eb63 050b 	sbc.w	r5, r3, fp
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	00eb      	lsls	r3, r5, #3
 8005462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005466:	00e2      	lsls	r2, r4, #3
 8005468:	4614      	mov	r4, r2
 800546a:	461d      	mov	r5, r3
 800546c:	4643      	mov	r3, r8
 800546e:	18e3      	adds	r3, r4, r3
 8005470:	603b      	str	r3, [r7, #0]
 8005472:	464b      	mov	r3, r9
 8005474:	eb45 0303 	adc.w	r3, r5, r3
 8005478:	607b      	str	r3, [r7, #4]
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005486:	4629      	mov	r1, r5
 8005488:	028b      	lsls	r3, r1, #10
 800548a:	4621      	mov	r1, r4
 800548c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005490:	4621      	mov	r1, r4
 8005492:	028a      	lsls	r2, r1, #10
 8005494:	4610      	mov	r0, r2
 8005496:	4619      	mov	r1, r3
 8005498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800549a:	2200      	movs	r2, #0
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	61fa      	str	r2, [r7, #28]
 80054a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054a4:	f7fb fb7c 	bl	8000ba0 <__aeabi_uldivmod>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4613      	mov	r3, r2
 80054ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054b0:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	0c1b      	lsrs	r3, r3, #16
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	3301      	adds	r3, #1
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80054c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054ca:	e002      	b.n	80054d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054cc:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80054ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3750      	adds	r7, #80	; 0x50
 80054d8:	46bd      	mov	sp, r7
 80054da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054de:	bf00      	nop
 80054e0:	40023800 	.word	0x40023800
 80054e4:	00f42400 	.word	0x00f42400
 80054e8:	007a1200 	.word	0x007a1200

080054ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f0:	4b03      	ldr	r3, [pc, #12]	; (8005500 <HAL_RCC_GetHCLKFreq+0x14>)
 80054f2:	681b      	ldr	r3, [r3, #0]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20000248 	.word	0x20000248

08005504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005508:	f7ff fff0 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 800550c:	4602      	mov	r2, r0
 800550e:	4b05      	ldr	r3, [pc, #20]	; (8005524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	0a9b      	lsrs	r3, r3, #10
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	4903      	ldr	r1, [pc, #12]	; (8005528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800551a:	5ccb      	ldrb	r3, [r1, r3]
 800551c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005520:	4618      	mov	r0, r3
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40023800 	.word	0x40023800
 8005528:	08009408 	.word	0x08009408

0800552c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005530:	f7ff ffdc 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 8005534:	4602      	mov	r2, r0
 8005536:	4b05      	ldr	r3, [pc, #20]	; (800554c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	0b5b      	lsrs	r3, r3, #13
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	4903      	ldr	r1, [pc, #12]	; (8005550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005542:	5ccb      	ldrb	r3, [r1, r3]
 8005544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005548:	4618      	mov	r0, r3
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40023800 	.word	0x40023800
 8005550:	08009408 	.word	0x08009408

08005554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e04c      	b.n	8005600 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d111      	bne.n	8005596 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f001 fc02 	bl	8006d84 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005584:	2b00      	cmp	r3, #0
 8005586:	d102      	bne.n	800558e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a1f      	ldr	r2, [pc, #124]	; (8005608 <HAL_TIM_Base_Init+0xb4>)
 800558c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2202      	movs	r2, #2
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3304      	adds	r3, #4
 80055a6:	4619      	mov	r1, r3
 80055a8:	4610      	mov	r0, r2
 80055aa:	f001 f91f 	bl	80067ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	08003179 	.word	0x08003179

0800560c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	d001      	beq.n	8005624 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e03c      	b.n	800569e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1e      	ldr	r2, [pc, #120]	; (80056ac <HAL_TIM_Base_Start+0xa0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d018      	beq.n	8005668 <HAL_TIM_Base_Start+0x5c>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563e:	d013      	beq.n	8005668 <HAL_TIM_Base_Start+0x5c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1a      	ldr	r2, [pc, #104]	; (80056b0 <HAL_TIM_Base_Start+0xa4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00e      	beq.n	8005668 <HAL_TIM_Base_Start+0x5c>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a19      	ldr	r2, [pc, #100]	; (80056b4 <HAL_TIM_Base_Start+0xa8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d009      	beq.n	8005668 <HAL_TIM_Base_Start+0x5c>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <HAL_TIM_Base_Start+0xac>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d004      	beq.n	8005668 <HAL_TIM_Base_Start+0x5c>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a16      	ldr	r2, [pc, #88]	; (80056bc <HAL_TIM_Base_Start+0xb0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d111      	bne.n	800568c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b06      	cmp	r3, #6
 8005678:	d010      	beq.n	800569c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0201 	orr.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568a:	e007      	b.n	800569c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	40010000 	.word	0x40010000
 80056b0:	40000400 	.word	0x40000400
 80056b4:	40000800 	.word	0x40000800
 80056b8:	40000c00 	.word	0x40000c00
 80056bc:	40014000 	.word	0x40014000

080056c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d001      	beq.n	80056d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e044      	b.n	8005762 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a1e      	ldr	r2, [pc, #120]	; (8005770 <HAL_TIM_Base_Start_IT+0xb0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d018      	beq.n	800572c <HAL_TIM_Base_Start_IT+0x6c>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005702:	d013      	beq.n	800572c <HAL_TIM_Base_Start_IT+0x6c>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a1a      	ldr	r2, [pc, #104]	; (8005774 <HAL_TIM_Base_Start_IT+0xb4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00e      	beq.n	800572c <HAL_TIM_Base_Start_IT+0x6c>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a19      	ldr	r2, [pc, #100]	; (8005778 <HAL_TIM_Base_Start_IT+0xb8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d009      	beq.n	800572c <HAL_TIM_Base_Start_IT+0x6c>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a17      	ldr	r2, [pc, #92]	; (800577c <HAL_TIM_Base_Start_IT+0xbc>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d004      	beq.n	800572c <HAL_TIM_Base_Start_IT+0x6c>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a16      	ldr	r2, [pc, #88]	; (8005780 <HAL_TIM_Base_Start_IT+0xc0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d111      	bne.n	8005750 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b06      	cmp	r3, #6
 800573c:	d010      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0201 	orr.w	r2, r2, #1
 800574c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574e:	e007      	b.n	8005760 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0201 	orr.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40010000 	.word	0x40010000
 8005774:	40000400 	.word	0x40000400
 8005778:	40000800 	.word	0x40000800
 800577c:	40000c00 	.word	0x40000c00
 8005780:	40014000 	.word	0x40014000

08005784 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e04c      	b.n	8005830 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d111      	bne.n	80057c6 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f001 faea 	bl	8006d84 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d102      	bne.n	80057be <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a1f      	ldr	r2, [pc, #124]	; (8005838 <HAL_TIM_OC_Init+0xb4>)
 80057bc:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2202      	movs	r2, #2
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f001 f807 	bl	80067ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	0800583d 	.word	0x0800583d

0800583c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e04c      	b.n	80058fc <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d111      	bne.n	8005892 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f001 fa84 	bl	8006d84 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005880:	2b00      	cmp	r3, #0
 8005882:	d102      	bne.n	800588a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a1f      	ldr	r2, [pc, #124]	; (8005904 <HAL_TIM_PWM_Init+0xb4>)
 8005888:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2202      	movs	r2, #2
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3304      	adds	r3, #4
 80058a2:	4619      	mov	r1, r3
 80058a4:	4610      	mov	r0, r2
 80058a6:	f000 ffa1 	bl	80067ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	08003129 	.word	0x08003129

08005908 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d109      	bne.n	800592c <HAL_TIM_PWM_Start+0x24>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b01      	cmp	r3, #1
 8005922:	bf14      	ite	ne
 8005924:	2301      	movne	r3, #1
 8005926:	2300      	moveq	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	e022      	b.n	8005972 <HAL_TIM_PWM_Start+0x6a>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b04      	cmp	r3, #4
 8005930:	d109      	bne.n	8005946 <HAL_TIM_PWM_Start+0x3e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b01      	cmp	r3, #1
 800593c:	bf14      	ite	ne
 800593e:	2301      	movne	r3, #1
 8005940:	2300      	moveq	r3, #0
 8005942:	b2db      	uxtb	r3, r3
 8005944:	e015      	b.n	8005972 <HAL_TIM_PWM_Start+0x6a>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b08      	cmp	r3, #8
 800594a:	d109      	bne.n	8005960 <HAL_TIM_PWM_Start+0x58>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	bf14      	ite	ne
 8005958:	2301      	movne	r3, #1
 800595a:	2300      	moveq	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	e008      	b.n	8005972 <HAL_TIM_PWM_Start+0x6a>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	bf14      	ite	ne
 800596c:	2301      	movne	r3, #1
 800596e:	2300      	moveq	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e068      	b.n	8005a4c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d104      	bne.n	800598a <HAL_TIM_PWM_Start+0x82>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005988:	e013      	b.n	80059b2 <HAL_TIM_PWM_Start+0xaa>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b04      	cmp	r3, #4
 800598e:	d104      	bne.n	800599a <HAL_TIM_PWM_Start+0x92>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005998:	e00b      	b.n	80059b2 <HAL_TIM_PWM_Start+0xaa>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b08      	cmp	r3, #8
 800599e:	d104      	bne.n	80059aa <HAL_TIM_PWM_Start+0xa2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059a8:	e003      	b.n	80059b2 <HAL_TIM_PWM_Start+0xaa>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2202      	movs	r2, #2
 80059ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2201      	movs	r2, #1
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f001 f9bc 	bl	8006d38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a23      	ldr	r2, [pc, #140]	; (8005a54 <HAL_TIM_PWM_Start+0x14c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d107      	bne.n	80059da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1d      	ldr	r2, [pc, #116]	; (8005a54 <HAL_TIM_PWM_Start+0x14c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d018      	beq.n	8005a16 <HAL_TIM_PWM_Start+0x10e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ec:	d013      	beq.n	8005a16 <HAL_TIM_PWM_Start+0x10e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a19      	ldr	r2, [pc, #100]	; (8005a58 <HAL_TIM_PWM_Start+0x150>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00e      	beq.n	8005a16 <HAL_TIM_PWM_Start+0x10e>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a17      	ldr	r2, [pc, #92]	; (8005a5c <HAL_TIM_PWM_Start+0x154>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d009      	beq.n	8005a16 <HAL_TIM_PWM_Start+0x10e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a16      	ldr	r2, [pc, #88]	; (8005a60 <HAL_TIM_PWM_Start+0x158>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d004      	beq.n	8005a16 <HAL_TIM_PWM_Start+0x10e>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a14      	ldr	r2, [pc, #80]	; (8005a64 <HAL_TIM_PWM_Start+0x15c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d111      	bne.n	8005a3a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b06      	cmp	r3, #6
 8005a26:	d010      	beq.n	8005a4a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a38:	e007      	b.n	8005a4a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f042 0201 	orr.w	r2, r2, #1
 8005a48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40010000 	.word	0x40010000
 8005a58:	40000400 	.word	0x40000400
 8005a5c:	40000800 	.word	0x40000800
 8005a60:	40000c00 	.word	0x40000c00
 8005a64:	40014000 	.word	0x40014000

08005a68 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e04c      	b.n	8005b16 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d111      	bne.n	8005aac <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 f977 	bl	8006d84 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d102      	bne.n	8005aa4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a1f      	ldr	r2, [pc, #124]	; (8005b20 <HAL_TIM_OnePulse_Init+0xb8>)
 8005aa2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3304      	adds	r3, #4
 8005abc:	4619      	mov	r1, r3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	f000 fe94 	bl	80067ec <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0208 	bic.w	r2, r2, #8
 8005ad2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6819      	ldr	r1, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	08005b25 	.word	0x08005b25

08005b24 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b48:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b50:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b58:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b60:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d108      	bne.n	8005b7a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b68:	7bbb      	ldrb	r3, [r7, #14]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d105      	bne.n	8005b7a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b6e:	7b7b      	ldrb	r3, [r7, #13]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d102      	bne.n	8005b7a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b74:	7b3b      	ldrb	r3, [r7, #12]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d001      	beq.n	8005b7e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e03b      	b.n	8005bf6 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2202      	movs	r2, #2
 8005b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0202 	orr.w	r2, r2, #2
 8005bac:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0204 	orr.w	r2, r2, #4
 8005bbc:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 f8b6 	bl	8006d38 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	2104      	movs	r1, #4
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 f8af 	bl	8006d38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a08      	ldr	r2, [pc, #32]	; (8005c00 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d107      	bne.n	8005bf4 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bf2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40010000 	.word	0x40010000

08005c04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0a2      	b.n	8005d5e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d111      	bne.n	8005c48 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f001 f8a9 	bl	8006d84 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d102      	bne.n	8005c40 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a4a      	ldr	r2, [pc, #296]	; (8005d68 <HAL_TIM_Encoder_Init+0x164>)
 8005c3e:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c5e:	f023 0307 	bic.w	r3, r3, #7
 8005c62:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4610      	mov	r0, r2
 8005c70:	f000 fdbc 	bl	80067ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c9c:	f023 0303 	bic.w	r3, r3, #3
 8005ca0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	4313      	orrs	r3, r2
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005cba:	f023 030c 	bic.w	r3, r3, #12
 8005cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	021b      	lsls	r3, r3, #8
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	011a      	lsls	r2, r3, #4
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	031b      	lsls	r3, r3, #12
 8005cea:	4313      	orrs	r3, r2
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005cf8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005d00:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	0800323d 	.word	0x0800323d

08005d6c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d7c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d84:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d8c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d94:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d110      	bne.n	8005dbe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d102      	bne.n	8005da8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005da2:	7b7b      	ldrb	r3, [r7, #13]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d001      	beq.n	8005dac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e069      	b.n	8005e80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dbc:	e031      	b.n	8005e22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d110      	bne.n	8005de6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dc4:	7bbb      	ldrb	r3, [r7, #14]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d102      	bne.n	8005dd0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dca:	7b3b      	ldrb	r3, [r7, #12]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d001      	beq.n	8005dd4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e055      	b.n	8005e80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005de4:	e01d      	b.n	8005e22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d108      	bne.n	8005dfe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dec:	7bbb      	ldrb	r3, [r7, #14]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d105      	bne.n	8005dfe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005df2:	7b7b      	ldrb	r3, [r7, #13]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d102      	bne.n	8005dfe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005df8:	7b3b      	ldrb	r3, [r7, #12]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d001      	beq.n	8005e02 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e03e      	b.n	8005e80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2202      	movs	r2, #2
 8005e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2202      	movs	r2, #2
 8005e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <HAL_TIM_Encoder_Start+0xc4>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d008      	beq.n	8005e40 <HAL_TIM_Encoder_Start+0xd4>
 8005e2e:	e00f      	b.n	8005e50 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2201      	movs	r2, #1
 8005e36:	2100      	movs	r1, #0
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 ff7d 	bl	8006d38 <TIM_CCxChannelCmd>
      break;
 8005e3e:	e016      	b.n	8005e6e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2201      	movs	r2, #1
 8005e46:	2104      	movs	r1, #4
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 ff75 	bl	8006d38 <TIM_CCxChannelCmd>
      break;
 8005e4e:	e00e      	b.n	8005e6e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2201      	movs	r2, #1
 8005e56:	2100      	movs	r1, #0
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 ff6d 	bl	8006d38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2201      	movs	r2, #1
 8005e64:	2104      	movs	r1, #4
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 ff66 	bl	8006d38 <TIM_CCxChannelCmd>
      break;
 8005e6c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0201 	orr.w	r2, r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d128      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d121      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f06f 0202 	mvn.w	r2, #2
 8005eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	4798      	blx	r3
 8005ed4:	e009      	b.n	8005eea <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d128      	bne.n	8005f50 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b04      	cmp	r3, #4
 8005f0a:	d121      	bne.n	8005f50 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0204 	mvn.w	r2, #4
 8005f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d005      	beq.n	8005f36 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
 8005f34:	e009      	b.n	8005f4a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d128      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d121      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0208 	mvn.w	r2, #8
 8005f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2204      	movs	r2, #4
 8005f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d005      	beq.n	8005f96 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	4798      	blx	r3
 8005f94:	e009      	b.n	8005faa <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	2b10      	cmp	r3, #16
 8005fbc:	d128      	bne.n	8006010 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f003 0310 	and.w	r3, r3, #16
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d121      	bne.n	8006010 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0210 	mvn.w	r2, #16
 8005fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2208      	movs	r2, #8
 8005fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d005      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	4798      	blx	r3
 8005ff4:	e009      	b.n	800600a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b01      	cmp	r3, #1
 800601c:	d110      	bne.n	8006040 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b01      	cmp	r3, #1
 800602a:	d109      	bne.n	8006040 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0201 	mvn.w	r2, #1
 8006034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604a:	2b80      	cmp	r3, #128	; 0x80
 800604c:	d110      	bne.n	8006070 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006058:	2b80      	cmp	r3, #128	; 0x80
 800605a:	d109      	bne.n	8006070 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607a:	2b40      	cmp	r3, #64	; 0x40
 800607c:	d110      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d109      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	d110      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b20      	cmp	r3, #32
 80060ba:	d109      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f06f 0220 	mvn.w	r2, #32
 80060c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e048      	b.n	8006188 <HAL_TIM_OC_ConfigChannel+0xb0>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b0c      	cmp	r3, #12
 8006102:	d839      	bhi.n	8006178 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006104:	a201      	add	r2, pc, #4	; (adr r2, 800610c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	08006141 	.word	0x08006141
 8006110:	08006179 	.word	0x08006179
 8006114:	08006179 	.word	0x08006179
 8006118:	08006179 	.word	0x08006179
 800611c:	0800614f 	.word	0x0800614f
 8006120:	08006179 	.word	0x08006179
 8006124:	08006179 	.word	0x08006179
 8006128:	08006179 	.word	0x08006179
 800612c:	0800615d 	.word	0x0800615d
 8006130:	08006179 	.word	0x08006179
 8006134:	08006179 	.word	0x08006179
 8006138:	08006179 	.word	0x08006179
 800613c:	0800616b 	.word	0x0800616b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68b9      	ldr	r1, [r7, #8]
 8006146:	4618      	mov	r0, r3
 8006148:	f000 fbd0 	bl	80068ec <TIM_OC1_SetConfig>
      break;
 800614c:	e017      	b.n	800617e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fc2f 	bl	80069b8 <TIM_OC2_SetConfig>
      break;
 800615a:	e010      	b.n	800617e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68b9      	ldr	r1, [r7, #8]
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fc94 	bl	8006a90 <TIM_OC3_SetConfig>
      break;
 8006168:	e009      	b.n	800617e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	4618      	mov	r0, r3
 8006172:	f000 fcf7 	bl	8006b64 <TIM_OC4_SetConfig>
      break;
 8006176:	e002      	b.n	800617e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	75fb      	strb	r3, [r7, #23]
      break;
 800617c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006186:	7dfb      	ldrb	r3, [r7, #23]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061aa:	2302      	movs	r3, #2
 80061ac:	e0ae      	b.n	800630c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b0c      	cmp	r3, #12
 80061ba:	f200 809f 	bhi.w	80062fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	080061f9 	.word	0x080061f9
 80061c8:	080062fd 	.word	0x080062fd
 80061cc:	080062fd 	.word	0x080062fd
 80061d0:	080062fd 	.word	0x080062fd
 80061d4:	08006239 	.word	0x08006239
 80061d8:	080062fd 	.word	0x080062fd
 80061dc:	080062fd 	.word	0x080062fd
 80061e0:	080062fd 	.word	0x080062fd
 80061e4:	0800627b 	.word	0x0800627b
 80061e8:	080062fd 	.word	0x080062fd
 80061ec:	080062fd 	.word	0x080062fd
 80061f0:	080062fd 	.word	0x080062fd
 80061f4:	080062bb 	.word	0x080062bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68b9      	ldr	r1, [r7, #8]
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fb74 	bl	80068ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699a      	ldr	r2, [r3, #24]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0208 	orr.w	r2, r2, #8
 8006212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0204 	bic.w	r2, r2, #4
 8006222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6999      	ldr	r1, [r3, #24]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	619a      	str	r2, [r3, #24]
      break;
 8006236:	e064      	b.n	8006302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	4618      	mov	r0, r3
 8006240:	f000 fbba 	bl	80069b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699a      	ldr	r2, [r3, #24]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699a      	ldr	r2, [r3, #24]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6999      	ldr	r1, [r3, #24]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	021a      	lsls	r2, r3, #8
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	619a      	str	r2, [r3, #24]
      break;
 8006278:	e043      	b.n	8006302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68b9      	ldr	r1, [r7, #8]
 8006280:	4618      	mov	r0, r3
 8006282:	f000 fc05 	bl	8006a90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69da      	ldr	r2, [r3, #28]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f042 0208 	orr.w	r2, r2, #8
 8006294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69da      	ldr	r2, [r3, #28]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0204 	bic.w	r2, r2, #4
 80062a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69d9      	ldr	r1, [r3, #28]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	691a      	ldr	r2, [r3, #16]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	61da      	str	r2, [r3, #28]
      break;
 80062b8:	e023      	b.n	8006302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68b9      	ldr	r1, [r7, #8]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 fc4f 	bl	8006b64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69da      	ldr	r2, [r3, #28]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69da      	ldr	r2, [r3, #28]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69d9      	ldr	r1, [r3, #28]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	021a      	lsls	r2, r3, #8
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	61da      	str	r2, [r3, #28]
      break;
 80062fa:	e002      	b.n	8006302 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006300:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800630a:	7dfb      	ldrb	r3, [r7, #23]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_TIM_ConfigClockSource+0x1c>
 800632c:	2302      	movs	r3, #2
 800632e:	e0b4      	b.n	800649a <HAL_TIM_ConfigClockSource+0x186>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800634e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006368:	d03e      	beq.n	80063e8 <HAL_TIM_ConfigClockSource+0xd4>
 800636a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800636e:	f200 8087 	bhi.w	8006480 <HAL_TIM_ConfigClockSource+0x16c>
 8006372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006376:	f000 8086 	beq.w	8006486 <HAL_TIM_ConfigClockSource+0x172>
 800637a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800637e:	d87f      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x16c>
 8006380:	2b70      	cmp	r3, #112	; 0x70
 8006382:	d01a      	beq.n	80063ba <HAL_TIM_ConfigClockSource+0xa6>
 8006384:	2b70      	cmp	r3, #112	; 0x70
 8006386:	d87b      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x16c>
 8006388:	2b60      	cmp	r3, #96	; 0x60
 800638a:	d050      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x11a>
 800638c:	2b60      	cmp	r3, #96	; 0x60
 800638e:	d877      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x16c>
 8006390:	2b50      	cmp	r3, #80	; 0x50
 8006392:	d03c      	beq.n	800640e <HAL_TIM_ConfigClockSource+0xfa>
 8006394:	2b50      	cmp	r3, #80	; 0x50
 8006396:	d873      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x16c>
 8006398:	2b40      	cmp	r3, #64	; 0x40
 800639a:	d058      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x13a>
 800639c:	2b40      	cmp	r3, #64	; 0x40
 800639e:	d86f      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x16c>
 80063a0:	2b30      	cmp	r3, #48	; 0x30
 80063a2:	d064      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x15a>
 80063a4:	2b30      	cmp	r3, #48	; 0x30
 80063a6:	d86b      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x16c>
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d060      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x15a>
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d867      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x16c>
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d05c      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x15a>
 80063b4:	2b10      	cmp	r3, #16
 80063b6:	d05a      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x15a>
 80063b8:	e062      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6818      	ldr	r0, [r3, #0]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	6899      	ldr	r1, [r3, #8]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f000 fc95 	bl	8006cf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	609a      	str	r2, [r3, #8]
      break;
 80063e6:	e04f      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6818      	ldr	r0, [r3, #0]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	6899      	ldr	r1, [r3, #8]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f000 fc7e 	bl	8006cf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800640a:	609a      	str	r2, [r3, #8]
      break;
 800640c:	e03c      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6859      	ldr	r1, [r3, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	461a      	mov	r2, r3
 800641c:	f000 fbf2 	bl	8006c04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2150      	movs	r1, #80	; 0x50
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fc4b 	bl	8006cc2 <TIM_ITRx_SetConfig>
      break;
 800642c:	e02c      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6859      	ldr	r1, [r3, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	461a      	mov	r2, r3
 800643c:	f000 fc11 	bl	8006c62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2160      	movs	r1, #96	; 0x60
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fc3b 	bl	8006cc2 <TIM_ITRx_SetConfig>
      break;
 800644c:	e01c      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6859      	ldr	r1, [r3, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	461a      	mov	r2, r3
 800645c:	f000 fbd2 	bl	8006c04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2140      	movs	r1, #64	; 0x40
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fc2b 	bl	8006cc2 <TIM_ITRx_SetConfig>
      break;
 800646c:	e00c      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4619      	mov	r1, r3
 8006478:	4610      	mov	r0, r2
 800647a:	f000 fc22 	bl	8006cc2 <TIM_ITRx_SetConfig>
      break;
 800647e:	e003      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	73fb      	strb	r3, [r7, #15]
      break;
 8006484:	e000      	b.n	8006488 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80064aa:	bf00      	nop
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064be:	bf00      	nop
 80064c0:	370c      	adds	r7, #12
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b083      	sub	sp, #12
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064fa:	bf00      	nop
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800651a:	b480      	push	{r7}
 800651c:	b083      	sub	sp, #12
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006542:	b480      	push	{r7}
 8006544:	b083      	sub	sp, #12
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800654a:	bf00      	nop
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	460b      	mov	r3, r1
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e135      	b.n	80067e0 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800657a:	2b01      	cmp	r3, #1
 800657c:	d101      	bne.n	8006582 <HAL_TIM_RegisterCallback+0x2a>
 800657e:	2302      	movs	r3, #2
 8006580:	e12e      	b.n	80067e0 <HAL_TIM_RegisterCallback+0x288>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b01      	cmp	r3, #1
 8006594:	f040 80ba 	bne.w	800670c <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8006598:	7afb      	ldrb	r3, [r7, #11]
 800659a:	2b1a      	cmp	r3, #26
 800659c:	f200 80b3 	bhi.w	8006706 <HAL_TIM_RegisterCallback+0x1ae>
 80065a0:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <HAL_TIM_RegisterCallback+0x50>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	08006615 	.word	0x08006615
 80065ac:	0800661d 	.word	0x0800661d
 80065b0:	08006625 	.word	0x08006625
 80065b4:	0800662d 	.word	0x0800662d
 80065b8:	08006635 	.word	0x08006635
 80065bc:	0800663d 	.word	0x0800663d
 80065c0:	08006645 	.word	0x08006645
 80065c4:	0800664d 	.word	0x0800664d
 80065c8:	08006655 	.word	0x08006655
 80065cc:	0800665d 	.word	0x0800665d
 80065d0:	08006665 	.word	0x08006665
 80065d4:	0800666d 	.word	0x0800666d
 80065d8:	08006675 	.word	0x08006675
 80065dc:	0800667d 	.word	0x0800667d
 80065e0:	08006685 	.word	0x08006685
 80065e4:	0800668f 	.word	0x0800668f
 80065e8:	08006699 	.word	0x08006699
 80065ec:	080066a3 	.word	0x080066a3
 80065f0:	080066ad 	.word	0x080066ad
 80065f4:	080066b7 	.word	0x080066b7
 80065f8:	080066c1 	.word	0x080066c1
 80065fc:	080066cb 	.word	0x080066cb
 8006600:	080066d5 	.word	0x080066d5
 8006604:	080066df 	.word	0x080066df
 8006608:	080066e9 	.word	0x080066e9
 800660c:	080066f3 	.word	0x080066f3
 8006610:	080066fd 	.word	0x080066fd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800661a:	e0dc      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006622:	e0d8      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800662a:	e0d4      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006632:	e0d0      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800663a:	e0cc      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006642:	e0c8      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800664a:	e0c4      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006652:	e0c0      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800665a:	e0bc      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006662:	e0b8      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800666a:	e0b4      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006672:	e0b0      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800667a:	e0ac      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006682:	e0a8      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800668c:	e0a3      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8006696:	e09e      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80066a0:	e099      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80066aa:	e094      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 80066b4:	e08f      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80066be:	e08a      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80066c8:	e085      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80066d2:	e080      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80066dc:	e07b      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80066e6:	e076      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80066f0:	e071      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80066fa:	e06c      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8006704:	e067      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	75fb      	strb	r3, [r7, #23]
        break;
 800670a:	e064      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d15c      	bne.n	80067d2 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8006718:	7afb      	ldrb	r3, [r7, #11]
 800671a:	2b0d      	cmp	r3, #13
 800671c:	d856      	bhi.n	80067cc <HAL_TIM_RegisterCallback+0x274>
 800671e:	a201      	add	r2, pc, #4	; (adr r2, 8006724 <HAL_TIM_RegisterCallback+0x1cc>)
 8006720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006724:	0800675d 	.word	0x0800675d
 8006728:	08006765 	.word	0x08006765
 800672c:	0800676d 	.word	0x0800676d
 8006730:	08006775 	.word	0x08006775
 8006734:	0800677d 	.word	0x0800677d
 8006738:	08006785 	.word	0x08006785
 800673c:	0800678d 	.word	0x0800678d
 8006740:	08006795 	.word	0x08006795
 8006744:	0800679d 	.word	0x0800679d
 8006748:	080067a5 	.word	0x080067a5
 800674c:	080067ad 	.word	0x080067ad
 8006750:	080067b5 	.word	0x080067b5
 8006754:	080067bd 	.word	0x080067bd
 8006758:	080067c5 	.word	0x080067c5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006762:	e038      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800676a:	e034      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006772:	e030      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800677a:	e02c      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006782:	e028      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800678a:	e024      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006792:	e020      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800679a:	e01c      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80067a2:	e018      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80067aa:	e014      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80067b2:	e010      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80067ba:	e00c      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80067c2:	e008      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80067ca:	e004      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	75fb      	strb	r3, [r7, #23]
        break;
 80067d0:	e001      	b.n	80067d6 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067de:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	371c      	adds	r7, #28
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a34      	ldr	r2, [pc, #208]	; (80068d0 <TIM_Base_SetConfig+0xe4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d00f      	beq.n	8006824 <TIM_Base_SetConfig+0x38>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800680a:	d00b      	beq.n	8006824 <TIM_Base_SetConfig+0x38>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a31      	ldr	r2, [pc, #196]	; (80068d4 <TIM_Base_SetConfig+0xe8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d007      	beq.n	8006824 <TIM_Base_SetConfig+0x38>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a30      	ldr	r2, [pc, #192]	; (80068d8 <TIM_Base_SetConfig+0xec>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d003      	beq.n	8006824 <TIM_Base_SetConfig+0x38>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a2f      	ldr	r2, [pc, #188]	; (80068dc <TIM_Base_SetConfig+0xf0>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d108      	bne.n	8006836 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	4313      	orrs	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a25      	ldr	r2, [pc, #148]	; (80068d0 <TIM_Base_SetConfig+0xe4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d01b      	beq.n	8006876 <TIM_Base_SetConfig+0x8a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006844:	d017      	beq.n	8006876 <TIM_Base_SetConfig+0x8a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a22      	ldr	r2, [pc, #136]	; (80068d4 <TIM_Base_SetConfig+0xe8>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d013      	beq.n	8006876 <TIM_Base_SetConfig+0x8a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a21      	ldr	r2, [pc, #132]	; (80068d8 <TIM_Base_SetConfig+0xec>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d00f      	beq.n	8006876 <TIM_Base_SetConfig+0x8a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a20      	ldr	r2, [pc, #128]	; (80068dc <TIM_Base_SetConfig+0xf0>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d00b      	beq.n	8006876 <TIM_Base_SetConfig+0x8a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a1f      	ldr	r2, [pc, #124]	; (80068e0 <TIM_Base_SetConfig+0xf4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d007      	beq.n	8006876 <TIM_Base_SetConfig+0x8a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a1e      	ldr	r2, [pc, #120]	; (80068e4 <TIM_Base_SetConfig+0xf8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d003      	beq.n	8006876 <TIM_Base_SetConfig+0x8a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a1d      	ldr	r2, [pc, #116]	; (80068e8 <TIM_Base_SetConfig+0xfc>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d108      	bne.n	8006888 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800687c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a08      	ldr	r2, [pc, #32]	; (80068d0 <TIM_Base_SetConfig+0xe4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d103      	bne.n	80068bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	691a      	ldr	r2, [r3, #16]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	615a      	str	r2, [r3, #20]
}
 80068c2:	bf00      	nop
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40010000 	.word	0x40010000
 80068d4:	40000400 	.word	0x40000400
 80068d8:	40000800 	.word	0x40000800
 80068dc:	40000c00 	.word	0x40000c00
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40014400 	.word	0x40014400
 80068e8:	40014800 	.word	0x40014800

080068ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f023 0201 	bic.w	r2, r3, #1
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0303 	bic.w	r3, r3, #3
 8006922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f023 0302 	bic.w	r3, r3, #2
 8006934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <TIM_OC1_SetConfig+0xc8>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d10c      	bne.n	8006962 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f023 0308 	bic.w	r3, r3, #8
 800694e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f023 0304 	bic.w	r3, r3, #4
 8006960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a13      	ldr	r2, [pc, #76]	; (80069b4 <TIM_OC1_SetConfig+0xc8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d111      	bne.n	800698e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4313      	orrs	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	621a      	str	r2, [r3, #32]
}
 80069a8:	bf00      	nop
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	40010000 	.word	0x40010000

080069b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	f023 0210 	bic.w	r2, r3, #16
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	021b      	lsls	r3, r3, #8
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f023 0320 	bic.w	r3, r3, #32
 8006a02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	011b      	lsls	r3, r3, #4
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a1e      	ldr	r2, [pc, #120]	; (8006a8c <TIM_OC2_SetConfig+0xd4>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d10d      	bne.n	8006a34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a15      	ldr	r2, [pc, #84]	; (8006a8c <TIM_OC2_SetConfig+0xd4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d113      	bne.n	8006a64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	40010000 	.word	0x40010000

08006a90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0303 	bic.w	r3, r3, #3
 8006ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a1d      	ldr	r2, [pc, #116]	; (8006b60 <TIM_OC3_SetConfig+0xd0>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d10d      	bne.n	8006b0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006af4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	021b      	lsls	r3, r3, #8
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a14      	ldr	r2, [pc, #80]	; (8006b60 <TIM_OC3_SetConfig+0xd0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d113      	bne.n	8006b3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	621a      	str	r2, [r3, #32]
}
 8006b54:	bf00      	nop
 8006b56:	371c      	adds	r7, #28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	40010000 	.word	0x40010000

08006b64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	031b      	lsls	r3, r3, #12
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a10      	ldr	r2, [pc, #64]	; (8006c00 <TIM_OC4_SetConfig+0x9c>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d109      	bne.n	8006bd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	019b      	lsls	r3, r3, #6
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	621a      	str	r2, [r3, #32]
}
 8006bf2:	bf00      	nop
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	40010000 	.word	0x40010000

08006c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	f023 0201 	bic.w	r2, r3, #1
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f023 030a 	bic.w	r3, r3, #10
 8006c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	621a      	str	r2, [r3, #32]
}
 8006c56:	bf00      	nop
 8006c58:	371c      	adds	r7, #28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b087      	sub	sp, #28
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60f8      	str	r0, [r7, #12]
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	f023 0210 	bic.w	r2, r3, #16
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	031b      	lsls	r3, r3, #12
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	011b      	lsls	r3, r3, #4
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f043 0307 	orr.w	r3, r3, #7
 8006ce4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	609a      	str	r2, [r3, #8]
}
 8006cec:	bf00      	nop
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
 8006d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	021a      	lsls	r2, r3, #8
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	609a      	str	r2, [r3, #8]
}
 8006d2c:	bf00      	nop
 8006d2e:	371c      	adds	r7, #28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f003 031f 	and.w	r3, r3, #31
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a1a      	ldr	r2, [r3, #32]
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	401a      	ands	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a1a      	ldr	r2, [r3, #32]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f003 031f 	and.w	r3, r3, #31
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d70:	431a      	orrs	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	621a      	str	r2, [r3, #32]
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
	...

08006d84 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a1c      	ldr	r2, [pc, #112]	; (8006e00 <TIM_ResetCallback+0x7c>)
 8006d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a1b      	ldr	r2, [pc, #108]	; (8006e04 <TIM_ResetCallback+0x80>)
 8006d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a1a      	ldr	r2, [pc, #104]	; (8006e08 <TIM_ResetCallback+0x84>)
 8006da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a19      	ldr	r2, [pc, #100]	; (8006e0c <TIM_ResetCallback+0x88>)
 8006da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a18      	ldr	r2, [pc, #96]	; (8006e10 <TIM_ResetCallback+0x8c>)
 8006db0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a17      	ldr	r2, [pc, #92]	; (8006e14 <TIM_ResetCallback+0x90>)
 8006db8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a16      	ldr	r2, [pc, #88]	; (8006e18 <TIM_ResetCallback+0x94>)
 8006dc0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a15      	ldr	r2, [pc, #84]	; (8006e1c <TIM_ResetCallback+0x98>)
 8006dc8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a14      	ldr	r2, [pc, #80]	; (8006e20 <TIM_ResetCallback+0x9c>)
 8006dd0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a13      	ldr	r2, [pc, #76]	; (8006e24 <TIM_ResetCallback+0xa0>)
 8006dd8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a12      	ldr	r2, [pc, #72]	; (8006e28 <TIM_ResetCallback+0xa4>)
 8006de0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a11      	ldr	r2, [pc, #68]	; (8006e2c <TIM_ResetCallback+0xa8>)
 8006de8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a10      	ldr	r2, [pc, #64]	; (8006e30 <TIM_ResetCallback+0xac>)
 8006df0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	08001d79 	.word	0x08001d79
 8006e04:	080064a3 	.word	0x080064a3
 8006e08:	0800651b 	.word	0x0800651b
 8006e0c:	0800652f 	.word	0x0800652f
 8006e10:	080064cb 	.word	0x080064cb
 8006e14:	080064df 	.word	0x080064df
 8006e18:	080064b7 	.word	0x080064b7
 8006e1c:	080064f3 	.word	0x080064f3
 8006e20:	08006507 	.word	0x08006507
 8006e24:	08006543 	.word	0x08006543
 8006e28:	08006fb5 	.word	0x08006fb5
 8006e2c:	08006fc9 	.word	0x08006fc9
 8006e30:	08006fdd 	.word	0x08006fdd

08006e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d101      	bne.n	8006e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	e050      	b.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a1c      	ldr	r2, [pc, #112]	; (8006efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d018      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e98:	d013      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a18      	ldr	r2, [pc, #96]	; (8006f00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00e      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a16      	ldr	r2, [pc, #88]	; (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d009      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a15      	ldr	r2, [pc, #84]	; (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d004      	beq.n	8006ec2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a13      	ldr	r2, [pc, #76]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d10c      	bne.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	40010000 	.word	0x40010000
 8006f00:	40000400 	.word	0x40000400
 8006f04:	40000800 	.word	0x40000800
 8006f08:	40000c00 	.word	0x40000c00
 8006f0c:	40014000 	.word	0x40014000

08006f10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d101      	bne.n	8006f2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e03d      	b.n	8006fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e04a      	b.n	8007098 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d111      	bne.n	8007032 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fd2c 	bl	8007a74 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007020:	2b00      	cmp	r3, #0
 8007022:	d102      	bne.n	800702a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a1e      	ldr	r2, [pc, #120]	; (80070a0 <HAL_UART_Init+0xb0>)
 8007028:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2224      	movs	r2, #36	; 0x24
 8007036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007048:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fff6 	bl	800803c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	691a      	ldr	r2, [r3, #16]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800705e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	695a      	ldr	r2, [r3, #20]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800706e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68da      	ldr	r2, [r3, #12]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800707e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2220      	movs	r2, #32
 8007092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	08003341 	.word	0x08003341

080070a4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	460b      	mov	r3, r1
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d107      	bne.n	80070cc <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c0:	f043 0220 	orr.w	r2, r3, #32
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e08c      	b.n	80071e6 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d101      	bne.n	80070da <HAL_UART_RegisterCallback+0x36>
 80070d6:	2302      	movs	r3, #2
 80070d8:	e085      	b.n	80071e6 <HAL_UART_RegisterCallback+0x142>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b20      	cmp	r3, #32
 80070ec:	d151      	bne.n	8007192 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 80070ee:	7afb      	ldrb	r3, [r7, #11]
 80070f0:	2b0c      	cmp	r3, #12
 80070f2:	d845      	bhi.n	8007180 <HAL_UART_RegisterCallback+0xdc>
 80070f4:	a201      	add	r2, pc, #4	; (adr r2, 80070fc <HAL_UART_RegisterCallback+0x58>)
 80070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	08007131 	.word	0x08007131
 8007100:	08007139 	.word	0x08007139
 8007104:	08007141 	.word	0x08007141
 8007108:	08007149 	.word	0x08007149
 800710c:	08007151 	.word	0x08007151
 8007110:	08007159 	.word	0x08007159
 8007114:	08007161 	.word	0x08007161
 8007118:	08007169 	.word	0x08007169
 800711c:	08007181 	.word	0x08007181
 8007120:	08007181 	.word	0x08007181
 8007124:	08007181 	.word	0x08007181
 8007128:	08007171 	.word	0x08007171
 800712c:	08007179 	.word	0x08007179
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8007136:	e051      	b.n	80071dc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800713e:	e04d      	b.n	80071dc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007146:	e049      	b.n	80071dc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800714e:	e045      	b.n	80071dc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007156:	e041      	b.n	80071dc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800715e:	e03d      	b.n	80071dc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007166:	e039      	b.n	80071dc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800716e:	e035      	b.n	80071dc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007176:	e031      	b.n	80071dc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800717e:	e02d      	b.n	80071dc <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007184:	f043 0220 	orr.w	r2, r3, #32
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	75fb      	strb	r3, [r7, #23]
        break;
 8007190:	e024      	b.n	80071dc <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d116      	bne.n	80071cc <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800719e:	7afb      	ldrb	r3, [r7, #11]
 80071a0:	2b0b      	cmp	r3, #11
 80071a2:	d002      	beq.n	80071aa <HAL_UART_RegisterCallback+0x106>
 80071a4:	2b0c      	cmp	r3, #12
 80071a6:	d004      	beq.n	80071b2 <HAL_UART_RegisterCallback+0x10e>
 80071a8:	e007      	b.n	80071ba <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80071b0:	e014      	b.n	80071dc <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80071b8:	e010      	b.n	80071dc <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f043 0220 	orr.w	r2, r3, #32
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	75fb      	strb	r3, [r7, #23]
        break;
 80071ca:	e007      	b.n	80071dc <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d0:	f043 0220 	orr.w	r2, r3, #32
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop

080071f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	4613      	mov	r3, r2
 8007200:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b20      	cmp	r3, #32
 800720c:	d11d      	bne.n	800724a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <HAL_UART_Receive_IT+0x26>
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e016      	b.n	800724c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_UART_Receive_IT+0x38>
 8007228:	2302      	movs	r3, #2
 800722a:	e00f      	b.n	800724c <HAL_UART_Receive_IT+0x58>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	461a      	mov	r2, r3
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 fcf7 	bl	8007c34 <UART_Start_Receive_IT>
 8007246:	4603      	mov	r3, r0
 8007248:	e000      	b.n	800724c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800724a:	2302      	movs	r3, #2
  }
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b08c      	sub	sp, #48	; 0x30
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	4613      	mov	r3, r2
 8007260:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b20      	cmp	r3, #32
 800726c:	d165      	bne.n	800733a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <HAL_UART_Transmit_DMA+0x26>
 8007274:	88fb      	ldrh	r3, [r7, #6]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e05e      	b.n	800733c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007284:	2b01      	cmp	r3, #1
 8007286:	d101      	bne.n	800728c <HAL_UART_Transmit_DMA+0x38>
 8007288:	2302      	movs	r3, #2
 800728a:	e057      	b.n	800733c <HAL_UART_Transmit_DMA+0xe8>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	88fa      	ldrh	r2, [r7, #6]
 800729e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	88fa      	ldrh	r2, [r7, #6]
 80072a4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2221      	movs	r2, #33	; 0x21
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b8:	4a22      	ldr	r2, [pc, #136]	; (8007344 <HAL_UART_Transmit_DMA+0xf0>)
 80072ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c0:	4a21      	ldr	r2, [pc, #132]	; (8007348 <HAL_UART_Transmit_DMA+0xf4>)
 80072c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c8:	4a20      	ldr	r2, [pc, #128]	; (800734c <HAL_UART_Transmit_DMA+0xf8>)
 80072ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d0:	2200      	movs	r2, #0
 80072d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80072d4:	f107 0308 	add.w	r3, r7, #8
 80072d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80072de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e0:	6819      	ldr	r1, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3304      	adds	r3, #4
 80072e8:	461a      	mov	r2, r3
 80072ea:	88fb      	ldrh	r3, [r7, #6]
 80072ec:	f7fc ff84 	bl	80041f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072f8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3314      	adds	r3, #20
 8007308:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	617b      	str	r3, [r7, #20]
   return(result);
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007318:	62bb      	str	r3, [r7, #40]	; 0x28
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3314      	adds	r3, #20
 8007320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007322:	627a      	str	r2, [r7, #36]	; 0x24
 8007324:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	6a39      	ldr	r1, [r7, #32]
 8007328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e5      	bne.n	8007302 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	e000      	b.n	800733c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800733a:	2302      	movs	r3, #2
  }
}
 800733c:	4618      	mov	r0, r3
 800733e:	3730      	adds	r7, #48	; 0x30
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	08007ae5 	.word	0x08007ae5
 8007348:	08007b81 	.word	0x08007b81
 800734c:	08007b9f 	.word	0x08007b9f

08007350 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b09a      	sub	sp, #104	; 0x68
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	330c      	adds	r3, #12
 800735e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007362:	e853 3f00 	ldrex	r3, [r3]
 8007366:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800736a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800736e:	667b      	str	r3, [r7, #100]	; 0x64
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	330c      	adds	r3, #12
 8007376:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007378:	657a      	str	r2, [r7, #84]	; 0x54
 800737a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800737e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007380:	e841 2300 	strex	r3, r2, [r1]
 8007384:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e5      	bne.n	8007358 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3314      	adds	r3, #20
 8007392:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	f023 0301 	bic.w	r3, r3, #1
 80073a2:	663b      	str	r3, [r7, #96]	; 0x60
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3314      	adds	r3, #20
 80073aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073ac:	643a      	str	r2, [r7, #64]	; 0x40
 80073ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e5      	bne.n	800738c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d119      	bne.n	80073fc <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	330c      	adds	r3, #12
 80073ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	e853 3f00 	ldrex	r3, [r3]
 80073d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	f023 0310 	bic.w	r3, r3, #16
 80073de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	330c      	adds	r3, #12
 80073e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073f0:	e841 2300 	strex	r3, r2, [r1]
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1e5      	bne.n	80073c8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007406:	2b40      	cmp	r3, #64	; 0x40
 8007408:	d136      	bne.n	8007478 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3314      	adds	r3, #20
 8007410:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	60bb      	str	r3, [r7, #8]
   return(result);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007420:	65bb      	str	r3, [r7, #88]	; 0x58
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3314      	adds	r3, #20
 8007428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800742a:	61ba      	str	r2, [r7, #24]
 800742c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742e:	6979      	ldr	r1, [r7, #20]
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	613b      	str	r3, [r7, #16]
   return(result);
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e5      	bne.n	800740a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007442:	2b00      	cmp	r3, #0
 8007444:	d018      	beq.n	8007478 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744a:	2200      	movs	r2, #0
 800744c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007452:	4618      	mov	r0, r3
 8007454:	f7fc ff28 	bl	80042a8 <HAL_DMA_Abort>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00c      	beq.n	8007478 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007462:	4618      	mov	r0, r3
 8007464:	f7fd f93c 	bl	80046e0 <HAL_DMA_GetError>
 8007468:	4603      	mov	r3, r0
 800746a:	2b20      	cmp	r3, #32
 800746c:	d104      	bne.n	8007478 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2210      	movs	r2, #16
 8007472:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e00a      	b.n	800748e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2220      	movs	r2, #32
 8007482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3768      	adds	r7, #104	; 0x68
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b0ba      	sub	sp, #232	; 0xe8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80074be:	2300      	movs	r3, #0
 80074c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ce:	f003 030f 	and.w	r3, r3, #15
 80074d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80074d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10f      	bne.n	80074fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d009      	beq.n	80074fe <HAL_UART_IRQHandler+0x66>
 80074ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fce3 	bl	8007ec2 <UART_Receive_IT>
      return;
 80074fc:	e25b      	b.n	80079b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80074fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 80e1 	beq.w	80076ca <HAL_UART_IRQHandler+0x232>
 8007508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d106      	bne.n	8007522 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007518:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 80d4 	beq.w	80076ca <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00b      	beq.n	8007546 <HAL_UART_IRQHandler+0xae>
 800752e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007536:	2b00      	cmp	r3, #0
 8007538:	d005      	beq.n	8007546 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	f043 0201 	orr.w	r2, r3, #1
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800754a:	f003 0304 	and.w	r3, r3, #4
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00b      	beq.n	800756a <HAL_UART_IRQHandler+0xd2>
 8007552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	d005      	beq.n	800756a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	f043 0202 	orr.w	r2, r3, #2
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800756a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00b      	beq.n	800758e <HAL_UART_IRQHandler+0xf6>
 8007576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d005      	beq.n	800758e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	f043 0204 	orr.w	r2, r3, #4
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800758e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007592:	f003 0308 	and.w	r3, r3, #8
 8007596:	2b00      	cmp	r3, #0
 8007598:	d011      	beq.n	80075be <HAL_UART_IRQHandler+0x126>
 800759a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800759e:	f003 0320 	and.w	r3, r3, #32
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d105      	bne.n	80075b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80075a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d005      	beq.n	80075be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	f043 0208 	orr.w	r2, r3, #8
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 81f2 	beq.w	80079ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d008      	beq.n	80075e6 <HAL_UART_IRQHandler+0x14e>
 80075d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d8:	f003 0320 	and.w	r3, r3, #32
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fc6e 	bl	8007ec2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f0:	2b40      	cmp	r3, #64	; 0x40
 80075f2:	bf0c      	ite	eq
 80075f4:	2301      	moveq	r3, #1
 80075f6:	2300      	movne	r3, #0
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	f003 0308 	and.w	r3, r3, #8
 8007606:	2b00      	cmp	r3, #0
 8007608:	d103      	bne.n	8007612 <HAL_UART_IRQHandler+0x17a>
 800760a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800760e:	2b00      	cmp	r3, #0
 8007610:	d051      	beq.n	80076b6 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fb74 	bl	8007d00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007622:	2b40      	cmp	r3, #64	; 0x40
 8007624:	d142      	bne.n	80076ac <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3314      	adds	r3, #20
 800762c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800763c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3314      	adds	r3, #20
 800764e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007652:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007656:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800765e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800766a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1d9      	bne.n	8007626 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	2b00      	cmp	r3, #0
 8007678:	d013      	beq.n	80076a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767e:	4a7f      	ldr	r2, [pc, #508]	; (800787c <HAL_UART_IRQHandler+0x3e4>)
 8007680:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	4618      	mov	r0, r3
 8007688:	f7fc fe7e 	bl	8004388 <HAL_DMA_Abort_IT>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d019      	beq.n	80076c6 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800769c:	4610      	mov	r0, r2
 800769e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a0:	e011      	b.n	80076c6 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076aa:	e00c      	b.n	80076c6 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b4:	e007      	b.n	80076c6 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80076c4:	e172      	b.n	80079ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c6:	bf00      	nop
    return;
 80076c8:	e170      	b.n	80079ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	f040 814c 	bne.w	800796c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80076d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d8:	f003 0310 	and.w	r3, r3, #16
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8145 	beq.w	800796c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80076e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e6:	f003 0310 	and.w	r3, r3, #16
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 813e 	beq.w	800796c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076f0:	2300      	movs	r3, #0
 80076f2:	60bb      	str	r3, [r7, #8]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	60bb      	str	r3, [r7, #8]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	60bb      	str	r3, [r7, #8]
 8007704:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007710:	2b40      	cmp	r3, #64	; 0x40
 8007712:	f040 80b5 	bne.w	8007880 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007722:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 8142 	beq.w	80079b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007730:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007734:	429a      	cmp	r2, r3
 8007736:	f080 813b 	bcs.w	80079b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007740:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800774c:	f000 8088 	beq.w	8007860 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	330c      	adds	r3, #12
 8007756:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007766:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800776a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800776e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	330c      	adds	r3, #12
 8007778:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800777c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007780:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007788:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007794:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1d9      	bne.n	8007750 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3314      	adds	r3, #20
 80077a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80077ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077ae:	f023 0301 	bic.w	r3, r3, #1
 80077b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3314      	adds	r3, #20
 80077bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e1      	bne.n	800779c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3314      	adds	r3, #20
 80077de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3314      	adds	r3, #20
 80077f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007802:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800780a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e3      	bne.n	80077d8 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2220      	movs	r2, #32
 8007814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	330c      	adds	r3, #12
 8007824:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800782e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007830:	f023 0310 	bic.w	r3, r3, #16
 8007834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	330c      	adds	r3, #12
 800783e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007842:	65ba      	str	r2, [r7, #88]	; 0x58
 8007844:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007848:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e3      	bne.n	800781e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	4618      	mov	r0, r3
 800785c:	f7fc fd24 	bl	80042a8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800786c:	b292      	uxth	r2, r2
 800786e:	1a8a      	subs	r2, r1, r2
 8007870:	b292      	uxth	r2, r2
 8007872:	4611      	mov	r1, r2
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007878:	e09a      	b.n	80079b0 <HAL_UART_IRQHandler+0x518>
 800787a:	bf00      	nop
 800787c:	08007dc7 	.word	0x08007dc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007888:	b29b      	uxth	r3, r3
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007894:	b29b      	uxth	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 808c 	beq.w	80079b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800789c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 8087 	beq.w	80079b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	330c      	adds	r3, #12
 80078ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	330c      	adds	r3, #12
 80078c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80078ca:	647a      	str	r2, [r7, #68]	; 0x44
 80078cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e3      	bne.n	80078a6 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3314      	adds	r3, #20
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	623b      	str	r3, [r7, #32]
   return(result);
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	f023 0301 	bic.w	r3, r3, #1
 80078f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3314      	adds	r3, #20
 80078fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007902:	633a      	str	r2, [r7, #48]	; 0x30
 8007904:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e3      	bne.n	80078de <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	330c      	adds	r3, #12
 800792a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	60fb      	str	r3, [r7, #12]
   return(result);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f023 0310 	bic.w	r3, r3, #16
 800793a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	330c      	adds	r3, #12
 8007944:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007948:	61fa      	str	r2, [r7, #28]
 800794a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794c:	69b9      	ldr	r1, [r7, #24]
 800794e:	69fa      	ldr	r2, [r7, #28]
 8007950:	e841 2300 	strex	r3, r2, [r1]
 8007954:	617b      	str	r3, [r7, #20]
   return(result);
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1e3      	bne.n	8007924 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007960:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8007964:	4611      	mov	r1, r2
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800796a:	e023      	b.n	80079b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800796c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007974:	2b00      	cmp	r3, #0
 8007976:	d009      	beq.n	800798c <HAL_UART_IRQHandler+0x4f4>
 8007978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800797c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fa33 	bl	8007df0 <UART_Transmit_IT>
    return;
 800798a:	e014      	b.n	80079b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800798c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00e      	beq.n	80079b6 <HAL_UART_IRQHandler+0x51e>
 8007998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800799c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d008      	beq.n	80079b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fa73 	bl	8007e90 <UART_EndTransmit_IT>
    return;
 80079aa:	e004      	b.n	80079b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80079ac:	bf00      	nop
 80079ae:	e002      	b.n	80079b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80079b0:	bf00      	nop
 80079b2:	e000      	b.n	80079b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80079b4:	bf00      	nop
  }
}
 80079b6:	37e8      	adds	r7, #232	; 0xe8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a10      	ldr	r2, [pc, #64]	; (8007ac0 <UART_InitCallbacksToDefault+0x4c>)
 8007a80:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a0f      	ldr	r2, [pc, #60]	; (8007ac4 <UART_InitCallbacksToDefault+0x50>)
 8007a86:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a0f      	ldr	r2, [pc, #60]	; (8007ac8 <UART_InitCallbacksToDefault+0x54>)
 8007a8c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a0e      	ldr	r2, [pc, #56]	; (8007acc <UART_InitCallbacksToDefault+0x58>)
 8007a92:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a0e      	ldr	r2, [pc, #56]	; (8007ad0 <UART_InitCallbacksToDefault+0x5c>)
 8007a98:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a0d      	ldr	r2, [pc, #52]	; (8007ad4 <UART_InitCallbacksToDefault+0x60>)
 8007a9e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a0d      	ldr	r2, [pc, #52]	; (8007ad8 <UART_InitCallbacksToDefault+0x64>)
 8007aa4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a0c      	ldr	r2, [pc, #48]	; (8007adc <UART_InitCallbacksToDefault+0x68>)
 8007aaa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a0c      	ldr	r2, [pc, #48]	; (8007ae0 <UART_InitCallbacksToDefault+0x6c>)
 8007ab0:	669a      	str	r2, [r3, #104]	; 0x68

}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	080079d1 	.word	0x080079d1
 8007ac4:	080079bd 	.word	0x080079bd
 8007ac8:	080079f9 	.word	0x080079f9
 8007acc:	080079e5 	.word	0x080079e5
 8007ad0:	08007a0d 	.word	0x08007a0d
 8007ad4:	08007a21 	.word	0x08007a21
 8007ad8:	08007a35 	.word	0x08007a35
 8007adc:	08007a49 	.word	0x08007a49
 8007ae0:	08007a5d 	.word	0x08007a5d

08007ae4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b090      	sub	sp, #64	; 0x40
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d137      	bne.n	8007b70 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b02:	2200      	movs	r2, #0
 8007b04:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3314      	adds	r3, #20
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	623b      	str	r3, [r7, #32]
   return(result);
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3314      	adds	r3, #20
 8007b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b26:	633a      	str	r2, [r7, #48]	; 0x30
 8007b28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e5      	bne.n	8007b06 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	330c      	adds	r3, #12
 8007b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b50:	637b      	str	r3, [r7, #52]	; 0x34
 8007b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	330c      	adds	r3, #12
 8007b58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b5a:	61fa      	str	r2, [r7, #28]
 8007b5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	69b9      	ldr	r1, [r7, #24]
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	617b      	str	r3, [r7, #20]
   return(result);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e5      	bne.n	8007b3a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b6e:	e003      	b.n	8007b78 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8007b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007b76:	4798      	blx	r3
}
 8007b78:	bf00      	nop
 8007b7a:	3740      	adds	r7, #64	; 0x40
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b96:	bf00      	nop
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bba:	2b80      	cmp	r3, #128	; 0x80
 8007bbc:	bf0c      	ite	eq
 8007bbe:	2301      	moveq	r3, #1
 8007bc0:	2300      	movne	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b21      	cmp	r3, #33	; 0x21
 8007bd0:	d108      	bne.n	8007be4 <UART_DMAError+0x46>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d005      	beq.n	8007be4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007bde:	68b8      	ldr	r0, [r7, #8]
 8007be0:	f000 f866 	bl	8007cb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bee:	2b40      	cmp	r3, #64	; 0x40
 8007bf0:	bf0c      	ite	eq
 8007bf2:	2301      	moveq	r3, #1
 8007bf4:	2300      	movne	r3, #0
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b22      	cmp	r3, #34	; 0x22
 8007c04:	d108      	bne.n	8007c18 <UART_DMAError+0x7a>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d005      	beq.n	8007c18 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007c12:	68b8      	ldr	r0, [r7, #8]
 8007c14:	f000 f874 	bl	8007d00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1c:	f043 0210 	orr.w	r2, r3, #16
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c28:	68b8      	ldr	r0, [r7, #8]
 8007c2a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c2c:	bf00      	nop
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	88fa      	ldrh	r2, [r7, #6]
 8007c4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	88fa      	ldrh	r2, [r7, #6]
 8007c52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2222      	movs	r2, #34	; 0x22
 8007c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d007      	beq.n	8007c82 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c80:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	695a      	ldr	r2, [r3, #20]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f042 0201 	orr.w	r2, r2, #1
 8007c90:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f042 0220 	orr.w	r2, r2, #32
 8007ca0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b089      	sub	sp, #36	; 0x24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	330c      	adds	r3, #12
 8007cbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	e853 3f00 	ldrex	r3, [r3]
 8007cc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007cce:	61fb      	str	r3, [r7, #28]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	330c      	adds	r3, #12
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	61ba      	str	r2, [r7, #24]
 8007cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cdc:	6979      	ldr	r1, [r7, #20]
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	e841 2300 	strex	r3, r2, [r1]
 8007ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1e5      	bne.n	8007cb8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2220      	movs	r2, #32
 8007cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007cf4:	bf00      	nop
 8007cf6:	3724      	adds	r7, #36	; 0x24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b095      	sub	sp, #84	; 0x54
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	330c      	adds	r3, #12
 8007d0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d12:	e853 3f00 	ldrex	r3, [r3]
 8007d16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	330c      	adds	r3, #12
 8007d26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d28:	643a      	str	r2, [r7, #64]	; 0x40
 8007d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d30:	e841 2300 	strex	r3, r2, [r1]
 8007d34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1e5      	bne.n	8007d08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3314      	adds	r3, #20
 8007d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	f023 0301 	bic.w	r3, r3, #1
 8007d52:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3314      	adds	r3, #20
 8007d5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e5      	bne.n	8007d3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d119      	bne.n	8007dac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	330c      	adds	r3, #12
 8007d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f023 0310 	bic.w	r3, r3, #16
 8007d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	330c      	adds	r3, #12
 8007d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d98:	61ba      	str	r2, [r7, #24]
 8007d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9c:	6979      	ldr	r1, [r7, #20]
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	e841 2300 	strex	r3, r2, [r1]
 8007da4:	613b      	str	r3, [r7, #16]
   return(result);
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1e5      	bne.n	8007d78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2220      	movs	r2, #32
 8007db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007dba:	bf00      	nop
 8007dbc:	3754      	adds	r7, #84	; 0x54
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007de8:	bf00      	nop
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b21      	cmp	r3, #33	; 0x21
 8007e02:	d13e      	bne.n	8007e82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e0c:	d114      	bne.n	8007e38 <UART_Transmit_IT+0x48>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d110      	bne.n	8007e38 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	461a      	mov	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	1c9a      	adds	r2, r3, #2
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	621a      	str	r2, [r3, #32]
 8007e36:	e008      	b.n	8007e4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	1c59      	adds	r1, r3, #1
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6211      	str	r1, [r2, #32]
 8007e42:	781a      	ldrb	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	3b01      	subs	r3, #1
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	4619      	mov	r1, r3
 8007e58:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10f      	bne.n	8007e7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68da      	ldr	r2, [r3, #12]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e000      	b.n	8007e84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e82:	2302      	movs	r3, #2
  }
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ea6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b08c      	sub	sp, #48	; 0x30
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b22      	cmp	r3, #34	; 0x22
 8007ed4:	f040 80ad 	bne.w	8008032 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ee0:	d117      	bne.n	8007f12 <UART_Receive_IT+0x50>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d113      	bne.n	8007f12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0a:	1c9a      	adds	r2, r3, #2
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8007f10:	e026      	b.n	8007f60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f24:	d007      	beq.n	8007f36 <UART_Receive_IT+0x74>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10a      	bne.n	8007f44 <UART_Receive_IT+0x82>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d106      	bne.n	8007f44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f40:	701a      	strb	r2, [r3, #0]
 8007f42:	e008      	b.n	8007f56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5a:	1c5a      	adds	r2, r3, #1
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	3b01      	subs	r3, #1
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d15c      	bne.n	800802e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68da      	ldr	r2, [r3, #12]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f022 0220 	bic.w	r2, r2, #32
 8007f82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	695a      	ldr	r2, [r3, #20]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f022 0201 	bic.w	r2, r2, #1
 8007fa2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d136      	bne.n	8008022 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	330c      	adds	r3, #12
 8007fc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f023 0310 	bic.w	r3, r3, #16
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	330c      	adds	r3, #12
 8007fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fda:	623a      	str	r2, [r7, #32]
 8007fdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fde:	69f9      	ldr	r1, [r7, #28]
 8007fe0:	6a3a      	ldr	r2, [r7, #32]
 8007fe2:	e841 2300 	strex	r3, r2, [r1]
 8007fe6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1e5      	bne.n	8007fba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0310 	and.w	r3, r3, #16
 8007ff8:	2b10      	cmp	r3, #16
 8007ffa:	d10a      	bne.n	8008012 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	60fb      	str	r3, [r7, #12]
 8008010:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800801a:	4611      	mov	r1, r2
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	4798      	blx	r3
 8008020:	e003      	b.n	800802a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	e002      	b.n	8008034 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	e000      	b.n	8008034 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8008032:	2302      	movs	r3, #2
  }
}
 8008034:	4618      	mov	r0, r3
 8008036:	3730      	adds	r7, #48	; 0x30
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800803c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008040:	b0c0      	sub	sp, #256	; 0x100
 8008042:	af00      	add	r7, sp, #0
 8008044:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008058:	68d9      	ldr	r1, [r3, #12]
 800805a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	ea40 0301 	orr.w	r3, r0, r1
 8008064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800806a:	689a      	ldr	r2, [r3, #8]
 800806c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	431a      	orrs	r2, r3
 8008074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	431a      	orrs	r2, r3
 800807c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	4313      	orrs	r3, r2
 8008084:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008094:	f021 010c 	bic.w	r1, r1, #12
 8008098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080a2:	430b      	orrs	r3, r1
 80080a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80080b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b6:	6999      	ldr	r1, [r3, #24]
 80080b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	ea40 0301 	orr.w	r3, r0, r1
 80080c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	4b8f      	ldr	r3, [pc, #572]	; (8008308 <UART_SetConfig+0x2cc>)
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d005      	beq.n	80080dc <UART_SetConfig+0xa0>
 80080d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	4b8d      	ldr	r3, [pc, #564]	; (800830c <UART_SetConfig+0x2d0>)
 80080d8:	429a      	cmp	r2, r3
 80080da:	d104      	bne.n	80080e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080dc:	f7fd fa26 	bl	800552c <HAL_RCC_GetPCLK2Freq>
 80080e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80080e4:	e003      	b.n	80080ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080e6:	f7fd fa0d 	bl	8005504 <HAL_RCC_GetPCLK1Freq>
 80080ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f8:	f040 810c 	bne.w	8008314 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008100:	2200      	movs	r2, #0
 8008102:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008106:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800810a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800810e:	4622      	mov	r2, r4
 8008110:	462b      	mov	r3, r5
 8008112:	1891      	adds	r1, r2, r2
 8008114:	65b9      	str	r1, [r7, #88]	; 0x58
 8008116:	415b      	adcs	r3, r3
 8008118:	65fb      	str	r3, [r7, #92]	; 0x5c
 800811a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800811e:	4621      	mov	r1, r4
 8008120:	eb12 0801 	adds.w	r8, r2, r1
 8008124:	4629      	mov	r1, r5
 8008126:	eb43 0901 	adc.w	r9, r3, r1
 800812a:	f04f 0200 	mov.w	r2, #0
 800812e:	f04f 0300 	mov.w	r3, #0
 8008132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800813a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800813e:	4690      	mov	r8, r2
 8008140:	4699      	mov	r9, r3
 8008142:	4623      	mov	r3, r4
 8008144:	eb18 0303 	adds.w	r3, r8, r3
 8008148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800814c:	462b      	mov	r3, r5
 800814e:	eb49 0303 	adc.w	r3, r9, r3
 8008152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008162:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800816a:	460b      	mov	r3, r1
 800816c:	18db      	adds	r3, r3, r3
 800816e:	653b      	str	r3, [r7, #80]	; 0x50
 8008170:	4613      	mov	r3, r2
 8008172:	eb42 0303 	adc.w	r3, r2, r3
 8008176:	657b      	str	r3, [r7, #84]	; 0x54
 8008178:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800817c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008180:	f7f8 fd0e 	bl	8000ba0 <__aeabi_uldivmod>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4b61      	ldr	r3, [pc, #388]	; (8008310 <UART_SetConfig+0x2d4>)
 800818a:	fba3 2302 	umull	r2, r3, r3, r2
 800818e:	095b      	lsrs	r3, r3, #5
 8008190:	011c      	lsls	r4, r3, #4
 8008192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008196:	2200      	movs	r2, #0
 8008198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800819c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80081a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80081a4:	4642      	mov	r2, r8
 80081a6:	464b      	mov	r3, r9
 80081a8:	1891      	adds	r1, r2, r2
 80081aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80081ac:	415b      	adcs	r3, r3
 80081ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80081b4:	4641      	mov	r1, r8
 80081b6:	eb12 0a01 	adds.w	sl, r2, r1
 80081ba:	4649      	mov	r1, r9
 80081bc:	eb43 0b01 	adc.w	fp, r3, r1
 80081c0:	f04f 0200 	mov.w	r2, #0
 80081c4:	f04f 0300 	mov.w	r3, #0
 80081c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80081cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80081d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081d4:	4692      	mov	sl, r2
 80081d6:	469b      	mov	fp, r3
 80081d8:	4643      	mov	r3, r8
 80081da:	eb1a 0303 	adds.w	r3, sl, r3
 80081de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081e2:	464b      	mov	r3, r9
 80081e4:	eb4b 0303 	adc.w	r3, fp, r3
 80081e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80081ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80081fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008200:	460b      	mov	r3, r1
 8008202:	18db      	adds	r3, r3, r3
 8008204:	643b      	str	r3, [r7, #64]	; 0x40
 8008206:	4613      	mov	r3, r2
 8008208:	eb42 0303 	adc.w	r3, r2, r3
 800820c:	647b      	str	r3, [r7, #68]	; 0x44
 800820e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008212:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008216:	f7f8 fcc3 	bl	8000ba0 <__aeabi_uldivmod>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	4611      	mov	r1, r2
 8008220:	4b3b      	ldr	r3, [pc, #236]	; (8008310 <UART_SetConfig+0x2d4>)
 8008222:	fba3 2301 	umull	r2, r3, r3, r1
 8008226:	095b      	lsrs	r3, r3, #5
 8008228:	2264      	movs	r2, #100	; 0x64
 800822a:	fb02 f303 	mul.w	r3, r2, r3
 800822e:	1acb      	subs	r3, r1, r3
 8008230:	00db      	lsls	r3, r3, #3
 8008232:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008236:	4b36      	ldr	r3, [pc, #216]	; (8008310 <UART_SetConfig+0x2d4>)
 8008238:	fba3 2302 	umull	r2, r3, r3, r2
 800823c:	095b      	lsrs	r3, r3, #5
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008244:	441c      	add	r4, r3
 8008246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800824a:	2200      	movs	r2, #0
 800824c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008250:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008254:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008258:	4642      	mov	r2, r8
 800825a:	464b      	mov	r3, r9
 800825c:	1891      	adds	r1, r2, r2
 800825e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008260:	415b      	adcs	r3, r3
 8008262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008268:	4641      	mov	r1, r8
 800826a:	1851      	adds	r1, r2, r1
 800826c:	6339      	str	r1, [r7, #48]	; 0x30
 800826e:	4649      	mov	r1, r9
 8008270:	414b      	adcs	r3, r1
 8008272:	637b      	str	r3, [r7, #52]	; 0x34
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	f04f 0300 	mov.w	r3, #0
 800827c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008280:	4659      	mov	r1, fp
 8008282:	00cb      	lsls	r3, r1, #3
 8008284:	4651      	mov	r1, sl
 8008286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800828a:	4651      	mov	r1, sl
 800828c:	00ca      	lsls	r2, r1, #3
 800828e:	4610      	mov	r0, r2
 8008290:	4619      	mov	r1, r3
 8008292:	4603      	mov	r3, r0
 8008294:	4642      	mov	r2, r8
 8008296:	189b      	adds	r3, r3, r2
 8008298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800829c:	464b      	mov	r3, r9
 800829e:	460a      	mov	r2, r1
 80082a0:	eb42 0303 	adc.w	r3, r2, r3
 80082a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80082b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80082b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80082bc:	460b      	mov	r3, r1
 80082be:	18db      	adds	r3, r3, r3
 80082c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80082c2:	4613      	mov	r3, r2
 80082c4:	eb42 0303 	adc.w	r3, r2, r3
 80082c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80082d2:	f7f8 fc65 	bl	8000ba0 <__aeabi_uldivmod>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	4b0d      	ldr	r3, [pc, #52]	; (8008310 <UART_SetConfig+0x2d4>)
 80082dc:	fba3 1302 	umull	r1, r3, r3, r2
 80082e0:	095b      	lsrs	r3, r3, #5
 80082e2:	2164      	movs	r1, #100	; 0x64
 80082e4:	fb01 f303 	mul.w	r3, r1, r3
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	3332      	adds	r3, #50	; 0x32
 80082ee:	4a08      	ldr	r2, [pc, #32]	; (8008310 <UART_SetConfig+0x2d4>)
 80082f0:	fba2 2303 	umull	r2, r3, r2, r3
 80082f4:	095b      	lsrs	r3, r3, #5
 80082f6:	f003 0207 	and.w	r2, r3, #7
 80082fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4422      	add	r2, r4
 8008302:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008304:	e105      	b.n	8008512 <UART_SetConfig+0x4d6>
 8008306:	bf00      	nop
 8008308:	40011000 	.word	0x40011000
 800830c:	40011400 	.word	0x40011400
 8008310:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008318:	2200      	movs	r2, #0
 800831a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800831e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008322:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008326:	4642      	mov	r2, r8
 8008328:	464b      	mov	r3, r9
 800832a:	1891      	adds	r1, r2, r2
 800832c:	6239      	str	r1, [r7, #32]
 800832e:	415b      	adcs	r3, r3
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
 8008332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008336:	4641      	mov	r1, r8
 8008338:	1854      	adds	r4, r2, r1
 800833a:	4649      	mov	r1, r9
 800833c:	eb43 0501 	adc.w	r5, r3, r1
 8008340:	f04f 0200 	mov.w	r2, #0
 8008344:	f04f 0300 	mov.w	r3, #0
 8008348:	00eb      	lsls	r3, r5, #3
 800834a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800834e:	00e2      	lsls	r2, r4, #3
 8008350:	4614      	mov	r4, r2
 8008352:	461d      	mov	r5, r3
 8008354:	4643      	mov	r3, r8
 8008356:	18e3      	adds	r3, r4, r3
 8008358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800835c:	464b      	mov	r3, r9
 800835e:	eb45 0303 	adc.w	r3, r5, r3
 8008362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008372:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008376:	f04f 0200 	mov.w	r2, #0
 800837a:	f04f 0300 	mov.w	r3, #0
 800837e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008382:	4629      	mov	r1, r5
 8008384:	008b      	lsls	r3, r1, #2
 8008386:	4621      	mov	r1, r4
 8008388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800838c:	4621      	mov	r1, r4
 800838e:	008a      	lsls	r2, r1, #2
 8008390:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008394:	f7f8 fc04 	bl	8000ba0 <__aeabi_uldivmod>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	4b60      	ldr	r3, [pc, #384]	; (8008520 <UART_SetConfig+0x4e4>)
 800839e:	fba3 2302 	umull	r2, r3, r3, r2
 80083a2:	095b      	lsrs	r3, r3, #5
 80083a4:	011c      	lsls	r4, r3, #4
 80083a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083aa:	2200      	movs	r2, #0
 80083ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80083b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80083b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80083b8:	4642      	mov	r2, r8
 80083ba:	464b      	mov	r3, r9
 80083bc:	1891      	adds	r1, r2, r2
 80083be:	61b9      	str	r1, [r7, #24]
 80083c0:	415b      	adcs	r3, r3
 80083c2:	61fb      	str	r3, [r7, #28]
 80083c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083c8:	4641      	mov	r1, r8
 80083ca:	1851      	adds	r1, r2, r1
 80083cc:	6139      	str	r1, [r7, #16]
 80083ce:	4649      	mov	r1, r9
 80083d0:	414b      	adcs	r3, r1
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	f04f 0200 	mov.w	r2, #0
 80083d8:	f04f 0300 	mov.w	r3, #0
 80083dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083e0:	4659      	mov	r1, fp
 80083e2:	00cb      	lsls	r3, r1, #3
 80083e4:	4651      	mov	r1, sl
 80083e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083ea:	4651      	mov	r1, sl
 80083ec:	00ca      	lsls	r2, r1, #3
 80083ee:	4610      	mov	r0, r2
 80083f0:	4619      	mov	r1, r3
 80083f2:	4603      	mov	r3, r0
 80083f4:	4642      	mov	r2, r8
 80083f6:	189b      	adds	r3, r3, r2
 80083f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083fc:	464b      	mov	r3, r9
 80083fe:	460a      	mov	r2, r1
 8008400:	eb42 0303 	adc.w	r3, r2, r3
 8008404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	67bb      	str	r3, [r7, #120]	; 0x78
 8008412:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008414:	f04f 0200 	mov.w	r2, #0
 8008418:	f04f 0300 	mov.w	r3, #0
 800841c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008420:	4649      	mov	r1, r9
 8008422:	008b      	lsls	r3, r1, #2
 8008424:	4641      	mov	r1, r8
 8008426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800842a:	4641      	mov	r1, r8
 800842c:	008a      	lsls	r2, r1, #2
 800842e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008432:	f7f8 fbb5 	bl	8000ba0 <__aeabi_uldivmod>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4b39      	ldr	r3, [pc, #228]	; (8008520 <UART_SetConfig+0x4e4>)
 800843c:	fba3 1302 	umull	r1, r3, r3, r2
 8008440:	095b      	lsrs	r3, r3, #5
 8008442:	2164      	movs	r1, #100	; 0x64
 8008444:	fb01 f303 	mul.w	r3, r1, r3
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	011b      	lsls	r3, r3, #4
 800844c:	3332      	adds	r3, #50	; 0x32
 800844e:	4a34      	ldr	r2, [pc, #208]	; (8008520 <UART_SetConfig+0x4e4>)
 8008450:	fba2 2303 	umull	r2, r3, r2, r3
 8008454:	095b      	lsrs	r3, r3, #5
 8008456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800845a:	441c      	add	r4, r3
 800845c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008460:	2200      	movs	r2, #0
 8008462:	673b      	str	r3, [r7, #112]	; 0x70
 8008464:	677a      	str	r2, [r7, #116]	; 0x74
 8008466:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800846a:	4642      	mov	r2, r8
 800846c:	464b      	mov	r3, r9
 800846e:	1891      	adds	r1, r2, r2
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	415b      	adcs	r3, r3
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800847a:	4641      	mov	r1, r8
 800847c:	1851      	adds	r1, r2, r1
 800847e:	6039      	str	r1, [r7, #0]
 8008480:	4649      	mov	r1, r9
 8008482:	414b      	adcs	r3, r1
 8008484:	607b      	str	r3, [r7, #4]
 8008486:	f04f 0200 	mov.w	r2, #0
 800848a:	f04f 0300 	mov.w	r3, #0
 800848e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008492:	4659      	mov	r1, fp
 8008494:	00cb      	lsls	r3, r1, #3
 8008496:	4651      	mov	r1, sl
 8008498:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800849c:	4651      	mov	r1, sl
 800849e:	00ca      	lsls	r2, r1, #3
 80084a0:	4610      	mov	r0, r2
 80084a2:	4619      	mov	r1, r3
 80084a4:	4603      	mov	r3, r0
 80084a6:	4642      	mov	r2, r8
 80084a8:	189b      	adds	r3, r3, r2
 80084aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80084ac:	464b      	mov	r3, r9
 80084ae:	460a      	mov	r2, r1
 80084b0:	eb42 0303 	adc.w	r3, r2, r3
 80084b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	663b      	str	r3, [r7, #96]	; 0x60
 80084c0:	667a      	str	r2, [r7, #100]	; 0x64
 80084c2:	f04f 0200 	mov.w	r2, #0
 80084c6:	f04f 0300 	mov.w	r3, #0
 80084ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80084ce:	4649      	mov	r1, r9
 80084d0:	008b      	lsls	r3, r1, #2
 80084d2:	4641      	mov	r1, r8
 80084d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084d8:	4641      	mov	r1, r8
 80084da:	008a      	lsls	r2, r1, #2
 80084dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80084e0:	f7f8 fb5e 	bl	8000ba0 <__aeabi_uldivmod>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4b0d      	ldr	r3, [pc, #52]	; (8008520 <UART_SetConfig+0x4e4>)
 80084ea:	fba3 1302 	umull	r1, r3, r3, r2
 80084ee:	095b      	lsrs	r3, r3, #5
 80084f0:	2164      	movs	r1, #100	; 0x64
 80084f2:	fb01 f303 	mul.w	r3, r1, r3
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	3332      	adds	r3, #50	; 0x32
 80084fc:	4a08      	ldr	r2, [pc, #32]	; (8008520 <UART_SetConfig+0x4e4>)
 80084fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008502:	095b      	lsrs	r3, r3, #5
 8008504:	f003 020f 	and.w	r2, r3, #15
 8008508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4422      	add	r2, r4
 8008510:	609a      	str	r2, [r3, #8]
}
 8008512:	bf00      	nop
 8008514:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008518:	46bd      	mov	sp, r7
 800851a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800851e:	bf00      	nop
 8008520:	51eb851f 	.word	0x51eb851f

08008524 <__errno>:
 8008524:	4b01      	ldr	r3, [pc, #4]	; (800852c <__errno+0x8>)
 8008526:	6818      	ldr	r0, [r3, #0]
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	20000254 	.word	0x20000254

08008530 <__libc_init_array>:
 8008530:	b570      	push	{r4, r5, r6, lr}
 8008532:	4d0d      	ldr	r5, [pc, #52]	; (8008568 <__libc_init_array+0x38>)
 8008534:	4c0d      	ldr	r4, [pc, #52]	; (800856c <__libc_init_array+0x3c>)
 8008536:	1b64      	subs	r4, r4, r5
 8008538:	10a4      	asrs	r4, r4, #2
 800853a:	2600      	movs	r6, #0
 800853c:	42a6      	cmp	r6, r4
 800853e:	d109      	bne.n	8008554 <__libc_init_array+0x24>
 8008540:	4d0b      	ldr	r5, [pc, #44]	; (8008570 <__libc_init_array+0x40>)
 8008542:	4c0c      	ldr	r4, [pc, #48]	; (8008574 <__libc_init_array+0x44>)
 8008544:	f000 ff4a 	bl	80093dc <_init>
 8008548:	1b64      	subs	r4, r4, r5
 800854a:	10a4      	asrs	r4, r4, #2
 800854c:	2600      	movs	r6, #0
 800854e:	42a6      	cmp	r6, r4
 8008550:	d105      	bne.n	800855e <__libc_init_array+0x2e>
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	f855 3b04 	ldr.w	r3, [r5], #4
 8008558:	4798      	blx	r3
 800855a:	3601      	adds	r6, #1
 800855c:	e7ee      	b.n	800853c <__libc_init_array+0xc>
 800855e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008562:	4798      	blx	r3
 8008564:	3601      	adds	r6, #1
 8008566:	e7f2      	b.n	800854e <__libc_init_array+0x1e>
 8008568:	08009450 	.word	0x08009450
 800856c:	08009450 	.word	0x08009450
 8008570:	08009450 	.word	0x08009450
 8008574:	08009454 	.word	0x08009454

08008578 <memcpy>:
 8008578:	440a      	add	r2, r1
 800857a:	4291      	cmp	r1, r2
 800857c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008580:	d100      	bne.n	8008584 <memcpy+0xc>
 8008582:	4770      	bx	lr
 8008584:	b510      	push	{r4, lr}
 8008586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800858a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800858e:	4291      	cmp	r1, r2
 8008590:	d1f9      	bne.n	8008586 <memcpy+0xe>
 8008592:	bd10      	pop	{r4, pc}

08008594 <memset>:
 8008594:	4402      	add	r2, r0
 8008596:	4603      	mov	r3, r0
 8008598:	4293      	cmp	r3, r2
 800859a:	d100      	bne.n	800859e <memset+0xa>
 800859c:	4770      	bx	lr
 800859e:	f803 1b01 	strb.w	r1, [r3], #1
 80085a2:	e7f9      	b.n	8008598 <memset+0x4>

080085a4 <pow>:
 80085a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a6:	ed2d 8b02 	vpush	{d8}
 80085aa:	eeb0 8a40 	vmov.f32	s16, s0
 80085ae:	eef0 8a60 	vmov.f32	s17, s1
 80085b2:	ec55 4b11 	vmov	r4, r5, d1
 80085b6:	f000 f867 	bl	8008688 <__ieee754_pow>
 80085ba:	4622      	mov	r2, r4
 80085bc:	462b      	mov	r3, r5
 80085be:	4620      	mov	r0, r4
 80085c0:	4629      	mov	r1, r5
 80085c2:	ec57 6b10 	vmov	r6, r7, d0
 80085c6:	f7f8 fa5d 	bl	8000a84 <__aeabi_dcmpun>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d13b      	bne.n	8008646 <pow+0xa2>
 80085ce:	ec51 0b18 	vmov	r0, r1, d8
 80085d2:	2200      	movs	r2, #0
 80085d4:	2300      	movs	r3, #0
 80085d6:	f7f8 fa23 	bl	8000a20 <__aeabi_dcmpeq>
 80085da:	b1b8      	cbz	r0, 800860c <pow+0x68>
 80085dc:	2200      	movs	r2, #0
 80085de:	2300      	movs	r3, #0
 80085e0:	4620      	mov	r0, r4
 80085e2:	4629      	mov	r1, r5
 80085e4:	f7f8 fa1c 	bl	8000a20 <__aeabi_dcmpeq>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d146      	bne.n	800867a <pow+0xd6>
 80085ec:	ec45 4b10 	vmov	d0, r4, r5
 80085f0:	f000 fe63 	bl	80092ba <finite>
 80085f4:	b338      	cbz	r0, 8008646 <pow+0xa2>
 80085f6:	2200      	movs	r2, #0
 80085f8:	2300      	movs	r3, #0
 80085fa:	4620      	mov	r0, r4
 80085fc:	4629      	mov	r1, r5
 80085fe:	f7f8 fa19 	bl	8000a34 <__aeabi_dcmplt>
 8008602:	b300      	cbz	r0, 8008646 <pow+0xa2>
 8008604:	f7ff ff8e 	bl	8008524 <__errno>
 8008608:	2322      	movs	r3, #34	; 0x22
 800860a:	e01b      	b.n	8008644 <pow+0xa0>
 800860c:	ec47 6b10 	vmov	d0, r6, r7
 8008610:	f000 fe53 	bl	80092ba <finite>
 8008614:	b9e0      	cbnz	r0, 8008650 <pow+0xac>
 8008616:	eeb0 0a48 	vmov.f32	s0, s16
 800861a:	eef0 0a68 	vmov.f32	s1, s17
 800861e:	f000 fe4c 	bl	80092ba <finite>
 8008622:	b1a8      	cbz	r0, 8008650 <pow+0xac>
 8008624:	ec45 4b10 	vmov	d0, r4, r5
 8008628:	f000 fe47 	bl	80092ba <finite>
 800862c:	b180      	cbz	r0, 8008650 <pow+0xac>
 800862e:	4632      	mov	r2, r6
 8008630:	463b      	mov	r3, r7
 8008632:	4630      	mov	r0, r6
 8008634:	4639      	mov	r1, r7
 8008636:	f7f8 fa25 	bl	8000a84 <__aeabi_dcmpun>
 800863a:	2800      	cmp	r0, #0
 800863c:	d0e2      	beq.n	8008604 <pow+0x60>
 800863e:	f7ff ff71 	bl	8008524 <__errno>
 8008642:	2321      	movs	r3, #33	; 0x21
 8008644:	6003      	str	r3, [r0, #0]
 8008646:	ecbd 8b02 	vpop	{d8}
 800864a:	ec47 6b10 	vmov	d0, r6, r7
 800864e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008650:	2200      	movs	r2, #0
 8008652:	2300      	movs	r3, #0
 8008654:	4630      	mov	r0, r6
 8008656:	4639      	mov	r1, r7
 8008658:	f7f8 f9e2 	bl	8000a20 <__aeabi_dcmpeq>
 800865c:	2800      	cmp	r0, #0
 800865e:	d0f2      	beq.n	8008646 <pow+0xa2>
 8008660:	eeb0 0a48 	vmov.f32	s0, s16
 8008664:	eef0 0a68 	vmov.f32	s1, s17
 8008668:	f000 fe27 	bl	80092ba <finite>
 800866c:	2800      	cmp	r0, #0
 800866e:	d0ea      	beq.n	8008646 <pow+0xa2>
 8008670:	ec45 4b10 	vmov	d0, r4, r5
 8008674:	f000 fe21 	bl	80092ba <finite>
 8008678:	e7c3      	b.n	8008602 <pow+0x5e>
 800867a:	4f01      	ldr	r7, [pc, #4]	; (8008680 <pow+0xdc>)
 800867c:	2600      	movs	r6, #0
 800867e:	e7e2      	b.n	8008646 <pow+0xa2>
 8008680:	3ff00000 	.word	0x3ff00000
 8008684:	00000000 	.word	0x00000000

08008688 <__ieee754_pow>:
 8008688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800868c:	ed2d 8b06 	vpush	{d8-d10}
 8008690:	b089      	sub	sp, #36	; 0x24
 8008692:	ed8d 1b00 	vstr	d1, [sp]
 8008696:	e9dd 2900 	ldrd	r2, r9, [sp]
 800869a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800869e:	ea58 0102 	orrs.w	r1, r8, r2
 80086a2:	ec57 6b10 	vmov	r6, r7, d0
 80086a6:	d115      	bne.n	80086d4 <__ieee754_pow+0x4c>
 80086a8:	19b3      	adds	r3, r6, r6
 80086aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80086ae:	4152      	adcs	r2, r2
 80086b0:	4299      	cmp	r1, r3
 80086b2:	4b89      	ldr	r3, [pc, #548]	; (80088d8 <__ieee754_pow+0x250>)
 80086b4:	4193      	sbcs	r3, r2
 80086b6:	f080 84d2 	bcs.w	800905e <__ieee754_pow+0x9d6>
 80086ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086be:	4630      	mov	r0, r6
 80086c0:	4639      	mov	r1, r7
 80086c2:	f7f7 fd8f 	bl	80001e4 <__adddf3>
 80086c6:	ec41 0b10 	vmov	d0, r0, r1
 80086ca:	b009      	add	sp, #36	; 0x24
 80086cc:	ecbd 8b06 	vpop	{d8-d10}
 80086d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d4:	4b81      	ldr	r3, [pc, #516]	; (80088dc <__ieee754_pow+0x254>)
 80086d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80086da:	429c      	cmp	r4, r3
 80086dc:	ee10 aa10 	vmov	sl, s0
 80086e0:	463d      	mov	r5, r7
 80086e2:	dc06      	bgt.n	80086f2 <__ieee754_pow+0x6a>
 80086e4:	d101      	bne.n	80086ea <__ieee754_pow+0x62>
 80086e6:	2e00      	cmp	r6, #0
 80086e8:	d1e7      	bne.n	80086ba <__ieee754_pow+0x32>
 80086ea:	4598      	cmp	r8, r3
 80086ec:	dc01      	bgt.n	80086f2 <__ieee754_pow+0x6a>
 80086ee:	d10f      	bne.n	8008710 <__ieee754_pow+0x88>
 80086f0:	b172      	cbz	r2, 8008710 <__ieee754_pow+0x88>
 80086f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80086f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80086fa:	ea55 050a 	orrs.w	r5, r5, sl
 80086fe:	d1dc      	bne.n	80086ba <__ieee754_pow+0x32>
 8008700:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008704:	18db      	adds	r3, r3, r3
 8008706:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800870a:	4152      	adcs	r2, r2
 800870c:	429d      	cmp	r5, r3
 800870e:	e7d0      	b.n	80086b2 <__ieee754_pow+0x2a>
 8008710:	2d00      	cmp	r5, #0
 8008712:	da3b      	bge.n	800878c <__ieee754_pow+0x104>
 8008714:	4b72      	ldr	r3, [pc, #456]	; (80088e0 <__ieee754_pow+0x258>)
 8008716:	4598      	cmp	r8, r3
 8008718:	dc51      	bgt.n	80087be <__ieee754_pow+0x136>
 800871a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800871e:	4598      	cmp	r8, r3
 8008720:	f340 84ac 	ble.w	800907c <__ieee754_pow+0x9f4>
 8008724:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008728:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800872c:	2b14      	cmp	r3, #20
 800872e:	dd0f      	ble.n	8008750 <__ieee754_pow+0xc8>
 8008730:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008734:	fa22 f103 	lsr.w	r1, r2, r3
 8008738:	fa01 f303 	lsl.w	r3, r1, r3
 800873c:	4293      	cmp	r3, r2
 800873e:	f040 849d 	bne.w	800907c <__ieee754_pow+0x9f4>
 8008742:	f001 0101 	and.w	r1, r1, #1
 8008746:	f1c1 0302 	rsb	r3, r1, #2
 800874a:	9304      	str	r3, [sp, #16]
 800874c:	b182      	cbz	r2, 8008770 <__ieee754_pow+0xe8>
 800874e:	e05f      	b.n	8008810 <__ieee754_pow+0x188>
 8008750:	2a00      	cmp	r2, #0
 8008752:	d15b      	bne.n	800880c <__ieee754_pow+0x184>
 8008754:	f1c3 0314 	rsb	r3, r3, #20
 8008758:	fa48 f103 	asr.w	r1, r8, r3
 800875c:	fa01 f303 	lsl.w	r3, r1, r3
 8008760:	4543      	cmp	r3, r8
 8008762:	f040 8488 	bne.w	8009076 <__ieee754_pow+0x9ee>
 8008766:	f001 0101 	and.w	r1, r1, #1
 800876a:	f1c1 0302 	rsb	r3, r1, #2
 800876e:	9304      	str	r3, [sp, #16]
 8008770:	4b5c      	ldr	r3, [pc, #368]	; (80088e4 <__ieee754_pow+0x25c>)
 8008772:	4598      	cmp	r8, r3
 8008774:	d132      	bne.n	80087dc <__ieee754_pow+0x154>
 8008776:	f1b9 0f00 	cmp.w	r9, #0
 800877a:	f280 8478 	bge.w	800906e <__ieee754_pow+0x9e6>
 800877e:	4959      	ldr	r1, [pc, #356]	; (80088e4 <__ieee754_pow+0x25c>)
 8008780:	4632      	mov	r2, r6
 8008782:	463b      	mov	r3, r7
 8008784:	2000      	movs	r0, #0
 8008786:	f7f8 f80d 	bl	80007a4 <__aeabi_ddiv>
 800878a:	e79c      	b.n	80086c6 <__ieee754_pow+0x3e>
 800878c:	2300      	movs	r3, #0
 800878e:	9304      	str	r3, [sp, #16]
 8008790:	2a00      	cmp	r2, #0
 8008792:	d13d      	bne.n	8008810 <__ieee754_pow+0x188>
 8008794:	4b51      	ldr	r3, [pc, #324]	; (80088dc <__ieee754_pow+0x254>)
 8008796:	4598      	cmp	r8, r3
 8008798:	d1ea      	bne.n	8008770 <__ieee754_pow+0xe8>
 800879a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800879e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80087a2:	ea53 030a 	orrs.w	r3, r3, sl
 80087a6:	f000 845a 	beq.w	800905e <__ieee754_pow+0x9d6>
 80087aa:	4b4f      	ldr	r3, [pc, #316]	; (80088e8 <__ieee754_pow+0x260>)
 80087ac:	429c      	cmp	r4, r3
 80087ae:	dd08      	ble.n	80087c2 <__ieee754_pow+0x13a>
 80087b0:	f1b9 0f00 	cmp.w	r9, #0
 80087b4:	f2c0 8457 	blt.w	8009066 <__ieee754_pow+0x9de>
 80087b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087bc:	e783      	b.n	80086c6 <__ieee754_pow+0x3e>
 80087be:	2302      	movs	r3, #2
 80087c0:	e7e5      	b.n	800878e <__ieee754_pow+0x106>
 80087c2:	f1b9 0f00 	cmp.w	r9, #0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 0100 	mov.w	r1, #0
 80087ce:	f6bf af7a 	bge.w	80086c6 <__ieee754_pow+0x3e>
 80087d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80087d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80087da:	e774      	b.n	80086c6 <__ieee754_pow+0x3e>
 80087dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80087e0:	d106      	bne.n	80087f0 <__ieee754_pow+0x168>
 80087e2:	4632      	mov	r2, r6
 80087e4:	463b      	mov	r3, r7
 80087e6:	4630      	mov	r0, r6
 80087e8:	4639      	mov	r1, r7
 80087ea:	f7f7 feb1 	bl	8000550 <__aeabi_dmul>
 80087ee:	e76a      	b.n	80086c6 <__ieee754_pow+0x3e>
 80087f0:	4b3e      	ldr	r3, [pc, #248]	; (80088ec <__ieee754_pow+0x264>)
 80087f2:	4599      	cmp	r9, r3
 80087f4:	d10c      	bne.n	8008810 <__ieee754_pow+0x188>
 80087f6:	2d00      	cmp	r5, #0
 80087f8:	db0a      	blt.n	8008810 <__ieee754_pow+0x188>
 80087fa:	ec47 6b10 	vmov	d0, r6, r7
 80087fe:	b009      	add	sp, #36	; 0x24
 8008800:	ecbd 8b06 	vpop	{d8-d10}
 8008804:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008808:	f000 bc6c 	b.w	80090e4 <__ieee754_sqrt>
 800880c:	2300      	movs	r3, #0
 800880e:	9304      	str	r3, [sp, #16]
 8008810:	ec47 6b10 	vmov	d0, r6, r7
 8008814:	f000 fd48 	bl	80092a8 <fabs>
 8008818:	ec51 0b10 	vmov	r0, r1, d0
 800881c:	f1ba 0f00 	cmp.w	sl, #0
 8008820:	d129      	bne.n	8008876 <__ieee754_pow+0x1ee>
 8008822:	b124      	cbz	r4, 800882e <__ieee754_pow+0x1a6>
 8008824:	4b2f      	ldr	r3, [pc, #188]	; (80088e4 <__ieee754_pow+0x25c>)
 8008826:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800882a:	429a      	cmp	r2, r3
 800882c:	d123      	bne.n	8008876 <__ieee754_pow+0x1ee>
 800882e:	f1b9 0f00 	cmp.w	r9, #0
 8008832:	da05      	bge.n	8008840 <__ieee754_pow+0x1b8>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	2000      	movs	r0, #0
 800883a:	492a      	ldr	r1, [pc, #168]	; (80088e4 <__ieee754_pow+0x25c>)
 800883c:	f7f7 ffb2 	bl	80007a4 <__aeabi_ddiv>
 8008840:	2d00      	cmp	r5, #0
 8008842:	f6bf af40 	bge.w	80086c6 <__ieee754_pow+0x3e>
 8008846:	9b04      	ldr	r3, [sp, #16]
 8008848:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800884c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008850:	4323      	orrs	r3, r4
 8008852:	d108      	bne.n	8008866 <__ieee754_pow+0x1de>
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	4610      	mov	r0, r2
 800885a:	4619      	mov	r1, r3
 800885c:	f7f7 fcc0 	bl	80001e0 <__aeabi_dsub>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	e78f      	b.n	8008786 <__ieee754_pow+0xfe>
 8008866:	9b04      	ldr	r3, [sp, #16]
 8008868:	2b01      	cmp	r3, #1
 800886a:	f47f af2c 	bne.w	80086c6 <__ieee754_pow+0x3e>
 800886e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008872:	4619      	mov	r1, r3
 8008874:	e727      	b.n	80086c6 <__ieee754_pow+0x3e>
 8008876:	0feb      	lsrs	r3, r5, #31
 8008878:	3b01      	subs	r3, #1
 800887a:	9306      	str	r3, [sp, #24]
 800887c:	9a06      	ldr	r2, [sp, #24]
 800887e:	9b04      	ldr	r3, [sp, #16]
 8008880:	4313      	orrs	r3, r2
 8008882:	d102      	bne.n	800888a <__ieee754_pow+0x202>
 8008884:	4632      	mov	r2, r6
 8008886:	463b      	mov	r3, r7
 8008888:	e7e6      	b.n	8008858 <__ieee754_pow+0x1d0>
 800888a:	4b19      	ldr	r3, [pc, #100]	; (80088f0 <__ieee754_pow+0x268>)
 800888c:	4598      	cmp	r8, r3
 800888e:	f340 80fb 	ble.w	8008a88 <__ieee754_pow+0x400>
 8008892:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008896:	4598      	cmp	r8, r3
 8008898:	4b13      	ldr	r3, [pc, #76]	; (80088e8 <__ieee754_pow+0x260>)
 800889a:	dd0c      	ble.n	80088b6 <__ieee754_pow+0x22e>
 800889c:	429c      	cmp	r4, r3
 800889e:	dc0f      	bgt.n	80088c0 <__ieee754_pow+0x238>
 80088a0:	f1b9 0f00 	cmp.w	r9, #0
 80088a4:	da0f      	bge.n	80088c6 <__ieee754_pow+0x23e>
 80088a6:	2000      	movs	r0, #0
 80088a8:	b009      	add	sp, #36	; 0x24
 80088aa:	ecbd 8b06 	vpop	{d8-d10}
 80088ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b2:	f000 bcf0 	b.w	8009296 <__math_oflow>
 80088b6:	429c      	cmp	r4, r3
 80088b8:	dbf2      	blt.n	80088a0 <__ieee754_pow+0x218>
 80088ba:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <__ieee754_pow+0x25c>)
 80088bc:	429c      	cmp	r4, r3
 80088be:	dd19      	ble.n	80088f4 <__ieee754_pow+0x26c>
 80088c0:	f1b9 0f00 	cmp.w	r9, #0
 80088c4:	dcef      	bgt.n	80088a6 <__ieee754_pow+0x21e>
 80088c6:	2000      	movs	r0, #0
 80088c8:	b009      	add	sp, #36	; 0x24
 80088ca:	ecbd 8b06 	vpop	{d8-d10}
 80088ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d2:	f000 bcd7 	b.w	8009284 <__math_uflow>
 80088d6:	bf00      	nop
 80088d8:	fff00000 	.word	0xfff00000
 80088dc:	7ff00000 	.word	0x7ff00000
 80088e0:	433fffff 	.word	0x433fffff
 80088e4:	3ff00000 	.word	0x3ff00000
 80088e8:	3fefffff 	.word	0x3fefffff
 80088ec:	3fe00000 	.word	0x3fe00000
 80088f0:	41e00000 	.word	0x41e00000
 80088f4:	4b60      	ldr	r3, [pc, #384]	; (8008a78 <__ieee754_pow+0x3f0>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	f7f7 fc72 	bl	80001e0 <__aeabi_dsub>
 80088fc:	a354      	add	r3, pc, #336	; (adr r3, 8008a50 <__ieee754_pow+0x3c8>)
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	4604      	mov	r4, r0
 8008904:	460d      	mov	r5, r1
 8008906:	f7f7 fe23 	bl	8000550 <__aeabi_dmul>
 800890a:	a353      	add	r3, pc, #332	; (adr r3, 8008a58 <__ieee754_pow+0x3d0>)
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	4606      	mov	r6, r0
 8008912:	460f      	mov	r7, r1
 8008914:	4620      	mov	r0, r4
 8008916:	4629      	mov	r1, r5
 8008918:	f7f7 fe1a 	bl	8000550 <__aeabi_dmul>
 800891c:	4b57      	ldr	r3, [pc, #348]	; (8008a7c <__ieee754_pow+0x3f4>)
 800891e:	4682      	mov	sl, r0
 8008920:	468b      	mov	fp, r1
 8008922:	2200      	movs	r2, #0
 8008924:	4620      	mov	r0, r4
 8008926:	4629      	mov	r1, r5
 8008928:	f7f7 fe12 	bl	8000550 <__aeabi_dmul>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	a14b      	add	r1, pc, #300	; (adr r1, 8008a60 <__ieee754_pow+0x3d8>)
 8008932:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008936:	f7f7 fc53 	bl	80001e0 <__aeabi_dsub>
 800893a:	4622      	mov	r2, r4
 800893c:	462b      	mov	r3, r5
 800893e:	f7f7 fe07 	bl	8000550 <__aeabi_dmul>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	2000      	movs	r0, #0
 8008948:	494d      	ldr	r1, [pc, #308]	; (8008a80 <__ieee754_pow+0x3f8>)
 800894a:	f7f7 fc49 	bl	80001e0 <__aeabi_dsub>
 800894e:	4622      	mov	r2, r4
 8008950:	4680      	mov	r8, r0
 8008952:	4689      	mov	r9, r1
 8008954:	462b      	mov	r3, r5
 8008956:	4620      	mov	r0, r4
 8008958:	4629      	mov	r1, r5
 800895a:	f7f7 fdf9 	bl	8000550 <__aeabi_dmul>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4640      	mov	r0, r8
 8008964:	4649      	mov	r1, r9
 8008966:	f7f7 fdf3 	bl	8000550 <__aeabi_dmul>
 800896a:	a33f      	add	r3, pc, #252	; (adr r3, 8008a68 <__ieee754_pow+0x3e0>)
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	f7f7 fdee 	bl	8000550 <__aeabi_dmul>
 8008974:	4602      	mov	r2, r0
 8008976:	460b      	mov	r3, r1
 8008978:	4650      	mov	r0, sl
 800897a:	4659      	mov	r1, fp
 800897c:	f7f7 fc30 	bl	80001e0 <__aeabi_dsub>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	4680      	mov	r8, r0
 8008986:	4689      	mov	r9, r1
 8008988:	4630      	mov	r0, r6
 800898a:	4639      	mov	r1, r7
 800898c:	f7f7 fc2a 	bl	80001e4 <__adddf3>
 8008990:	2000      	movs	r0, #0
 8008992:	4632      	mov	r2, r6
 8008994:	463b      	mov	r3, r7
 8008996:	4604      	mov	r4, r0
 8008998:	460d      	mov	r5, r1
 800899a:	f7f7 fc21 	bl	80001e0 <__aeabi_dsub>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4640      	mov	r0, r8
 80089a4:	4649      	mov	r1, r9
 80089a6:	f7f7 fc1b 	bl	80001e0 <__aeabi_dsub>
 80089aa:	9b04      	ldr	r3, [sp, #16]
 80089ac:	9a06      	ldr	r2, [sp, #24]
 80089ae:	3b01      	subs	r3, #1
 80089b0:	4313      	orrs	r3, r2
 80089b2:	4682      	mov	sl, r0
 80089b4:	468b      	mov	fp, r1
 80089b6:	f040 81e7 	bne.w	8008d88 <__ieee754_pow+0x700>
 80089ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008a70 <__ieee754_pow+0x3e8>
 80089be:	eeb0 8a47 	vmov.f32	s16, s14
 80089c2:	eef0 8a67 	vmov.f32	s17, s15
 80089c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80089ca:	2600      	movs	r6, #0
 80089cc:	4632      	mov	r2, r6
 80089ce:	463b      	mov	r3, r7
 80089d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089d4:	f7f7 fc04 	bl	80001e0 <__aeabi_dsub>
 80089d8:	4622      	mov	r2, r4
 80089da:	462b      	mov	r3, r5
 80089dc:	f7f7 fdb8 	bl	8000550 <__aeabi_dmul>
 80089e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089e4:	4680      	mov	r8, r0
 80089e6:	4689      	mov	r9, r1
 80089e8:	4650      	mov	r0, sl
 80089ea:	4659      	mov	r1, fp
 80089ec:	f7f7 fdb0 	bl	8000550 <__aeabi_dmul>
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4640      	mov	r0, r8
 80089f6:	4649      	mov	r1, r9
 80089f8:	f7f7 fbf4 	bl	80001e4 <__adddf3>
 80089fc:	4632      	mov	r2, r6
 80089fe:	463b      	mov	r3, r7
 8008a00:	4680      	mov	r8, r0
 8008a02:	4689      	mov	r9, r1
 8008a04:	4620      	mov	r0, r4
 8008a06:	4629      	mov	r1, r5
 8008a08:	f7f7 fda2 	bl	8000550 <__aeabi_dmul>
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4604      	mov	r4, r0
 8008a10:	460d      	mov	r5, r1
 8008a12:	4602      	mov	r2, r0
 8008a14:	4649      	mov	r1, r9
 8008a16:	4640      	mov	r0, r8
 8008a18:	f7f7 fbe4 	bl	80001e4 <__adddf3>
 8008a1c:	4b19      	ldr	r3, [pc, #100]	; (8008a84 <__ieee754_pow+0x3fc>)
 8008a1e:	4299      	cmp	r1, r3
 8008a20:	ec45 4b19 	vmov	d9, r4, r5
 8008a24:	4606      	mov	r6, r0
 8008a26:	460f      	mov	r7, r1
 8008a28:	468b      	mov	fp, r1
 8008a2a:	f340 82f1 	ble.w	8009010 <__ieee754_pow+0x988>
 8008a2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008a32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008a36:	4303      	orrs	r3, r0
 8008a38:	f000 81e4 	beq.w	8008e04 <__ieee754_pow+0x77c>
 8008a3c:	ec51 0b18 	vmov	r0, r1, d8
 8008a40:	2200      	movs	r2, #0
 8008a42:	2300      	movs	r3, #0
 8008a44:	f7f7 fff6 	bl	8000a34 <__aeabi_dcmplt>
 8008a48:	3800      	subs	r0, #0
 8008a4a:	bf18      	it	ne
 8008a4c:	2001      	movne	r0, #1
 8008a4e:	e72b      	b.n	80088a8 <__ieee754_pow+0x220>
 8008a50:	60000000 	.word	0x60000000
 8008a54:	3ff71547 	.word	0x3ff71547
 8008a58:	f85ddf44 	.word	0xf85ddf44
 8008a5c:	3e54ae0b 	.word	0x3e54ae0b
 8008a60:	55555555 	.word	0x55555555
 8008a64:	3fd55555 	.word	0x3fd55555
 8008a68:	652b82fe 	.word	0x652b82fe
 8008a6c:	3ff71547 	.word	0x3ff71547
 8008a70:	00000000 	.word	0x00000000
 8008a74:	bff00000 	.word	0xbff00000
 8008a78:	3ff00000 	.word	0x3ff00000
 8008a7c:	3fd00000 	.word	0x3fd00000
 8008a80:	3fe00000 	.word	0x3fe00000
 8008a84:	408fffff 	.word	0x408fffff
 8008a88:	4bd5      	ldr	r3, [pc, #852]	; (8008de0 <__ieee754_pow+0x758>)
 8008a8a:	402b      	ands	r3, r5
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	b92b      	cbnz	r3, 8008a9c <__ieee754_pow+0x414>
 8008a90:	4bd4      	ldr	r3, [pc, #848]	; (8008de4 <__ieee754_pow+0x75c>)
 8008a92:	f7f7 fd5d 	bl	8000550 <__aeabi_dmul>
 8008a96:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	1523      	asrs	r3, r4, #20
 8008a9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008aa2:	4413      	add	r3, r2
 8008aa4:	9305      	str	r3, [sp, #20]
 8008aa6:	4bd0      	ldr	r3, [pc, #832]	; (8008de8 <__ieee754_pow+0x760>)
 8008aa8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008aac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008ab0:	429c      	cmp	r4, r3
 8008ab2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008ab6:	dd08      	ble.n	8008aca <__ieee754_pow+0x442>
 8008ab8:	4bcc      	ldr	r3, [pc, #816]	; (8008dec <__ieee754_pow+0x764>)
 8008aba:	429c      	cmp	r4, r3
 8008abc:	f340 8162 	ble.w	8008d84 <__ieee754_pow+0x6fc>
 8008ac0:	9b05      	ldr	r3, [sp, #20]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	9305      	str	r3, [sp, #20]
 8008ac6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008aca:	2400      	movs	r4, #0
 8008acc:	00e3      	lsls	r3, r4, #3
 8008ace:	9307      	str	r3, [sp, #28]
 8008ad0:	4bc7      	ldr	r3, [pc, #796]	; (8008df0 <__ieee754_pow+0x768>)
 8008ad2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ad6:	ed93 7b00 	vldr	d7, [r3]
 8008ada:	4629      	mov	r1, r5
 8008adc:	ec53 2b17 	vmov	r2, r3, d7
 8008ae0:	eeb0 9a47 	vmov.f32	s18, s14
 8008ae4:	eef0 9a67 	vmov.f32	s19, s15
 8008ae8:	4682      	mov	sl, r0
 8008aea:	f7f7 fb79 	bl	80001e0 <__aeabi_dsub>
 8008aee:	4652      	mov	r2, sl
 8008af0:	4606      	mov	r6, r0
 8008af2:	460f      	mov	r7, r1
 8008af4:	462b      	mov	r3, r5
 8008af6:	ec51 0b19 	vmov	r0, r1, d9
 8008afa:	f7f7 fb73 	bl	80001e4 <__adddf3>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	2000      	movs	r0, #0
 8008b04:	49bb      	ldr	r1, [pc, #748]	; (8008df4 <__ieee754_pow+0x76c>)
 8008b06:	f7f7 fe4d 	bl	80007a4 <__aeabi_ddiv>
 8008b0a:	ec41 0b1a 	vmov	d10, r0, r1
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4630      	mov	r0, r6
 8008b14:	4639      	mov	r1, r7
 8008b16:	f7f7 fd1b 	bl	8000550 <__aeabi_dmul>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b20:	9302      	str	r3, [sp, #8]
 8008b22:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008b26:	46ab      	mov	fp, r5
 8008b28:	106d      	asrs	r5, r5, #1
 8008b2a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008b2e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008b32:	ec41 0b18 	vmov	d8, r0, r1
 8008b36:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	4640      	mov	r0, r8
 8008b3e:	4649      	mov	r1, r9
 8008b40:	4614      	mov	r4, r2
 8008b42:	461d      	mov	r5, r3
 8008b44:	f7f7 fd04 	bl	8000550 <__aeabi_dmul>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	4639      	mov	r1, r7
 8008b50:	f7f7 fb46 	bl	80001e0 <__aeabi_dsub>
 8008b54:	ec53 2b19 	vmov	r2, r3, d9
 8008b58:	4606      	mov	r6, r0
 8008b5a:	460f      	mov	r7, r1
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	4629      	mov	r1, r5
 8008b60:	f7f7 fb3e 	bl	80001e0 <__aeabi_dsub>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	4650      	mov	r0, sl
 8008b6a:	4659      	mov	r1, fp
 8008b6c:	f7f7 fb38 	bl	80001e0 <__aeabi_dsub>
 8008b70:	4642      	mov	r2, r8
 8008b72:	464b      	mov	r3, r9
 8008b74:	f7f7 fcec 	bl	8000550 <__aeabi_dmul>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	4639      	mov	r1, r7
 8008b80:	f7f7 fb2e 	bl	80001e0 <__aeabi_dsub>
 8008b84:	ec53 2b1a 	vmov	r2, r3, d10
 8008b88:	f7f7 fce2 	bl	8000550 <__aeabi_dmul>
 8008b8c:	ec53 2b18 	vmov	r2, r3, d8
 8008b90:	ec41 0b19 	vmov	d9, r0, r1
 8008b94:	ec51 0b18 	vmov	r0, r1, d8
 8008b98:	f7f7 fcda 	bl	8000550 <__aeabi_dmul>
 8008b9c:	a37c      	add	r3, pc, #496	; (adr r3, 8008d90 <__ieee754_pow+0x708>)
 8008b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	460d      	mov	r5, r1
 8008ba6:	f7f7 fcd3 	bl	8000550 <__aeabi_dmul>
 8008baa:	a37b      	add	r3, pc, #492	; (adr r3, 8008d98 <__ieee754_pow+0x710>)
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f7f7 fb18 	bl	80001e4 <__adddf3>
 8008bb4:	4622      	mov	r2, r4
 8008bb6:	462b      	mov	r3, r5
 8008bb8:	f7f7 fcca 	bl	8000550 <__aeabi_dmul>
 8008bbc:	a378      	add	r3, pc, #480	; (adr r3, 8008da0 <__ieee754_pow+0x718>)
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	f7f7 fb0f 	bl	80001e4 <__adddf3>
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	462b      	mov	r3, r5
 8008bca:	f7f7 fcc1 	bl	8000550 <__aeabi_dmul>
 8008bce:	a376      	add	r3, pc, #472	; (adr r3, 8008da8 <__ieee754_pow+0x720>)
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f7f7 fb06 	bl	80001e4 <__adddf3>
 8008bd8:	4622      	mov	r2, r4
 8008bda:	462b      	mov	r3, r5
 8008bdc:	f7f7 fcb8 	bl	8000550 <__aeabi_dmul>
 8008be0:	a373      	add	r3, pc, #460	; (adr r3, 8008db0 <__ieee754_pow+0x728>)
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	f7f7 fafd 	bl	80001e4 <__adddf3>
 8008bea:	4622      	mov	r2, r4
 8008bec:	462b      	mov	r3, r5
 8008bee:	f7f7 fcaf 	bl	8000550 <__aeabi_dmul>
 8008bf2:	a371      	add	r3, pc, #452	; (adr r3, 8008db8 <__ieee754_pow+0x730>)
 8008bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf8:	f7f7 faf4 	bl	80001e4 <__adddf3>
 8008bfc:	4622      	mov	r2, r4
 8008bfe:	4606      	mov	r6, r0
 8008c00:	460f      	mov	r7, r1
 8008c02:	462b      	mov	r3, r5
 8008c04:	4620      	mov	r0, r4
 8008c06:	4629      	mov	r1, r5
 8008c08:	f7f7 fca2 	bl	8000550 <__aeabi_dmul>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4630      	mov	r0, r6
 8008c12:	4639      	mov	r1, r7
 8008c14:	f7f7 fc9c 	bl	8000550 <__aeabi_dmul>
 8008c18:	4642      	mov	r2, r8
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	460d      	mov	r5, r1
 8008c1e:	464b      	mov	r3, r9
 8008c20:	ec51 0b18 	vmov	r0, r1, d8
 8008c24:	f7f7 fade 	bl	80001e4 <__adddf3>
 8008c28:	ec53 2b19 	vmov	r2, r3, d9
 8008c2c:	f7f7 fc90 	bl	8000550 <__aeabi_dmul>
 8008c30:	4622      	mov	r2, r4
 8008c32:	462b      	mov	r3, r5
 8008c34:	f7f7 fad6 	bl	80001e4 <__adddf3>
 8008c38:	4642      	mov	r2, r8
 8008c3a:	4682      	mov	sl, r0
 8008c3c:	468b      	mov	fp, r1
 8008c3e:	464b      	mov	r3, r9
 8008c40:	4640      	mov	r0, r8
 8008c42:	4649      	mov	r1, r9
 8008c44:	f7f7 fc84 	bl	8000550 <__aeabi_dmul>
 8008c48:	4b6b      	ldr	r3, [pc, #428]	; (8008df8 <__ieee754_pow+0x770>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	4606      	mov	r6, r0
 8008c4e:	460f      	mov	r7, r1
 8008c50:	f7f7 fac8 	bl	80001e4 <__adddf3>
 8008c54:	4652      	mov	r2, sl
 8008c56:	465b      	mov	r3, fp
 8008c58:	f7f7 fac4 	bl	80001e4 <__adddf3>
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	4604      	mov	r4, r0
 8008c60:	460d      	mov	r5, r1
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4640      	mov	r0, r8
 8008c68:	4649      	mov	r1, r9
 8008c6a:	f7f7 fc71 	bl	8000550 <__aeabi_dmul>
 8008c6e:	4b62      	ldr	r3, [pc, #392]	; (8008df8 <__ieee754_pow+0x770>)
 8008c70:	4680      	mov	r8, r0
 8008c72:	4689      	mov	r9, r1
 8008c74:	2200      	movs	r2, #0
 8008c76:	4620      	mov	r0, r4
 8008c78:	4629      	mov	r1, r5
 8008c7a:	f7f7 fab1 	bl	80001e0 <__aeabi_dsub>
 8008c7e:	4632      	mov	r2, r6
 8008c80:	463b      	mov	r3, r7
 8008c82:	f7f7 faad 	bl	80001e0 <__aeabi_dsub>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4650      	mov	r0, sl
 8008c8c:	4659      	mov	r1, fp
 8008c8e:	f7f7 faa7 	bl	80001e0 <__aeabi_dsub>
 8008c92:	ec53 2b18 	vmov	r2, r3, d8
 8008c96:	f7f7 fc5b 	bl	8000550 <__aeabi_dmul>
 8008c9a:	4622      	mov	r2, r4
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	460f      	mov	r7, r1
 8008ca0:	462b      	mov	r3, r5
 8008ca2:	ec51 0b19 	vmov	r0, r1, d9
 8008ca6:	f7f7 fc53 	bl	8000550 <__aeabi_dmul>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4630      	mov	r0, r6
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	f7f7 fa97 	bl	80001e4 <__adddf3>
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	460f      	mov	r7, r1
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	f7f7 fa8f 	bl	80001e4 <__adddf3>
 8008cc6:	a33e      	add	r3, pc, #248	; (adr r3, 8008dc0 <__ieee754_pow+0x738>)
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	2000      	movs	r0, #0
 8008cce:	4604      	mov	r4, r0
 8008cd0:	460d      	mov	r5, r1
 8008cd2:	f7f7 fc3d 	bl	8000550 <__aeabi_dmul>
 8008cd6:	4642      	mov	r2, r8
 8008cd8:	ec41 0b18 	vmov	d8, r0, r1
 8008cdc:	464b      	mov	r3, r9
 8008cde:	4620      	mov	r0, r4
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	f7f7 fa7d 	bl	80001e0 <__aeabi_dsub>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4630      	mov	r0, r6
 8008cec:	4639      	mov	r1, r7
 8008cee:	f7f7 fa77 	bl	80001e0 <__aeabi_dsub>
 8008cf2:	a335      	add	r3, pc, #212	; (adr r3, 8008dc8 <__ieee754_pow+0x740>)
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	f7f7 fc2a 	bl	8000550 <__aeabi_dmul>
 8008cfc:	a334      	add	r3, pc, #208	; (adr r3, 8008dd0 <__ieee754_pow+0x748>)
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	4606      	mov	r6, r0
 8008d04:	460f      	mov	r7, r1
 8008d06:	4620      	mov	r0, r4
 8008d08:	4629      	mov	r1, r5
 8008d0a:	f7f7 fc21 	bl	8000550 <__aeabi_dmul>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4630      	mov	r0, r6
 8008d14:	4639      	mov	r1, r7
 8008d16:	f7f7 fa65 	bl	80001e4 <__adddf3>
 8008d1a:	9a07      	ldr	r2, [sp, #28]
 8008d1c:	4b37      	ldr	r3, [pc, #220]	; (8008dfc <__ieee754_pow+0x774>)
 8008d1e:	4413      	add	r3, r2
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	f7f7 fa5e 	bl	80001e4 <__adddf3>
 8008d28:	4682      	mov	sl, r0
 8008d2a:	9805      	ldr	r0, [sp, #20]
 8008d2c:	468b      	mov	fp, r1
 8008d2e:	f7f7 fba5 	bl	800047c <__aeabi_i2d>
 8008d32:	9a07      	ldr	r2, [sp, #28]
 8008d34:	4b32      	ldr	r3, [pc, #200]	; (8008e00 <__ieee754_pow+0x778>)
 8008d36:	4413      	add	r3, r2
 8008d38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	460f      	mov	r7, r1
 8008d40:	4652      	mov	r2, sl
 8008d42:	465b      	mov	r3, fp
 8008d44:	ec51 0b18 	vmov	r0, r1, d8
 8008d48:	f7f7 fa4c 	bl	80001e4 <__adddf3>
 8008d4c:	4642      	mov	r2, r8
 8008d4e:	464b      	mov	r3, r9
 8008d50:	f7f7 fa48 	bl	80001e4 <__adddf3>
 8008d54:	4632      	mov	r2, r6
 8008d56:	463b      	mov	r3, r7
 8008d58:	f7f7 fa44 	bl	80001e4 <__adddf3>
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	4632      	mov	r2, r6
 8008d60:	463b      	mov	r3, r7
 8008d62:	4604      	mov	r4, r0
 8008d64:	460d      	mov	r5, r1
 8008d66:	f7f7 fa3b 	bl	80001e0 <__aeabi_dsub>
 8008d6a:	4642      	mov	r2, r8
 8008d6c:	464b      	mov	r3, r9
 8008d6e:	f7f7 fa37 	bl	80001e0 <__aeabi_dsub>
 8008d72:	ec53 2b18 	vmov	r2, r3, d8
 8008d76:	f7f7 fa33 	bl	80001e0 <__aeabi_dsub>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4650      	mov	r0, sl
 8008d80:	4659      	mov	r1, fp
 8008d82:	e610      	b.n	80089a6 <__ieee754_pow+0x31e>
 8008d84:	2401      	movs	r4, #1
 8008d86:	e6a1      	b.n	8008acc <__ieee754_pow+0x444>
 8008d88:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008dd8 <__ieee754_pow+0x750>
 8008d8c:	e617      	b.n	80089be <__ieee754_pow+0x336>
 8008d8e:	bf00      	nop
 8008d90:	4a454eef 	.word	0x4a454eef
 8008d94:	3fca7e28 	.word	0x3fca7e28
 8008d98:	93c9db65 	.word	0x93c9db65
 8008d9c:	3fcd864a 	.word	0x3fcd864a
 8008da0:	a91d4101 	.word	0xa91d4101
 8008da4:	3fd17460 	.word	0x3fd17460
 8008da8:	518f264d 	.word	0x518f264d
 8008dac:	3fd55555 	.word	0x3fd55555
 8008db0:	db6fabff 	.word	0xdb6fabff
 8008db4:	3fdb6db6 	.word	0x3fdb6db6
 8008db8:	33333303 	.word	0x33333303
 8008dbc:	3fe33333 	.word	0x3fe33333
 8008dc0:	e0000000 	.word	0xe0000000
 8008dc4:	3feec709 	.word	0x3feec709
 8008dc8:	dc3a03fd 	.word	0xdc3a03fd
 8008dcc:	3feec709 	.word	0x3feec709
 8008dd0:	145b01f5 	.word	0x145b01f5
 8008dd4:	be3e2fe0 	.word	0xbe3e2fe0
 8008dd8:	00000000 	.word	0x00000000
 8008ddc:	3ff00000 	.word	0x3ff00000
 8008de0:	7ff00000 	.word	0x7ff00000
 8008de4:	43400000 	.word	0x43400000
 8008de8:	0003988e 	.word	0x0003988e
 8008dec:	000bb679 	.word	0x000bb679
 8008df0:	08009418 	.word	0x08009418
 8008df4:	3ff00000 	.word	0x3ff00000
 8008df8:	40080000 	.word	0x40080000
 8008dfc:	08009438 	.word	0x08009438
 8008e00:	08009428 	.word	0x08009428
 8008e04:	a3b5      	add	r3, pc, #724	; (adr r3, 80090dc <__ieee754_pow+0xa54>)
 8008e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	f7f7 f9e9 	bl	80001e4 <__adddf3>
 8008e12:	4622      	mov	r2, r4
 8008e14:	ec41 0b1a 	vmov	d10, r0, r1
 8008e18:	462b      	mov	r3, r5
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	4639      	mov	r1, r7
 8008e1e:	f7f7 f9df 	bl	80001e0 <__aeabi_dsub>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	ec51 0b1a 	vmov	r0, r1, d10
 8008e2a:	f7f7 fe21 	bl	8000a70 <__aeabi_dcmpgt>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	f47f ae04 	bne.w	8008a3c <__ieee754_pow+0x3b4>
 8008e34:	4aa4      	ldr	r2, [pc, #656]	; (80090c8 <__ieee754_pow+0xa40>)
 8008e36:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	f340 8108 	ble.w	8009050 <__ieee754_pow+0x9c8>
 8008e40:	151b      	asrs	r3, r3, #20
 8008e42:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008e46:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008e4a:	fa4a f303 	asr.w	r3, sl, r3
 8008e4e:	445b      	add	r3, fp
 8008e50:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008e54:	4e9d      	ldr	r6, [pc, #628]	; (80090cc <__ieee754_pow+0xa44>)
 8008e56:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008e5a:	4116      	asrs	r6, r2
 8008e5c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008e60:	2000      	movs	r0, #0
 8008e62:	ea23 0106 	bic.w	r1, r3, r6
 8008e66:	f1c2 0214 	rsb	r2, r2, #20
 8008e6a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008e6e:	fa4a fa02 	asr.w	sl, sl, r2
 8008e72:	f1bb 0f00 	cmp.w	fp, #0
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	bfb8      	it	lt
 8008e80:	f1ca 0a00 	rsblt	sl, sl, #0
 8008e84:	f7f7 f9ac 	bl	80001e0 <__aeabi_dsub>
 8008e88:	ec41 0b19 	vmov	d9, r0, r1
 8008e8c:	4642      	mov	r2, r8
 8008e8e:	464b      	mov	r3, r9
 8008e90:	ec51 0b19 	vmov	r0, r1, d9
 8008e94:	f7f7 f9a6 	bl	80001e4 <__adddf3>
 8008e98:	a37b      	add	r3, pc, #492	; (adr r3, 8009088 <__ieee754_pow+0xa00>)
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	460d      	mov	r5, r1
 8008ea4:	f7f7 fb54 	bl	8000550 <__aeabi_dmul>
 8008ea8:	ec53 2b19 	vmov	r2, r3, d9
 8008eac:	4606      	mov	r6, r0
 8008eae:	460f      	mov	r7, r1
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	f7f7 f994 	bl	80001e0 <__aeabi_dsub>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	f7f7 f98e 	bl	80001e0 <__aeabi_dsub>
 8008ec4:	a372      	add	r3, pc, #456	; (adr r3, 8009090 <__ieee754_pow+0xa08>)
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	f7f7 fb41 	bl	8000550 <__aeabi_dmul>
 8008ece:	a372      	add	r3, pc, #456	; (adr r3, 8009098 <__ieee754_pow+0xa10>)
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	4680      	mov	r8, r0
 8008ed6:	4689      	mov	r9, r1
 8008ed8:	4620      	mov	r0, r4
 8008eda:	4629      	mov	r1, r5
 8008edc:	f7f7 fb38 	bl	8000550 <__aeabi_dmul>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4640      	mov	r0, r8
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	f7f7 f97c 	bl	80001e4 <__adddf3>
 8008eec:	4604      	mov	r4, r0
 8008eee:	460d      	mov	r5, r1
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	4639      	mov	r1, r7
 8008ef8:	f7f7 f974 	bl	80001e4 <__adddf3>
 8008efc:	4632      	mov	r2, r6
 8008efe:	463b      	mov	r3, r7
 8008f00:	4680      	mov	r8, r0
 8008f02:	4689      	mov	r9, r1
 8008f04:	f7f7 f96c 	bl	80001e0 <__aeabi_dsub>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	4629      	mov	r1, r5
 8008f10:	f7f7 f966 	bl	80001e0 <__aeabi_dsub>
 8008f14:	4642      	mov	r2, r8
 8008f16:	4606      	mov	r6, r0
 8008f18:	460f      	mov	r7, r1
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	4649      	mov	r1, r9
 8008f20:	f7f7 fb16 	bl	8000550 <__aeabi_dmul>
 8008f24:	a35e      	add	r3, pc, #376	; (adr r3, 80090a0 <__ieee754_pow+0xa18>)
 8008f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	460d      	mov	r5, r1
 8008f2e:	f7f7 fb0f 	bl	8000550 <__aeabi_dmul>
 8008f32:	a35d      	add	r3, pc, #372	; (adr r3, 80090a8 <__ieee754_pow+0xa20>)
 8008f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f38:	f7f7 f952 	bl	80001e0 <__aeabi_dsub>
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	462b      	mov	r3, r5
 8008f40:	f7f7 fb06 	bl	8000550 <__aeabi_dmul>
 8008f44:	a35a      	add	r3, pc, #360	; (adr r3, 80090b0 <__ieee754_pow+0xa28>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	f7f7 f94b 	bl	80001e4 <__adddf3>
 8008f4e:	4622      	mov	r2, r4
 8008f50:	462b      	mov	r3, r5
 8008f52:	f7f7 fafd 	bl	8000550 <__aeabi_dmul>
 8008f56:	a358      	add	r3, pc, #352	; (adr r3, 80090b8 <__ieee754_pow+0xa30>)
 8008f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5c:	f7f7 f940 	bl	80001e0 <__aeabi_dsub>
 8008f60:	4622      	mov	r2, r4
 8008f62:	462b      	mov	r3, r5
 8008f64:	f7f7 faf4 	bl	8000550 <__aeabi_dmul>
 8008f68:	a355      	add	r3, pc, #340	; (adr r3, 80090c0 <__ieee754_pow+0xa38>)
 8008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6e:	f7f7 f939 	bl	80001e4 <__adddf3>
 8008f72:	4622      	mov	r2, r4
 8008f74:	462b      	mov	r3, r5
 8008f76:	f7f7 faeb 	bl	8000550 <__aeabi_dmul>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	4640      	mov	r0, r8
 8008f80:	4649      	mov	r1, r9
 8008f82:	f7f7 f92d 	bl	80001e0 <__aeabi_dsub>
 8008f86:	4604      	mov	r4, r0
 8008f88:	460d      	mov	r5, r1
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4640      	mov	r0, r8
 8008f90:	4649      	mov	r1, r9
 8008f92:	f7f7 fadd 	bl	8000550 <__aeabi_dmul>
 8008f96:	2200      	movs	r2, #0
 8008f98:	ec41 0b19 	vmov	d9, r0, r1
 8008f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	f7f7 f91c 	bl	80001e0 <__aeabi_dsub>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	ec51 0b19 	vmov	r0, r1, d9
 8008fb0:	f7f7 fbf8 	bl	80007a4 <__aeabi_ddiv>
 8008fb4:	4632      	mov	r2, r6
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	460d      	mov	r5, r1
 8008fba:	463b      	mov	r3, r7
 8008fbc:	4640      	mov	r0, r8
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	f7f7 fac6 	bl	8000550 <__aeabi_dmul>
 8008fc4:	4632      	mov	r2, r6
 8008fc6:	463b      	mov	r3, r7
 8008fc8:	f7f7 f90c 	bl	80001e4 <__adddf3>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	f7f7 f904 	bl	80001e0 <__aeabi_dsub>
 8008fd8:	4642      	mov	r2, r8
 8008fda:	464b      	mov	r3, r9
 8008fdc:	f7f7 f900 	bl	80001e0 <__aeabi_dsub>
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	493a      	ldr	r1, [pc, #232]	; (80090d0 <__ieee754_pow+0xa48>)
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	f7f7 f8fa 	bl	80001e0 <__aeabi_dsub>
 8008fec:	ec41 0b10 	vmov	d0, r0, r1
 8008ff0:	ee10 3a90 	vmov	r3, s1
 8008ff4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008ff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ffc:	da2b      	bge.n	8009056 <__ieee754_pow+0x9ce>
 8008ffe:	4650      	mov	r0, sl
 8009000:	f000 f966 	bl	80092d0 <scalbn>
 8009004:	ec51 0b10 	vmov	r0, r1, d0
 8009008:	ec53 2b18 	vmov	r2, r3, d8
 800900c:	f7ff bbed 	b.w	80087ea <__ieee754_pow+0x162>
 8009010:	4b30      	ldr	r3, [pc, #192]	; (80090d4 <__ieee754_pow+0xa4c>)
 8009012:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009016:	429e      	cmp	r6, r3
 8009018:	f77f af0c 	ble.w	8008e34 <__ieee754_pow+0x7ac>
 800901c:	4b2e      	ldr	r3, [pc, #184]	; (80090d8 <__ieee754_pow+0xa50>)
 800901e:	440b      	add	r3, r1
 8009020:	4303      	orrs	r3, r0
 8009022:	d009      	beq.n	8009038 <__ieee754_pow+0x9b0>
 8009024:	ec51 0b18 	vmov	r0, r1, d8
 8009028:	2200      	movs	r2, #0
 800902a:	2300      	movs	r3, #0
 800902c:	f7f7 fd02 	bl	8000a34 <__aeabi_dcmplt>
 8009030:	3800      	subs	r0, #0
 8009032:	bf18      	it	ne
 8009034:	2001      	movne	r0, #1
 8009036:	e447      	b.n	80088c8 <__ieee754_pow+0x240>
 8009038:	4622      	mov	r2, r4
 800903a:	462b      	mov	r3, r5
 800903c:	f7f7 f8d0 	bl	80001e0 <__aeabi_dsub>
 8009040:	4642      	mov	r2, r8
 8009042:	464b      	mov	r3, r9
 8009044:	f7f7 fd0a 	bl	8000a5c <__aeabi_dcmpge>
 8009048:	2800      	cmp	r0, #0
 800904a:	f43f aef3 	beq.w	8008e34 <__ieee754_pow+0x7ac>
 800904e:	e7e9      	b.n	8009024 <__ieee754_pow+0x99c>
 8009050:	f04f 0a00 	mov.w	sl, #0
 8009054:	e71a      	b.n	8008e8c <__ieee754_pow+0x804>
 8009056:	ec51 0b10 	vmov	r0, r1, d0
 800905a:	4619      	mov	r1, r3
 800905c:	e7d4      	b.n	8009008 <__ieee754_pow+0x980>
 800905e:	491c      	ldr	r1, [pc, #112]	; (80090d0 <__ieee754_pow+0xa48>)
 8009060:	2000      	movs	r0, #0
 8009062:	f7ff bb30 	b.w	80086c6 <__ieee754_pow+0x3e>
 8009066:	2000      	movs	r0, #0
 8009068:	2100      	movs	r1, #0
 800906a:	f7ff bb2c 	b.w	80086c6 <__ieee754_pow+0x3e>
 800906e:	4630      	mov	r0, r6
 8009070:	4639      	mov	r1, r7
 8009072:	f7ff bb28 	b.w	80086c6 <__ieee754_pow+0x3e>
 8009076:	9204      	str	r2, [sp, #16]
 8009078:	f7ff bb7a 	b.w	8008770 <__ieee754_pow+0xe8>
 800907c:	2300      	movs	r3, #0
 800907e:	f7ff bb64 	b.w	800874a <__ieee754_pow+0xc2>
 8009082:	bf00      	nop
 8009084:	f3af 8000 	nop.w
 8009088:	00000000 	.word	0x00000000
 800908c:	3fe62e43 	.word	0x3fe62e43
 8009090:	fefa39ef 	.word	0xfefa39ef
 8009094:	3fe62e42 	.word	0x3fe62e42
 8009098:	0ca86c39 	.word	0x0ca86c39
 800909c:	be205c61 	.word	0xbe205c61
 80090a0:	72bea4d0 	.word	0x72bea4d0
 80090a4:	3e663769 	.word	0x3e663769
 80090a8:	c5d26bf1 	.word	0xc5d26bf1
 80090ac:	3ebbbd41 	.word	0x3ebbbd41
 80090b0:	af25de2c 	.word	0xaf25de2c
 80090b4:	3f11566a 	.word	0x3f11566a
 80090b8:	16bebd93 	.word	0x16bebd93
 80090bc:	3f66c16c 	.word	0x3f66c16c
 80090c0:	5555553e 	.word	0x5555553e
 80090c4:	3fc55555 	.word	0x3fc55555
 80090c8:	3fe00000 	.word	0x3fe00000
 80090cc:	000fffff 	.word	0x000fffff
 80090d0:	3ff00000 	.word	0x3ff00000
 80090d4:	4090cbff 	.word	0x4090cbff
 80090d8:	3f6f3400 	.word	0x3f6f3400
 80090dc:	652b82fe 	.word	0x652b82fe
 80090e0:	3c971547 	.word	0x3c971547

080090e4 <__ieee754_sqrt>:
 80090e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e8:	ec55 4b10 	vmov	r4, r5, d0
 80090ec:	4e55      	ldr	r6, [pc, #340]	; (8009244 <__ieee754_sqrt+0x160>)
 80090ee:	43ae      	bics	r6, r5
 80090f0:	ee10 0a10 	vmov	r0, s0
 80090f4:	ee10 3a10 	vmov	r3, s0
 80090f8:	462a      	mov	r2, r5
 80090fa:	4629      	mov	r1, r5
 80090fc:	d110      	bne.n	8009120 <__ieee754_sqrt+0x3c>
 80090fe:	ee10 2a10 	vmov	r2, s0
 8009102:	462b      	mov	r3, r5
 8009104:	f7f7 fa24 	bl	8000550 <__aeabi_dmul>
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	4620      	mov	r0, r4
 800910e:	4629      	mov	r1, r5
 8009110:	f7f7 f868 	bl	80001e4 <__adddf3>
 8009114:	4604      	mov	r4, r0
 8009116:	460d      	mov	r5, r1
 8009118:	ec45 4b10 	vmov	d0, r4, r5
 800911c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009120:	2d00      	cmp	r5, #0
 8009122:	dc10      	bgt.n	8009146 <__ieee754_sqrt+0x62>
 8009124:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009128:	4330      	orrs	r0, r6
 800912a:	d0f5      	beq.n	8009118 <__ieee754_sqrt+0x34>
 800912c:	b15d      	cbz	r5, 8009146 <__ieee754_sqrt+0x62>
 800912e:	ee10 2a10 	vmov	r2, s0
 8009132:	462b      	mov	r3, r5
 8009134:	ee10 0a10 	vmov	r0, s0
 8009138:	f7f7 f852 	bl	80001e0 <__aeabi_dsub>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	f7f7 fb30 	bl	80007a4 <__aeabi_ddiv>
 8009144:	e7e6      	b.n	8009114 <__ieee754_sqrt+0x30>
 8009146:	1512      	asrs	r2, r2, #20
 8009148:	d074      	beq.n	8009234 <__ieee754_sqrt+0x150>
 800914a:	07d4      	lsls	r4, r2, #31
 800914c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009150:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009154:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009158:	bf5e      	ittt	pl
 800915a:	0fda      	lsrpl	r2, r3, #31
 800915c:	005b      	lslpl	r3, r3, #1
 800915e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009162:	2400      	movs	r4, #0
 8009164:	0fda      	lsrs	r2, r3, #31
 8009166:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800916a:	107f      	asrs	r7, r7, #1
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	2516      	movs	r5, #22
 8009170:	4620      	mov	r0, r4
 8009172:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009176:	1886      	adds	r6, r0, r2
 8009178:	428e      	cmp	r6, r1
 800917a:	bfde      	ittt	le
 800917c:	1b89      	suble	r1, r1, r6
 800917e:	18b0      	addle	r0, r6, r2
 8009180:	18a4      	addle	r4, r4, r2
 8009182:	0049      	lsls	r1, r1, #1
 8009184:	3d01      	subs	r5, #1
 8009186:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800918a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800918e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009192:	d1f0      	bne.n	8009176 <__ieee754_sqrt+0x92>
 8009194:	462a      	mov	r2, r5
 8009196:	f04f 0e20 	mov.w	lr, #32
 800919a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800919e:	4281      	cmp	r1, r0
 80091a0:	eb06 0c05 	add.w	ip, r6, r5
 80091a4:	dc02      	bgt.n	80091ac <__ieee754_sqrt+0xc8>
 80091a6:	d113      	bne.n	80091d0 <__ieee754_sqrt+0xec>
 80091a8:	459c      	cmp	ip, r3
 80091aa:	d811      	bhi.n	80091d0 <__ieee754_sqrt+0xec>
 80091ac:	f1bc 0f00 	cmp.w	ip, #0
 80091b0:	eb0c 0506 	add.w	r5, ip, r6
 80091b4:	da43      	bge.n	800923e <__ieee754_sqrt+0x15a>
 80091b6:	2d00      	cmp	r5, #0
 80091b8:	db41      	blt.n	800923e <__ieee754_sqrt+0x15a>
 80091ba:	f100 0801 	add.w	r8, r0, #1
 80091be:	1a09      	subs	r1, r1, r0
 80091c0:	459c      	cmp	ip, r3
 80091c2:	bf88      	it	hi
 80091c4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80091c8:	eba3 030c 	sub.w	r3, r3, ip
 80091cc:	4432      	add	r2, r6
 80091ce:	4640      	mov	r0, r8
 80091d0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80091d4:	f1be 0e01 	subs.w	lr, lr, #1
 80091d8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80091dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80091e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80091e4:	d1db      	bne.n	800919e <__ieee754_sqrt+0xba>
 80091e6:	430b      	orrs	r3, r1
 80091e8:	d006      	beq.n	80091f8 <__ieee754_sqrt+0x114>
 80091ea:	1c50      	adds	r0, r2, #1
 80091ec:	bf13      	iteet	ne
 80091ee:	3201      	addne	r2, #1
 80091f0:	3401      	addeq	r4, #1
 80091f2:	4672      	moveq	r2, lr
 80091f4:	f022 0201 	bicne.w	r2, r2, #1
 80091f8:	1063      	asrs	r3, r4, #1
 80091fa:	0852      	lsrs	r2, r2, #1
 80091fc:	07e1      	lsls	r1, r4, #31
 80091fe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009202:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009206:	bf48      	it	mi
 8009208:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800920c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009210:	4614      	mov	r4, r2
 8009212:	e781      	b.n	8009118 <__ieee754_sqrt+0x34>
 8009214:	0ad9      	lsrs	r1, r3, #11
 8009216:	3815      	subs	r0, #21
 8009218:	055b      	lsls	r3, r3, #21
 800921a:	2900      	cmp	r1, #0
 800921c:	d0fa      	beq.n	8009214 <__ieee754_sqrt+0x130>
 800921e:	02cd      	lsls	r5, r1, #11
 8009220:	d50a      	bpl.n	8009238 <__ieee754_sqrt+0x154>
 8009222:	f1c2 0420 	rsb	r4, r2, #32
 8009226:	fa23 f404 	lsr.w	r4, r3, r4
 800922a:	1e55      	subs	r5, r2, #1
 800922c:	4093      	lsls	r3, r2
 800922e:	4321      	orrs	r1, r4
 8009230:	1b42      	subs	r2, r0, r5
 8009232:	e78a      	b.n	800914a <__ieee754_sqrt+0x66>
 8009234:	4610      	mov	r0, r2
 8009236:	e7f0      	b.n	800921a <__ieee754_sqrt+0x136>
 8009238:	0049      	lsls	r1, r1, #1
 800923a:	3201      	adds	r2, #1
 800923c:	e7ef      	b.n	800921e <__ieee754_sqrt+0x13a>
 800923e:	4680      	mov	r8, r0
 8009240:	e7bd      	b.n	80091be <__ieee754_sqrt+0xda>
 8009242:	bf00      	nop
 8009244:	7ff00000 	.word	0x7ff00000

08009248 <with_errno>:
 8009248:	b570      	push	{r4, r5, r6, lr}
 800924a:	4604      	mov	r4, r0
 800924c:	460d      	mov	r5, r1
 800924e:	4616      	mov	r6, r2
 8009250:	f7ff f968 	bl	8008524 <__errno>
 8009254:	4629      	mov	r1, r5
 8009256:	6006      	str	r6, [r0, #0]
 8009258:	4620      	mov	r0, r4
 800925a:	bd70      	pop	{r4, r5, r6, pc}

0800925c <xflow>:
 800925c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800925e:	4614      	mov	r4, r2
 8009260:	461d      	mov	r5, r3
 8009262:	b108      	cbz	r0, 8009268 <xflow+0xc>
 8009264:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009268:	e9cd 2300 	strd	r2, r3, [sp]
 800926c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009270:	4620      	mov	r0, r4
 8009272:	4629      	mov	r1, r5
 8009274:	f7f7 f96c 	bl	8000550 <__aeabi_dmul>
 8009278:	2222      	movs	r2, #34	; 0x22
 800927a:	b003      	add	sp, #12
 800927c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009280:	f7ff bfe2 	b.w	8009248 <with_errno>

08009284 <__math_uflow>:
 8009284:	b508      	push	{r3, lr}
 8009286:	2200      	movs	r2, #0
 8009288:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800928c:	f7ff ffe6 	bl	800925c <xflow>
 8009290:	ec41 0b10 	vmov	d0, r0, r1
 8009294:	bd08      	pop	{r3, pc}

08009296 <__math_oflow>:
 8009296:	b508      	push	{r3, lr}
 8009298:	2200      	movs	r2, #0
 800929a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800929e:	f7ff ffdd 	bl	800925c <xflow>
 80092a2:	ec41 0b10 	vmov	d0, r0, r1
 80092a6:	bd08      	pop	{r3, pc}

080092a8 <fabs>:
 80092a8:	ec51 0b10 	vmov	r0, r1, d0
 80092ac:	ee10 2a10 	vmov	r2, s0
 80092b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80092b4:	ec43 2b10 	vmov	d0, r2, r3
 80092b8:	4770      	bx	lr

080092ba <finite>:
 80092ba:	b082      	sub	sp, #8
 80092bc:	ed8d 0b00 	vstr	d0, [sp]
 80092c0:	9801      	ldr	r0, [sp, #4]
 80092c2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80092c6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80092ca:	0fc0      	lsrs	r0, r0, #31
 80092cc:	b002      	add	sp, #8
 80092ce:	4770      	bx	lr

080092d0 <scalbn>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	ec55 4b10 	vmov	r4, r5, d0
 80092d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80092da:	4606      	mov	r6, r0
 80092dc:	462b      	mov	r3, r5
 80092de:	b99a      	cbnz	r2, 8009308 <scalbn+0x38>
 80092e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80092e4:	4323      	orrs	r3, r4
 80092e6:	d036      	beq.n	8009356 <scalbn+0x86>
 80092e8:	4b39      	ldr	r3, [pc, #228]	; (80093d0 <scalbn+0x100>)
 80092ea:	4629      	mov	r1, r5
 80092ec:	ee10 0a10 	vmov	r0, s0
 80092f0:	2200      	movs	r2, #0
 80092f2:	f7f7 f92d 	bl	8000550 <__aeabi_dmul>
 80092f6:	4b37      	ldr	r3, [pc, #220]	; (80093d4 <scalbn+0x104>)
 80092f8:	429e      	cmp	r6, r3
 80092fa:	4604      	mov	r4, r0
 80092fc:	460d      	mov	r5, r1
 80092fe:	da10      	bge.n	8009322 <scalbn+0x52>
 8009300:	a32b      	add	r3, pc, #172	; (adr r3, 80093b0 <scalbn+0xe0>)
 8009302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009306:	e03a      	b.n	800937e <scalbn+0xae>
 8009308:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800930c:	428a      	cmp	r2, r1
 800930e:	d10c      	bne.n	800932a <scalbn+0x5a>
 8009310:	ee10 2a10 	vmov	r2, s0
 8009314:	4620      	mov	r0, r4
 8009316:	4629      	mov	r1, r5
 8009318:	f7f6 ff64 	bl	80001e4 <__adddf3>
 800931c:	4604      	mov	r4, r0
 800931e:	460d      	mov	r5, r1
 8009320:	e019      	b.n	8009356 <scalbn+0x86>
 8009322:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009326:	460b      	mov	r3, r1
 8009328:	3a36      	subs	r2, #54	; 0x36
 800932a:	4432      	add	r2, r6
 800932c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009330:	428a      	cmp	r2, r1
 8009332:	dd08      	ble.n	8009346 <scalbn+0x76>
 8009334:	2d00      	cmp	r5, #0
 8009336:	a120      	add	r1, pc, #128	; (adr r1, 80093b8 <scalbn+0xe8>)
 8009338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800933c:	da1c      	bge.n	8009378 <scalbn+0xa8>
 800933e:	a120      	add	r1, pc, #128	; (adr r1, 80093c0 <scalbn+0xf0>)
 8009340:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009344:	e018      	b.n	8009378 <scalbn+0xa8>
 8009346:	2a00      	cmp	r2, #0
 8009348:	dd08      	ble.n	800935c <scalbn+0x8c>
 800934a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800934e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009352:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009356:	ec45 4b10 	vmov	d0, r4, r5
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009360:	da19      	bge.n	8009396 <scalbn+0xc6>
 8009362:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009366:	429e      	cmp	r6, r3
 8009368:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800936c:	dd0a      	ble.n	8009384 <scalbn+0xb4>
 800936e:	a112      	add	r1, pc, #72	; (adr r1, 80093b8 <scalbn+0xe8>)
 8009370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1e2      	bne.n	800933e <scalbn+0x6e>
 8009378:	a30f      	add	r3, pc, #60	; (adr r3, 80093b8 <scalbn+0xe8>)
 800937a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937e:	f7f7 f8e7 	bl	8000550 <__aeabi_dmul>
 8009382:	e7cb      	b.n	800931c <scalbn+0x4c>
 8009384:	a10a      	add	r1, pc, #40	; (adr r1, 80093b0 <scalbn+0xe0>)
 8009386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d0b8      	beq.n	8009300 <scalbn+0x30>
 800938e:	a10e      	add	r1, pc, #56	; (adr r1, 80093c8 <scalbn+0xf8>)
 8009390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009394:	e7b4      	b.n	8009300 <scalbn+0x30>
 8009396:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800939a:	3236      	adds	r2, #54	; 0x36
 800939c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80093a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80093a4:	4620      	mov	r0, r4
 80093a6:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <scalbn+0x108>)
 80093a8:	2200      	movs	r2, #0
 80093aa:	e7e8      	b.n	800937e <scalbn+0xae>
 80093ac:	f3af 8000 	nop.w
 80093b0:	c2f8f359 	.word	0xc2f8f359
 80093b4:	01a56e1f 	.word	0x01a56e1f
 80093b8:	8800759c 	.word	0x8800759c
 80093bc:	7e37e43c 	.word	0x7e37e43c
 80093c0:	8800759c 	.word	0x8800759c
 80093c4:	fe37e43c 	.word	0xfe37e43c
 80093c8:	c2f8f359 	.word	0xc2f8f359
 80093cc:	81a56e1f 	.word	0x81a56e1f
 80093d0:	43500000 	.word	0x43500000
 80093d4:	ffff3cb0 	.word	0xffff3cb0
 80093d8:	3c900000 	.word	0x3c900000

080093dc <_init>:
 80093dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093de:	bf00      	nop
 80093e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093e2:	bc08      	pop	{r3}
 80093e4:	469e      	mov	lr, r3
 80093e6:	4770      	bx	lr

080093e8 <_fini>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	bf00      	nop
 80093ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ee:	bc08      	pop	{r3}
 80093f0:	469e      	mov	lr, r3
 80093f2:	4770      	bx	lr
