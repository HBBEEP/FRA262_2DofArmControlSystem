
RoboticArmControlSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e03c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800e1d8  0800e1d8  0001e1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e618  0800e618  000202fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e618  0800e618  0001e618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e620  0800e620  000202fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e620  0800e620  0001e620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e624  0800e624  0001e624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  0800e628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c3c  200002fc  0800e924  000202fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f38  0800e924  00020f38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015568  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002524  00000000  00000000  00035894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00037db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  00038f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ea1  00000000  00000000  0003a078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d2f  00000000  00000000  00051f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d51b  00000000  00000000  00066c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104163  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e8  00000000  00000000  001041b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002fc 	.word	0x200002fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800e1bc 	.word	0x0800e1bc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000300 	.word	0x20000300
 80001d4:	0800e1bc 	.word	0x0800e1bc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <modbus_1t5_Timeout+0x1c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	751a      	strb	r2, [r3, #20]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	20000318 	.word	0x20000318

08000ec4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <modbus_3t5_Timeout+0x1c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	755a      	strb	r2, [r3, #21]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	20000318 	.word	0x20000318

08000ee4 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000efe:	1c59      	adds	r1, r3, #1
 8000f00:	b289      	uxth	r1, r1
 8000f02:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000f06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f0a:	d210      	bcs.n	8000f2e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68d8      	ldr	r0, [r3, #12]
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f1e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f22:	4413      	add	r3, r2
 8000f24:	3302      	adds	r3, #2
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f00a f817 	bl	800af5c <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000318 	.word	0x20000318

08000f48 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f52:	4a24      	ldr	r2, [pc, #144]	; (8000fe4 <Modbus_init+0x9c>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <Modbus_init+0x9c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <Modbus_init+0x9c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <Modbus_init+0xa0>)
 8000f68:	2114      	movs	r1, #20
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f009 f9a8 	bl	800a2c0 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <Modbus_init+0x9c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <Modbus_init+0xa4>)
 8000f78:	210e      	movs	r1, #14
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f009 f9a0 	bl	800a2c0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <Modbus_init+0x9c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <Modbus_init+0xa8>)
 8000f88:	2103      	movs	r1, #3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f009 ff3e 	bl	800ae0c <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <Modbus_init+0x9c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68d8      	ldr	r0, [r3, #12]
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <Modbus_init+0x9c>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <Modbus_init+0x9c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000fa2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	2201      	movs	r2, #1
 8000fac:	4619      	mov	r1, r3
 8000fae:	f009 ffd5 	bl	800af5c <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <Modbus_init+0x9c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d10c      	bne.n	8000fdc <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <Modbus_init+0x9c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f008 fa2d 	bl	8009428 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <Modbus_init+0x9c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f008 fc62 	bl	80098a0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000318 	.word	0x20000318
 8000fe8:	08000ea5 	.word	0x08000ea5
 8000fec:	08000ec5 	.word	0x08000ec5
 8000ff0:	08000ee5 	.word	0x08000ee5

08000ff4 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001000:	23ff      	movs	r3, #255	; 0xff
 8001002:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001004:	23ff      	movs	r3, #255	; 0xff
 8001006:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001008:	e013      	b.n	8001032 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	4053      	eors	r3, r2
 8001016:	b2db      	uxtb	r3, r3
 8001018:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <CRC16+0x64>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4413      	add	r3, r2
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	4053      	eors	r3, r2
 8001026:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001028:	4a0c      	ldr	r2, [pc, #48]	; (800105c <CRC16+0x68>)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001032:	883b      	ldrh	r3, [r7, #0]
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	803a      	strh	r2, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e6      	bne.n	800100a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20000100 	.word	0x20000100
 800105c:	20000000 	.word	0x20000000

08001060 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001066:	4b81      	ldr	r3, [pc, #516]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	7e1b      	ldrb	r3, [r3, #24]
 800106c:	3b01      	subs	r3, #1
 800106e:	2b03      	cmp	r3, #3
 8001070:	d80a      	bhi.n	8001088 <Modbus_Protocal_Worker+0x28>
 8001072:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <Modbus_Protocal_Worker+0x18>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	08001093 	.word	0x08001093
 800107c:	08001233 	.word	0x08001233
 8001080:	0800111f 	.word	0x0800111f
 8001084:	08001145 	.word	0x08001145
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001088:	4b78      	ldr	r3, [pc, #480]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2201      	movs	r2, #1
 800108e:	761a      	strb	r2, [r3, #24]
		break;
 8001090:	e0e8      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001092:	4b76      	ldr	r3, [pc, #472]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800109e:	f000 f9dd 	bl	800145c <Modbus_Emission>
 80010a2:	e01c      	b.n	80010de <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80010a4:	4b71      	ldr	r3, [pc, #452]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	7d9b      	ldrb	r3, [r3, #22]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d017      	beq.n	80010de <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80010ae:	4b6f      	ldr	r3, [pc, #444]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80010b6:	4b6d      	ldr	r3, [pc, #436]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80010be:	4b6b      	ldr	r3, [pc, #428]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b68      	ldr	r3, [pc, #416]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 0201 	orr.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010d6:	4b65      	ldr	r3, [pc, #404]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2203      	movs	r2, #3
 80010dc:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010de:	4b63      	ldr	r3, [pc, #396]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b20      	cmp	r3, #32
 80010ec:	f040 80b3 	bne.w	8001256 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80010f0:	4b5e      	ldr	r3, [pc, #376]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010fa:	4b5c      	ldr	r3, [pc, #368]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68d8      	ldr	r0, [r3, #12]
 8001100:	4b5a      	ldr	r3, [pc, #360]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b59      	ldr	r3, [pc, #356]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800110c:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001110:	4413      	add	r3, r2
 8001112:	3302      	adds	r3, #2
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	f009 ff20 	bl	800af5c <HAL_UART_Receive_IT>
		}
		break;
 800111c:	e09b      	b.n	8001256 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800111e:	4b53      	ldr	r3, [pc, #332]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	7d1b      	ldrb	r3, [r3, #20]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 8098 	beq.w	800125a <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800112a:	4b50      	ldr	r3, [pc, #320]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001132:	4b4e      	ldr	r3, [pc, #312]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	22fe      	movs	r2, #254	; 0xfe
 8001138:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800113a:	4b4c      	ldr	r3, [pc, #304]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2204      	movs	r2, #4
 8001140:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001142:	e08a      	b.n	800125a <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001144:	4b49      	ldr	r3, [pc, #292]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	7d9b      	ldrb	r3, [r3, #22]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d009      	beq.n	8001162 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d103      	bne.n	8001162 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800115a:	4b44      	ldr	r3, [pc, #272]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	22ff      	movs	r2, #255	; 0xff
 8001160:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001162:	4b42      	ldr	r3, [pc, #264]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800116a:	f113 0f02 	cmn.w	r3, #2
 800116e:	d150      	bne.n	8001212 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001170:	4b3e      	ldr	r3, [pc, #248]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2200      	movs	r2, #0
 8001176:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001178:	4b3c      	ldr	r3, [pc, #240]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001180:	4b3a      	ldr	r3, [pc, #232]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001188:	3b02      	subs	r3, #2
 800118a:	4619      	mov	r1, r3
 800118c:	4610      	mov	r0, r2
 800118e:	f7ff ff31 	bl	8000ff4 <CRC16>
 8001192:	4603      	mov	r3, r0
 8001194:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001196:	793a      	ldrb	r2, [r7, #4]
 8001198:	4b34      	ldr	r3, [pc, #208]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800119a:	6819      	ldr	r1, [r3, #0]
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011a4:	3b02      	subs	r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d10c      	bne.n	80011ca <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80011b0:	797a      	ldrb	r2, [r7, #5]
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011b4:	6819      	ldr	r1, [r3, #0]
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011be:	3b01      	subs	r3, #1
 80011c0:	440b      	add	r3, r1
 80011c2:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d004      	beq.n	80011d4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	22ff      	movs	r2, #255	; 0xff
 80011d0:	75da      	strb	r2, [r3, #23]
				break;
 80011d2:	e047      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d113      	bne.n	800120e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80011f6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001200:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001202:	461a      	mov	r2, r3
 8001204:	f00b f86c 	bl	800c2e0 <memcpy>

			//execute command
			Modbus_frame_response();
 8001208:	f000 f910 	bl	800142c <Modbus_frame_response>
 800120c:	e001      	b.n	8001212 <Modbus_Protocal_Worker+0x1b2>
				break;
 800120e:	bf00      	nop
					}
		break;


	}
}
 8001210:	e028      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	7d5b      	ldrb	r3, [r3, #21]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2201      	movs	r2, #1
 8001222:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	4618      	mov	r0, r3
 800122c:	f009 ff44 	bl	800b0b8 <HAL_UART_AbortReceive>
		break;
 8001230:	e015      	b.n	800125e <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b20      	cmp	r3, #32
 8001240:	d10f      	bne.n	8001262 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	761a      	strb	r2, [r3, #24]
		break;
 8001254:	e005      	b.n	8001262 <Modbus_Protocal_Worker+0x202>
		break;
 8001256:	bf00      	nop
 8001258:	e004      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 800125a:	bf00      	nop
 800125c:	e002      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 800125e:	bf00      	nop
 8001260:	e000      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 8001262:	bf00      	nop
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000318 	.word	0x20000318

08001270 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <modbusWrite1Register+0x80>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	7e9b      	ldrb	r3, [r3, #26]
 800127c:	b29b      	uxth	r3, r3
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <modbusWrite1Register+0x80>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7edb      	ldrb	r3, [r3, #27]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4413      	add	r3, r2
 800128c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800128e:	88fa      	ldrh	r2, [r7, #6]
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <modbusWrite1Register+0x80>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	429a      	cmp	r2, r3
 8001298:	d903      	bls.n	80012a2 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800129a:	2002      	movs	r0, #2
 800129c:	f000 f8a4 	bl	80013e8 <ModbusErrorReply>
			 return;
 80012a0:	e023      	b.n	80012ea <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <modbusWrite1Register+0x80>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <modbusWrite1Register+0x80>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	440b      	add	r3, r1
 80012b2:	7f12      	ldrb	r2, [r2, #28]
 80012b4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <modbusWrite1Register+0x80>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <modbusWrite1Register+0x80>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6859      	ldr	r1, [r3, #4]
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	440b      	add	r3, r1
 80012c6:	7f52      	ldrb	r2, [r2, #29]
 80012c8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <modbusWrite1Register+0x80>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <modbusWrite1Register+0x80>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 80012d8:	2208      	movs	r2, #8
 80012da:	4619      	mov	r1, r3
 80012dc:	f00b f800 	bl	800c2e0 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <modbusWrite1Register+0x80>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2205      	movs	r2, #5
 80012e6:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000318 	.word	0x20000318

080012f4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <modbusRead1Register+0xf0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	7f1b      	ldrb	r3, [r3, #28]
 8001300:	b29b      	uxth	r3, r3
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <modbusRead1Register+0xf0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	7f5b      	ldrb	r3, [r3, #29]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <modbusRead1Register+0xf0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	7e9b      	ldrb	r3, [r3, #26]
 8001318:	b29b      	uxth	r3, r3
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <modbusRead1Register+0xf0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	7edb      	ldrb	r3, [r3, #27]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4413      	add	r3, r2
 8001328:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <modbusRead1Register+0x42>
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	2b7d      	cmp	r3, #125	; 0x7d
 8001334:	d903      	bls.n	800133e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001336:	2003      	movs	r0, #3
 8001338:	f000 f856 	bl	80013e8 <ModbusErrorReply>
		 return;
 800133c:	e04e      	b.n	80013dc <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800133e:	88ba      	ldrh	r2, [r7, #4]
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <modbusRead1Register+0xf0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	429a      	cmp	r2, r3
 8001348:	d808      	bhi.n	800135c <modbusRead1Register+0x68>
 800134a:	88ba      	ldrh	r2, [r7, #4]
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	4413      	add	r3, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <modbusRead1Register+0xf0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	429a      	cmp	r2, r3
 800135a:	d903      	bls.n	8001364 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800135c:	2002      	movs	r0, #2
 800135e:	f000 f843 	bl	80013e8 <ModbusErrorReply>
		 return;
 8001362:	e03b      	b.n	80013dc <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <modbusRead1Register+0xf0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2203      	movs	r2, #3
 800136a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <modbusRead1Register+0xf0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	0052      	lsls	r2, r2, #1
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800137e:	2400      	movs	r4, #0
 8001380:	e020      	b.n	80013c4 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <modbusRead1Register+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	4423      	add	r3, r4
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	18d1      	adds	r1, r2, r3
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <modbusRead1Register+0xf0>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	1c63      	adds	r3, r4, #1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	7849      	ldrb	r1, [r1, #1]
 800139a:	4413      	add	r3, r2
 800139c:	460a      	mov	r2, r1
 800139e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <modbusRead1Register+0xf0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	4423      	add	r3, r4
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	18d1      	adds	r1, r2, r3
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <modbusRead1Register+0xf0>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	0063      	lsls	r3, r4, #1
 80013b6:	3303      	adds	r3, #3
 80013b8:	7809      	ldrb	r1, [r1, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	460a      	mov	r2, r1
 80013be:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80013c2:	3401      	adds	r4, #1
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	429c      	cmp	r4, r3
 80013c8:	dbdb      	blt.n	8001382 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <modbusRead1Register+0xf0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0052      	lsls	r2, r2, #1
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000318 	.word	0x20000318

080013e8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <ModbusErrorReply+0x40>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	7e5a      	ldrb	r2, [r3, #25]
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <ModbusErrorReply+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <ModbusErrorReply+0x40>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <ModbusErrorReply+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2202      	movs	r2, #2
 8001416:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000318 	.word	0x20000318

0800142c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <Modbus_frame_response+0x2c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	7e5b      	ldrb	r3, [r3, #25]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d004      	beq.n	8001444 <Modbus_frame_response+0x18>
 800143a:	2b06      	cmp	r3, #6
 800143c:	d105      	bne.n	800144a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800143e:	f7ff ff17 	bl	8001270 <modbusWrite1Register>
		break;
 8001442:	e006      	b.n	8001452 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001444:	f7ff ff56 	bl	80012f4 <modbusRead1Register>
		break;
 8001448:	e003      	b.n	8001452 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800144a:	2001      	movs	r0, #1
 800144c:	f7ff ffcc 	bl	80013e8 <ModbusErrorReply>
		break;
 8001450:	bf00      	nop

	}
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000318 	.word	0x20000318

0800145c <Modbus_Emission>:

void Modbus_Emission()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <Modbus_Emission+0xfc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b20      	cmp	r3, #32
 8001470:	d15e      	bne.n	8001530 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <Modbus_Emission+0xfc>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <Modbus_Emission+0xfc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001480:	4b35      	ldr	r3, [pc, #212]	; (8001558 <Modbus_Emission+0xfc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001488:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <Modbus_Emission+0xfc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <Modbus_Emission+0xfc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800149a:	461a      	mov	r2, r3
 800149c:	f00a ff20 	bl	800c2e0 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <Modbus_Emission+0xfc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <Modbus_Emission+0xfc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3203      	adds	r2, #3
 80014b0:	b292      	uxth	r2, r2
 80014b2:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <Modbus_Emission+0xfc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <Modbus_Emission+0xfc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014c6:	3b02      	subs	r3, #2
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f7ff fd92 	bl	8000ff4 <CRC16>
 80014d0:	4603      	mov	r3, r0
 80014d2:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <Modbus_Emission+0xfc>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <Modbus_Emission+0xfc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014e0:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80014e2:	7939      	ldrb	r1, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	460a      	mov	r2, r1
 80014e8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <Modbus_Emission+0xfc>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <Modbus_Emission+0xfc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014f8:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014fa:	7979      	ldrb	r1, [r7, #5]
 80014fc:	4413      	add	r3, r2
 80014fe:	460a      	mov	r2, r1
 8001500:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <Modbus_Emission+0xfc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b20      	cmp	r3, #32
 8001512:	d10d      	bne.n	8001530 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <Modbus_Emission+0xfc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <Modbus_Emission+0xfc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <Modbus_Emission+0xfc>)
 8001524:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001526:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800152a:	461a      	mov	r2, r3
 800152c:	f009 fd46 	bl	800afbc <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <Modbus_Emission+0xfc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <Modbus_Emission+0xfc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <Modbus_Emission+0xfc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <Modbus_Emission+0xfc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2202      	movs	r2, #2
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000318 	.word	0x20000318
 800155c:	00000000 	.word	0x00000000

08001560 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001566:	f003 fa1f 	bl	80049a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800156a:	f000 f8fd 	bl	8001768 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800156e:	f000 fc19 	bl	8001da4 <MX_GPIO_Init>
	MX_DMA_Init();
 8001572:	f000 fbe1 	bl	8001d38 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001576:	f000 fbb3 	bl	8001ce0 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 800157a:	f000 f9eb 	bl	8001954 <MX_TIM1_Init>
	MX_TIM5_Init();
 800157e:	f000 fb07 	bl	8001b90 <MX_TIM5_Init>
	MX_TIM2_Init();
 8001582:	f000 fa6b 	bl	8001a5c <MX_TIM2_Init>
	MX_ADC1_Init();
 8001586:	f000 f957 	bl	8001838 <MX_ADC1_Init>
	MX_TIM3_Init();
 800158a:	f000 fab3 	bl	8001af4 <MX_TIM3_Init>
	MX_TIM11_Init();
 800158e:	f000 fb53 	bl	8001c38 <MX_TIM11_Init>
	MX_I2C2_Init();
 8001592:	f000 f9b1 	bl	80018f8 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001596:	2104      	movs	r1, #4
 8001598:	485f      	ldr	r0, [pc, #380]	; (8001718 <main+0x1b8>)
 800159a:	f008 fa9b 	bl	8009ad4 <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start(&htim1);
 800159e:	485f      	ldr	r0, [pc, #380]	; (800171c <main+0x1bc>)
 80015a0:	f007 fee8 	bl	8009374 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015a4:	2100      	movs	r1, #0
 80015a6:	485d      	ldr	r0, [pc, #372]	; (800171c <main+0x1bc>)
 80015a8:	f008 f862 	bl	8009670 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 80015ac:	485c      	ldr	r0, [pc, #368]	; (8001720 <main+0x1c0>)
 80015ae:	f007 ff3b 	bl	8009428 <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, (uint16_t*) buffer, 20);
 80015b2:	2214      	movs	r2, #20
 80015b4:	495b      	ldr	r1, [pc, #364]	; (8001724 <main+0x1c4>)
 80015b6:	485c      	ldr	r0, [pc, #368]	; (8001728 <main+0x1c8>)
 80015b8:	f003 faac 	bl	8004b14 <HAL_ADC_Start_DMA>

	hmodbus.huart = &huart2;
 80015bc:	4b5b      	ldr	r3, [pc, #364]	; (800172c <main+0x1cc>)
 80015be:	4a5c      	ldr	r2, [pc, #368]	; (8001730 <main+0x1d0>)
 80015c0:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 80015c2:	4b5a      	ldr	r3, [pc, #360]	; (800172c <main+0x1cc>)
 80015c4:	4a5b      	ldr	r2, [pc, #364]	; (8001734 <main+0x1d4>)
 80015c6:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80015c8:	4b58      	ldr	r3, [pc, #352]	; (800172c <main+0x1cc>)
 80015ca:	2215      	movs	r2, #21
 80015cc:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70; // 70
 80015ce:	4b57      	ldr	r3, [pc, #348]	; (800172c <main+0x1cc>)
 80015d0:	2246      	movs	r2, #70	; 0x46
 80015d2:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80015d4:	4958      	ldr	r1, [pc, #352]	; (8001738 <main+0x1d8>)
 80015d6:	4855      	ldr	r0, [pc, #340]	; (800172c <main+0x1cc>)
 80015d8:	f7ff fcb6 	bl	8000f48 <Modbus_init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Modbus_Protocal_Worker();
 80015dc:	f7ff fd40 	bl	8001060 <Modbus_Protocal_Worker>
		static uint32_t timestamp = 0;

		handleEmergency();
 80015e0:	f002 fd34 	bl	800404c <handleEmergency>
		if (HAL_GetTick() >= timestamp) {
 80015e4:	f003 fa46 	bl	8004a74 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b54      	ldr	r3, [pc, #336]	; (800173c <main+0x1dc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d3f4      	bcc.n	80015dc <main+0x7c>
			timestamp = HAL_GetTick() + 100;
 80015f2:	f003 fa3f 	bl	8004a74 <HAL_GetTick>
 80015f6:	4603      	mov	r3, r0
 80015f8:	3364      	adds	r3, #100	; 0x64
 80015fa:	4a50      	ldr	r2, [pc, #320]	; (800173c <main+0x1dc>)
 80015fc:	6013      	str	r3, [r2, #0]


			int16_t sentPos = mmActPos * 10;
 80015fe:	4b50      	ldr	r3, [pc, #320]	; (8001740 <main+0x1e0>)
 8001600:	edd3 7a00 	vldr	s15, [r3]
 8001604:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001610:	ee17 3a90 	vmov	r3, s15
 8001614:	80fb      	strh	r3, [r7, #6]
			int16_t sentVel = mmActVel * 10;
 8001616:	4b4b      	ldr	r3, [pc, #300]	; (8001744 <main+0x1e4>)
 8001618:	edd3 7a00 	vldr	s15, [r3]
 800161c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001620:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001628:	ee17 3a90 	vmov	r3, s15
 800162c:	80bb      	strh	r3, [r7, #4]
			int16_t sentAcc = mmActAcc * 10;
 800162e:	4b46      	ldr	r3, [pc, #280]	; (8001748 <main+0x1e8>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001640:	ee17 3a90 	vmov	r3, s15
 8001644:	807b      	strh	r3, [r7, #2]
			registerFrame[0].U16 = 22881; // WRITE : Heartbeat Protocol
 8001646:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <main+0x1d8>)
 8001648:	f645 1261 	movw	r2, #22881	; 0x5961
 800164c:	801a      	strh	r2, [r3, #0]
			registerFrame[17].U16 = sentPos; // WRITE : y-axis Actual Position
 800164e:	88fa      	ldrh	r2, [r7, #6]
 8001650:	4b39      	ldr	r3, [pc, #228]	; (8001738 <main+0x1d8>)
 8001652:	845a      	strh	r2, [r3, #34]	; 0x22
			registerFrame[18].U16 = sentVel; // WRITE : y-axis Actual Speed
 8001654:	88ba      	ldrh	r2, [r7, #4]
 8001656:	4b38      	ldr	r3, [pc, #224]	; (8001738 <main+0x1d8>)
 8001658:	849a      	strh	r2, [r3, #36]	; 0x24
			registerFrame[19].U16 = sentAcc; // WRITE : y-axis Actual Acceleration
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	4b36      	ldr	r3, [pc, #216]	; (8001738 <main+0x1d8>)
 800165e:	84da      	strh	r2, [r3, #38]	; 0x26

			mmActPos = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 8001660:	4b3a      	ldr	r3, [pc, #232]	; (800174c <main+0x1ec>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ff09 	bl	800047c <__aeabi_i2d>
 800166a:	a329      	add	r3, pc, #164	; (adr r3, 8001710 <main+0x1b0>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7fe ff6e 	bl	8000550 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f7ff fa40 	bl	8000b00 <__aeabi_d2f>
 8001680:	4603      	mov	r3, r0
 8001682:	4a2f      	ldr	r2, [pc, #188]	; (8001740 <main+0x1e0>)
 8001684:	6013      	str	r3, [r2, #0]

			if (x[0] && x2) {
 8001686:	4b32      	ldr	r3, [pc, #200]	; (8001750 <main+0x1f0>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00c      	beq.n	80016a8 <main+0x148>
 800168e:	4b31      	ldr	r3, [pc, #196]	; (8001754 <main+0x1f4>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d008      	beq.n	80016a8 <main+0x148>
				//x[2] = 1;
				endEffectorControl(endEffector.status, 0);
 8001696:	4b30      	ldr	r3, [pc, #192]	; (8001758 <main+0x1f8>)
 8001698:	795b      	ldrb	r3, [r3, #5]
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f002 fd0b 	bl	80040b8 <endEffectorControl>
				//HAL_Delay(10);
				endEffectorPick();
 80016a2:	f000 fdf1 	bl	8002288 <endEffectorPick>
 80016a6:	e00f      	b.n	80016c8 <main+0x168>
				//HAL_Delay(3000);
				//endEffectorPlace();
			} else if (x[1] && x2) {
 80016a8:	4b29      	ldr	r3, [pc, #164]	; (8001750 <main+0x1f0>)
 80016aa:	785b      	ldrb	r3, [r3, #1]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00b      	beq.n	80016c8 <main+0x168>
 80016b0:	4b28      	ldr	r3, [pc, #160]	; (8001754 <main+0x1f4>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d007      	beq.n	80016c8 <main+0x168>
				endEffectorControl(endEffector.status, 0);
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <main+0x1f8>)
 80016ba:	795b      	ldrb	r3, [r3, #5]
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 fcfa 	bl	80040b8 <endEffectorControl>
				//HAL_Delay(10);
				//endEffectorPick();
				endEffectorPlace();
 80016c4:	f000 fe42 	bl	800234c <endEffectorPlace>
				//HAL_Delay(3000);
			}

			endEffectorDataScan[1] = registerFrame[2].U16;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <main+0x1d8>)
 80016ca:	889b      	ldrh	r3, [r3, #4]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b23      	ldr	r3, [pc, #140]	; (800175c <main+0x1fc>)
 80016d0:	705a      	strb	r2, [r3, #1]
			if (endEffectorDataScan[1] != endEffectorDataScan[0]) {
 80016d2:	4b22      	ldr	r3, [pc, #136]	; (800175c <main+0x1fc>)
 80016d4:	785a      	ldrb	r2, [r3, #1]
 80016d6:	4b21      	ldr	r3, [pc, #132]	; (800175c <main+0x1fc>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d008      	beq.n	80016f0 <main+0x190>
				endEffectorStatusControl(registerFrame[2].U16);
 80016de:	4b16      	ldr	r3, [pc, #88]	; (8001738 <main+0x1d8>)
 80016e0:	889b      	ldrh	r3, [r3, #4]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 fdb8 	bl	8004258 <endEffectorStatusControl>
				endEffectorDataScan[0] = endEffectorDataScan[1];
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <main+0x1fc>)
 80016ea:	785a      	ldrb	r2, [r3, #1]
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <main+0x1fc>)
 80016ee:	701a      	strb	r2, [r3, #0]

			}

			joyDisplayLED();
 80016f0:	f002 fb32 	bl	8003d58 <joyDisplayLED>

			if (joyStart) {
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <main+0x200>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f43f af6f 	beq.w	80015dc <main+0x7c>

				buttonInput(); // DETECT : Button Input
 80016fe:	f002 f8fb 	bl	80038f8 <buttonInput>
				buttonLogic(joyLogic);
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <main+0x204>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	4618      	mov	r0, r3
 800170a:	f002 f95f 	bl	80039cc <buttonLogic>
	while (1) {
 800170e:	e765      	b.n	80015dc <main+0x7c>
 8001710:	464f6faa 	.word	0x464f6faa
 8001714:	3f8199cb 	.word	0x3f8199cb
 8001718:	20000634 	.word	0x20000634
 800171c:	20000418 	.word	0x20000418
 8001720:	200004cc 	.word	0x200004cc
 8001724:	20000ddc 	.word	0x20000ddc
 8001728:	2000031c 	.word	0x2000031c
 800172c:	20000870 	.word	0x20000870
 8001730:	2000079c 	.word	0x2000079c
 8001734:	200006e8 	.word	0x200006e8
 8001738:	20000d48 	.word	0x20000d48
 800173c:	20000f30 	.word	0x20000f30
 8001740:	20000e1c 	.word	0x20000e1c
 8001744:	20000e24 	.word	0x20000e24
 8001748:	20000e28 	.word	0x20000e28
 800174c:	20000e14 	.word	0x20000e14
 8001750:	20000f24 	.word	0x20000f24
 8001754:	20000f28 	.word	0x20000f28
 8001758:	20000268 	.word	0x20000268
 800175c:	20000f14 	.word	0x20000f14
 8001760:	20000f1f 	.word	0x20000f1f
 8001764:	20000e08 	.word	0x20000e08

08001768 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b094      	sub	sp, #80	; 0x50
 800176c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800176e:	f107 0320 	add.w	r3, r7, #32
 8001772:	2230      	movs	r2, #48	; 0x30
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f00a fdc0 	bl	800c2fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <SystemClock_Config+0xc8>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	4a26      	ldr	r2, [pc, #152]	; (8001830 <SystemClock_Config+0xc8>)
 8001796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179a:	6413      	str	r3, [r2, #64]	; 0x40
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <SystemClock_Config+0xc8>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	4b21      	ldr	r3, [pc, #132]	; (8001834 <SystemClock_Config+0xcc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a20      	ldr	r2, [pc, #128]	; (8001834 <SystemClock_Config+0xcc>)
 80017b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <SystemClock_Config+0xcc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017c4:	2302      	movs	r3, #2
 80017c6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c8:	2301      	movs	r3, #1
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017cc:	2310      	movs	r3, #16
 80017ce:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d0:	2302      	movs	r3, #2
 80017d2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017d4:	2300      	movs	r3, #0
 80017d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80017d8:	2308      	movs	r3, #8
 80017da:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80017dc:	2364      	movs	r3, #100	; 0x64
 80017de:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e0:	2302      	movs	r3, #2
 80017e2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80017e4:	2304      	movs	r3, #4
 80017e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80017e8:	f107 0320 	add.w	r3, r7, #32
 80017ec:	4618      	mov	r0, r3
 80017ee:	f007 f8cd 	bl	800898c <HAL_RCC_OscConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SystemClock_Config+0x94>
		Error_Handler();
 80017f8:	f002 fd80 	bl	80042fc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017fc:	230f      	movs	r3, #15
 80017fe:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001800:	2302      	movs	r3, #2
 8001802:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	2103      	movs	r1, #3
 8001818:	4618      	mov	r0, r3
 800181a:	f007 fb2f 	bl	8008e7c <HAL_RCC_ClockConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <SystemClock_Config+0xc0>
		Error_Handler();
 8001824:	f002 fd6a 	bl	80042fc <Error_Handler>
	}
}
 8001828:	bf00      	nop
 800182a:	3750      	adds	r7, #80	; 0x50
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40007000 	.word	0x40007000

08001838 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800183e:	463b      	mov	r3, r7
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800184a:	4b28      	ldr	r3, [pc, #160]	; (80018ec <MX_ADC1_Init+0xb4>)
 800184c:	4a28      	ldr	r2, [pc, #160]	; (80018f0 <MX_ADC1_Init+0xb8>)
 800184e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001850:	4b26      	ldr	r3, [pc, #152]	; (80018ec <MX_ADC1_Init+0xb4>)
 8001852:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001856:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <MX_ADC1_Init+0xb4>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800185e:	4b23      	ldr	r3, [pc, #140]	; (80018ec <MX_ADC1_Init+0xb4>)
 8001860:	2201      	movs	r2, #1
 8001862:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001864:	4b21      	ldr	r3, [pc, #132]	; (80018ec <MX_ADC1_Init+0xb4>)
 8001866:	2201      	movs	r2, #1
 8001868:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <MX_ADC1_Init+0xb4>)
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <MX_ADC1_Init+0xb4>)
 8001874:	2200      	movs	r2, #0
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001878:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <MX_ADC1_Init+0xb4>)
 800187a:	4a1e      	ldr	r2, [pc, #120]	; (80018f4 <MX_ADC1_Init+0xbc>)
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800187e:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <MX_ADC1_Init+0xb4>)
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <MX_ADC1_Init+0xb4>)
 8001886:	2202      	movs	r2, #2
 8001888:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <MX_ADC1_Init+0xb4>)
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <MX_ADC1_Init+0xb4>)
 8001894:	2201      	movs	r2, #1
 8001896:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001898:	4814      	ldr	r0, [pc, #80]	; (80018ec <MX_ADC1_Init+0xb4>)
 800189a:	f003 f8f7 	bl	8004a8c <HAL_ADC_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_ADC1_Init+0x70>
		Error_Handler();
 80018a4:	f002 fd2a 	bl	80042fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 80018a8:	230d      	movs	r3, #13
 80018aa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80018ac:	2301      	movs	r3, #1
 80018ae:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80018b0:	2303      	movs	r3, #3
 80018b2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80018b4:	463b      	mov	r3, r7
 80018b6:	4619      	mov	r1, r3
 80018b8:	480c      	ldr	r0, [pc, #48]	; (80018ec <MX_ADC1_Init+0xb4>)
 80018ba:	f003 fa39 	bl	8004d30 <HAL_ADC_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_ADC1_Init+0x90>
		Error_Handler();
 80018c4:	f002 fd1a 	bl	80042fc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 80018c8:	230a      	movs	r3, #10
 80018ca:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80018cc:	2302      	movs	r3, #2
 80018ce:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80018d0:	463b      	mov	r3, r7
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_ADC1_Init+0xb4>)
 80018d6:	f003 fa2b 	bl	8004d30 <HAL_ADC_ConfigChannel>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_ADC1_Init+0xac>
		Error_Handler();
 80018e0:	f002 fd0c 	bl	80042fc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	2000031c 	.word	0x2000031c
 80018f0:	40012000 	.word	0x40012000
 80018f4:	0f000001 	.word	0x0f000001

080018f8 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_I2C2_Init+0x50>)
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <MX_I2C2_Init+0x54>)
 8001900:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_I2C2_Init+0x50>)
 8001904:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_I2C2_Init+0x58>)
 8001906:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_I2C2_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_I2C2_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_I2C2_Init+0x50>)
 8001916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191a:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_I2C2_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_I2C2_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MX_I2C2_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_I2C2_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_I2C2_Init+0x50>)
 8001936:	f004 fba9 	bl	800608c <HAL_I2C_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8001940:	f002 fcdc 	bl	80042fc <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	200003c4 	.word	0x200003c4
 800194c:	40005800 	.word	0x40005800
 8001950:	000186a0 	.word	0x000186a0

08001954 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b092      	sub	sp, #72	; 0x48
 8001958:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800195a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	615a      	str	r2, [r3, #20]
 8001976:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	2220      	movs	r2, #32
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f00a fcbc 	bl	800c2fc <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001984:	4b33      	ldr	r3, [pc, #204]	; (8001a54 <MX_TIM1_Init+0x100>)
 8001986:	4a34      	ldr	r2, [pc, #208]	; (8001a58 <MX_TIM1_Init+0x104>)
 8001988:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 99;
 800198a:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <MX_TIM1_Init+0x100>)
 800198c:	2263      	movs	r2, #99	; 0x63
 800198e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001990:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <MX_TIM1_Init+0x100>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <MX_TIM1_Init+0x100>)
 8001998:	f240 32e7 	movw	r2, #999	; 0x3e7
 800199c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199e:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <MX_TIM1_Init+0x100>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <MX_TIM1_Init+0x100>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <MX_TIM1_Init+0x100>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80019b0:	4828      	ldr	r0, [pc, #160]	; (8001a54 <MX_TIM1_Init+0x100>)
 80019b2:	f007 fe01 	bl	80095b8 <HAL_TIM_PWM_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM1_Init+0x6c>
		Error_Handler();
 80019bc:	f002 fc9e 	bl	80042fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80019c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019cc:	4619      	mov	r1, r3
 80019ce:	4821      	ldr	r0, [pc, #132]	; (8001a54 <MX_TIM1_Init+0x100>)
 80019d0:	f009 f8e4 	bl	800ab9c <HAL_TIMEx_MasterConfigSynchronization>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80019da:	f002 fc8f 	bl	80042fc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019de:	2360      	movs	r3, #96	; 0x60
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ea:	2300      	movs	r3, #0
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fe:	2200      	movs	r2, #0
 8001a00:	4619      	mov	r1, r3
 8001a02:	4814      	ldr	r0, [pc, #80]	; (8001a54 <MX_TIM1_Init+0x100>)
 8001a04:	f008 fa78 	bl	8009ef8 <HAL_TIM_PWM_ConfigChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 8001a0e:	f002 fc75 	bl	80042fc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a2a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	4807      	ldr	r0, [pc, #28]	; (8001a54 <MX_TIM1_Init+0x100>)
 8001a36:	f009 f91f 	bl	800ac78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 8001a40:	f002 fc5c 	bl	80042fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001a44:	4803      	ldr	r0, [pc, #12]	; (8001a54 <MX_TIM1_Init+0x100>)
 8001a46:	f002 fe39 	bl	80046bc <HAL_TIM_MspPostInit>

}
 8001a4a:	bf00      	nop
 8001a4c:	3748      	adds	r7, #72	; 0x48
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000418 	.word	0x20000418
 8001a58:	40010000 	.word	0x40010000

08001a5c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a70:	463b      	mov	r3, r7
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001a78:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <MX_TIM2_Init+0x94>)
 8001a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a7e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9999;
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <MX_TIM2_Init+0x94>)
 8001a82:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a86:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <MX_TIM2_Init+0x94>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <MX_TIM2_Init+0x94>)
 8001a90:	2209      	movs	r2, #9
 8001a92:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <MX_TIM2_Init+0x94>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <MX_TIM2_Init+0x94>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001aa0:	4813      	ldr	r0, [pc, #76]	; (8001af0 <MX_TIM2_Init+0x94>)
 8001aa2:	f007 fc0b 	bl	80092bc <HAL_TIM_Base_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM2_Init+0x54>
		Error_Handler();
 8001aac:	f002 fc26 	bl	80042fc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	4619      	mov	r1, r3
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <MX_TIM2_Init+0x94>)
 8001abe:	f008 fadd 	bl	800a07c <HAL_TIM_ConfigClockSource>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM2_Init+0x70>
		Error_Handler();
 8001ac8:	f002 fc18 	bl	80042fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <MX_TIM2_Init+0x94>)
 8001ada:	f009 f85f 	bl	800ab9c <HAL_TIMEx_MasterConfigSynchronization>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001ae4:	f002 fc0a 	bl	80042fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200004cc 	.word	0x200004cc

08001af4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b08:	463b      	mov	r3, r7
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b12:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <MX_TIM3_Init+0x98>)
 8001b14:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001b16:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b28:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001b36:	4814      	ldr	r0, [pc, #80]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b38:	f007 fbc0 	bl	80092bc <HAL_TIM_Base_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM3_Init+0x52>
		Error_Handler();
 8001b42:	f002 fbdb 	bl	80042fc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001b4c:	f107 0308 	add.w	r3, r7, #8
 8001b50:	4619      	mov	r1, r3
 8001b52:	480d      	ldr	r0, [pc, #52]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b54:	f008 fa92 	bl	800a07c <HAL_TIM_ConfigClockSource>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM3_Init+0x6e>
		Error_Handler();
 8001b5e:	f002 fbcd 	bl	80042fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4806      	ldr	r0, [pc, #24]	; (8001b88 <MX_TIM3_Init+0x94>)
 8001b70:	f009 f814 	bl	800ab9c <HAL_TIMEx_MasterConfigSynchronization>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001b7a:	f002 fbbf 	bl	80042fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000580 	.word	0x20000580
 8001b8c:	40000400 	.word	0x40000400

08001b90 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08c      	sub	sp, #48	; 0x30
 8001b94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	2224      	movs	r2, #36	; 0x24
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f00a fbac 	bl	800c2fc <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001bac:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <MX_TIM5_Init+0xa0>)
 8001bae:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <MX_TIM5_Init+0xa4>)
 8001bb0:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001bb2:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <MX_TIM5_Init+0xa0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <MX_TIM5_Init+0xa0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <MX_TIM5_Init+0xa0>)
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <MX_TIM5_Init+0xa0>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <MX_TIM5_Init+0xa0>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001be6:	2300      	movs	r3, #0
 8001be8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bea:	2301      	movs	r3, #1
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480c      	ldr	r0, [pc, #48]	; (8001c30 <MX_TIM5_Init+0xa0>)
 8001bfe:	f007 feb5 	bl	800996c <HAL_TIM_Encoder_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM5_Init+0x7c>
		Error_Handler();
 8001c08:	f002 fb78 	bl	80042fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_TIM5_Init+0xa0>)
 8001c1a:	f008 ffbf 	bl	800ab9c <HAL_TIMEx_MasterConfigSynchronization>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM5_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001c24:	f002 fb6a 	bl	80042fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	3730      	adds	r7, #48	; 0x30
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000634 	.word	0x20000634
 8001c34:	40000c00 	.word	0x40000c00

08001c38 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
 8001c4c:	615a      	str	r2, [r3, #20]
 8001c4e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <MX_TIM11_Init+0xa0>)
 8001c52:	4a22      	ldr	r2, [pc, #136]	; (8001cdc <MX_TIM11_Init+0xa4>)
 8001c54:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 99;
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <MX_TIM11_Init+0xa0>)
 8001c58:	2263      	movs	r2, #99	; 0x63
 8001c5a:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <MX_TIM11_Init+0xa0>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 2005;
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <MX_TIM11_Init+0xa0>)
 8001c64:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8001c68:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <MX_TIM11_Init+0xa0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c70:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <MX_TIM11_Init+0xa0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8001c76:	4818      	ldr	r0, [pc, #96]	; (8001cd8 <MX_TIM11_Init+0xa0>)
 8001c78:	f007 fb20 	bl	80092bc <HAL_TIM_Base_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM11_Init+0x4e>
		Error_Handler();
 8001c82:	f002 fb3b 	bl	80042fc <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim11) != HAL_OK) {
 8001c86:	4814      	ldr	r0, [pc, #80]	; (8001cd8 <MX_TIM11_Init+0xa0>)
 8001c88:	f007 fc30 	bl	80094ec <HAL_TIM_OC_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM11_Init+0x5e>
		Error_Handler();
 8001c92:	f002 fb33 	bl	80042fc <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK) {
 8001c96:	2108      	movs	r1, #8
 8001c98:	480f      	ldr	r0, [pc, #60]	; (8001cd8 <MX_TIM11_Init+0xa0>)
 8001c9a:	f007 fd99 	bl	80097d0 <HAL_TIM_OnePulse_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM11_Init+0x70>
		Error_Handler();
 8001ca4:	f002 fb2a 	bl	80042fc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001ca8:	2310      	movs	r3, #16
 8001caa:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 1433;
 8001cac:	f240 5399 	movw	r3, #1433	; 0x599
 8001cb0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_TIM11_Init+0xa0>)
 8001cc2:	f008 f8bd 	bl	8009e40 <HAL_TIM_OC_ConfigChannel>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM11_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001ccc:	f002 fb16 	bl	80042fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200006e8 	.word	0x200006e8
 8001cdc:	40014800 	.word	0x40014800

08001ce0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <MX_USART2_UART_Init+0x50>)
 8001ce6:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <MX_USART2_UART_Init+0x54>)
 8001ce8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <MX_USART2_UART_Init+0x50>)
 8001cec:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001cf0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_USART2_UART_Init+0x50>)
 8001cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cf8:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <MX_USART2_UART_Init+0x50>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <MX_USART2_UART_Init+0x50>)
 8001d02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d06:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MX_USART2_UART_Init+0x50>)
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0e:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <MX_USART2_UART_Init+0x50>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <MX_USART2_UART_Init+0x50>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001d1a:	4805      	ldr	r0, [pc, #20]	; (8001d30 <MX_USART2_UART_Init+0x50>)
 8001d1c:	f009 f81c 	bl	800ad58 <HAL_UART_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_USART2_UART_Init+0x4a>
		Error_Handler();
 8001d26:	f002 fae9 	bl	80042fc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	2000079c 	.word	0x2000079c
 8001d34:	40004400 	.word	0x40004400

08001d38 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <MX_DMA_Init+0x68>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a16      	ldr	r2, [pc, #88]	; (8001da0 <MX_DMA_Init+0x68>)
 8001d48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_DMA_Init+0x68>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <MX_DMA_Init+0x68>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a0f      	ldr	r2, [pc, #60]	; (8001da0 <MX_DMA_Init+0x68>)
 8001d64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <MX_DMA_Init+0x68>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d72:	603b      	str	r3, [r7, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2011      	movs	r0, #17
 8001d7c:	f003 fb63 	bl	8005446 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001d80:	2011      	movs	r0, #17
 8001d82:	f003 fb7c 	bl	800547e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	2038      	movs	r0, #56	; 0x38
 8001d8c:	f003 fb5b 	bl	8005446 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d90:	2038      	movs	r0, #56	; 0x38
 8001d92:	f003 fb74 	bl	800547e <HAL_NVIC_EnableIRQ>

}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800

08001da4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b62      	ldr	r3, [pc, #392]	; (8001f48 <MX_GPIO_Init+0x1a4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a61      	ldr	r2, [pc, #388]	; (8001f48 <MX_GPIO_Init+0x1a4>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b5f      	ldr	r3, [pc, #380]	; (8001f48 <MX_GPIO_Init+0x1a4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b5b      	ldr	r3, [pc, #364]	; (8001f48 <MX_GPIO_Init+0x1a4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a5a      	ldr	r2, [pc, #360]	; (8001f48 <MX_GPIO_Init+0x1a4>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b58      	ldr	r3, [pc, #352]	; (8001f48 <MX_GPIO_Init+0x1a4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b54      	ldr	r3, [pc, #336]	; (8001f48 <MX_GPIO_Init+0x1a4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a53      	ldr	r2, [pc, #332]	; (8001f48 <MX_GPIO_Init+0x1a4>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b51      	ldr	r3, [pc, #324]	; (8001f48 <MX_GPIO_Init+0x1a4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	4b4d      	ldr	r3, [pc, #308]	; (8001f48 <MX_GPIO_Init+0x1a4>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a4c      	ldr	r2, [pc, #304]	; (8001f48 <MX_GPIO_Init+0x1a4>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <MX_GPIO_Init+0x1a4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12,
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8001e30:	4846      	ldr	r0, [pc, #280]	; (8001f4c <MX_GPIO_Init+0x1a8>)
 8001e32:	f004 f8f7 	bl	8006024 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 51aa 	mov.w	r1, #5440	; 0x1540
 8001e3c:	4844      	ldr	r0, [pc, #272]	; (8001f50 <MX_GPIO_Init+0x1ac>)
 8001e3e:	f004 f8f1 	bl	8006024 <HAL_GPIO_WritePin>
	GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_12, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2140      	movs	r1, #64	; 0x40
 8001e46:	4843      	ldr	r0, [pc, #268]	; (8001f54 <MX_GPIO_Init+0x1b0>)
 8001e48:	f004 f8ec 	bl	8006024 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e52:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e56:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4619      	mov	r1, r3
 8001e62:	483b      	ldr	r0, [pc, #236]	; (8001f50 <MX_GPIO_Init+0x1ac>)
 8001e64:	f003 ff42 	bl	8005cec <HAL_GPIO_Init>

	/*Configure GPIO pin : PC2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4835      	ldr	r0, [pc, #212]	; (8001f50 <MX_GPIO_Init+0x1ac>)
 8001e7c:	f003 ff36 	bl	8005cec <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e80:	2310      	movs	r3, #16
 8001e82:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	482e      	ldr	r0, [pc, #184]	; (8001f4c <MX_GPIO_Init+0x1a8>)
 8001e94:	f003 ff2a 	bl	8005cec <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA10 PA11 PA12 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8001e98:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001e9c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4826      	ldr	r0, [pc, #152]	; (8001f4c <MX_GPIO_Init+0x1a8>)
 8001eb2:	f003 ff1b 	bl	8005cec <HAL_GPIO_Init>

	/*Configure GPIO pin : PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001eb6:	2320      	movs	r3, #32
 8001eb8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4821      	ldr	r0, [pc, #132]	; (8001f50 <MX_GPIO_Init+0x1ac>)
 8001eca:	f003 ff0f 	bl	8005cec <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB14 PB5 PB7
	 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_14 | GPIO_PIN_5 | GPIO_PIN_7
 8001ece:	f244 23a1 	movw	r3, #17057	; 0x42a1
 8001ed2:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	481c      	ldr	r0, [pc, #112]	; (8001f54 <MX_GPIO_Init+0x1b0>)
 8001ee4:	f003 ff02 	bl	8005cec <HAL_GPIO_Init>

	/*Configure GPIO pins : PC6 PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_8;
 8001ee8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001eec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	4813      	ldr	r0, [pc, #76]	; (8001f50 <MX_GPIO_Init+0x1ac>)
 8001f02:	f003 fef3 	bl	8005cec <HAL_GPIO_Init>

	/*Configure GPIO pins : PC10 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001f06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f0a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f0c:	2311      	movs	r3, #17
 8001f0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	480c      	ldr	r0, [pc, #48]	; (8001f50 <MX_GPIO_Init+0x1ac>)
 8001f20:	f003 fee4 	bl	8005cec <HAL_GPIO_Init>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f24:	2340      	movs	r3, #64	; 0x40
 8001f26:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f28:	2311      	movs	r3, #17
 8001f2a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4806      	ldr	r0, [pc, #24]	; (8001f54 <MX_GPIO_Init+0x1b0>)
 8001f3c:	f003 fed6 	bl	8005cec <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	40020800 	.word	0x40020800
 8001f54:	40020400 	.word	0x40020400

08001f58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 && x2 == 0) //
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a2f      	ldr	r2, [pc, #188]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d156      	bne.n	8002016 <HAL_TIM_PeriodElapsedCallback+0xbe>
 8001f68:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d152      	bne.n	8002016 <HAL_TIM_PeriodElapsedCallback+0xbe>
			{
		photoDetect();
 8001f70:	f000 fdf4 	bl	8002b5c <photoDetect>
		robotArmStateDataScan[1] = registerFrame[1].U16;
 8001f74:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f76:	885b      	ldrh	r3, [r3, #2]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	; (800202c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f7c:	705a      	strb	r2, [r3, #1]
		if (robotArmStateDataScan[1] != robotArmStateDataScan[0]) {
 8001f7e:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f80:	785a      	ldrb	r2, [r3, #1]
 8001f82:	4b2a      	ldr	r3, [pc, #168]	; (800202c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d008      	beq.n	8001f9c <HAL_TIM_PeriodElapsedCallback+0x44>
			robotArmState(registerFrame[1].U16); // READ : Base System Status
 8001f8a:	4b27      	ldr	r3, [pc, #156]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f8c:	885b      	ldrh	r3, [r3, #2]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 ff2a 	bl	8003de8 <robotArmState>
			robotArmStateDataScan[0] = robotArmStateDataScan[1];
 8001f94:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f96:	785a      	ldrb	r2, [r3, #1]
 8001f98:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f9a:	701a      	strb	r2, [r3, #0]
		}

		readEncoder();
 8001f9c:	f000 fa72 	bl	8002484 <readEncoder>

		if (photoSig[0] || photoSig[2]) // SOFTWARE LIMIT : Motor/Encoder Photo Sensor
 8001fa0:	4b23      	ldr	r3, [pc, #140]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d103      	bne.n	8001fb0 <HAL_TIM_PeriodElapsedCallback+0x58>
 8001fa8:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001faa:	789b      	ldrb	r3, [r3, #2]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_TIM_PeriodElapsedCallback+0x64>
				{
			duty = 0;
 8001fb0:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
			setMotor();
 8001fb8:	f000 fa3e 	bl	8002438 <setMotor>
		}

		if (startSetHome) {
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_TIM_PeriodElapsedCallback+0x70>
			setHome();
 8001fc4:	f000 fa7a 	bl	80024bc <setHome>
		}

		if (startPointModeY) {
 8001fc8:	4b1c      	ldr	r3, [pc, #112]	; (800203c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01c      	beq.n	800200a <HAL_TIM_PeriodElapsedCallback+0xb2>
			int16_t targetPosPointMode = registerFrame[49].U16; // READ : Goal Point y
 8001fd0:	4b15      	ldr	r3, [pc, #84]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001fd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001fd6:	81fb      	strh	r3, [r7, #14]
			onlyPositionControlPointMode(initPosY, targetPosPointMode / 10);
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fe8:	4a16      	ldr	r2, [pc, #88]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001fea:	fb82 1203 	smull	r1, r2, r2, r3
 8001fee:	1092      	asrs	r2, r2, #2
 8001ff0:	17db      	asrs	r3, r3, #31
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	b21b      	sxth	r3, r3
 8001ff6:	ee07 3a10 	vmov	s14, r3
 8001ffa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ffe:	eef0 0a47 	vmov.f32	s1, s14
 8002002:	eeb0 0a67 	vmov.f32	s0, s15
 8002006:	f000 fc1f 	bl	8002848 <onlyPositionControlPointMode>
		}

		if (startRunTray) {
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_TIM_PeriodElapsedCallback+0xbe>
			runTrayMode();
 8002012:	f000 f81d 	bl	8002050 <runTrayMode>
		}

	}
}
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200004cc 	.word	0x200004cc
 8002024:	20000f28 	.word	0x20000f28
 8002028:	20000d48 	.word	0x20000d48
 800202c:	20000f18 	.word	0x20000f18
 8002030:	20000e38 	.word	0x20000e38
 8002034:	20000e0c 	.word	0x20000e0c
 8002038:	20000264 	.word	0x20000264
 800203c:	20000f09 	.word	0x20000f09
 8002040:	20000f0c 	.word	0x20000f0c
 8002044:	66666667 	.word	0x66666667
 8002048:	20000f1b 	.word	0x20000f1b
 800204c:	00000000 	.word	0x00000000

08002050 <runTrayMode>:

void runTrayMode() {
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0

	switch (runTrayModeCase) {
 8002054:	4b7e      	ldr	r3, [pc, #504]	; (8002250 <runTrayMode+0x200>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b06      	cmp	r3, #6
 800205a:	f200 80f1 	bhi.w	8002240 <runTrayMode+0x1f0>
 800205e:	a201      	add	r2, pc, #4	; (adr r2, 8002064 <runTrayMode+0x14>)
 8002060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002064:	08002081 	.word	0x08002081
 8002068:	08002087 	.word	0x08002087
 800206c:	08002123 	.word	0x08002123
 8002070:	08002153 	.word	0x08002153
 8002074:	08002167 	.word	0x08002167
 8002078:	08002203 	.word	0x08002203
 800207c:	08002233 	.word	0x08002233
	// BEFORE START SET HOME FIRST
	case 0:
		setHome();
 8002080:	f000 fa1c 	bl	80024bc <setHome>
		break;
 8002084:	e0dc      	b.n	8002240 <runTrayMode+0x1f0>
	case 1: // GO PICK

		if (goPick)
 8002086:	4b73      	ldr	r3, [pc, #460]	; (8002254 <runTrayMode+0x204>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d039      	beq.n	8002102 <runTrayMode+0xb2>
		{
			// X-Axis
			PIDCase = 0;
 800208e:	4b72      	ldr	r3, [pc, #456]	; (8002258 <runTrayMode+0x208>)
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
			registerFrame[65].U16 = (int16_t)((objPickPos[pathComplete].x) * 10); // SET : x-axis Target Position
 8002094:	4b71      	ldr	r3, [pc, #452]	; (800225c <runTrayMode+0x20c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4a71      	ldr	r2, [pc, #452]	; (8002260 <runTrayMode+0x210>)
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	edd3 7a00 	vldr	s15, [r3]
 80020a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ae:	ee17 3a90 	vmov	r3, s15
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	4b6b      	ldr	r3, [pc, #428]	; (8002264 <runTrayMode+0x214>)
 80020b8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
			registerFrame[66].U16 = 3000; // SET : x-axis Target Speed
 80020bc:	4b69      	ldr	r3, [pc, #420]	; (8002264 <runTrayMode+0x214>)
 80020be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80020c2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
			registerFrame[67].U16 = 1; // SET : x-axis Target Speed
 80020c6:	4b67      	ldr	r3, [pc, #412]	; (8002264 <runTrayMode+0x214>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

			registerFrame[64].U16 = 0b0000000000000010; // RUN : x-axis Moving Status
 80020ce:	4b65      	ldr	r3, [pc, #404]	; (8002264 <runTrayMode+0x214>)
 80020d0:	2202      	movs	r2, #2
 80020d2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

			// Y-Axis
			passInit = 0;
 80020d6:	4b64      	ldr	r3, [pc, #400]	; (8002268 <runTrayMode+0x218>)
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]

			initPosY = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 80020dc:	4b63      	ldr	r3, [pc, #396]	; (800226c <runTrayMode+0x21c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe f9cb 	bl	800047c <__aeabi_i2d>
 80020e6:	a358      	add	r3, pc, #352	; (adr r3, 8002248 <runTrayMode+0x1f8>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	f7fe fa30 	bl	8000550 <__aeabi_dmul>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7fe fcda 	bl	8000ab0 <__aeabi_d2iz>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4a5c      	ldr	r2, [pc, #368]	; (8002270 <runTrayMode+0x220>)
 8002100:	6013      	str	r3, [r2, #0]
		}

		if (registerFrame[64].U16 == 0)
 8002102:	4b58      	ldr	r3, [pc, #352]	; (8002264 <runTrayMode+0x214>)
 8002104:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002108:	2b00      	cmp	r3, #0
 800210a:	d106      	bne.n	800211a <runTrayMode+0xca>
		{
			registerFrame[64].U16 = 2;
 800210c:	4b55      	ldr	r3, [pc, #340]	; (8002264 <runTrayMode+0x214>)
 800210e:	2202      	movs	r2, #2
 8002110:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			runTrayModeCase = 2;
 8002114:	4b4e      	ldr	r3, [pc, #312]	; (8002250 <runTrayMode+0x200>)
 8002116:	2202      	movs	r2, #2
 8002118:	701a      	strb	r2, [r3, #0]
//		{
//			runTrayModeCase = 2;
//		}
		 //// only Test Y-Axis

		goPick = 0;
 800211a:	4b4e      	ldr	r3, [pc, #312]	; (8002254 <runTrayMode+0x204>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
		break;
 8002120:	e08e      	b.n	8002240 <runTrayMode+0x1f0>
	case 2:
		goPick = 1;
 8002122:	4b4c      	ldr	r3, [pc, #304]	; (8002254 <runTrayMode+0x204>)
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
		onlyPositionControl(initPosY, objPickPos[pathComplete].y);
 8002128:	4b51      	ldr	r3, [pc, #324]	; (8002270 <runTrayMode+0x220>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	ee07 3a90 	vmov	s15, r3
 8002130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002134:	4b49      	ldr	r3, [pc, #292]	; (800225c <runTrayMode+0x20c>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4a49      	ldr	r2, [pc, #292]	; (8002260 <runTrayMode+0x210>)
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	3304      	adds	r3, #4
 8002140:	ed93 7a00 	vldr	s14, [r3]
 8002144:	eef0 0a47 	vmov.f32	s1, s14
 8002148:	eeb0 0a67 	vmov.f32	s0, s15
 800214c:	f000 fa28 	bl	80025a0 <onlyPositionControl>
		break;
 8002150:	e076      	b.n	8002240 <runTrayMode+0x1f0>
	case 3:
		// END EFFECTOR CONTROL
		checkGoPick = 5;
 8002152:	4b48      	ldr	r3, [pc, #288]	; (8002274 <runTrayMode+0x224>)
 8002154:	2205      	movs	r2, #5
 8002156:	701a      	strb	r2, [r3, #0]
		//endEffectorControl(endEffector.status, 0);
		//HAL_Delay(10);
		//endEffectorPick();
		// endEffectorPicking = 1;
		x2 = 1;
 8002158:	4b47      	ldr	r3, [pc, #284]	; (8002278 <runTrayMode+0x228>)
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
		x[0] = 1;
 800215e:	4b47      	ldr	r3, [pc, #284]	; (800227c <runTrayMode+0x22c>)
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]

		break;
 8002164:	e06c      	b.n	8002240 <runTrayMode+0x1f0>
	case 4:  // GO PLACE

		if (goPlace)
 8002166:	4b46      	ldr	r3, [pc, #280]	; (8002280 <runTrayMode+0x230>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d039      	beq.n	80021e2 <runTrayMode+0x192>
		{
			// X-Axis
			PIDCase = 0;
 800216e:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <runTrayMode+0x208>)
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
			registerFrame[65].U16 = (int16_t)((objPlacePos[pathComplete].x) * 10);  // SET : x-axis Target Position
 8002174:	4b39      	ldr	r3, [pc, #228]	; (800225c <runTrayMode+0x20c>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4a42      	ldr	r2, [pc, #264]	; (8002284 <runTrayMode+0x234>)
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	edd3 7a00 	vldr	s15, [r3]
 8002182:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800218a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800218e:	ee17 3a90 	vmov	r3, s15
 8002192:	b21b      	sxth	r3, r3
 8002194:	b29a      	uxth	r2, r3
 8002196:	4b33      	ldr	r3, [pc, #204]	; (8002264 <runTrayMode+0x214>)
 8002198:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
			registerFrame[66].U16 = 3000; // SET : x-axis Target Speed
 800219c:	4b31      	ldr	r3, [pc, #196]	; (8002264 <runTrayMode+0x214>)
 800219e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80021a2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
			registerFrame[67].U16 = 1; // SET : x-axis Target Speed
 80021a6:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <runTrayMode+0x214>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

			registerFrame[64].U16 = 0b0000000000000010; // RUN : x-axis Moving Status
 80021ae:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <runTrayMode+0x214>)
 80021b0:	2202      	movs	r2, #2
 80021b2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

			// Y-Axis
			passInit = 0;
 80021b6:	4b2c      	ldr	r3, [pc, #176]	; (8002268 <runTrayMode+0x218>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]

			initPosY = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 80021bc:	4b2b      	ldr	r3, [pc, #172]	; (800226c <runTrayMode+0x21c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f95b 	bl	800047c <__aeabi_i2d>
 80021c6:	a320      	add	r3, pc, #128	; (adr r3, 8002248 <runTrayMode+0x1f8>)
 80021c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021cc:	f7fe f9c0 	bl	8000550 <__aeabi_dmul>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4610      	mov	r0, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	f7fe fc6a 	bl	8000ab0 <__aeabi_d2iz>
 80021dc:	4603      	mov	r3, r0
 80021de:	4a24      	ldr	r2, [pc, #144]	; (8002270 <runTrayMode+0x220>)
 80021e0:	6013      	str	r3, [r2, #0]

//		if (registerFrame[64].U16 == 0)
//		{
//			runTrayModeCase = 5;
//		}
		if (registerFrame[64].U16 == 0)
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <runTrayMode+0x214>)
 80021e4:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d106      	bne.n	80021fa <runTrayMode+0x1aa>
		{
			registerFrame[64].U16 = 2;
 80021ec:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <runTrayMode+0x214>)
 80021ee:	2202      	movs	r2, #2
 80021f0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			runTrayModeCase = 5;
 80021f4:	4b16      	ldr	r3, [pc, #88]	; (8002250 <runTrayMode+0x200>)
 80021f6:	2205      	movs	r2, #5
 80021f8:	701a      	strb	r2, [r3, #0]
		}
		// runTrayModeCase = 5; // only test Y-Axis
		goPlace = 0;
 80021fa:	4b21      	ldr	r3, [pc, #132]	; (8002280 <runTrayMode+0x230>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
		break;
 8002200:	e01e      	b.n	8002240 <runTrayMode+0x1f0>
	case 5:
		goPlace = 1;
 8002202:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <runTrayMode+0x230>)
 8002204:	2201      	movs	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]
		onlyPositionControl(initPosY, objPlacePos[pathComplete].y);
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <runTrayMode+0x220>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	ee07 3a90 	vmov	s15, r3
 8002210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <runTrayMode+0x20c>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4a1a      	ldr	r2, [pc, #104]	; (8002284 <runTrayMode+0x234>)
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	3304      	adds	r3, #4
 8002220:	ed93 7a00 	vldr	s14, [r3]
 8002224:	eef0 0a47 	vmov.f32	s1, s14
 8002228:	eeb0 0a67 	vmov.f32	s0, s15
 800222c:	f000 f9b8 	bl	80025a0 <onlyPositionControl>
		break;
 8002230:	e006      	b.n	8002240 <runTrayMode+0x1f0>
		// END EFFECTOR CONTROL
		//endEffectorControl(endEffector.status, 0);
		//HAL_Delay(10);
		//endEffectorPlace();
		// endEffectorPlacing = 1;
		x2 = 1;
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <runTrayMode+0x228>)
 8002234:	2201      	movs	r2, #1
 8002236:	701a      	strb	r2, [r3, #0]
		x[1] = 1;
 8002238:	4b10      	ldr	r3, [pc, #64]	; (800227c <runTrayMode+0x22c>)
 800223a:	2201      	movs	r2, #1
 800223c:	705a      	strb	r2, [r3, #1]

		break;
 800223e:	bf00      	nop
	}

}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}
 8002244:	f3af 8000 	nop.w
 8002248:	464f6faa 	.word	0x464f6faa
 800224c:	3f8199cb 	.word	0x3f8199cb
 8002250:	20000f1d 	.word	0x20000f1d
 8002254:	2000026f 	.word	0x2000026f
 8002258:	20000f22 	.word	0x20000f22
 800225c:	20000f1c 	.word	0x20000f1c
 8002260:	20000e3c 	.word	0x20000e3c
 8002264:	20000d48 	.word	0x20000d48
 8002268:	20000f20 	.word	0x20000f20
 800226c:	20000e14 	.word	0x20000e14
 8002270:	20000f0c 	.word	0x20000f0c
 8002274:	20000f21 	.word	0x20000f21
 8002278:	20000f28 	.word	0x20000f28
 800227c:	20000f24 	.word	0x20000f24
 8002280:	20000270 	.word	0x20000270
 8002284:	20000e84 	.word	0x20000e84

08002288 <endEffectorPick>:

void endEffectorPick() {
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0

	switch (endEffectorState) {
 800228c:	4b28      	ldr	r3, [pc, #160]	; (8002330 <endEffectorPick+0xa8>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d84a      	bhi.n	800232a <endEffectorPick+0xa2>
 8002294:	a201      	add	r2, pc, #4	; (adr r2, 800229c <endEffectorPick+0x14>)
 8002296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229a:	bf00      	nop
 800229c:	080022ad 	.word	0x080022ad
 80022a0:	080022c9 	.word	0x080022c9
 80022a4:	080022e5 	.word	0x080022e5
 80022a8:	08002301 	.word	0x08002301
	case 0:
		endEffectorControl(endEffector.gripperWork, 1); // GRIPPER ON
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <endEffectorPick+0xac>)
 80022ae:	789b      	ldrb	r3, [r3, #2]
 80022b0:	2101      	movs	r1, #1
 80022b2:	4618      	mov	r0, r3
 80022b4:	f001 ff00 	bl	80040b8 <endEffectorControl>
		if (readStatus[0] == 0b100) {
 80022b8:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <endEffectorPick+0xb0>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d12f      	bne.n	8002320 <endEffectorPick+0x98>
			endEffectorState = 1;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <endEffectorPick+0xa8>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80022c6:	e02b      	b.n	8002320 <endEffectorPick+0x98>
	case 1:
		endEffectorControl(endEffector.gripperPickAndPlace, 1); // PICK UP
 80022c8:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <endEffectorPick+0xac>)
 80022ca:	78db      	ldrb	r3, [r3, #3]
 80022cc:	2101      	movs	r1, #1
 80022ce:	4618      	mov	r0, r3
 80022d0:	f001 fef2 	bl	80040b8 <endEffectorControl>
		if (readStatus[0] == 0b0111) {
 80022d4:	4b18      	ldr	r3, [pc, #96]	; (8002338 <endEffectorPick+0xb0>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b07      	cmp	r3, #7
 80022da:	d123      	bne.n	8002324 <endEffectorPick+0x9c>
			endEffectorState = 2;
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <endEffectorPick+0xa8>)
 80022de:	2202      	movs	r2, #2
 80022e0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80022e2:	e01f      	b.n	8002324 <endEffectorPick+0x9c>
	case 2:
		endEffectorControl(endEffector.gripperWork, 0); // GRIPPER OFF
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <endEffectorPick+0xac>)
 80022e6:	789b      	ldrb	r3, [r3, #2]
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f001 fee4 	bl	80040b8 <endEffectorControl>
		if (readStatus[0] == 0b011) {
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <endEffectorPick+0xb0>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d117      	bne.n	8002328 <endEffectorPick+0xa0>
			endEffectorState = 3;
 80022f8:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <endEffectorPick+0xa8>)
 80022fa:	2203      	movs	r2, #3
 80022fc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80022fe:	e013      	b.n	8002328 <endEffectorPick+0xa0>
	case 3:
		runTrayModeCase = 4;
 8002300:	4b0e      	ldr	r3, [pc, #56]	; (800233c <endEffectorPick+0xb4>)
 8002302:	2204      	movs	r2, #4
 8002304:	701a      	strb	r2, [r3, #0]
		endEffectorState = 0;
 8002306:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <endEffectorPick+0xa8>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
		endEffectorPicking = 0;
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <endEffectorPick+0xb8>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
		x[0] = 0;
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <endEffectorPick+0xbc>)
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
		x2 = 0;
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <endEffectorPick+0xc0>)
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
		break;
 800231e:	e004      	b.n	800232a <endEffectorPick+0xa2>
		break;
 8002320:	bf00      	nop
 8002322:	e002      	b.n	800232a <endEffectorPick+0xa2>
		break;
 8002324:	bf00      	nop
 8002326:	e000      	b.n	800232a <endEffectorPick+0xa2>
		break;
 8002328:	bf00      	nop
	}
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000f1a 	.word	0x20000f1a
 8002334:	20000268 	.word	0x20000268
 8002338:	20000f10 	.word	0x20000f10
 800233c:	20000f1d 	.word	0x20000f1d
 8002340:	20000f1e 	.word	0x20000f1e
 8002344:	20000f24 	.word	0x20000f24
 8002348:	20000f28 	.word	0x20000f28

0800234c <endEffectorPlace>:

void endEffectorPlace() {
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
	switch (endEffectorState) {
 8002350:	4b31      	ldr	r3, [pc, #196]	; (8002418 <endEffectorPlace+0xcc>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d85c      	bhi.n	8002412 <endEffectorPlace+0xc6>
 8002358:	a201      	add	r2, pc, #4	; (adr r2, 8002360 <endEffectorPlace+0x14>)
 800235a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235e:	bf00      	nop
 8002360:	08002371 	.word	0x08002371
 8002364:	0800238d 	.word	0x0800238d
 8002368:	080023a9 	.word	0x080023a9
 800236c:	080023c5 	.word	0x080023c5
	case 0:
		endEffectorControl(endEffector.gripperWork, 1); // GRIPPER ON
 8002370:	4b2a      	ldr	r3, [pc, #168]	; (800241c <endEffectorPlace+0xd0>)
 8002372:	789b      	ldrb	r3, [r3, #2]
 8002374:	2101      	movs	r1, #1
 8002376:	4618      	mov	r0, r3
 8002378:	f001 fe9e 	bl	80040b8 <endEffectorControl>
		if (readStatus[0] == 0b111) {
 800237c:	4b28      	ldr	r3, [pc, #160]	; (8002420 <endEffectorPlace+0xd4>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b07      	cmp	r3, #7
 8002382:	d13f      	bne.n	8002404 <endEffectorPlace+0xb8>
			endEffectorState = 1;
 8002384:	4b24      	ldr	r3, [pc, #144]	; (8002418 <endEffectorPlace+0xcc>)
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
		}
		break;
 800238a:	e03b      	b.n	8002404 <endEffectorPlace+0xb8>
	case 1:
		endEffectorControl(endEffector.gripperPickAndPlace, 0); // PICK DOWN
 800238c:	4b23      	ldr	r3, [pc, #140]	; (800241c <endEffectorPlace+0xd0>)
 800238e:	78db      	ldrb	r3, [r3, #3]
 8002390:	2100      	movs	r1, #0
 8002392:	4618      	mov	r0, r3
 8002394:	f001 fe90 	bl	80040b8 <endEffectorControl>
		if (readStatus[0] == 0b0100) {
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <endEffectorPlace+0xd4>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b04      	cmp	r3, #4
 800239e:	d133      	bne.n	8002408 <endEffectorPlace+0xbc>
			endEffectorState = 2;
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <endEffectorPlace+0xcc>)
 80023a2:	2202      	movs	r2, #2
 80023a4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80023a6:	e02f      	b.n	8002408 <endEffectorPlace+0xbc>
	case 2:
		endEffectorControl(endEffector.gripperWork, 0); // GRIPPER OFF
 80023a8:	4b1c      	ldr	r3, [pc, #112]	; (800241c <endEffectorPlace+0xd0>)
 80023aa:	789b      	ldrb	r3, [r3, #2]
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f001 fe82 	bl	80040b8 <endEffectorControl>
		if (readStatus[0] == 0b0000) {
 80023b4:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <endEffectorPlace+0xd4>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d127      	bne.n	800240c <endEffectorPlace+0xc0>
			endEffectorState = 3;
 80023bc:	4b16      	ldr	r3, [pc, #88]	; (8002418 <endEffectorPlace+0xcc>)
 80023be:	2203      	movs	r2, #3
 80023c0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80023c2:	e023      	b.n	800240c <endEffectorPlace+0xc0>
	case 3:
		runTrayModeCase = 1;
 80023c4:	4b17      	ldr	r3, [pc, #92]	; (8002424 <endEffectorPlace+0xd8>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
		endEffectorState = 0;
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <endEffectorPlace+0xcc>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		endEffectorPicking = 0;
 80023d0:	4b15      	ldr	r3, [pc, #84]	; (8002428 <endEffectorPlace+0xdc>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		pathComplete += 1;
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <endEffectorPlace+0xe0>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	3301      	adds	r3, #1
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <endEffectorPlace+0xe0>)
 80023e0:	701a      	strb	r2, [r3, #0]
		x[1] = 0;
 80023e2:	4b13      	ldr	r3, [pc, #76]	; (8002430 <endEffectorPlace+0xe4>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	705a      	strb	r2, [r3, #1]
		x2 = 0;
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <endEffectorPlace+0xe8>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
		if (pathComplete == 9) { // PUT IN SWITCH CASE
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <endEffectorPlace+0xe0>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b09      	cmp	r3, #9
 80023f4:	d10c      	bne.n	8002410 <endEffectorPlace+0xc4>
			// setHome();
			pathComplete = 0;
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <endEffectorPlace+0xe0>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
			runTrayModeCase = 0;
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <endEffectorPlace+0xd8>)
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002402:	e005      	b.n	8002410 <endEffectorPlace+0xc4>
		break;
 8002404:	bf00      	nop
 8002406:	e004      	b.n	8002412 <endEffectorPlace+0xc6>
		break;
 8002408:	bf00      	nop
 800240a:	e002      	b.n	8002412 <endEffectorPlace+0xc6>
		break;
 800240c:	bf00      	nop
 800240e:	e000      	b.n	8002412 <endEffectorPlace+0xc6>
		break;
 8002410:	bf00      	nop
	}

}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000f1a 	.word	0x20000f1a
 800241c:	20000268 	.word	0x20000268
 8002420:	20000f10 	.word	0x20000f10
 8002424:	20000f1d 	.word	0x20000f1d
 8002428:	20000f1e 	.word	0x20000f1e
 800242c:	20000f1c 	.word	0x20000f1c
 8002430:	20000f24 	.word	0x20000f24
 8002434:	20000f28 	.word	0x20000f28

08002438 <setMotor>:
void setMotor() {
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	if (dirAxisY) {
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <setMotor+0x3c>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <setMotor+0x18>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002444:	2201      	movs	r2, #1
 8002446:	2140      	movs	r1, #64	; 0x40
 8002448:	480b      	ldr	r0, [pc, #44]	; (8002478 <setMotor+0x40>)
 800244a:	f003 fdeb 	bl	8006024 <HAL_GPIO_WritePin>
 800244e:	e004      	b.n	800245a <setMotor+0x22>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002450:	2200      	movs	r2, #0
 8002452:	2140      	movs	r1, #64	; 0x40
 8002454:	4808      	ldr	r0, [pc, #32]	; (8002478 <setMotor+0x40>)
 8002456:	f003 fde5 	bl	8006024 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <setMotor+0x44>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <setMotor+0x48>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002468:	ee17 2a90 	vmov	r2, s15
 800246c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000244 	.word	0x20000244
 8002478:	40020800 	.word	0x40020800
 800247c:	20000e0c 	.word	0x20000e0c
 8002480:	20000418 	.word	0x20000418

08002484 <readEncoder>:

void readEncoder() {
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <readEncoder+0x28>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	461a      	mov	r2, r3
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <readEncoder+0x2c>)
 8002492:	601a      	str	r2, [r3, #0]
	QEIReadModified = QEIReadRaw - QEIHome;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <readEncoder+0x2c>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <readEncoder+0x30>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	4a06      	ldr	r2, [pc, #24]	; (80024b8 <readEncoder+0x34>)
 80024a0:	6013      	str	r3, [r2, #0]
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	20000634 	.word	0x20000634
 80024b0:	20000e10 	.word	0x20000e10
 80024b4:	20000e18 	.word	0x20000e18
 80024b8:	20000e14 	.word	0x20000e14

080024bc <setHome>:

void setHome() {
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0

	switch (myHomeState) {
 80024c0:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <setHome+0xb4>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d02f      	beq.n	8002528 <setHome+0x6c>
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	dc4f      	bgt.n	800256c <setHome+0xb0>
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <setHome+0x1a>
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d014      	beq.n	80024fe <setHome+0x42>
		}
		break;

	}

}
 80024d4:	e04a      	b.n	800256c <setHome+0xb0>
		if (photoSig[0]) // Motor Photo Sensor
 80024d6:	4b27      	ldr	r3, [pc, #156]	; (8002574 <setHome+0xb8>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <setHome+0x2a>
			myHomeState = 1;
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <setHome+0xb4>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
		break;
 80024e4:	e042      	b.n	800256c <setHome+0xb0>
			dirAxisY = 0;
 80024e6:	4b24      	ldr	r3, [pc, #144]	; (8002578 <setHome+0xbc>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
			duty = 360;
 80024ec:	4b23      	ldr	r3, [pc, #140]	; (800257c <setHome+0xc0>)
 80024ee:	4a24      	ldr	r2, [pc, #144]	; (8002580 <setHome+0xc4>)
 80024f0:	601a      	str	r2, [r3, #0]
			setMotor();
 80024f2:	f7ff ffa1 	bl	8002438 <setMotor>
			myHomeState = 1;
 80024f6:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <setHome+0xb4>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
		break;
 80024fc:	e036      	b.n	800256c <setHome+0xb0>
		if (photoSig[0]) // Motor Photo Sensor
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <setHome+0xb8>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <setHome+0x5c>
			dirAxisY = 1;
 8002506:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <setHome+0xbc>)
 8002508:	2201      	movs	r2, #1
 800250a:	701a      	strb	r2, [r3, #0]
			duty = 360;
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <setHome+0xc0>)
 800250e:	4a1c      	ldr	r2, [pc, #112]	; (8002580 <setHome+0xc4>)
 8002510:	601a      	str	r2, [r3, #0]
			setMotor();
 8002512:	f7ff ff91 	bl	8002438 <setMotor>
		break;
 8002516:	e026      	b.n	8002566 <setHome+0xaa>
		} else if (photoSig[1]) // Center Photo Sensor
 8002518:	4b16      	ldr	r3, [pc, #88]	; (8002574 <setHome+0xb8>)
 800251a:	785b      	ldrb	r3, [r3, #1]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d022      	beq.n	8002566 <setHome+0xaa>
			myHomeState = 2;
 8002520:	4b13      	ldr	r3, [pc, #76]	; (8002570 <setHome+0xb4>)
 8002522:	2202      	movs	r2, #2
 8002524:	701a      	strb	r2, [r3, #0]
		break;
 8002526:	e01e      	b.n	8002566 <setHome+0xaa>
		duty = 0;
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <setHome+0xc0>)
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
		setMotor();
 8002530:	f7ff ff82 	bl	8002438 <setMotor>
		QEIHome = QEIReadRaw;
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <setHome+0xc8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a13      	ldr	r2, [pc, #76]	; (8002588 <setHome+0xcc>)
 800253a:	6013      	str	r3, [r2, #0]
		startSetHome = 0;
 800253c:	4b13      	ldr	r3, [pc, #76]	; (800258c <setHome+0xd0>)
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
		myHomeState = 0;
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <setHome+0xb4>)
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
		registerFrame[16].U16 = 0; // RESET : y-axis Moving Status
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <setHome+0xd4>)
 800254a:	2200      	movs	r2, #0
 800254c:	841a      	strh	r2, [r3, #32]
		mmActPos = 0;
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <setHome+0xd8>)
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
		if (startRunTray) {
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <setHome+0xdc>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <setHome+0xae>
			runTrayModeCase = 1;
 800255e:	4b0f      	ldr	r3, [pc, #60]	; (800259c <setHome+0xe0>)
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
		break;
 8002564:	e001      	b.n	800256a <setHome+0xae>
		break;
 8002566:	bf00      	nop
 8002568:	e000      	b.n	800256c <setHome+0xb0>
		break;
 800256a:	bf00      	nop
}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000f08 	.word	0x20000f08
 8002574:	20000e38 	.word	0x20000e38
 8002578:	20000244 	.word	0x20000244
 800257c:	20000e0c 	.word	0x20000e0c
 8002580:	43b40000 	.word	0x43b40000
 8002584:	20000e10 	.word	0x20000e10
 8002588:	20000e18 	.word	0x20000e18
 800258c:	20000264 	.word	0x20000264
 8002590:	20000d48 	.word	0x20000d48
 8002594:	20000e1c 	.word	0x20000e1c
 8002598:	20000f1b 	.word	0x20000f1b
 800259c:	20000f1d 	.word	0x20000f1d

080025a0 <onlyPositionControl>:
	}
	prePos = mmActPos;
	setMotor();
}

void onlyPositionControl(float initPos, float targetPos) {
 80025a0:	b5b0      	push	{r4, r5, r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80025aa:	edc7 0a00 	vstr	s1, [r7]
	calculationTraj result = trapezoidalTraj(initPos, targetPos);
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	edd7 0a00 	vldr	s1, [r7]
 80025b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 faf0 	bl	8002ba0 <trapezoidalTraj>

	switch (PIDCase) {
 80025c0:	4b8f      	ldr	r3, [pc, #572]	; (8002800 <onlyPositionControl+0x260>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <onlyPositionControl+0x30>
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	f000 80e5 	beq.w	8002798 <onlyPositionControl+0x1f8>

		}
		break;
	}

}
 80025ce:	e10b      	b.n	80027e8 <onlyPositionControl+0x248>
		mmActPos = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 80025d0:	4b8c      	ldr	r3, [pc, #560]	; (8002804 <onlyPositionControl+0x264>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fd ff51 	bl	800047c <__aeabi_i2d>
 80025da:	a385      	add	r3, pc, #532	; (adr r3, 80027f0 <onlyPositionControl+0x250>)
 80025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e0:	f7fd ffb6 	bl	8000550 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	f7fe fa88 	bl	8000b00 <__aeabi_d2f>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4a85      	ldr	r2, [pc, #532]	; (8002808 <onlyPositionControl+0x268>)
 80025f4:	6013      	str	r3, [r2, #0]
		mmActVel = (mmActPos - prePos) / 0.001;
 80025f6:	4b84      	ldr	r3, [pc, #528]	; (8002808 <onlyPositionControl+0x268>)
 80025f8:	ed93 7a00 	vldr	s14, [r3]
 80025fc:	4b83      	ldr	r3, [pc, #524]	; (800280c <onlyPositionControl+0x26c>)
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002606:	ee17 0a90 	vmov	r0, s15
 800260a:	f7fd ff49 	bl	80004a0 <__aeabi_f2d>
 800260e:	a37a      	add	r3, pc, #488	; (adr r3, 80027f8 <onlyPositionControl+0x258>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	f7fe f8c6 	bl	80007a4 <__aeabi_ddiv>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	f7fe fa6e 	bl	8000b00 <__aeabi_d2f>
 8002624:	4603      	mov	r3, r0
 8002626:	4a7a      	ldr	r2, [pc, #488]	; (8002810 <onlyPositionControl+0x270>)
 8002628:	6013      	str	r3, [r2, #0]
		mmActAcc = (mmActVel - preVel) / 0.001;
 800262a:	4b79      	ldr	r3, [pc, #484]	; (8002810 <onlyPositionControl+0x270>)
 800262c:	ed93 7a00 	vldr	s14, [r3]
 8002630:	4b78      	ldr	r3, [pc, #480]	; (8002814 <onlyPositionControl+0x274>)
 8002632:	edd3 7a00 	vldr	s15, [r3]
 8002636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263a:	ee17 0a90 	vmov	r0, s15
 800263e:	f7fd ff2f 	bl	80004a0 <__aeabi_f2d>
 8002642:	a36d      	add	r3, pc, #436	; (adr r3, 80027f8 <onlyPositionControl+0x258>)
 8002644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002648:	f7fe f8ac 	bl	80007a4 <__aeabi_ddiv>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	f7fe fa54 	bl	8000b00 <__aeabi_d2f>
 8002658:	4603      	mov	r3, r0
 800265a:	4a6f      	ldr	r2, [pc, #444]	; (8002818 <onlyPositionControl+0x278>)
 800265c:	6013      	str	r3, [r2, #0]
		mmError = result.posTraj - mmActPos;
 800265e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002662:	4b69      	ldr	r3, [pc, #420]	; (8002808 <onlyPositionControl+0x268>)
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266c:	4b6b      	ldr	r3, [pc, #428]	; (800281c <onlyPositionControl+0x27c>)
 800266e:	edc3 7a00 	vstr	s15, [r3]
		positionPID.eIntegral = positionPID.eIntegral + (mmError * 0.001);
 8002672:	4b6b      	ldr	r3, [pc, #428]	; (8002820 <onlyPositionControl+0x280>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd ff12 	bl	80004a0 <__aeabi_f2d>
 800267c:	4604      	mov	r4, r0
 800267e:	460d      	mov	r5, r1
 8002680:	4b66      	ldr	r3, [pc, #408]	; (800281c <onlyPositionControl+0x27c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd ff0b 	bl	80004a0 <__aeabi_f2d>
 800268a:	a35b      	add	r3, pc, #364	; (adr r3, 80027f8 <onlyPositionControl+0x258>)
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	f7fd ff5e 	bl	8000550 <__aeabi_dmul>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4620      	mov	r0, r4
 800269a:	4629      	mov	r1, r5
 800269c:	f7fd fda2 	bl	80001e4 <__adddf3>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	f7fe fa2a 	bl	8000b00 <__aeabi_d2f>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4a5c      	ldr	r2, [pc, #368]	; (8002820 <onlyPositionControl+0x280>)
 80026b0:	60d3      	str	r3, [r2, #12]
		duty = (positionPID.pTerm * mmError)
 80026b2:	4b5b      	ldr	r3, [pc, #364]	; (8002820 <onlyPositionControl+0x280>)
 80026b4:	ed93 7a00 	vldr	s14, [r3]
 80026b8:	4b58      	ldr	r3, [pc, #352]	; (800281c <onlyPositionControl+0x27c>)
 80026ba:	edd3 7a00 	vldr	s15, [r3]
 80026be:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ (positionPID.iTerm * positionPID.eIntegral);
 80026c2:	4b57      	ldr	r3, [pc, #348]	; (8002820 <onlyPositionControl+0x280>)
 80026c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80026c8:	4b55      	ldr	r3, [pc, #340]	; (8002820 <onlyPositionControl+0x280>)
 80026ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80026ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d2:	ee77 7a27 	vadd.f32	s15, s14, s15
		duty = (positionPID.pTerm * mmError)
 80026d6:	4b53      	ldr	r3, [pc, #332]	; (8002824 <onlyPositionControl+0x284>)
 80026d8:	edc3 7a00 	vstr	s15, [r3]
		if (duty < 0) {
 80026dc:	4b51      	ldr	r3, [pc, #324]	; (8002824 <onlyPositionControl+0x284>)
 80026de:	edd3 7a00 	vldr	s15, [r3]
 80026e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ea:	d50b      	bpl.n	8002704 <onlyPositionControl+0x164>
			dirAxisY = 0;
 80026ec:	4b4e      	ldr	r3, [pc, #312]	; (8002828 <onlyPositionControl+0x288>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
			duty = (-1) * duty;
 80026f2:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <onlyPositionControl+0x284>)
 80026f4:	edd3 7a00 	vldr	s15, [r3]
 80026f8:	eef1 7a67 	vneg.f32	s15, s15
 80026fc:	4b49      	ldr	r3, [pc, #292]	; (8002824 <onlyPositionControl+0x284>)
 80026fe:	edc3 7a00 	vstr	s15, [r3]
 8002702:	e002      	b.n	800270a <onlyPositionControl+0x16a>
			dirAxisY = 1;
 8002704:	4b48      	ldr	r3, [pc, #288]	; (8002828 <onlyPositionControl+0x288>)
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
		if (duty > 1000) {
 800270a:	4b46      	ldr	r3, [pc, #280]	; (8002824 <onlyPositionControl+0x284>)
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800282c <onlyPositionControl+0x28c>
 8002714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271c:	dd03      	ble.n	8002726 <onlyPositionControl+0x186>
			duty = 1000;
 800271e:	4b41      	ldr	r3, [pc, #260]	; (8002824 <onlyPositionControl+0x284>)
 8002720:	4a43      	ldr	r2, [pc, #268]	; (8002830 <onlyPositionControl+0x290>)
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	e00d      	b.n	8002742 <onlyPositionControl+0x1a2>
		} else if (duty <= 300) {
 8002726:	4b3f      	ldr	r3, [pc, #252]	; (8002824 <onlyPositionControl+0x284>)
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002834 <onlyPositionControl+0x294>
 8002730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002738:	d803      	bhi.n	8002742 <onlyPositionControl+0x1a2>
			duty = 0;
 800273a:	4b3a      	ldr	r3, [pc, #232]	; (8002824 <onlyPositionControl+0x284>)
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
		setMotor();
 8002742:	f7ff fe79 	bl	8002438 <setMotor>
		prePos = mmActPos;
 8002746:	4b30      	ldr	r3, [pc, #192]	; (8002808 <onlyPositionControl+0x268>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a30      	ldr	r2, [pc, #192]	; (800280c <onlyPositionControl+0x26c>)
 800274c:	6013      	str	r3, [r2, #0]
		preVel = mmActVel;
 800274e:	4b30      	ldr	r3, [pc, #192]	; (8002810 <onlyPositionControl+0x270>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a30      	ldr	r2, [pc, #192]	; (8002814 <onlyPositionControl+0x274>)
 8002754:	6013      	str	r3, [r2, #0]
		finalPIDChecky = result.velTraj;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4a37      	ldr	r2, [pc, #220]	; (8002838 <onlyPositionControl+0x298>)
 800275a:	6013      	str	r3, [r2, #0]
		if (fabs(mmError) <= 2.5 && result.velTraj == 0.0  && passInit) {
 800275c:	4b2f      	ldr	r3, [pc, #188]	; (800281c <onlyPositionControl+0x27c>)
 800275e:	edd3 7a00 	vldr	s15, [r3]
 8002762:	eef0 7ae7 	vabs.f32	s15, s15
 8002766:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800276a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002772:	d80d      	bhi.n	8002790 <onlyPositionControl+0x1f0>
 8002774:	edd7 7a03 	vldr	s15, [r7, #12]
 8002778:	eef5 7a40 	vcmp.f32	s15, #0.0
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	d106      	bne.n	8002790 <onlyPositionControl+0x1f0>
 8002782:	4b2e      	ldr	r3, [pc, #184]	; (800283c <onlyPositionControl+0x29c>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <onlyPositionControl+0x1f0>
			PIDCase = 1;
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <onlyPositionControl+0x260>)
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
		passInit = 1;
 8002790:	4b2a      	ldr	r3, [pc, #168]	; (800283c <onlyPositionControl+0x29c>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
		break;
 8002796:	e027      	b.n	80027e8 <onlyPositionControl+0x248>
		if (runTrayModeCase == 2) {
 8002798:	4b29      	ldr	r3, [pc, #164]	; (8002840 <onlyPositionControl+0x2a0>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d10f      	bne.n	80027c0 <onlyPositionControl+0x220>
			runTrayModeCase = 3;
 80027a0:	4b27      	ldr	r3, [pc, #156]	; (8002840 <onlyPositionControl+0x2a0>)
 80027a2:	2203      	movs	r2, #3
 80027a4:	701a      	strb	r2, [r3, #0]
			passInit = 0;
 80027a6:	4b25      	ldr	r3, [pc, #148]	; (800283c <onlyPositionControl+0x29c>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
			PIDCase = 0;
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <onlyPositionControl+0x260>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
			duty = 0;
 80027b2:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <onlyPositionControl+0x284>)
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
				setMotor();
 80027ba:	f7ff fe3d 	bl	8002438 <setMotor>
		break;
 80027be:	e012      	b.n	80027e6 <onlyPositionControl+0x246>
		} else if (runTrayModeCase == 5) {
 80027c0:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <onlyPositionControl+0x2a0>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	d10e      	bne.n	80027e6 <onlyPositionControl+0x246>
			runTrayModeCase = 6;
 80027c8:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <onlyPositionControl+0x2a0>)
 80027ca:	2206      	movs	r2, #6
 80027cc:	701a      	strb	r2, [r3, #0]
			passInit = 0;
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <onlyPositionControl+0x29c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
			PIDCase = 0;
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <onlyPositionControl+0x260>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
			duty = 0;
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <onlyPositionControl+0x284>)
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
				setMotor();
 80027e2:	f7ff fe29 	bl	8002438 <setMotor>
		break;
 80027e6:	bf00      	nop
}
 80027e8:	bf00      	nop
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bdb0      	pop	{r4, r5, r7, pc}
 80027f0:	464f6faa 	.word	0x464f6faa
 80027f4:	3f8199cb 	.word	0x3f8199cb
 80027f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80027fc:	3f50624d 	.word	0x3f50624d
 8002800:	20000f22 	.word	0x20000f22
 8002804:	20000e14 	.word	0x20000e14
 8002808:	20000e1c 	.word	0x20000e1c
 800280c:	20000e2c 	.word	0x20000e2c
 8002810:	20000e24 	.word	0x20000e24
 8002814:	20000e30 	.word	0x20000e30
 8002818:	20000e28 	.word	0x20000e28
 800281c:	20000e20 	.word	0x20000e20
 8002820:	20000248 	.word	0x20000248
 8002824:	20000e0c 	.word	0x20000e0c
 8002828:	20000244 	.word	0x20000244
 800282c:	447a0000 	.word	0x447a0000
 8002830:	447a0000 	.word	0x447a0000
 8002834:	43960000 	.word	0x43960000
 8002838:	20000f2c 	.word	0x20000f2c
 800283c:	20000f20 	.word	0x20000f20
 8002840:	20000f1d 	.word	0x20000f1d
 8002844:	00000000 	.word	0x00000000

08002848 <onlyPositionControlPointMode>:

void onlyPositionControlPointMode(float initPos, float targetPos) {
 8002848:	b5b0      	push	{r4, r5, r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002852:	edc7 0a00 	vstr	s1, [r7]
	calculationTraj result = trapezoidalTraj(initPos, targetPos);
 8002856:	f107 0308 	add.w	r3, r7, #8
 800285a:	edd7 0a00 	vldr	s1, [r7]
 800285e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f99c 	bl	8002ba0 <trapezoidalTraj>

	mmActPos = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 8002868:	4b69      	ldr	r3, [pc, #420]	; (8002a10 <onlyPositionControlPointMode+0x1c8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fd fe05 	bl	800047c <__aeabi_i2d>
 8002872:	a363      	add	r3, pc, #396	; (adr r3, 8002a00 <onlyPositionControlPointMode+0x1b8>)
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f7fd fe6a 	bl	8000550 <__aeabi_dmul>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	f7fe f93c 	bl	8000b00 <__aeabi_d2f>
 8002888:	4603      	mov	r3, r0
 800288a:	4a62      	ldr	r2, [pc, #392]	; (8002a14 <onlyPositionControlPointMode+0x1cc>)
 800288c:	6013      	str	r3, [r2, #0]
	mmActVel = (mmActPos - prePos) / 0.001;
 800288e:	4b61      	ldr	r3, [pc, #388]	; (8002a14 <onlyPositionControlPointMode+0x1cc>)
 8002890:	ed93 7a00 	vldr	s14, [r3]
 8002894:	4b60      	ldr	r3, [pc, #384]	; (8002a18 <onlyPositionControlPointMode+0x1d0>)
 8002896:	edd3 7a00 	vldr	s15, [r3]
 800289a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800289e:	ee17 0a90 	vmov	r0, s15
 80028a2:	f7fd fdfd 	bl	80004a0 <__aeabi_f2d>
 80028a6:	a358      	add	r3, pc, #352	; (adr r3, 8002a08 <onlyPositionControlPointMode+0x1c0>)
 80028a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ac:	f7fd ff7a 	bl	80007a4 <__aeabi_ddiv>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f7fe f922 	bl	8000b00 <__aeabi_d2f>
 80028bc:	4603      	mov	r3, r0
 80028be:	4a57      	ldr	r2, [pc, #348]	; (8002a1c <onlyPositionControlPointMode+0x1d4>)
 80028c0:	6013      	str	r3, [r2, #0]
	mmActAcc = (mmActVel - preVel) / 0.001;
 80028c2:	4b56      	ldr	r3, [pc, #344]	; (8002a1c <onlyPositionControlPointMode+0x1d4>)
 80028c4:	ed93 7a00 	vldr	s14, [r3]
 80028c8:	4b55      	ldr	r3, [pc, #340]	; (8002a20 <onlyPositionControlPointMode+0x1d8>)
 80028ca:	edd3 7a00 	vldr	s15, [r3]
 80028ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d2:	ee17 0a90 	vmov	r0, s15
 80028d6:	f7fd fde3 	bl	80004a0 <__aeabi_f2d>
 80028da:	a34b      	add	r3, pc, #300	; (adr r3, 8002a08 <onlyPositionControlPointMode+0x1c0>)
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f7fd ff60 	bl	80007a4 <__aeabi_ddiv>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	f7fe f908 	bl	8000b00 <__aeabi_d2f>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4a4c      	ldr	r2, [pc, #304]	; (8002a24 <onlyPositionControlPointMode+0x1dc>)
 80028f4:	6013      	str	r3, [r2, #0]

	mmError = result.posTraj - mmActPos;
 80028f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80028fa:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <onlyPositionControlPointMode+0x1cc>)
 80028fc:	edd3 7a00 	vldr	s15, [r3]
 8002900:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002904:	4b48      	ldr	r3, [pc, #288]	; (8002a28 <onlyPositionControlPointMode+0x1e0>)
 8002906:	edc3 7a00 	vstr	s15, [r3]
	positionPID.eIntegral = positionPID.eIntegral + (mmError * 0.001);
 800290a:	4b48      	ldr	r3, [pc, #288]	; (8002a2c <onlyPositionControlPointMode+0x1e4>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fdc6 	bl	80004a0 <__aeabi_f2d>
 8002914:	4604      	mov	r4, r0
 8002916:	460d      	mov	r5, r1
 8002918:	4b43      	ldr	r3, [pc, #268]	; (8002a28 <onlyPositionControlPointMode+0x1e0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fdbf 	bl	80004a0 <__aeabi_f2d>
 8002922:	a339      	add	r3, pc, #228	; (adr r3, 8002a08 <onlyPositionControlPointMode+0x1c0>)
 8002924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002928:	f7fd fe12 	bl	8000550 <__aeabi_dmul>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4620      	mov	r0, r4
 8002932:	4629      	mov	r1, r5
 8002934:	f7fd fc56 	bl	80001e4 <__adddf3>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f7fe f8de 	bl	8000b00 <__aeabi_d2f>
 8002944:	4603      	mov	r3, r0
 8002946:	4a39      	ldr	r2, [pc, #228]	; (8002a2c <onlyPositionControlPointMode+0x1e4>)
 8002948:	60d3      	str	r3, [r2, #12]
	duty = (positionPID.pTerm * mmError)
 800294a:	4b38      	ldr	r3, [pc, #224]	; (8002a2c <onlyPositionControlPointMode+0x1e4>)
 800294c:	ed93 7a00 	vldr	s14, [r3]
 8002950:	4b35      	ldr	r3, [pc, #212]	; (8002a28 <onlyPositionControlPointMode+0x1e0>)
 8002952:	edd3 7a00 	vldr	s15, [r3]
 8002956:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (positionPID.iTerm * positionPID.eIntegral);
 800295a:	4b34      	ldr	r3, [pc, #208]	; (8002a2c <onlyPositionControlPointMode+0x1e4>)
 800295c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002960:	4b32      	ldr	r3, [pc, #200]	; (8002a2c <onlyPositionControlPointMode+0x1e4>)
 8002962:	edd3 7a03 	vldr	s15, [r3, #12]
 8002966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296a:	ee77 7a27 	vadd.f32	s15, s14, s15
	duty = (positionPID.pTerm * mmError)
 800296e:	4b30      	ldr	r3, [pc, #192]	; (8002a30 <onlyPositionControlPointMode+0x1e8>)
 8002970:	edc3 7a00 	vstr	s15, [r3]
	if (duty < 0) {
 8002974:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <onlyPositionControlPointMode+0x1e8>)
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800297e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002982:	d50b      	bpl.n	800299c <onlyPositionControlPointMode+0x154>
		dirAxisY = 0;
 8002984:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <onlyPositionControlPointMode+0x1ec>)
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
		duty = (-1) * duty;
 800298a:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <onlyPositionControlPointMode+0x1e8>)
 800298c:	edd3 7a00 	vldr	s15, [r3]
 8002990:	eef1 7a67 	vneg.f32	s15, s15
 8002994:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <onlyPositionControlPointMode+0x1e8>)
 8002996:	edc3 7a00 	vstr	s15, [r3]
 800299a:	e002      	b.n	80029a2 <onlyPositionControlPointMode+0x15a>
	} else {
		dirAxisY = 1;
 800299c:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <onlyPositionControlPointMode+0x1ec>)
 800299e:	2201      	movs	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
	}
	if (duty > 1000) {
 80029a2:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <onlyPositionControlPointMode+0x1e8>)
 80029a4:	edd3 7a00 	vldr	s15, [r3]
 80029a8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002a38 <onlyPositionControlPointMode+0x1f0>
 80029ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b4:	dd03      	ble.n	80029be <onlyPositionControlPointMode+0x176>
		duty = 1000;
 80029b6:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <onlyPositionControlPointMode+0x1e8>)
 80029b8:	4a20      	ldr	r2, [pc, #128]	; (8002a3c <onlyPositionControlPointMode+0x1f4>)
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	e00d      	b.n	80029da <onlyPositionControlPointMode+0x192>
	} else if (duty <= 300) {
 80029be:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <onlyPositionControlPointMode+0x1e8>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002a40 <onlyPositionControlPointMode+0x1f8>
 80029c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d0:	d803      	bhi.n	80029da <onlyPositionControlPointMode+0x192>
		duty = 0;
 80029d2:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <onlyPositionControlPointMode+0x1e8>)
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
	}

	setMotor();
 80029da:	f7ff fd2d 	bl	8002438 <setMotor>

	prePos = mmActPos;
 80029de:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <onlyPositionControlPointMode+0x1cc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a0d      	ldr	r2, [pc, #52]	; (8002a18 <onlyPositionControlPointMode+0x1d0>)
 80029e4:	6013      	str	r3, [r2, #0]
	preVel = mmActVel;
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <onlyPositionControlPointMode+0x1d4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a0d      	ldr	r2, [pc, #52]	; (8002a20 <onlyPositionControlPointMode+0x1d8>)
 80029ec:	6013      	str	r3, [r2, #0]
	finalPIDChecky = result.posTraj;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <onlyPositionControlPointMode+0x1fc>)
 80029f2:	6013      	str	r3, [r2, #0]

}
 80029f4:	bf00      	nop
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bdb0      	pop	{r4, r5, r7, pc}
 80029fc:	f3af 8000 	nop.w
 8002a00:	464f6faa 	.word	0x464f6faa
 8002a04:	3f8199cb 	.word	0x3f8199cb
 8002a08:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a0c:	3f50624d 	.word	0x3f50624d
 8002a10:	20000e14 	.word	0x20000e14
 8002a14:	20000e1c 	.word	0x20000e1c
 8002a18:	20000e2c 	.word	0x20000e2c
 8002a1c:	20000e24 	.word	0x20000e24
 8002a20:	20000e30 	.word	0x20000e30
 8002a24:	20000e28 	.word	0x20000e28
 8002a28:	20000e20 	.word	0x20000e20
 8002a2c:	20000248 	.word	0x20000248
 8002a30:	20000e0c 	.word	0x20000e0c
 8002a34:	20000244 	.word	0x20000244
 8002a38:	447a0000 	.word	0x447a0000
 8002a3c:	447a0000 	.word	0x447a0000
 8002a40:	43960000 	.word	0x43960000
 8002a44:	20000f2c 	.word	0x20000f2c

08002a48 <jogAxisY>:
void jogAxisY() {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
	refYPos = buffer[0].subdata.yAxis;
 8002a4c:	4b39      	ldr	r3, [pc, #228]	; (8002b34 <jogAxisY+0xec>)
 8002a4e:	885b      	ldrh	r3, [r3, #2]
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a58:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <jogAxisY+0xf0>)
 8002a5a:	edc3 7a00 	vstr	s15, [r3]
	if (refYPos > 2500) {
 8002a5e:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <jogAxisY+0xf0>)
 8002a60:	edd3 7a00 	vldr	s15, [r3]
 8002a64:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002b3c <jogAxisY+0xf4>
 8002a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a70:	dd03      	ble.n	8002a7a <jogAxisY+0x32>
		dirAxisY = 1;
 8002a72:	4b33      	ldr	r3, [pc, #204]	; (8002b40 <jogAxisY+0xf8>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e00c      	b.n	8002a94 <jogAxisY+0x4c>
	} else if (refYPos < 1500) {
 8002a7a:	4b2f      	ldr	r3, [pc, #188]	; (8002b38 <jogAxisY+0xf0>)
 8002a7c:	edd3 7a00 	vldr	s15, [r3]
 8002a80:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002b44 <jogAxisY+0xfc>
 8002a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8c:	d502      	bpl.n	8002a94 <jogAxisY+0x4c>
		dirAxisY = 0;
 8002a8e:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <jogAxisY+0xf8>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
	}
	if (refYPos > 3600 || refYPos < 100) {
 8002a94:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <jogAxisY+0xf0>)
 8002a96:	edd3 7a00 	vldr	s15, [r3]
 8002a9a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002b48 <jogAxisY+0x100>
 8002a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa6:	dc09      	bgt.n	8002abc <jogAxisY+0x74>
 8002aa8:	4b23      	ldr	r3, [pc, #140]	; (8002b38 <jogAxisY+0xf0>)
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002b4c <jogAxisY+0x104>
 8002ab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aba:	d503      	bpl.n	8002ac4 <jogAxisY+0x7c>
		duty = 290;
 8002abc:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <jogAxisY+0x108>)
 8002abe:	4a25      	ldr	r2, [pc, #148]	; (8002b54 <jogAxisY+0x10c>)
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	e033      	b.n	8002b2c <jogAxisY+0xe4>
	} else if (refYPos > 2500 && refYPos <= 3600) {
 8002ac4:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <jogAxisY+0xf0>)
 8002ac6:	edd3 7a00 	vldr	s15, [r3]
 8002aca:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002b3c <jogAxisY+0xf4>
 8002ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad6:	dd0d      	ble.n	8002af4 <jogAxisY+0xac>
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <jogAxisY+0xf0>)
 8002ada:	edd3 7a00 	vldr	s15, [r3]
 8002ade:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002b48 <jogAxisY+0x100>
 8002ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aea:	d803      	bhi.n	8002af4 <jogAxisY+0xac>
		duty = 270;
 8002aec:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <jogAxisY+0x108>)
 8002aee:	4a1a      	ldr	r2, [pc, #104]	; (8002b58 <jogAxisY+0x110>)
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e01b      	b.n	8002b2c <jogAxisY+0xe4>
	}

	else if (refYPos > 100 && refYPos <= 1500) {
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <jogAxisY+0xf0>)
 8002af6:	edd3 7a00 	vldr	s15, [r3]
 8002afa:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002b4c <jogAxisY+0x104>
 8002afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b06:	dd0d      	ble.n	8002b24 <jogAxisY+0xdc>
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <jogAxisY+0xf0>)
 8002b0a:	edd3 7a00 	vldr	s15, [r3]
 8002b0e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002b44 <jogAxisY+0xfc>
 8002b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1a:	d803      	bhi.n	8002b24 <jogAxisY+0xdc>
		duty = 270;
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <jogAxisY+0x108>)
 8002b1e:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <jogAxisY+0x110>)
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e003      	b.n	8002b2c <jogAxisY+0xe4>
	} else {
		duty = 0;
 8002b24:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <jogAxisY+0x108>)
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
	}
	setMotor();
 8002b2c:	f7ff fc84 	bl	8002438 <setMotor>

}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000ddc 	.word	0x20000ddc
 8002b38:	20000224 	.word	0x20000224
 8002b3c:	451c4000 	.word	0x451c4000
 8002b40:	20000244 	.word	0x20000244
 8002b44:	44bb8000 	.word	0x44bb8000
 8002b48:	45610000 	.word	0x45610000
 8002b4c:	42c80000 	.word	0x42c80000
 8002b50:	20000e0c 	.word	0x20000e0c
 8002b54:	43910000 	.word	0x43910000
 8002b58:	43870000 	.word	0x43870000

08002b5c <photoDetect>:
//	}
//	setMotor();
//
//}

void photoDetect() {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
	photoSig[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);  // MOTOR Photo Sensor
 8002b60:	2120      	movs	r1, #32
 8002b62:	480d      	ldr	r0, [pc, #52]	; (8002b98 <photoDetect+0x3c>)
 8002b64:	f003 fa46 	bl	8005ff4 <HAL_GPIO_ReadPin>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <photoDetect+0x40>)
 8002b6e:	701a      	strb	r2, [r3, #0]
	photoSig[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // CENTER Photo Sensor
 8002b70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b74:	4808      	ldr	r0, [pc, #32]	; (8002b98 <photoDetect+0x3c>)
 8002b76:	f003 fa3d 	bl	8005ff4 <HAL_GPIO_ReadPin>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <photoDetect+0x40>)
 8002b80:	705a      	strb	r2, [r3, #1]
	photoSig[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);  // ENCODER Photo Sensor
 8002b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b86:	4804      	ldr	r0, [pc, #16]	; (8002b98 <photoDetect+0x3c>)
 8002b88:	f003 fa34 	bl	8005ff4 <HAL_GPIO_ReadPin>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4b02      	ldr	r3, [pc, #8]	; (8002b9c <photoDetect+0x40>)
 8002b92:	709a      	strb	r2, [r3, #2]
}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40020400 	.word	0x40020400
 8002b9c:	20000e38 	.word	0x20000e38

08002ba0 <trapezoidalTraj>:

calculationTraj trapezoidalTraj(float qi, float qf) {
 8002ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba4:	b096      	sub	sp, #88	; 0x58
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	ed87 0a02 	vstr	s0, [r7, #8]
 8002bae:	edc7 0a01 	vstr	s1, [r7, #4]
	calculationTraj result;

	float diffPos = abs(qf - qi);
 8002bb2:	ed97 7a01 	vldr	s14, [r7, #4]
 8002bb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bc2:	ee17 3a90 	vmov	r3, s15
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bfb8      	it	lt
 8002bca:	425b      	neglt	r3, r3
 8002bcc:	ee07 3a90 	vmov	s15, r3
 8002bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	int8_t handleMinus = (qf - qi) / diffPos;
 8002bd8:	ed97 7a01 	vldr	s14, [r7, #4]
 8002bdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002be0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002be4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bf0:	edc7 7a00 	vstr	s15, [r7]
 8002bf4:	783b      	ldrb	r3, [r7, #0]
 8002bf6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	float timeTrapSeg1 = qdm / qddm;
 8002bfa:	4bb3      	ldr	r3, [pc, #716]	; (8002ec8 <trapezoidalTraj+0x328>)
 8002bfc:	edd3 6a00 	vldr	s13, [r3]
 8002c00:	4bb2      	ldr	r3, [pc, #712]	; (8002ecc <trapezoidalTraj+0x32c>)
 8002c02:	ed93 7a00 	vldr	s14, [r3]
 8002c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c0a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float timeTriSeg1 = pow((diffPos / qddm), 0.5);
 8002c0e:	4baf      	ldr	r3, [pc, #700]	; (8002ecc <trapezoidalTraj+0x32c>)
 8002c10:	edd3 7a00 	vldr	s15, [r3]
 8002c14:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002c18:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c1c:	ee16 0a90 	vmov	r0, s13
 8002c20:	f7fd fc3e 	bl	80004a0 <__aeabi_f2d>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	ed9f 1ba5 	vldr	d1, [pc, #660]	; 8002ec0 <trapezoidalTraj+0x320>
 8002c2c:	ec43 2b10 	vmov	d0, r2, r3
 8002c30:	f009 fc2a 	bl	800c488 <pow>
 8002c34:	ec53 2b10 	vmov	r2, r3, d0
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f7fd ff60 	bl	8000b00 <__aeabi_d2f>
 8002c40:	4603      	mov	r3, r0
 8002c42:	64bb      	str	r3, [r7, #72]	; 0x48

	if (timeTriSeg1 < timeTrapSeg1) // triangle shape
 8002c44:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002c48:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c54:	f140 8140 	bpl.w	8002ed8 <trapezoidalTraj+0x338>
			{
		float qTriSeg1 = 0.5 * qddm * timeTriSeg1 * timeTriSeg1;
 8002c58:	4b9c      	ldr	r3, [pc, #624]	; (8002ecc <trapezoidalTraj+0x32c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fc1f 	bl	80004a0 <__aeabi_f2d>
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	4b9a      	ldr	r3, [pc, #616]	; (8002ed0 <trapezoidalTraj+0x330>)
 8002c68:	f7fd fc72 	bl	8000550 <__aeabi_dmul>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4614      	mov	r4, r2
 8002c72:	461d      	mov	r5, r3
 8002c74:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c76:	f7fd fc13 	bl	80004a0 <__aeabi_f2d>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4620      	mov	r0, r4
 8002c80:	4629      	mov	r1, r5
 8002c82:	f7fd fc65 	bl	8000550 <__aeabi_dmul>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4614      	mov	r4, r2
 8002c8c:	461d      	mov	r5, r3
 8002c8e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c90:	f7fd fc06 	bl	80004a0 <__aeabi_f2d>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4620      	mov	r0, r4
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	f7fd fc58 	bl	8000550 <__aeabi_dmul>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f7fd ff2a 	bl	8000b00 <__aeabi_d2f>
 8002cac:	4603      	mov	r3, r0
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
		float qdTriSeg1 = qddm * timeTriSeg1;
 8002cb0:	4b86      	ldr	r3, [pc, #536]	; (8002ecc <trapezoidalTraj+0x32c>)
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cbe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		if (actualTime <= timeTriSeg1) {
 8002cc2:	4b84      	ldr	r3, [pc, #528]	; (8002ed4 <trapezoidalTraj+0x334>)
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002ccc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd4:	db57      	blt.n	8002d86 <trapezoidalTraj+0x1e6>
			result.posTraj = qi
					+ (0.5 * qddm * actualTime * actualTime) * handleMinus;
 8002cd6:	68b8      	ldr	r0, [r7, #8]
 8002cd8:	f7fd fbe2 	bl	80004a0 <__aeabi_f2d>
 8002cdc:	4604      	mov	r4, r0
 8002cde:	460d      	mov	r5, r1
 8002ce0:	4b7a      	ldr	r3, [pc, #488]	; (8002ecc <trapezoidalTraj+0x32c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fd fbdb 	bl	80004a0 <__aeabi_f2d>
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	4b78      	ldr	r3, [pc, #480]	; (8002ed0 <trapezoidalTraj+0x330>)
 8002cf0:	f7fd fc2e 	bl	8000550 <__aeabi_dmul>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4690      	mov	r8, r2
 8002cfa:	4699      	mov	r9, r3
 8002cfc:	4b75      	ldr	r3, [pc, #468]	; (8002ed4 <trapezoidalTraj+0x334>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fbcd 	bl	80004a0 <__aeabi_f2d>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4640      	mov	r0, r8
 8002d0c:	4649      	mov	r1, r9
 8002d0e:	f7fd fc1f 	bl	8000550 <__aeabi_dmul>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4690      	mov	r8, r2
 8002d18:	4699      	mov	r9, r3
 8002d1a:	4b6e      	ldr	r3, [pc, #440]	; (8002ed4 <trapezoidalTraj+0x334>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fbbe 	bl	80004a0 <__aeabi_f2d>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4640      	mov	r0, r8
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	f7fd fc10 	bl	8000550 <__aeabi_dmul>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4690      	mov	r8, r2
 8002d36:	4699      	mov	r9, r3
 8002d38:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fb9d 	bl	800047c <__aeabi_i2d>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4640      	mov	r0, r8
 8002d48:	4649      	mov	r1, r9
 8002d4a:	f7fd fc01 	bl	8000550 <__aeabi_dmul>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4620      	mov	r0, r4
 8002d54:	4629      	mov	r1, r5
 8002d56:	f7fd fa45 	bl	80001e4 <__adddf3>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4610      	mov	r0, r2
 8002d60:	4619      	mov	r1, r3
 8002d62:	f7fd fecd 	bl	8000b00 <__aeabi_d2f>
 8002d66:	4603      	mov	r3, r0
			result.posTraj = qi
 8002d68:	617b      	str	r3, [r7, #20]
			result.velTraj = qddm * actualTime;
 8002d6a:	4b58      	ldr	r3, [pc, #352]	; (8002ecc <trapezoidalTraj+0x32c>)
 8002d6c:	ed93 7a00 	vldr	s14, [r3]
 8002d70:	4b58      	ldr	r3, [pc, #352]	; (8002ed4 <trapezoidalTraj+0x334>)
 8002d72:	edd3 7a00 	vldr	s15, [r3]
 8002d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7a:	edc7 7a06 	vstr	s15, [r7, #24]
			result.accTraj = qddm;
 8002d7e:	4b53      	ldr	r3, [pc, #332]	; (8002ecc <trapezoidalTraj+0x32c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	61fb      	str	r3, [r7, #28]
 8002d84:	e282      	b.n	800328c <trapezoidalTraj+0x6ec>
		}

		else if (actualTime > timeTriSeg1 && actualTime <= (timeTriSeg1 * 2)) {
 8002d86:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <trapezoidalTraj+0x334>)
 8002d88:	edd3 7a00 	vldr	s15, [r3]
 8002d8c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002d90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d98:	f140 8086 	bpl.w	8002ea8 <trapezoidalTraj+0x308>
 8002d9c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002da0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002da4:	4b4b      	ldr	r3, [pc, #300]	; (8002ed4 <trapezoidalTraj+0x334>)
 8002da6:	edd3 7a00 	vldr	s15, [r3]
 8002daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db2:	db79      	blt.n	8002ea8 <trapezoidalTraj+0x308>
			float actualTimeSeg2 = actualTime - timeTriSeg1;
 8002db4:	4b47      	ldr	r3, [pc, #284]	; (8002ed4 <trapezoidalTraj+0x334>)
 8002db6:	ed93 7a00 	vldr	s14, [r3]
 8002dba:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			result.posTraj = qi
					+ (qTriSeg1 + (qdTriSeg1 * actualTimeSeg2)
 8002dc6:	68b8      	ldr	r0, [r7, #8]
 8002dc8:	f7fd fb6a 	bl	80004a0 <__aeabi_f2d>
 8002dcc:	4604      	mov	r4, r0
 8002dce:	460d      	mov	r5, r1
 8002dd0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002dd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ddc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de4:	ee17 0a90 	vmov	r0, s15
 8002de8:	f7fd fb5a 	bl	80004a0 <__aeabi_f2d>
 8002dec:	4680      	mov	r8, r0
 8002dee:	4689      	mov	r9, r1
							- (0.5 * qddm * actualTimeSeg2 * actualTimeSeg2))
 8002df0:	4b36      	ldr	r3, [pc, #216]	; (8002ecc <trapezoidalTraj+0x32c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fd fb53 	bl	80004a0 <__aeabi_f2d>
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <trapezoidalTraj+0x330>)
 8002e00:	f7fd fba6 	bl	8000550 <__aeabi_dmul>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4692      	mov	sl, r2
 8002e0a:	469b      	mov	fp, r3
 8002e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e0e:	f7fd fb47 	bl	80004a0 <__aeabi_f2d>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4650      	mov	r0, sl
 8002e18:	4659      	mov	r1, fp
 8002e1a:	f7fd fb99 	bl	8000550 <__aeabi_dmul>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4692      	mov	sl, r2
 8002e24:	469b      	mov	fp, r3
 8002e26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e28:	f7fd fb3a 	bl	80004a0 <__aeabi_f2d>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4650      	mov	r0, sl
 8002e32:	4659      	mov	r1, fp
 8002e34:	f7fd fb8c 	bl	8000550 <__aeabi_dmul>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4640      	mov	r0, r8
 8002e3e:	4649      	mov	r1, r9
 8002e40:	f7fd f9ce 	bl	80001e0 <__aeabi_dsub>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4690      	mov	r8, r2
 8002e4a:	4699      	mov	r9, r3
							* handleMinus;
 8002e4c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd fb13 	bl	800047c <__aeabi_i2d>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4640      	mov	r0, r8
 8002e5c:	4649      	mov	r1, r9
 8002e5e:	f7fd fb77 	bl	8000550 <__aeabi_dmul>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
					+ (qTriSeg1 + (qdTriSeg1 * actualTimeSeg2)
 8002e66:	4620      	mov	r0, r4
 8002e68:	4629      	mov	r1, r5
 8002e6a:	f7fd f9bb 	bl	80001e4 <__adddf3>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4610      	mov	r0, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	f7fd fe43 	bl	8000b00 <__aeabi_d2f>
 8002e7a:	4603      	mov	r3, r0
			result.posTraj = qi
 8002e7c:	617b      	str	r3, [r7, #20]
			result.velTraj = qdTriSeg1 - (qddm * actualTimeSeg2);
 8002e7e:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <trapezoidalTraj+0x32c>)
 8002e80:	ed93 7a00 	vldr	s14, [r3]
 8002e84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e94:	edc7 7a06 	vstr	s15, [r7, #24]
			result.accTraj = -qddm;
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <trapezoidalTraj+0x32c>)
 8002e9a:	edd3 7a00 	vldr	s15, [r3]
 8002e9e:	eef1 7a67 	vneg.f32	s15, s15
 8002ea2:	edc7 7a07 	vstr	s15, [r7, #28]
		else if (actualTime > timeTriSeg1 && actualTime <= (timeTriSeg1 * 2)) {
 8002ea6:	e1f1      	b.n	800328c <trapezoidalTraj+0x6ec>
		}

		else {
			result.posTraj = qf;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	617b      	str	r3, [r7, #20]
			result.velTraj = 0;
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
			result.accTraj = 0;
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	61fb      	str	r3, [r7, #28]
 8002eb8:	e1e8      	b.n	800328c <trapezoidalTraj+0x6ec>
 8002eba:	bf00      	nop
 8002ebc:	f3af 8000 	nop.w
 8002ec0:	00000000 	.word	0x00000000
 8002ec4:	3fe00000 	.word	0x3fe00000
 8002ec8:	2000025c 	.word	0x2000025c
 8002ecc:	20000258 	.word	0x20000258
 8002ed0:	3fe00000 	.word	0x3fe00000
 8002ed4:	20000260 	.word	0x20000260
	}

	else // trapezoidal shape
	{
		float timeTrapSeg2 = (diffPos
				- (2 * 0.5 * qddm * (timeTrapSeg1) * (timeTrapSeg1))) / qdm;
 8002ed8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002eda:	f7fd fae1 	bl	80004a0 <__aeabi_f2d>
 8002ede:	4604      	mov	r4, r0
 8002ee0:	460d      	mov	r5, r1
 8002ee2:	4b90      	ldr	r3, [pc, #576]	; (8003124 <trapezoidalTraj+0x584>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fada 	bl	80004a0 <__aeabi_f2d>
 8002eec:	4680      	mov	r8, r0
 8002eee:	4689      	mov	r9, r1
 8002ef0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002ef2:	f7fd fad5 	bl	80004a0 <__aeabi_f2d>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4640      	mov	r0, r8
 8002efc:	4649      	mov	r1, r9
 8002efe:	f7fd fb27 	bl	8000550 <__aeabi_dmul>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4690      	mov	r8, r2
 8002f08:	4699      	mov	r9, r3
 8002f0a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f0c:	f7fd fac8 	bl	80004a0 <__aeabi_f2d>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4640      	mov	r0, r8
 8002f16:	4649      	mov	r1, r9
 8002f18:	f7fd fb1a 	bl	8000550 <__aeabi_dmul>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4620      	mov	r0, r4
 8002f22:	4629      	mov	r1, r5
 8002f24:	f7fd f95c 	bl	80001e0 <__aeabi_dsub>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4614      	mov	r4, r2
 8002f2e:	461d      	mov	r5, r3
 8002f30:	4b7d      	ldr	r3, [pc, #500]	; (8003128 <trapezoidalTraj+0x588>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd fab3 	bl	80004a0 <__aeabi_f2d>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4620      	mov	r0, r4
 8002f40:	4629      	mov	r1, r5
 8002f42:	f7fd fc2f 	bl	80007a4 <__aeabi_ddiv>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
		float timeTrapSeg2 = (diffPos
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f7fd fdd7 	bl	8000b00 <__aeabi_d2f>
 8002f52:	4603      	mov	r3, r0
 8002f54:	647b      	str	r3, [r7, #68]	; 0x44
		float timeTrapSeg3 = qdm / qddm;
 8002f56:	4b74      	ldr	r3, [pc, #464]	; (8003128 <trapezoidalTraj+0x588>)
 8002f58:	edd3 6a00 	vldr	s13, [r3]
 8002f5c:	4b71      	ldr	r3, [pc, #452]	; (8003124 <trapezoidalTraj+0x584>)
 8002f5e:	ed93 7a00 	vldr	s14, [r3]
 8002f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f66:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		float qTrapSeg1 = 0.5 * qddm * (timeTrapSeg1) * (timeTrapSeg1);
 8002f6a:	4b6e      	ldr	r3, [pc, #440]	; (8003124 <trapezoidalTraj+0x584>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd fa96 	bl	80004a0 <__aeabi_f2d>
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	4b6c      	ldr	r3, [pc, #432]	; (800312c <trapezoidalTraj+0x58c>)
 8002f7a:	f7fd fae9 	bl	8000550 <__aeabi_dmul>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4614      	mov	r4, r2
 8002f84:	461d      	mov	r5, r3
 8002f86:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f88:	f7fd fa8a 	bl	80004a0 <__aeabi_f2d>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4620      	mov	r0, r4
 8002f92:	4629      	mov	r1, r5
 8002f94:	f7fd fadc 	bl	8000550 <__aeabi_dmul>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4614      	mov	r4, r2
 8002f9e:	461d      	mov	r5, r3
 8002fa0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002fa2:	f7fd fa7d 	bl	80004a0 <__aeabi_f2d>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4620      	mov	r0, r4
 8002fac:	4629      	mov	r1, r5
 8002fae:	f7fd facf 	bl	8000550 <__aeabi_dmul>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f7fd fda1 	bl	8000b00 <__aeabi_d2f>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
		float qTrapSeg2 = qTrapSeg1 + (qdm * timeTrapSeg2);
 8002fc2:	4b59      	ldr	r3, [pc, #356]	; (8003128 <trapezoidalTraj+0x588>)
 8002fc4:	ed93 7a00 	vldr	s14, [r3]
 8002fc8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		if (actualTime <= timeTrapSeg1) {
 8002fdc:	4b54      	ldr	r3, [pc, #336]	; (8003130 <trapezoidalTraj+0x590>)
 8002fde:	edd3 7a00 	vldr	s15, [r3]
 8002fe2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002fe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	db57      	blt.n	80030a0 <trapezoidalTraj+0x500>
			result.posTraj = qi
					+ (0.5 * qddm * actualTime * actualTime) * handleMinus;
 8002ff0:	68b8      	ldr	r0, [r7, #8]
 8002ff2:	f7fd fa55 	bl	80004a0 <__aeabi_f2d>
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	460d      	mov	r5, r1
 8002ffa:	4b4a      	ldr	r3, [pc, #296]	; (8003124 <trapezoidalTraj+0x584>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fa4e 	bl	80004a0 <__aeabi_f2d>
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	4b48      	ldr	r3, [pc, #288]	; (800312c <trapezoidalTraj+0x58c>)
 800300a:	f7fd faa1 	bl	8000550 <__aeabi_dmul>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4690      	mov	r8, r2
 8003014:	4699      	mov	r9, r3
 8003016:	4b46      	ldr	r3, [pc, #280]	; (8003130 <trapezoidalTraj+0x590>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd fa40 	bl	80004a0 <__aeabi_f2d>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4640      	mov	r0, r8
 8003026:	4649      	mov	r1, r9
 8003028:	f7fd fa92 	bl	8000550 <__aeabi_dmul>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4690      	mov	r8, r2
 8003032:	4699      	mov	r9, r3
 8003034:	4b3e      	ldr	r3, [pc, #248]	; (8003130 <trapezoidalTraj+0x590>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7fd fa31 	bl	80004a0 <__aeabi_f2d>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4640      	mov	r0, r8
 8003044:	4649      	mov	r1, r9
 8003046:	f7fd fa83 	bl	8000550 <__aeabi_dmul>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4690      	mov	r8, r2
 8003050:	4699      	mov	r9, r3
 8003052:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fa10 	bl	800047c <__aeabi_i2d>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4640      	mov	r0, r8
 8003062:	4649      	mov	r1, r9
 8003064:	f7fd fa74 	bl	8000550 <__aeabi_dmul>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4620      	mov	r0, r4
 800306e:	4629      	mov	r1, r5
 8003070:	f7fd f8b8 	bl	80001e4 <__adddf3>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	f7fd fd40 	bl	8000b00 <__aeabi_d2f>
 8003080:	4603      	mov	r3, r0
			result.posTraj = qi
 8003082:	617b      	str	r3, [r7, #20]
			result.velTraj = qddm * actualTime;
 8003084:	4b27      	ldr	r3, [pc, #156]	; (8003124 <trapezoidalTraj+0x584>)
 8003086:	ed93 7a00 	vldr	s14, [r3]
 800308a:	4b29      	ldr	r3, [pc, #164]	; (8003130 <trapezoidalTraj+0x590>)
 800308c:	edd3 7a00 	vldr	s15, [r3]
 8003090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003094:	edc7 7a06 	vstr	s15, [r7, #24]
			result.accTraj = qddm;
 8003098:	4b22      	ldr	r3, [pc, #136]	; (8003124 <trapezoidalTraj+0x584>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61fb      	str	r3, [r7, #28]
 800309e:	e0f5      	b.n	800328c <trapezoidalTraj+0x6ec>
		} else if (actualTime > timeTrapSeg1
 80030a0:	4b23      	ldr	r3, [pc, #140]	; (8003130 <trapezoidalTraj+0x590>)
 80030a2:	edd3 7a00 	vldr	s15, [r3]
 80030a6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80030aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b2:	d53f      	bpl.n	8003134 <trapezoidalTraj+0x594>
				&& actualTime <= timeTrapSeg2 + timeTrapSeg1) {
 80030b4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80030b8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80030bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c0:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <trapezoidalTraj+0x590>)
 80030c2:	edd3 7a00 	vldr	s15, [r3]
 80030c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ce:	db31      	blt.n	8003134 <trapezoidalTraj+0x594>
			float t2 = actualTime - timeTrapSeg1;
 80030d0:	4b17      	ldr	r3, [pc, #92]	; (8003130 <trapezoidalTraj+0x590>)
 80030d2:	ed93 7a00 	vldr	s14, [r3]
 80030d6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80030da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030de:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			result.posTraj = qi + (qTrapSeg1 + qdm * (t2)) * handleMinus;
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <trapezoidalTraj+0x588>)
 80030e4:	ed93 7a00 	vldr	s14, [r3]
 80030e8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80030ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030f0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80030f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030f8:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003104:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003108:	edd7 7a02 	vldr	s15, [r7, #8]
 800310c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003110:	edc7 7a05 	vstr	s15, [r7, #20]
			result.velTraj = qdm;
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <trapezoidalTraj+0x588>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	61bb      	str	r3, [r7, #24]
			result.accTraj = 0;
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	61fb      	str	r3, [r7, #28]
				&& actualTime <= timeTrapSeg2 + timeTrapSeg1) {
 8003120:	e0b4      	b.n	800328c <trapezoidalTraj+0x6ec>
 8003122:	bf00      	nop
 8003124:	20000258 	.word	0x20000258
 8003128:	2000025c 	.word	0x2000025c
 800312c:	3fe00000 	.word	0x3fe00000
 8003130:	20000260 	.word	0x20000260
		} else if (actualTime > timeTrapSeg2 + timeTrapSeg1
 8003134:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003138:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800313c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003140:	4b8d      	ldr	r3, [pc, #564]	; (8003378 <trapezoidalTraj+0x7d8>)
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800314a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314e:	f140 8095 	bpl.w	800327c <trapezoidalTraj+0x6dc>
				&& actualTime <= timeTrapSeg3 + timeTrapSeg2 + timeTrapSeg1) {
 8003152:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003156:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800315a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800315e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003162:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003166:	4b84      	ldr	r3, [pc, #528]	; (8003378 <trapezoidalTraj+0x7d8>)
 8003168:	edd3 7a00 	vldr	s15, [r3]
 800316c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003174:	f2c0 8082 	blt.w	800327c <trapezoidalTraj+0x6dc>
			float t3 = actualTime - timeTrapSeg2 - timeTrapSeg1;
 8003178:	4b7f      	ldr	r3, [pc, #508]	; (8003378 <trapezoidalTraj+0x7d8>)
 800317a:	ed93 7a00 	vldr	s14, [r3]
 800317e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003182:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003186:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800318a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800318e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			result.posTraj = qi
					+ (qTrapSeg2 + (qdm * t3) - 0.5 * qddm * t3 * t3)
 8003192:	68b8      	ldr	r0, [r7, #8]
 8003194:	f7fd f984 	bl	80004a0 <__aeabi_f2d>
 8003198:	4604      	mov	r4, r0
 800319a:	460d      	mov	r5, r1
 800319c:	4b77      	ldr	r3, [pc, #476]	; (800337c <trapezoidalTraj+0x7dc>)
 800319e:	ed93 7a00 	vldr	s14, [r3]
 80031a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80031a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031aa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80031ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b2:	ee17 0a90 	vmov	r0, s15
 80031b6:	f7fd f973 	bl	80004a0 <__aeabi_f2d>
 80031ba:	4680      	mov	r8, r0
 80031bc:	4689      	mov	r9, r1
 80031be:	4b70      	ldr	r3, [pc, #448]	; (8003380 <trapezoidalTraj+0x7e0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd f96c 	bl	80004a0 <__aeabi_f2d>
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	4b6d      	ldr	r3, [pc, #436]	; (8003384 <trapezoidalTraj+0x7e4>)
 80031ce:	f7fd f9bf 	bl	8000550 <__aeabi_dmul>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4692      	mov	sl, r2
 80031d8:	469b      	mov	fp, r3
 80031da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031dc:	f7fd f960 	bl	80004a0 <__aeabi_f2d>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4650      	mov	r0, sl
 80031e6:	4659      	mov	r1, fp
 80031e8:	f7fd f9b2 	bl	8000550 <__aeabi_dmul>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4692      	mov	sl, r2
 80031f2:	469b      	mov	fp, r3
 80031f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031f6:	f7fd f953 	bl	80004a0 <__aeabi_f2d>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4650      	mov	r0, sl
 8003200:	4659      	mov	r1, fp
 8003202:	f7fd f9a5 	bl	8000550 <__aeabi_dmul>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4640      	mov	r0, r8
 800320c:	4649      	mov	r1, r9
 800320e:	f7fc ffe7 	bl	80001e0 <__aeabi_dsub>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4690      	mov	r8, r2
 8003218:	4699      	mov	r9, r3
							* handleMinus;
 800321a:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd f92c 	bl	800047c <__aeabi_i2d>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4640      	mov	r0, r8
 800322a:	4649      	mov	r1, r9
 800322c:	f7fd f990 	bl	8000550 <__aeabi_dmul>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
					+ (qTrapSeg2 + (qdm * t3) - 0.5 * qddm * t3 * t3)
 8003234:	4620      	mov	r0, r4
 8003236:	4629      	mov	r1, r5
 8003238:	f7fc ffd4 	bl	80001e4 <__adddf3>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	f7fd fc5c 	bl	8000b00 <__aeabi_d2f>
 8003248:	4603      	mov	r3, r0
			result.posTraj = qi
 800324a:	617b      	str	r3, [r7, #20]
			result.velTraj = -qddm * t3 + qdm;
 800324c:	4b4c      	ldr	r3, [pc, #304]	; (8003380 <trapezoidalTraj+0x7e0>)
 800324e:	edd3 7a00 	vldr	s15, [r3]
 8003252:	eeb1 7a67 	vneg.f32	s14, s15
 8003256:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800325a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800325e:	4b47      	ldr	r3, [pc, #284]	; (800337c <trapezoidalTraj+0x7dc>)
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003268:	edc7 7a06 	vstr	s15, [r7, #24]
			result.accTraj = -qddm;
 800326c:	4b44      	ldr	r3, [pc, #272]	; (8003380 <trapezoidalTraj+0x7e0>)
 800326e:	edd3 7a00 	vldr	s15, [r3]
 8003272:	eef1 7a67 	vneg.f32	s15, s15
 8003276:	edc7 7a07 	vstr	s15, [r7, #28]
				&& actualTime <= timeTrapSeg3 + timeTrapSeg2 + timeTrapSeg1) {
 800327a:	e007      	b.n	800328c <trapezoidalTraj+0x6ec>
		} else {
			result.posTraj = qf;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	617b      	str	r3, [r7, #20]
			result.velTraj = 0;
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
			result.accTraj = 0;
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	61fb      	str	r3, [r7, #28]

		}

	}

	checkPos = result.posTraj;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	4a3e      	ldr	r2, [pc, #248]	; (8003388 <trapezoidalTraj+0x7e8>)
 8003290:	6013      	str	r3, [r2, #0]
	checkVel = result.velTraj;
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	4a3d      	ldr	r2, [pc, #244]	; (800338c <trapezoidalTraj+0x7ec>)
 8003296:	6013      	str	r3, [r2, #0]
	checkAcc = result.accTraj;
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	4a3d      	ldr	r2, [pc, #244]	; (8003390 <trapezoidalTraj+0x7f0>)
 800329c:	6013      	str	r3, [r2, #0]

	actualTime += 0.001;
 800329e:	4b36      	ldr	r3, [pc, #216]	; (8003378 <trapezoidalTraj+0x7d8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd f8fc 	bl	80004a0 <__aeabi_f2d>
 80032a8:	a331      	add	r3, pc, #196	; (adr r3, 8003370 <trapezoidalTraj+0x7d0>)
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	f7fc ff99 	bl	80001e4 <__adddf3>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4610      	mov	r0, r2
 80032b8:	4619      	mov	r1, r3
 80032ba:	f7fd fc21 	bl	8000b00 <__aeabi_d2f>
 80032be:	4603      	mov	r3, r0
 80032c0:	4a2d      	ldr	r2, [pc, #180]	; (8003378 <trapezoidalTraj+0x7d8>)
 80032c2:	6013      	str	r3, [r2, #0]

	// CHECK STATUS

	if (startPointModeY) 		// POINT MODE
 80032c4:	4b33      	ldr	r3, [pc, #204]	; (8003394 <trapezoidalTraj+0x7f4>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d021      	beq.n	8003310 <trapezoidalTraj+0x770>

	{

		if (result.posTraj == qf) {
 80032cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80032d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80032d4:	eeb4 7a67 	vcmp.f32	s14, s15
 80032d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032dc:	d115      	bne.n	800330a <trapezoidalTraj+0x76a>
			result.reachTraj = 1;
 80032de:	2301      	movs	r3, #1
 80032e0:	f887 3020 	strb.w	r3, [r7, #32]
			actualTime = 0.001;
 80032e4:	4b24      	ldr	r3, [pc, #144]	; (8003378 <trapezoidalTraj+0x7d8>)
 80032e6:	4a2c      	ldr	r2, [pc, #176]	; (8003398 <trapezoidalTraj+0x7f8>)
 80032e8:	601a      	str	r2, [r3, #0]
			startPointModeY = 0;
 80032ea:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <trapezoidalTraj+0x7f4>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
			initPosY = mmActPos;
 80032f0:	4b2a      	ldr	r3, [pc, #168]	; (800339c <trapezoidalTraj+0x7fc>)
 80032f2:	edd3 7a00 	vldr	s15, [r3]
 80032f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032fa:	ee17 2a90 	vmov	r2, s15
 80032fe:	4b28      	ldr	r3, [pc, #160]	; (80033a0 <trapezoidalTraj+0x800>)
 8003300:	601a      	str	r2, [r3, #0]
			registerFrame[16].U16 = 0; // RESET : y-axis Moving Status
 8003302:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <trapezoidalTraj+0x804>)
 8003304:	2200      	movs	r2, #0
 8003306:	841a      	strh	r2, [r3, #32]
 8003308:	e002      	b.n	8003310 <trapezoidalTraj+0x770>
		} else {
			result.reachTraj = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	f887 3020 	strb.w	r3, [r7, #32]
		}
	}

	if (startRunTray) {
 8003310:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <trapezoidalTraj+0x808>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01e      	beq.n	8003356 <trapezoidalTraj+0x7b6>
		// RUN TRAY MODE

		if (result.posTraj == qf) {
 8003318:	edd7 7a05 	vldr	s15, [r7, #20]
 800331c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003320:	eeb4 7a67 	vcmp.f32	s14, s15
 8003324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003328:	d112      	bne.n	8003350 <trapezoidalTraj+0x7b0>
			result.reachTraj = 1;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 3020 	strb.w	r3, [r7, #32]
			actualTime = 0.001;
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <trapezoidalTraj+0x7d8>)
 8003332:	4a19      	ldr	r2, [pc, #100]	; (8003398 <trapezoidalTraj+0x7f8>)
 8003334:	601a      	str	r2, [r3, #0]
			initPosY = mmActPos;
 8003336:	4b19      	ldr	r3, [pc, #100]	; (800339c <trapezoidalTraj+0x7fc>)
 8003338:	edd3 7a00 	vldr	s15, [r3]
 800333c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003340:	ee17 2a90 	vmov	r2, s15
 8003344:	4b16      	ldr	r3, [pc, #88]	; (80033a0 <trapezoidalTraj+0x800>)
 8003346:	601a      	str	r2, [r3, #0]
			registerFrame[16].U16 = 0; // RESET : y-axis Moving Status // ---------
 8003348:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <trapezoidalTraj+0x804>)
 800334a:	2200      	movs	r2, #0
 800334c:	841a      	strh	r2, [r3, #32]
 800334e:	e002      	b.n	8003356 <trapezoidalTraj+0x7b6>
		}

		else {
			result.reachTraj = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	f887 3020 	strb.w	r3, [r7, #32]
		}
	}

	return result;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	461c      	mov	r4, r3
 800335a:	f107 0314 	add.w	r3, r7, #20
 800335e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003360:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	3758      	adds	r7, #88	; 0x58
 8003368:	46bd      	mov	sp, r7
 800336a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336e:	bf00      	nop
 8003370:	d2f1a9fc 	.word	0xd2f1a9fc
 8003374:	3f50624d 	.word	0x3f50624d
 8003378:	20000260 	.word	0x20000260
 800337c:	2000025c 	.word	0x2000025c
 8003380:	20000258 	.word	0x20000258
 8003384:	3fe00000 	.word	0x3fe00000
 8003388:	20000efc 	.word	0x20000efc
 800338c:	20000f00 	.word	0x20000f00
 8003390:	20000f04 	.word	0x20000f04
 8003394:	20000f09 	.word	0x20000f09
 8003398:	3a83126f 	.word	0x3a83126f
 800339c:	20000e1c 	.word	0x20000e1c
 80033a0:	20000f0c 	.word	0x20000f0c
 80033a4:	20000d48 	.word	0x20000d48
 80033a8:	20000f1b 	.word	0x20000f1b
 80033ac:	00000000 	.word	0x00000000

080033b0 <calibrateTray>:

void calibrateTray(trayPos trayX, trayPos trayY, Point *objPos) {
 80033b0:	b082      	sub	sp, #8
 80033b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b4:	b099      	sub	sp, #100	; 0x64
 80033b6:	af02      	add	r7, sp, #8
 80033b8:	1d3c      	adds	r4, r7, #4
 80033ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033be:	677b      	str	r3, [r7, #116]	; 0x74
	float length1 = pow(
			pow(trayX.pos1 - trayX.pos2, 2) + pow(trayY.pos1 - trayY.pos2, 2),
 80033c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033c4:	461a      	mov	r2, r3
 80033c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd f855 	bl	800047c <__aeabi_i2d>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	ed9f 1b96 	vldr	d1, [pc, #600]	; 8003630 <calibrateTray+0x280>
 80033da:	ec43 2b10 	vmov	d0, r2, r3
 80033de:	f009 f853 	bl	800c488 <pow>
 80033e2:	ec55 4b10 	vmov	r4, r5, d0
 80033e6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80033ea:	461a      	mov	r2, r3
 80033ec:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd f842 	bl	800047c <__aeabi_i2d>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 8003630 <calibrateTray+0x280>
 8003400:	ec43 2b10 	vmov	d0, r2, r3
 8003404:	f009 f840 	bl	800c488 <pow>
 8003408:	ec53 2b10 	vmov	r2, r3, d0
	float length1 = pow(
 800340c:	4620      	mov	r0, r4
 800340e:	4629      	mov	r1, r5
 8003410:	f7fc fee8 	bl	80001e4 <__adddf3>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	ec43 2b17 	vmov	d7, r2, r3
 800341c:	ed9f 1b86 	vldr	d1, [pc, #536]	; 8003638 <calibrateTray+0x288>
 8003420:	eeb0 0a47 	vmov.f32	s0, s14
 8003424:	eef0 0a67 	vmov.f32	s1, s15
 8003428:	f009 f82e 	bl	800c488 <pow>
 800342c:	ec53 2b10 	vmov	r2, r3, d0
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	f7fd fb64 	bl	8000b00 <__aeabi_d2f>
 8003438:	4603      	mov	r3, r0
 800343a:	63fb      	str	r3, [r7, #60]	; 0x3c
			0.5);
	float length2 = pow(
			pow(trayX.pos2 - trayX.pos3, 2) + pow(trayY.pos2 - trayY.pos3, 2),
 800343c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003440:	461a      	mov	r2, r3
 8003442:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd f817 	bl	800047c <__aeabi_i2d>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8003630 <calibrateTray+0x280>
 8003456:	ec43 2b10 	vmov	d0, r2, r3
 800345a:	f009 f815 	bl	800c488 <pow>
 800345e:	ec55 4b10 	vmov	r4, r5, d0
 8003462:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8003466:	461a      	mov	r2, r3
 8003468:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd f804 	bl	800047c <__aeabi_i2d>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8003630 <calibrateTray+0x280>
 800347c:	ec43 2b10 	vmov	d0, r2, r3
 8003480:	f009 f802 	bl	800c488 <pow>
 8003484:	ec53 2b10 	vmov	r2, r3, d0
	float length2 = pow(
 8003488:	4620      	mov	r0, r4
 800348a:	4629      	mov	r1, r5
 800348c:	f7fc feaa 	bl	80001e4 <__adddf3>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	ec43 2b17 	vmov	d7, r2, r3
 8003498:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8003638 <calibrateTray+0x288>
 800349c:	eeb0 0a47 	vmov.f32	s0, s14
 80034a0:	eef0 0a67 	vmov.f32	s1, s15
 80034a4:	f008 fff0 	bl	800c488 <pow>
 80034a8:	ec53 2b10 	vmov	r2, r3, d0
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	f7fd fb26 	bl	8000b00 <__aeabi_d2f>
 80034b4:	4603      	mov	r3, r0
 80034b6:	63bb      	str	r3, [r7, #56]	; 0x38
			0.5);
	uint8_t k = 50;
 80034b8:	2332      	movs	r3, #50	; 0x32
 80034ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (length1 > length2) {
 80034be:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80034c2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80034c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ce:	dd02      	ble.n	80034d6 <calibrateTray+0x126>
		k = 60;
 80034d0:	233c      	movs	r3, #60	; 0x3c
 80034d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}

	float length3 = trayY.pos1 - trayY.pos2;
 80034d6:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80034da:	461a      	mov	r2, r3
 80034dc:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ea:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float radians = acos(length3 / k);
 80034ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034fa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80034fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003502:	ee16 0a90 	vmov	r0, s13
 8003506:	f7fc ffcb 	bl	80004a0 <__aeabi_f2d>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	ec43 2b10 	vmov	d0, r2, r3
 8003512:	f008 ff85 	bl	800c420 <acos>
 8003516:	ec53 2b10 	vmov	r2, r3, d0
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	f7fd faef 	bl	8000b00 <__aeabi_d2f>
 8003522:	4603      	mov	r3, r0
 8003524:	653b      	str	r3, [r7, #80]	; 0x50

	float TrayOriginX = trayX.pos2;
 8003526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003532:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float TrayOriginY = trayY.pos2;
 8003536:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003542:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	int16_t writeDeg = 36000 - (radians * (180 / M_PI) * 100);
 8003546:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003548:	f7fc ffaa 	bl	80004a0 <__aeabi_f2d>
 800354c:	a33e      	add	r3, pc, #248	; (adr r3, 8003648 <calibrateTray+0x298>)
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	f7fc fffd 	bl	8000550 <__aeabi_dmul>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4610      	mov	r0, r2
 800355c:	4619      	mov	r1, r3
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	4b3f      	ldr	r3, [pc, #252]	; (8003660 <calibrateTray+0x2b0>)
 8003564:	f7fc fff4 	bl	8000550 <__aeabi_dmul>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	a134      	add	r1, pc, #208	; (adr r1, 8003640 <calibrateTray+0x290>)
 800356e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003572:	f7fc fe35 	bl	80001e0 <__aeabi_dsub>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	f7fd fa97 	bl	8000ab0 <__aeabi_d2iz>
 8003582:	4603      	mov	r3, r0
 8003584:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	if (k == 60) {
 8003588:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800358c:	2b3c      	cmp	r3, #60	; 0x3c
 800358e:	d140      	bne.n	8003612 <calibrateTray+0x262>

		TrayOriginX = trayX.pos3;
 8003590:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003594:	ee07 3a90 	vmov	s15, r3
 8003598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800359c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		TrayOriginY = trayY.pos3;
 80035a0:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 80035a4:	ee07 3a90 	vmov	s15, r3
 80035a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035ac:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		writeDeg = 27000 - (radians * (180 / M_PI) * 100);
 80035b0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80035b2:	f7fc ff75 	bl	80004a0 <__aeabi_f2d>
 80035b6:	a324      	add	r3, pc, #144	; (adr r3, 8003648 <calibrateTray+0x298>)
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	f7fc ffc8 	bl	8000550 <__aeabi_dmul>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4610      	mov	r0, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	4b24      	ldr	r3, [pc, #144]	; (8003660 <calibrateTray+0x2b0>)
 80035ce:	f7fc ffbf 	bl	8000550 <__aeabi_dmul>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	a11e      	add	r1, pc, #120	; (adr r1, 8003650 <calibrateTray+0x2a0>)
 80035d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035dc:	f7fc fe00 	bl	80001e0 <__aeabi_dsub>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4610      	mov	r0, r2
 80035e6:	4619      	mov	r1, r3
 80035e8:	f7fd fa62 	bl	8000ab0 <__aeabi_d2iz>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		radians -= (1.5 * M_PI);
 80035f2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80035f4:	f7fc ff54 	bl	80004a0 <__aeabi_f2d>
 80035f8:	a317      	add	r3, pc, #92	; (adr r3, 8003658 <calibrateTray+0x2a8>)
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	f7fc fdef 	bl	80001e0 <__aeabi_dsub>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4610      	mov	r0, r2
 8003608:	4619      	mov	r1, r3
 800360a:	f7fd fa79 	bl	8000b00 <__aeabi_d2f>
 800360e:	4603      	mov	r3, r0
 8003610:	653b      	str	r3, [r7, #80]	; 0x50
	}

	float a[3] = { 10.0f, 30.0f, 50.0f };
 8003612:	4a14      	ldr	r2, [pc, #80]	; (8003664 <calibrateTray+0x2b4>)
 8003614:	f107 0320 	add.w	r3, r7, #32
 8003618:	ca07      	ldmia	r2, {r0, r1, r2}
 800361a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float b[3] = { 40.0f, 25.0f, 10.0f };
 800361e:	4a12      	ldr	r2, [pc, #72]	; (8003668 <calibrateTray+0x2b8>)
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	ca07      	ldmia	r2, {r0, r1, r2}
 8003626:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (int i = 0; i < 9; i++) {
 800362a:	2300      	movs	r3, #0
 800362c:	643b      	str	r3, [r7, #64]	; 0x40
 800362e:	e09c      	b.n	800376a <calibrateTray+0x3ba>
 8003630:	00000000 	.word	0x00000000
 8003634:	40000000 	.word	0x40000000
 8003638:	00000000 	.word	0x00000000
 800363c:	3fe00000 	.word	0x3fe00000
 8003640:	00000000 	.word	0x00000000
 8003644:	40e19400 	.word	0x40e19400
 8003648:	1a63c1f8 	.word	0x1a63c1f8
 800364c:	404ca5dc 	.word	0x404ca5dc
 8003650:	00000000 	.word	0x00000000
 8003654:	40da5e00 	.word	0x40da5e00
 8003658:	7f3321d2 	.word	0x7f3321d2
 800365c:	4012d97c 	.word	0x4012d97c
 8003660:	40590000 	.word	0x40590000
 8003664:	0800e1d8 	.word	0x0800e1d8
 8003668:	0800e1e4 	.word	0x0800e1e4
		uint8_t index = i % 3;
 800366c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800366e:	4b61      	ldr	r3, [pc, #388]	; (80037f4 <calibrateTray+0x444>)
 8003670:	fb83 3102 	smull	r3, r1, r3, r2
 8003674:	17d3      	asrs	r3, r2, #31
 8003676:	1ac9      	subs	r1, r1, r3
 8003678:	460b      	mov	r3, r1
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	440b      	add	r3, r1
 800367e:	1ad1      	subs	r1, r2, r3
 8003680:	460b      	mov	r3, r1
 8003682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		objPos[i].x = TrayOriginX + a[index];
 8003686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	3358      	adds	r3, #88	; 0x58
 800368e:	443b      	add	r3, r7
 8003690:	3b38      	subs	r3, #56	; 0x38
 8003692:	ed93 7a00 	vldr	s14, [r3]
 8003696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800369e:	4413      	add	r3, r2
 80036a0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80036a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a8:	edc3 7a00 	vstr	s15, [r3]

		uint8_t row = i / 3;
 80036ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ae:	4a51      	ldr	r2, [pc, #324]	; (80037f4 <calibrateTray+0x444>)
 80036b0:	fb82 1203 	smull	r1, r2, r2, r3
 80036b4:	17db      	asrs	r3, r3, #31
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		objPos[i].y = TrayOriginY + b[row];
 80036bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	3358      	adds	r3, #88	; 0x58
 80036c4:	443b      	add	r3, r7
 80036c6:	3b44      	subs	r3, #68	; 0x44
 80036c8:	ed93 7a00 	vldr	s14, [r3]
 80036cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036d4:	4413      	add	r3, r2
 80036d6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80036da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036de:	edc3 7a01 	vstr	s15, [r3, #4]
		objPos[i] = rotatePoint(objPos[i].x, objPos[i].y, TrayOriginX,
 80036e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036ea:	4413      	add	r3, r2
 80036ec:	edd3 7a00 	vldr	s15, [r3]
 80036f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036f4:	ee17 3a90 	vmov	r3, s15
 80036f8:	b218      	sxth	r0, r3
 80036fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003702:	4413      	add	r3, r2
 8003704:	edd3 7a01 	vldr	s15, [r3, #4]
 8003708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800370c:	ee17 3a90 	vmov	r3, s15
 8003710:	b21d      	sxth	r5, r3
 8003712:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800371a:	ee17 3a90 	vmov	r3, s15
 800371e:	b21e      	sxth	r6, r3
 8003720:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003728:	ee17 3a90 	vmov	r3, s15
 800372c:	fa0f fc83 	sxth.w	ip, r3
 8003730:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003738:	ee17 3a90 	vmov	r3, s15
 800373c:	b21b      	sxth	r3, r3
 800373e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003740:	00d2      	lsls	r2, r2, #3
 8003742:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8003746:	188c      	adds	r4, r1, r2
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	4663      	mov	r3, ip
 800374c:	4632      	mov	r2, r6
 800374e:	4629      	mov	r1, r5
 8003750:	f000 f856 	bl	8003800 <rotatePoint>
 8003754:	eeb0 7a40 	vmov.f32	s14, s0
 8003758:	eef0 7a60 	vmov.f32	s15, s1
 800375c:	ed84 7a00 	vstr	s14, [r4]
 8003760:	edc4 7a01 	vstr	s15, [r4, #4]
	for (int i = 0; i < 9; i++) {
 8003764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003766:	3301      	adds	r3, #1
 8003768:	643b      	str	r3, [r7, #64]	; 0x40
 800376a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376c:	2b08      	cmp	r3, #8
 800376e:	f77f af7d 	ble.w	800366c <calibrateTray+0x2bc>
				TrayOriginY, radians);
	}

	int16_t writeTrayOriginX = TrayOriginX * 10; // CHANGE DATA TYPE
 8003772:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003776:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800377a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800377e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003782:	ee17 3a90 	vmov	r3, s15
 8003786:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t writeTrayOriginY = TrayOriginY * 10; // CHANGE DATA TYPE
 8003788:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800378c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003790:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003798:	ee17 3a90 	vmov	r3, s15
 800379c:	863b      	strh	r3, [r7, #48]	; 0x30
	if (calibrateTrayInput == 1) {
 800379e:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <calibrateTray+0x448>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d10d      	bne.n	80037c2 <calibrateTray+0x412>
		registerFrame[32].U16 = writeTrayOriginX; // WRTTE : Pick Tray Origin x
 80037a6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80037a8:	4b14      	ldr	r3, [pc, #80]	; (80037fc <calibrateTray+0x44c>)
 80037aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		registerFrame[33].U16 = writeTrayOriginY; // WRTTE : Pick Tray Origin y
 80037ae:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80037b0:	4b12      	ldr	r3, [pc, #72]	; (80037fc <calibrateTray+0x44c>)
 80037b2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		registerFrame[34].U16 = writeDeg; // WRTTE : Pick Tray Orientation
 80037b6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <calibrateTray+0x44c>)
 80037bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		registerFrame[35].U16 = writeTrayOriginX; //  WRTTE : Place Tray Origin x
		registerFrame[36].U16 = writeTrayOriginY; // WRTTE : Place Tray Origin y
		registerFrame[37].U16 = writeDeg; // WRTTE : Place Tray Orientation
	}

}
 80037c0:	e010      	b.n	80037e4 <calibrateTray+0x434>
	} else if (calibrateTrayInput == 2) {
 80037c2:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <calibrateTray+0x448>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d10c      	bne.n	80037e4 <calibrateTray+0x434>
		registerFrame[35].U16 = writeTrayOriginX; //  WRTTE : Place Tray Origin x
 80037ca:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <calibrateTray+0x44c>)
 80037ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		registerFrame[36].U16 = writeTrayOriginY; // WRTTE : Place Tray Origin y
 80037d2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80037d4:	4b09      	ldr	r3, [pc, #36]	; (80037fc <calibrateTray+0x44c>)
 80037d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		registerFrame[37].U16 = writeDeg; // WRTTE : Place Tray Orientation
 80037da:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <calibrateTray+0x44c>)
 80037e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 80037e4:	bf00      	nop
 80037e6:	375c      	adds	r7, #92	; 0x5c
 80037e8:	46bd      	mov	sp, r7
 80037ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80037ee:	b002      	add	sp, #8
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	55555556 	.word	0x55555556
 80037f8:	20000e34 	.word	0x20000e34
 80037fc:	20000d48 	.word	0x20000d48

08003800 <rotatePoint>:

Point rotatePoint(int16_t p1, int16_t p2, int16_t centerX, int16_t centerY,
		int16_t radians) {
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b08b      	sub	sp, #44	; 0x2c
 8003804:	af00      	add	r7, sp, #0
 8003806:	4604      	mov	r4, r0
 8003808:	4608      	mov	r0, r1
 800380a:	4611      	mov	r1, r2
 800380c:	461a      	mov	r2, r3
 800380e:	4623      	mov	r3, r4
 8003810:	81fb      	strh	r3, [r7, #14]
 8003812:	4603      	mov	r3, r0
 8003814:	81bb      	strh	r3, [r7, #12]
 8003816:	460b      	mov	r3, r1
 8003818:	817b      	strh	r3, [r7, #10]
 800381a:	4613      	mov	r3, r2
 800381c:	813b      	strh	r3, [r7, #8]
// ROTATION MATRIX
	int16_t cosTheta = cosf(radians);
 800381e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800382a:	eeb0 0a67 	vmov.f32	s0, s15
 800382e:	f008 fd6d 	bl	800c30c <cosf>
 8003832:	eef0 7a40 	vmov.f32	s15, s0
 8003836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800383a:	ee17 3a90 	vmov	r3, s15
 800383e:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t sinTheta = sinf(radians);
 8003840:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8003844:	ee07 3a90 	vmov	s15, r3
 8003848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800384c:	eeb0 0a67 	vmov.f32	s0, s15
 8003850:	f008 fda0 	bl	800c394 <sinf>
 8003854:	eef0 7a40 	vmov.f32	s15, s0
 8003858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800385c:	ee17 3a90 	vmov	r3, s15
 8003860:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t translatedX = p1 - centerX;
 8003862:	89fa      	ldrh	r2, [r7, #14]
 8003864:	897b      	ldrh	r3, [r7, #10]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	b29b      	uxth	r3, r3
 800386a:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t translatedY = p2 - centerY;
 800386c:	89ba      	ldrh	r2, [r7, #12]
 800386e:	893b      	ldrh	r3, [r7, #8]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	b29b      	uxth	r3, r3
 8003874:	843b      	strh	r3, [r7, #32]

	Point rotatedPoint;
	rotatedPoint.x = (translatedX * cosTheta) - (translatedY * sinTheta)
 8003876:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800387a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800387e:	fb03 f202 	mul.w	r2, r3, r2
 8003882:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003886:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	; 0x24
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	1ad2      	subs	r2, r2, r3
			+ centerX;
 8003890:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003894:	4413      	add	r3, r2
	rotatedPoint.x = (translatedX * cosTheta) - (translatedY * sinTheta)
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800389e:	edc7 7a04 	vstr	s15, [r7, #16]
	rotatedPoint.y = (translatedX * sinTheta) + (translatedY * cosTheta)
 80038a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80038a6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80038aa:	fb03 f202 	mul.w	r2, r3, r2
 80038ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80038b2:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	; 0x26
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	441a      	add	r2, r3
			+ centerY;
 80038bc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80038c0:	4413      	add	r3, r2
	rotatedPoint.y = (translatedX * sinTheta) + (translatedY * cosTheta)
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ca:	edc7 7a05 	vstr	s15, [r7, #20]

	return rotatedPoint;
 80038ce:	f107 0318 	add.w	r3, r7, #24
 80038d2:	f107 0210 	add.w	r2, r7, #16
 80038d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038da:	e883 0003 	stmia.w	r3, {r0, r1}
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	ee07 2a10 	vmov	s14, r2
 80038e6:	ee07 3a90 	vmov	s15, r3
}
 80038ea:	eeb0 0a47 	vmov.f32	s0, s14
 80038ee:	eef0 0a67 	vmov.f32	s1, s15
 80038f2:	372c      	adds	r7, #44	; 0x2c
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd90      	pop	{r4, r7, pc}

080038f8 <buttonInput>:

void buttonInput() {
 80038f8:	b598      	push	{r3, r4, r7, lr}
 80038fa:	af00      	add	r7, sp, #0
	register int i;
	for (i = 0; i < 4; i++) {
 80038fc:	2400      	movs	r4, #0
 80038fe:	e051      	b.n	80039a4 <buttonInput+0xac>
		Button1[i].Current = HAL_GPIO_ReadPin(joyPin[i].PORT, joyPin[i].PIN);
 8003900:	4b2b      	ldr	r3, [pc, #172]	; (80039b0 <buttonInput+0xb8>)
 8003902:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 8003906:	492a      	ldr	r1, [pc, #168]	; (80039b0 <buttonInput+0xb8>)
 8003908:	00e3      	lsls	r3, r4, #3
 800390a:	440b      	add	r3, r1
 800390c:	889b      	ldrh	r3, [r3, #4]
 800390e:	4619      	mov	r1, r3
 8003910:	4610      	mov	r0, r2
 8003912:	f002 fb6f 	bl	8005ff4 <HAL_GPIO_ReadPin>
 8003916:	4603      	mov	r3, r0
 8003918:	461a      	mov	r2, r3
 800391a:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <buttonInput+0xbc>)
 800391c:	f803 2014 	strb.w	r2, [r3, r4, lsl #1]
		if (Button1[i].Last == 0 && Button1[i].Current == 1) {
 8003920:	4a24      	ldr	r2, [pc, #144]	; (80039b4 <buttonInput+0xbc>)
 8003922:	0063      	lsls	r3, r4, #1
 8003924:	4413      	add	r3, r2
 8003926:	785b      	ldrb	r3, [r3, #1]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d132      	bne.n	8003992 <buttonInput+0x9a>
 800392c:	4b21      	ldr	r3, [pc, #132]	; (80039b4 <buttonInput+0xbc>)
 800392e:	f813 3014 	ldrb.w	r3, [r3, r4, lsl #1]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d12d      	bne.n	8003992 <buttonInput+0x9a>
			if (i == 0) {
 8003936:	2c00      	cmp	r4, #0
 8003938:	d105      	bne.n	8003946 <buttonInput+0x4e>
				countTopB += 1;
 800393a:	4b1f      	ldr	r3, [pc, #124]	; (80039b8 <buttonInput+0xc0>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	3301      	adds	r3, #1
 8003940:	b2da      	uxtb	r2, r3
 8003942:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <buttonInput+0xc0>)
 8003944:	701a      	strb	r2, [r3, #0]
			}
			if (i == 1) {
 8003946:	2c01      	cmp	r4, #1
 8003948:	d108      	bne.n	800395c <buttonInput+0x64>
				countRightB += 1;
 800394a:	4b1c      	ldr	r3, [pc, #112]	; (80039bc <buttonInput+0xc4>)
 800394c:	f993 3000 	ldrsb.w	r3, [r3]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	3301      	adds	r3, #1
 8003954:	b2db      	uxtb	r3, r3
 8003956:	b25a      	sxtb	r2, r3
 8003958:	4b18      	ldr	r3, [pc, #96]	; (80039bc <buttonInput+0xc4>)
 800395a:	701a      	strb	r2, [r3, #0]
			}
			if (i == 2) {
 800395c:	2c02      	cmp	r4, #2
 800395e:	d105      	bne.n	800396c <buttonInput+0x74>
				countBottomB += 1;
 8003960:	4b17      	ldr	r3, [pc, #92]	; (80039c0 <buttonInput+0xc8>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	3301      	adds	r3, #1
 8003966:	b2da      	uxtb	r2, r3
 8003968:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <buttonInput+0xc8>)
 800396a:	701a      	strb	r2, [r3, #0]
			}
			if (i == 3) {
 800396c:	2c03      	cmp	r4, #3
 800396e:	d105      	bne.n	800397c <buttonInput+0x84>
				countLeftB += 1;
 8003970:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <buttonInput+0xcc>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	3301      	adds	r3, #1
 8003976:	b2da      	uxtb	r2, r3
 8003978:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <buttonInput+0xcc>)
 800397a:	701a      	strb	r2, [r3, #0]

			}
			Button1[i].Last = Button1[i].Current;
 800397c:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <buttonInput+0xbc>)
 800397e:	f813 1014 	ldrb.w	r1, [r3, r4, lsl #1]
 8003982:	4a0c      	ldr	r2, [pc, #48]	; (80039b4 <buttonInput+0xbc>)
 8003984:	0063      	lsls	r3, r4, #1
 8003986:	4413      	add	r3, r2
 8003988:	460a      	mov	r2, r1
 800398a:	705a      	strb	r2, [r3, #1]
			joyLogic = i;
 800398c:	b2e2      	uxtb	r2, r4
 800398e:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <buttonInput+0xd0>)
 8003990:	701a      	strb	r2, [r3, #0]
		}
		Button1[i].Last = Button1[i].Current;
 8003992:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <buttonInput+0xbc>)
 8003994:	f813 1014 	ldrb.w	r1, [r3, r4, lsl #1]
 8003998:	4a06      	ldr	r2, [pc, #24]	; (80039b4 <buttonInput+0xbc>)
 800399a:	0063      	lsls	r3, r4, #1
 800399c:	4413      	add	r3, r2
 800399e:	460a      	mov	r2, r1
 80039a0:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 4; i++) {
 80039a2:	3401      	adds	r4, #1
 80039a4:	2c03      	cmp	r4, #3
 80039a6:	ddab      	ble.n	8003900 <buttonInput+0x8>
	}
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	bd98      	pop	{r3, r4, r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000200 	.word	0x20000200
 80039b4:	20000dd4 	.word	0x20000dd4
 80039b8:	20000e05 	.word	0x20000e05
 80039bc:	20000e06 	.word	0x20000e06
 80039c0:	20000e04 	.word	0x20000e04
 80039c4:	20000e07 	.word	0x20000e07
 80039c8:	20000e08 	.word	0x20000e08

080039cc <buttonLogic>:

void buttonLogic(uint16_t state) {
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af04      	add	r7, sp, #16
 80039d2:	4603      	mov	r3, r0
 80039d4:	80fb      	strh	r3, [r7, #6]
	if (countTopB % 2 == 1) {
 80039d6:	4ba2      	ldr	r3, [pc, #648]	; (8003c60 <buttonLogic+0x294>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d03d      	beq.n	8003a60 <buttonLogic+0x94>
		switch (state) {
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d83b      	bhi.n	8003a62 <buttonLogic+0x96>
 80039ea:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <buttonLogic+0x24>)
 80039ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f0:	08003a01 	.word	0x08003a01
 80039f4:	08003a1b 	.word	0x08003a1b
 80039f8:	08003a2f 	.word	0x08003a2f
 80039fc:	08003a4d 	.word	0x08003a4d
		case 0: // ENTER JOG MODE
			joyLogicLED = 1;
 8003a00:	4b98      	ldr	r3, [pc, #608]	; (8003c64 <buttonLogic+0x298>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]
			if (switchAxis) {
 8003a06:	4b98      	ldr	r3, [pc, #608]	; (8003c68 <buttonLogic+0x29c>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <buttonLogic+0x48>
				jogAxisY();
 8003a0e:	f7ff f81b 	bl	8002a48 <jogAxisY>
			} else {
				jogAxisX();
			}

			// handleJogAxisY(myJoyState);
			break;
 8003a12:	e026      	b.n	8003a62 <buttonLogic+0x96>
				jogAxisX();
 8003a14:	f000 fad6 	bl	8003fc4 <jogAxisX>
			break;
 8003a18:	e023      	b.n	8003a62 <buttonLogic+0x96>
		case 1: // RIGHT
			myJoyState += 1;
 8003a1a:	4b94      	ldr	r3, [pc, #592]	; (8003c6c <buttonLogic+0x2a0>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4b92      	ldr	r3, [pc, #584]	; (8003c6c <buttonLogic+0x2a0>)
 8003a24:	701a      	strb	r2, [r3, #0]

			joyLogic = 0;
 8003a26:	4b92      	ldr	r3, [pc, #584]	; (8003c70 <buttonLogic+0x2a4>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	701a      	strb	r2, [r3, #0]
			break;
 8003a2c:	e019      	b.n	8003a62 <buttonLogic+0x96>
		case 2: // CHANGE AXIS X/Y
			if (switchAxis) {
 8003a2e:	4b8e      	ldr	r3, [pc, #568]	; (8003c68 <buttonLogic+0x29c>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <buttonLogic+0x72>
				switchAxis = 0;
 8003a36:	4b8c      	ldr	r3, [pc, #560]	; (8003c68 <buttonLogic+0x29c>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	e002      	b.n	8003a44 <buttonLogic+0x78>
			} else {
				switchAxis = 1;
 8003a3e:	4b8a      	ldr	r3, [pc, #552]	; (8003c68 <buttonLogic+0x29c>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	701a      	strb	r2, [r3, #0]
			}
			joyLogic = 0;
 8003a44:	4b8a      	ldr	r3, [pc, #552]	; (8003c70 <buttonLogic+0x2a4>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]
			break;
 8003a4a:	e00a      	b.n	8003a62 <buttonLogic+0x96>
		case 3: // LEFT
			joyLogic = 0;
 8003a4c:	4b88      	ldr	r3, [pc, #544]	; (8003c70 <buttonLogic+0x2a4>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]
			myJoyState -= 1;
 8003a52:	4b86      	ldr	r3, [pc, #536]	; (8003c6c <buttonLogic+0x2a0>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	4b84      	ldr	r3, [pc, #528]	; (8003c6c <buttonLogic+0x2a0>)
 8003a5c:	701a      	strb	r2, [r3, #0]
			break;
 8003a5e:	e000      	b.n	8003a62 <buttonLogic+0x96>
		}
	}
 8003a60:	bf00      	nop
	if (countTopB % 2 == 0) {
 8003a62:	4b7f      	ldr	r3, [pc, #508]	; (8003c60 <buttonLogic+0x294>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f040 815c 	bne.w	8003d2a <buttonLogic+0x35e>
		switch (state) {
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	f200 8159 	bhi.w	8003d2c <buttonLogic+0x360>
 8003a7a:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <buttonLogic+0xb4>)
 8003a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a80:	08003a91 	.word	0x08003a91
 8003a84:	08003abd 	.word	0x08003abd
 8003a88:	08003d15 	.word	0x08003d15
 8003a8c:	08003d1d 	.word	0x08003d1d
		case 0: // ENTER CALIBRATE MODE
			if (countRightB == 4) {
 8003a90:	4b78      	ldr	r3, [pc, #480]	; (8003c74 <buttonLogic+0x2a8>)
 8003a92:	f993 3000 	ldrsb.w	r3, [r3]
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d103      	bne.n	8003aa2 <buttonLogic+0xd6>
				joyLogicLED = 3;
 8003a9a:	4b72      	ldr	r3, [pc, #456]	; (8003c64 <buttonLogic+0x298>)
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	701a      	strb	r2, [r3, #0]
				joyLogicLED = 4;
			} else {
				joyLogicLED = 2;
			}

			break;
 8003aa0:	e144      	b.n	8003d2c <buttonLogic+0x360>
			} else if (countRightB == 7) {
 8003aa2:	4b74      	ldr	r3, [pc, #464]	; (8003c74 <buttonLogic+0x2a8>)
 8003aa4:	f993 3000 	ldrsb.w	r3, [r3]
 8003aa8:	2b07      	cmp	r3, #7
 8003aaa:	d103      	bne.n	8003ab4 <buttonLogic+0xe8>
				joyLogicLED = 4;
 8003aac:	4b6d      	ldr	r3, [pc, #436]	; (8003c64 <buttonLogic+0x298>)
 8003aae:	2204      	movs	r2, #4
 8003ab0:	701a      	strb	r2, [r3, #0]
			break;
 8003ab2:	e13b      	b.n	8003d2c <buttonLogic+0x360>
				joyLogicLED = 2;
 8003ab4:	4b6b      	ldr	r3, [pc, #428]	; (8003c64 <buttonLogic+0x298>)
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	701a      	strb	r2, [r3, #0]
			break;
 8003aba:	e137      	b.n	8003d2c <buttonLogic+0x360>
		case 1: // MARK POSITION
			if (countRightB == 2) {
 8003abc:	4b6d      	ldr	r3, [pc, #436]	; (8003c74 <buttonLogic+0x2a8>)
 8003abe:	f993 3000 	ldrsb.w	r3, [r3]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d120      	bne.n	8003b08 <buttonLogic+0x13c>

				trayPickX.pos1 = ((int16_t)registerFrame[68].U16 / 10.0); // READ : x-axis Actual Position
 8003ac6:	4b6c      	ldr	r3, [pc, #432]	; (8003c78 <buttonLogic+0x2ac>)
 8003ac8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003acc:	b21b      	sxth	r3, r3
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fc fcd4 	bl	800047c <__aeabi_i2d>
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	4b68      	ldr	r3, [pc, #416]	; (8003c7c <buttonLogic+0x2b0>)
 8003ada:	f7fc fe63 	bl	80007a4 <__aeabi_ddiv>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f7fc ffe3 	bl	8000ab0 <__aeabi_d2iz>
 8003aea:	4603      	mov	r3, r0
 8003aec:	b21a      	sxth	r2, r3
 8003aee:	4b64      	ldr	r3, [pc, #400]	; (8003c80 <buttonLogic+0x2b4>)
 8003af0:	801a      	strh	r2, [r3, #0]

//				trayPickX.pos1 = registerFrame[68].U16 / 10.0; // READ : x-axis Actual Position
				 trayPickY.pos1 = mmActPos;
 8003af2:	4b64      	ldr	r3, [pc, #400]	; (8003c84 <buttonLogic+0x2b8>)
 8003af4:	edd3 7a00 	vldr	s15, [r3]
 8003af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003afc:	ee17 3a90 	vmov	r3, s15
 8003b00:	b21a      	sxth	r2, r3
 8003b02:	4b61      	ldr	r3, [pc, #388]	; (8003c88 <buttonLogic+0x2bc>)
 8003b04:	801a      	strh	r2, [r3, #0]
 8003b06:	e101      	b.n	8003d0c <buttonLogic+0x340>
			} else if (countRightB == 3) {
 8003b08:	4b5a      	ldr	r3, [pc, #360]	; (8003c74 <buttonLogic+0x2a8>)
 8003b0a:	f993 3000 	ldrsb.w	r3, [r3]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d120      	bne.n	8003b54 <buttonLogic+0x188>
				trayPickX.pos2 = ((int16_t)registerFrame[68].U16 / 10.0);// READ : x-axis Actual Position
 8003b12:	4b59      	ldr	r3, [pc, #356]	; (8003c78 <buttonLogic+0x2ac>)
 8003b14:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003b18:	b21b      	sxth	r3, r3
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fc fcae 	bl	800047c <__aeabi_i2d>
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	4b55      	ldr	r3, [pc, #340]	; (8003c7c <buttonLogic+0x2b0>)
 8003b26:	f7fc fe3d 	bl	80007a4 <__aeabi_ddiv>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4610      	mov	r0, r2
 8003b30:	4619      	mov	r1, r3
 8003b32:	f7fc ffbd 	bl	8000ab0 <__aeabi_d2iz>
 8003b36:	4603      	mov	r3, r0
 8003b38:	b21a      	sxth	r2, r3
 8003b3a:	4b51      	ldr	r3, [pc, #324]	; (8003c80 <buttonLogic+0x2b4>)
 8003b3c:	805a      	strh	r2, [r3, #2]
				 trayPickY.pos2 = mmActPos;
 8003b3e:	4b51      	ldr	r3, [pc, #324]	; (8003c84 <buttonLogic+0x2b8>)
 8003b40:	edd3 7a00 	vldr	s15, [r3]
 8003b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b48:	ee17 3a90 	vmov	r3, s15
 8003b4c:	b21a      	sxth	r2, r3
 8003b4e:	4b4e      	ldr	r3, [pc, #312]	; (8003c88 <buttonLogic+0x2bc>)
 8003b50:	805a      	strh	r2, [r3, #2]
 8003b52:	e0db      	b.n	8003d0c <buttonLogic+0x340>
			} else if (countRightB == 4) {
 8003b54:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <buttonLogic+0x2a8>)
 8003b56:	f993 3000 	ldrsb.w	r3, [r3]
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d133      	bne.n	8003bc6 <buttonLogic+0x1fa>
				registerFrame[16].U16 = 0;
 8003b5e:	4b46      	ldr	r3, [pc, #280]	; (8003c78 <buttonLogic+0x2ac>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	841a      	strh	r2, [r3, #32]
				trayPickX.pos3 = ((int16_t)registerFrame[68].U16 / 10.0); // READ : x-axis Actual Position
 8003b64:	4b44      	ldr	r3, [pc, #272]	; (8003c78 <buttonLogic+0x2ac>)
 8003b66:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003b6a:	b21b      	sxth	r3, r3
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fc fc85 	bl	800047c <__aeabi_i2d>
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	4b41      	ldr	r3, [pc, #260]	; (8003c7c <buttonLogic+0x2b0>)
 8003b78:	f7fc fe14 	bl	80007a4 <__aeabi_ddiv>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4610      	mov	r0, r2
 8003b82:	4619      	mov	r1, r3
 8003b84:	f7fc ff94 	bl	8000ab0 <__aeabi_d2iz>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	b21a      	sxth	r2, r3
 8003b8c:	4b3c      	ldr	r3, [pc, #240]	; (8003c80 <buttonLogic+0x2b4>)
 8003b8e:	809a      	strh	r2, [r3, #4]
				 trayPickY.pos3 = mmActPos;
 8003b90:	4b3c      	ldr	r3, [pc, #240]	; (8003c84 <buttonLogic+0x2b8>)
 8003b92:	edd3 7a00 	vldr	s15, [r3]
 8003b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b9a:	ee17 3a90 	vmov	r3, s15
 8003b9e:	b21a      	sxth	r2, r3
 8003ba0:	4b39      	ldr	r3, [pc, #228]	; (8003c88 <buttonLogic+0x2bc>)
 8003ba2:	809a      	strh	r2, [r3, #4]
				calibrateTrayInput = 1;
 8003ba4:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <buttonLogic+0x2c0>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	701a      	strb	r2, [r3, #0]
				calibrateTray(trayPickX, trayPickY, objPickPos);
 8003baa:	4b37      	ldr	r3, [pc, #220]	; (8003c88 <buttonLogic+0x2bc>)
 8003bac:	4a34      	ldr	r2, [pc, #208]	; (8003c80 <buttonLogic+0x2b4>)
 8003bae:	4938      	ldr	r1, [pc, #224]	; (8003c90 <buttonLogic+0x2c4>)
 8003bb0:	9102      	str	r1, [sp, #8]
 8003bb2:	466c      	mov	r4, sp
 8003bb4:	1d19      	adds	r1, r3, #4
 8003bb6:	c903      	ldmia	r1, {r0, r1}
 8003bb8:	e884 0003 	stmia.w	r4, {r0, r1}
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bc0:	f7ff fbf6 	bl	80033b0 <calibrateTray>
 8003bc4:	e0a2      	b.n	8003d0c <buttonLogic+0x340>
			} else if (countRightB == 5) {
 8003bc6:	4b2b      	ldr	r3, [pc, #172]	; (8003c74 <buttonLogic+0x2a8>)
 8003bc8:	f993 3000 	ldrsb.w	r3, [r3]
 8003bcc:	2b05      	cmp	r3, #5
 8003bce:	d120      	bne.n	8003c12 <buttonLogic+0x246>
				trayPlaceX.pos1 = ((int16_t)registerFrame[68].U16 / 10.0); // READ : x-axis Actual Position
 8003bd0:	4b29      	ldr	r3, [pc, #164]	; (8003c78 <buttonLogic+0x2ac>)
 8003bd2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003bd6:	b21b      	sxth	r3, r3
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fc fc4f 	bl	800047c <__aeabi_i2d>
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <buttonLogic+0x2b0>)
 8003be4:	f7fc fdde 	bl	80007a4 <__aeabi_ddiv>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	f7fc ff5e 	bl	8000ab0 <__aeabi_d2iz>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	4b26      	ldr	r3, [pc, #152]	; (8003c94 <buttonLogic+0x2c8>)
 8003bfa:	801a      	strh	r2, [r3, #0]
				trayPlaceY.pos1 = mmActPos;
 8003bfc:	4b21      	ldr	r3, [pc, #132]	; (8003c84 <buttonLogic+0x2b8>)
 8003bfe:	edd3 7a00 	vldr	s15, [r3]
 8003c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c06:	ee17 3a90 	vmov	r3, s15
 8003c0a:	b21a      	sxth	r2, r3
 8003c0c:	4b22      	ldr	r3, [pc, #136]	; (8003c98 <buttonLogic+0x2cc>)
 8003c0e:	801a      	strh	r2, [r3, #0]
 8003c10:	e07c      	b.n	8003d0c <buttonLogic+0x340>
			} else if (countRightB == 6) {
 8003c12:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <buttonLogic+0x2a8>)
 8003c14:	f993 3000 	ldrsb.w	r3, [r3]
 8003c18:	2b06      	cmp	r3, #6
 8003c1a:	d13f      	bne.n	8003c9c <buttonLogic+0x2d0>
				trayPlaceX.pos2 = ((int16_t)registerFrame[68].U16 / 10.0); // READ : x-axis Actual Position
 8003c1c:	4b16      	ldr	r3, [pc, #88]	; (8003c78 <buttonLogic+0x2ac>)
 8003c1e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003c22:	b21b      	sxth	r3, r3
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fc fc29 	bl	800047c <__aeabi_i2d>
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <buttonLogic+0x2b0>)
 8003c30:	f7fc fdb8 	bl	80007a4 <__aeabi_ddiv>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f7fc ff38 	bl	8000ab0 <__aeabi_d2iz>
 8003c40:	4603      	mov	r3, r0
 8003c42:	b21a      	sxth	r2, r3
 8003c44:	4b13      	ldr	r3, [pc, #76]	; (8003c94 <buttonLogic+0x2c8>)
 8003c46:	805a      	strh	r2, [r3, #2]
				trayPlaceY.pos2 = mmActPos;
 8003c48:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <buttonLogic+0x2b8>)
 8003c4a:	edd3 7a00 	vldr	s15, [r3]
 8003c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c52:	ee17 3a90 	vmov	r3, s15
 8003c56:	b21a      	sxth	r2, r3
 8003c58:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <buttonLogic+0x2cc>)
 8003c5a:	805a      	strh	r2, [r3, #2]
 8003c5c:	e056      	b.n	8003d0c <buttonLogic+0x340>
 8003c5e:	bf00      	nop
 8003c60:	20000e05 	.word	0x20000e05
 8003c64:	20000229 	.word	0x20000229
 8003c68:	20000228 	.word	0x20000228
 8003c6c:	2000026e 	.word	0x2000026e
 8003c70:	20000e08 	.word	0x20000e08
 8003c74:	20000e06 	.word	0x20000e06
 8003c78:	20000d48 	.word	0x20000d48
 8003c7c:	40240000 	.word	0x40240000
 8003c80:	20000ecc 	.word	0x20000ecc
 8003c84:	20000e1c 	.word	0x20000e1c
 8003c88:	20000ed8 	.word	0x20000ed8
 8003c8c:	20000e34 	.word	0x20000e34
 8003c90:	20000e3c 	.word	0x20000e3c
 8003c94:	20000ee4 	.word	0x20000ee4
 8003c98:	20000ef0 	.word	0x20000ef0
			} else if (countRightB == 7) {
 8003c9c:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <buttonLogic+0x368>)
 8003c9e:	f993 3000 	ldrsb.w	r3, [r3]
 8003ca2:	2b07      	cmp	r3, #7
 8003ca4:	d132      	bne.n	8003d0c <buttonLogic+0x340>
				registerFrame[16].U16 = 0;
 8003ca6:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <buttonLogic+0x36c>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	841a      	strh	r2, [r3, #32]
				trayPlaceX.pos3 = ((int16_t)registerFrame[68].U16 / 10.0); // READ : x-axis Actual Position
 8003cac:	4b22      	ldr	r3, [pc, #136]	; (8003d38 <buttonLogic+0x36c>)
 8003cae:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003cb2:	b21b      	sxth	r3, r3
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fc fbe1 	bl	800047c <__aeabi_i2d>
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	4b1f      	ldr	r3, [pc, #124]	; (8003d3c <buttonLogic+0x370>)
 8003cc0:	f7fc fd70 	bl	80007a4 <__aeabi_ddiv>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f7fc fef0 	bl	8000ab0 <__aeabi_d2iz>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	b21a      	sxth	r2, r3
 8003cd4:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <buttonLogic+0x374>)
 8003cd6:	809a      	strh	r2, [r3, #4]
				 trayPlaceY.pos3 = mmActPos;
 8003cd8:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <buttonLogic+0x378>)
 8003cda:	edd3 7a00 	vldr	s15, [r3]
 8003cde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ce2:	ee17 3a90 	vmov	r3, s15
 8003ce6:	b21a      	sxth	r2, r3
 8003ce8:	4b17      	ldr	r3, [pc, #92]	; (8003d48 <buttonLogic+0x37c>)
 8003cea:	809a      	strh	r2, [r3, #4]
				calibrateTrayInput = 2;
 8003cec:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <buttonLogic+0x380>)
 8003cee:	2202      	movs	r2, #2
 8003cf0:	701a      	strb	r2, [r3, #0]
				calibrateTray(trayPlaceX, trayPlaceY, objPlacePos);
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <buttonLogic+0x37c>)
 8003cf4:	4a12      	ldr	r2, [pc, #72]	; (8003d40 <buttonLogic+0x374>)
 8003cf6:	4916      	ldr	r1, [pc, #88]	; (8003d50 <buttonLogic+0x384>)
 8003cf8:	9102      	str	r1, [sp, #8]
 8003cfa:	466c      	mov	r4, sp
 8003cfc:	1d19      	adds	r1, r3, #4
 8003cfe:	c903      	ldmia	r1, {r0, r1}
 8003d00:	e884 0003 	stmia.w	r4, {r0, r1}
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d08:	f7ff fb52 	bl	80033b0 <calibrateTray>
			}
			joyLogic = 0;
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <buttonLogic+0x388>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
			break;
 8003d12:	e00b      	b.n	8003d2c <buttonLogic+0x360>
		case 2: // OPEN LASER
			joyLogic = 0;
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <buttonLogic+0x388>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]

			break;
 8003d1a:	e007      	b.n	8003d2c <buttonLogic+0x360>
		case 3: //  DELETE
			countRightB = 0;
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <buttonLogic+0x368>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	701a      	strb	r2, [r3, #0]
			joyLogic = 0;
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <buttonLogic+0x388>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]
			break;
 8003d28:	e000      	b.n	8003d2c <buttonLogic+0x360>
		}
	}
 8003d2a:	bf00      	nop

}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd90      	pop	{r4, r7, pc}
 8003d34:	20000e06 	.word	0x20000e06
 8003d38:	20000d48 	.word	0x20000d48
 8003d3c:	40240000 	.word	0x40240000
 8003d40:	20000ee4 	.word	0x20000ee4
 8003d44:	20000e1c 	.word	0x20000e1c
 8003d48:	20000ef0 	.word	0x20000ef0
 8003d4c:	20000e34 	.word	0x20000e34
 8003d50:	20000e84 	.word	0x20000e84
 8003d54:	20000e08 	.word	0x20000e08

08003d58 <joyDisplayLED>:

void joyDisplayLED() {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
	if (joyLogicLED == 1) {
 8003d5c:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <joyDisplayLED+0x88>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d10c      	bne.n	8003d7e <joyDisplayLED+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8003d64:	2201      	movs	r2, #1
 8003d66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d6a:	481e      	ldr	r0, [pc, #120]	; (8003de4 <joyDisplayLED+0x8c>)
 8003d6c:	f002 f95a 	bl	8006024 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8003d70:	2200      	movs	r2, #0
 8003d72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d76:	481b      	ldr	r0, [pc, #108]	; (8003de4 <joyDisplayLED+0x8c>)
 8003d78:	f002 f954 	bl	8006024 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
	} else if (joyLogicLED == 4) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
	}
}
 8003d7c:	e02e      	b.n	8003ddc <joyDisplayLED+0x84>
	} else if (joyLogicLED == 2) {
 8003d7e:	4b18      	ldr	r3, [pc, #96]	; (8003de0 <joyDisplayLED+0x88>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d10c      	bne.n	8003da0 <joyDisplayLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8003d86:	2200      	movs	r2, #0
 8003d88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d8c:	4815      	ldr	r0, [pc, #84]	; (8003de4 <joyDisplayLED+0x8c>)
 8003d8e:	f002 f949 	bl	8006024 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8003d92:	2201      	movs	r2, #1
 8003d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d98:	4812      	ldr	r0, [pc, #72]	; (8003de4 <joyDisplayLED+0x8c>)
 8003d9a:	f002 f943 	bl	8006024 <HAL_GPIO_WritePin>
}
 8003d9e:	e01d      	b.n	8003ddc <joyDisplayLED+0x84>
	} else if (joyLogicLED == 3) {
 8003da0:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <joyDisplayLED+0x88>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d10b      	bne.n	8003dc0 <joyDisplayLED+0x68>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8003da8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003dac:	480d      	ldr	r0, [pc, #52]	; (8003de4 <joyDisplayLED+0x8c>)
 8003dae:	f002 f952 	bl	8006056 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8003db2:	2201      	movs	r2, #1
 8003db4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003db8:	480a      	ldr	r0, [pc, #40]	; (8003de4 <joyDisplayLED+0x8c>)
 8003dba:	f002 f933 	bl	8006024 <HAL_GPIO_WritePin>
}
 8003dbe:	e00d      	b.n	8003ddc <joyDisplayLED+0x84>
	} else if (joyLogicLED == 4) {
 8003dc0:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <joyDisplayLED+0x88>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d109      	bne.n	8003ddc <joyDisplayLED+0x84>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8003dc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003dcc:	4805      	ldr	r0, [pc, #20]	; (8003de4 <joyDisplayLED+0x8c>)
 8003dce:	f002 f942 	bl	8006056 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 8003dd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dd6:	4803      	ldr	r0, [pc, #12]	; (8003de4 <joyDisplayLED+0x8c>)
 8003dd8:	f002 f93d 	bl	8006056 <HAL_GPIO_TogglePin>
}
 8003ddc:	bf00      	nop
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000229 	.word	0x20000229
 8003de4:	40020800 	.word	0x40020800

08003de8 <robotArmState>:

void robotArmState(uint16_t state) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	80fb      	strh	r3, [r7, #6]

	switch (state) {
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	2b0f      	cmp	r3, #15
 8003df8:	f200 80cb 	bhi.w	8003f92 <robotArmState+0x1aa>
 8003dfc:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <robotArmState+0x1c>)
 8003dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e02:	bf00      	nop
 8003e04:	08003e45 	.word	0x08003e45
 8003e08:	08003e7d 	.word	0x08003e7d
 8003e0c:	08003f93 	.word	0x08003f93
 8003e10:	08003eb5 	.word	0x08003eb5
 8003e14:	08003f93 	.word	0x08003f93
 8003e18:	08003f93 	.word	0x08003f93
 8003e1c:	08003f93 	.word	0x08003f93
 8003e20:	08003eef 	.word	0x08003eef
 8003e24:	08003f93 	.word	0x08003f93
 8003e28:	08003f93 	.word	0x08003f93
 8003e2c:	08003f93 	.word	0x08003f93
 8003e30:	08003f93 	.word	0x08003f93
 8003e34:	08003f93 	.word	0x08003f93
 8003e38:	08003f93 	.word	0x08003f93
 8003e3c:	08003f93 	.word	0x08003f93
 8003e40:	08003f15 	.word	0x08003f15
	case 0b0000000000000001: // SET PICK TRAY
		registerFrame[16].U16 = 0b0000000000000001; // Jog Pick : y-axis Moving Status
 8003e44:	4b58      	ldr	r3, [pc, #352]	; (8003fa8 <robotArmState+0x1c0>)
 8003e46:	2201      	movs	r2, #1
 8003e48:	841a      	strh	r2, [r3, #32]

		joyStart = 1;
 8003e4a:	4b58      	ldr	r3, [pc, #352]	; (8003fac <robotArmState+0x1c4>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	701a      	strb	r2, [r3, #0]
		registerFrame[66].U16 = 300; // SET : x-axis Target Speed
 8003e50:	4b55      	ldr	r3, [pc, #340]	; (8003fa8 <robotArmState+0x1c0>)
 8003e52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e56:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		registerFrame[67].U16 = 3; // SET : x-axis Target Speed
 8003e5a:	4b53      	ldr	r3, [pc, #332]	; (8003fa8 <robotArmState+0x1c0>)
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		pilotLamp(0, 0); // OFF : PILOT LAMP LEFT
 8003e62:	2100      	movs	r1, #0
 8003e64:	2000      	movs	r0, #0
 8003e66:	f000 f90b 	bl	8004080 <pilotLamp>
		pilotLamp(1, 1); // ON : PILOT LAMP CENTER
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f000 f907 	bl	8004080 <pilotLamp>
		pilotLamp(2, 0); // OFF : PILOT LAMP RIGHT
 8003e72:	2100      	movs	r1, #0
 8003e74:	2002      	movs	r0, #2
 8003e76:	f000 f903 	bl	8004080 <pilotLamp>

		break;
 8003e7a:	e08a      	b.n	8003f92 <robotArmState+0x1aa>
	case 0b0000000000000010: // SET PLACE TRAY
		registerFrame[16].U16 = 0b0000000000000010; // Jog Place : y-axis Moving Status
 8003e7c:	4b4a      	ldr	r3, [pc, #296]	; (8003fa8 <robotArmState+0x1c0>)
 8003e7e:	2202      	movs	r2, #2
 8003e80:	841a      	strh	r2, [r3, #32]

		joyStart = 1;
 8003e82:	4b4a      	ldr	r3, [pc, #296]	; (8003fac <robotArmState+0x1c4>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	701a      	strb	r2, [r3, #0]
		registerFrame[66].U16 = 300; // SET : x-axis Target Speed
 8003e88:	4b47      	ldr	r3, [pc, #284]	; (8003fa8 <robotArmState+0x1c0>)
 8003e8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e8e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		registerFrame[67].U16 = 3; // SET : x-axis Target Speed
 8003e92:	4b45      	ldr	r3, [pc, #276]	; (8003fa8 <robotArmState+0x1c0>)
 8003e94:	2203      	movs	r2, #3
 8003e96:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		pilotLamp(0, 0); // OFF : PILOT LAMP LEFT
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	f000 f8ef 	bl	8004080 <pilotLamp>
		pilotLamp(1, 1); // ON : PILOT LAMP CENTER
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	f000 f8eb 	bl	8004080 <pilotLamp>
		pilotLamp(2, 0);  // OFF : PILOT LAMP RIGHT
 8003eaa:	2100      	movs	r1, #0
 8003eac:	2002      	movs	r0, #2
 8003eae:	f000 f8e7 	bl	8004080 <pilotLamp>

		break;
 8003eb2:	e06e      	b.n	8003f92 <robotArmState+0x1aa>
	case 0b0000000000000100: // HOME
		joyStart = 0;
 8003eb4:	4b3d      	ldr	r3, [pc, #244]	; (8003fac <robotArmState+0x1c4>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
		registerFrame[16].U16 = 0b0000000000000100; // HOME : y-axis Moving Status
 8003eba:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <robotArmState+0x1c0>)
 8003ebc:	2204      	movs	r2, #4
 8003ebe:	841a      	strh	r2, [r3, #32]
		registerFrame[64].U16 = 0b0000000000000001; // HOME : x-axis Moving Status
 8003ec0:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <robotArmState+0x1c0>)
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		registerFrame[1].U16 = 0; // RESET : Base System Status
 8003ec8:	4b37      	ldr	r3, [pc, #220]	; (8003fa8 <robotArmState+0x1c0>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	805a      	strh	r2, [r3, #2]

		startSetHome = 1; // START HOME -> Function
 8003ece:	4b38      	ldr	r3, [pc, #224]	; (8003fb0 <robotArmState+0x1c8>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]

		pilotLamp(0, 1); // ON : PILOT LAMP LEFT
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	f000 f8d2 	bl	8004080 <pilotLamp>
		pilotLamp(1, 0); // OFF : PILOT LAMP CENTER
 8003edc:	2100      	movs	r1, #0
 8003ede:	2001      	movs	r0, #1
 8003ee0:	f000 f8ce 	bl	8004080 <pilotLamp>
		pilotLamp(2, 0); // OFF : PILOT LAMP RIGHT
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	2002      	movs	r0, #2
 8003ee8:	f000 f8ca 	bl	8004080 <pilotLamp>

		break;
 8003eec:	e051      	b.n	8003f92 <robotArmState+0x1aa>
	case 0b0000000000001000: // RUN TRAY MODE 18 PATH
		joyStart = 0;
 8003eee:	4b2f      	ldr	r3, [pc, #188]	; (8003fac <robotArmState+0x1c4>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]

		startRunTray = 1; // START RUN TRAY -> Function
 8003ef4:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <robotArmState+0x1cc>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	701a      	strb	r2, [r3, #0]

		pilotLamp(0, 0); // OFF : PILOT LAMP LEFT
 8003efa:	2100      	movs	r1, #0
 8003efc:	2000      	movs	r0, #0
 8003efe:	f000 f8bf 	bl	8004080 <pilotLamp>
		pilotLamp(1, 0); // OFF : PILOT LAMP CENTER
 8003f02:	2100      	movs	r1, #0
 8003f04:	2001      	movs	r0, #1
 8003f06:	f000 f8bb 	bl	8004080 <pilotLamp>
		pilotLamp(2, 1); // ON : PILOT LAMP RIGHT
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	2002      	movs	r0, #2
 8003f0e:	f000 f8b7 	bl	8004080 <pilotLamp>
		break;
 8003f12:	e03e      	b.n	8003f92 <robotArmState+0x1aa>
	case 0b0000000000010000: // RUN POINT MODE
		joyStart = 0;
 8003f14:	4b25      	ldr	r3, [pc, #148]	; (8003fac <robotArmState+0x1c4>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]

		pilotLamp(0, 0); // OFF : PILOT LAMP LEFT
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f000 f8af 	bl	8004080 <pilotLamp>
		pilotLamp(1, 0); // OFF : PILOT LAMP CENTER
 8003f22:	2100      	movs	r1, #0
 8003f24:	2001      	movs	r0, #1
 8003f26:	f000 f8ab 	bl	8004080 <pilotLamp>
		pilotLamp(2, 1); // ON : PILOT LAMP RIGHT
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	2002      	movs	r0, #2
 8003f2e:	f000 f8a7 	bl	8004080 <pilotLamp>

		// X-Axis
		registerFrame[64].U16 = 0b0000000000000010; // RUN : x-axis Moving Status
 8003f32:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <robotArmState+0x1c0>)
 8003f34:	2202      	movs	r2, #2
 8003f36:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		registerFrame[65].U16 = registerFrame[48].U16; // SET : x-axis Target Position = Read : Goal Point x
 8003f3a:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <robotArmState+0x1c0>)
 8003f3c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8003f40:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <robotArmState+0x1c0>)
 8003f42:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		registerFrame[66].U16 = 3000; // SET : x-axis Target Speed
 8003f46:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <robotArmState+0x1c0>)
 8003f48:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003f4c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		registerFrame[67].U16 = 1; // SET : x-axis Target Speed
 8003f50:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <robotArmState+0x1c0>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

		// Y-Axis
		startPointModeY = 1; // START POINT MODE -> OnlyPositionControl Function
 8003f58:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <robotArmState+0x1d0>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]
		initPosY = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 8003f5e:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <robotArmState+0x1d4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fc fa8a 	bl	800047c <__aeabi_i2d>
 8003f68:	a30d      	add	r3, pc, #52	; (adr r3, 8003fa0 <robotArmState+0x1b8>)
 8003f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6e:	f7fc faef 	bl	8000550 <__aeabi_dmul>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4610      	mov	r0, r2
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f7fc fd99 	bl	8000ab0 <__aeabi_d2iz>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4a0f      	ldr	r2, [pc, #60]	; (8003fc0 <robotArmState+0x1d8>)
 8003f82:	6013      	str	r3, [r2, #0]

		registerFrame[16].U16 = 0b0000000000100000; // Go Point : y-axis Moving Status
 8003f84:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <robotArmState+0x1c0>)
 8003f86:	2220      	movs	r2, #32
 8003f88:	841a      	strh	r2, [r3, #32]

		registerFrame[1].U16 = 0; // RESET: Base System Status
 8003f8a:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <robotArmState+0x1c0>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	805a      	strh	r2, [r3, #2]

		break;
 8003f90:	bf00      	nop
	}
}
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	f3af 8000 	nop.w
 8003fa0:	464f6faa 	.word	0x464f6faa
 8003fa4:	3f8199cb 	.word	0x3f8199cb
 8003fa8:	20000d48 	.word	0x20000d48
 8003fac:	20000f1f 	.word	0x20000f1f
 8003fb0:	20000264 	.word	0x20000264
 8003fb4:	20000f1b 	.word	0x20000f1b
 8003fb8:	20000f09 	.word	0x20000f09
 8003fbc:	20000e14 	.word	0x20000e14
 8003fc0:	20000f0c 	.word	0x20000f0c

08003fc4 <jogAxisX>:

void jogAxisX() {
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
	refXPos = buffer[0].subdata.xAxis;
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <jogAxisX+0x70>)
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	ee07 3a90 	vmov	s15, r3
 8003fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd4:	4b18      	ldr	r3, [pc, #96]	; (8004038 <jogAxisX+0x74>)
 8003fd6:	edc3 7a00 	vstr	s15, [r3]
	if (refXPos > 2500) {
 8003fda:	4b17      	ldr	r3, [pc, #92]	; (8004038 <jogAxisX+0x74>)
 8003fdc:	edd3 7a00 	vldr	s15, [r3]
 8003fe0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800403c <jogAxisX+0x78>
 8003fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fec:	dd07      	ble.n	8003ffe <jogAxisX+0x3a>
		dirAxisX = 1;
 8003fee:	4b14      	ldr	r3, [pc, #80]	; (8004040 <jogAxisX+0x7c>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	701a      	strb	r2, [r3, #0]
		registerFrame[64].U16 = 0b0000000000000100; // JOG RIGHT : x-axis Moving Status
 8003ff4:	4b13      	ldr	r3, [pc, #76]	; (8004044 <jogAxisX+0x80>)
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	} else {
		registerFrame[64].U16 = 0; // RESET : x-axis Moving Status

	}

}
 8003ffc:	e015      	b.n	800402a <jogAxisX+0x66>
	} else if (refXPos < 1500) {
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <jogAxisX+0x74>)
 8004000:	edd3 7a00 	vldr	s15, [r3]
 8004004:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004048 <jogAxisX+0x84>
 8004008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800400c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004010:	d507      	bpl.n	8004022 <jogAxisX+0x5e>
		dirAxisX = 0;
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <jogAxisX+0x7c>)
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
		registerFrame[64].U16 = 0b0000000000001000; // JOG LEFT : x-axis Moving Status
 8004018:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <jogAxisX+0x80>)
 800401a:	2208      	movs	r2, #8
 800401c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8004020:	e003      	b.n	800402a <jogAxisX+0x66>
		registerFrame[64].U16 = 0; // RESET : x-axis Moving Status
 8004022:	4b08      	ldr	r3, [pc, #32]	; (8004044 <jogAxisX+0x80>)
 8004024:	2200      	movs	r2, #0
 8004026:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 800402a:	bf00      	nop
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	20000ddc 	.word	0x20000ddc
 8004038:	20000220 	.word	0x20000220
 800403c:	451c4000 	.word	0x451c4000
 8004040:	20000245 	.word	0x20000245
 8004044:	20000d48 	.word	0x20000d48
 8004048:	44bb8000 	.word	0x44bb8000

0800404c <handleEmergency>:

void HAL_ADC_ConvCallback(ADC_HandleTypeDef *hadc) {

}

void handleEmergency() {
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == 0) {
 8004050:	2120      	movs	r1, #32
 8004052:	480a      	ldr	r0, [pc, #40]	; (800407c <handleEmergency+0x30>)
 8004054:	f001 ffce 	bl	8005ff4 <HAL_GPIO_ReadPin>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <handleEmergency+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 800405e:	2201      	movs	r2, #1
 8004060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004064:	4805      	ldr	r0, [pc, #20]	; (800407c <handleEmergency+0x30>)
 8004066:	f001 ffdd 	bl	8006024 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
	}
}
 800406a:	e005      	b.n	8004078 <handleEmergency+0x2c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 800406c:	2200      	movs	r2, #0
 800406e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004072:	4802      	ldr	r0, [pc, #8]	; (800407c <handleEmergency+0x30>)
 8004074:	f001 ffd6 	bl	8006024 <HAL_GPIO_WritePin>
}
 8004078:	bf00      	nop
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40020800 	.word	0x40020800

08004080 <pilotLamp>:
void pilotLamp(uint8_t id, uint8_t status) {
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	460a      	mov	r2, r1
 800408a:	71fb      	strb	r3, [r7, #7]
 800408c:	4613      	mov	r3, r2
 800408e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(pilotLampPin[id].PORT, pilotLampPin[id].PIN, status);
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	4a08      	ldr	r2, [pc, #32]	; (80040b4 <pilotLamp+0x34>)
 8004094:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	4a06      	ldr	r2, [pc, #24]	; (80040b4 <pilotLamp+0x34>)
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4413      	add	r3, r2
 80040a0:	889b      	ldrh	r3, [r3, #4]
 80040a2:	79ba      	ldrb	r2, [r7, #6]
 80040a4:	4619      	mov	r1, r3
 80040a6:	f001 ffbd 	bl	8006024 <HAL_GPIO_WritePin>

}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	2000022c 	.word	0x2000022c

080040b8 <endEffectorControl>:

void endEffectorControl(uint8_t mode, uint8_t status) {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af04      	add	r7, sp, #16
 80040be:	4603      	mov	r3, r0
 80040c0:	460a      	mov	r2, r1
 80040c2:	71fb      	strb	r3, [r7, #7]
 80040c4:	4613      	mov	r3, r2
 80040c6:	71bb      	strb	r3, [r7, #6]
	switch (mode) {
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	2b05      	cmp	r3, #5
 80040cc:	f200 80ad 	bhi.w	800422a <endEffectorControl+0x172>
 80040d0:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <endEffectorControl+0x20>)
 80040d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d6:	bf00      	nop
 80040d8:	080040f1 	.word	0x080040f1
 80040dc:	0800412b 	.word	0x0800412b
 80040e0:	08004171 	.word	0x08004171
 80040e4:	0800419b 	.word	0x0800419b
 80040e8:	080041c5 	.word	0x080041c5
 80040ec:	080041f7 	.word	0x080041f7
	case 0: // LED ON-Off
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 80040f0:	4b50      	ldr	r3, [pc, #320]	; (8004234 <endEffectorControl+0x17c>)
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	f040 808b 	bne.w	8004214 <endEffectorControl+0x15c>
			x[2] += 1;
 80040fe:	4b4e      	ldr	r3, [pc, #312]	; (8004238 <endEffectorControl+0x180>)
 8004100:	789b      	ldrb	r3, [r3, #2]
 8004102:	3301      	adds	r3, #1
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4b4c      	ldr	r3, [pc, #304]	; (8004238 <endEffectorControl+0x180>)
 8004108:	709a      	strb	r2, [r3, #2]
			static uint8_t data[2][2] = { { 0x00 }, { 0x01 } };
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x01,
			I2C_MEMADD_SIZE_8BIT, data[status], 1, 100);
 800410a:	79bb      	ldrb	r3, [r7, #6]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	4a4b      	ldr	r2, [pc, #300]	; (800423c <endEffectorControl+0x184>)
 8004110:	4413      	add	r3, r2
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x01,
 8004112:	2264      	movs	r2, #100	; 0x64
 8004114:	9202      	str	r2, [sp, #8]
 8004116:	2201      	movs	r2, #1
 8004118:	9201      	str	r2, [sp, #4]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	2301      	movs	r3, #1
 800411e:	2201      	movs	r2, #1
 8004120:	212a      	movs	r1, #42	; 0x2a
 8004122:	4844      	ldr	r0, [pc, #272]	; (8004234 <endEffectorControl+0x17c>)
 8004124:	f002 fb1c 	bl	8006760 <HAL_I2C_Mem_Write>
//			HAL_I2C_Master_Transmit(&hi2c2, endEffector_ADDR << 1, data[status],
//					2, 100);
		}
		break;
 8004128:	e074      	b.n	8004214 <endEffectorControl+0x15c>

	case 1: //  Emergency Mode
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 800412a:	4b42      	ldr	r3, [pc, #264]	; (8004234 <endEffectorControl+0x17c>)
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b20      	cmp	r3, #32
 8004134:	d170      	bne.n	8004218 <endEffectorControl+0x160>
			if (status == 1) {
 8004136:	79bb      	ldrb	r3, [r7, #6]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d10c      	bne.n	8004156 <endEffectorControl+0x9e>
				static uint8_t data[3] = { 0x7A, 0xFF, 0x81 };
				HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0xE5,
 800413c:	2364      	movs	r3, #100	; 0x64
 800413e:	9302      	str	r3, [sp, #8]
 8004140:	2303      	movs	r3, #3
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	4b3e      	ldr	r3, [pc, #248]	; (8004240 <endEffectorControl+0x188>)
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2301      	movs	r3, #1
 800414a:	22e5      	movs	r2, #229	; 0xe5
 800414c:	212a      	movs	r1, #42	; 0x2a
 800414e:	4839      	ldr	r0, [pc, #228]	; (8004234 <endEffectorControl+0x17c>)
 8004150:	f002 fb06 	bl	8006760 <HAL_I2C_Mem_Write>
				static uint8_t data[1] = { 0xF0 };
				HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0xF0,
				I2C_MEMADD_SIZE_8BIT, data, 0, 100);
			}
		}
		break;
 8004154:	e060      	b.n	8004218 <endEffectorControl+0x160>
				HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0xF0,
 8004156:	2364      	movs	r3, #100	; 0x64
 8004158:	9302      	str	r3, [sp, #8]
 800415a:	2300      	movs	r3, #0
 800415c:	9301      	str	r3, [sp, #4]
 800415e:	4b39      	ldr	r3, [pc, #228]	; (8004244 <endEffectorControl+0x18c>)
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	2301      	movs	r3, #1
 8004164:	22f0      	movs	r2, #240	; 0xf0
 8004166:	212a      	movs	r1, #42	; 0x2a
 8004168:	4832      	ldr	r0, [pc, #200]	; (8004234 <endEffectorControl+0x17c>)
 800416a:	f002 faf9 	bl	8006760 <HAL_I2C_Mem_Write>
		break;
 800416e:	e053      	b.n	8004218 <endEffectorControl+0x160>

	case 2: // Gripper Working and Gripper Stops Working
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 8004170:	4b30      	ldr	r3, [pc, #192]	; (8004234 <endEffectorControl+0x17c>)
 8004172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b20      	cmp	r3, #32
 800417a:	d14f      	bne.n	800421c <endEffectorControl+0x164>
			static uint8_t data[2][1] = { { 0x8C }, { 0x13 } };
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x10,
			I2C_MEMADD_SIZE_8BIT, data[status], 1, 100);
 800417c:	79bb      	ldrb	r3, [r7, #6]
 800417e:	4a32      	ldr	r2, [pc, #200]	; (8004248 <endEffectorControl+0x190>)
 8004180:	4413      	add	r3, r2
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x10,
 8004182:	2264      	movs	r2, #100	; 0x64
 8004184:	9202      	str	r2, [sp, #8]
 8004186:	2201      	movs	r2, #1
 8004188:	9201      	str	r2, [sp, #4]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	2301      	movs	r3, #1
 800418e:	2210      	movs	r2, #16
 8004190:	212a      	movs	r1, #42	; 0x2a
 8004192:	4828      	ldr	r0, [pc, #160]	; (8004234 <endEffectorControl+0x17c>)
 8004194:	f002 fae4 	bl	8006760 <HAL_I2C_Mem_Write>
		}
		break;
 8004198:	e040      	b.n	800421c <endEffectorControl+0x164>

	case 3: // Gripper Pick Up and Gripper Place down
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 800419a:	4b26      	ldr	r3, [pc, #152]	; (8004234 <endEffectorControl+0x17c>)
 800419c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d13c      	bne.n	8004220 <endEffectorControl+0x168>
			static uint8_t data[2][1] = { { 0x69 }, { 0x5A } };
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x10,
			I2C_MEMADD_SIZE_8BIT, data[status], 1, 100);
 80041a6:	79bb      	ldrb	r3, [r7, #6]
 80041a8:	4a28      	ldr	r2, [pc, #160]	; (800424c <endEffectorControl+0x194>)
 80041aa:	4413      	add	r3, r2
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x10,
 80041ac:	2264      	movs	r2, #100	; 0x64
 80041ae:	9202      	str	r2, [sp, #8]
 80041b0:	2201      	movs	r2, #1
 80041b2:	9201      	str	r2, [sp, #4]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	2301      	movs	r3, #1
 80041b8:	2210      	movs	r2, #16
 80041ba:	212a      	movs	r1, #42	; 0x2a
 80041bc:	481d      	ldr	r0, [pc, #116]	; (8004234 <endEffectorControl+0x17c>)
 80041be:	f002 facf 	bl	8006760 <HAL_I2C_Mem_Write>
		}
		break;
 80041c2:	e02d      	b.n	8004220 <endEffectorControl+0x168>

	case 4: // Soft reset
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 80041c4:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <endEffectorControl+0x17c>)
 80041c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d129      	bne.n	8004224 <endEffectorControl+0x16c>
			x[2] += 1;
 80041d0:	4b19      	ldr	r3, [pc, #100]	; (8004238 <endEffectorControl+0x180>)
 80041d2:	789b      	ldrb	r3, [r3, #2]
 80041d4:	3301      	adds	r3, #1
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	4b17      	ldr	r3, [pc, #92]	; (8004238 <endEffectorControl+0x180>)
 80041da:	709a      	strb	r2, [r3, #2]
			static uint8_t data[3] = { 0xFF, 0x55, 0xAA };
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x00,
 80041dc:	2364      	movs	r3, #100	; 0x64
 80041de:	9302      	str	r3, [sp, #8]
 80041e0:	2303      	movs	r3, #3
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <endEffectorControl+0x198>)
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	2301      	movs	r3, #1
 80041ea:	2200      	movs	r2, #0
 80041ec:	212a      	movs	r1, #42	; 0x2a
 80041ee:	4811      	ldr	r0, [pc, #68]	; (8004234 <endEffectorControl+0x17c>)
 80041f0:	f002 fab6 	bl	8006760 <HAL_I2C_Mem_Write>
			I2C_MEMADD_SIZE_8BIT, data, 3, 100);
		}
		break;
 80041f4:	e016      	b.n	8004224 <endEffectorControl+0x16c>

	case 5: // Current status
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 80041f6:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <endEffectorControl+0x17c>)
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d112      	bne.n	8004228 <endEffectorControl+0x170>
			HAL_I2C_Master_Receive(&hi2c2, endEffector_ADDR << 1, readStatus, 1,
 8004202:	2364      	movs	r3, #100	; 0x64
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	2301      	movs	r3, #1
 8004208:	4a12      	ldr	r2, [pc, #72]	; (8004254 <endEffectorControl+0x19c>)
 800420a:	212a      	movs	r1, #42	; 0x2a
 800420c:	4809      	ldr	r0, [pc, #36]	; (8004234 <endEffectorControl+0x17c>)
 800420e:	f002 f881 	bl	8006314 <HAL_I2C_Master_Receive>
					100);
		}
		break;
 8004212:	e009      	b.n	8004228 <endEffectorControl+0x170>
		break;
 8004214:	bf00      	nop
 8004216:	e008      	b.n	800422a <endEffectorControl+0x172>
		break;
 8004218:	bf00      	nop
 800421a:	e006      	b.n	800422a <endEffectorControl+0x172>
		break;
 800421c:	bf00      	nop
 800421e:	e004      	b.n	800422a <endEffectorControl+0x172>
		break;
 8004220:	bf00      	nop
 8004222:	e002      	b.n	800422a <endEffectorControl+0x172>
		break;
 8004224:	bf00      	nop
 8004226:	e000      	b.n	800422a <endEffectorControl+0x172>
		break;
 8004228:	bf00      	nop
	}
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	200003c4 	.word	0x200003c4
 8004238:	20000f24 	.word	0x20000f24
 800423c:	20000274 	.word	0x20000274
 8004240:	20000278 	.word	0x20000278
 8004244:	2000027c 	.word	0x2000027c
 8004248:	20000280 	.word	0x20000280
 800424c:	20000284 	.word	0x20000284
 8004250:	20000288 	.word	0x20000288
 8004254:	20000f10 	.word	0x20000f10

08004258 <endEffectorStatusControl>:

void endEffectorStatusControl(uint16_t regisFrame) // PUT REGISTOR
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	80fb      	strh	r3, [r7, #6]

	switch (regisFrame) {
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	2b0a      	cmp	r3, #10
 8004266:	d842      	bhi.n	80042ee <endEffectorStatusControl+0x96>
 8004268:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <endEffectorStatusControl+0x18>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	0800429d 	.word	0x0800429d
 8004274:	080042ab 	.word	0x080042ab
 8004278:	080042b9 	.word	0x080042b9
 800427c:	080042ef 	.word	0x080042ef
 8004280:	080042ef 	.word	0x080042ef
 8004284:	080042ef 	.word	0x080042ef
 8004288:	080042d3 	.word	0x080042d3
 800428c:	080042ef 	.word	0x080042ef
 8004290:	080042ef 	.word	0x080042ef
 8004294:	080042ef 	.word	0x080042ef
 8004298:	080042e1 	.word	0x080042e1
	case 0b0000000000000000: // LASER OFF
		//x[2]=0;
		//endEffectorControl(endEffector.gripperWork, 0);
		//HAL_Delay(10);
		endEffectorControl(endEffector.testMode, 0);
 800429c:	4b16      	ldr	r3, [pc, #88]	; (80042f8 <endEffectorStatusControl+0xa0>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2100      	movs	r1, #0
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff ff08 	bl	80040b8 <endEffectorControl>
		break;
 80042a8:	e021      	b.n	80042ee <endEffectorStatusControl+0x96>
	case 0b0000000000000001: // LASER ON
		//x[2]+=1;
		//endEffectorControl(endEffector.gripperWork, 0);
		//HAL_Delay(10);
		endEffectorControl(endEffector.testMode, 1);
 80042aa:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <endEffectorStatusControl+0xa0>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2101      	movs	r1, #1
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff ff01 	bl	80040b8 <endEffectorControl>
		break;
 80042b6:	e01a      	b.n	80042ee <endEffectorStatusControl+0x96>
	case 0b0000000000000010: // GRIPPER POWER

		endEffectorControl(endEffector.testMode, 0);
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <endEffectorStatusControl+0xa0>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2100      	movs	r1, #0
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff fefa 	bl	80040b8 <endEffectorControl>
		//HAL_Delay(10);
		endEffectorControl(endEffector.gripperWork, 1);
 80042c4:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <endEffectorStatusControl+0xa0>)
 80042c6:	789b      	ldrb	r3, [r3, #2]
 80042c8:	2101      	movs	r1, #1
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff fef4 	bl	80040b8 <endEffectorControl>
		break;
 80042d0:	e00d      	b.n	80042ee <endEffectorStatusControl+0x96>
	case 0b0000000000000110: // GRIPPER PICK

		endEffectorControl(endEffector.gripperPickAndPlace, 1); // 1 -> PICK
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <endEffectorStatusControl+0xa0>)
 80042d4:	78db      	ldrb	r3, [r3, #3]
 80042d6:	2101      	movs	r1, #1
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff feed 	bl	80040b8 <endEffectorControl>
		break;
 80042de:	e006      	b.n	80042ee <endEffectorStatusControl+0x96>
	case 0b0000000000001010: // GRIPPER PLACE
		endEffectorControl(endEffector.gripperPickAndPlace, 0); // 1 -> PLACE
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <endEffectorStatusControl+0xa0>)
 80042e2:	78db      	ldrb	r3, [r3, #3]
 80042e4:	2100      	movs	r1, #0
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fee6 	bl	80040b8 <endEffectorControl>
		break;
 80042ec:	bf00      	nop
	}

}
 80042ee:	bf00      	nop
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000268 	.word	0x20000268

080042fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004300:	b672      	cpsid	i
}
 8004302:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004304:	e7fe      	b.n	8004304 <Error_Handler+0x8>
	...

08004308 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	607b      	str	r3, [r7, #4]
 8004312:	4b10      	ldr	r3, [pc, #64]	; (8004354 <HAL_MspInit+0x4c>)
 8004314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004316:	4a0f      	ldr	r2, [pc, #60]	; (8004354 <HAL_MspInit+0x4c>)
 8004318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800431c:	6453      	str	r3, [r2, #68]	; 0x44
 800431e:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <HAL_MspInit+0x4c>)
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004326:	607b      	str	r3, [r7, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	603b      	str	r3, [r7, #0]
 800432e:	4b09      	ldr	r3, [pc, #36]	; (8004354 <HAL_MspInit+0x4c>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	4a08      	ldr	r2, [pc, #32]	; (8004354 <HAL_MspInit+0x4c>)
 8004334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004338:	6413      	str	r3, [r2, #64]	; 0x40
 800433a:	4b06      	ldr	r3, [pc, #24]	; (8004354 <HAL_MspInit+0x4c>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004346:	2007      	movs	r0, #7
 8004348:	f001 f872 	bl	8005430 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40023800 	.word	0x40023800

08004358 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08a      	sub	sp, #40	; 0x28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004360:	f107 0314 	add.w	r3, r7, #20
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	609a      	str	r2, [r3, #8]
 800436c:	60da      	str	r2, [r3, #12]
 800436e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a2f      	ldr	r2, [pc, #188]	; (8004434 <HAL_ADC_MspInit+0xdc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d157      	bne.n	800442a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800437a:	2300      	movs	r3, #0
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	4b2e      	ldr	r3, [pc, #184]	; (8004438 <HAL_ADC_MspInit+0xe0>)
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	4a2d      	ldr	r2, [pc, #180]	; (8004438 <HAL_ADC_MspInit+0xe0>)
 8004384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004388:	6453      	str	r3, [r2, #68]	; 0x44
 800438a:	4b2b      	ldr	r3, [pc, #172]	; (8004438 <HAL_ADC_MspInit+0xe0>)
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	4b27      	ldr	r3, [pc, #156]	; (8004438 <HAL_ADC_MspInit+0xe0>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	4a26      	ldr	r2, [pc, #152]	; (8004438 <HAL_ADC_MspInit+0xe0>)
 80043a0:	f043 0304 	orr.w	r3, r3, #4
 80043a4:	6313      	str	r3, [r2, #48]	; 0x30
 80043a6:	4b24      	ldr	r3, [pc, #144]	; (8004438 <HAL_ADC_MspInit+0xe0>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80043b2:	2309      	movs	r3, #9
 80043b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043b6:	2303      	movs	r3, #3
 80043b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043be:	f107 0314 	add.w	r3, r7, #20
 80043c2:	4619      	mov	r1, r3
 80043c4:	481d      	ldr	r0, [pc, #116]	; (800443c <HAL_ADC_MspInit+0xe4>)
 80043c6:	f001 fc91 	bl	8005cec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80043ca:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <HAL_ADC_MspInit+0xe8>)
 80043cc:	4a1d      	ldr	r2, [pc, #116]	; (8004444 <HAL_ADC_MspInit+0xec>)
 80043ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80043d0:	4b1b      	ldr	r3, [pc, #108]	; (8004440 <HAL_ADC_MspInit+0xe8>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043d6:	4b1a      	ldr	r3, [pc, #104]	; (8004440 <HAL_ADC_MspInit+0xe8>)
 80043d8:	2200      	movs	r2, #0
 80043da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80043dc:	4b18      	ldr	r3, [pc, #96]	; (8004440 <HAL_ADC_MspInit+0xe8>)
 80043de:	2200      	movs	r2, #0
 80043e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80043e2:	4b17      	ldr	r3, [pc, #92]	; (8004440 <HAL_ADC_MspInit+0xe8>)
 80043e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043ea:	4b15      	ldr	r3, [pc, #84]	; (8004440 <HAL_ADC_MspInit+0xe8>)
 80043ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043f2:	4b13      	ldr	r3, [pc, #76]	; (8004440 <HAL_ADC_MspInit+0xe8>)
 80043f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80043fa:	4b11      	ldr	r3, [pc, #68]	; (8004440 <HAL_ADC_MspInit+0xe8>)
 80043fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004400:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004402:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <HAL_ADC_MspInit+0xe8>)
 8004404:	2200      	movs	r2, #0
 8004406:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004408:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <HAL_ADC_MspInit+0xe8>)
 800440a:	2200      	movs	r2, #0
 800440c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800440e:	480c      	ldr	r0, [pc, #48]	; (8004440 <HAL_ADC_MspInit+0xe8>)
 8004410:	f001 f850 	bl	80054b4 <HAL_DMA_Init>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800441a:	f7ff ff6f 	bl	80042fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a07      	ldr	r2, [pc, #28]	; (8004440 <HAL_ADC_MspInit+0xe8>)
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
 8004424:	4a06      	ldr	r2, [pc, #24]	; (8004440 <HAL_ADC_MspInit+0xe8>)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800442a:	bf00      	nop
 800442c:	3728      	adds	r7, #40	; 0x28
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40012000 	.word	0x40012000
 8004438:	40023800 	.word	0x40023800
 800443c:	40020800 	.word	0x40020800
 8004440:	20000364 	.word	0x20000364
 8004444:	40026410 	.word	0x40026410

08004448 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	; 0x28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004450:	f107 0314 	add.w	r3, r7, #20
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	609a      	str	r2, [r3, #8]
 800445c:	60da      	str	r2, [r3, #12]
 800445e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a29      	ldr	r2, [pc, #164]	; (800450c <HAL_I2C_MspInit+0xc4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d14c      	bne.n	8004504 <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	4b28      	ldr	r3, [pc, #160]	; (8004510 <HAL_I2C_MspInit+0xc8>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	4a27      	ldr	r2, [pc, #156]	; (8004510 <HAL_I2C_MspInit+0xc8>)
 8004474:	f043 0302 	orr.w	r3, r3, #2
 8004478:	6313      	str	r3, [r2, #48]	; 0x30
 800447a:	4b25      	ldr	r3, [pc, #148]	; (8004510 <HAL_I2C_MspInit+0xc8>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800448a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800448c:	2312      	movs	r3, #18
 800448e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004490:	2300      	movs	r3, #0
 8004492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004494:	2303      	movs	r3, #3
 8004496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004498:	2304      	movs	r3, #4
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800449c:	f107 0314 	add.w	r3, r7, #20
 80044a0:	4619      	mov	r1, r3
 80044a2:	481c      	ldr	r0, [pc, #112]	; (8004514 <HAL_I2C_MspInit+0xcc>)
 80044a4:	f001 fc22 	bl	8005cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044a8:	2308      	movs	r3, #8
 80044aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044ac:	2312      	movs	r3, #18
 80044ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b4:	2303      	movs	r3, #3
 80044b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80044b8:	2309      	movs	r3, #9
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044bc:	f107 0314 	add.w	r3, r7, #20
 80044c0:	4619      	mov	r1, r3
 80044c2:	4814      	ldr	r0, [pc, #80]	; (8004514 <HAL_I2C_MspInit+0xcc>)
 80044c4:	f001 fc12 	bl	8005cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	4b10      	ldr	r3, [pc, #64]	; (8004510 <HAL_I2C_MspInit+0xc8>)
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	4a0f      	ldr	r2, [pc, #60]	; (8004510 <HAL_I2C_MspInit+0xc8>)
 80044d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044d6:	6413      	str	r3, [r2, #64]	; 0x40
 80044d8:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <HAL_I2C_MspInit+0xc8>)
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80044e4:	2200      	movs	r2, #0
 80044e6:	2100      	movs	r1, #0
 80044e8:	2021      	movs	r0, #33	; 0x21
 80044ea:	f000 ffac 	bl	8005446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80044ee:	2021      	movs	r0, #33	; 0x21
 80044f0:	f000 ffc5 	bl	800547e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80044f4:	2200      	movs	r2, #0
 80044f6:	2100      	movs	r1, #0
 80044f8:	2022      	movs	r0, #34	; 0x22
 80044fa:	f000 ffa4 	bl	8005446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80044fe:	2022      	movs	r0, #34	; 0x22
 8004500:	f000 ffbd 	bl	800547e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004504:	bf00      	nop
 8004506:	3728      	adds	r7, #40	; 0x28
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40005800 	.word	0x40005800
 8004510:	40023800 	.word	0x40023800
 8004514:	40020400 	.word	0x40020400

08004518 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a0e      	ldr	r2, [pc, #56]	; (8004560 <HAL_TIM_PWM_MspInit+0x48>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d115      	bne.n	8004556 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <HAL_TIM_PWM_MspInit+0x4c>)
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	4a0c      	ldr	r2, [pc, #48]	; (8004564 <HAL_TIM_PWM_MspInit+0x4c>)
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	6453      	str	r3, [r2, #68]	; 0x44
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <HAL_TIM_PWM_MspInit+0x4c>)
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004546:	2200      	movs	r2, #0
 8004548:	2100      	movs	r1, #0
 800454a:	201a      	movs	r0, #26
 800454c:	f000 ff7b 	bl	8005446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004550:	201a      	movs	r0, #26
 8004552:	f000 ff94 	bl	800547e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004556:	bf00      	nop
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40010000 	.word	0x40010000
 8004564:	40023800 	.word	0x40023800

08004568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004578:	d116      	bne.n	80045a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]
 800457e:	4b28      	ldr	r3, [pc, #160]	; (8004620 <HAL_TIM_Base_MspInit+0xb8>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	4a27      	ldr	r2, [pc, #156]	; (8004620 <HAL_TIM_Base_MspInit+0xb8>)
 8004584:	f043 0301 	orr.w	r3, r3, #1
 8004588:	6413      	str	r3, [r2, #64]	; 0x40
 800458a:	4b25      	ldr	r3, [pc, #148]	; (8004620 <HAL_TIM_Base_MspInit+0xb8>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004596:	2200      	movs	r2, #0
 8004598:	2100      	movs	r1, #0
 800459a:	201c      	movs	r0, #28
 800459c:	f000 ff53 	bl	8005446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80045a0:	201c      	movs	r0, #28
 80045a2:	f000 ff6c 	bl	800547e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80045a6:	e036      	b.n	8004616 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <HAL_TIM_Base_MspInit+0xbc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d116      	bne.n	80045e0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <HAL_TIM_Base_MspInit+0xb8>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	4a19      	ldr	r2, [pc, #100]	; (8004620 <HAL_TIM_Base_MspInit+0xb8>)
 80045bc:	f043 0302 	orr.w	r3, r3, #2
 80045c0:	6413      	str	r3, [r2, #64]	; 0x40
 80045c2:	4b17      	ldr	r3, [pc, #92]	; (8004620 <HAL_TIM_Base_MspInit+0xb8>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80045ce:	2200      	movs	r2, #0
 80045d0:	2100      	movs	r1, #0
 80045d2:	201d      	movs	r0, #29
 80045d4:	f000 ff37 	bl	8005446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80045d8:	201d      	movs	r0, #29
 80045da:	f000 ff50 	bl	800547e <HAL_NVIC_EnableIRQ>
}
 80045de:	e01a      	b.n	8004616 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a10      	ldr	r2, [pc, #64]	; (8004628 <HAL_TIM_Base_MspInit+0xc0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d115      	bne.n	8004616 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <HAL_TIM_Base_MspInit+0xb8>)
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	4a0b      	ldr	r2, [pc, #44]	; (8004620 <HAL_TIM_Base_MspInit+0xb8>)
 80045f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045f8:	6453      	str	r3, [r2, #68]	; 0x44
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <HAL_TIM_Base_MspInit+0xb8>)
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004606:	2200      	movs	r2, #0
 8004608:	2100      	movs	r1, #0
 800460a:	201a      	movs	r0, #26
 800460c:	f000 ff1b 	bl	8005446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004610:	201a      	movs	r0, #26
 8004612:	f000 ff34 	bl	800547e <HAL_NVIC_EnableIRQ>
}
 8004616:	bf00      	nop
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800
 8004624:	40000400 	.word	0x40000400
 8004628:	40014800 	.word	0x40014800

0800462c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	; 0x28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004634:	f107 0314 	add.w	r3, r7, #20
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	605a      	str	r2, [r3, #4]
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a19      	ldr	r2, [pc, #100]	; (80046b0 <HAL_TIM_Encoder_MspInit+0x84>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d12b      	bne.n	80046a6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	613b      	str	r3, [r7, #16]
 8004652:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	4a17      	ldr	r2, [pc, #92]	; (80046b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004658:	f043 0308 	orr.w	r3, r3, #8
 800465c:	6413      	str	r3, [r2, #64]	; 0x40
 800465e:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	4a10      	ldr	r2, [pc, #64]	; (80046b4 <HAL_TIM_Encoder_MspInit+0x88>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	6313      	str	r3, [r2, #48]	; 0x30
 800467a:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <HAL_TIM_Encoder_MspInit+0x88>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004686:	2303      	movs	r3, #3
 8004688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800468a:	2302      	movs	r3, #2
 800468c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800468e:	2301      	movs	r3, #1
 8004690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004692:	2300      	movs	r3, #0
 8004694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004696:	2302      	movs	r3, #2
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800469a:	f107 0314 	add.w	r3, r7, #20
 800469e:	4619      	mov	r1, r3
 80046a0:	4805      	ldr	r0, [pc, #20]	; (80046b8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80046a2:	f001 fb23 	bl	8005cec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80046a6:	bf00      	nop
 80046a8:	3728      	adds	r7, #40	; 0x28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40000c00 	.word	0x40000c00
 80046b4:	40023800 	.word	0x40023800
 80046b8:	40020000 	.word	0x40020000

080046bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c4:	f107 030c 	add.w	r3, r7, #12
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	605a      	str	r2, [r3, #4]
 80046ce:	609a      	str	r2, [r3, #8]
 80046d0:	60da      	str	r2, [r3, #12]
 80046d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a12      	ldr	r2, [pc, #72]	; (8004724 <HAL_TIM_MspPostInit+0x68>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d11e      	bne.n	800471c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	4b11      	ldr	r3, [pc, #68]	; (8004728 <HAL_TIM_MspPostInit+0x6c>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	4a10      	ldr	r2, [pc, #64]	; (8004728 <HAL_TIM_MspPostInit+0x6c>)
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	6313      	str	r3, [r2, #48]	; 0x30
 80046ee:	4b0e      	ldr	r3, [pc, #56]	; (8004728 <HAL_TIM_MspPostInit+0x6c>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	60bb      	str	r3, [r7, #8]
 80046f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80046fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004700:	2302      	movs	r3, #2
 8004702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004708:	2300      	movs	r3, #0
 800470a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800470c:	2301      	movs	r3, #1
 800470e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004710:	f107 030c 	add.w	r3, r7, #12
 8004714:	4619      	mov	r1, r3
 8004716:	4805      	ldr	r0, [pc, #20]	; (800472c <HAL_TIM_MspPostInit+0x70>)
 8004718:	f001 fae8 	bl	8005cec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800471c:	bf00      	nop
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40010000 	.word	0x40010000
 8004728:	40023800 	.word	0x40023800
 800472c:	40020000 	.word	0x40020000

08004730 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08a      	sub	sp, #40	; 0x28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004738:	f107 0314 	add.w	r3, r7, #20
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	605a      	str	r2, [r3, #4]
 8004742:	609a      	str	r2, [r3, #8]
 8004744:	60da      	str	r2, [r3, #12]
 8004746:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a34      	ldr	r2, [pc, #208]	; (8004820 <HAL_UART_MspInit+0xf0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d161      	bne.n	8004816 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	4b33      	ldr	r3, [pc, #204]	; (8004824 <HAL_UART_MspInit+0xf4>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	4a32      	ldr	r2, [pc, #200]	; (8004824 <HAL_UART_MspInit+0xf4>)
 800475c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004760:	6413      	str	r3, [r2, #64]	; 0x40
 8004762:	4b30      	ldr	r3, [pc, #192]	; (8004824 <HAL_UART_MspInit+0xf4>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	4b2c      	ldr	r3, [pc, #176]	; (8004824 <HAL_UART_MspInit+0xf4>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	4a2b      	ldr	r2, [pc, #172]	; (8004824 <HAL_UART_MspInit+0xf4>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	6313      	str	r3, [r2, #48]	; 0x30
 800477e:	4b29      	ldr	r3, [pc, #164]	; (8004824 <HAL_UART_MspInit+0xf4>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800478a:	230c      	movs	r3, #12
 800478c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478e:	2302      	movs	r3, #2
 8004790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004796:	2303      	movs	r3, #3
 8004798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800479a:	2307      	movs	r3, #7
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800479e:	f107 0314 	add.w	r3, r7, #20
 80047a2:	4619      	mov	r1, r3
 80047a4:	4820      	ldr	r0, [pc, #128]	; (8004828 <HAL_UART_MspInit+0xf8>)
 80047a6:	f001 faa1 	bl	8005cec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80047aa:	4b20      	ldr	r3, [pc, #128]	; (800482c <HAL_UART_MspInit+0xfc>)
 80047ac:	4a20      	ldr	r2, [pc, #128]	; (8004830 <HAL_UART_MspInit+0x100>)
 80047ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80047b0:	4b1e      	ldr	r3, [pc, #120]	; (800482c <HAL_UART_MspInit+0xfc>)
 80047b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047b8:	4b1c      	ldr	r3, [pc, #112]	; (800482c <HAL_UART_MspInit+0xfc>)
 80047ba:	2240      	movs	r2, #64	; 0x40
 80047bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047be:	4b1b      	ldr	r3, [pc, #108]	; (800482c <HAL_UART_MspInit+0xfc>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047c4:	4b19      	ldr	r3, [pc, #100]	; (800482c <HAL_UART_MspInit+0xfc>)
 80047c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047cc:	4b17      	ldr	r3, [pc, #92]	; (800482c <HAL_UART_MspInit+0xfc>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047d2:	4b16      	ldr	r3, [pc, #88]	; (800482c <HAL_UART_MspInit+0xfc>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80047d8:	4b14      	ldr	r3, [pc, #80]	; (800482c <HAL_UART_MspInit+0xfc>)
 80047da:	2200      	movs	r2, #0
 80047dc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80047de:	4b13      	ldr	r3, [pc, #76]	; (800482c <HAL_UART_MspInit+0xfc>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047e4:	4b11      	ldr	r3, [pc, #68]	; (800482c <HAL_UART_MspInit+0xfc>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80047ea:	4810      	ldr	r0, [pc, #64]	; (800482c <HAL_UART_MspInit+0xfc>)
 80047ec:	f000 fe62 	bl	80054b4 <HAL_DMA_Init>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80047f6:	f7ff fd81 	bl	80042fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a0b      	ldr	r2, [pc, #44]	; (800482c <HAL_UART_MspInit+0xfc>)
 80047fe:	635a      	str	r2, [r3, #52]	; 0x34
 8004800:	4a0a      	ldr	r2, [pc, #40]	; (800482c <HAL_UART_MspInit+0xfc>)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004806:	2200      	movs	r2, #0
 8004808:	2100      	movs	r1, #0
 800480a:	2026      	movs	r0, #38	; 0x26
 800480c:	f000 fe1b 	bl	8005446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004810:	2026      	movs	r0, #38	; 0x26
 8004812:	f000 fe34 	bl	800547e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004816:	bf00      	nop
 8004818:	3728      	adds	r7, #40	; 0x28
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40004400 	.word	0x40004400
 8004824:	40023800 	.word	0x40023800
 8004828:	40020000 	.word	0x40020000
 800482c:	20000810 	.word	0x20000810
 8004830:	400260a0 	.word	0x400260a0

08004834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004838:	e7fe      	b.n	8004838 <NMI_Handler+0x4>

0800483a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800483a:	b480      	push	{r7}
 800483c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800483e:	e7fe      	b.n	800483e <HardFault_Handler+0x4>

08004840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004844:	e7fe      	b.n	8004844 <MemManage_Handler+0x4>

08004846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004846:	b480      	push	{r7}
 8004848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800484a:	e7fe      	b.n	800484a <BusFault_Handler+0x4>

0800484c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004850:	e7fe      	b.n	8004850 <UsageFault_Handler+0x4>

08004852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004852:	b480      	push	{r7}
 8004854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004856:	bf00      	nop
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800486e:	b480      	push	{r7}
 8004870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004872:	bf00      	nop
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004880:	f000 f8e4 	bl	8004a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004884:	bf00      	nop
 8004886:	bd80      	pop	{r7, pc}

08004888 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800488c:	4802      	ldr	r0, [pc, #8]	; (8004898 <DMA1_Stream6_IRQHandler+0x10>)
 800488e:	f000 ffa9 	bl	80057e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004892:	bf00      	nop
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000810 	.word	0x20000810

0800489c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048a0:	4803      	ldr	r0, [pc, #12]	; (80048b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80048a2:	f005 f9a5 	bl	8009bf0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80048a6:	4803      	ldr	r0, [pc, #12]	; (80048b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80048a8:	f005 f9a2 	bl	8009bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80048ac:	bf00      	nop
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20000418 	.word	0x20000418
 80048b4:	200006e8 	.word	0x200006e8

080048b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048bc:	4802      	ldr	r0, [pc, #8]	; (80048c8 <TIM2_IRQHandler+0x10>)
 80048be:	f005 f997 	bl	8009bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	200004cc 	.word	0x200004cc

080048cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80048d0:	4802      	ldr	r0, [pc, #8]	; (80048dc <TIM3_IRQHandler+0x10>)
 80048d2:	f005 f98d 	bl	8009bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000580 	.word	0x20000580

080048e0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80048e4:	4802      	ldr	r0, [pc, #8]	; (80048f0 <I2C2_EV_IRQHandler+0x10>)
 80048e6:	f002 f835 	bl	8006954 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80048ea:	bf00      	nop
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	200003c4 	.word	0x200003c4

080048f4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80048f8:	4802      	ldr	r0, [pc, #8]	; (8004904 <I2C2_ER_IRQHandler+0x10>)
 80048fa:	f002 f99c 	bl	8006c36 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80048fe:	bf00      	nop
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	200003c4 	.word	0x200003c4

08004908 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800490c:	4802      	ldr	r0, [pc, #8]	; (8004918 <USART2_IRQHandler+0x10>)
 800490e:	f006 fc77 	bl	800b200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004912:	bf00      	nop
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	2000079c 	.word	0x2000079c

0800491c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004920:	4802      	ldr	r0, [pc, #8]	; (800492c <DMA2_Stream0_IRQHandler+0x10>)
 8004922:	f000 ff5f 	bl	80057e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004926:	bf00      	nop
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000364 	.word	0x20000364

08004930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004934:	4b06      	ldr	r3, [pc, #24]	; (8004950 <SystemInit+0x20>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493a:	4a05      	ldr	r2, [pc, #20]	; (8004950 <SystemInit+0x20>)
 800493c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	e000ed00 	.word	0xe000ed00

08004954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800498c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004958:	480d      	ldr	r0, [pc, #52]	; (8004990 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800495a:	490e      	ldr	r1, [pc, #56]	; (8004994 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800495c:	4a0e      	ldr	r2, [pc, #56]	; (8004998 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800495e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004960:	e002      	b.n	8004968 <LoopCopyDataInit>

08004962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004966:	3304      	adds	r3, #4

08004968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800496a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800496c:	d3f9      	bcc.n	8004962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800496e:	4a0b      	ldr	r2, [pc, #44]	; (800499c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004970:	4c0b      	ldr	r4, [pc, #44]	; (80049a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004974:	e001      	b.n	800497a <LoopFillZerobss>

08004976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004978:	3204      	adds	r2, #4

0800497a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800497a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800497c:	d3fb      	bcc.n	8004976 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800497e:	f7ff ffd7 	bl	8004930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004982:	f007 fc89 	bl	800c298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004986:	f7fc fdeb 	bl	8001560 <main>
  bx  lr    
 800498a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800498c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004994:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8004998:	0800e628 	.word	0x0800e628
  ldr r2, =_sbss
 800499c:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 80049a0:	20000f38 	.word	0x20000f38

080049a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049a4:	e7fe      	b.n	80049a4 <ADC_IRQHandler>
	...

080049a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049ac:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <HAL_Init+0x40>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a0d      	ldr	r2, [pc, #52]	; (80049e8 <HAL_Init+0x40>)
 80049b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_Init+0x40>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a0a      	ldr	r2, [pc, #40]	; (80049e8 <HAL_Init+0x40>)
 80049be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049c4:	4b08      	ldr	r3, [pc, #32]	; (80049e8 <HAL_Init+0x40>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a07      	ldr	r2, [pc, #28]	; (80049e8 <HAL_Init+0x40>)
 80049ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049d0:	2003      	movs	r0, #3
 80049d2:	f000 fd2d 	bl	8005430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049d6:	2000      	movs	r0, #0
 80049d8:	f000 f808 	bl	80049ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049dc:	f7ff fc94 	bl	8004308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40023c00 	.word	0x40023c00

080049ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049f4:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <HAL_InitTick+0x54>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <HAL_InitTick+0x58>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	4619      	mov	r1, r3
 80049fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fd45 	bl	800549a <HAL_SYSTICK_Config>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e00e      	b.n	8004a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b0f      	cmp	r3, #15
 8004a1e:	d80a      	bhi.n	8004a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a20:	2200      	movs	r2, #0
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	f000 fd0d 	bl	8005446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a2c:	4a06      	ldr	r2, [pc, #24]	; (8004a48 <HAL_InitTick+0x5c>)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	e000      	b.n	8004a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	2000028c 	.word	0x2000028c
 8004a44:	20000294 	.word	0x20000294
 8004a48:	20000290 	.word	0x20000290

08004a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a50:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <HAL_IncTick+0x20>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <HAL_IncTick+0x24>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	4a04      	ldr	r2, [pc, #16]	; (8004a70 <HAL_IncTick+0x24>)
 8004a5e:	6013      	str	r3, [r2, #0]
}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	20000294 	.word	0x20000294
 8004a70:	20000f34 	.word	0x20000f34

08004a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  return uwTick;
 8004a78:	4b03      	ldr	r3, [pc, #12]	; (8004a88 <HAL_GetTick+0x14>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	20000f34 	.word	0x20000f34

08004a8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e033      	b.n	8004b0a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff fc54 	bl	8004358 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d118      	bne.n	8004afc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004ad2:	f023 0302 	bic.w	r3, r3, #2
 8004ad6:	f043 0202 	orr.w	r2, r3, #2
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fa58 	bl	8004f94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f023 0303 	bic.w	r3, r3, #3
 8004af2:	f043 0201 	orr.w	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40
 8004afa:	e001      	b.n	8004b00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_ADC_Start_DMA+0x1e>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e0ce      	b.n	8004cd0 <HAL_ADC_Start_DMA+0x1bc>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d018      	beq.n	8004b7a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b58:	4b5f      	ldr	r3, [pc, #380]	; (8004cd8 <HAL_ADC_Start_DMA+0x1c4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a5f      	ldr	r2, [pc, #380]	; (8004cdc <HAL_ADC_Start_DMA+0x1c8>)
 8004b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b62:	0c9a      	lsrs	r2, r3, #18
 8004b64:	4613      	mov	r3, r2
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	4413      	add	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004b6c:	e002      	b.n	8004b74 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f9      	bne.n	8004b6e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b88:	d107      	bne.n	8004b9a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b98:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	f040 8086 	bne.w	8004cb6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
 8004bb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d007      	beq.n	8004bdc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004bd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be8:	d106      	bne.n	8004bf8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bee:	f023 0206 	bic.w	r2, r3, #6
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	645a      	str	r2, [r3, #68]	; 0x44
 8004bf6:	e002      	b.n	8004bfe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c06:	4b36      	ldr	r3, [pc, #216]	; (8004ce0 <HAL_ADC_Start_DMA+0x1cc>)
 8004c08:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	4a35      	ldr	r2, [pc, #212]	; (8004ce4 <HAL_ADC_Start_DMA+0x1d0>)
 8004c10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	4a34      	ldr	r2, [pc, #208]	; (8004ce8 <HAL_ADC_Start_DMA+0x1d4>)
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	4a33      	ldr	r2, [pc, #204]	; (8004cec <HAL_ADC_Start_DMA+0x1d8>)
 8004c20:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004c2a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004c3a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c4a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	334c      	adds	r3, #76	; 0x4c
 8004c56:	4619      	mov	r1, r3
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f000 fcd8 	bl	8005610 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 031f 	and.w	r3, r3, #31
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10f      	bne.n	8004c8c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d129      	bne.n	8004cce <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c88:	609a      	str	r2, [r3, #8]
 8004c8a:	e020      	b.n	8004cce <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <HAL_ADC_Start_DMA+0x1dc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d11b      	bne.n	8004cce <HAL_ADC_Start_DMA+0x1ba>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d114      	bne.n	8004cce <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004cb2:	609a      	str	r2, [r3, #8]
 8004cb4:	e00b      	b.n	8004cce <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f043 0210 	orr.w	r2, r3, #16
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	f043 0201 	orr.w	r2, r3, #1
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	2000028c 	.word	0x2000028c
 8004cdc:	431bde83 	.word	0x431bde83
 8004ce0:	40012300 	.word	0x40012300
 8004ce4:	0800518d 	.word	0x0800518d
 8004ce8:	08005247 	.word	0x08005247
 8004cec:	08005263 	.word	0x08005263
 8004cf0:	40012000 	.word	0x40012000

08004cf4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_ADC_ConfigChannel+0x1c>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e113      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x244>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b09      	cmp	r3, #9
 8004d5a:	d925      	bls.n	8004da8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68d9      	ldr	r1, [r3, #12]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	4413      	add	r3, r2
 8004d70:	3b1e      	subs	r3, #30
 8004d72:	2207      	movs	r2, #7
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	43da      	mvns	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	400a      	ands	r2, r1
 8004d80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68d9      	ldr	r1, [r3, #12]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	4618      	mov	r0, r3
 8004d94:	4603      	mov	r3, r0
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	4403      	add	r3, r0
 8004d9a:	3b1e      	subs	r3, #30
 8004d9c:	409a      	lsls	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	60da      	str	r2, [r3, #12]
 8004da6:	e022      	b.n	8004dee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6919      	ldr	r1, [r3, #16]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	4613      	mov	r3, r2
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	4413      	add	r3, r2
 8004dbc:	2207      	movs	r2, #7
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43da      	mvns	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	400a      	ands	r2, r1
 8004dca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6919      	ldr	r1, [r3, #16]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	4618      	mov	r0, r3
 8004dde:	4603      	mov	r3, r0
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	4403      	add	r3, r0
 8004de4:	409a      	lsls	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b06      	cmp	r3, #6
 8004df4:	d824      	bhi.n	8004e40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	3b05      	subs	r3, #5
 8004e08:	221f      	movs	r2, #31
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43da      	mvns	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	400a      	ands	r2, r1
 8004e16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	4618      	mov	r0, r3
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	3b05      	subs	r3, #5
 8004e32:	fa00 f203 	lsl.w	r2, r0, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	635a      	str	r2, [r3, #52]	; 0x34
 8004e3e:	e04c      	b.n	8004eda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b0c      	cmp	r3, #12
 8004e46:	d824      	bhi.n	8004e92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	3b23      	subs	r3, #35	; 0x23
 8004e5a:	221f      	movs	r2, #31
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43da      	mvns	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	400a      	ands	r2, r1
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	4618      	mov	r0, r3
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	3b23      	subs	r3, #35	; 0x23
 8004e84:	fa00 f203 	lsl.w	r2, r0, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30
 8004e90:	e023      	b.n	8004eda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3b41      	subs	r3, #65	; 0x41
 8004ea4:	221f      	movs	r2, #31
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	43da      	mvns	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	400a      	ands	r2, r1
 8004eb2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	3b41      	subs	r3, #65	; 0x41
 8004ece:	fa00 f203 	lsl.w	r2, r0, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004eda:	4b29      	ldr	r3, [pc, #164]	; (8004f80 <HAL_ADC_ConfigChannel+0x250>)
 8004edc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a28      	ldr	r2, [pc, #160]	; (8004f84 <HAL_ADC_ConfigChannel+0x254>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d10f      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x1d8>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b12      	cmp	r3, #18
 8004eee:	d10b      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1d      	ldr	r2, [pc, #116]	; (8004f84 <HAL_ADC_ConfigChannel+0x254>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d12b      	bne.n	8004f6a <HAL_ADC_ConfigChannel+0x23a>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1c      	ldr	r2, [pc, #112]	; (8004f88 <HAL_ADC_ConfigChannel+0x258>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d003      	beq.n	8004f24 <HAL_ADC_ConfigChannel+0x1f4>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b11      	cmp	r3, #17
 8004f22:	d122      	bne.n	8004f6a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a11      	ldr	r2, [pc, #68]	; (8004f88 <HAL_ADC_ConfigChannel+0x258>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d111      	bne.n	8004f6a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f46:	4b11      	ldr	r3, [pc, #68]	; (8004f8c <HAL_ADC_ConfigChannel+0x25c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a11      	ldr	r2, [pc, #68]	; (8004f90 <HAL_ADC_ConfigChannel+0x260>)
 8004f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f50:	0c9a      	lsrs	r2, r3, #18
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f5c:	e002      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f9      	bne.n	8004f5e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	40012300 	.word	0x40012300
 8004f84:	40012000 	.word	0x40012000
 8004f88:	10000012 	.word	0x10000012
 8004f8c:	2000028c 	.word	0x2000028c
 8004f90:	431bde83 	.word	0x431bde83

08004f94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f9c:	4b79      	ldr	r3, [pc, #484]	; (8005184 <ADC_Init+0x1f0>)
 8004f9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6859      	ldr	r1, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	021a      	lsls	r2, r3, #8
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004fec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6859      	ldr	r1, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800500e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6899      	ldr	r1, [r3, #8]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005026:	4a58      	ldr	r2, [pc, #352]	; (8005188 <ADC_Init+0x1f4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d022      	beq.n	8005072 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800503a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6899      	ldr	r1, [r3, #8]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800505c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6899      	ldr	r1, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	609a      	str	r2, [r3, #8]
 8005070:	e00f      	b.n	8005092 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005090:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0202 	bic.w	r2, r2, #2
 80050a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6899      	ldr	r1, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	7e1b      	ldrb	r3, [r3, #24]
 80050ac:	005a      	lsls	r2, r3, #1
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01b      	beq.n	80050f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80050de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6859      	ldr	r1, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	3b01      	subs	r3, #1
 80050ec:	035a      	lsls	r2, r3, #13
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	e007      	b.n	8005108 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005106:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005116:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	3b01      	subs	r3, #1
 8005124:	051a      	lsls	r2, r3, #20
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800513c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6899      	ldr	r1, [r3, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800514a:	025a      	lsls	r2, r3, #9
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005162:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6899      	ldr	r1, [r3, #8]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	029a      	lsls	r2, r3, #10
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	609a      	str	r2, [r3, #8]
}
 8005178:	bf00      	nop
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40012300 	.word	0x40012300
 8005188:	0f000001 	.word	0x0f000001

0800518c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d13c      	bne.n	8005220 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d12b      	bne.n	8005218 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d127      	bne.n	8005218 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d006      	beq.n	80051e4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d119      	bne.n	8005218 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0220 	bic.w	r2, r2, #32
 80051f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d105      	bne.n	8005218 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	f043 0201 	orr.w	r2, r3, #1
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f7ff fd6b 	bl	8004cf4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800521e:	e00e      	b.n	800523e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7ff fd75 	bl	8004d1c <HAL_ADC_ErrorCallback>
}
 8005232:	e004      	b.n	800523e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	4798      	blx	r3
}
 800523e:	bf00      	nop
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f7ff fd57 	bl	8004d08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800525a:	bf00      	nop
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2240      	movs	r2, #64	; 0x40
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	f043 0204 	orr.w	r2, r3, #4
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f7ff fd4a 	bl	8004d1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005288:	bf00      	nop
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052a0:	4b0c      	ldr	r3, [pc, #48]	; (80052d4 <__NVIC_SetPriorityGrouping+0x44>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052ac:	4013      	ands	r3, r2
 80052ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052c2:	4a04      	ldr	r2, [pc, #16]	; (80052d4 <__NVIC_SetPriorityGrouping+0x44>)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	60d3      	str	r3, [r2, #12]
}
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	e000ed00 	.word	0xe000ed00

080052d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052dc:	4b04      	ldr	r3, [pc, #16]	; (80052f0 <__NVIC_GetPriorityGrouping+0x18>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	0a1b      	lsrs	r3, r3, #8
 80052e2:	f003 0307 	and.w	r3, r3, #7
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	e000ed00 	.word	0xe000ed00

080052f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005302:	2b00      	cmp	r3, #0
 8005304:	db0b      	blt.n	800531e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	f003 021f 	and.w	r2, r3, #31
 800530c:	4907      	ldr	r1, [pc, #28]	; (800532c <__NVIC_EnableIRQ+0x38>)
 800530e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	2001      	movs	r0, #1
 8005316:	fa00 f202 	lsl.w	r2, r0, r2
 800531a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	e000e100 	.word	0xe000e100

08005330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	6039      	str	r1, [r7, #0]
 800533a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800533c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005340:	2b00      	cmp	r3, #0
 8005342:	db0a      	blt.n	800535a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	490c      	ldr	r1, [pc, #48]	; (800537c <__NVIC_SetPriority+0x4c>)
 800534a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534e:	0112      	lsls	r2, r2, #4
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	440b      	add	r3, r1
 8005354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005358:	e00a      	b.n	8005370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	b2da      	uxtb	r2, r3
 800535e:	4908      	ldr	r1, [pc, #32]	; (8005380 <__NVIC_SetPriority+0x50>)
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	3b04      	subs	r3, #4
 8005368:	0112      	lsls	r2, r2, #4
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	440b      	add	r3, r1
 800536e:	761a      	strb	r2, [r3, #24]
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	e000e100 	.word	0xe000e100
 8005380:	e000ed00 	.word	0xe000ed00

08005384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005384:	b480      	push	{r7}
 8005386:	b089      	sub	sp, #36	; 0x24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f1c3 0307 	rsb	r3, r3, #7
 800539e:	2b04      	cmp	r3, #4
 80053a0:	bf28      	it	cs
 80053a2:	2304      	movcs	r3, #4
 80053a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	3304      	adds	r3, #4
 80053aa:	2b06      	cmp	r3, #6
 80053ac:	d902      	bls.n	80053b4 <NVIC_EncodePriority+0x30>
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	3b03      	subs	r3, #3
 80053b2:	e000      	b.n	80053b6 <NVIC_EncodePriority+0x32>
 80053b4:	2300      	movs	r3, #0
 80053b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b8:	f04f 32ff 	mov.w	r2, #4294967295
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	fa02 f303 	lsl.w	r3, r2, r3
 80053c2:	43da      	mvns	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	401a      	ands	r2, r3
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053cc:	f04f 31ff 	mov.w	r1, #4294967295
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	fa01 f303 	lsl.w	r3, r1, r3
 80053d6:	43d9      	mvns	r1, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053dc:	4313      	orrs	r3, r2
         );
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3724      	adds	r7, #36	; 0x24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053fc:	d301      	bcc.n	8005402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053fe:	2301      	movs	r3, #1
 8005400:	e00f      	b.n	8005422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005402:	4a0a      	ldr	r2, [pc, #40]	; (800542c <SysTick_Config+0x40>)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3b01      	subs	r3, #1
 8005408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800540a:	210f      	movs	r1, #15
 800540c:	f04f 30ff 	mov.w	r0, #4294967295
 8005410:	f7ff ff8e 	bl	8005330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005414:	4b05      	ldr	r3, [pc, #20]	; (800542c <SysTick_Config+0x40>)
 8005416:	2200      	movs	r2, #0
 8005418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800541a:	4b04      	ldr	r3, [pc, #16]	; (800542c <SysTick_Config+0x40>)
 800541c:	2207      	movs	r2, #7
 800541e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	e000e010 	.word	0xe000e010

08005430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff ff29 	bl	8005290 <__NVIC_SetPriorityGrouping>
}
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005446:	b580      	push	{r7, lr}
 8005448:	b086      	sub	sp, #24
 800544a:	af00      	add	r7, sp, #0
 800544c:	4603      	mov	r3, r0
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	607a      	str	r2, [r7, #4]
 8005452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005458:	f7ff ff3e 	bl	80052d8 <__NVIC_GetPriorityGrouping>
 800545c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	6978      	ldr	r0, [r7, #20]
 8005464:	f7ff ff8e 	bl	8005384 <NVIC_EncodePriority>
 8005468:	4602      	mov	r2, r0
 800546a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800546e:	4611      	mov	r1, r2
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff ff5d 	bl	8005330 <__NVIC_SetPriority>
}
 8005476:	bf00      	nop
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b082      	sub	sp, #8
 8005482:	af00      	add	r7, sp, #0
 8005484:	4603      	mov	r3, r0
 8005486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff ff31 	bl	80052f4 <__NVIC_EnableIRQ>
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff ffa2 	bl	80053ec <SysTick_Config>
 80054a8:	4603      	mov	r3, r0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80054c0:	f7ff fad8 	bl	8004a74 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e099      	b.n	8005604 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0201 	bic.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054f0:	e00f      	b.n	8005512 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054f2:	f7ff fabf 	bl	8004a74 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b05      	cmp	r3, #5
 80054fe:	d908      	bls.n	8005512 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2203      	movs	r2, #3
 800550a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e078      	b.n	8005604 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e8      	bne.n	80054f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4b38      	ldr	r3, [pc, #224]	; (800560c <HAL_DMA_Init+0x158>)
 800552c:	4013      	ands	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800553e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800554a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005556:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	2b04      	cmp	r3, #4
 800556a:	d107      	bne.n	800557c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	4313      	orrs	r3, r2
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f023 0307 	bic.w	r3, r3, #7
 8005592:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d117      	bne.n	80055d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00e      	beq.n	80055d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fb1b 	bl	8005bf4 <DMA_CheckFifoParam>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d008      	beq.n	80055d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2240      	movs	r2, #64	; 0x40
 80055c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80055d2:	2301      	movs	r3, #1
 80055d4:	e016      	b.n	8005604 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fad2 	bl	8005b88 <DMA_CalcBaseAndBitshift>
 80055e4:	4603      	mov	r3, r0
 80055e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ec:	223f      	movs	r2, #63	; 0x3f
 80055ee:	409a      	lsls	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	f010803f 	.word	0xf010803f

08005610 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005626:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_DMA_Start_IT+0x26>
 8005632:	2302      	movs	r3, #2
 8005634:	e040      	b.n	80056b8 <HAL_DMA_Start_IT+0xa8>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b01      	cmp	r3, #1
 8005648:	d12f      	bne.n	80056aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2202      	movs	r2, #2
 800564e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fa64 	bl	8005b2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005668:	223f      	movs	r2, #63	; 0x3f
 800566a:	409a      	lsls	r2, r3
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0216 	orr.w	r2, r2, #22
 800567e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d007      	beq.n	8005698 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0208 	orr.w	r2, r2, #8
 8005696:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e005      	b.n	80056b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80056b2:	2302      	movs	r3, #2
 80056b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80056ce:	f7ff f9d1 	bl	8004a74 <HAL_GetTick>
 80056d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d008      	beq.n	80056f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2280      	movs	r2, #128	; 0x80
 80056e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e052      	b.n	8005798 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0216 	bic.w	r2, r2, #22
 8005700:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695a      	ldr	r2, [r3, #20]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005710:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	d103      	bne.n	8005722 <HAL_DMA_Abort+0x62>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800571e:	2b00      	cmp	r3, #0
 8005720:	d007      	beq.n	8005732 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0208 	bic.w	r2, r2, #8
 8005730:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005742:	e013      	b.n	800576c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005744:	f7ff f996 	bl	8004a74 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b05      	cmp	r3, #5
 8005750:	d90c      	bls.n	800576c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2203      	movs	r2, #3
 800575c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e015      	b.n	8005798 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e4      	bne.n	8005744 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577e:	223f      	movs	r2, #63	; 0x3f
 8005780:	409a      	lsls	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d004      	beq.n	80057be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2280      	movs	r2, #128	; 0x80
 80057b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e00c      	b.n	80057d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2205      	movs	r2, #5
 80057c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0201 	bic.w	r2, r2, #1
 80057d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057f0:	4b8e      	ldr	r3, [pc, #568]	; (8005a2c <HAL_DMA_IRQHandler+0x248>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a8e      	ldr	r2, [pc, #568]	; (8005a30 <HAL_DMA_IRQHandler+0x24c>)
 80057f6:	fba2 2303 	umull	r2, r3, r2, r3
 80057fa:	0a9b      	lsrs	r3, r3, #10
 80057fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005802:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580e:	2208      	movs	r2, #8
 8005810:	409a      	lsls	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4013      	ands	r3, r2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01a      	beq.n	8005850 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d013      	beq.n	8005850 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0204 	bic.w	r2, r2, #4
 8005836:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583c:	2208      	movs	r2, #8
 800583e:	409a      	lsls	r2, r3
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005848:	f043 0201 	orr.w	r2, r3, #1
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005854:	2201      	movs	r2, #1
 8005856:	409a      	lsls	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d012      	beq.n	8005886 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005872:	2201      	movs	r2, #1
 8005874:	409a      	lsls	r2, r3
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587e:	f043 0202 	orr.w	r2, r3, #2
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588a:	2204      	movs	r2, #4
 800588c:	409a      	lsls	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4013      	ands	r3, r2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d012      	beq.n	80058bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00b      	beq.n	80058bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a8:	2204      	movs	r2, #4
 80058aa:	409a      	lsls	r2, r3
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b4:	f043 0204 	orr.w	r2, r3, #4
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c0:	2210      	movs	r2, #16
 80058c2:	409a      	lsls	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d043      	beq.n	8005954 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d03c      	beq.n	8005954 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058de:	2210      	movs	r2, #16
 80058e0:	409a      	lsls	r2, r3
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d018      	beq.n	8005926 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d108      	bne.n	8005914 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d024      	beq.n	8005954 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	4798      	blx	r3
 8005912:	e01f      	b.n	8005954 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01b      	beq.n	8005954 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	4798      	blx	r3
 8005924:	e016      	b.n	8005954 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005930:	2b00      	cmp	r3, #0
 8005932:	d107      	bne.n	8005944 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0208 	bic.w	r2, r2, #8
 8005942:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005958:	2220      	movs	r2, #32
 800595a:	409a      	lsls	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4013      	ands	r3, r2
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 808f 	beq.w	8005a84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0310 	and.w	r3, r3, #16
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 8087 	beq.w	8005a84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800597a:	2220      	movs	r2, #32
 800597c:	409a      	lsls	r2, r3
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b05      	cmp	r3, #5
 800598c:	d136      	bne.n	80059fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0216 	bic.w	r2, r2, #22
 800599c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695a      	ldr	r2, [r3, #20]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d103      	bne.n	80059be <HAL_DMA_IRQHandler+0x1da>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d007      	beq.n	80059ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0208 	bic.w	r2, r2, #8
 80059cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d2:	223f      	movs	r2, #63	; 0x3f
 80059d4:	409a      	lsls	r2, r3
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d07e      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	4798      	blx	r3
        }
        return;
 80059fa:	e079      	b.n	8005af0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d01d      	beq.n	8005a46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10d      	bne.n	8005a34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d031      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	4798      	blx	r3
 8005a28:	e02c      	b.n	8005a84 <HAL_DMA_IRQHandler+0x2a0>
 8005a2a:	bf00      	nop
 8005a2c:	2000028c 	.word	0x2000028c
 8005a30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d023      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	4798      	blx	r3
 8005a44:	e01e      	b.n	8005a84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10f      	bne.n	8005a74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0210 	bic.w	r2, r2, #16
 8005a62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d032      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d022      	beq.n	8005ade <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2205      	movs	r2, #5
 8005a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0201 	bic.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	60bb      	str	r3, [r7, #8]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d307      	bcc.n	8005acc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f2      	bne.n	8005ab0 <HAL_DMA_IRQHandler+0x2cc>
 8005aca:	e000      	b.n	8005ace <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005acc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	4798      	blx	r3
 8005aee:	e000      	b.n	8005af2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005af0:	bf00      	nop
    }
  }
}
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b06:	b2db      	uxtb	r3, r3
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2b40      	cmp	r3, #64	; 0x40
 8005b58:	d108      	bne.n	8005b6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b6a:	e007      	b.n	8005b7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	60da      	str	r2, [r3, #12]
}
 8005b7c:	bf00      	nop
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	3b10      	subs	r3, #16
 8005b98:	4a14      	ldr	r2, [pc, #80]	; (8005bec <DMA_CalcBaseAndBitshift+0x64>)
 8005b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9e:	091b      	lsrs	r3, r3, #4
 8005ba0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ba2:	4a13      	ldr	r2, [pc, #76]	; (8005bf0 <DMA_CalcBaseAndBitshift+0x68>)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d909      	bls.n	8005bca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bbe:	f023 0303 	bic.w	r3, r3, #3
 8005bc2:	1d1a      	adds	r2, r3, #4
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	659a      	str	r2, [r3, #88]	; 0x58
 8005bc8:	e007      	b.n	8005bda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	aaaaaaab 	.word	0xaaaaaaab
 8005bf0:	0800e208 	.word	0x0800e208

08005bf4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d11f      	bne.n	8005c4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	d856      	bhi.n	8005cc2 <DMA_CheckFifoParam+0xce>
 8005c14:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <DMA_CheckFifoParam+0x28>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c2d 	.word	0x08005c2d
 8005c20:	08005c3f 	.word	0x08005c3f
 8005c24:	08005c2d 	.word	0x08005c2d
 8005c28:	08005cc3 	.word	0x08005cc3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d046      	beq.n	8005cc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c3c:	e043      	b.n	8005cc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c46:	d140      	bne.n	8005cca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c4c:	e03d      	b.n	8005cca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c56:	d121      	bne.n	8005c9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d837      	bhi.n	8005cce <DMA_CheckFifoParam+0xda>
 8005c5e:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <DMA_CheckFifoParam+0x70>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005c75 	.word	0x08005c75
 8005c68:	08005c7b 	.word	0x08005c7b
 8005c6c:	08005c75 	.word	0x08005c75
 8005c70:	08005c8d 	.word	0x08005c8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
      break;
 8005c78:	e030      	b.n	8005cdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d025      	beq.n	8005cd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c8a:	e022      	b.n	8005cd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c94:	d11f      	bne.n	8005cd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c9a:	e01c      	b.n	8005cd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d903      	bls.n	8005caa <DMA_CheckFifoParam+0xb6>
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d003      	beq.n	8005cb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ca8:	e018      	b.n	8005cdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	73fb      	strb	r3, [r7, #15]
      break;
 8005cae:	e015      	b.n	8005cdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00e      	beq.n	8005cda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc0:	e00b      	b.n	8005cda <DMA_CheckFifoParam+0xe6>
      break;
 8005cc2:	bf00      	nop
 8005cc4:	e00a      	b.n	8005cdc <DMA_CheckFifoParam+0xe8>
      break;
 8005cc6:	bf00      	nop
 8005cc8:	e008      	b.n	8005cdc <DMA_CheckFifoParam+0xe8>
      break;
 8005cca:	bf00      	nop
 8005ccc:	e006      	b.n	8005cdc <DMA_CheckFifoParam+0xe8>
      break;
 8005cce:	bf00      	nop
 8005cd0:	e004      	b.n	8005cdc <DMA_CheckFifoParam+0xe8>
      break;
 8005cd2:	bf00      	nop
 8005cd4:	e002      	b.n	8005cdc <DMA_CheckFifoParam+0xe8>
      break;   
 8005cd6:	bf00      	nop
 8005cd8:	e000      	b.n	8005cdc <DMA_CheckFifoParam+0xe8>
      break;
 8005cda:	bf00      	nop
    }
  } 
  
  return status; 
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop

08005cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b089      	sub	sp, #36	; 0x24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d02:	2300      	movs	r3, #0
 8005d04:	61fb      	str	r3, [r7, #28]
 8005d06:	e159      	b.n	8005fbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d08:	2201      	movs	r2, #1
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	f040 8148 	bne.w	8005fb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d005      	beq.n	8005d3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d130      	bne.n	8005da0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	2203      	movs	r2, #3
 8005d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4e:	43db      	mvns	r3, r3
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	4013      	ands	r3, r2
 8005d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d74:	2201      	movs	r2, #1
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	4013      	ands	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	091b      	lsrs	r3, r3, #4
 8005d8a:	f003 0201 	and.w	r2, r3, #1
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f003 0303 	and.w	r3, r3, #3
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d017      	beq.n	8005ddc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	2203      	movs	r2, #3
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	43db      	mvns	r3, r3
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d123      	bne.n	8005e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	08da      	lsrs	r2, r3, #3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3208      	adds	r2, #8
 8005df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	220f      	movs	r2, #15
 8005e00:	fa02 f303 	lsl.w	r3, r2, r3
 8005e04:	43db      	mvns	r3, r3
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	08da      	lsrs	r2, r3, #3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	3208      	adds	r2, #8
 8005e2a:	69b9      	ldr	r1, [r7, #24]
 8005e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	43db      	mvns	r3, r3
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	4013      	ands	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f003 0203 	and.w	r2, r3, #3
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	fa02 f303 	lsl.w	r3, r2, r3
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 80a2 	beq.w	8005fb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	4b57      	ldr	r3, [pc, #348]	; (8005fd4 <HAL_GPIO_Init+0x2e8>)
 8005e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7a:	4a56      	ldr	r2, [pc, #344]	; (8005fd4 <HAL_GPIO_Init+0x2e8>)
 8005e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e80:	6453      	str	r3, [r2, #68]	; 0x44
 8005e82:	4b54      	ldr	r3, [pc, #336]	; (8005fd4 <HAL_GPIO_Init+0x2e8>)
 8005e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e8e:	4a52      	ldr	r2, [pc, #328]	; (8005fd8 <HAL_GPIO_Init+0x2ec>)
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	089b      	lsrs	r3, r3, #2
 8005e94:	3302      	adds	r3, #2
 8005e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	220f      	movs	r2, #15
 8005ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eaa:	43db      	mvns	r3, r3
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a49      	ldr	r2, [pc, #292]	; (8005fdc <HAL_GPIO_Init+0x2f0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d019      	beq.n	8005eee <HAL_GPIO_Init+0x202>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a48      	ldr	r2, [pc, #288]	; (8005fe0 <HAL_GPIO_Init+0x2f4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d013      	beq.n	8005eea <HAL_GPIO_Init+0x1fe>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a47      	ldr	r2, [pc, #284]	; (8005fe4 <HAL_GPIO_Init+0x2f8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00d      	beq.n	8005ee6 <HAL_GPIO_Init+0x1fa>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a46      	ldr	r2, [pc, #280]	; (8005fe8 <HAL_GPIO_Init+0x2fc>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d007      	beq.n	8005ee2 <HAL_GPIO_Init+0x1f6>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a45      	ldr	r2, [pc, #276]	; (8005fec <HAL_GPIO_Init+0x300>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d101      	bne.n	8005ede <HAL_GPIO_Init+0x1f2>
 8005eda:	2304      	movs	r3, #4
 8005edc:	e008      	b.n	8005ef0 <HAL_GPIO_Init+0x204>
 8005ede:	2307      	movs	r3, #7
 8005ee0:	e006      	b.n	8005ef0 <HAL_GPIO_Init+0x204>
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e004      	b.n	8005ef0 <HAL_GPIO_Init+0x204>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e002      	b.n	8005ef0 <HAL_GPIO_Init+0x204>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <HAL_GPIO_Init+0x204>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	69fa      	ldr	r2, [r7, #28]
 8005ef2:	f002 0203 	and.w	r2, r2, #3
 8005ef6:	0092      	lsls	r2, r2, #2
 8005ef8:	4093      	lsls	r3, r2
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f00:	4935      	ldr	r1, [pc, #212]	; (8005fd8 <HAL_GPIO_Init+0x2ec>)
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	089b      	lsrs	r3, r3, #2
 8005f06:	3302      	adds	r3, #2
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f0e:	4b38      	ldr	r3, [pc, #224]	; (8005ff0 <HAL_GPIO_Init+0x304>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	43db      	mvns	r3, r3
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f32:	4a2f      	ldr	r2, [pc, #188]	; (8005ff0 <HAL_GPIO_Init+0x304>)
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f38:	4b2d      	ldr	r3, [pc, #180]	; (8005ff0 <HAL_GPIO_Init+0x304>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	43db      	mvns	r3, r3
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4013      	ands	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f5c:	4a24      	ldr	r2, [pc, #144]	; (8005ff0 <HAL_GPIO_Init+0x304>)
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005f62:	4b23      	ldr	r3, [pc, #140]	; (8005ff0 <HAL_GPIO_Init+0x304>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f86:	4a1a      	ldr	r2, [pc, #104]	; (8005ff0 <HAL_GPIO_Init+0x304>)
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f8c:	4b18      	ldr	r3, [pc, #96]	; (8005ff0 <HAL_GPIO_Init+0x304>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	43db      	mvns	r3, r3
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005fb0:	4a0f      	ldr	r2, [pc, #60]	; (8005ff0 <HAL_GPIO_Init+0x304>)
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	61fb      	str	r3, [r7, #28]
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	2b0f      	cmp	r3, #15
 8005fc0:	f67f aea2 	bls.w	8005d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	3724      	adds	r7, #36	; 0x24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	40013800 	.word	0x40013800
 8005fdc:	40020000 	.word	0x40020000
 8005fe0:	40020400 	.word	0x40020400
 8005fe4:	40020800 	.word	0x40020800
 8005fe8:	40020c00 	.word	0x40020c00
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	40013c00 	.word	0x40013c00

08005ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	887b      	ldrh	r3, [r7, #2]
 8006006:	4013      	ands	r3, r2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800600c:	2301      	movs	r3, #1
 800600e:	73fb      	strb	r3, [r7, #15]
 8006010:	e001      	b.n	8006016 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006016:	7bfb      	ldrb	r3, [r7, #15]
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	807b      	strh	r3, [r7, #2]
 8006030:	4613      	mov	r3, r2
 8006032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006034:	787b      	ldrb	r3, [r7, #1]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800603a:	887a      	ldrh	r2, [r7, #2]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006040:	e003      	b.n	800604a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006042:	887b      	ldrh	r3, [r7, #2]
 8006044:	041a      	lsls	r2, r3, #16
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	619a      	str	r2, [r3, #24]
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006056:	b480      	push	{r7}
 8006058:	b085      	sub	sp, #20
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	460b      	mov	r3, r1
 8006060:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006068:	887a      	ldrh	r2, [r7, #2]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4013      	ands	r3, r2
 800606e:	041a      	lsls	r2, r3, #16
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	43d9      	mvns	r1, r3
 8006074:	887b      	ldrh	r3, [r7, #2]
 8006076:	400b      	ands	r3, r1
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	619a      	str	r2, [r3, #24]
}
 800607e:	bf00      	nop
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
	...

0800608c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e12b      	b.n	80062f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fe f9c8 	bl	8004448 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2224      	movs	r2, #36	; 0x24
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0201 	bic.w	r2, r2, #1
 80060ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060f0:	f003 f8bc 	bl	800926c <HAL_RCC_GetPCLK1Freq>
 80060f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	4a81      	ldr	r2, [pc, #516]	; (8006300 <HAL_I2C_Init+0x274>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d807      	bhi.n	8006110 <HAL_I2C_Init+0x84>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4a80      	ldr	r2, [pc, #512]	; (8006304 <HAL_I2C_Init+0x278>)
 8006104:	4293      	cmp	r3, r2
 8006106:	bf94      	ite	ls
 8006108:	2301      	movls	r3, #1
 800610a:	2300      	movhi	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	e006      	b.n	800611e <HAL_I2C_Init+0x92>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4a7d      	ldr	r2, [pc, #500]	; (8006308 <HAL_I2C_Init+0x27c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	bf94      	ite	ls
 8006118:	2301      	movls	r3, #1
 800611a:	2300      	movhi	r3, #0
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e0e7      	b.n	80062f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4a78      	ldr	r2, [pc, #480]	; (800630c <HAL_I2C_Init+0x280>)
 800612a:	fba2 2303 	umull	r2, r3, r2, r3
 800612e:	0c9b      	lsrs	r3, r3, #18
 8006130:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	4a6a      	ldr	r2, [pc, #424]	; (8006300 <HAL_I2C_Init+0x274>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d802      	bhi.n	8006160 <HAL_I2C_Init+0xd4>
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	3301      	adds	r3, #1
 800615e:	e009      	b.n	8006174 <HAL_I2C_Init+0xe8>
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006166:	fb02 f303 	mul.w	r3, r2, r3
 800616a:	4a69      	ldr	r2, [pc, #420]	; (8006310 <HAL_I2C_Init+0x284>)
 800616c:	fba2 2303 	umull	r2, r3, r2, r3
 8006170:	099b      	lsrs	r3, r3, #6
 8006172:	3301      	adds	r3, #1
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6812      	ldr	r2, [r2, #0]
 8006178:	430b      	orrs	r3, r1
 800617a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006186:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	495c      	ldr	r1, [pc, #368]	; (8006300 <HAL_I2C_Init+0x274>)
 8006190:	428b      	cmp	r3, r1
 8006192:	d819      	bhi.n	80061c8 <HAL_I2C_Init+0x13c>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	1e59      	subs	r1, r3, #1
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	fbb1 f3f3 	udiv	r3, r1, r3
 80061a2:	1c59      	adds	r1, r3, #1
 80061a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80061a8:	400b      	ands	r3, r1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <HAL_I2C_Init+0x138>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	1e59      	subs	r1, r3, #1
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80061bc:	3301      	adds	r3, #1
 80061be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c2:	e051      	b.n	8006268 <HAL_I2C_Init+0x1dc>
 80061c4:	2304      	movs	r3, #4
 80061c6:	e04f      	b.n	8006268 <HAL_I2C_Init+0x1dc>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d111      	bne.n	80061f4 <HAL_I2C_Init+0x168>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	1e58      	subs	r0, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6859      	ldr	r1, [r3, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	440b      	add	r3, r1
 80061de:	fbb0 f3f3 	udiv	r3, r0, r3
 80061e2:	3301      	adds	r3, #1
 80061e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	bf0c      	ite	eq
 80061ec:	2301      	moveq	r3, #1
 80061ee:	2300      	movne	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	e012      	b.n	800621a <HAL_I2C_Init+0x18e>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	1e58      	subs	r0, r3, #1
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6859      	ldr	r1, [r3, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	0099      	lsls	r1, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	fbb0 f3f3 	udiv	r3, r0, r3
 800620a:	3301      	adds	r3, #1
 800620c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006210:	2b00      	cmp	r3, #0
 8006212:	bf0c      	ite	eq
 8006214:	2301      	moveq	r3, #1
 8006216:	2300      	movne	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_I2C_Init+0x196>
 800621e:	2301      	movs	r3, #1
 8006220:	e022      	b.n	8006268 <HAL_I2C_Init+0x1dc>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10e      	bne.n	8006248 <HAL_I2C_Init+0x1bc>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	1e58      	subs	r0, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6859      	ldr	r1, [r3, #4]
 8006232:	460b      	mov	r3, r1
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	440b      	add	r3, r1
 8006238:	fbb0 f3f3 	udiv	r3, r0, r3
 800623c:	3301      	adds	r3, #1
 800623e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006246:	e00f      	b.n	8006268 <HAL_I2C_Init+0x1dc>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	1e58      	subs	r0, r3, #1
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6859      	ldr	r1, [r3, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	440b      	add	r3, r1
 8006256:	0099      	lsls	r1, r3, #2
 8006258:	440b      	add	r3, r1
 800625a:	fbb0 f3f3 	udiv	r3, r0, r3
 800625e:	3301      	adds	r3, #1
 8006260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	6809      	ldr	r1, [r1, #0]
 800626c:	4313      	orrs	r3, r2
 800626e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	69da      	ldr	r2, [r3, #28]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6911      	ldr	r1, [r2, #16]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	68d2      	ldr	r2, [r2, #12]
 80062a2:	4311      	orrs	r1, r2
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6812      	ldr	r2, [r2, #0]
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	695a      	ldr	r2, [r3, #20]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	431a      	orrs	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0201 	orr.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	000186a0 	.word	0x000186a0
 8006304:	001e847f 	.word	0x001e847f
 8006308:	003d08ff 	.word	0x003d08ff
 800630c:	431bde83 	.word	0x431bde83
 8006310:	10624dd3 	.word	0x10624dd3

08006314 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08c      	sub	sp, #48	; 0x30
 8006318:	af02      	add	r7, sp, #8
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	607a      	str	r2, [r7, #4]
 800631e:	461a      	mov	r2, r3
 8006320:	460b      	mov	r3, r1
 8006322:	817b      	strh	r3, [r7, #10]
 8006324:	4613      	mov	r3, r2
 8006326:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006328:	f7fe fba4 	bl	8004a74 <HAL_GetTick>
 800632c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b20      	cmp	r3, #32
 8006338:	f040 820b 	bne.w	8006752 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	2319      	movs	r3, #25
 8006342:	2201      	movs	r2, #1
 8006344:	497c      	ldr	r1, [pc, #496]	; (8006538 <HAL_I2C_Master_Receive+0x224>)
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f002 f8f6 	bl	8008538 <I2C_WaitOnFlagUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006352:	2302      	movs	r3, #2
 8006354:	e1fe      	b.n	8006754 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_I2C_Master_Receive+0x50>
 8006360:	2302      	movs	r3, #2
 8006362:	e1f7      	b.n	8006754 <HAL_I2C_Master_Receive+0x440>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b01      	cmp	r3, #1
 8006378:	d007      	beq.n	800638a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f042 0201 	orr.w	r2, r2, #1
 8006388:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006398:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2222      	movs	r2, #34	; 0x22
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2210      	movs	r2, #16
 80063a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	893a      	ldrh	r2, [r7, #8]
 80063ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4a5c      	ldr	r2, [pc, #368]	; (800653c <HAL_I2C_Master_Receive+0x228>)
 80063ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80063cc:	8979      	ldrh	r1, [r7, #10]
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f001 fea4 	bl	8008120 <I2C_MasterRequestRead>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e1b8      	b.n	8006754 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d113      	bne.n	8006412 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ea:	2300      	movs	r3, #0
 80063ec:	623b      	str	r3, [r7, #32]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	623b      	str	r3, [r7, #32]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	623b      	str	r3, [r7, #32]
 80063fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	e18c      	b.n	800672c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006416:	2b01      	cmp	r3, #1
 8006418:	d11b      	bne.n	8006452 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006428:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	61fb      	str	r3, [r7, #28]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	61fb      	str	r3, [r7, #28]
 800643e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	e16c      	b.n	800672c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006456:	2b02      	cmp	r3, #2
 8006458:	d11b      	bne.n	8006492 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006468:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006478:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800647a:	2300      	movs	r3, #0
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	61bb      	str	r3, [r7, #24]
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	e14c      	b.n	800672c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80064b8:	e138      	b.n	800672c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064be:	2b03      	cmp	r3, #3
 80064c0:	f200 80f1 	bhi.w	80066a6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d123      	bne.n	8006514 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f002 f9bb 	bl	800884c <I2C_WaitOnRXNEFlagUntilTimeout>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e139      	b.n	8006754 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691a      	ldr	r2, [r3, #16]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006508:	b29b      	uxth	r3, r3
 800650a:	3b01      	subs	r3, #1
 800650c:	b29a      	uxth	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006512:	e10b      	b.n	800672c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006518:	2b02      	cmp	r3, #2
 800651a:	d14e      	bne.n	80065ba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	2200      	movs	r2, #0
 8006524:	4906      	ldr	r1, [pc, #24]	; (8006540 <HAL_I2C_Master_Receive+0x22c>)
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f002 f806 	bl	8008538 <I2C_WaitOnFlagUntilTimeout>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d008      	beq.n	8006544 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e10e      	b.n	8006754 <HAL_I2C_Master_Receive+0x440>
 8006536:	bf00      	nop
 8006538:	00100002 	.word	0x00100002
 800653c:	ffff0000 	.word	0xffff0000
 8006540:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	691a      	ldr	r2, [r3, #16]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691a      	ldr	r2, [r3, #16]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065b8:	e0b8      	b.n	800672c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c0:	2200      	movs	r2, #0
 80065c2:	4966      	ldr	r1, [pc, #408]	; (800675c <HAL_I2C_Master_Receive+0x448>)
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f001 ffb7 	bl	8008538 <I2C_WaitOnFlagUntilTimeout>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e0bf      	b.n	8006754 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	691a      	ldr	r2, [r3, #16]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	2200      	movs	r2, #0
 800661e:	494f      	ldr	r1, [pc, #316]	; (800675c <HAL_I2C_Master_Receive+0x448>)
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f001 ff89 	bl	8008538 <I2C_WaitOnFlagUntilTimeout>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e091      	b.n	8006754 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800663e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691a      	ldr	r2, [r3, #16]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006668:	b29b      	uxth	r3, r3
 800666a:	3b01      	subs	r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	1c5a      	adds	r2, r3, #1
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066a4:	e042      	b.n	800672c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f002 f8ce 	bl	800884c <I2C_WaitOnRXNEFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e04c      	b.n	8006754 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	691a      	ldr	r2, [r3, #16]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d118      	bne.n	800672c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	691a      	ldr	r2, [r3, #16]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006722:	b29b      	uxth	r3, r3
 8006724:	3b01      	subs	r3, #1
 8006726:	b29a      	uxth	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006730:	2b00      	cmp	r3, #0
 8006732:	f47f aec2 	bne.w	80064ba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2220      	movs	r2, #32
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	e000      	b.n	8006754 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006752:	2302      	movs	r3, #2
  }
}
 8006754:	4618      	mov	r0, r3
 8006756:	3728      	adds	r7, #40	; 0x28
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	00010004 	.word	0x00010004

08006760 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af02      	add	r7, sp, #8
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	4608      	mov	r0, r1
 800676a:	4611      	mov	r1, r2
 800676c:	461a      	mov	r2, r3
 800676e:	4603      	mov	r3, r0
 8006770:	817b      	strh	r3, [r7, #10]
 8006772:	460b      	mov	r3, r1
 8006774:	813b      	strh	r3, [r7, #8]
 8006776:	4613      	mov	r3, r2
 8006778:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800677a:	f7fe f97b 	bl	8004a74 <HAL_GetTick>
 800677e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b20      	cmp	r3, #32
 800678a:	f040 80d9 	bne.w	8006940 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	2319      	movs	r3, #25
 8006794:	2201      	movs	r2, #1
 8006796:	496d      	ldr	r1, [pc, #436]	; (800694c <HAL_I2C_Mem_Write+0x1ec>)
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f001 fecd 	bl	8008538 <I2C_WaitOnFlagUntilTimeout>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80067a4:	2302      	movs	r3, #2
 80067a6:	e0cc      	b.n	8006942 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d101      	bne.n	80067b6 <HAL_I2C_Mem_Write+0x56>
 80067b2:	2302      	movs	r3, #2
 80067b4:	e0c5      	b.n	8006942 <HAL_I2C_Mem_Write+0x1e2>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d007      	beq.n	80067dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f042 0201 	orr.w	r2, r2, #1
 80067da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2221      	movs	r2, #33	; 0x21
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2240      	movs	r2, #64	; 0x40
 80067f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a3a      	ldr	r2, [r7, #32]
 8006806:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800680c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4a4d      	ldr	r2, [pc, #308]	; (8006950 <HAL_I2C_Mem_Write+0x1f0>)
 800681c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800681e:	88f8      	ldrh	r0, [r7, #6]
 8006820:	893a      	ldrh	r2, [r7, #8]
 8006822:	8979      	ldrh	r1, [r7, #10]
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	4603      	mov	r3, r0
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f001 fd44 	bl	80082bc <I2C_RequestMemoryWrite>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d052      	beq.n	80068e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e081      	b.n	8006942 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f001 ff4e 	bl	80086e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00d      	beq.n	800686a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	2b04      	cmp	r3, #4
 8006854:	d107      	bne.n	8006866 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006864:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e06b      	b.n	8006942 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	781a      	ldrb	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d11b      	bne.n	80068e0 <HAL_I2C_Mem_Write+0x180>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d017      	beq.n	80068e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	781a      	ldrb	r2, [r3, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1aa      	bne.n	800683e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f001 ff3a 	bl	8008766 <I2C_WaitOnBTFFlagUntilTimeout>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00d      	beq.n	8006914 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d107      	bne.n	8006910 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800690e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e016      	b.n	8006942 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	e000      	b.n	8006942 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006940:	2302      	movs	r3, #2
  }
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	00100002 	.word	0x00100002
 8006950:	ffff0000 	.word	0xffff0000

08006954 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006974:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800697c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	2b10      	cmp	r3, #16
 8006982:	d003      	beq.n	800698c <HAL_I2C_EV_IRQHandler+0x38>
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	2b40      	cmp	r3, #64	; 0x40
 8006988:	f040 80c1 	bne.w	8006b0e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10d      	bne.n	80069c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80069ac:	d003      	beq.n	80069b6 <HAL_I2C_EV_IRQHandler+0x62>
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80069b4:	d101      	bne.n	80069ba <HAL_I2C_EV_IRQHandler+0x66>
 80069b6:	2301      	movs	r3, #1
 80069b8:	e000      	b.n	80069bc <HAL_I2C_EV_IRQHandler+0x68>
 80069ba:	2300      	movs	r3, #0
 80069bc:	2b01      	cmp	r3, #1
 80069be:	f000 8132 	beq.w	8006c26 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00c      	beq.n	80069e6 <HAL_I2C_EV_IRQHandler+0x92>
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	0a5b      	lsrs	r3, r3, #9
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d006      	beq.n	80069e6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 ffbc 	bl	8008956 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fd83 	bl	80074ea <I2C_Master_SB>
 80069e4:	e092      	b.n	8006b0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	08db      	lsrs	r3, r3, #3
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d009      	beq.n	8006a06 <HAL_I2C_EV_IRQHandler+0xb2>
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	0a5b      	lsrs	r3, r3, #9
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fdf9 	bl	80075f6 <I2C_Master_ADD10>
 8006a04:	e082      	b.n	8006b0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	085b      	lsrs	r3, r3, #1
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <HAL_I2C_EV_IRQHandler+0xd2>
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	0a5b      	lsrs	r3, r3, #9
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fe13 	bl	800764a <I2C_Master_ADDR>
 8006a24:	e072      	b.n	8006b0c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	089b      	lsrs	r3, r3, #2
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d03b      	beq.n	8006aaa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a40:	f000 80f3 	beq.w	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	09db      	lsrs	r3, r3, #7
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00f      	beq.n	8006a70 <HAL_I2C_EV_IRQHandler+0x11c>
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	0a9b      	lsrs	r3, r3, #10
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d009      	beq.n	8006a70 <HAL_I2C_EV_IRQHandler+0x11c>
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	089b      	lsrs	r3, r3, #2
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d103      	bne.n	8006a70 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f9f3 	bl	8006e54 <I2C_MasterTransmit_TXE>
 8006a6e:	e04d      	b.n	8006b0c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	089b      	lsrs	r3, r3, #2
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 80d6 	beq.w	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	0a5b      	lsrs	r3, r3, #9
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 80cf 	beq.w	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006a8c:	7bbb      	ldrb	r3, [r7, #14]
 8006a8e:	2b21      	cmp	r3, #33	; 0x21
 8006a90:	d103      	bne.n	8006a9a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa7a 	bl	8006f8c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a98:	e0c7      	b.n	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b40      	cmp	r3, #64	; 0x40
 8006a9e:	f040 80c4 	bne.w	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fae8 	bl	8007078 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aa8:	e0bf      	b.n	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ab8:	f000 80b7 	beq.w	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	099b      	lsrs	r3, r3, #6
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00f      	beq.n	8006ae8 <HAL_I2C_EV_IRQHandler+0x194>
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	0a9b      	lsrs	r3, r3, #10
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d009      	beq.n	8006ae8 <HAL_I2C_EV_IRQHandler+0x194>
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	089b      	lsrs	r3, r3, #2
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d103      	bne.n	8006ae8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fb5d 	bl	80071a0 <I2C_MasterReceive_RXNE>
 8006ae6:	e011      	b.n	8006b0c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	089b      	lsrs	r3, r3, #2
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 809a 	beq.w	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	0a5b      	lsrs	r3, r3, #9
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8093 	beq.w	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fc06 	bl	8007316 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b0a:	e08e      	b.n	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006b0c:	e08d      	b.n	8006c2a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	61fb      	str	r3, [r7, #28]
 8006b1e:	e007      	b.n	8006b30 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	085b      	lsrs	r3, r3, #1
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d012      	beq.n	8006b62 <HAL_I2C_EV_IRQHandler+0x20e>
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	0a5b      	lsrs	r3, r3, #9
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00c      	beq.n	8006b62 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006b58:	69b9      	ldr	r1, [r7, #24]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 ffc4 	bl	8007ae8 <I2C_Slave_ADDR>
 8006b60:	e066      	b.n	8006c30 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	091b      	lsrs	r3, r3, #4
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <HAL_I2C_EV_IRQHandler+0x22e>
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	0a5b      	lsrs	r3, r3, #9
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fffe 	bl	8007b7c <I2C_Slave_STOPF>
 8006b80:	e056      	b.n	8006c30 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	2b21      	cmp	r3, #33	; 0x21
 8006b86:	d002      	beq.n	8006b8e <HAL_I2C_EV_IRQHandler+0x23a>
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	2b29      	cmp	r3, #41	; 0x29
 8006b8c:	d125      	bne.n	8006bda <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	09db      	lsrs	r3, r3, #7
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00f      	beq.n	8006bba <HAL_I2C_EV_IRQHandler+0x266>
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	0a9b      	lsrs	r3, r3, #10
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d009      	beq.n	8006bba <HAL_I2C_EV_IRQHandler+0x266>
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	089b      	lsrs	r3, r3, #2
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d103      	bne.n	8006bba <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 feda 	bl	800796c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bb8:	e039      	b.n	8006c2e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	089b      	lsrs	r3, r3, #2
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d033      	beq.n	8006c2e <HAL_I2C_EV_IRQHandler+0x2da>
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	0a5b      	lsrs	r3, r3, #9
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d02d      	beq.n	8006c2e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 ff07 	bl	80079e6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bd8:	e029      	b.n	8006c2e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	099b      	lsrs	r3, r3, #6
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00f      	beq.n	8006c06 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	0a9b      	lsrs	r3, r3, #10
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	089b      	lsrs	r3, r3, #2
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 ff12 	bl	8007a28 <I2C_SlaveReceive_RXNE>
 8006c04:	e014      	b.n	8006c30 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	089b      	lsrs	r3, r3, #2
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00e      	beq.n	8006c30 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	0a5b      	lsrs	r3, r3, #9
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d008      	beq.n	8006c30 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 ff40 	bl	8007aa4 <I2C_SlaveReceive_BTF>
 8006c24:	e004      	b.n	8006c30 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006c26:	bf00      	nop
 8006c28:	e002      	b.n	8006c30 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c2a:	bf00      	nop
 8006c2c:	e000      	b.n	8006c30 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c2e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006c30:	3720      	adds	r7, #32
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b08a      	sub	sp, #40	; 0x28
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c58:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	0a1b      	lsrs	r3, r3, #8
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00e      	beq.n	8006c84 <HAL_I2C_ER_IRQHandler+0x4e>
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	0a1b      	lsrs	r3, r3, #8
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d008      	beq.n	8006c84 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	f043 0301 	orr.w	r3, r3, #1
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c82:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	0a5b      	lsrs	r3, r3, #9
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00e      	beq.n	8006cae <HAL_I2C_ER_IRQHandler+0x78>
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	0a1b      	lsrs	r3, r3, #8
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d008      	beq.n	8006cae <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	f043 0302 	orr.w	r3, r3, #2
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006cac:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	0a9b      	lsrs	r3, r3, #10
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d03f      	beq.n	8006d3a <HAL_I2C_ER_IRQHandler+0x104>
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	0a1b      	lsrs	r3, r3, #8
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d039      	beq.n	8006d3a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006cc6:	7efb      	ldrb	r3, [r7, #27]
 8006cc8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006ce0:	7ebb      	ldrb	r3, [r7, #26]
 8006ce2:	2b20      	cmp	r3, #32
 8006ce4:	d112      	bne.n	8006d0c <HAL_I2C_ER_IRQHandler+0xd6>
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10f      	bne.n	8006d0c <HAL_I2C_ER_IRQHandler+0xd6>
 8006cec:	7cfb      	ldrb	r3, [r7, #19]
 8006cee:	2b21      	cmp	r3, #33	; 0x21
 8006cf0:	d008      	beq.n	8006d04 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006cf2:	7cfb      	ldrb	r3, [r7, #19]
 8006cf4:	2b29      	cmp	r3, #41	; 0x29
 8006cf6:	d005      	beq.n	8006d04 <HAL_I2C_ER_IRQHandler+0xce>
 8006cf8:	7cfb      	ldrb	r3, [r7, #19]
 8006cfa:	2b28      	cmp	r3, #40	; 0x28
 8006cfc:	d106      	bne.n	8006d0c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b21      	cmp	r3, #33	; 0x21
 8006d02:	d103      	bne.n	8006d0c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 f869 	bl	8007ddc <I2C_Slave_AF>
 8006d0a:	e016      	b.n	8006d3a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d14:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	f043 0304 	orr.w	r3, r3, #4
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006d1e:	7efb      	ldrb	r3, [r7, #27]
 8006d20:	2b10      	cmp	r3, #16
 8006d22:	d002      	beq.n	8006d2a <HAL_I2C_ER_IRQHandler+0xf4>
 8006d24:	7efb      	ldrb	r3, [r7, #27]
 8006d26:	2b40      	cmp	r3, #64	; 0x40
 8006d28:	d107      	bne.n	8006d3a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d38:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	0adb      	lsrs	r3, r3, #11
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00e      	beq.n	8006d64 <HAL_I2C_ER_IRQHandler+0x12e>
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	0a1b      	lsrs	r3, r3, #8
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d008      	beq.n	8006d64 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	f043 0308 	orr.w	r3, r3, #8
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006d62:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d008      	beq.n	8006d7c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 f8a0 	bl	8007ebc <I2C_ITError>
  }
}
 8006d7c:	bf00      	nop
 8006d7e:	3728      	adds	r7, #40	; 0x28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
 8006de0:	4613      	mov	r3, r2
 8006de2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e62:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e6a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d150      	bne.n	8006f1c <I2C_MasterTransmit_TXE+0xc8>
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
 8006e7c:	2b21      	cmp	r3, #33	; 0x21
 8006e7e:	d14d      	bne.n	8006f1c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d01d      	beq.n	8006ec2 <I2C_MasterTransmit_TXE+0x6e>
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	d01a      	beq.n	8006ec2 <I2C_MasterTransmit_TXE+0x6e>
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e92:	d016      	beq.n	8006ec2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ea2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2211      	movs	r2, #17
 8006ea8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff ff62 	bl	8006d84 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ec0:	e060      	b.n	8006f84 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ed0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2220      	movs	r2, #32
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b40      	cmp	r3, #64	; 0x40
 8006efa:	d107      	bne.n	8006f0c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff ff7d 	bl	8006e04 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f0a:	e03b      	b.n	8006f84 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff ff35 	bl	8006d84 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f1a:	e033      	b.n	8006f84 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	2b21      	cmp	r3, #33	; 0x21
 8006f20:	d005      	beq.n	8006f2e <I2C_MasterTransmit_TXE+0xda>
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2b40      	cmp	r3, #64	; 0x40
 8006f26:	d12d      	bne.n	8006f84 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b22      	cmp	r3, #34	; 0x22
 8006f2c:	d12a      	bne.n	8006f84 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d108      	bne.n	8006f4a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f46:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006f48:	e01c      	b.n	8006f84 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b40      	cmp	r3, #64	; 0x40
 8006f54:	d103      	bne.n	8006f5e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f88e 	bl	8007078 <I2C_MemoryTransmit_TXE_BTF>
}
 8006f5c:	e012      	b.n	8006f84 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f82:	e7ff      	b.n	8006f84 <I2C_MasterTransmit_TXE+0x130>
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b21      	cmp	r3, #33	; 0x21
 8006fa4:	d164      	bne.n	8007070 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d012      	beq.n	8006fd6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	781a      	ldrb	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006fd4:	e04c      	b.n	8007070 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d01d      	beq.n	8007018 <I2C_MasterTransmit_BTF+0x8c>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b20      	cmp	r3, #32
 8006fe0:	d01a      	beq.n	8007018 <I2C_MasterTransmit_BTF+0x8c>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fe8:	d016      	beq.n	8007018 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ff8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2211      	movs	r2, #17
 8006ffe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff feb7 	bl	8006d84 <HAL_I2C_MasterTxCpltCallback>
}
 8007016:	e02b      	b.n	8007070 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007026:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007036:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b40      	cmp	r3, #64	; 0x40
 8007050:	d107      	bne.n	8007062 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff fed2 	bl	8006e04 <HAL_I2C_MemTxCpltCallback>
}
 8007060:	e006      	b.n	8007070 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff fe8a 	bl	8006d84 <HAL_I2C_MasterTxCpltCallback>
}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007086:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708c:	2b00      	cmp	r3, #0
 800708e:	d11d      	bne.n	80070cc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007094:	2b01      	cmp	r3, #1
 8007096:	d10b      	bne.n	80070b0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800709c:	b2da      	uxtb	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a8:	1c9a      	adds	r2, r3, #2
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80070ae:	e073      	b.n	8007198 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	121b      	asrs	r3, r3, #8
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80070ca:	e065      	b.n	8007198 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d10b      	bne.n	80070ec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80070ea:	e055      	b.n	8007198 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d151      	bne.n	8007198 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	2b22      	cmp	r3, #34	; 0x22
 80070f8:	d10d      	bne.n	8007116 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007108:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007114:	e040      	b.n	8007198 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711a:	b29b      	uxth	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d015      	beq.n	800714c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007120:	7bfb      	ldrb	r3, [r7, #15]
 8007122:	2b21      	cmp	r3, #33	; 0x21
 8007124:	d112      	bne.n	800714c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	781a      	ldrb	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	1c5a      	adds	r2, r3, #1
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007140:	b29b      	uxth	r3, r3
 8007142:	3b01      	subs	r3, #1
 8007144:	b29a      	uxth	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800714a:	e025      	b.n	8007198 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007150:	b29b      	uxth	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d120      	bne.n	8007198 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	2b21      	cmp	r3, #33	; 0x21
 800715a:	d11d      	bne.n	8007198 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800716a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800717a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff fe36 	bl	8006e04 <HAL_I2C_MemTxCpltCallback>
}
 8007198:	bf00      	nop
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b22      	cmp	r3, #34	; 0x22
 80071b2:	f040 80ac 	bne.w	800730e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d921      	bls.n	8007208 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	691a      	ldr	r2, [r3, #16]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	3b01      	subs	r3, #1
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	f040 808c 	bne.w	800730e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007204:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007206:	e082      	b.n	800730e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720c:	2b02      	cmp	r3, #2
 800720e:	d075      	beq.n	80072fc <I2C_MasterReceive_RXNE+0x15c>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d002      	beq.n	800721c <I2C_MasterReceive_RXNE+0x7c>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d16f      	bne.n	80072fc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 fae3 	bl	80087e8 <I2C_WaitOnSTOPRequestThroughIT>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d142      	bne.n	80072ae <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007236:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007246:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	691a      	ldr	r2, [r3, #16]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007264:	b29b      	uxth	r3, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	b29a      	uxth	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b40      	cmp	r3, #64	; 0x40
 8007280:	d10a      	bne.n	8007298 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff fdc1 	bl	8006e18 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007296:	e03a      	b.n	800730e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2212      	movs	r2, #18
 80072a4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7ff fd76 	bl	8006d98 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80072ac:	e02f      	b.n	800730e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	691a      	ldr	r2, [r3, #16]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	b2d2      	uxtb	r2, r2
 80072ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072da:	b29b      	uxth	r3, r3
 80072dc:	3b01      	subs	r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2220      	movs	r2, #32
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff fd99 	bl	8006e2c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80072fa:	e008      	b.n	800730e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800730a:	605a      	str	r2, [r3, #4]
}
 800730c:	e7ff      	b.n	800730e <I2C_MasterReceive_RXNE+0x16e>
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007322:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007328:	b29b      	uxth	r3, r3
 800732a:	2b04      	cmp	r3, #4
 800732c:	d11b      	bne.n	8007366 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800733c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	b2d2      	uxtb	r2, r2
 800734a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735a:	b29b      	uxth	r3, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	b29a      	uxth	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007364:	e0bd      	b.n	80074e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736a:	b29b      	uxth	r3, r3
 800736c:	2b03      	cmp	r3, #3
 800736e:	d129      	bne.n	80073c4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2b04      	cmp	r3, #4
 8007384:	d00a      	beq.n	800739c <I2C_MasterReceive_BTF+0x86>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b02      	cmp	r3, #2
 800738a:	d007      	beq.n	800739c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800739a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	691a      	ldr	r2, [r3, #16]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	3b01      	subs	r3, #1
 80073bc:	b29a      	uxth	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80073c2:	e08e      	b.n	80074e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d176      	bne.n	80074bc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d002      	beq.n	80073da <I2C_MasterReceive_BTF+0xc4>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b10      	cmp	r3, #16
 80073d8:	d108      	bne.n	80073ec <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	e019      	b.n	8007420 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d002      	beq.n	80073f8 <I2C_MasterReceive_BTF+0xe2>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d108      	bne.n	800740a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	e00a      	b.n	8007420 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2b10      	cmp	r3, #16
 800740e:	d007      	beq.n	8007420 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800741e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691a      	ldr	r2, [r3, #16]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	b2d2      	uxtb	r2, r2
 800742c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800743c:	b29b      	uxth	r3, r3
 800743e:	3b01      	subs	r3, #1
 8007440:	b29a      	uxth	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	691a      	ldr	r2, [r3, #16]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007462:	b29b      	uxth	r3, r3
 8007464:	3b01      	subs	r3, #1
 8007466:	b29a      	uxth	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800747a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b40      	cmp	r3, #64	; 0x40
 800748e:	d10a      	bne.n	80074a6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7ff fcba 	bl	8006e18 <HAL_I2C_MemRxCpltCallback>
}
 80074a4:	e01d      	b.n	80074e2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2212      	movs	r2, #18
 80074b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff fc6f 	bl	8006d98 <HAL_I2C_MasterRxCpltCallback>
}
 80074ba:	e012      	b.n	80074e2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	691a      	ldr	r2, [r3, #16]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d8:	b29b      	uxth	r3, r3
 80074da:	3b01      	subs	r3, #1
 80074dc:	b29a      	uxth	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80074e2:	bf00      	nop
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b40      	cmp	r3, #64	; 0x40
 80074fc:	d117      	bne.n	800752e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007502:	2b00      	cmp	r3, #0
 8007504:	d109      	bne.n	800751a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750a:	b2db      	uxtb	r3, r3
 800750c:	461a      	mov	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007516:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007518:	e067      	b.n	80075ea <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751e:	b2db      	uxtb	r3, r3
 8007520:	f043 0301 	orr.w	r3, r3, #1
 8007524:	b2da      	uxtb	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	611a      	str	r2, [r3, #16]
}
 800752c:	e05d      	b.n	80075ea <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007536:	d133      	bne.n	80075a0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b21      	cmp	r3, #33	; 0x21
 8007542:	d109      	bne.n	8007558 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007548:	b2db      	uxtb	r3, r3
 800754a:	461a      	mov	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007554:	611a      	str	r2, [r3, #16]
 8007556:	e008      	b.n	800756a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755c:	b2db      	uxtb	r3, r3
 800755e:	f043 0301 	orr.w	r3, r3, #1
 8007562:	b2da      	uxtb	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756e:	2b00      	cmp	r3, #0
 8007570:	d004      	beq.n	800757c <I2C_Master_SB+0x92>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007578:	2b00      	cmp	r3, #0
 800757a:	d108      	bne.n	800758e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007580:	2b00      	cmp	r3, #0
 8007582:	d032      	beq.n	80075ea <I2C_Master_SB+0x100>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758a:	2b00      	cmp	r3, #0
 800758c:	d02d      	beq.n	80075ea <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800759c:	605a      	str	r2, [r3, #4]
}
 800759e:	e024      	b.n	80075ea <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10e      	bne.n	80075c6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	11db      	asrs	r3, r3, #7
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	f003 0306 	and.w	r3, r3, #6
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	f063 030f 	orn	r3, r3, #15
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	611a      	str	r2, [r3, #16]
}
 80075c4:	e011      	b.n	80075ea <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d10d      	bne.n	80075ea <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	11db      	asrs	r3, r3, #7
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	f003 0306 	and.w	r3, r3, #6
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	f063 030e 	orn	r3, r3, #14
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	611a      	str	r2, [r3, #16]
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007602:	b2da      	uxtb	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760e:	2b00      	cmp	r3, #0
 8007610:	d004      	beq.n	800761c <I2C_Master_ADD10+0x26>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d108      	bne.n	800762e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00c      	beq.n	800763e <I2C_Master_ADD10+0x48>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d007      	beq.n	800763e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800763c:	605a      	str	r2, [r3, #4]
  }
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800764a:	b480      	push	{r7}
 800764c:	b091      	sub	sp, #68	; 0x44
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007658:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b22      	cmp	r3, #34	; 0x22
 8007672:	f040 8169 	bne.w	8007948 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10f      	bne.n	800769e <I2C_Master_ADDR+0x54>
 800767e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d10b      	bne.n	800769e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007686:	2300      	movs	r3, #0
 8007688:	633b      	str	r3, [r7, #48]	; 0x30
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	633b      	str	r3, [r7, #48]	; 0x30
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	633b      	str	r3, [r7, #48]	; 0x30
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	e160      	b.n	8007960 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d11d      	bne.n	80076e2 <I2C_Master_ADDR+0x98>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80076ae:	d118      	bne.n	80076e2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076b0:	2300      	movs	r3, #0
 80076b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076d4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	651a      	str	r2, [r3, #80]	; 0x50
 80076e0:	e13e      	b.n	8007960 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d113      	bne.n	8007714 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ec:	2300      	movs	r3, #0
 80076ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	e115      	b.n	8007940 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b01      	cmp	r3, #1
 800771c:	f040 808a 	bne.w	8007834 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007722:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007726:	d137      	bne.n	8007798 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007736:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007746:	d113      	bne.n	8007770 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007756:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007758:	2300      	movs	r3, #0
 800775a:	627b      	str	r3, [r7, #36]	; 0x24
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	e0e7      	b.n	8007940 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007770:	2300      	movs	r3, #0
 8007772:	623b      	str	r3, [r7, #32]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	623b      	str	r3, [r7, #32]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	623b      	str	r3, [r7, #32]
 8007784:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	e0d3      	b.n	8007940 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	2b08      	cmp	r3, #8
 800779c:	d02e      	beq.n	80077fc <I2C_Master_ADDR+0x1b2>
 800779e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a0:	2b20      	cmp	r3, #32
 80077a2:	d02b      	beq.n	80077fc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80077a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a6:	2b12      	cmp	r3, #18
 80077a8:	d102      	bne.n	80077b0 <I2C_Master_ADDR+0x166>
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d125      	bne.n	80077fc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d00e      	beq.n	80077d4 <I2C_Master_ADDR+0x18a>
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d00b      	beq.n	80077d4 <I2C_Master_ADDR+0x18a>
 80077bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077be:	2b10      	cmp	r3, #16
 80077c0:	d008      	beq.n	80077d4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	e007      	b.n	80077e4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077e2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077e4:	2300      	movs	r3, #0
 80077e6:	61fb      	str	r3, [r7, #28]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	61fb      	str	r3, [r7, #28]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	61fb      	str	r3, [r7, #28]
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	e0a1      	b.n	8007940 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800780a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800780c:	2300      	movs	r3, #0
 800780e:	61bb      	str	r3, [r7, #24]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	61bb      	str	r3, [r7, #24]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	61bb      	str	r3, [r7, #24]
 8007820:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	e085      	b.n	8007940 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007838:	b29b      	uxth	r3, r3
 800783a:	2b02      	cmp	r3, #2
 800783c:	d14d      	bne.n	80078da <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800783e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007840:	2b04      	cmp	r3, #4
 8007842:	d016      	beq.n	8007872 <I2C_Master_ADDR+0x228>
 8007844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007846:	2b02      	cmp	r3, #2
 8007848:	d013      	beq.n	8007872 <I2C_Master_ADDR+0x228>
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	2b10      	cmp	r3, #16
 800784e:	d010      	beq.n	8007872 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800785e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	e007      	b.n	8007882 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007880:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800788c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007890:	d117      	bne.n	80078c2 <I2C_Master_ADDR+0x278>
 8007892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007894:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007898:	d00b      	beq.n	80078b2 <I2C_Master_ADDR+0x268>
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789c:	2b01      	cmp	r3, #1
 800789e:	d008      	beq.n	80078b2 <I2C_Master_ADDR+0x268>
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	2b08      	cmp	r3, #8
 80078a4:	d005      	beq.n	80078b2 <I2C_Master_ADDR+0x268>
 80078a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a8:	2b10      	cmp	r3, #16
 80078aa:	d002      	beq.n	80078b2 <I2C_Master_ADDR+0x268>
 80078ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	d107      	bne.n	80078c2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	617b      	str	r3, [r7, #20]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	e032      	b.n	8007940 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078e8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078f8:	d117      	bne.n	800792a <I2C_Master_ADDR+0x2e0>
 80078fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007900:	d00b      	beq.n	800791a <I2C_Master_ADDR+0x2d0>
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	2b01      	cmp	r3, #1
 8007906:	d008      	beq.n	800791a <I2C_Master_ADDR+0x2d0>
 8007908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790a:	2b08      	cmp	r3, #8
 800790c:	d005      	beq.n	800791a <I2C_Master_ADDR+0x2d0>
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	2b10      	cmp	r3, #16
 8007912:	d002      	beq.n	800791a <I2C_Master_ADDR+0x2d0>
 8007914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007916:	2b20      	cmp	r3, #32
 8007918:	d107      	bne.n	800792a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007928:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800792a:	2300      	movs	r3, #0
 800792c:	613b      	str	r3, [r7, #16]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	613b      	str	r3, [r7, #16]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	613b      	str	r3, [r7, #16]
 800793e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007946:	e00b      	b.n	8007960 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007948:	2300      	movs	r3, #0
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	60fb      	str	r3, [r7, #12]
 800795c:	68fb      	ldr	r3, [r7, #12]
}
 800795e:	e7ff      	b.n	8007960 <I2C_Master_ADDR+0x316>
 8007960:	bf00      	nop
 8007962:	3744      	adds	r7, #68	; 0x44
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800797a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d02b      	beq.n	80079de <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	781a      	ldrb	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d114      	bne.n	80079de <I2C_SlaveTransmit_TXE+0x72>
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	2b29      	cmp	r3, #41	; 0x29
 80079b8:	d111      	bne.n	80079de <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2221      	movs	r2, #33	; 0x21
 80079ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2228      	movs	r2, #40	; 0x28
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff f9e7 	bl	8006dac <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80079de:	bf00      	nop
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d011      	beq.n	8007a1c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fc:	781a      	ldrb	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	3b01      	subs	r3, #1
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a36:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d02c      	beq.n	8007a9c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	b2d2      	uxtb	r2, r2
 8007a4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	3b01      	subs	r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d114      	bne.n	8007a9c <I2C_SlaveReceive_RXNE+0x74>
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	2b2a      	cmp	r3, #42	; 0x2a
 8007a76:	d111      	bne.n	8007a9c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a86:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2222      	movs	r2, #34	; 0x22
 8007a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2228      	movs	r2, #40	; 0x28
 8007a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff f992 	bl	8006dc0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007a9c:	bf00      	nop
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d012      	beq.n	8007adc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	b2d2      	uxtb	r2, r2
 8007ac2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b02:	2b28      	cmp	r3, #40	; 0x28
 8007b04:	d127      	bne.n	8007b56 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b14:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	089b      	lsrs	r3, r3, #2
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007b22:	2301      	movs	r3, #1
 8007b24:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	09db      	lsrs	r3, r3, #7
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d103      	bne.n	8007b3a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	81bb      	strh	r3, [r7, #12]
 8007b38:	e002      	b.n	8007b40 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007b48:	89ba      	ldrh	r2, [r7, #12]
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff f940 	bl	8006dd4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007b54:	e00e      	b.n	8007b74 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b56:	2300      	movs	r3, #0
 8007b58:	60bb      	str	r3, [r7, #8]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	60bb      	str	r3, [r7, #8]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	60bb      	str	r3, [r7, #8]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007b74:	bf00      	nop
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b8a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b9a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	60bb      	str	r3, [r7, #8]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	60bb      	str	r3, [r7, #8]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f042 0201 	orr.w	r2, r2, #1
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bc8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bd8:	d172      	bne.n	8007cc0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
 8007bdc:	2b22      	cmp	r3, #34	; 0x22
 8007bde:	d002      	beq.n	8007be6 <I2C_Slave_STOPF+0x6a>
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	2b2a      	cmp	r3, #42	; 0x2a
 8007be4:	d135      	bne.n	8007c52 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d005      	beq.n	8007c0a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	f043 0204 	orr.w	r2, r3, #4
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c18:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fd ff6a 	bl	8005af8 <HAL_DMA_GetState>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d049      	beq.n	8007cbe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2e:	4a69      	ldr	r2, [pc, #420]	; (8007dd4 <I2C_Slave_STOPF+0x258>)
 8007c30:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fd fdb2 	bl	80057a0 <HAL_DMA_Abort_IT>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d03d      	beq.n	8007cbe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c50:	e035      	b.n	8007cbe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d005      	beq.n	8007c76 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	f043 0204 	orr.w	r2, r3, #4
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c84:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fd ff34 	bl	8005af8 <HAL_DMA_GetState>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d014      	beq.n	8007cc0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9a:	4a4e      	ldr	r2, [pc, #312]	; (8007dd4 <I2C_Slave_STOPF+0x258>)
 8007c9c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fd fd7c 	bl	80057a0 <HAL_DMA_Abort_IT>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d008      	beq.n	8007cc0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007cb8:	4610      	mov	r0, r2
 8007cba:	4798      	blx	r3
 8007cbc:	e000      	b.n	8007cc0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cbe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d03e      	beq.n	8007d48 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	f003 0304 	and.w	r3, r3, #4
 8007cd4:	2b04      	cmp	r3, #4
 8007cd6:	d112      	bne.n	8007cfe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	691a      	ldr	r2, [r3, #16]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce2:	b2d2      	uxtb	r2, r2
 8007ce4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	1c5a      	adds	r2, r3, #1
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d08:	2b40      	cmp	r3, #64	; 0x40
 8007d0a:	d112      	bne.n	8007d32 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691a      	ldr	r2, [r3, #16]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	f043 0204 	orr.w	r2, r3, #4
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f8b3 	bl	8007ebc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007d56:	e039      	b.n	8007dcc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d5c:	d109      	bne.n	8007d72 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2228      	movs	r2, #40	; 0x28
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff f827 	bl	8006dc0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b28      	cmp	r3, #40	; 0x28
 8007d7c:	d111      	bne.n	8007da2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a15      	ldr	r2, [pc, #84]	; (8007dd8 <I2C_Slave_STOPF+0x25c>)
 8007d82:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff f828 	bl	8006df0 <HAL_I2C_ListenCpltCallback>
}
 8007da0:	e014      	b.n	8007dcc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da6:	2b22      	cmp	r3, #34	; 0x22
 8007da8:	d002      	beq.n	8007db0 <I2C_Slave_STOPF+0x234>
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
 8007dac:	2b22      	cmp	r3, #34	; 0x22
 8007dae:	d10d      	bne.n	8007dcc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7fe fffa 	bl	8006dc0 <HAL_I2C_SlaveRxCpltCallback>
}
 8007dcc:	bf00      	nop
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	080083e9 	.word	0x080083e9
 8007dd8:	ffff0000 	.word	0xffff0000

08007ddc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d002      	beq.n	8007dfe <I2C_Slave_AF+0x22>
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2b20      	cmp	r3, #32
 8007dfc:	d129      	bne.n	8007e52 <I2C_Slave_AF+0x76>
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	2b28      	cmp	r3, #40	; 0x28
 8007e02:	d126      	bne.n	8007e52 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a2c      	ldr	r2, [pc, #176]	; (8007eb8 <I2C_Slave_AF+0xdc>)
 8007e08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e18:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e22:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e32:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7fe ffd0 	bl	8006df0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007e50:	e02e      	b.n	8007eb0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	2b21      	cmp	r3, #33	; 0x21
 8007e56:	d126      	bne.n	8007ea6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a17      	ldr	r2, [pc, #92]	; (8007eb8 <I2C_Slave_AF+0xdc>)
 8007e5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2221      	movs	r2, #33	; 0x21
 8007e62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2220      	movs	r2, #32
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e82:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e8c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e9c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7fe ff84 	bl	8006dac <HAL_I2C_SlaveTxCpltCallback>
}
 8007ea4:	e004      	b.n	8007eb0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007eae:	615a      	str	r2, [r3, #20]
}
 8007eb0:	bf00      	nop
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	ffff0000 	.word	0xffff0000

08007ebc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ed2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
 8007ed6:	2b10      	cmp	r3, #16
 8007ed8:	d002      	beq.n	8007ee0 <I2C_ITError+0x24>
 8007eda:	7bbb      	ldrb	r3, [r7, #14]
 8007edc:	2b40      	cmp	r3, #64	; 0x40
 8007ede:	d10a      	bne.n	8007ef6 <I2C_ITError+0x3a>
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	2b22      	cmp	r3, #34	; 0x22
 8007ee4:	d107      	bne.n	8007ef6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ef4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
 8007ef8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007efc:	2b28      	cmp	r3, #40	; 0x28
 8007efe:	d107      	bne.n	8007f10 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2228      	movs	r2, #40	; 0x28
 8007f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007f0e:	e015      	b.n	8007f3c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f1e:	d00a      	beq.n	8007f36 <I2C_ITError+0x7a>
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
 8007f22:	2b60      	cmp	r3, #96	; 0x60
 8007f24:	d007      	beq.n	8007f36 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f4a:	d162      	bne.n	8008012 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f5a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d020      	beq.n	8007fac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6e:	4a6a      	ldr	r2, [pc, #424]	; (8008118 <I2C_ITError+0x25c>)
 8007f70:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fd fc12 	bl	80057a0 <HAL_DMA_Abort_IT>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 8089 	beq.w	8008096 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0201 	bic.w	r2, r2, #1
 8007f92:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2220      	movs	r2, #32
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	4798      	blx	r3
 8007faa:	e074      	b.n	8008096 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb0:	4a59      	ldr	r2, [pc, #356]	; (8008118 <I2C_ITError+0x25c>)
 8007fb2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fd fbf1 	bl	80057a0 <HAL_DMA_Abort_IT>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d068      	beq.n	8008096 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fce:	2b40      	cmp	r3, #64	; 0x40
 8007fd0:	d10b      	bne.n	8007fea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	691a      	ldr	r2, [r3, #16]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	b2d2      	uxtb	r2, r2
 8007fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe4:	1c5a      	adds	r2, r3, #1
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0201 	bic.w	r2, r2, #1
 8007ff8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800800c:	4610      	mov	r0, r2
 800800e:	4798      	blx	r3
 8008010:	e041      	b.n	8008096 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b60      	cmp	r3, #96	; 0x60
 800801c:	d125      	bne.n	800806a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008036:	2b40      	cmp	r3, #64	; 0x40
 8008038:	d10b      	bne.n	8008052 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	691a      	ldr	r2, [r3, #16]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	b2d2      	uxtb	r2, r2
 8008046:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0201 	bic.w	r2, r2, #1
 8008060:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7fe feec 	bl	8006e40 <HAL_I2C_AbortCpltCallback>
 8008068:	e015      	b.n	8008096 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008074:	2b40      	cmp	r3, #64	; 0x40
 8008076:	d10b      	bne.n	8008090 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691a      	ldr	r2, [r3, #16]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008082:	b2d2      	uxtb	r2, r2
 8008084:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7fe fecb 	bl	8006e2c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10e      	bne.n	80080c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d109      	bne.n	80080c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d104      	bne.n	80080c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d007      	beq.n	80080d4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80080d2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080da:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d113      	bne.n	8008110 <I2C_ITError+0x254>
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
 80080ea:	2b28      	cmp	r3, #40	; 0x28
 80080ec:	d110      	bne.n	8008110 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a0a      	ldr	r2, [pc, #40]	; (800811c <I2C_ITError+0x260>)
 80080f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2220      	movs	r2, #32
 80080fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7fe fe70 	bl	8006df0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008110:	bf00      	nop
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	080083e9 	.word	0x080083e9
 800811c:	ffff0000 	.word	0xffff0000

08008120 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b088      	sub	sp, #32
 8008124:	af02      	add	r7, sp, #8
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	607a      	str	r2, [r7, #4]
 800812a:	603b      	str	r3, [r7, #0]
 800812c:	460b      	mov	r3, r1
 800812e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008144:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b08      	cmp	r3, #8
 800814a:	d006      	beq.n	800815a <I2C_MasterRequestRead+0x3a>
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d003      	beq.n	800815a <I2C_MasterRequestRead+0x3a>
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008158:	d108      	bne.n	800816c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	e00b      	b.n	8008184 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008170:	2b11      	cmp	r3, #17
 8008172:	d107      	bne.n	8008184 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008182:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 f9d1 	bl	8008538 <I2C_WaitOnFlagUntilTimeout>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00d      	beq.n	80081b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081aa:	d103      	bne.n	80081b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e079      	b.n	80082ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081c0:	d108      	bne.n	80081d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80081c2:	897b      	ldrh	r3, [r7, #10]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	f043 0301 	orr.w	r3, r3, #1
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	611a      	str	r2, [r3, #16]
 80081d2:	e05f      	b.n	8008294 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80081d4:	897b      	ldrh	r3, [r7, #10]
 80081d6:	11db      	asrs	r3, r3, #7
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	f003 0306 	and.w	r3, r3, #6
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	f063 030f 	orn	r3, r3, #15
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	4930      	ldr	r1, [pc, #192]	; (80082b4 <I2C_MasterRequestRead+0x194>)
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 f9f7 	bl	80085e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e054      	b.n	80082ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008202:	897b      	ldrh	r3, [r7, #10]
 8008204:	b2da      	uxtb	r2, r3
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	4929      	ldr	r1, [pc, #164]	; (80082b8 <I2C_MasterRequestRead+0x198>)
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 f9e7 	bl	80085e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e044      	b.n	80082ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008222:	2300      	movs	r3, #0
 8008224:	613b      	str	r3, [r7, #16]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	613b      	str	r3, [r7, #16]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	613b      	str	r3, [r7, #16]
 8008236:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008246:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 f96f 	bl	8008538 <I2C_WaitOnFlagUntilTimeout>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00d      	beq.n	800827c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800826e:	d103      	bne.n	8008278 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008276:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e017      	b.n	80082ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800827c:	897b      	ldrh	r3, [r7, #10]
 800827e:	11db      	asrs	r3, r3, #7
 8008280:	b2db      	uxtb	r3, r3
 8008282:	f003 0306 	and.w	r3, r3, #6
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f063 030e 	orn	r3, r3, #14
 800828c:	b2da      	uxtb	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	4907      	ldr	r1, [pc, #28]	; (80082b8 <I2C_MasterRequestRead+0x198>)
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f000 f9a3 	bl	80085e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e000      	b.n	80082ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	00010008 	.word	0x00010008
 80082b8:	00010002 	.word	0x00010002

080082bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b088      	sub	sp, #32
 80082c0:	af02      	add	r7, sp, #8
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	4608      	mov	r0, r1
 80082c6:	4611      	mov	r1, r2
 80082c8:	461a      	mov	r2, r3
 80082ca:	4603      	mov	r3, r0
 80082cc:	817b      	strh	r3, [r7, #10]
 80082ce:	460b      	mov	r3, r1
 80082d0:	813b      	strh	r3, [r7, #8]
 80082d2:	4613      	mov	r3, r2
 80082d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 f920 	bl	8008538 <I2C_WaitOnFlagUntilTimeout>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00d      	beq.n	800831a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800830c:	d103      	bne.n	8008316 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008314:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e05f      	b.n	80083da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800831a:	897b      	ldrh	r3, [r7, #10]
 800831c:	b2db      	uxtb	r3, r3
 800831e:	461a      	mov	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008328:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	6a3a      	ldr	r2, [r7, #32]
 800832e:	492d      	ldr	r1, [pc, #180]	; (80083e4 <I2C_RequestMemoryWrite+0x128>)
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 f958 	bl	80085e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e04c      	b.n	80083da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008340:	2300      	movs	r3, #0
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	617b      	str	r3, [r7, #20]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008358:	6a39      	ldr	r1, [r7, #32]
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f000 f9c2 	bl	80086e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00d      	beq.n	8008382 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836a:	2b04      	cmp	r3, #4
 800836c:	d107      	bne.n	800837e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800837c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e02b      	b.n	80083da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008382:	88fb      	ldrh	r3, [r7, #6]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d105      	bne.n	8008394 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008388:	893b      	ldrh	r3, [r7, #8]
 800838a:	b2da      	uxtb	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	611a      	str	r2, [r3, #16]
 8008392:	e021      	b.n	80083d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008394:	893b      	ldrh	r3, [r7, #8]
 8008396:	0a1b      	lsrs	r3, r3, #8
 8008398:	b29b      	uxth	r3, r3
 800839a:	b2da      	uxtb	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a4:	6a39      	ldr	r1, [r7, #32]
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 f99c 	bl	80086e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00d      	beq.n	80083ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b6:	2b04      	cmp	r3, #4
 80083b8:	d107      	bne.n	80083ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e005      	b.n	80083da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083ce:	893b      	ldrh	r3, [r7, #8]
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3718      	adds	r7, #24
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	00010002 	.word	0x00010002

080083e8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083f0:	2300      	movs	r3, #0
 80083f2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008400:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008402:	4b4b      	ldr	r3, [pc, #300]	; (8008530 <I2C_DMAAbort+0x148>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	08db      	lsrs	r3, r3, #3
 8008408:	4a4a      	ldr	r2, [pc, #296]	; (8008534 <I2C_DMAAbort+0x14c>)
 800840a:	fba2 2303 	umull	r2, r3, r2, r3
 800840e:	0a1a      	lsrs	r2, r3, #8
 8008410:	4613      	mov	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	00da      	lsls	r2, r3, #3
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d106      	bne.n	8008430 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008426:	f043 0220 	orr.w	r2, r3, #32
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800842e:	e00a      	b.n	8008446 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	3b01      	subs	r3, #1
 8008434:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008444:	d0ea      	beq.n	800841c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844a:	2b00      	cmp	r3, #0
 800844c:	d003      	beq.n	8008456 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008452:	2200      	movs	r2, #0
 8008454:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008462:	2200      	movs	r2, #0
 8008464:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008474:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2200      	movs	r2, #0
 800847a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008488:	2200      	movs	r2, #0
 800848a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008490:	2b00      	cmp	r3, #0
 8008492:	d003      	beq.n	800849c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008498:	2200      	movs	r2, #0
 800849a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f022 0201 	bic.w	r2, r2, #1
 80084aa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b60      	cmp	r3, #96	; 0x60
 80084b6:	d10e      	bne.n	80084d6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	2220      	movs	r2, #32
 80084bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2200      	movs	r2, #0
 80084cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80084ce:	6978      	ldr	r0, [r7, #20]
 80084d0:	f7fe fcb6 	bl	8006e40 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80084d4:	e027      	b.n	8008526 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80084d6:	7cfb      	ldrb	r3, [r7, #19]
 80084d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80084dc:	2b28      	cmp	r3, #40	; 0x28
 80084de:	d117      	bne.n	8008510 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f042 0201 	orr.w	r2, r2, #1
 80084ee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	2200      	movs	r2, #0
 8008504:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2228      	movs	r2, #40	; 0x28
 800850a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800850e:	e007      	b.n	8008520 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2220      	movs	r2, #32
 8008514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008520:	6978      	ldr	r0, [r7, #20]
 8008522:	f7fe fc83 	bl	8006e2c <HAL_I2C_ErrorCallback>
}
 8008526:	bf00      	nop
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	2000028c 	.word	0x2000028c
 8008534:	14f8b589 	.word	0x14f8b589

08008538 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	4613      	mov	r3, r2
 8008546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008548:	e025      	b.n	8008596 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008550:	d021      	beq.n	8008596 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008552:	f7fc fa8f 	bl	8004a74 <HAL_GetTick>
 8008556:	4602      	mov	r2, r0
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d302      	bcc.n	8008568 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d116      	bne.n	8008596 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2220      	movs	r2, #32
 8008572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	f043 0220 	orr.w	r2, r3, #32
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e023      	b.n	80085de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	0c1b      	lsrs	r3, r3, #16
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b01      	cmp	r3, #1
 800859e:	d10d      	bne.n	80085bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	43da      	mvns	r2, r3
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	4013      	ands	r3, r2
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	bf0c      	ite	eq
 80085b2:	2301      	moveq	r3, #1
 80085b4:	2300      	movne	r3, #0
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	461a      	mov	r2, r3
 80085ba:	e00c      	b.n	80085d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	43da      	mvns	r2, r3
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	4013      	ands	r3, r2
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	bf0c      	ite	eq
 80085ce:	2301      	moveq	r3, #1
 80085d0:	2300      	movne	r3, #0
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	461a      	mov	r2, r3
 80085d6:	79fb      	ldrb	r3, [r7, #7]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d0b6      	beq.n	800854a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	60f8      	str	r0, [r7, #12]
 80085ee:	60b9      	str	r1, [r7, #8]
 80085f0:	607a      	str	r2, [r7, #4]
 80085f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085f4:	e051      	b.n	800869a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008604:	d123      	bne.n	800864e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008614:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800861e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2220      	movs	r2, #32
 800862a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	f043 0204 	orr.w	r2, r3, #4
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e046      	b.n	80086dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008654:	d021      	beq.n	800869a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008656:	f7fc fa0d 	bl	8004a74 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	429a      	cmp	r2, r3
 8008664:	d302      	bcc.n	800866c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d116      	bne.n	800869a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2220      	movs	r2, #32
 8008676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008686:	f043 0220 	orr.w	r2, r3, #32
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e020      	b.n	80086dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	0c1b      	lsrs	r3, r3, #16
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d10c      	bne.n	80086be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	43da      	mvns	r2, r3
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	4013      	ands	r3, r2
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	bf14      	ite	ne
 80086b6:	2301      	movne	r3, #1
 80086b8:	2300      	moveq	r3, #0
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	e00b      	b.n	80086d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	43da      	mvns	r2, r3
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	4013      	ands	r3, r2
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	bf14      	ite	ne
 80086d0:	2301      	movne	r3, #1
 80086d2:	2300      	moveq	r3, #0
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d18d      	bne.n	80085f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086f0:	e02d      	b.n	800874e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 f900 	bl	80088f8 <I2C_IsAcknowledgeFailed>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e02d      	b.n	800875e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008708:	d021      	beq.n	800874e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800870a:	f7fc f9b3 	bl	8004a74 <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	429a      	cmp	r2, r3
 8008718:	d302      	bcc.n	8008720 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d116      	bne.n	800874e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2220      	movs	r2, #32
 800872a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873a:	f043 0220 	orr.w	r2, r3, #32
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e007      	b.n	800875e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	695b      	ldr	r3, [r3, #20]
 8008754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008758:	2b80      	cmp	r3, #128	; 0x80
 800875a:	d1ca      	bne.n	80086f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008772:	e02d      	b.n	80087d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f8bf 	bl	80088f8 <I2C_IsAcknowledgeFailed>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e02d      	b.n	80087e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878a:	d021      	beq.n	80087d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800878c:	f7fc f972 	bl	8004a74 <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	429a      	cmp	r2, r3
 800879a:	d302      	bcc.n	80087a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d116      	bne.n	80087d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087bc:	f043 0220 	orr.w	r2, r3, #32
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e007      	b.n	80087e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	f003 0304 	and.w	r3, r3, #4
 80087da:	2b04      	cmp	r3, #4
 80087dc:	d1ca      	bne.n	8008774 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087f0:	2300      	movs	r3, #0
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80087f4:	4b13      	ldr	r3, [pc, #76]	; (8008844 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	08db      	lsrs	r3, r3, #3
 80087fa:	4a13      	ldr	r2, [pc, #76]	; (8008848 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80087fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008800:	0a1a      	lsrs	r2, r3, #8
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3b01      	subs	r3, #1
 800880e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d107      	bne.n	8008826 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881a:	f043 0220 	orr.w	r2, r3, #32
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e008      	b.n	8008838 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008834:	d0e9      	beq.n	800880a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	2000028c 	.word	0x2000028c
 8008848:	14f8b589 	.word	0x14f8b589

0800884c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008858:	e042      	b.n	80088e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	f003 0310 	and.w	r3, r3, #16
 8008864:	2b10      	cmp	r3, #16
 8008866:	d119      	bne.n	800889c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f06f 0210 	mvn.w	r2, #16
 8008870:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2220      	movs	r2, #32
 800887c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e029      	b.n	80088f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800889c:	f7fc f8ea 	bl	8004a74 <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d302      	bcc.n	80088b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d116      	bne.n	80088e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2220      	movs	r2, #32
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088cc:	f043 0220 	orr.w	r2, r3, #32
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e007      	b.n	80088f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ea:	2b40      	cmp	r3, #64	; 0x40
 80088ec:	d1b5      	bne.n	800885a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800890a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800890e:	d11b      	bne.n	8008948 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008918:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2220      	movs	r2, #32
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008934:	f043 0204 	orr.w	r2, r3, #4
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e000      	b.n	800894a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	370c      	adds	r7, #12
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008956:	b480      	push	{r7}
 8008958:	b083      	sub	sp, #12
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008962:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008966:	d103      	bne.n	8008970 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800896e:	e007      	b.n	8008980 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008974:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008978:	d102      	bne.n	8008980 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2208      	movs	r2, #8
 800897e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e267      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d075      	beq.n	8008a96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80089aa:	4b88      	ldr	r3, [pc, #544]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f003 030c 	and.w	r3, r3, #12
 80089b2:	2b04      	cmp	r3, #4
 80089b4:	d00c      	beq.n	80089d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089b6:	4b85      	ldr	r3, [pc, #532]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80089be:	2b08      	cmp	r3, #8
 80089c0:	d112      	bne.n	80089e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089c2:	4b82      	ldr	r3, [pc, #520]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089ce:	d10b      	bne.n	80089e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089d0:	4b7e      	ldr	r3, [pc, #504]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d05b      	beq.n	8008a94 <HAL_RCC_OscConfig+0x108>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d157      	bne.n	8008a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e242      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089f0:	d106      	bne.n	8008a00 <HAL_RCC_OscConfig+0x74>
 80089f2:	4b76      	ldr	r3, [pc, #472]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a75      	ldr	r2, [pc, #468]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 80089f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089fc:	6013      	str	r3, [r2, #0]
 80089fe:	e01d      	b.n	8008a3c <HAL_RCC_OscConfig+0xb0>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a08:	d10c      	bne.n	8008a24 <HAL_RCC_OscConfig+0x98>
 8008a0a:	4b70      	ldr	r3, [pc, #448]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a6f      	ldr	r2, [pc, #444]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	4b6d      	ldr	r3, [pc, #436]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a6c      	ldr	r2, [pc, #432]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a20:	6013      	str	r3, [r2, #0]
 8008a22:	e00b      	b.n	8008a3c <HAL_RCC_OscConfig+0xb0>
 8008a24:	4b69      	ldr	r3, [pc, #420]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a68      	ldr	r2, [pc, #416]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a2e:	6013      	str	r3, [r2, #0]
 8008a30:	4b66      	ldr	r3, [pc, #408]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a65      	ldr	r2, [pc, #404]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d013      	beq.n	8008a6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a44:	f7fc f816 	bl	8004a74 <HAL_GetTick>
 8008a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a4a:	e008      	b.n	8008a5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a4c:	f7fc f812 	bl	8004a74 <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	2b64      	cmp	r3, #100	; 0x64
 8008a58:	d901      	bls.n	8008a5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e207      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a5e:	4b5b      	ldr	r3, [pc, #364]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d0f0      	beq.n	8008a4c <HAL_RCC_OscConfig+0xc0>
 8008a6a:	e014      	b.n	8008a96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a6c:	f7fc f802 	bl	8004a74 <HAL_GetTick>
 8008a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a72:	e008      	b.n	8008a86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a74:	f7fb fffe 	bl	8004a74 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	2b64      	cmp	r3, #100	; 0x64
 8008a80:	d901      	bls.n	8008a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e1f3      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a86:	4b51      	ldr	r3, [pc, #324]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1f0      	bne.n	8008a74 <HAL_RCC_OscConfig+0xe8>
 8008a92:	e000      	b.n	8008a96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0302 	and.w	r3, r3, #2
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d063      	beq.n	8008b6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008aa2:	4b4a      	ldr	r3, [pc, #296]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f003 030c 	and.w	r3, r3, #12
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00b      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008aae:	4b47      	ldr	r3, [pc, #284]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008ab6:	2b08      	cmp	r3, #8
 8008ab8:	d11c      	bne.n	8008af4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008aba:	4b44      	ldr	r3, [pc, #272]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d116      	bne.n	8008af4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ac6:	4b41      	ldr	r3, [pc, #260]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0302 	and.w	r3, r3, #2
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d005      	beq.n	8008ade <HAL_RCC_OscConfig+0x152>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d001      	beq.n	8008ade <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e1c7      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ade:	4b3b      	ldr	r3, [pc, #236]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	00db      	lsls	r3, r3, #3
 8008aec:	4937      	ldr	r1, [pc, #220]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008af2:	e03a      	b.n	8008b6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d020      	beq.n	8008b3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008afc:	4b34      	ldr	r3, [pc, #208]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008afe:	2201      	movs	r2, #1
 8008b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b02:	f7fb ffb7 	bl	8004a74 <HAL_GetTick>
 8008b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b08:	e008      	b.n	8008b1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b0a:	f7fb ffb3 	bl	8004a74 <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d901      	bls.n	8008b1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e1a8      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b1c:	4b2b      	ldr	r3, [pc, #172]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d0f0      	beq.n	8008b0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b28:	4b28      	ldr	r3, [pc, #160]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	00db      	lsls	r3, r3, #3
 8008b36:	4925      	ldr	r1, [pc, #148]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	600b      	str	r3, [r1, #0]
 8008b3c:	e015      	b.n	8008b6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b3e:	4b24      	ldr	r3, [pc, #144]	; (8008bd0 <HAL_RCC_OscConfig+0x244>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b44:	f7fb ff96 	bl	8004a74 <HAL_GetTick>
 8008b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b4a:	e008      	b.n	8008b5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b4c:	f7fb ff92 	bl	8004a74 <HAL_GetTick>
 8008b50:	4602      	mov	r2, r0
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d901      	bls.n	8008b5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e187      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b5e:	4b1b      	ldr	r3, [pc, #108]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0302 	and.w	r3, r3, #2
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1f0      	bne.n	8008b4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0308 	and.w	r3, r3, #8
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d036      	beq.n	8008be4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d016      	beq.n	8008bac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b7e:	4b15      	ldr	r3, [pc, #84]	; (8008bd4 <HAL_RCC_OscConfig+0x248>)
 8008b80:	2201      	movs	r2, #1
 8008b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b84:	f7fb ff76 	bl	8004a74 <HAL_GetTick>
 8008b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b8a:	e008      	b.n	8008b9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b8c:	f7fb ff72 	bl	8004a74 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d901      	bls.n	8008b9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e167      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b9e:	4b0b      	ldr	r3, [pc, #44]	; (8008bcc <HAL_RCC_OscConfig+0x240>)
 8008ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d0f0      	beq.n	8008b8c <HAL_RCC_OscConfig+0x200>
 8008baa:	e01b      	b.n	8008be4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008bac:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <HAL_RCC_OscConfig+0x248>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008bb2:	f7fb ff5f 	bl	8004a74 <HAL_GetTick>
 8008bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bb8:	e00e      	b.n	8008bd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bba:	f7fb ff5b 	bl	8004a74 <HAL_GetTick>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d907      	bls.n	8008bd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e150      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
 8008bcc:	40023800 	.word	0x40023800
 8008bd0:	42470000 	.word	0x42470000
 8008bd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bd8:	4b88      	ldr	r3, [pc, #544]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bdc:	f003 0302 	and.w	r3, r3, #2
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1ea      	bne.n	8008bba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0304 	and.w	r3, r3, #4
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 8097 	beq.w	8008d20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008bf6:	4b81      	ldr	r3, [pc, #516]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10f      	bne.n	8008c22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c02:	2300      	movs	r3, #0
 8008c04:	60bb      	str	r3, [r7, #8]
 8008c06:	4b7d      	ldr	r3, [pc, #500]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0a:	4a7c      	ldr	r2, [pc, #496]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c10:	6413      	str	r3, [r2, #64]	; 0x40
 8008c12:	4b7a      	ldr	r3, [pc, #488]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c1a:	60bb      	str	r3, [r7, #8]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c22:	4b77      	ldr	r3, [pc, #476]	; (8008e00 <HAL_RCC_OscConfig+0x474>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d118      	bne.n	8008c60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c2e:	4b74      	ldr	r3, [pc, #464]	; (8008e00 <HAL_RCC_OscConfig+0x474>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a73      	ldr	r2, [pc, #460]	; (8008e00 <HAL_RCC_OscConfig+0x474>)
 8008c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c3a:	f7fb ff1b 	bl	8004a74 <HAL_GetTick>
 8008c3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c40:	e008      	b.n	8008c54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c42:	f7fb ff17 	bl	8004a74 <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d901      	bls.n	8008c54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e10c      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c54:	4b6a      	ldr	r3, [pc, #424]	; (8008e00 <HAL_RCC_OscConfig+0x474>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d0f0      	beq.n	8008c42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d106      	bne.n	8008c76 <HAL_RCC_OscConfig+0x2ea>
 8008c68:	4b64      	ldr	r3, [pc, #400]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6c:	4a63      	ldr	r2, [pc, #396]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008c6e:	f043 0301 	orr.w	r3, r3, #1
 8008c72:	6713      	str	r3, [r2, #112]	; 0x70
 8008c74:	e01c      	b.n	8008cb0 <HAL_RCC_OscConfig+0x324>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	2b05      	cmp	r3, #5
 8008c7c:	d10c      	bne.n	8008c98 <HAL_RCC_OscConfig+0x30c>
 8008c7e:	4b5f      	ldr	r3, [pc, #380]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c82:	4a5e      	ldr	r2, [pc, #376]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008c84:	f043 0304 	orr.w	r3, r3, #4
 8008c88:	6713      	str	r3, [r2, #112]	; 0x70
 8008c8a:	4b5c      	ldr	r3, [pc, #368]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8e:	4a5b      	ldr	r2, [pc, #364]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008c90:	f043 0301 	orr.w	r3, r3, #1
 8008c94:	6713      	str	r3, [r2, #112]	; 0x70
 8008c96:	e00b      	b.n	8008cb0 <HAL_RCC_OscConfig+0x324>
 8008c98:	4b58      	ldr	r3, [pc, #352]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c9c:	4a57      	ldr	r2, [pc, #348]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008c9e:	f023 0301 	bic.w	r3, r3, #1
 8008ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ca4:	4b55      	ldr	r3, [pc, #340]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca8:	4a54      	ldr	r2, [pc, #336]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008caa:	f023 0304 	bic.w	r3, r3, #4
 8008cae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d015      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cb8:	f7fb fedc 	bl	8004a74 <HAL_GetTick>
 8008cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cbe:	e00a      	b.n	8008cd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cc0:	f7fb fed8 	bl	8004a74 <HAL_GetTick>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d901      	bls.n	8008cd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e0cb      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cd6:	4b49      	ldr	r3, [pc, #292]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d0ee      	beq.n	8008cc0 <HAL_RCC_OscConfig+0x334>
 8008ce2:	e014      	b.n	8008d0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ce4:	f7fb fec6 	bl	8004a74 <HAL_GetTick>
 8008ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cea:	e00a      	b.n	8008d02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cec:	f7fb fec2 	bl	8004a74 <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d901      	bls.n	8008d02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e0b5      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d02:	4b3e      	ldr	r3, [pc, #248]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d06:	f003 0302 	and.w	r3, r3, #2
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1ee      	bne.n	8008cec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d105      	bne.n	8008d20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d14:	4b39      	ldr	r3, [pc, #228]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d18:	4a38      	ldr	r2, [pc, #224]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 80a1 	beq.w	8008e6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d2a:	4b34      	ldr	r3, [pc, #208]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f003 030c 	and.w	r3, r3, #12
 8008d32:	2b08      	cmp	r3, #8
 8008d34:	d05c      	beq.n	8008df0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d141      	bne.n	8008dc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d3e:	4b31      	ldr	r3, [pc, #196]	; (8008e04 <HAL_RCC_OscConfig+0x478>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d44:	f7fb fe96 	bl	8004a74 <HAL_GetTick>
 8008d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d4a:	e008      	b.n	8008d5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d4c:	f7fb fe92 	bl	8004a74 <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e087      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d5e:	4b27      	ldr	r3, [pc, #156]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1f0      	bne.n	8008d4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	69da      	ldr	r2, [r3, #28]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	431a      	orrs	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d78:	019b      	lsls	r3, r3, #6
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d80:	085b      	lsrs	r3, r3, #1
 8008d82:	3b01      	subs	r3, #1
 8008d84:	041b      	lsls	r3, r3, #16
 8008d86:	431a      	orrs	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	061b      	lsls	r3, r3, #24
 8008d8e:	491b      	ldr	r1, [pc, #108]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d94:	4b1b      	ldr	r3, [pc, #108]	; (8008e04 <HAL_RCC_OscConfig+0x478>)
 8008d96:	2201      	movs	r2, #1
 8008d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d9a:	f7fb fe6b 	bl	8004a74 <HAL_GetTick>
 8008d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008da0:	e008      	b.n	8008db4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008da2:	f7fb fe67 	bl	8004a74 <HAL_GetTick>
 8008da6:	4602      	mov	r2, r0
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d901      	bls.n	8008db4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e05c      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008db4:	4b11      	ldr	r3, [pc, #68]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d0f0      	beq.n	8008da2 <HAL_RCC_OscConfig+0x416>
 8008dc0:	e054      	b.n	8008e6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dc2:	4b10      	ldr	r3, [pc, #64]	; (8008e04 <HAL_RCC_OscConfig+0x478>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dc8:	f7fb fe54 	bl	8004a74 <HAL_GetTick>
 8008dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dce:	e008      	b.n	8008de2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008dd0:	f7fb fe50 	bl	8004a74 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d901      	bls.n	8008de2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e045      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008de2:	4b06      	ldr	r3, [pc, #24]	; (8008dfc <HAL_RCC_OscConfig+0x470>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1f0      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x444>
 8008dee:	e03d      	b.n	8008e6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d107      	bne.n	8008e08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e038      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
 8008dfc:	40023800 	.word	0x40023800
 8008e00:	40007000 	.word	0x40007000
 8008e04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008e08:	4b1b      	ldr	r3, [pc, #108]	; (8008e78 <HAL_RCC_OscConfig+0x4ec>)
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d028      	beq.n	8008e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d121      	bne.n	8008e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d11a      	bne.n	8008e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008e38:	4013      	ands	r3, r2
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d111      	bne.n	8008e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4e:	085b      	lsrs	r3, r3, #1
 8008e50:	3b01      	subs	r3, #1
 8008e52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d107      	bne.n	8008e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d001      	beq.n	8008e6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e000      	b.n	8008e6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3718      	adds	r7, #24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	40023800 	.word	0x40023800

08008e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d101      	bne.n	8008e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e0cc      	b.n	800902a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e90:	4b68      	ldr	r3, [pc, #416]	; (8009034 <HAL_RCC_ClockConfig+0x1b8>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0307 	and.w	r3, r3, #7
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d90c      	bls.n	8008eb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e9e:	4b65      	ldr	r3, [pc, #404]	; (8009034 <HAL_RCC_ClockConfig+0x1b8>)
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	b2d2      	uxtb	r2, r2
 8008ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ea6:	4b63      	ldr	r3, [pc, #396]	; (8009034 <HAL_RCC_ClockConfig+0x1b8>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0307 	and.w	r3, r3, #7
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d001      	beq.n	8008eb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e0b8      	b.n	800902a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0302 	and.w	r3, r3, #2
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d020      	beq.n	8008f06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d005      	beq.n	8008edc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ed0:	4b59      	ldr	r3, [pc, #356]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	4a58      	ldr	r2, [pc, #352]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 8008ed6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008eda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0308 	and.w	r3, r3, #8
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d005      	beq.n	8008ef4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ee8:	4b53      	ldr	r3, [pc, #332]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	4a52      	ldr	r2, [pc, #328]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 8008eee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008ef2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ef4:	4b50      	ldr	r3, [pc, #320]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	494d      	ldr	r1, [pc, #308]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d044      	beq.n	8008f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d107      	bne.n	8008f2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f1a:	4b47      	ldr	r3, [pc, #284]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d119      	bne.n	8008f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e07f      	b.n	800902a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d003      	beq.n	8008f3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	d107      	bne.n	8008f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f3a:	4b3f      	ldr	r3, [pc, #252]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d109      	bne.n	8008f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e06f      	b.n	800902a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f4a:	4b3b      	ldr	r3, [pc, #236]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0302 	and.w	r3, r3, #2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e067      	b.n	800902a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f5a:	4b37      	ldr	r3, [pc, #220]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	f023 0203 	bic.w	r2, r3, #3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	4934      	ldr	r1, [pc, #208]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008f6c:	f7fb fd82 	bl	8004a74 <HAL_GetTick>
 8008f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f72:	e00a      	b.n	8008f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f74:	f7fb fd7e 	bl	8004a74 <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d901      	bls.n	8008f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e04f      	b.n	800902a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f8a:	4b2b      	ldr	r3, [pc, #172]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f003 020c 	and.w	r2, r3, #12
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d1eb      	bne.n	8008f74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f9c:	4b25      	ldr	r3, [pc, #148]	; (8009034 <HAL_RCC_ClockConfig+0x1b8>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0307 	and.w	r3, r3, #7
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d20c      	bcs.n	8008fc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008faa:	4b22      	ldr	r3, [pc, #136]	; (8009034 <HAL_RCC_ClockConfig+0x1b8>)
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	b2d2      	uxtb	r2, r2
 8008fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fb2:	4b20      	ldr	r3, [pc, #128]	; (8009034 <HAL_RCC_ClockConfig+0x1b8>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0307 	and.w	r3, r3, #7
 8008fba:	683a      	ldr	r2, [r7, #0]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d001      	beq.n	8008fc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e032      	b.n	800902a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0304 	and.w	r3, r3, #4
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d008      	beq.n	8008fe2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fd0:	4b19      	ldr	r3, [pc, #100]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	4916      	ldr	r1, [pc, #88]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 0308 	and.w	r3, r3, #8
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d009      	beq.n	8009002 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008fee:	4b12      	ldr	r3, [pc, #72]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	00db      	lsls	r3, r3, #3
 8008ffc:	490e      	ldr	r1, [pc, #56]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 8008ffe:	4313      	orrs	r3, r2
 8009000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009002:	f000 f821 	bl	8009048 <HAL_RCC_GetSysClockFreq>
 8009006:	4602      	mov	r2, r0
 8009008:	4b0b      	ldr	r3, [pc, #44]	; (8009038 <HAL_RCC_ClockConfig+0x1bc>)
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	091b      	lsrs	r3, r3, #4
 800900e:	f003 030f 	and.w	r3, r3, #15
 8009012:	490a      	ldr	r1, [pc, #40]	; (800903c <HAL_RCC_ClockConfig+0x1c0>)
 8009014:	5ccb      	ldrb	r3, [r1, r3]
 8009016:	fa22 f303 	lsr.w	r3, r2, r3
 800901a:	4a09      	ldr	r2, [pc, #36]	; (8009040 <HAL_RCC_ClockConfig+0x1c4>)
 800901c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800901e:	4b09      	ldr	r3, [pc, #36]	; (8009044 <HAL_RCC_ClockConfig+0x1c8>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4618      	mov	r0, r3
 8009024:	f7fb fce2 	bl	80049ec <HAL_InitTick>

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	40023c00 	.word	0x40023c00
 8009038:	40023800 	.word	0x40023800
 800903c:	0800e1f0 	.word	0x0800e1f0
 8009040:	2000028c 	.word	0x2000028c
 8009044:	20000290 	.word	0x20000290

08009048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800904c:	b094      	sub	sp, #80	; 0x50
 800904e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009050:	2300      	movs	r3, #0
 8009052:	647b      	str	r3, [r7, #68]	; 0x44
 8009054:	2300      	movs	r3, #0
 8009056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009058:	2300      	movs	r3, #0
 800905a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800905c:	2300      	movs	r3, #0
 800905e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009060:	4b79      	ldr	r3, [pc, #484]	; (8009248 <HAL_RCC_GetSysClockFreq+0x200>)
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	f003 030c 	and.w	r3, r3, #12
 8009068:	2b08      	cmp	r3, #8
 800906a:	d00d      	beq.n	8009088 <HAL_RCC_GetSysClockFreq+0x40>
 800906c:	2b08      	cmp	r3, #8
 800906e:	f200 80e1 	bhi.w	8009234 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <HAL_RCC_GetSysClockFreq+0x34>
 8009076:	2b04      	cmp	r3, #4
 8009078:	d003      	beq.n	8009082 <HAL_RCC_GetSysClockFreq+0x3a>
 800907a:	e0db      	b.n	8009234 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800907c:	4b73      	ldr	r3, [pc, #460]	; (800924c <HAL_RCC_GetSysClockFreq+0x204>)
 800907e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009080:	e0db      	b.n	800923a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009082:	4b73      	ldr	r3, [pc, #460]	; (8009250 <HAL_RCC_GetSysClockFreq+0x208>)
 8009084:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009086:	e0d8      	b.n	800923a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009088:	4b6f      	ldr	r3, [pc, #444]	; (8009248 <HAL_RCC_GetSysClockFreq+0x200>)
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009090:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009092:	4b6d      	ldr	r3, [pc, #436]	; (8009248 <HAL_RCC_GetSysClockFreq+0x200>)
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d063      	beq.n	8009166 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800909e:	4b6a      	ldr	r3, [pc, #424]	; (8009248 <HAL_RCC_GetSysClockFreq+0x200>)
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	099b      	lsrs	r3, r3, #6
 80090a4:	2200      	movs	r2, #0
 80090a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80090a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80090aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b0:	633b      	str	r3, [r7, #48]	; 0x30
 80090b2:	2300      	movs	r3, #0
 80090b4:	637b      	str	r3, [r7, #52]	; 0x34
 80090b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80090ba:	4622      	mov	r2, r4
 80090bc:	462b      	mov	r3, r5
 80090be:	f04f 0000 	mov.w	r0, #0
 80090c2:	f04f 0100 	mov.w	r1, #0
 80090c6:	0159      	lsls	r1, r3, #5
 80090c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090cc:	0150      	lsls	r0, r2, #5
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	4621      	mov	r1, r4
 80090d4:	1a51      	subs	r1, r2, r1
 80090d6:	6139      	str	r1, [r7, #16]
 80090d8:	4629      	mov	r1, r5
 80090da:	eb63 0301 	sbc.w	r3, r3, r1
 80090de:	617b      	str	r3, [r7, #20]
 80090e0:	f04f 0200 	mov.w	r2, #0
 80090e4:	f04f 0300 	mov.w	r3, #0
 80090e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090ec:	4659      	mov	r1, fp
 80090ee:	018b      	lsls	r3, r1, #6
 80090f0:	4651      	mov	r1, sl
 80090f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80090f6:	4651      	mov	r1, sl
 80090f8:	018a      	lsls	r2, r1, #6
 80090fa:	4651      	mov	r1, sl
 80090fc:	ebb2 0801 	subs.w	r8, r2, r1
 8009100:	4659      	mov	r1, fp
 8009102:	eb63 0901 	sbc.w	r9, r3, r1
 8009106:	f04f 0200 	mov.w	r2, #0
 800910a:	f04f 0300 	mov.w	r3, #0
 800910e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800911a:	4690      	mov	r8, r2
 800911c:	4699      	mov	r9, r3
 800911e:	4623      	mov	r3, r4
 8009120:	eb18 0303 	adds.w	r3, r8, r3
 8009124:	60bb      	str	r3, [r7, #8]
 8009126:	462b      	mov	r3, r5
 8009128:	eb49 0303 	adc.w	r3, r9, r3
 800912c:	60fb      	str	r3, [r7, #12]
 800912e:	f04f 0200 	mov.w	r2, #0
 8009132:	f04f 0300 	mov.w	r3, #0
 8009136:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800913a:	4629      	mov	r1, r5
 800913c:	024b      	lsls	r3, r1, #9
 800913e:	4621      	mov	r1, r4
 8009140:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009144:	4621      	mov	r1, r4
 8009146:	024a      	lsls	r2, r1, #9
 8009148:	4610      	mov	r0, r2
 800914a:	4619      	mov	r1, r3
 800914c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800914e:	2200      	movs	r2, #0
 8009150:	62bb      	str	r3, [r7, #40]	; 0x28
 8009152:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009154:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009158:	f7f7 fd22 	bl	8000ba0 <__aeabi_uldivmod>
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4613      	mov	r3, r2
 8009162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009164:	e058      	b.n	8009218 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009166:	4b38      	ldr	r3, [pc, #224]	; (8009248 <HAL_RCC_GetSysClockFreq+0x200>)
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	099b      	lsrs	r3, r3, #6
 800916c:	2200      	movs	r2, #0
 800916e:	4618      	mov	r0, r3
 8009170:	4611      	mov	r1, r2
 8009172:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009176:	623b      	str	r3, [r7, #32]
 8009178:	2300      	movs	r3, #0
 800917a:	627b      	str	r3, [r7, #36]	; 0x24
 800917c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009180:	4642      	mov	r2, r8
 8009182:	464b      	mov	r3, r9
 8009184:	f04f 0000 	mov.w	r0, #0
 8009188:	f04f 0100 	mov.w	r1, #0
 800918c:	0159      	lsls	r1, r3, #5
 800918e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009192:	0150      	lsls	r0, r2, #5
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4641      	mov	r1, r8
 800919a:	ebb2 0a01 	subs.w	sl, r2, r1
 800919e:	4649      	mov	r1, r9
 80091a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80091a4:	f04f 0200 	mov.w	r2, #0
 80091a8:	f04f 0300 	mov.w	r3, #0
 80091ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80091b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80091b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80091b8:	ebb2 040a 	subs.w	r4, r2, sl
 80091bc:	eb63 050b 	sbc.w	r5, r3, fp
 80091c0:	f04f 0200 	mov.w	r2, #0
 80091c4:	f04f 0300 	mov.w	r3, #0
 80091c8:	00eb      	lsls	r3, r5, #3
 80091ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091ce:	00e2      	lsls	r2, r4, #3
 80091d0:	4614      	mov	r4, r2
 80091d2:	461d      	mov	r5, r3
 80091d4:	4643      	mov	r3, r8
 80091d6:	18e3      	adds	r3, r4, r3
 80091d8:	603b      	str	r3, [r7, #0]
 80091da:	464b      	mov	r3, r9
 80091dc:	eb45 0303 	adc.w	r3, r5, r3
 80091e0:	607b      	str	r3, [r7, #4]
 80091e2:	f04f 0200 	mov.w	r2, #0
 80091e6:	f04f 0300 	mov.w	r3, #0
 80091ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80091ee:	4629      	mov	r1, r5
 80091f0:	028b      	lsls	r3, r1, #10
 80091f2:	4621      	mov	r1, r4
 80091f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80091f8:	4621      	mov	r1, r4
 80091fa:	028a      	lsls	r2, r1, #10
 80091fc:	4610      	mov	r0, r2
 80091fe:	4619      	mov	r1, r3
 8009200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009202:	2200      	movs	r2, #0
 8009204:	61bb      	str	r3, [r7, #24]
 8009206:	61fa      	str	r2, [r7, #28]
 8009208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800920c:	f7f7 fcc8 	bl	8000ba0 <__aeabi_uldivmod>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	4613      	mov	r3, r2
 8009216:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009218:	4b0b      	ldr	r3, [pc, #44]	; (8009248 <HAL_RCC_GetSysClockFreq+0x200>)
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	0c1b      	lsrs	r3, r3, #16
 800921e:	f003 0303 	and.w	r3, r3, #3
 8009222:	3301      	adds	r3, #1
 8009224:	005b      	lsls	r3, r3, #1
 8009226:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009228:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800922a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800922c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009230:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009232:	e002      	b.n	800923a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009234:	4b05      	ldr	r3, [pc, #20]	; (800924c <HAL_RCC_GetSysClockFreq+0x204>)
 8009236:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800923a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800923c:	4618      	mov	r0, r3
 800923e:	3750      	adds	r7, #80	; 0x50
 8009240:	46bd      	mov	sp, r7
 8009242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009246:	bf00      	nop
 8009248:	40023800 	.word	0x40023800
 800924c:	00f42400 	.word	0x00f42400
 8009250:	007a1200 	.word	0x007a1200

08009254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009254:	b480      	push	{r7}
 8009256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009258:	4b03      	ldr	r3, [pc, #12]	; (8009268 <HAL_RCC_GetHCLKFreq+0x14>)
 800925a:	681b      	ldr	r3, [r3, #0]
}
 800925c:	4618      	mov	r0, r3
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	2000028c 	.word	0x2000028c

0800926c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009270:	f7ff fff0 	bl	8009254 <HAL_RCC_GetHCLKFreq>
 8009274:	4602      	mov	r2, r0
 8009276:	4b05      	ldr	r3, [pc, #20]	; (800928c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	0a9b      	lsrs	r3, r3, #10
 800927c:	f003 0307 	and.w	r3, r3, #7
 8009280:	4903      	ldr	r1, [pc, #12]	; (8009290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009282:	5ccb      	ldrb	r3, [r1, r3]
 8009284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009288:	4618      	mov	r0, r3
 800928a:	bd80      	pop	{r7, pc}
 800928c:	40023800 	.word	0x40023800
 8009290:	0800e200 	.word	0x0800e200

08009294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009298:	f7ff ffdc 	bl	8009254 <HAL_RCC_GetHCLKFreq>
 800929c:	4602      	mov	r2, r0
 800929e:	4b05      	ldr	r3, [pc, #20]	; (80092b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	0b5b      	lsrs	r3, r3, #13
 80092a4:	f003 0307 	and.w	r3, r3, #7
 80092a8:	4903      	ldr	r1, [pc, #12]	; (80092b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092aa:	5ccb      	ldrb	r3, [r1, r3]
 80092ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	40023800 	.word	0x40023800
 80092b8:	0800e200 	.word	0x0800e200

080092bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e04c      	b.n	8009368 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d111      	bne.n	80092fe <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f001 fc02 	bl	800aaec <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d102      	bne.n	80092f6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a1f      	ldr	r2, [pc, #124]	; (8009370 <HAL_TIM_Base_Init+0xb4>)
 80092f4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2202      	movs	r2, #2
 8009302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	3304      	adds	r3, #4
 800930e:	4619      	mov	r1, r3
 8009310:	4610      	mov	r0, r2
 8009312:	f001 f91f 	bl	800a554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2201      	movs	r2, #1
 8009332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	08004569 	.word	0x08004569

08009374 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b01      	cmp	r3, #1
 8009386:	d001      	beq.n	800938c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e03c      	b.n	8009406 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2202      	movs	r2, #2
 8009390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a1e      	ldr	r2, [pc, #120]	; (8009414 <HAL_TIM_Base_Start+0xa0>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d018      	beq.n	80093d0 <HAL_TIM_Base_Start+0x5c>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093a6:	d013      	beq.n	80093d0 <HAL_TIM_Base_Start+0x5c>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a1a      	ldr	r2, [pc, #104]	; (8009418 <HAL_TIM_Base_Start+0xa4>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d00e      	beq.n	80093d0 <HAL_TIM_Base_Start+0x5c>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a19      	ldr	r2, [pc, #100]	; (800941c <HAL_TIM_Base_Start+0xa8>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d009      	beq.n	80093d0 <HAL_TIM_Base_Start+0x5c>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a17      	ldr	r2, [pc, #92]	; (8009420 <HAL_TIM_Base_Start+0xac>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d004      	beq.n	80093d0 <HAL_TIM_Base_Start+0x5c>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a16      	ldr	r2, [pc, #88]	; (8009424 <HAL_TIM_Base_Start+0xb0>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d111      	bne.n	80093f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f003 0307 	and.w	r3, r3, #7
 80093da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2b06      	cmp	r3, #6
 80093e0:	d010      	beq.n	8009404 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f042 0201 	orr.w	r2, r2, #1
 80093f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093f2:	e007      	b.n	8009404 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f042 0201 	orr.w	r2, r2, #1
 8009402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	40010000 	.word	0x40010000
 8009418:	40000400 	.word	0x40000400
 800941c:	40000800 	.word	0x40000800
 8009420:	40000c00 	.word	0x40000c00
 8009424:	40014000 	.word	0x40014000

08009428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009436:	b2db      	uxtb	r3, r3
 8009438:	2b01      	cmp	r3, #1
 800943a:	d001      	beq.n	8009440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e044      	b.n	80094ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2202      	movs	r2, #2
 8009444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68da      	ldr	r2, [r3, #12]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f042 0201 	orr.w	r2, r2, #1
 8009456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a1e      	ldr	r2, [pc, #120]	; (80094d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d018      	beq.n	8009494 <HAL_TIM_Base_Start_IT+0x6c>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800946a:	d013      	beq.n	8009494 <HAL_TIM_Base_Start_IT+0x6c>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a1a      	ldr	r2, [pc, #104]	; (80094dc <HAL_TIM_Base_Start_IT+0xb4>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d00e      	beq.n	8009494 <HAL_TIM_Base_Start_IT+0x6c>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a19      	ldr	r2, [pc, #100]	; (80094e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d009      	beq.n	8009494 <HAL_TIM_Base_Start_IT+0x6c>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a17      	ldr	r2, [pc, #92]	; (80094e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d004      	beq.n	8009494 <HAL_TIM_Base_Start_IT+0x6c>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a16      	ldr	r2, [pc, #88]	; (80094e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d111      	bne.n	80094b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f003 0307 	and.w	r3, r3, #7
 800949e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2b06      	cmp	r3, #6
 80094a4:	d010      	beq.n	80094c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f042 0201 	orr.w	r2, r2, #1
 80094b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094b6:	e007      	b.n	80094c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f042 0201 	orr.w	r2, r2, #1
 80094c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	40010000 	.word	0x40010000
 80094dc:	40000400 	.word	0x40000400
 80094e0:	40000800 	.word	0x40000800
 80094e4:	40000c00 	.word	0x40000c00
 80094e8:	40014000 	.word	0x40014000

080094ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d101      	bne.n	80094fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e04c      	b.n	8009598 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d111      	bne.n	800952e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f001 faea 	bl	800aaec <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800951c:	2b00      	cmp	r3, #0
 800951e:	d102      	bne.n	8009526 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a1f      	ldr	r2, [pc, #124]	; (80095a0 <HAL_TIM_OC_Init+0xb4>)
 8009524:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2202      	movs	r2, #2
 8009532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	3304      	adds	r3, #4
 800953e:	4619      	mov	r1, r3
 8009540:	4610      	mov	r0, r2
 8009542:	f001 f807 	bl	800a554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2201      	movs	r2, #1
 8009582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	080095a5 	.word	0x080095a5

080095a4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d101      	bne.n	80095ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e04c      	b.n	8009664 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d111      	bne.n	80095fa <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f001 fa84 	bl	800aaec <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d102      	bne.n	80095f2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a1f      	ldr	r2, [pc, #124]	; (800966c <HAL_TIM_PWM_Init+0xb4>)
 80095f0:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2202      	movs	r2, #2
 80095fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	3304      	adds	r3, #4
 800960a:	4619      	mov	r1, r3
 800960c:	4610      	mov	r0, r2
 800960e:	f000 ffa1 	bl	800a554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	08004519 	.word	0x08004519

08009670 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d109      	bne.n	8009694 <HAL_TIM_PWM_Start+0x24>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2b01      	cmp	r3, #1
 800968a:	bf14      	ite	ne
 800968c:	2301      	movne	r3, #1
 800968e:	2300      	moveq	r3, #0
 8009690:	b2db      	uxtb	r3, r3
 8009692:	e022      	b.n	80096da <HAL_TIM_PWM_Start+0x6a>
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2b04      	cmp	r3, #4
 8009698:	d109      	bne.n	80096ae <HAL_TIM_PWM_Start+0x3e>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	bf14      	ite	ne
 80096a6:	2301      	movne	r3, #1
 80096a8:	2300      	moveq	r3, #0
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	e015      	b.n	80096da <HAL_TIM_PWM_Start+0x6a>
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	2b08      	cmp	r3, #8
 80096b2:	d109      	bne.n	80096c8 <HAL_TIM_PWM_Start+0x58>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	2b01      	cmp	r3, #1
 80096be:	bf14      	ite	ne
 80096c0:	2301      	movne	r3, #1
 80096c2:	2300      	moveq	r3, #0
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	e008      	b.n	80096da <HAL_TIM_PWM_Start+0x6a>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	bf14      	ite	ne
 80096d4:	2301      	movne	r3, #1
 80096d6:	2300      	moveq	r3, #0
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e068      	b.n	80097b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d104      	bne.n	80096f2 <HAL_TIM_PWM_Start+0x82>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096f0:	e013      	b.n	800971a <HAL_TIM_PWM_Start+0xaa>
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b04      	cmp	r3, #4
 80096f6:	d104      	bne.n	8009702 <HAL_TIM_PWM_Start+0x92>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2202      	movs	r2, #2
 80096fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009700:	e00b      	b.n	800971a <HAL_TIM_PWM_Start+0xaa>
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2b08      	cmp	r3, #8
 8009706:	d104      	bne.n	8009712 <HAL_TIM_PWM_Start+0xa2>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2202      	movs	r2, #2
 800970c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009710:	e003      	b.n	800971a <HAL_TIM_PWM_Start+0xaa>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2202      	movs	r2, #2
 8009716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2201      	movs	r2, #1
 8009720:	6839      	ldr	r1, [r7, #0]
 8009722:	4618      	mov	r0, r3
 8009724:	f001 f9bc 	bl	800aaa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a23      	ldr	r2, [pc, #140]	; (80097bc <HAL_TIM_PWM_Start+0x14c>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d107      	bne.n	8009742 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a1d      	ldr	r2, [pc, #116]	; (80097bc <HAL_TIM_PWM_Start+0x14c>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d018      	beq.n	800977e <HAL_TIM_PWM_Start+0x10e>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009754:	d013      	beq.n	800977e <HAL_TIM_PWM_Start+0x10e>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a19      	ldr	r2, [pc, #100]	; (80097c0 <HAL_TIM_PWM_Start+0x150>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d00e      	beq.n	800977e <HAL_TIM_PWM_Start+0x10e>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a17      	ldr	r2, [pc, #92]	; (80097c4 <HAL_TIM_PWM_Start+0x154>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d009      	beq.n	800977e <HAL_TIM_PWM_Start+0x10e>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a16      	ldr	r2, [pc, #88]	; (80097c8 <HAL_TIM_PWM_Start+0x158>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d004      	beq.n	800977e <HAL_TIM_PWM_Start+0x10e>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a14      	ldr	r2, [pc, #80]	; (80097cc <HAL_TIM_PWM_Start+0x15c>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d111      	bne.n	80097a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	f003 0307 	and.w	r3, r3, #7
 8009788:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2b06      	cmp	r3, #6
 800978e:	d010      	beq.n	80097b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f042 0201 	orr.w	r2, r2, #1
 800979e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097a0:	e007      	b.n	80097b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f042 0201 	orr.w	r2, r2, #1
 80097b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	40010000 	.word	0x40010000
 80097c0:	40000400 	.word	0x40000400
 80097c4:	40000800 	.word	0x40000800
 80097c8:	40000c00 	.word	0x40000c00
 80097cc:	40014000 	.word	0x40014000

080097d0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e04c      	b.n	800987e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d111      	bne.n	8009814 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f001 f977 	bl	800aaec <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009802:	2b00      	cmp	r3, #0
 8009804:	d102      	bne.n	800980c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a1f      	ldr	r2, [pc, #124]	; (8009888 <HAL_TIM_OnePulse_Init+0xb8>)
 800980a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2202      	movs	r2, #2
 8009818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	3304      	adds	r3, #4
 8009824:	4619      	mov	r1, r3
 8009826:	4610      	mov	r0, r2
 8009828:	f000 fe94 	bl	800a554 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f022 0208 	bic.w	r2, r2, #8
 800983a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6819      	ldr	r1, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	0800988d 	.word	0x0800988d

0800988c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009894:	bf00      	nop
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80098b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80098c8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80098ca:	7bfb      	ldrb	r3, [r7, #15]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d108      	bne.n	80098e2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d105      	bne.n	80098e2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80098d6:	7b7b      	ldrb	r3, [r7, #13]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d102      	bne.n	80098e2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80098dc:	7b3b      	ldrb	r3, [r7, #12]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d001      	beq.n	80098e6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e03b      	b.n	800995e <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2202      	movs	r2, #2
 80098ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2202      	movs	r2, #2
 80098f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2202      	movs	r2, #2
 80098fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2202      	movs	r2, #2
 8009902:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68da      	ldr	r2, [r3, #12]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f042 0202 	orr.w	r2, r2, #2
 8009914:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68da      	ldr	r2, [r3, #12]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f042 0204 	orr.w	r2, r2, #4
 8009924:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2201      	movs	r2, #1
 800992c:	2100      	movs	r1, #0
 800992e:	4618      	mov	r0, r3
 8009930:	f001 f8b6 	bl	800aaa0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2201      	movs	r2, #1
 800993a:	2104      	movs	r1, #4
 800993c:	4618      	mov	r0, r3
 800993e:	f001 f8af 	bl	800aaa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a08      	ldr	r2, [pc, #32]	; (8009968 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d107      	bne.n	800995c <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800995a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	40010000 	.word	0x40010000

0800996c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d101      	bne.n	8009980 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	e0a2      	b.n	8009ac6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b00      	cmp	r3, #0
 800998a:	d111      	bne.n	80099b0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f001 f8a9 	bl	800aaec <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d102      	bne.n	80099a8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a4a      	ldr	r2, [pc, #296]	; (8009ad0 <HAL_TIM_Encoder_Init+0x164>)
 80099a6:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2202      	movs	r2, #2
 80099b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	6812      	ldr	r2, [r2, #0]
 80099c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099c6:	f023 0307 	bic.w	r3, r3, #7
 80099ca:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3304      	adds	r3, #4
 80099d4:	4619      	mov	r1, r3
 80099d6:	4610      	mov	r0, r2
 80099d8:	f000 fdbc 	bl	800a554 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a04:	f023 0303 	bic.w	r3, r3, #3
 8009a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	689a      	ldr	r2, [r3, #8]
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	021b      	lsls	r3, r3, #8
 8009a14:	4313      	orrs	r3, r2
 8009a16:	693a      	ldr	r2, [r7, #16]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009a22:	f023 030c 	bic.w	r3, r3, #12
 8009a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	68da      	ldr	r2, [r3, #12]
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	69db      	ldr	r3, [r3, #28]
 8009a3c:	021b      	lsls	r3, r3, #8
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	011a      	lsls	r2, r3, #4
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	6a1b      	ldr	r3, [r3, #32]
 8009a50:	031b      	lsls	r3, r3, #12
 8009a52:	4313      	orrs	r3, r2
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009a60:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009a68:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	685a      	ldr	r2, [r3, #4]
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	011b      	lsls	r3, r3, #4
 8009a74:	4313      	orrs	r3, r2
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	697a      	ldr	r2, [r7, #20]
 8009a82:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	0800462d 	.word	0x0800462d

08009ad4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ae4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009aec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009af4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009afc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d110      	bne.n	8009b26 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d102      	bne.n	8009b10 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b0a:	7b7b      	ldrb	r3, [r7, #13]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d001      	beq.n	8009b14 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e069      	b.n	8009be8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2202      	movs	r2, #2
 8009b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b24:	e031      	b.n	8009b8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	2b04      	cmp	r3, #4
 8009b2a:	d110      	bne.n	8009b4e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b2c:	7bbb      	ldrb	r3, [r7, #14]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d102      	bne.n	8009b38 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b32:	7b3b      	ldrb	r3, [r7, #12]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d001      	beq.n	8009b3c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e055      	b.n	8009be8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2202      	movs	r2, #2
 8009b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2202      	movs	r2, #2
 8009b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b4c:	e01d      	b.n	8009b8a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d108      	bne.n	8009b66 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d105      	bne.n	8009b66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b5a:	7b7b      	ldrb	r3, [r7, #13]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d102      	bne.n	8009b66 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b60:	7b3b      	ldrb	r3, [r7, #12]
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d001      	beq.n	8009b6a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e03e      	b.n	8009be8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2202      	movs	r2, #2
 8009b76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2202      	movs	r2, #2
 8009b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2202      	movs	r2, #2
 8009b86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d003      	beq.n	8009b98 <HAL_TIM_Encoder_Start+0xc4>
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	2b04      	cmp	r3, #4
 8009b94:	d008      	beq.n	8009ba8 <HAL_TIM_Encoder_Start+0xd4>
 8009b96:	e00f      	b.n	8009bb8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f000 ff7d 	bl	800aaa0 <TIM_CCxChannelCmd>
      break;
 8009ba6:	e016      	b.n	8009bd6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2201      	movs	r2, #1
 8009bae:	2104      	movs	r1, #4
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 ff75 	bl	800aaa0 <TIM_CCxChannelCmd>
      break;
 8009bb6:	e00e      	b.n	8009bd6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f000 ff6d 	bl	800aaa0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	2104      	movs	r1, #4
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f000 ff66 	bl	800aaa0 <TIM_CCxChannelCmd>
      break;
 8009bd4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f042 0201 	orr.w	r2, r2, #1
 8009be4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	f003 0302 	and.w	r3, r3, #2
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d128      	bne.n	8009c58 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	f003 0302 	and.w	r3, r3, #2
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d121      	bne.n	8009c58 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f06f 0202 	mvn.w	r2, #2
 8009c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	f003 0303 	and.w	r3, r3, #3
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d005      	beq.n	8009c3e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	4798      	blx	r3
 8009c3c:	e009      	b.n	8009c52 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	f003 0304 	and.w	r3, r3, #4
 8009c62:	2b04      	cmp	r3, #4
 8009c64:	d128      	bne.n	8009cb8 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	f003 0304 	and.w	r3, r3, #4
 8009c70:	2b04      	cmp	r3, #4
 8009c72:	d121      	bne.n	8009cb8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f06f 0204 	mvn.w	r2, #4
 8009c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2202      	movs	r2, #2
 8009c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d005      	beq.n	8009c9e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	4798      	blx	r3
 8009c9c:	e009      	b.n	8009cb2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	f003 0308 	and.w	r3, r3, #8
 8009cc2:	2b08      	cmp	r3, #8
 8009cc4:	d128      	bne.n	8009d18 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	f003 0308 	and.w	r3, r3, #8
 8009cd0:	2b08      	cmp	r3, #8
 8009cd2:	d121      	bne.n	8009d18 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f06f 0208 	mvn.w	r2, #8
 8009cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2204      	movs	r2, #4
 8009ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	69db      	ldr	r3, [r3, #28]
 8009cea:	f003 0303 	and.w	r3, r3, #3
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d005      	beq.n	8009cfe <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	4798      	blx	r3
 8009cfc:	e009      	b.n	8009d12 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	f003 0310 	and.w	r3, r3, #16
 8009d22:	2b10      	cmp	r3, #16
 8009d24:	d128      	bne.n	8009d78 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	f003 0310 	and.w	r3, r3, #16
 8009d30:	2b10      	cmp	r3, #16
 8009d32:	d121      	bne.n	8009d78 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f06f 0210 	mvn.w	r2, #16
 8009d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2208      	movs	r2, #8
 8009d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	69db      	ldr	r3, [r3, #28]
 8009d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d005      	beq.n	8009d5e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	4798      	blx	r3
 8009d5c:	e009      	b.n	8009d72 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d110      	bne.n	8009da8 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	f003 0301 	and.w	r3, r3, #1
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d109      	bne.n	8009da8 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f06f 0201 	mvn.w	r2, #1
 8009d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009db2:	2b80      	cmp	r3, #128	; 0x80
 8009db4:	d110      	bne.n	8009dd8 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc0:	2b80      	cmp	r3, #128	; 0x80
 8009dc2:	d109      	bne.n	8009dd8 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de2:	2b40      	cmp	r3, #64	; 0x40
 8009de4:	d110      	bne.n	8009e08 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df0:	2b40      	cmp	r3, #64	; 0x40
 8009df2:	d109      	bne.n	8009e08 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	f003 0320 	and.w	r3, r3, #32
 8009e12:	2b20      	cmp	r3, #32
 8009e14:	d110      	bne.n	8009e38 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	f003 0320 	and.w	r3, r3, #32
 8009e20:	2b20      	cmp	r3, #32
 8009e22:	d109      	bne.n	8009e38 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f06f 0220 	mvn.w	r2, #32
 8009e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e38:	bf00      	nop
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d101      	bne.n	8009e5e <HAL_TIM_OC_ConfigChannel+0x1e>
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	e048      	b.n	8009ef0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2b0c      	cmp	r3, #12
 8009e6a:	d839      	bhi.n	8009ee0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8009e6c:	a201      	add	r2, pc, #4	; (adr r2, 8009e74 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e72:	bf00      	nop
 8009e74:	08009ea9 	.word	0x08009ea9
 8009e78:	08009ee1 	.word	0x08009ee1
 8009e7c:	08009ee1 	.word	0x08009ee1
 8009e80:	08009ee1 	.word	0x08009ee1
 8009e84:	08009eb7 	.word	0x08009eb7
 8009e88:	08009ee1 	.word	0x08009ee1
 8009e8c:	08009ee1 	.word	0x08009ee1
 8009e90:	08009ee1 	.word	0x08009ee1
 8009e94:	08009ec5 	.word	0x08009ec5
 8009e98:	08009ee1 	.word	0x08009ee1
 8009e9c:	08009ee1 	.word	0x08009ee1
 8009ea0:	08009ee1 	.word	0x08009ee1
 8009ea4:	08009ed3 	.word	0x08009ed3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68b9      	ldr	r1, [r7, #8]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f000 fbd0 	bl	800a654 <TIM_OC1_SetConfig>
      break;
 8009eb4:	e017      	b.n	8009ee6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68b9      	ldr	r1, [r7, #8]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f000 fc2f 	bl	800a720 <TIM_OC2_SetConfig>
      break;
 8009ec2:	e010      	b.n	8009ee6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68b9      	ldr	r1, [r7, #8]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f000 fc94 	bl	800a7f8 <TIM_OC3_SetConfig>
      break;
 8009ed0:	e009      	b.n	8009ee6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68b9      	ldr	r1, [r7, #8]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f000 fcf7 	bl	800a8cc <TIM_OC4_SetConfig>
      break;
 8009ede:	e002      	b.n	8009ee6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ee4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3718      	adds	r7, #24
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f04:	2300      	movs	r3, #0
 8009f06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d101      	bne.n	8009f16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f12:	2302      	movs	r3, #2
 8009f14:	e0ae      	b.n	800a074 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b0c      	cmp	r3, #12
 8009f22:	f200 809f 	bhi.w	800a064 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009f26:	a201      	add	r2, pc, #4	; (adr r2, 8009f2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2c:	08009f61 	.word	0x08009f61
 8009f30:	0800a065 	.word	0x0800a065
 8009f34:	0800a065 	.word	0x0800a065
 8009f38:	0800a065 	.word	0x0800a065
 8009f3c:	08009fa1 	.word	0x08009fa1
 8009f40:	0800a065 	.word	0x0800a065
 8009f44:	0800a065 	.word	0x0800a065
 8009f48:	0800a065 	.word	0x0800a065
 8009f4c:	08009fe3 	.word	0x08009fe3
 8009f50:	0800a065 	.word	0x0800a065
 8009f54:	0800a065 	.word	0x0800a065
 8009f58:	0800a065 	.word	0x0800a065
 8009f5c:	0800a023 	.word	0x0800a023
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68b9      	ldr	r1, [r7, #8]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 fb74 	bl	800a654 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	699a      	ldr	r2, [r3, #24]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f042 0208 	orr.w	r2, r2, #8
 8009f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	699a      	ldr	r2, [r3, #24]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f022 0204 	bic.w	r2, r2, #4
 8009f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6999      	ldr	r1, [r3, #24]
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	691a      	ldr	r2, [r3, #16]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	619a      	str	r2, [r3, #24]
      break;
 8009f9e:	e064      	b.n	800a06a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68b9      	ldr	r1, [r7, #8]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 fbba 	bl	800a720 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	699a      	ldr	r2, [r3, #24]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	699a      	ldr	r2, [r3, #24]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6999      	ldr	r1, [r3, #24]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	021a      	lsls	r2, r3, #8
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	430a      	orrs	r2, r1
 8009fde:	619a      	str	r2, [r3, #24]
      break;
 8009fe0:	e043      	b.n	800a06a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68b9      	ldr	r1, [r7, #8]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f000 fc05 	bl	800a7f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	69da      	ldr	r2, [r3, #28]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f042 0208 	orr.w	r2, r2, #8
 8009ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	69da      	ldr	r2, [r3, #28]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f022 0204 	bic.w	r2, r2, #4
 800a00c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	69d9      	ldr	r1, [r3, #28]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	691a      	ldr	r2, [r3, #16]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	430a      	orrs	r2, r1
 800a01e:	61da      	str	r2, [r3, #28]
      break;
 800a020:	e023      	b.n	800a06a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68b9      	ldr	r1, [r7, #8]
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 fc4f 	bl	800a8cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	69da      	ldr	r2, [r3, #28]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a03c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	69da      	ldr	r2, [r3, #28]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a04c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	69d9      	ldr	r1, [r3, #28]
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	021a      	lsls	r2, r3, #8
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	430a      	orrs	r2, r1
 800a060:	61da      	str	r2, [r3, #28]
      break;
 800a062:	e002      	b.n	800a06a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	75fb      	strb	r3, [r7, #23]
      break;
 800a068:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a072:	7dfb      	ldrb	r3, [r7, #23]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3718      	adds	r7, #24
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a086:	2300      	movs	r3, #0
 800a088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a090:	2b01      	cmp	r3, #1
 800a092:	d101      	bne.n	800a098 <HAL_TIM_ConfigClockSource+0x1c>
 800a094:	2302      	movs	r3, #2
 800a096:	e0b4      	b.n	800a202 <HAL_TIM_ConfigClockSource+0x186>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a0b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0d0:	d03e      	beq.n	800a150 <HAL_TIM_ConfigClockSource+0xd4>
 800a0d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0d6:	f200 8087 	bhi.w	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800a0da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0de:	f000 8086 	beq.w	800a1ee <HAL_TIM_ConfigClockSource+0x172>
 800a0e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e6:	d87f      	bhi.n	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800a0e8:	2b70      	cmp	r3, #112	; 0x70
 800a0ea:	d01a      	beq.n	800a122 <HAL_TIM_ConfigClockSource+0xa6>
 800a0ec:	2b70      	cmp	r3, #112	; 0x70
 800a0ee:	d87b      	bhi.n	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800a0f0:	2b60      	cmp	r3, #96	; 0x60
 800a0f2:	d050      	beq.n	800a196 <HAL_TIM_ConfigClockSource+0x11a>
 800a0f4:	2b60      	cmp	r3, #96	; 0x60
 800a0f6:	d877      	bhi.n	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800a0f8:	2b50      	cmp	r3, #80	; 0x50
 800a0fa:	d03c      	beq.n	800a176 <HAL_TIM_ConfigClockSource+0xfa>
 800a0fc:	2b50      	cmp	r3, #80	; 0x50
 800a0fe:	d873      	bhi.n	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800a100:	2b40      	cmp	r3, #64	; 0x40
 800a102:	d058      	beq.n	800a1b6 <HAL_TIM_ConfigClockSource+0x13a>
 800a104:	2b40      	cmp	r3, #64	; 0x40
 800a106:	d86f      	bhi.n	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800a108:	2b30      	cmp	r3, #48	; 0x30
 800a10a:	d064      	beq.n	800a1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800a10c:	2b30      	cmp	r3, #48	; 0x30
 800a10e:	d86b      	bhi.n	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800a110:	2b20      	cmp	r3, #32
 800a112:	d060      	beq.n	800a1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800a114:	2b20      	cmp	r3, #32
 800a116:	d867      	bhi.n	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d05c      	beq.n	800a1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800a11c:	2b10      	cmp	r3, #16
 800a11e:	d05a      	beq.n	800a1d6 <HAL_TIM_ConfigClockSource+0x15a>
 800a120:	e062      	b.n	800a1e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6818      	ldr	r0, [r3, #0]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	6899      	ldr	r1, [r3, #8]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	f000 fc95 	bl	800aa60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a144:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	609a      	str	r2, [r3, #8]
      break;
 800a14e:	e04f      	b.n	800a1f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6818      	ldr	r0, [r3, #0]
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	6899      	ldr	r1, [r3, #8]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	f000 fc7e 	bl	800aa60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	689a      	ldr	r2, [r3, #8]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a172:	609a      	str	r2, [r3, #8]
      break;
 800a174:	e03c      	b.n	800a1f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	6859      	ldr	r1, [r3, #4]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	461a      	mov	r2, r3
 800a184:	f000 fbf2 	bl	800a96c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2150      	movs	r1, #80	; 0x50
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 fc4b 	bl	800aa2a <TIM_ITRx_SetConfig>
      break;
 800a194:	e02c      	b.n	800a1f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6818      	ldr	r0, [r3, #0]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	6859      	ldr	r1, [r3, #4]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f000 fc11 	bl	800a9ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2160      	movs	r1, #96	; 0x60
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 fc3b 	bl	800aa2a <TIM_ITRx_SetConfig>
      break;
 800a1b4:	e01c      	b.n	800a1f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6818      	ldr	r0, [r3, #0]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	6859      	ldr	r1, [r3, #4]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f000 fbd2 	bl	800a96c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2140      	movs	r1, #64	; 0x40
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fc2b 	bl	800aa2a <TIM_ITRx_SetConfig>
      break;
 800a1d4:	e00c      	b.n	800a1f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	f000 fc22 	bl	800aa2a <TIM_ITRx_SetConfig>
      break;
 800a1e6:	e003      	b.n	800a1f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a1ec:	e000      	b.n	800a1f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a1ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a200:	7bfb      	ldrb	r3, [r7, #15]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b083      	sub	sp, #12
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a212:	bf00      	nop
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a21e:	b480      	push	{r7}
 800a220:	b083      	sub	sp, #12
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a226:	bf00      	nop
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr

0800a232 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a232:	b480      	push	{r7}
 800a234:	b083      	sub	sp, #12
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a23a:	bf00      	nop
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr

0800a246 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a246:	b480      	push	{r7}
 800a248:	b083      	sub	sp, #12
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a24e:	bf00      	nop
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a262:	bf00      	nop
 800a264:	370c      	adds	r7, #12
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr

0800a26e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a26e:	b480      	push	{r7}
 800a270:	b083      	sub	sp, #12
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a276:	bf00      	nop
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a282:	b480      	push	{r7}
 800a284:	b083      	sub	sp, #12
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a28a:	bf00      	nop
 800a28c:	370c      	adds	r7, #12
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a296:	b480      	push	{r7}
 800a298:	b083      	sub	sp, #12
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a29e:	bf00      	nop
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr

0800a2aa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	b083      	sub	sp, #12
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a2b2:	bf00      	nop
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
	...

0800a2c0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d101      	bne.n	800a2dc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e135      	b.n	800a548 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d101      	bne.n	800a2ea <HAL_TIM_RegisterCallback+0x2a>
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	e12e      	b.n	800a548 <HAL_TIM_RegisterCallback+0x288>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	f040 80ba 	bne.w	800a474 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800a300:	7afb      	ldrb	r3, [r7, #11]
 800a302:	2b1a      	cmp	r3, #26
 800a304:	f200 80b3 	bhi.w	800a46e <HAL_TIM_RegisterCallback+0x1ae>
 800a308:	a201      	add	r2, pc, #4	; (adr r2, 800a310 <HAL_TIM_RegisterCallback+0x50>)
 800a30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30e:	bf00      	nop
 800a310:	0800a37d 	.word	0x0800a37d
 800a314:	0800a385 	.word	0x0800a385
 800a318:	0800a38d 	.word	0x0800a38d
 800a31c:	0800a395 	.word	0x0800a395
 800a320:	0800a39d 	.word	0x0800a39d
 800a324:	0800a3a5 	.word	0x0800a3a5
 800a328:	0800a3ad 	.word	0x0800a3ad
 800a32c:	0800a3b5 	.word	0x0800a3b5
 800a330:	0800a3bd 	.word	0x0800a3bd
 800a334:	0800a3c5 	.word	0x0800a3c5
 800a338:	0800a3cd 	.word	0x0800a3cd
 800a33c:	0800a3d5 	.word	0x0800a3d5
 800a340:	0800a3dd 	.word	0x0800a3dd
 800a344:	0800a3e5 	.word	0x0800a3e5
 800a348:	0800a3ed 	.word	0x0800a3ed
 800a34c:	0800a3f7 	.word	0x0800a3f7
 800a350:	0800a401 	.word	0x0800a401
 800a354:	0800a40b 	.word	0x0800a40b
 800a358:	0800a415 	.word	0x0800a415
 800a35c:	0800a41f 	.word	0x0800a41f
 800a360:	0800a429 	.word	0x0800a429
 800a364:	0800a433 	.word	0x0800a433
 800a368:	0800a43d 	.word	0x0800a43d
 800a36c:	0800a447 	.word	0x0800a447
 800a370:	0800a451 	.word	0x0800a451
 800a374:	0800a45b 	.word	0x0800a45b
 800a378:	0800a465 	.word	0x0800a465
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a382:	e0dc      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a38a:	e0d8      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a392:	e0d4      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a39a:	e0d0      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a3a2:	e0cc      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a3aa:	e0c8      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a3b2:	e0c4      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a3ba:	e0c0      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a3c2:	e0bc      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a3ca:	e0b8      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a3d2:	e0b4      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a3da:	e0b0      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a3e2:	e0ac      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a3ea:	e0a8      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800a3f4:	e0a3      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800a3fe:	e09e      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800a408:	e099      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800a412:	e094      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800a41c:	e08f      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800a426:	e08a      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800a430:	e085      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800a43a:	e080      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800a444:	e07b      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800a44e:	e076      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800a458:	e071      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800a462:	e06c      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800a46c:	e067      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	75fb      	strb	r3, [r7, #23]
        break;
 800a472:	e064      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d15c      	bne.n	800a53a <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800a480:	7afb      	ldrb	r3, [r7, #11]
 800a482:	2b0d      	cmp	r3, #13
 800a484:	d856      	bhi.n	800a534 <HAL_TIM_RegisterCallback+0x274>
 800a486:	a201      	add	r2, pc, #4	; (adr r2, 800a48c <HAL_TIM_RegisterCallback+0x1cc>)
 800a488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48c:	0800a4c5 	.word	0x0800a4c5
 800a490:	0800a4cd 	.word	0x0800a4cd
 800a494:	0800a4d5 	.word	0x0800a4d5
 800a498:	0800a4dd 	.word	0x0800a4dd
 800a49c:	0800a4e5 	.word	0x0800a4e5
 800a4a0:	0800a4ed 	.word	0x0800a4ed
 800a4a4:	0800a4f5 	.word	0x0800a4f5
 800a4a8:	0800a4fd 	.word	0x0800a4fd
 800a4ac:	0800a505 	.word	0x0800a505
 800a4b0:	0800a50d 	.word	0x0800a50d
 800a4b4:	0800a515 	.word	0x0800a515
 800a4b8:	0800a51d 	.word	0x0800a51d
 800a4bc:	0800a525 	.word	0x0800a525
 800a4c0:	0800a52d 	.word	0x0800a52d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a4ca:	e038      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a4d2:	e034      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a4da:	e030      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a4e2:	e02c      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a4ea:	e028      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a4f2:	e024      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a4fa:	e020      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a502:	e01c      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a50a:	e018      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a512:	e014      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a51a:	e010      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a522:	e00c      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a52a:	e008      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a532:	e004      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	75fb      	strb	r3, [r7, #23]
        break;
 800a538:	e001      	b.n	800a53e <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a546:	7dfb      	ldrb	r3, [r7, #23]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	371c      	adds	r7, #28
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a34      	ldr	r2, [pc, #208]	; (800a638 <TIM_Base_SetConfig+0xe4>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d00f      	beq.n	800a58c <TIM_Base_SetConfig+0x38>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a572:	d00b      	beq.n	800a58c <TIM_Base_SetConfig+0x38>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a31      	ldr	r2, [pc, #196]	; (800a63c <TIM_Base_SetConfig+0xe8>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d007      	beq.n	800a58c <TIM_Base_SetConfig+0x38>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4a30      	ldr	r2, [pc, #192]	; (800a640 <TIM_Base_SetConfig+0xec>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d003      	beq.n	800a58c <TIM_Base_SetConfig+0x38>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4a2f      	ldr	r2, [pc, #188]	; (800a644 <TIM_Base_SetConfig+0xf0>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d108      	bne.n	800a59e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a25      	ldr	r2, [pc, #148]	; (800a638 <TIM_Base_SetConfig+0xe4>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d01b      	beq.n	800a5de <TIM_Base_SetConfig+0x8a>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5ac:	d017      	beq.n	800a5de <TIM_Base_SetConfig+0x8a>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a22      	ldr	r2, [pc, #136]	; (800a63c <TIM_Base_SetConfig+0xe8>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d013      	beq.n	800a5de <TIM_Base_SetConfig+0x8a>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a21      	ldr	r2, [pc, #132]	; (800a640 <TIM_Base_SetConfig+0xec>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d00f      	beq.n	800a5de <TIM_Base_SetConfig+0x8a>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4a20      	ldr	r2, [pc, #128]	; (800a644 <TIM_Base_SetConfig+0xf0>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d00b      	beq.n	800a5de <TIM_Base_SetConfig+0x8a>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4a1f      	ldr	r2, [pc, #124]	; (800a648 <TIM_Base_SetConfig+0xf4>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d007      	beq.n	800a5de <TIM_Base_SetConfig+0x8a>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4a1e      	ldr	r2, [pc, #120]	; (800a64c <TIM_Base_SetConfig+0xf8>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d003      	beq.n	800a5de <TIM_Base_SetConfig+0x8a>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4a1d      	ldr	r2, [pc, #116]	; (800a650 <TIM_Base_SetConfig+0xfc>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d108      	bne.n	800a5f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	689a      	ldr	r2, [r3, #8]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a08      	ldr	r2, [pc, #32]	; (800a638 <TIM_Base_SetConfig+0xe4>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d103      	bne.n	800a624 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	691a      	ldr	r2, [r3, #16]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	615a      	str	r2, [r3, #20]
}
 800a62a:	bf00      	nop
 800a62c:	3714      	adds	r7, #20
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	40010000 	.word	0x40010000
 800a63c:	40000400 	.word	0x40000400
 800a640:	40000800 	.word	0x40000800
 800a644:	40000c00 	.word	0x40000c00
 800a648:	40014000 	.word	0x40014000
 800a64c:	40014400 	.word	0x40014400
 800a650:	40014800 	.word	0x40014800

0800a654 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a654:	b480      	push	{r7}
 800a656:	b087      	sub	sp, #28
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a1b      	ldr	r3, [r3, #32]
 800a662:	f023 0201 	bic.w	r2, r3, #1
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a1b      	ldr	r3, [r3, #32]
 800a66e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	699b      	ldr	r3, [r3, #24]
 800a67a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f023 0303 	bic.w	r3, r3, #3
 800a68a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	4313      	orrs	r3, r2
 800a694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f023 0302 	bic.w	r3, r3, #2
 800a69c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	697a      	ldr	r2, [r7, #20]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a1c      	ldr	r2, [pc, #112]	; (800a71c <TIM_OC1_SetConfig+0xc8>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d10c      	bne.n	800a6ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	f023 0308 	bic.w	r3, r3, #8
 800a6b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	697a      	ldr	r2, [r7, #20]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f023 0304 	bic.w	r3, r3, #4
 800a6c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a13      	ldr	r2, [pc, #76]	; (800a71c <TIM_OC1_SetConfig+0xc8>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d111      	bne.n	800a6f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	695b      	ldr	r3, [r3, #20]
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	699b      	ldr	r3, [r3, #24]
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	68fa      	ldr	r2, [r7, #12]
 800a700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	685a      	ldr	r2, [r3, #4]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	621a      	str	r2, [r3, #32]
}
 800a710:	bf00      	nop
 800a712:	371c      	adds	r7, #28
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	40010000 	.word	0x40010000

0800a720 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a720:	b480      	push	{r7}
 800a722:	b087      	sub	sp, #28
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	f023 0210 	bic.w	r2, r3, #16
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a1b      	ldr	r3, [r3, #32]
 800a73a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a74e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	021b      	lsls	r3, r3, #8
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	4313      	orrs	r3, r2
 800a762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	f023 0320 	bic.w	r3, r3, #32
 800a76a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	011b      	lsls	r3, r3, #4
 800a772:	697a      	ldr	r2, [r7, #20]
 800a774:	4313      	orrs	r3, r2
 800a776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a1e      	ldr	r2, [pc, #120]	; (800a7f4 <TIM_OC2_SetConfig+0xd4>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d10d      	bne.n	800a79c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	011b      	lsls	r3, r3, #4
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	4313      	orrs	r3, r2
 800a792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a79a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a15      	ldr	r2, [pc, #84]	; (800a7f4 <TIM_OC2_SetConfig+0xd4>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d113      	bne.n	800a7cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	695b      	ldr	r3, [r3, #20]
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	693a      	ldr	r2, [r7, #16]
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	693a      	ldr	r2, [r7, #16]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	693a      	ldr	r2, [r7, #16]
 800a7d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	685a      	ldr	r2, [r3, #4]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	621a      	str	r2, [r3, #32]
}
 800a7e6:	bf00      	nop
 800a7e8:	371c      	adds	r7, #28
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	40010000 	.word	0x40010000

0800a7f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b087      	sub	sp, #28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a1b      	ldr	r3, [r3, #32]
 800a806:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a1b      	ldr	r3, [r3, #32]
 800a812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	69db      	ldr	r3, [r3, #28]
 800a81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f023 0303 	bic.w	r3, r3, #3
 800a82e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	4313      	orrs	r3, r2
 800a838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	021b      	lsls	r3, r3, #8
 800a848:	697a      	ldr	r2, [r7, #20]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4a1d      	ldr	r2, [pc, #116]	; (800a8c8 <TIM_OC3_SetConfig+0xd0>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d10d      	bne.n	800a872 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a85c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	021b      	lsls	r3, r3, #8
 800a864:	697a      	ldr	r2, [r7, #20]
 800a866:	4313      	orrs	r3, r2
 800a868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a14      	ldr	r2, [pc, #80]	; (800a8c8 <TIM_OC3_SetConfig+0xd0>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d113      	bne.n	800a8a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	011b      	lsls	r3, r3, #4
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	4313      	orrs	r3, r2
 800a894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	699b      	ldr	r3, [r3, #24]
 800a89a:	011b      	lsls	r3, r3, #4
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	685a      	ldr	r2, [r3, #4]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	697a      	ldr	r2, [r7, #20]
 800a8ba:	621a      	str	r2, [r3, #32]
}
 800a8bc:	bf00      	nop
 800a8be:	371c      	adds	r7, #28
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr
 800a8c8:	40010000 	.word	0x40010000

0800a8cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b087      	sub	sp, #28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	69db      	ldr	r3, [r3, #28]
 800a8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	021b      	lsls	r3, r3, #8
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	031b      	lsls	r3, r3, #12
 800a91e:	693a      	ldr	r2, [r7, #16]
 800a920:	4313      	orrs	r3, r2
 800a922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a10      	ldr	r2, [pc, #64]	; (800a968 <TIM_OC4_SetConfig+0x9c>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d109      	bne.n	800a940 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	695b      	ldr	r3, [r3, #20]
 800a938:	019b      	lsls	r3, r3, #6
 800a93a:	697a      	ldr	r2, [r7, #20]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	685a      	ldr	r2, [r3, #4]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	621a      	str	r2, [r3, #32]
}
 800a95a:	bf00      	nop
 800a95c:	371c      	adds	r7, #28
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	40010000 	.word	0x40010000

0800a96c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b087      	sub	sp, #28
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6a1b      	ldr	r3, [r3, #32]
 800a97c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6a1b      	ldr	r3, [r3, #32]
 800a982:	f023 0201 	bic.w	r2, r3, #1
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	011b      	lsls	r3, r3, #4
 800a99c:	693a      	ldr	r2, [r7, #16]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f023 030a 	bic.w	r3, r3, #10
 800a9a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	693a      	ldr	r2, [r7, #16]
 800a9b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	621a      	str	r2, [r3, #32]
}
 800a9be:	bf00      	nop
 800a9c0:	371c      	adds	r7, #28
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b087      	sub	sp, #28
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	60f8      	str	r0, [r7, #12]
 800a9d2:	60b9      	str	r1, [r7, #8]
 800a9d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	f023 0210 	bic.w	r2, r3, #16
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6a1b      	ldr	r3, [r3, #32]
 800a9ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	031b      	lsls	r3, r3, #12
 800a9fa:	697a      	ldr	r2, [r7, #20]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	011b      	lsls	r3, r3, #4
 800aa0c:	693a      	ldr	r2, [r7, #16]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	693a      	ldr	r2, [r7, #16]
 800aa1c:	621a      	str	r2, [r3, #32]
}
 800aa1e:	bf00      	nop
 800aa20:	371c      	adds	r7, #28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b085      	sub	sp, #20
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	f043 0307 	orr.w	r3, r3, #7
 800aa4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	609a      	str	r2, [r3, #8]
}
 800aa54:	bf00      	nop
 800aa56:	3714      	adds	r7, #20
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b087      	sub	sp, #28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
 800aa6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	021a      	lsls	r2, r3, #8
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	431a      	orrs	r2, r3
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	609a      	str	r2, [r3, #8]
}
 800aa94:	bf00      	nop
 800aa96:	371c      	adds	r7, #28
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b087      	sub	sp, #28
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	f003 031f 	and.w	r3, r3, #31
 800aab2:	2201      	movs	r2, #1
 800aab4:	fa02 f303 	lsl.w	r3, r2, r3
 800aab8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6a1a      	ldr	r2, [r3, #32]
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	43db      	mvns	r3, r3
 800aac2:	401a      	ands	r2, r3
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6a1a      	ldr	r2, [r3, #32]
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	f003 031f 	and.w	r3, r3, #31
 800aad2:	6879      	ldr	r1, [r7, #4]
 800aad4:	fa01 f303 	lsl.w	r3, r1, r3
 800aad8:	431a      	orrs	r2, r3
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	621a      	str	r2, [r3, #32]
}
 800aade:	bf00      	nop
 800aae0:	371c      	adds	r7, #28
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
	...

0800aaec <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a1c      	ldr	r2, [pc, #112]	; (800ab68 <TIM_ResetCallback+0x7c>)
 800aaf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a1b      	ldr	r2, [pc, #108]	; (800ab6c <TIM_ResetCallback+0x80>)
 800ab00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a1a      	ldr	r2, [pc, #104]	; (800ab70 <TIM_ResetCallback+0x84>)
 800ab08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a19      	ldr	r2, [pc, #100]	; (800ab74 <TIM_ResetCallback+0x88>)
 800ab10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a18      	ldr	r2, [pc, #96]	; (800ab78 <TIM_ResetCallback+0x8c>)
 800ab18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a17      	ldr	r2, [pc, #92]	; (800ab7c <TIM_ResetCallback+0x90>)
 800ab20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a16      	ldr	r2, [pc, #88]	; (800ab80 <TIM_ResetCallback+0x94>)
 800ab28:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a15      	ldr	r2, [pc, #84]	; (800ab84 <TIM_ResetCallback+0x98>)
 800ab30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a14      	ldr	r2, [pc, #80]	; (800ab88 <TIM_ResetCallback+0x9c>)
 800ab38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a13      	ldr	r2, [pc, #76]	; (800ab8c <TIM_ResetCallback+0xa0>)
 800ab40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a12      	ldr	r2, [pc, #72]	; (800ab90 <TIM_ResetCallback+0xa4>)
 800ab48:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a11      	ldr	r2, [pc, #68]	; (800ab94 <TIM_ResetCallback+0xa8>)
 800ab50:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a10      	ldr	r2, [pc, #64]	; (800ab98 <TIM_ResetCallback+0xac>)
 800ab58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	08001f59 	.word	0x08001f59
 800ab6c:	0800a20b 	.word	0x0800a20b
 800ab70:	0800a283 	.word	0x0800a283
 800ab74:	0800a297 	.word	0x0800a297
 800ab78:	0800a233 	.word	0x0800a233
 800ab7c:	0800a247 	.word	0x0800a247
 800ab80:	0800a21f 	.word	0x0800a21f
 800ab84:	0800a25b 	.word	0x0800a25b
 800ab88:	0800a26f 	.word	0x0800a26f
 800ab8c:	0800a2ab 	.word	0x0800a2ab
 800ab90:	0800ad1d 	.word	0x0800ad1d
 800ab94:	0800ad31 	.word	0x0800ad31
 800ab98:	0800ad45 	.word	0x0800ad45

0800ab9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abac:	2b01      	cmp	r3, #1
 800abae:	d101      	bne.n	800abb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800abb0:	2302      	movs	r3, #2
 800abb2:	e050      	b.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2202      	movs	r2, #2
 800abc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a1c      	ldr	r2, [pc, #112]	; (800ac64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d018      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac00:	d013      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a18      	ldr	r2, [pc, #96]	; (800ac68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d00e      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a16      	ldr	r2, [pc, #88]	; (800ac6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d009      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a15      	ldr	r2, [pc, #84]	; (800ac70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d004      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a13      	ldr	r2, [pc, #76]	; (800ac74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d10c      	bne.n	800ac44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	68ba      	ldr	r2, [r7, #8]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	40010000 	.word	0x40010000
 800ac68:	40000400 	.word	0x40000400
 800ac6c:	40000800 	.word	0x40000800
 800ac70:	40000c00 	.word	0x40000c00
 800ac74:	40014000 	.word	0x40014000

0800ac78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ac82:	2300      	movs	r3, #0
 800ac84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d101      	bne.n	800ac94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ac90:	2302      	movs	r3, #2
 800ac92:	e03d      	b.n	800ad10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2201      	movs	r2, #1
 800ac98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	691b      	ldr	r3, [r3, #16]
 800acde:	4313      	orrs	r3, r2
 800ace0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	695b      	ldr	r3, [r3, #20]
 800acec:	4313      	orrs	r3, r2
 800acee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	69db      	ldr	r3, [r3, #28]
 800acfa:	4313      	orrs	r3, r2
 800acfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3714      	adds	r7, #20
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800ad38:	bf00      	nop
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad4c:	bf00      	nop
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d101      	bne.n	800ad6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e04a      	b.n	800ae00 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d111      	bne.n	800ad9a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fd2c 	bl	800b7dc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d102      	bne.n	800ad92 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4a1e      	ldr	r2, [pc, #120]	; (800ae08 <HAL_UART_Init+0xb0>)
 800ad90:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2224      	movs	r2, #36	; 0x24
 800ad9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68da      	ldr	r2, [r3, #12]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800adb0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fff6 	bl	800bda4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	691a      	ldr	r2, [r3, #16]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800adc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	695a      	ldr	r2, [r3, #20]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800add6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	68da      	ldr	r2, [r3, #12]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ade6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2220      	movs	r2, #32
 800adf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2220      	movs	r2, #32
 800adfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	08004731 	.word	0x08004731

0800ae0c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	460b      	mov	r3, r1
 800ae16:	607a      	str	r2, [r7, #4]
 800ae18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d107      	bne.n	800ae34 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae28:	f043 0220 	orr.w	r2, r3, #32
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	e08c      	b.n	800af4e <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d101      	bne.n	800ae42 <HAL_UART_RegisterCallback+0x36>
 800ae3e:	2302      	movs	r3, #2
 800ae40:	e085      	b.n	800af4e <HAL_UART_RegisterCallback+0x142>
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2201      	movs	r2, #1
 800ae46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	2b20      	cmp	r3, #32
 800ae54:	d151      	bne.n	800aefa <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800ae56:	7afb      	ldrb	r3, [r7, #11]
 800ae58:	2b0c      	cmp	r3, #12
 800ae5a:	d845      	bhi.n	800aee8 <HAL_UART_RegisterCallback+0xdc>
 800ae5c:	a201      	add	r2, pc, #4	; (adr r2, 800ae64 <HAL_UART_RegisterCallback+0x58>)
 800ae5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae62:	bf00      	nop
 800ae64:	0800ae99 	.word	0x0800ae99
 800ae68:	0800aea1 	.word	0x0800aea1
 800ae6c:	0800aea9 	.word	0x0800aea9
 800ae70:	0800aeb1 	.word	0x0800aeb1
 800ae74:	0800aeb9 	.word	0x0800aeb9
 800ae78:	0800aec1 	.word	0x0800aec1
 800ae7c:	0800aec9 	.word	0x0800aec9
 800ae80:	0800aed1 	.word	0x0800aed1
 800ae84:	0800aee9 	.word	0x0800aee9
 800ae88:	0800aee9 	.word	0x0800aee9
 800ae8c:	0800aee9 	.word	0x0800aee9
 800ae90:	0800aed9 	.word	0x0800aed9
 800ae94:	0800aee1 	.word	0x0800aee1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800ae9e:	e051      	b.n	800af44 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800aea6:	e04d      	b.n	800af44 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800aeae:	e049      	b.n	800af44 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800aeb6:	e045      	b.n	800af44 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800aebe:	e041      	b.n	800af44 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800aec6:	e03d      	b.n	800af44 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800aece:	e039      	b.n	800af44 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800aed6:	e035      	b.n	800af44 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800aede:	e031      	b.n	800af44 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800aee6:	e02d      	b.n	800af44 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeec:	f043 0220 	orr.w	r2, r3, #32
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	75fb      	strb	r3, [r7, #23]
        break;
 800aef8:	e024      	b.n	800af44 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b00      	cmp	r3, #0
 800af04:	d116      	bne.n	800af34 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800af06:	7afb      	ldrb	r3, [r7, #11]
 800af08:	2b0b      	cmp	r3, #11
 800af0a:	d002      	beq.n	800af12 <HAL_UART_RegisterCallback+0x106>
 800af0c:	2b0c      	cmp	r3, #12
 800af0e:	d004      	beq.n	800af1a <HAL_UART_RegisterCallback+0x10e>
 800af10:	e007      	b.n	800af22 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800af18:	e014      	b.n	800af44 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800af20:	e010      	b.n	800af44 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af26:	f043 0220 	orr.w	r2, r3, #32
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	75fb      	strb	r3, [r7, #23]
        break;
 800af32:	e007      	b.n	800af44 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af38:	f043 0220 	orr.w	r2, r3, #32
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800af4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	371c      	adds	r7, #28
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop

0800af5c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	4613      	mov	r3, r2
 800af68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af70:	b2db      	uxtb	r3, r3
 800af72:	2b20      	cmp	r3, #32
 800af74:	d11d      	bne.n	800afb2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d002      	beq.n	800af82 <HAL_UART_Receive_IT+0x26>
 800af7c:	88fb      	ldrh	r3, [r7, #6]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e016      	b.n	800afb4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d101      	bne.n	800af94 <HAL_UART_Receive_IT+0x38>
 800af90:	2302      	movs	r3, #2
 800af92:	e00f      	b.n	800afb4 <HAL_UART_Receive_IT+0x58>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2201      	movs	r2, #1
 800af98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2200      	movs	r2, #0
 800afa0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800afa2:	88fb      	ldrh	r3, [r7, #6]
 800afa4:	461a      	mov	r2, r3
 800afa6:	68b9      	ldr	r1, [r7, #8]
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	f000 fcf7 	bl	800b99c <UART_Start_Receive_IT>
 800afae:	4603      	mov	r3, r0
 800afb0:	e000      	b.n	800afb4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800afb2:	2302      	movs	r3, #2
  }
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3710      	adds	r7, #16
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b08c      	sub	sp, #48	; 0x30
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	4613      	mov	r3, r2
 800afc8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b20      	cmp	r3, #32
 800afd4:	d165      	bne.n	800b0a2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <HAL_UART_Transmit_DMA+0x26>
 800afdc:	88fb      	ldrh	r3, [r7, #6]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	e05e      	b.n	800b0a4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afec:	2b01      	cmp	r3, #1
 800afee:	d101      	bne.n	800aff4 <HAL_UART_Transmit_DMA+0x38>
 800aff0:	2302      	movs	r3, #2
 800aff2:	e057      	b.n	800b0a4 <HAL_UART_Transmit_DMA+0xe8>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	88fa      	ldrh	r2, [r7, #6]
 800b006:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	88fa      	ldrh	r2, [r7, #6]
 800b00c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2221      	movs	r2, #33	; 0x21
 800b018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b020:	4a22      	ldr	r2, [pc, #136]	; (800b0ac <HAL_UART_Transmit_DMA+0xf0>)
 800b022:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b028:	4a21      	ldr	r2, [pc, #132]	; (800b0b0 <HAL_UART_Transmit_DMA+0xf4>)
 800b02a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b030:	4a20      	ldr	r2, [pc, #128]	; (800b0b4 <HAL_UART_Transmit_DMA+0xf8>)
 800b032:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b038:	2200      	movs	r2, #0
 800b03a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b03c:	f107 0308 	add.w	r3, r7, #8
 800b040:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b048:	6819      	ldr	r1, [r3, #0]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	3304      	adds	r3, #4
 800b050:	461a      	mov	r2, r3
 800b052:	88fb      	ldrh	r3, [r7, #6]
 800b054:	f7fa fadc 	bl	8005610 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b060:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2200      	movs	r2, #0
 800b066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	3314      	adds	r3, #20
 800b070:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	e853 3f00 	ldrex	r3, [r3]
 800b078:	617b      	str	r3, [r7, #20]
   return(result);
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b080:	62bb      	str	r3, [r7, #40]	; 0x28
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3314      	adds	r3, #20
 800b088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b08a:	627a      	str	r2, [r7, #36]	; 0x24
 800b08c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08e:	6a39      	ldr	r1, [r7, #32]
 800b090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b092:	e841 2300 	strex	r3, r2, [r1]
 800b096:	61fb      	str	r3, [r7, #28]
   return(result);
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1e5      	bne.n	800b06a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	e000      	b.n	800b0a4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800b0a2:	2302      	movs	r3, #2
  }
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3730      	adds	r7, #48	; 0x30
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	0800b84d 	.word	0x0800b84d
 800b0b0:	0800b8e9 	.word	0x0800b8e9
 800b0b4:	0800b907 	.word	0x0800b907

0800b0b8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b09a      	sub	sp, #104	; 0x68
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	330c      	adds	r3, #12
 800b0c6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0ca:	e853 3f00 	ldrex	r3, [r3]
 800b0ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b0d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0d6:	667b      	str	r3, [r7, #100]	; 0x64
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	330c      	adds	r3, #12
 800b0de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b0e0:	657a      	str	r2, [r7, #84]	; 0x54
 800b0e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b0e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b0e8:	e841 2300 	strex	r3, r2, [r1]
 800b0ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b0ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1e5      	bne.n	800b0c0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3314      	adds	r3, #20
 800b0fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0fe:	e853 3f00 	ldrex	r3, [r3]
 800b102:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b106:	f023 0301 	bic.w	r3, r3, #1
 800b10a:	663b      	str	r3, [r7, #96]	; 0x60
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	3314      	adds	r3, #20
 800b112:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b114:	643a      	str	r2, [r7, #64]	; 0x40
 800b116:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b118:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b11a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b11c:	e841 2300 	strex	r3, r2, [r1]
 800b120:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1e5      	bne.n	800b0f4 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d119      	bne.n	800b164 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	330c      	adds	r3, #12
 800b136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	e853 3f00 	ldrex	r3, [r3]
 800b13e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	f023 0310 	bic.w	r3, r3, #16
 800b146:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	330c      	adds	r3, #12
 800b14e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b150:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b158:	e841 2300 	strex	r3, r2, [r1]
 800b15c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1e5      	bne.n	800b130 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b16e:	2b40      	cmp	r3, #64	; 0x40
 800b170:	d136      	bne.n	800b1e0 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	3314      	adds	r3, #20
 800b178:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	e853 3f00 	ldrex	r3, [r3]
 800b180:	60bb      	str	r3, [r7, #8]
   return(result);
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b188:	65bb      	str	r3, [r7, #88]	; 0x58
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	3314      	adds	r3, #20
 800b190:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b192:	61ba      	str	r2, [r7, #24]
 800b194:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b196:	6979      	ldr	r1, [r7, #20]
 800b198:	69ba      	ldr	r2, [r7, #24]
 800b19a:	e841 2300 	strex	r3, r2, [r1]
 800b19e:	613b      	str	r3, [r7, #16]
   return(result);
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1e5      	bne.n	800b172 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d018      	beq.n	800b1e0 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fa fa80 	bl	80056c0 <HAL_DMA_Abort>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00c      	beq.n	800b1e0 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fa fca2 	bl	8005b14 <HAL_DMA_GetError>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b20      	cmp	r3, #32
 800b1d4:	d104      	bne.n	800b1e0 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2210      	movs	r2, #16
 800b1da:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800b1dc:	2303      	movs	r3, #3
 800b1de:	e00a      	b.n	800b1f6 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2220      	movs	r2, #32
 800b1ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3768      	adds	r7, #104	; 0x68
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
	...

0800b200 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b0ba      	sub	sp, #232	; 0xe8
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b226:	2300      	movs	r3, #0
 800b228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b22c:	2300      	movs	r3, #0
 800b22e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b236:	f003 030f 	and.w	r3, r3, #15
 800b23a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b23e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b242:	2b00      	cmp	r3, #0
 800b244:	d10f      	bne.n	800b266 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b24a:	f003 0320 	and.w	r3, r3, #32
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d009      	beq.n	800b266 <HAL_UART_IRQHandler+0x66>
 800b252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b256:	f003 0320 	and.w	r3, r3, #32
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d003      	beq.n	800b266 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fce3 	bl	800bc2a <UART_Receive_IT>
      return;
 800b264:	e25b      	b.n	800b71e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f000 80e1 	beq.w	800b432 <HAL_UART_IRQHandler+0x232>
 800b270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b274:	f003 0301 	and.w	r3, r3, #1
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d106      	bne.n	800b28a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b27c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b280:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 80d4 	beq.w	800b432 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b28a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b28e:	f003 0301 	and.w	r3, r3, #1
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00b      	beq.n	800b2ae <HAL_UART_IRQHandler+0xae>
 800b296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b29a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d005      	beq.n	800b2ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a6:	f043 0201 	orr.w	r2, r3, #1
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2b2:	f003 0304 	and.w	r3, r3, #4
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00b      	beq.n	800b2d2 <HAL_UART_IRQHandler+0xd2>
 800b2ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d005      	beq.n	800b2d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ca:	f043 0202 	orr.w	r2, r3, #2
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b2d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2d6:	f003 0302 	and.w	r3, r3, #2
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00b      	beq.n	800b2f6 <HAL_UART_IRQHandler+0xf6>
 800b2de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d005      	beq.n	800b2f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ee:	f043 0204 	orr.w	r2, r3, #4
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2fa:	f003 0308 	and.w	r3, r3, #8
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d011      	beq.n	800b326 <HAL_UART_IRQHandler+0x126>
 800b302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b306:	f003 0320 	and.w	r3, r3, #32
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d105      	bne.n	800b31a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b30e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	2b00      	cmp	r3, #0
 800b318:	d005      	beq.n	800b326 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31e:	f043 0208 	orr.w	r2, r3, #8
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 81f2 	beq.w	800b714 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b334:	f003 0320 	and.w	r3, r3, #32
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d008      	beq.n	800b34e <HAL_UART_IRQHandler+0x14e>
 800b33c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b340:	f003 0320 	and.w	r3, r3, #32
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fc6e 	bl	800bc2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	695b      	ldr	r3, [r3, #20]
 800b354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b358:	2b40      	cmp	r3, #64	; 0x40
 800b35a:	bf0c      	ite	eq
 800b35c:	2301      	moveq	r3, #1
 800b35e:	2300      	movne	r3, #0
 800b360:	b2db      	uxtb	r3, r3
 800b362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36a:	f003 0308 	and.w	r3, r3, #8
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d103      	bne.n	800b37a <HAL_UART_IRQHandler+0x17a>
 800b372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b376:	2b00      	cmp	r3, #0
 800b378:	d051      	beq.n	800b41e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fb74 	bl	800ba68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b38a:	2b40      	cmp	r3, #64	; 0x40
 800b38c:	d142      	bne.n	800b414 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	3314      	adds	r3, #20
 800b394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b39c:	e853 3f00 	ldrex	r3, [r3]
 800b3a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b3a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3314      	adds	r3, #20
 800b3b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b3ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b3be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b3c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b3ca:	e841 2300 	strex	r3, r2, [r1]
 800b3ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b3d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1d9      	bne.n	800b38e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d013      	beq.n	800b40a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e6:	4a7f      	ldr	r2, [pc, #508]	; (800b5e4 <HAL_UART_IRQHandler+0x3e4>)
 800b3e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fa f9d6 	bl	80057a0 <HAL_DMA_Abort_IT>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d019      	beq.n	800b42e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b404:	4610      	mov	r0, r2
 800b406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b408:	e011      	b.n	800b42e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b412:	e00c      	b.n	800b42e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b41c:	e007      	b.n	800b42e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b42c:	e172      	b.n	800b714 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b42e:	bf00      	nop
    return;
 800b430:	e170      	b.n	800b714 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b436:	2b01      	cmp	r3, #1
 800b438:	f040 814c 	bne.w	800b6d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b43c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b440:	f003 0310 	and.w	r3, r3, #16
 800b444:	2b00      	cmp	r3, #0
 800b446:	f000 8145 	beq.w	800b6d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b44a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b44e:	f003 0310 	and.w	r3, r3, #16
 800b452:	2b00      	cmp	r3, #0
 800b454:	f000 813e 	beq.w	800b6d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b458:	2300      	movs	r3, #0
 800b45a:	60bb      	str	r3, [r7, #8]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	60bb      	str	r3, [r7, #8]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	60bb      	str	r3, [r7, #8]
 800b46c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	695b      	ldr	r3, [r3, #20]
 800b474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b478:	2b40      	cmp	r3, #64	; 0x40
 800b47a:	f040 80b5 	bne.w	800b5e8 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b48a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f000 8142 	beq.w	800b718 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b498:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b49c:	429a      	cmp	r2, r3
 800b49e:	f080 813b 	bcs.w	800b718 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b4a8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ae:	69db      	ldr	r3, [r3, #28]
 800b4b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4b4:	f000 8088 	beq.w	800b5c8 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	330c      	adds	r3, #12
 800b4be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b4c6:	e853 3f00 	ldrex	r3, [r3]
 800b4ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b4ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b4d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	330c      	adds	r3, #12
 800b4e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b4e4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b4e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b4f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b4f4:	e841 2300 	strex	r3, r2, [r1]
 800b4f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b4fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1d9      	bne.n	800b4b8 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3314      	adds	r3, #20
 800b50a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b50e:	e853 3f00 	ldrex	r3, [r3]
 800b512:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b514:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b516:	f023 0301 	bic.w	r3, r3, #1
 800b51a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	3314      	adds	r3, #20
 800b524:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b528:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b52c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b530:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b534:	e841 2300 	strex	r3, r2, [r1]
 800b538:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b53a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d1e1      	bne.n	800b504 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	3314      	adds	r3, #20
 800b546:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b54a:	e853 3f00 	ldrex	r3, [r3]
 800b54e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b556:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	3314      	adds	r3, #20
 800b560:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b564:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b566:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b568:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b56a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b56c:	e841 2300 	strex	r3, r2, [r1]
 800b570:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1e3      	bne.n	800b540 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2220      	movs	r2, #32
 800b57c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	330c      	adds	r3, #12
 800b58c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b590:	e853 3f00 	ldrex	r3, [r3]
 800b594:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b598:	f023 0310 	bic.w	r3, r3, #16
 800b59c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	330c      	adds	r3, #12
 800b5a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b5aa:	65ba      	str	r2, [r7, #88]	; 0x58
 800b5ac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b5b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b5b2:	e841 2300 	strex	r3, r2, [r1]
 800b5b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b5b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1e3      	bne.n	800b586 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fa f87c 	bl	80056c0 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b5d4:	b292      	uxth	r2, r2
 800b5d6:	1a8a      	subs	r2, r1, r2
 800b5d8:	b292      	uxth	r2, r2
 800b5da:	4611      	mov	r1, r2
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b5e0:	e09a      	b.n	800b718 <HAL_UART_IRQHandler+0x518>
 800b5e2:	bf00      	nop
 800b5e4:	0800bb2f 	.word	0x0800bb2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	1ad3      	subs	r3, r2, r3
 800b5f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f000 808c 	beq.w	800b71c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b604:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f000 8087 	beq.w	800b71c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	330c      	adds	r3, #12
 800b614:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b618:	e853 3f00 	ldrex	r3, [r3]
 800b61c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b620:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b624:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	330c      	adds	r3, #12
 800b62e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b632:	647a      	str	r2, [r7, #68]	; 0x44
 800b634:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b636:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b638:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b63a:	e841 2300 	strex	r3, r2, [r1]
 800b63e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1e3      	bne.n	800b60e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	3314      	adds	r3, #20
 800b64c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b650:	e853 3f00 	ldrex	r3, [r3]
 800b654:	623b      	str	r3, [r7, #32]
   return(result);
 800b656:	6a3b      	ldr	r3, [r7, #32]
 800b658:	f023 0301 	bic.w	r3, r3, #1
 800b65c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3314      	adds	r3, #20
 800b666:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b66a:	633a      	str	r2, [r7, #48]	; 0x30
 800b66c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b672:	e841 2300 	strex	r3, r2, [r1]
 800b676:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1e3      	bne.n	800b646 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2220      	movs	r2, #32
 800b682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2200      	movs	r2, #0
 800b68a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	330c      	adds	r3, #12
 800b692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	e853 3f00 	ldrex	r3, [r3]
 800b69a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f023 0310 	bic.w	r3, r3, #16
 800b6a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	330c      	adds	r3, #12
 800b6ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b6b0:	61fa      	str	r2, [r7, #28]
 800b6b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b4:	69b9      	ldr	r1, [r7, #24]
 800b6b6:	69fa      	ldr	r2, [r7, #28]
 800b6b8:	e841 2300 	strex	r3, r2, [r1]
 800b6bc:	617b      	str	r3, [r7, #20]
   return(result);
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1e3      	bne.n	800b68c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6c8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b6cc:	4611      	mov	r1, r2
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b6d2:	e023      	b.n	800b71c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b6d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d009      	beq.n	800b6f4 <HAL_UART_IRQHandler+0x4f4>
 800b6e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d003      	beq.n	800b6f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 fa33 	bl	800bb58 <UART_Transmit_IT>
    return;
 800b6f2:	e014      	b.n	800b71e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b6f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00e      	beq.n	800b71e <HAL_UART_IRQHandler+0x51e>
 800b700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d008      	beq.n	800b71e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 fa73 	bl	800bbf8 <UART_EndTransmit_IT>
    return;
 800b712:	e004      	b.n	800b71e <HAL_UART_IRQHandler+0x51e>
    return;
 800b714:	bf00      	nop
 800b716:	e002      	b.n	800b71e <HAL_UART_IRQHandler+0x51e>
      return;
 800b718:	bf00      	nop
 800b71a:	e000      	b.n	800b71e <HAL_UART_IRQHandler+0x51e>
      return;
 800b71c:	bf00      	nop
  }
}
 800b71e:	37e8      	adds	r7, #232	; 0xe8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b740:	bf00      	nop
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b768:	bf00      	nop
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b77c:	bf00      	nop
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b7a4:	bf00      	nop
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b7b8:	bf00      	nop
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b083      	sub	sp, #12
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a10      	ldr	r2, [pc, #64]	; (800b828 <UART_InitCallbacksToDefault+0x4c>)
 800b7e8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a0f      	ldr	r2, [pc, #60]	; (800b82c <UART_InitCallbacksToDefault+0x50>)
 800b7ee:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a0f      	ldr	r2, [pc, #60]	; (800b830 <UART_InitCallbacksToDefault+0x54>)
 800b7f4:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a0e      	ldr	r2, [pc, #56]	; (800b834 <UART_InitCallbacksToDefault+0x58>)
 800b7fa:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a0e      	ldr	r2, [pc, #56]	; (800b838 <UART_InitCallbacksToDefault+0x5c>)
 800b800:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a0d      	ldr	r2, [pc, #52]	; (800b83c <UART_InitCallbacksToDefault+0x60>)
 800b806:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4a0d      	ldr	r2, [pc, #52]	; (800b840 <UART_InitCallbacksToDefault+0x64>)
 800b80c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	4a0c      	ldr	r2, [pc, #48]	; (800b844 <UART_InitCallbacksToDefault+0x68>)
 800b812:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4a0c      	ldr	r2, [pc, #48]	; (800b848 <UART_InitCallbacksToDefault+0x6c>)
 800b818:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b81a:	bf00      	nop
 800b81c:	370c      	adds	r7, #12
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	0800b739 	.word	0x0800b739
 800b82c:	0800b725 	.word	0x0800b725
 800b830:	0800b761 	.word	0x0800b761
 800b834:	0800b74d 	.word	0x0800b74d
 800b838:	0800b775 	.word	0x0800b775
 800b83c:	0800b789 	.word	0x0800b789
 800b840:	0800b79d 	.word	0x0800b79d
 800b844:	0800b7b1 	.word	0x0800b7b1
 800b848:	0800b7c5 	.word	0x0800b7c5

0800b84c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b090      	sub	sp, #64	; 0x40
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b858:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b864:	2b00      	cmp	r3, #0
 800b866:	d137      	bne.n	800b8d8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b86a:	2200      	movs	r2, #0
 800b86c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	3314      	adds	r3, #20
 800b874:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b878:	e853 3f00 	ldrex	r3, [r3]
 800b87c:	623b      	str	r3, [r7, #32]
   return(result);
 800b87e:	6a3b      	ldr	r3, [r7, #32]
 800b880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b884:	63bb      	str	r3, [r7, #56]	; 0x38
 800b886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3314      	adds	r3, #20
 800b88c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b88e:	633a      	str	r2, [r7, #48]	; 0x30
 800b890:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b896:	e841 2300 	strex	r3, r2, [r1]
 800b89a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1e5      	bne.n	800b86e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	330c      	adds	r3, #12
 800b8a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	e853 3f00 	ldrex	r3, [r3]
 800b8b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8b8:	637b      	str	r3, [r7, #52]	; 0x34
 800b8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	330c      	adds	r3, #12
 800b8c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8c2:	61fa      	str	r2, [r7, #28]
 800b8c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c6:	69b9      	ldr	r1, [r7, #24]
 800b8c8:	69fa      	ldr	r2, [r7, #28]
 800b8ca:	e841 2300 	strex	r3, r2, [r1]
 800b8ce:	617b      	str	r3, [r7, #20]
   return(result);
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1e5      	bne.n	800b8a2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8d6:	e003      	b.n	800b8e0 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800b8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b8de:	4798      	blx	r3
}
 800b8e0:	bf00      	nop
 800b8e2:	3740      	adds	r7, #64	; 0x40
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8fe:	bf00      	nop
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b084      	sub	sp, #16
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b90e:	2300      	movs	r3, #0
 800b910:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b916:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	695b      	ldr	r3, [r3, #20]
 800b91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b922:	2b80      	cmp	r3, #128	; 0x80
 800b924:	bf0c      	ite	eq
 800b926:	2301      	moveq	r3, #1
 800b928:	2300      	movne	r3, #0
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b934:	b2db      	uxtb	r3, r3
 800b936:	2b21      	cmp	r3, #33	; 0x21
 800b938:	d108      	bne.n	800b94c <UART_DMAError+0x46>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d005      	beq.n	800b94c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	2200      	movs	r2, #0
 800b944:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b946:	68b8      	ldr	r0, [r7, #8]
 800b948:	f000 f866 	bl	800ba18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	695b      	ldr	r3, [r3, #20]
 800b952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b956:	2b40      	cmp	r3, #64	; 0x40
 800b958:	bf0c      	ite	eq
 800b95a:	2301      	moveq	r3, #1
 800b95c:	2300      	movne	r3, #0
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	2b22      	cmp	r3, #34	; 0x22
 800b96c:	d108      	bne.n	800b980 <UART_DMAError+0x7a>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d005      	beq.n	800b980 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2200      	movs	r2, #0
 800b978:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b97a:	68b8      	ldr	r0, [r7, #8]
 800b97c:	f000 f874 	bl	800ba68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b984:	f043 0210 	orr.w	r2, r3, #16
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b990:	68b8      	ldr	r0, [r7, #8]
 800b992:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b994:	bf00      	nop
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	88fa      	ldrh	r2, [r7, #6]
 800b9b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	88fa      	ldrh	r2, [r7, #6]
 800b9ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2222      	movs	r2, #34	; 0x22
 800b9c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d007      	beq.n	800b9ea <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	68da      	ldr	r2, [r3, #12]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	695a      	ldr	r2, [r3, #20]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f042 0201 	orr.w	r2, r2, #1
 800b9f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	68da      	ldr	r2, [r3, #12]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f042 0220 	orr.w	r2, r2, #32
 800ba08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ba0a:	2300      	movs	r3, #0
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3714      	adds	r7, #20
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b089      	sub	sp, #36	; 0x24
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	330c      	adds	r3, #12
 800ba26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	e853 3f00 	ldrex	r3, [r3]
 800ba2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ba36:	61fb      	str	r3, [r7, #28]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	330c      	adds	r3, #12
 800ba3e:	69fa      	ldr	r2, [r7, #28]
 800ba40:	61ba      	str	r2, [r7, #24]
 800ba42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba44:	6979      	ldr	r1, [r7, #20]
 800ba46:	69ba      	ldr	r2, [r7, #24]
 800ba48:	e841 2300 	strex	r3, r2, [r1]
 800ba4c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1e5      	bne.n	800ba20 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2220      	movs	r2, #32
 800ba58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ba5c:	bf00      	nop
 800ba5e:	3724      	adds	r7, #36	; 0x24
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b095      	sub	sp, #84	; 0x54
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	330c      	adds	r3, #12
 800ba76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba7a:	e853 3f00 	ldrex	r3, [r3]
 800ba7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ba80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba86:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	330c      	adds	r3, #12
 800ba8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba90:	643a      	str	r2, [r7, #64]	; 0x40
 800ba92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba98:	e841 2300 	strex	r3, r2, [r1]
 800ba9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d1e5      	bne.n	800ba70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	3314      	adds	r3, #20
 800baaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baac:	6a3b      	ldr	r3, [r7, #32]
 800baae:	e853 3f00 	ldrex	r3, [r3]
 800bab2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	f023 0301 	bic.w	r3, r3, #1
 800baba:	64bb      	str	r3, [r7, #72]	; 0x48
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	3314      	adds	r3, #20
 800bac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bac4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bac6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800baca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bacc:	e841 2300 	strex	r3, r2, [r1]
 800bad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1e5      	bne.n	800baa4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800badc:	2b01      	cmp	r3, #1
 800bade:	d119      	bne.n	800bb14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	330c      	adds	r3, #12
 800bae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	e853 3f00 	ldrex	r3, [r3]
 800baee:	60bb      	str	r3, [r7, #8]
   return(result);
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	f023 0310 	bic.w	r3, r3, #16
 800baf6:	647b      	str	r3, [r7, #68]	; 0x44
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	330c      	adds	r3, #12
 800bafe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb00:	61ba      	str	r2, [r7, #24]
 800bb02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb04:	6979      	ldr	r1, [r7, #20]
 800bb06:	69ba      	ldr	r2, [r7, #24]
 800bb08:	e841 2300 	strex	r3, r2, [r1]
 800bb0c:	613b      	str	r3, [r7, #16]
   return(result);
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d1e5      	bne.n	800bae0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2220      	movs	r2, #32
 800bb18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bb22:	bf00      	nop
 800bb24:	3754      	adds	r7, #84	; 0x54
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b084      	sub	sp, #16
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2200      	movs	r2, #0
 800bb46:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb50:	bf00      	nop
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	2b21      	cmp	r3, #33	; 0x21
 800bb6a:	d13e      	bne.n	800bbea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb74:	d114      	bne.n	800bba0 <UART_Transmit_IT+0x48>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d110      	bne.n	800bba0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a1b      	ldr	r3, [r3, #32]
 800bb82:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	881b      	ldrh	r3, [r3, #0]
 800bb88:	461a      	mov	r2, r3
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb92:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6a1b      	ldr	r3, [r3, #32]
 800bb98:	1c9a      	adds	r2, r3, #2
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	621a      	str	r2, [r3, #32]
 800bb9e:	e008      	b.n	800bbb2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6a1b      	ldr	r3, [r3, #32]
 800bba4:	1c59      	adds	r1, r3, #1
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	6211      	str	r1, [r2, #32]
 800bbaa:	781a      	ldrb	r2, [r3, #0]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	3b01      	subs	r3, #1
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10f      	bne.n	800bbe6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	68da      	ldr	r2, [r3, #12]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bbd4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	68da      	ldr	r2, [r3, #12]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bbe4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	e000      	b.n	800bbec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bbea:	2302      	movs	r3, #2
  }
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3714      	adds	r7, #20
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68da      	ldr	r2, [r3, #12]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc0e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2220      	movs	r2, #32
 800bc14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3708      	adds	r7, #8
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b08c      	sub	sp, #48	; 0x30
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b22      	cmp	r3, #34	; 0x22
 800bc3c:	f040 80ad 	bne.w	800bd9a <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc48:	d117      	bne.n	800bc7a <UART_Receive_IT+0x50>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	691b      	ldr	r3, [r3, #16]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d113      	bne.n	800bc7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bc52:	2300      	movs	r3, #0
 800bc54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc72:	1c9a      	adds	r2, r3, #2
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	629a      	str	r2, [r3, #40]	; 0x28
 800bc78:	e026      	b.n	800bcc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bc80:	2300      	movs	r3, #0
 800bc82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc8c:	d007      	beq.n	800bc9e <UART_Receive_IT+0x74>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d10a      	bne.n	800bcac <UART_Receive_IT+0x82>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	691b      	ldr	r3, [r3, #16]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d106      	bne.n	800bcac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	b2da      	uxtb	r2, r3
 800bca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca8:	701a      	strb	r2, [r3, #0]
 800bcaa:	e008      	b.n	800bcbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcb8:	b2da      	uxtb	r2, r3
 800bcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc2:	1c5a      	adds	r2, r3, #1
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d15c      	bne.n	800bd96 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	68da      	ldr	r2, [r3, #12]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f022 0220 	bic.w	r2, r2, #32
 800bcea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	68da      	ldr	r2, [r3, #12]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bcfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	695a      	ldr	r2, [r3, #20]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f022 0201 	bic.w	r2, r2, #1
 800bd0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2220      	movs	r2, #32
 800bd10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d136      	bne.n	800bd8a <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	330c      	adds	r3, #12
 800bd28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	e853 3f00 	ldrex	r3, [r3]
 800bd30:	613b      	str	r3, [r7, #16]
   return(result);
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	f023 0310 	bic.w	r3, r3, #16
 800bd38:	627b      	str	r3, [r7, #36]	; 0x24
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	330c      	adds	r3, #12
 800bd40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd42:	623a      	str	r2, [r7, #32]
 800bd44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd46:	69f9      	ldr	r1, [r7, #28]
 800bd48:	6a3a      	ldr	r2, [r7, #32]
 800bd4a:	e841 2300 	strex	r3, r2, [r1]
 800bd4e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d1e5      	bne.n	800bd22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f003 0310 	and.w	r3, r3, #16
 800bd60:	2b10      	cmp	r3, #16
 800bd62:	d10a      	bne.n	800bd7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bd64:	2300      	movs	r3, #0
 800bd66:	60fb      	str	r3, [r7, #12]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	60fb      	str	r3, [r7, #12]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	60fb      	str	r3, [r7, #12]
 800bd78:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800bd82:	4611      	mov	r1, r2
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	4798      	blx	r3
 800bd88:	e003      	b.n	800bd92 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bd92:	2300      	movs	r3, #0
 800bd94:	e002      	b.n	800bd9c <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800bd96:	2300      	movs	r3, #0
 800bd98:	e000      	b.n	800bd9c <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800bd9a:	2302      	movs	r3, #2
  }
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3730      	adds	r7, #48	; 0x30
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bda4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bda8:	b0c0      	sub	sp, #256	; 0x100
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bdb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	691b      	ldr	r3, [r3, #16]
 800bdb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bdbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdc0:	68d9      	ldr	r1, [r3, #12]
 800bdc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	ea40 0301 	orr.w	r3, r0, r1
 800bdcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bdce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdd2:	689a      	ldr	r2, [r3, #8]
 800bdd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdd8:	691b      	ldr	r3, [r3, #16]
 800bdda:	431a      	orrs	r2, r3
 800bddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bde0:	695b      	ldr	r3, [r3, #20]
 800bde2:	431a      	orrs	r2, r3
 800bde4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bde8:	69db      	ldr	r3, [r3, #28]
 800bdea:	4313      	orrs	r3, r2
 800bdec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bdf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bdfc:	f021 010c 	bic.w	r1, r1, #12
 800be00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800be0a:	430b      	orrs	r3, r1
 800be0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800be0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	695b      	ldr	r3, [r3, #20]
 800be16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800be1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be1e:	6999      	ldr	r1, [r3, #24]
 800be20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	ea40 0301 	orr.w	r3, r0, r1
 800be2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800be2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	4b8f      	ldr	r3, [pc, #572]	; (800c070 <UART_SetConfig+0x2cc>)
 800be34:	429a      	cmp	r2, r3
 800be36:	d005      	beq.n	800be44 <UART_SetConfig+0xa0>
 800be38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	4b8d      	ldr	r3, [pc, #564]	; (800c074 <UART_SetConfig+0x2d0>)
 800be40:	429a      	cmp	r2, r3
 800be42:	d104      	bne.n	800be4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800be44:	f7fd fa26 	bl	8009294 <HAL_RCC_GetPCLK2Freq>
 800be48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800be4c:	e003      	b.n	800be56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800be4e:	f7fd fa0d 	bl	800926c <HAL_RCC_GetPCLK1Freq>
 800be52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be5a:	69db      	ldr	r3, [r3, #28]
 800be5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be60:	f040 810c 	bne.w	800c07c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800be64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be68:	2200      	movs	r2, #0
 800be6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800be6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800be72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800be76:	4622      	mov	r2, r4
 800be78:	462b      	mov	r3, r5
 800be7a:	1891      	adds	r1, r2, r2
 800be7c:	65b9      	str	r1, [r7, #88]	; 0x58
 800be7e:	415b      	adcs	r3, r3
 800be80:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800be86:	4621      	mov	r1, r4
 800be88:	eb12 0801 	adds.w	r8, r2, r1
 800be8c:	4629      	mov	r1, r5
 800be8e:	eb43 0901 	adc.w	r9, r3, r1
 800be92:	f04f 0200 	mov.w	r2, #0
 800be96:	f04f 0300 	mov.w	r3, #0
 800be9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800be9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bea6:	4690      	mov	r8, r2
 800bea8:	4699      	mov	r9, r3
 800beaa:	4623      	mov	r3, r4
 800beac:	eb18 0303 	adds.w	r3, r8, r3
 800beb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800beb4:	462b      	mov	r3, r5
 800beb6:	eb49 0303 	adc.w	r3, r9, r3
 800beba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800beca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bece:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bed2:	460b      	mov	r3, r1
 800bed4:	18db      	adds	r3, r3, r3
 800bed6:	653b      	str	r3, [r7, #80]	; 0x50
 800bed8:	4613      	mov	r3, r2
 800beda:	eb42 0303 	adc.w	r3, r2, r3
 800bede:	657b      	str	r3, [r7, #84]	; 0x54
 800bee0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bee4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bee8:	f7f4 fe5a 	bl	8000ba0 <__aeabi_uldivmod>
 800beec:	4602      	mov	r2, r0
 800beee:	460b      	mov	r3, r1
 800bef0:	4b61      	ldr	r3, [pc, #388]	; (800c078 <UART_SetConfig+0x2d4>)
 800bef2:	fba3 2302 	umull	r2, r3, r3, r2
 800bef6:	095b      	lsrs	r3, r3, #5
 800bef8:	011c      	lsls	r4, r3, #4
 800befa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800befe:	2200      	movs	r2, #0
 800bf00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bf04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bf08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bf0c:	4642      	mov	r2, r8
 800bf0e:	464b      	mov	r3, r9
 800bf10:	1891      	adds	r1, r2, r2
 800bf12:	64b9      	str	r1, [r7, #72]	; 0x48
 800bf14:	415b      	adcs	r3, r3
 800bf16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bf1c:	4641      	mov	r1, r8
 800bf1e:	eb12 0a01 	adds.w	sl, r2, r1
 800bf22:	4649      	mov	r1, r9
 800bf24:	eb43 0b01 	adc.w	fp, r3, r1
 800bf28:	f04f 0200 	mov.w	r2, #0
 800bf2c:	f04f 0300 	mov.w	r3, #0
 800bf30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bf34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bf38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bf3c:	4692      	mov	sl, r2
 800bf3e:	469b      	mov	fp, r3
 800bf40:	4643      	mov	r3, r8
 800bf42:	eb1a 0303 	adds.w	r3, sl, r3
 800bf46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf4a:	464b      	mov	r3, r9
 800bf4c:	eb4b 0303 	adc.w	r3, fp, r3
 800bf50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bf54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bf64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bf68:	460b      	mov	r3, r1
 800bf6a:	18db      	adds	r3, r3, r3
 800bf6c:	643b      	str	r3, [r7, #64]	; 0x40
 800bf6e:	4613      	mov	r3, r2
 800bf70:	eb42 0303 	adc.w	r3, r2, r3
 800bf74:	647b      	str	r3, [r7, #68]	; 0x44
 800bf76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bf7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bf7e:	f7f4 fe0f 	bl	8000ba0 <__aeabi_uldivmod>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	4611      	mov	r1, r2
 800bf88:	4b3b      	ldr	r3, [pc, #236]	; (800c078 <UART_SetConfig+0x2d4>)
 800bf8a:	fba3 2301 	umull	r2, r3, r3, r1
 800bf8e:	095b      	lsrs	r3, r3, #5
 800bf90:	2264      	movs	r2, #100	; 0x64
 800bf92:	fb02 f303 	mul.w	r3, r2, r3
 800bf96:	1acb      	subs	r3, r1, r3
 800bf98:	00db      	lsls	r3, r3, #3
 800bf9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bf9e:	4b36      	ldr	r3, [pc, #216]	; (800c078 <UART_SetConfig+0x2d4>)
 800bfa0:	fba3 2302 	umull	r2, r3, r3, r2
 800bfa4:	095b      	lsrs	r3, r3, #5
 800bfa6:	005b      	lsls	r3, r3, #1
 800bfa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bfac:	441c      	add	r4, r3
 800bfae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bfb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bfbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bfc0:	4642      	mov	r2, r8
 800bfc2:	464b      	mov	r3, r9
 800bfc4:	1891      	adds	r1, r2, r2
 800bfc6:	63b9      	str	r1, [r7, #56]	; 0x38
 800bfc8:	415b      	adcs	r3, r3
 800bfca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bfd0:	4641      	mov	r1, r8
 800bfd2:	1851      	adds	r1, r2, r1
 800bfd4:	6339      	str	r1, [r7, #48]	; 0x30
 800bfd6:	4649      	mov	r1, r9
 800bfd8:	414b      	adcs	r3, r1
 800bfda:	637b      	str	r3, [r7, #52]	; 0x34
 800bfdc:	f04f 0200 	mov.w	r2, #0
 800bfe0:	f04f 0300 	mov.w	r3, #0
 800bfe4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bfe8:	4659      	mov	r1, fp
 800bfea:	00cb      	lsls	r3, r1, #3
 800bfec:	4651      	mov	r1, sl
 800bfee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bff2:	4651      	mov	r1, sl
 800bff4:	00ca      	lsls	r2, r1, #3
 800bff6:	4610      	mov	r0, r2
 800bff8:	4619      	mov	r1, r3
 800bffa:	4603      	mov	r3, r0
 800bffc:	4642      	mov	r2, r8
 800bffe:	189b      	adds	r3, r3, r2
 800c000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c004:	464b      	mov	r3, r9
 800c006:	460a      	mov	r2, r1
 800c008:	eb42 0303 	adc.w	r3, r2, r3
 800c00c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c01c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c020:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c024:	460b      	mov	r3, r1
 800c026:	18db      	adds	r3, r3, r3
 800c028:	62bb      	str	r3, [r7, #40]	; 0x28
 800c02a:	4613      	mov	r3, r2
 800c02c:	eb42 0303 	adc.w	r3, r2, r3
 800c030:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c032:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c036:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c03a:	f7f4 fdb1 	bl	8000ba0 <__aeabi_uldivmod>
 800c03e:	4602      	mov	r2, r0
 800c040:	460b      	mov	r3, r1
 800c042:	4b0d      	ldr	r3, [pc, #52]	; (800c078 <UART_SetConfig+0x2d4>)
 800c044:	fba3 1302 	umull	r1, r3, r3, r2
 800c048:	095b      	lsrs	r3, r3, #5
 800c04a:	2164      	movs	r1, #100	; 0x64
 800c04c:	fb01 f303 	mul.w	r3, r1, r3
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	00db      	lsls	r3, r3, #3
 800c054:	3332      	adds	r3, #50	; 0x32
 800c056:	4a08      	ldr	r2, [pc, #32]	; (800c078 <UART_SetConfig+0x2d4>)
 800c058:	fba2 2303 	umull	r2, r3, r2, r3
 800c05c:	095b      	lsrs	r3, r3, #5
 800c05e:	f003 0207 	and.w	r2, r3, #7
 800c062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4422      	add	r2, r4
 800c06a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c06c:	e105      	b.n	800c27a <UART_SetConfig+0x4d6>
 800c06e:	bf00      	nop
 800c070:	40011000 	.word	0x40011000
 800c074:	40011400 	.word	0x40011400
 800c078:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c07c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c080:	2200      	movs	r2, #0
 800c082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c086:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c08a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c08e:	4642      	mov	r2, r8
 800c090:	464b      	mov	r3, r9
 800c092:	1891      	adds	r1, r2, r2
 800c094:	6239      	str	r1, [r7, #32]
 800c096:	415b      	adcs	r3, r3
 800c098:	627b      	str	r3, [r7, #36]	; 0x24
 800c09a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c09e:	4641      	mov	r1, r8
 800c0a0:	1854      	adds	r4, r2, r1
 800c0a2:	4649      	mov	r1, r9
 800c0a4:	eb43 0501 	adc.w	r5, r3, r1
 800c0a8:	f04f 0200 	mov.w	r2, #0
 800c0ac:	f04f 0300 	mov.w	r3, #0
 800c0b0:	00eb      	lsls	r3, r5, #3
 800c0b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c0b6:	00e2      	lsls	r2, r4, #3
 800c0b8:	4614      	mov	r4, r2
 800c0ba:	461d      	mov	r5, r3
 800c0bc:	4643      	mov	r3, r8
 800c0be:	18e3      	adds	r3, r4, r3
 800c0c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c0c4:	464b      	mov	r3, r9
 800c0c6:	eb45 0303 	adc.w	r3, r5, r3
 800c0ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c0ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c0da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c0de:	f04f 0200 	mov.w	r2, #0
 800c0e2:	f04f 0300 	mov.w	r3, #0
 800c0e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c0ea:	4629      	mov	r1, r5
 800c0ec:	008b      	lsls	r3, r1, #2
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c0f4:	4621      	mov	r1, r4
 800c0f6:	008a      	lsls	r2, r1, #2
 800c0f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c0fc:	f7f4 fd50 	bl	8000ba0 <__aeabi_uldivmod>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	4b60      	ldr	r3, [pc, #384]	; (800c288 <UART_SetConfig+0x4e4>)
 800c106:	fba3 2302 	umull	r2, r3, r3, r2
 800c10a:	095b      	lsrs	r3, r3, #5
 800c10c:	011c      	lsls	r4, r3, #4
 800c10e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c112:	2200      	movs	r2, #0
 800c114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c118:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c11c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c120:	4642      	mov	r2, r8
 800c122:	464b      	mov	r3, r9
 800c124:	1891      	adds	r1, r2, r2
 800c126:	61b9      	str	r1, [r7, #24]
 800c128:	415b      	adcs	r3, r3
 800c12a:	61fb      	str	r3, [r7, #28]
 800c12c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c130:	4641      	mov	r1, r8
 800c132:	1851      	adds	r1, r2, r1
 800c134:	6139      	str	r1, [r7, #16]
 800c136:	4649      	mov	r1, r9
 800c138:	414b      	adcs	r3, r1
 800c13a:	617b      	str	r3, [r7, #20]
 800c13c:	f04f 0200 	mov.w	r2, #0
 800c140:	f04f 0300 	mov.w	r3, #0
 800c144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c148:	4659      	mov	r1, fp
 800c14a:	00cb      	lsls	r3, r1, #3
 800c14c:	4651      	mov	r1, sl
 800c14e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c152:	4651      	mov	r1, sl
 800c154:	00ca      	lsls	r2, r1, #3
 800c156:	4610      	mov	r0, r2
 800c158:	4619      	mov	r1, r3
 800c15a:	4603      	mov	r3, r0
 800c15c:	4642      	mov	r2, r8
 800c15e:	189b      	adds	r3, r3, r2
 800c160:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c164:	464b      	mov	r3, r9
 800c166:	460a      	mov	r2, r1
 800c168:	eb42 0303 	adc.w	r3, r2, r3
 800c16c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	67bb      	str	r3, [r7, #120]	; 0x78
 800c17a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c17c:	f04f 0200 	mov.w	r2, #0
 800c180:	f04f 0300 	mov.w	r3, #0
 800c184:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c188:	4649      	mov	r1, r9
 800c18a:	008b      	lsls	r3, r1, #2
 800c18c:	4641      	mov	r1, r8
 800c18e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c192:	4641      	mov	r1, r8
 800c194:	008a      	lsls	r2, r1, #2
 800c196:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c19a:	f7f4 fd01 	bl	8000ba0 <__aeabi_uldivmod>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	4b39      	ldr	r3, [pc, #228]	; (800c288 <UART_SetConfig+0x4e4>)
 800c1a4:	fba3 1302 	umull	r1, r3, r3, r2
 800c1a8:	095b      	lsrs	r3, r3, #5
 800c1aa:	2164      	movs	r1, #100	; 0x64
 800c1ac:	fb01 f303 	mul.w	r3, r1, r3
 800c1b0:	1ad3      	subs	r3, r2, r3
 800c1b2:	011b      	lsls	r3, r3, #4
 800c1b4:	3332      	adds	r3, #50	; 0x32
 800c1b6:	4a34      	ldr	r2, [pc, #208]	; (800c288 <UART_SetConfig+0x4e4>)
 800c1b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c1bc:	095b      	lsrs	r3, r3, #5
 800c1be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c1c2:	441c      	add	r4, r3
 800c1c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	673b      	str	r3, [r7, #112]	; 0x70
 800c1cc:	677a      	str	r2, [r7, #116]	; 0x74
 800c1ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c1d2:	4642      	mov	r2, r8
 800c1d4:	464b      	mov	r3, r9
 800c1d6:	1891      	adds	r1, r2, r2
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	415b      	adcs	r3, r3
 800c1dc:	60fb      	str	r3, [r7, #12]
 800c1de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c1e2:	4641      	mov	r1, r8
 800c1e4:	1851      	adds	r1, r2, r1
 800c1e6:	6039      	str	r1, [r7, #0]
 800c1e8:	4649      	mov	r1, r9
 800c1ea:	414b      	adcs	r3, r1
 800c1ec:	607b      	str	r3, [r7, #4]
 800c1ee:	f04f 0200 	mov.w	r2, #0
 800c1f2:	f04f 0300 	mov.w	r3, #0
 800c1f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c1fa:	4659      	mov	r1, fp
 800c1fc:	00cb      	lsls	r3, r1, #3
 800c1fe:	4651      	mov	r1, sl
 800c200:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c204:	4651      	mov	r1, sl
 800c206:	00ca      	lsls	r2, r1, #3
 800c208:	4610      	mov	r0, r2
 800c20a:	4619      	mov	r1, r3
 800c20c:	4603      	mov	r3, r0
 800c20e:	4642      	mov	r2, r8
 800c210:	189b      	adds	r3, r3, r2
 800c212:	66bb      	str	r3, [r7, #104]	; 0x68
 800c214:	464b      	mov	r3, r9
 800c216:	460a      	mov	r2, r1
 800c218:	eb42 0303 	adc.w	r3, r2, r3
 800c21c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c21e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	663b      	str	r3, [r7, #96]	; 0x60
 800c228:	667a      	str	r2, [r7, #100]	; 0x64
 800c22a:	f04f 0200 	mov.w	r2, #0
 800c22e:	f04f 0300 	mov.w	r3, #0
 800c232:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c236:	4649      	mov	r1, r9
 800c238:	008b      	lsls	r3, r1, #2
 800c23a:	4641      	mov	r1, r8
 800c23c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c240:	4641      	mov	r1, r8
 800c242:	008a      	lsls	r2, r1, #2
 800c244:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c248:	f7f4 fcaa 	bl	8000ba0 <__aeabi_uldivmod>
 800c24c:	4602      	mov	r2, r0
 800c24e:	460b      	mov	r3, r1
 800c250:	4b0d      	ldr	r3, [pc, #52]	; (800c288 <UART_SetConfig+0x4e4>)
 800c252:	fba3 1302 	umull	r1, r3, r3, r2
 800c256:	095b      	lsrs	r3, r3, #5
 800c258:	2164      	movs	r1, #100	; 0x64
 800c25a:	fb01 f303 	mul.w	r3, r1, r3
 800c25e:	1ad3      	subs	r3, r2, r3
 800c260:	011b      	lsls	r3, r3, #4
 800c262:	3332      	adds	r3, #50	; 0x32
 800c264:	4a08      	ldr	r2, [pc, #32]	; (800c288 <UART_SetConfig+0x4e4>)
 800c266:	fba2 2303 	umull	r2, r3, r2, r3
 800c26a:	095b      	lsrs	r3, r3, #5
 800c26c:	f003 020f 	and.w	r2, r3, #15
 800c270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4422      	add	r2, r4
 800c278:	609a      	str	r2, [r3, #8]
}
 800c27a:	bf00      	nop
 800c27c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c280:	46bd      	mov	sp, r7
 800c282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c286:	bf00      	nop
 800c288:	51eb851f 	.word	0x51eb851f

0800c28c <__errno>:
 800c28c:	4b01      	ldr	r3, [pc, #4]	; (800c294 <__errno+0x8>)
 800c28e:	6818      	ldr	r0, [r3, #0]
 800c290:	4770      	bx	lr
 800c292:	bf00      	nop
 800c294:	20000298 	.word	0x20000298

0800c298 <__libc_init_array>:
 800c298:	b570      	push	{r4, r5, r6, lr}
 800c29a:	4d0d      	ldr	r5, [pc, #52]	; (800c2d0 <__libc_init_array+0x38>)
 800c29c:	4c0d      	ldr	r4, [pc, #52]	; (800c2d4 <__libc_init_array+0x3c>)
 800c29e:	1b64      	subs	r4, r4, r5
 800c2a0:	10a4      	asrs	r4, r4, #2
 800c2a2:	2600      	movs	r6, #0
 800c2a4:	42a6      	cmp	r6, r4
 800c2a6:	d109      	bne.n	800c2bc <__libc_init_array+0x24>
 800c2a8:	4d0b      	ldr	r5, [pc, #44]	; (800c2d8 <__libc_init_array+0x40>)
 800c2aa:	4c0c      	ldr	r4, [pc, #48]	; (800c2dc <__libc_init_array+0x44>)
 800c2ac:	f001 ff86 	bl	800e1bc <_init>
 800c2b0:	1b64      	subs	r4, r4, r5
 800c2b2:	10a4      	asrs	r4, r4, #2
 800c2b4:	2600      	movs	r6, #0
 800c2b6:	42a6      	cmp	r6, r4
 800c2b8:	d105      	bne.n	800c2c6 <__libc_init_array+0x2e>
 800c2ba:	bd70      	pop	{r4, r5, r6, pc}
 800c2bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2c0:	4798      	blx	r3
 800c2c2:	3601      	adds	r6, #1
 800c2c4:	e7ee      	b.n	800c2a4 <__libc_init_array+0xc>
 800c2c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2ca:	4798      	blx	r3
 800c2cc:	3601      	adds	r6, #1
 800c2ce:	e7f2      	b.n	800c2b6 <__libc_init_array+0x1e>
 800c2d0:	0800e620 	.word	0x0800e620
 800c2d4:	0800e620 	.word	0x0800e620
 800c2d8:	0800e620 	.word	0x0800e620
 800c2dc:	0800e624 	.word	0x0800e624

0800c2e0 <memcpy>:
 800c2e0:	440a      	add	r2, r1
 800c2e2:	4291      	cmp	r1, r2
 800c2e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2e8:	d100      	bne.n	800c2ec <memcpy+0xc>
 800c2ea:	4770      	bx	lr
 800c2ec:	b510      	push	{r4, lr}
 800c2ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2f6:	4291      	cmp	r1, r2
 800c2f8:	d1f9      	bne.n	800c2ee <memcpy+0xe>
 800c2fa:	bd10      	pop	{r4, pc}

0800c2fc <memset>:
 800c2fc:	4402      	add	r2, r0
 800c2fe:	4603      	mov	r3, r0
 800c300:	4293      	cmp	r3, r2
 800c302:	d100      	bne.n	800c306 <memset+0xa>
 800c304:	4770      	bx	lr
 800c306:	f803 1b01 	strb.w	r1, [r3], #1
 800c30a:	e7f9      	b.n	800c300 <memset+0x4>

0800c30c <cosf>:
 800c30c:	ee10 3a10 	vmov	r3, s0
 800c310:	b507      	push	{r0, r1, r2, lr}
 800c312:	4a1e      	ldr	r2, [pc, #120]	; (800c38c <cosf+0x80>)
 800c314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c318:	4293      	cmp	r3, r2
 800c31a:	dc06      	bgt.n	800c32a <cosf+0x1e>
 800c31c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800c390 <cosf+0x84>
 800c320:	b003      	add	sp, #12
 800c322:	f85d eb04 	ldr.w	lr, [sp], #4
 800c326:	f001 ba9b 	b.w	800d860 <__kernel_cosf>
 800c32a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c32e:	db04      	blt.n	800c33a <cosf+0x2e>
 800c330:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c334:	b003      	add	sp, #12
 800c336:	f85d fb04 	ldr.w	pc, [sp], #4
 800c33a:	4668      	mov	r0, sp
 800c33c:	f001 f954 	bl	800d5e8 <__ieee754_rem_pio2f>
 800c340:	f000 0003 	and.w	r0, r0, #3
 800c344:	2801      	cmp	r0, #1
 800c346:	d009      	beq.n	800c35c <cosf+0x50>
 800c348:	2802      	cmp	r0, #2
 800c34a:	d010      	beq.n	800c36e <cosf+0x62>
 800c34c:	b9b0      	cbnz	r0, 800c37c <cosf+0x70>
 800c34e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c352:	ed9d 0a00 	vldr	s0, [sp]
 800c356:	f001 fa83 	bl	800d860 <__kernel_cosf>
 800c35a:	e7eb      	b.n	800c334 <cosf+0x28>
 800c35c:	eddd 0a01 	vldr	s1, [sp, #4]
 800c360:	ed9d 0a00 	vldr	s0, [sp]
 800c364:	f001 fd52 	bl	800de0c <__kernel_sinf>
 800c368:	eeb1 0a40 	vneg.f32	s0, s0
 800c36c:	e7e2      	b.n	800c334 <cosf+0x28>
 800c36e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c372:	ed9d 0a00 	vldr	s0, [sp]
 800c376:	f001 fa73 	bl	800d860 <__kernel_cosf>
 800c37a:	e7f5      	b.n	800c368 <cosf+0x5c>
 800c37c:	eddd 0a01 	vldr	s1, [sp, #4]
 800c380:	ed9d 0a00 	vldr	s0, [sp]
 800c384:	2001      	movs	r0, #1
 800c386:	f001 fd41 	bl	800de0c <__kernel_sinf>
 800c38a:	e7d3      	b.n	800c334 <cosf+0x28>
 800c38c:	3f490fd8 	.word	0x3f490fd8
 800c390:	00000000 	.word	0x00000000

0800c394 <sinf>:
 800c394:	ee10 3a10 	vmov	r3, s0
 800c398:	b507      	push	{r0, r1, r2, lr}
 800c39a:	4a1f      	ldr	r2, [pc, #124]	; (800c418 <sinf+0x84>)
 800c39c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	dc07      	bgt.n	800c3b4 <sinf+0x20>
 800c3a4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800c41c <sinf+0x88>
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	b003      	add	sp, #12
 800c3ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3b0:	f001 bd2c 	b.w	800de0c <__kernel_sinf>
 800c3b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c3b8:	db04      	blt.n	800c3c4 <sinf+0x30>
 800c3ba:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c3be:	b003      	add	sp, #12
 800c3c0:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3c4:	4668      	mov	r0, sp
 800c3c6:	f001 f90f 	bl	800d5e8 <__ieee754_rem_pio2f>
 800c3ca:	f000 0003 	and.w	r0, r0, #3
 800c3ce:	2801      	cmp	r0, #1
 800c3d0:	d00a      	beq.n	800c3e8 <sinf+0x54>
 800c3d2:	2802      	cmp	r0, #2
 800c3d4:	d00f      	beq.n	800c3f6 <sinf+0x62>
 800c3d6:	b9c0      	cbnz	r0, 800c40a <sinf+0x76>
 800c3d8:	eddd 0a01 	vldr	s1, [sp, #4]
 800c3dc:	ed9d 0a00 	vldr	s0, [sp]
 800c3e0:	2001      	movs	r0, #1
 800c3e2:	f001 fd13 	bl	800de0c <__kernel_sinf>
 800c3e6:	e7ea      	b.n	800c3be <sinf+0x2a>
 800c3e8:	eddd 0a01 	vldr	s1, [sp, #4]
 800c3ec:	ed9d 0a00 	vldr	s0, [sp]
 800c3f0:	f001 fa36 	bl	800d860 <__kernel_cosf>
 800c3f4:	e7e3      	b.n	800c3be <sinf+0x2a>
 800c3f6:	eddd 0a01 	vldr	s1, [sp, #4]
 800c3fa:	ed9d 0a00 	vldr	s0, [sp]
 800c3fe:	2001      	movs	r0, #1
 800c400:	f001 fd04 	bl	800de0c <__kernel_sinf>
 800c404:	eeb1 0a40 	vneg.f32	s0, s0
 800c408:	e7d9      	b.n	800c3be <sinf+0x2a>
 800c40a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c40e:	ed9d 0a00 	vldr	s0, [sp]
 800c412:	f001 fa25 	bl	800d860 <__kernel_cosf>
 800c416:	e7f5      	b.n	800c404 <sinf+0x70>
 800c418:	3f490fd8 	.word	0x3f490fd8
 800c41c:	00000000 	.word	0x00000000

0800c420 <acos>:
 800c420:	b538      	push	{r3, r4, r5, lr}
 800c422:	ed2d 8b02 	vpush	{d8}
 800c426:	ec55 4b10 	vmov	r4, r5, d0
 800c42a:	f000 f89d 	bl	800c568 <__ieee754_acos>
 800c42e:	4622      	mov	r2, r4
 800c430:	462b      	mov	r3, r5
 800c432:	4620      	mov	r0, r4
 800c434:	4629      	mov	r1, r5
 800c436:	eeb0 8a40 	vmov.f32	s16, s0
 800c43a:	eef0 8a60 	vmov.f32	s17, s1
 800c43e:	f7f4 fb21 	bl	8000a84 <__aeabi_dcmpun>
 800c442:	b9a8      	cbnz	r0, 800c470 <acos+0x50>
 800c444:	ec45 4b10 	vmov	d0, r4, r5
 800c448:	f001 fd58 	bl	800defc <fabs>
 800c44c:	4b0c      	ldr	r3, [pc, #48]	; (800c480 <acos+0x60>)
 800c44e:	ec51 0b10 	vmov	r0, r1, d0
 800c452:	2200      	movs	r2, #0
 800c454:	f7f4 fb0c 	bl	8000a70 <__aeabi_dcmpgt>
 800c458:	b150      	cbz	r0, 800c470 <acos+0x50>
 800c45a:	f7ff ff17 	bl	800c28c <__errno>
 800c45e:	ecbd 8b02 	vpop	{d8}
 800c462:	2321      	movs	r3, #33	; 0x21
 800c464:	6003      	str	r3, [r0, #0]
 800c466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c46a:	4806      	ldr	r0, [pc, #24]	; (800c484 <acos+0x64>)
 800c46c:	f001 bd5c 	b.w	800df28 <nan>
 800c470:	eeb0 0a48 	vmov.f32	s0, s16
 800c474:	eef0 0a68 	vmov.f32	s1, s17
 800c478:	ecbd 8b02 	vpop	{d8}
 800c47c:	bd38      	pop	{r3, r4, r5, pc}
 800c47e:	bf00      	nop
 800c480:	3ff00000 	.word	0x3ff00000
 800c484:	0800e210 	.word	0x0800e210

0800c488 <pow>:
 800c488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c48a:	ed2d 8b02 	vpush	{d8}
 800c48e:	eeb0 8a40 	vmov.f32	s16, s0
 800c492:	eef0 8a60 	vmov.f32	s17, s1
 800c496:	ec55 4b11 	vmov	r4, r5, d1
 800c49a:	f000 fac5 	bl	800ca28 <__ieee754_pow>
 800c49e:	4622      	mov	r2, r4
 800c4a0:	462b      	mov	r3, r5
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	4629      	mov	r1, r5
 800c4a6:	ec57 6b10 	vmov	r6, r7, d0
 800c4aa:	f7f4 faeb 	bl	8000a84 <__aeabi_dcmpun>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	d13b      	bne.n	800c52a <pow+0xa2>
 800c4b2:	ec51 0b18 	vmov	r0, r1, d8
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f7f4 fab1 	bl	8000a20 <__aeabi_dcmpeq>
 800c4be:	b1b8      	cbz	r0, 800c4f0 <pow+0x68>
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	f7f4 faaa 	bl	8000a20 <__aeabi_dcmpeq>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d146      	bne.n	800c55e <pow+0xd6>
 800c4d0:	ec45 4b10 	vmov	d0, r4, r5
 800c4d4:	f001 fd1b 	bl	800df0e <finite>
 800c4d8:	b338      	cbz	r0, 800c52a <pow+0xa2>
 800c4da:	2200      	movs	r2, #0
 800c4dc:	2300      	movs	r3, #0
 800c4de:	4620      	mov	r0, r4
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	f7f4 faa7 	bl	8000a34 <__aeabi_dcmplt>
 800c4e6:	b300      	cbz	r0, 800c52a <pow+0xa2>
 800c4e8:	f7ff fed0 	bl	800c28c <__errno>
 800c4ec:	2322      	movs	r3, #34	; 0x22
 800c4ee:	e01b      	b.n	800c528 <pow+0xa0>
 800c4f0:	ec47 6b10 	vmov	d0, r6, r7
 800c4f4:	f001 fd0b 	bl	800df0e <finite>
 800c4f8:	b9e0      	cbnz	r0, 800c534 <pow+0xac>
 800c4fa:	eeb0 0a48 	vmov.f32	s0, s16
 800c4fe:	eef0 0a68 	vmov.f32	s1, s17
 800c502:	f001 fd04 	bl	800df0e <finite>
 800c506:	b1a8      	cbz	r0, 800c534 <pow+0xac>
 800c508:	ec45 4b10 	vmov	d0, r4, r5
 800c50c:	f001 fcff 	bl	800df0e <finite>
 800c510:	b180      	cbz	r0, 800c534 <pow+0xac>
 800c512:	4632      	mov	r2, r6
 800c514:	463b      	mov	r3, r7
 800c516:	4630      	mov	r0, r6
 800c518:	4639      	mov	r1, r7
 800c51a:	f7f4 fab3 	bl	8000a84 <__aeabi_dcmpun>
 800c51e:	2800      	cmp	r0, #0
 800c520:	d0e2      	beq.n	800c4e8 <pow+0x60>
 800c522:	f7ff feb3 	bl	800c28c <__errno>
 800c526:	2321      	movs	r3, #33	; 0x21
 800c528:	6003      	str	r3, [r0, #0]
 800c52a:	ecbd 8b02 	vpop	{d8}
 800c52e:	ec47 6b10 	vmov	d0, r6, r7
 800c532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c534:	2200      	movs	r2, #0
 800c536:	2300      	movs	r3, #0
 800c538:	4630      	mov	r0, r6
 800c53a:	4639      	mov	r1, r7
 800c53c:	f7f4 fa70 	bl	8000a20 <__aeabi_dcmpeq>
 800c540:	2800      	cmp	r0, #0
 800c542:	d0f2      	beq.n	800c52a <pow+0xa2>
 800c544:	eeb0 0a48 	vmov.f32	s0, s16
 800c548:	eef0 0a68 	vmov.f32	s1, s17
 800c54c:	f001 fcdf 	bl	800df0e <finite>
 800c550:	2800      	cmp	r0, #0
 800c552:	d0ea      	beq.n	800c52a <pow+0xa2>
 800c554:	ec45 4b10 	vmov	d0, r4, r5
 800c558:	f001 fcd9 	bl	800df0e <finite>
 800c55c:	e7c3      	b.n	800c4e6 <pow+0x5e>
 800c55e:	4f01      	ldr	r7, [pc, #4]	; (800c564 <pow+0xdc>)
 800c560:	2600      	movs	r6, #0
 800c562:	e7e2      	b.n	800c52a <pow+0xa2>
 800c564:	3ff00000 	.word	0x3ff00000

0800c568 <__ieee754_acos>:
 800c568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56c:	ec55 4b10 	vmov	r4, r5, d0
 800c570:	49b7      	ldr	r1, [pc, #732]	; (800c850 <__ieee754_acos+0x2e8>)
 800c572:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c576:	428b      	cmp	r3, r1
 800c578:	dd1b      	ble.n	800c5b2 <__ieee754_acos+0x4a>
 800c57a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800c57e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c582:	4323      	orrs	r3, r4
 800c584:	d106      	bne.n	800c594 <__ieee754_acos+0x2c>
 800c586:	2d00      	cmp	r5, #0
 800c588:	f300 8211 	bgt.w	800c9ae <__ieee754_acos+0x446>
 800c58c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800c7e8 <__ieee754_acos+0x280>
 800c590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c594:	ee10 2a10 	vmov	r2, s0
 800c598:	462b      	mov	r3, r5
 800c59a:	ee10 0a10 	vmov	r0, s0
 800c59e:	4629      	mov	r1, r5
 800c5a0:	f7f3 fe1e 	bl	80001e0 <__aeabi_dsub>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	f7f4 f8fc 	bl	80007a4 <__aeabi_ddiv>
 800c5ac:	ec41 0b10 	vmov	d0, r0, r1
 800c5b0:	e7ee      	b.n	800c590 <__ieee754_acos+0x28>
 800c5b2:	49a8      	ldr	r1, [pc, #672]	; (800c854 <__ieee754_acos+0x2ec>)
 800c5b4:	428b      	cmp	r3, r1
 800c5b6:	f300 8087 	bgt.w	800c6c8 <__ieee754_acos+0x160>
 800c5ba:	4aa7      	ldr	r2, [pc, #668]	; (800c858 <__ieee754_acos+0x2f0>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	f340 81f9 	ble.w	800c9b4 <__ieee754_acos+0x44c>
 800c5c2:	ee10 2a10 	vmov	r2, s0
 800c5c6:	ee10 0a10 	vmov	r0, s0
 800c5ca:	462b      	mov	r3, r5
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	f7f3 ffbf 	bl	8000550 <__aeabi_dmul>
 800c5d2:	a387      	add	r3, pc, #540	; (adr r3, 800c7f0 <__ieee754_acos+0x288>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	4606      	mov	r6, r0
 800c5da:	460f      	mov	r7, r1
 800c5dc:	f7f3 ffb8 	bl	8000550 <__aeabi_dmul>
 800c5e0:	a385      	add	r3, pc, #532	; (adr r3, 800c7f8 <__ieee754_acos+0x290>)
 800c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e6:	f7f3 fdfd 	bl	80001e4 <__adddf3>
 800c5ea:	4632      	mov	r2, r6
 800c5ec:	463b      	mov	r3, r7
 800c5ee:	f7f3 ffaf 	bl	8000550 <__aeabi_dmul>
 800c5f2:	a383      	add	r3, pc, #524	; (adr r3, 800c800 <__ieee754_acos+0x298>)
 800c5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f8:	f7f3 fdf2 	bl	80001e0 <__aeabi_dsub>
 800c5fc:	4632      	mov	r2, r6
 800c5fe:	463b      	mov	r3, r7
 800c600:	f7f3 ffa6 	bl	8000550 <__aeabi_dmul>
 800c604:	a380      	add	r3, pc, #512	; (adr r3, 800c808 <__ieee754_acos+0x2a0>)
 800c606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60a:	f7f3 fdeb 	bl	80001e4 <__adddf3>
 800c60e:	4632      	mov	r2, r6
 800c610:	463b      	mov	r3, r7
 800c612:	f7f3 ff9d 	bl	8000550 <__aeabi_dmul>
 800c616:	a37e      	add	r3, pc, #504	; (adr r3, 800c810 <__ieee754_acos+0x2a8>)
 800c618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61c:	f7f3 fde0 	bl	80001e0 <__aeabi_dsub>
 800c620:	4632      	mov	r2, r6
 800c622:	463b      	mov	r3, r7
 800c624:	f7f3 ff94 	bl	8000550 <__aeabi_dmul>
 800c628:	a37b      	add	r3, pc, #492	; (adr r3, 800c818 <__ieee754_acos+0x2b0>)
 800c62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62e:	f7f3 fdd9 	bl	80001e4 <__adddf3>
 800c632:	4632      	mov	r2, r6
 800c634:	463b      	mov	r3, r7
 800c636:	f7f3 ff8b 	bl	8000550 <__aeabi_dmul>
 800c63a:	a379      	add	r3, pc, #484	; (adr r3, 800c820 <__ieee754_acos+0x2b8>)
 800c63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c640:	4680      	mov	r8, r0
 800c642:	4689      	mov	r9, r1
 800c644:	4630      	mov	r0, r6
 800c646:	4639      	mov	r1, r7
 800c648:	f7f3 ff82 	bl	8000550 <__aeabi_dmul>
 800c64c:	a376      	add	r3, pc, #472	; (adr r3, 800c828 <__ieee754_acos+0x2c0>)
 800c64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c652:	f7f3 fdc5 	bl	80001e0 <__aeabi_dsub>
 800c656:	4632      	mov	r2, r6
 800c658:	463b      	mov	r3, r7
 800c65a:	f7f3 ff79 	bl	8000550 <__aeabi_dmul>
 800c65e:	a374      	add	r3, pc, #464	; (adr r3, 800c830 <__ieee754_acos+0x2c8>)
 800c660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c664:	f7f3 fdbe 	bl	80001e4 <__adddf3>
 800c668:	4632      	mov	r2, r6
 800c66a:	463b      	mov	r3, r7
 800c66c:	f7f3 ff70 	bl	8000550 <__aeabi_dmul>
 800c670:	a371      	add	r3, pc, #452	; (adr r3, 800c838 <__ieee754_acos+0x2d0>)
 800c672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c676:	f7f3 fdb3 	bl	80001e0 <__aeabi_dsub>
 800c67a:	4632      	mov	r2, r6
 800c67c:	463b      	mov	r3, r7
 800c67e:	f7f3 ff67 	bl	8000550 <__aeabi_dmul>
 800c682:	4b76      	ldr	r3, [pc, #472]	; (800c85c <__ieee754_acos+0x2f4>)
 800c684:	2200      	movs	r2, #0
 800c686:	f7f3 fdad 	bl	80001e4 <__adddf3>
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	4640      	mov	r0, r8
 800c690:	4649      	mov	r1, r9
 800c692:	f7f4 f887 	bl	80007a4 <__aeabi_ddiv>
 800c696:	4622      	mov	r2, r4
 800c698:	462b      	mov	r3, r5
 800c69a:	f7f3 ff59 	bl	8000550 <__aeabi_dmul>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	a167      	add	r1, pc, #412	; (adr r1, 800c840 <__ieee754_acos+0x2d8>)
 800c6a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6a8:	f7f3 fd9a 	bl	80001e0 <__aeabi_dsub>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	4629      	mov	r1, r5
 800c6b4:	f7f3 fd94 	bl	80001e0 <__aeabi_dsub>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	a162      	add	r1, pc, #392	; (adr r1, 800c848 <__ieee754_acos+0x2e0>)
 800c6be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6c2:	f7f3 fd8d 	bl	80001e0 <__aeabi_dsub>
 800c6c6:	e771      	b.n	800c5ac <__ieee754_acos+0x44>
 800c6c8:	2d00      	cmp	r5, #0
 800c6ca:	f280 80cb 	bge.w	800c864 <__ieee754_acos+0x2fc>
 800c6ce:	ee10 0a10 	vmov	r0, s0
 800c6d2:	4b62      	ldr	r3, [pc, #392]	; (800c85c <__ieee754_acos+0x2f4>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	4629      	mov	r1, r5
 800c6d8:	f7f3 fd84 	bl	80001e4 <__adddf3>
 800c6dc:	4b60      	ldr	r3, [pc, #384]	; (800c860 <__ieee754_acos+0x2f8>)
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f7f3 ff36 	bl	8000550 <__aeabi_dmul>
 800c6e4:	a342      	add	r3, pc, #264	; (adr r3, 800c7f0 <__ieee754_acos+0x288>)
 800c6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	460d      	mov	r5, r1
 800c6ee:	f7f3 ff2f 	bl	8000550 <__aeabi_dmul>
 800c6f2:	a341      	add	r3, pc, #260	; (adr r3, 800c7f8 <__ieee754_acos+0x290>)
 800c6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f8:	f7f3 fd74 	bl	80001e4 <__adddf3>
 800c6fc:	4622      	mov	r2, r4
 800c6fe:	462b      	mov	r3, r5
 800c700:	f7f3 ff26 	bl	8000550 <__aeabi_dmul>
 800c704:	a33e      	add	r3, pc, #248	; (adr r3, 800c800 <__ieee754_acos+0x298>)
 800c706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70a:	f7f3 fd69 	bl	80001e0 <__aeabi_dsub>
 800c70e:	4622      	mov	r2, r4
 800c710:	462b      	mov	r3, r5
 800c712:	f7f3 ff1d 	bl	8000550 <__aeabi_dmul>
 800c716:	a33c      	add	r3, pc, #240	; (adr r3, 800c808 <__ieee754_acos+0x2a0>)
 800c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71c:	f7f3 fd62 	bl	80001e4 <__adddf3>
 800c720:	4622      	mov	r2, r4
 800c722:	462b      	mov	r3, r5
 800c724:	f7f3 ff14 	bl	8000550 <__aeabi_dmul>
 800c728:	a339      	add	r3, pc, #228	; (adr r3, 800c810 <__ieee754_acos+0x2a8>)
 800c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72e:	f7f3 fd57 	bl	80001e0 <__aeabi_dsub>
 800c732:	4622      	mov	r2, r4
 800c734:	462b      	mov	r3, r5
 800c736:	f7f3 ff0b 	bl	8000550 <__aeabi_dmul>
 800c73a:	a337      	add	r3, pc, #220	; (adr r3, 800c818 <__ieee754_acos+0x2b0>)
 800c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c740:	f7f3 fd50 	bl	80001e4 <__adddf3>
 800c744:	4622      	mov	r2, r4
 800c746:	462b      	mov	r3, r5
 800c748:	f7f3 ff02 	bl	8000550 <__aeabi_dmul>
 800c74c:	ec45 4b10 	vmov	d0, r4, r5
 800c750:	4680      	mov	r8, r0
 800c752:	4689      	mov	r9, r1
 800c754:	f000 fe96 	bl	800d484 <__ieee754_sqrt>
 800c758:	a331      	add	r3, pc, #196	; (adr r3, 800c820 <__ieee754_acos+0x2b8>)
 800c75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75e:	4620      	mov	r0, r4
 800c760:	4629      	mov	r1, r5
 800c762:	ec57 6b10 	vmov	r6, r7, d0
 800c766:	f7f3 fef3 	bl	8000550 <__aeabi_dmul>
 800c76a:	a32f      	add	r3, pc, #188	; (adr r3, 800c828 <__ieee754_acos+0x2c0>)
 800c76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c770:	f7f3 fd36 	bl	80001e0 <__aeabi_dsub>
 800c774:	4622      	mov	r2, r4
 800c776:	462b      	mov	r3, r5
 800c778:	f7f3 feea 	bl	8000550 <__aeabi_dmul>
 800c77c:	a32c      	add	r3, pc, #176	; (adr r3, 800c830 <__ieee754_acos+0x2c8>)
 800c77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c782:	f7f3 fd2f 	bl	80001e4 <__adddf3>
 800c786:	4622      	mov	r2, r4
 800c788:	462b      	mov	r3, r5
 800c78a:	f7f3 fee1 	bl	8000550 <__aeabi_dmul>
 800c78e:	a32a      	add	r3, pc, #168	; (adr r3, 800c838 <__ieee754_acos+0x2d0>)
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	f7f3 fd24 	bl	80001e0 <__aeabi_dsub>
 800c798:	4622      	mov	r2, r4
 800c79a:	462b      	mov	r3, r5
 800c79c:	f7f3 fed8 	bl	8000550 <__aeabi_dmul>
 800c7a0:	4b2e      	ldr	r3, [pc, #184]	; (800c85c <__ieee754_acos+0x2f4>)
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f7f3 fd1e 	bl	80001e4 <__adddf3>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	4640      	mov	r0, r8
 800c7ae:	4649      	mov	r1, r9
 800c7b0:	f7f3 fff8 	bl	80007a4 <__aeabi_ddiv>
 800c7b4:	4632      	mov	r2, r6
 800c7b6:	463b      	mov	r3, r7
 800c7b8:	f7f3 feca 	bl	8000550 <__aeabi_dmul>
 800c7bc:	a320      	add	r3, pc, #128	; (adr r3, 800c840 <__ieee754_acos+0x2d8>)
 800c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c2:	f7f3 fd0d 	bl	80001e0 <__aeabi_dsub>
 800c7c6:	4632      	mov	r2, r6
 800c7c8:	463b      	mov	r3, r7
 800c7ca:	f7f3 fd0b 	bl	80001e4 <__adddf3>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	f7f3 fd07 	bl	80001e4 <__adddf3>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	460b      	mov	r3, r1
 800c7da:	a103      	add	r1, pc, #12	; (adr r1, 800c7e8 <__ieee754_acos+0x280>)
 800c7dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7e0:	e76f      	b.n	800c6c2 <__ieee754_acos+0x15a>
 800c7e2:	bf00      	nop
 800c7e4:	f3af 8000 	nop.w
 800c7e8:	54442d18 	.word	0x54442d18
 800c7ec:	400921fb 	.word	0x400921fb
 800c7f0:	0dfdf709 	.word	0x0dfdf709
 800c7f4:	3f023de1 	.word	0x3f023de1
 800c7f8:	7501b288 	.word	0x7501b288
 800c7fc:	3f49efe0 	.word	0x3f49efe0
 800c800:	b5688f3b 	.word	0xb5688f3b
 800c804:	3fa48228 	.word	0x3fa48228
 800c808:	0e884455 	.word	0x0e884455
 800c80c:	3fc9c155 	.word	0x3fc9c155
 800c810:	03eb6f7d 	.word	0x03eb6f7d
 800c814:	3fd4d612 	.word	0x3fd4d612
 800c818:	55555555 	.word	0x55555555
 800c81c:	3fc55555 	.word	0x3fc55555
 800c820:	b12e9282 	.word	0xb12e9282
 800c824:	3fb3b8c5 	.word	0x3fb3b8c5
 800c828:	1b8d0159 	.word	0x1b8d0159
 800c82c:	3fe6066c 	.word	0x3fe6066c
 800c830:	9c598ac8 	.word	0x9c598ac8
 800c834:	40002ae5 	.word	0x40002ae5
 800c838:	1c8a2d4b 	.word	0x1c8a2d4b
 800c83c:	40033a27 	.word	0x40033a27
 800c840:	33145c07 	.word	0x33145c07
 800c844:	3c91a626 	.word	0x3c91a626
 800c848:	54442d18 	.word	0x54442d18
 800c84c:	3ff921fb 	.word	0x3ff921fb
 800c850:	3fefffff 	.word	0x3fefffff
 800c854:	3fdfffff 	.word	0x3fdfffff
 800c858:	3c600000 	.word	0x3c600000
 800c85c:	3ff00000 	.word	0x3ff00000
 800c860:	3fe00000 	.word	0x3fe00000
 800c864:	ee10 2a10 	vmov	r2, s0
 800c868:	462b      	mov	r3, r5
 800c86a:	496d      	ldr	r1, [pc, #436]	; (800ca20 <__ieee754_acos+0x4b8>)
 800c86c:	2000      	movs	r0, #0
 800c86e:	f7f3 fcb7 	bl	80001e0 <__aeabi_dsub>
 800c872:	4b6c      	ldr	r3, [pc, #432]	; (800ca24 <__ieee754_acos+0x4bc>)
 800c874:	2200      	movs	r2, #0
 800c876:	f7f3 fe6b 	bl	8000550 <__aeabi_dmul>
 800c87a:	4604      	mov	r4, r0
 800c87c:	460d      	mov	r5, r1
 800c87e:	ec45 4b10 	vmov	d0, r4, r5
 800c882:	f000 fdff 	bl	800d484 <__ieee754_sqrt>
 800c886:	a34e      	add	r3, pc, #312	; (adr r3, 800c9c0 <__ieee754_acos+0x458>)
 800c888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88c:	4620      	mov	r0, r4
 800c88e:	4629      	mov	r1, r5
 800c890:	ec59 8b10 	vmov	r8, r9, d0
 800c894:	f7f3 fe5c 	bl	8000550 <__aeabi_dmul>
 800c898:	a34b      	add	r3, pc, #300	; (adr r3, 800c9c8 <__ieee754_acos+0x460>)
 800c89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89e:	f7f3 fca1 	bl	80001e4 <__adddf3>
 800c8a2:	4622      	mov	r2, r4
 800c8a4:	462b      	mov	r3, r5
 800c8a6:	f7f3 fe53 	bl	8000550 <__aeabi_dmul>
 800c8aa:	a349      	add	r3, pc, #292	; (adr r3, 800c9d0 <__ieee754_acos+0x468>)
 800c8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b0:	f7f3 fc96 	bl	80001e0 <__aeabi_dsub>
 800c8b4:	4622      	mov	r2, r4
 800c8b6:	462b      	mov	r3, r5
 800c8b8:	f7f3 fe4a 	bl	8000550 <__aeabi_dmul>
 800c8bc:	a346      	add	r3, pc, #280	; (adr r3, 800c9d8 <__ieee754_acos+0x470>)
 800c8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c2:	f7f3 fc8f 	bl	80001e4 <__adddf3>
 800c8c6:	4622      	mov	r2, r4
 800c8c8:	462b      	mov	r3, r5
 800c8ca:	f7f3 fe41 	bl	8000550 <__aeabi_dmul>
 800c8ce:	a344      	add	r3, pc, #272	; (adr r3, 800c9e0 <__ieee754_acos+0x478>)
 800c8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d4:	f7f3 fc84 	bl	80001e0 <__aeabi_dsub>
 800c8d8:	4622      	mov	r2, r4
 800c8da:	462b      	mov	r3, r5
 800c8dc:	f7f3 fe38 	bl	8000550 <__aeabi_dmul>
 800c8e0:	a341      	add	r3, pc, #260	; (adr r3, 800c9e8 <__ieee754_acos+0x480>)
 800c8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e6:	f7f3 fc7d 	bl	80001e4 <__adddf3>
 800c8ea:	4622      	mov	r2, r4
 800c8ec:	462b      	mov	r3, r5
 800c8ee:	f7f3 fe2f 	bl	8000550 <__aeabi_dmul>
 800c8f2:	a33f      	add	r3, pc, #252	; (adr r3, 800c9f0 <__ieee754_acos+0x488>)
 800c8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f8:	4682      	mov	sl, r0
 800c8fa:	468b      	mov	fp, r1
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	4629      	mov	r1, r5
 800c900:	f7f3 fe26 	bl	8000550 <__aeabi_dmul>
 800c904:	a33c      	add	r3, pc, #240	; (adr r3, 800c9f8 <__ieee754_acos+0x490>)
 800c906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90a:	f7f3 fc69 	bl	80001e0 <__aeabi_dsub>
 800c90e:	4622      	mov	r2, r4
 800c910:	462b      	mov	r3, r5
 800c912:	f7f3 fe1d 	bl	8000550 <__aeabi_dmul>
 800c916:	a33a      	add	r3, pc, #232	; (adr r3, 800ca00 <__ieee754_acos+0x498>)
 800c918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91c:	f7f3 fc62 	bl	80001e4 <__adddf3>
 800c920:	4622      	mov	r2, r4
 800c922:	462b      	mov	r3, r5
 800c924:	f7f3 fe14 	bl	8000550 <__aeabi_dmul>
 800c928:	a337      	add	r3, pc, #220	; (adr r3, 800ca08 <__ieee754_acos+0x4a0>)
 800c92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92e:	f7f3 fc57 	bl	80001e0 <__aeabi_dsub>
 800c932:	4622      	mov	r2, r4
 800c934:	462b      	mov	r3, r5
 800c936:	f7f3 fe0b 	bl	8000550 <__aeabi_dmul>
 800c93a:	4b39      	ldr	r3, [pc, #228]	; (800ca20 <__ieee754_acos+0x4b8>)
 800c93c:	2200      	movs	r2, #0
 800c93e:	f7f3 fc51 	bl	80001e4 <__adddf3>
 800c942:	4602      	mov	r2, r0
 800c944:	460b      	mov	r3, r1
 800c946:	4650      	mov	r0, sl
 800c948:	4659      	mov	r1, fp
 800c94a:	f7f3 ff2b 	bl	80007a4 <__aeabi_ddiv>
 800c94e:	4642      	mov	r2, r8
 800c950:	464b      	mov	r3, r9
 800c952:	f7f3 fdfd 	bl	8000550 <__aeabi_dmul>
 800c956:	2600      	movs	r6, #0
 800c958:	4682      	mov	sl, r0
 800c95a:	468b      	mov	fp, r1
 800c95c:	4632      	mov	r2, r6
 800c95e:	464b      	mov	r3, r9
 800c960:	4630      	mov	r0, r6
 800c962:	4649      	mov	r1, r9
 800c964:	f7f3 fdf4 	bl	8000550 <__aeabi_dmul>
 800c968:	4602      	mov	r2, r0
 800c96a:	460b      	mov	r3, r1
 800c96c:	4620      	mov	r0, r4
 800c96e:	4629      	mov	r1, r5
 800c970:	f7f3 fc36 	bl	80001e0 <__aeabi_dsub>
 800c974:	4632      	mov	r2, r6
 800c976:	4604      	mov	r4, r0
 800c978:	460d      	mov	r5, r1
 800c97a:	464b      	mov	r3, r9
 800c97c:	4640      	mov	r0, r8
 800c97e:	4649      	mov	r1, r9
 800c980:	f7f3 fc30 	bl	80001e4 <__adddf3>
 800c984:	4602      	mov	r2, r0
 800c986:	460b      	mov	r3, r1
 800c988:	4620      	mov	r0, r4
 800c98a:	4629      	mov	r1, r5
 800c98c:	f7f3 ff0a 	bl	80007a4 <__aeabi_ddiv>
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	4650      	mov	r0, sl
 800c996:	4659      	mov	r1, fp
 800c998:	f7f3 fc24 	bl	80001e4 <__adddf3>
 800c99c:	4632      	mov	r2, r6
 800c99e:	464b      	mov	r3, r9
 800c9a0:	f7f3 fc20 	bl	80001e4 <__adddf3>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	f7f3 fc1c 	bl	80001e4 <__adddf3>
 800c9ac:	e5fe      	b.n	800c5ac <__ieee754_acos+0x44>
 800c9ae:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ca10 <__ieee754_acos+0x4a8>
 800c9b2:	e5ed      	b.n	800c590 <__ieee754_acos+0x28>
 800c9b4:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ca18 <__ieee754_acos+0x4b0>
 800c9b8:	e5ea      	b.n	800c590 <__ieee754_acos+0x28>
 800c9ba:	bf00      	nop
 800c9bc:	f3af 8000 	nop.w
 800c9c0:	0dfdf709 	.word	0x0dfdf709
 800c9c4:	3f023de1 	.word	0x3f023de1
 800c9c8:	7501b288 	.word	0x7501b288
 800c9cc:	3f49efe0 	.word	0x3f49efe0
 800c9d0:	b5688f3b 	.word	0xb5688f3b
 800c9d4:	3fa48228 	.word	0x3fa48228
 800c9d8:	0e884455 	.word	0x0e884455
 800c9dc:	3fc9c155 	.word	0x3fc9c155
 800c9e0:	03eb6f7d 	.word	0x03eb6f7d
 800c9e4:	3fd4d612 	.word	0x3fd4d612
 800c9e8:	55555555 	.word	0x55555555
 800c9ec:	3fc55555 	.word	0x3fc55555
 800c9f0:	b12e9282 	.word	0xb12e9282
 800c9f4:	3fb3b8c5 	.word	0x3fb3b8c5
 800c9f8:	1b8d0159 	.word	0x1b8d0159
 800c9fc:	3fe6066c 	.word	0x3fe6066c
 800ca00:	9c598ac8 	.word	0x9c598ac8
 800ca04:	40002ae5 	.word	0x40002ae5
 800ca08:	1c8a2d4b 	.word	0x1c8a2d4b
 800ca0c:	40033a27 	.word	0x40033a27
	...
 800ca18:	54442d18 	.word	0x54442d18
 800ca1c:	3ff921fb 	.word	0x3ff921fb
 800ca20:	3ff00000 	.word	0x3ff00000
 800ca24:	3fe00000 	.word	0x3fe00000

0800ca28 <__ieee754_pow>:
 800ca28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca2c:	ed2d 8b06 	vpush	{d8-d10}
 800ca30:	b089      	sub	sp, #36	; 0x24
 800ca32:	ed8d 1b00 	vstr	d1, [sp]
 800ca36:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ca3a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ca3e:	ea58 0102 	orrs.w	r1, r8, r2
 800ca42:	ec57 6b10 	vmov	r6, r7, d0
 800ca46:	d115      	bne.n	800ca74 <__ieee754_pow+0x4c>
 800ca48:	19b3      	adds	r3, r6, r6
 800ca4a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ca4e:	4152      	adcs	r2, r2
 800ca50:	4299      	cmp	r1, r3
 800ca52:	4b89      	ldr	r3, [pc, #548]	; (800cc78 <__ieee754_pow+0x250>)
 800ca54:	4193      	sbcs	r3, r2
 800ca56:	f080 84d2 	bcs.w	800d3fe <__ieee754_pow+0x9d6>
 800ca5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca5e:	4630      	mov	r0, r6
 800ca60:	4639      	mov	r1, r7
 800ca62:	f7f3 fbbf 	bl	80001e4 <__adddf3>
 800ca66:	ec41 0b10 	vmov	d0, r0, r1
 800ca6a:	b009      	add	sp, #36	; 0x24
 800ca6c:	ecbd 8b06 	vpop	{d8-d10}
 800ca70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca74:	4b81      	ldr	r3, [pc, #516]	; (800cc7c <__ieee754_pow+0x254>)
 800ca76:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ca7a:	429c      	cmp	r4, r3
 800ca7c:	ee10 aa10 	vmov	sl, s0
 800ca80:	463d      	mov	r5, r7
 800ca82:	dc06      	bgt.n	800ca92 <__ieee754_pow+0x6a>
 800ca84:	d101      	bne.n	800ca8a <__ieee754_pow+0x62>
 800ca86:	2e00      	cmp	r6, #0
 800ca88:	d1e7      	bne.n	800ca5a <__ieee754_pow+0x32>
 800ca8a:	4598      	cmp	r8, r3
 800ca8c:	dc01      	bgt.n	800ca92 <__ieee754_pow+0x6a>
 800ca8e:	d10f      	bne.n	800cab0 <__ieee754_pow+0x88>
 800ca90:	b172      	cbz	r2, 800cab0 <__ieee754_pow+0x88>
 800ca92:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ca96:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ca9a:	ea55 050a 	orrs.w	r5, r5, sl
 800ca9e:	d1dc      	bne.n	800ca5a <__ieee754_pow+0x32>
 800caa0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800caa4:	18db      	adds	r3, r3, r3
 800caa6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800caaa:	4152      	adcs	r2, r2
 800caac:	429d      	cmp	r5, r3
 800caae:	e7d0      	b.n	800ca52 <__ieee754_pow+0x2a>
 800cab0:	2d00      	cmp	r5, #0
 800cab2:	da3b      	bge.n	800cb2c <__ieee754_pow+0x104>
 800cab4:	4b72      	ldr	r3, [pc, #456]	; (800cc80 <__ieee754_pow+0x258>)
 800cab6:	4598      	cmp	r8, r3
 800cab8:	dc51      	bgt.n	800cb5e <__ieee754_pow+0x136>
 800caba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cabe:	4598      	cmp	r8, r3
 800cac0:	f340 84ac 	ble.w	800d41c <__ieee754_pow+0x9f4>
 800cac4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cac8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cacc:	2b14      	cmp	r3, #20
 800cace:	dd0f      	ble.n	800caf0 <__ieee754_pow+0xc8>
 800cad0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cad4:	fa22 f103 	lsr.w	r1, r2, r3
 800cad8:	fa01 f303 	lsl.w	r3, r1, r3
 800cadc:	4293      	cmp	r3, r2
 800cade:	f040 849d 	bne.w	800d41c <__ieee754_pow+0x9f4>
 800cae2:	f001 0101 	and.w	r1, r1, #1
 800cae6:	f1c1 0302 	rsb	r3, r1, #2
 800caea:	9304      	str	r3, [sp, #16]
 800caec:	b182      	cbz	r2, 800cb10 <__ieee754_pow+0xe8>
 800caee:	e05f      	b.n	800cbb0 <__ieee754_pow+0x188>
 800caf0:	2a00      	cmp	r2, #0
 800caf2:	d15b      	bne.n	800cbac <__ieee754_pow+0x184>
 800caf4:	f1c3 0314 	rsb	r3, r3, #20
 800caf8:	fa48 f103 	asr.w	r1, r8, r3
 800cafc:	fa01 f303 	lsl.w	r3, r1, r3
 800cb00:	4543      	cmp	r3, r8
 800cb02:	f040 8488 	bne.w	800d416 <__ieee754_pow+0x9ee>
 800cb06:	f001 0101 	and.w	r1, r1, #1
 800cb0a:	f1c1 0302 	rsb	r3, r1, #2
 800cb0e:	9304      	str	r3, [sp, #16]
 800cb10:	4b5c      	ldr	r3, [pc, #368]	; (800cc84 <__ieee754_pow+0x25c>)
 800cb12:	4598      	cmp	r8, r3
 800cb14:	d132      	bne.n	800cb7c <__ieee754_pow+0x154>
 800cb16:	f1b9 0f00 	cmp.w	r9, #0
 800cb1a:	f280 8478 	bge.w	800d40e <__ieee754_pow+0x9e6>
 800cb1e:	4959      	ldr	r1, [pc, #356]	; (800cc84 <__ieee754_pow+0x25c>)
 800cb20:	4632      	mov	r2, r6
 800cb22:	463b      	mov	r3, r7
 800cb24:	2000      	movs	r0, #0
 800cb26:	f7f3 fe3d 	bl	80007a4 <__aeabi_ddiv>
 800cb2a:	e79c      	b.n	800ca66 <__ieee754_pow+0x3e>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	9304      	str	r3, [sp, #16]
 800cb30:	2a00      	cmp	r2, #0
 800cb32:	d13d      	bne.n	800cbb0 <__ieee754_pow+0x188>
 800cb34:	4b51      	ldr	r3, [pc, #324]	; (800cc7c <__ieee754_pow+0x254>)
 800cb36:	4598      	cmp	r8, r3
 800cb38:	d1ea      	bne.n	800cb10 <__ieee754_pow+0xe8>
 800cb3a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cb3e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cb42:	ea53 030a 	orrs.w	r3, r3, sl
 800cb46:	f000 845a 	beq.w	800d3fe <__ieee754_pow+0x9d6>
 800cb4a:	4b4f      	ldr	r3, [pc, #316]	; (800cc88 <__ieee754_pow+0x260>)
 800cb4c:	429c      	cmp	r4, r3
 800cb4e:	dd08      	ble.n	800cb62 <__ieee754_pow+0x13a>
 800cb50:	f1b9 0f00 	cmp.w	r9, #0
 800cb54:	f2c0 8457 	blt.w	800d406 <__ieee754_pow+0x9de>
 800cb58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb5c:	e783      	b.n	800ca66 <__ieee754_pow+0x3e>
 800cb5e:	2302      	movs	r3, #2
 800cb60:	e7e5      	b.n	800cb2e <__ieee754_pow+0x106>
 800cb62:	f1b9 0f00 	cmp.w	r9, #0
 800cb66:	f04f 0000 	mov.w	r0, #0
 800cb6a:	f04f 0100 	mov.w	r1, #0
 800cb6e:	f6bf af7a 	bge.w	800ca66 <__ieee754_pow+0x3e>
 800cb72:	e9dd 0300 	ldrd	r0, r3, [sp]
 800cb76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cb7a:	e774      	b.n	800ca66 <__ieee754_pow+0x3e>
 800cb7c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800cb80:	d106      	bne.n	800cb90 <__ieee754_pow+0x168>
 800cb82:	4632      	mov	r2, r6
 800cb84:	463b      	mov	r3, r7
 800cb86:	4630      	mov	r0, r6
 800cb88:	4639      	mov	r1, r7
 800cb8a:	f7f3 fce1 	bl	8000550 <__aeabi_dmul>
 800cb8e:	e76a      	b.n	800ca66 <__ieee754_pow+0x3e>
 800cb90:	4b3e      	ldr	r3, [pc, #248]	; (800cc8c <__ieee754_pow+0x264>)
 800cb92:	4599      	cmp	r9, r3
 800cb94:	d10c      	bne.n	800cbb0 <__ieee754_pow+0x188>
 800cb96:	2d00      	cmp	r5, #0
 800cb98:	db0a      	blt.n	800cbb0 <__ieee754_pow+0x188>
 800cb9a:	ec47 6b10 	vmov	d0, r6, r7
 800cb9e:	b009      	add	sp, #36	; 0x24
 800cba0:	ecbd 8b06 	vpop	{d8-d10}
 800cba4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba8:	f000 bc6c 	b.w	800d484 <__ieee754_sqrt>
 800cbac:	2300      	movs	r3, #0
 800cbae:	9304      	str	r3, [sp, #16]
 800cbb0:	ec47 6b10 	vmov	d0, r6, r7
 800cbb4:	f001 f9a2 	bl	800defc <fabs>
 800cbb8:	ec51 0b10 	vmov	r0, r1, d0
 800cbbc:	f1ba 0f00 	cmp.w	sl, #0
 800cbc0:	d129      	bne.n	800cc16 <__ieee754_pow+0x1ee>
 800cbc2:	b124      	cbz	r4, 800cbce <__ieee754_pow+0x1a6>
 800cbc4:	4b2f      	ldr	r3, [pc, #188]	; (800cc84 <__ieee754_pow+0x25c>)
 800cbc6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d123      	bne.n	800cc16 <__ieee754_pow+0x1ee>
 800cbce:	f1b9 0f00 	cmp.w	r9, #0
 800cbd2:	da05      	bge.n	800cbe0 <__ieee754_pow+0x1b8>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	2000      	movs	r0, #0
 800cbda:	492a      	ldr	r1, [pc, #168]	; (800cc84 <__ieee754_pow+0x25c>)
 800cbdc:	f7f3 fde2 	bl	80007a4 <__aeabi_ddiv>
 800cbe0:	2d00      	cmp	r5, #0
 800cbe2:	f6bf af40 	bge.w	800ca66 <__ieee754_pow+0x3e>
 800cbe6:	9b04      	ldr	r3, [sp, #16]
 800cbe8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cbec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cbf0:	4323      	orrs	r3, r4
 800cbf2:	d108      	bne.n	800cc06 <__ieee754_pow+0x1de>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	4610      	mov	r0, r2
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	f7f3 faf0 	bl	80001e0 <__aeabi_dsub>
 800cc00:	4602      	mov	r2, r0
 800cc02:	460b      	mov	r3, r1
 800cc04:	e78f      	b.n	800cb26 <__ieee754_pow+0xfe>
 800cc06:	9b04      	ldr	r3, [sp, #16]
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	f47f af2c 	bne.w	800ca66 <__ieee754_pow+0x3e>
 800cc0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc12:	4619      	mov	r1, r3
 800cc14:	e727      	b.n	800ca66 <__ieee754_pow+0x3e>
 800cc16:	0feb      	lsrs	r3, r5, #31
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	9306      	str	r3, [sp, #24]
 800cc1c:	9a06      	ldr	r2, [sp, #24]
 800cc1e:	9b04      	ldr	r3, [sp, #16]
 800cc20:	4313      	orrs	r3, r2
 800cc22:	d102      	bne.n	800cc2a <__ieee754_pow+0x202>
 800cc24:	4632      	mov	r2, r6
 800cc26:	463b      	mov	r3, r7
 800cc28:	e7e6      	b.n	800cbf8 <__ieee754_pow+0x1d0>
 800cc2a:	4b19      	ldr	r3, [pc, #100]	; (800cc90 <__ieee754_pow+0x268>)
 800cc2c:	4598      	cmp	r8, r3
 800cc2e:	f340 80fb 	ble.w	800ce28 <__ieee754_pow+0x400>
 800cc32:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cc36:	4598      	cmp	r8, r3
 800cc38:	4b13      	ldr	r3, [pc, #76]	; (800cc88 <__ieee754_pow+0x260>)
 800cc3a:	dd0c      	ble.n	800cc56 <__ieee754_pow+0x22e>
 800cc3c:	429c      	cmp	r4, r3
 800cc3e:	dc0f      	bgt.n	800cc60 <__ieee754_pow+0x238>
 800cc40:	f1b9 0f00 	cmp.w	r9, #0
 800cc44:	da0f      	bge.n	800cc66 <__ieee754_pow+0x23e>
 800cc46:	2000      	movs	r0, #0
 800cc48:	b009      	add	sp, #36	; 0x24
 800cc4a:	ecbd 8b06 	vpop	{d8-d10}
 800cc4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc52:	f001 b94a 	b.w	800deea <__math_oflow>
 800cc56:	429c      	cmp	r4, r3
 800cc58:	dbf2      	blt.n	800cc40 <__ieee754_pow+0x218>
 800cc5a:	4b0a      	ldr	r3, [pc, #40]	; (800cc84 <__ieee754_pow+0x25c>)
 800cc5c:	429c      	cmp	r4, r3
 800cc5e:	dd19      	ble.n	800cc94 <__ieee754_pow+0x26c>
 800cc60:	f1b9 0f00 	cmp.w	r9, #0
 800cc64:	dcef      	bgt.n	800cc46 <__ieee754_pow+0x21e>
 800cc66:	2000      	movs	r0, #0
 800cc68:	b009      	add	sp, #36	; 0x24
 800cc6a:	ecbd 8b06 	vpop	{d8-d10}
 800cc6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc72:	f001 b931 	b.w	800ded8 <__math_uflow>
 800cc76:	bf00      	nop
 800cc78:	fff00000 	.word	0xfff00000
 800cc7c:	7ff00000 	.word	0x7ff00000
 800cc80:	433fffff 	.word	0x433fffff
 800cc84:	3ff00000 	.word	0x3ff00000
 800cc88:	3fefffff 	.word	0x3fefffff
 800cc8c:	3fe00000 	.word	0x3fe00000
 800cc90:	41e00000 	.word	0x41e00000
 800cc94:	4b60      	ldr	r3, [pc, #384]	; (800ce18 <__ieee754_pow+0x3f0>)
 800cc96:	2200      	movs	r2, #0
 800cc98:	f7f3 faa2 	bl	80001e0 <__aeabi_dsub>
 800cc9c:	a354      	add	r3, pc, #336	; (adr r3, 800cdf0 <__ieee754_pow+0x3c8>)
 800cc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca2:	4604      	mov	r4, r0
 800cca4:	460d      	mov	r5, r1
 800cca6:	f7f3 fc53 	bl	8000550 <__aeabi_dmul>
 800ccaa:	a353      	add	r3, pc, #332	; (adr r3, 800cdf8 <__ieee754_pow+0x3d0>)
 800ccac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb0:	4606      	mov	r6, r0
 800ccb2:	460f      	mov	r7, r1
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	4629      	mov	r1, r5
 800ccb8:	f7f3 fc4a 	bl	8000550 <__aeabi_dmul>
 800ccbc:	4b57      	ldr	r3, [pc, #348]	; (800ce1c <__ieee754_pow+0x3f4>)
 800ccbe:	4682      	mov	sl, r0
 800ccc0:	468b      	mov	fp, r1
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	4629      	mov	r1, r5
 800ccc8:	f7f3 fc42 	bl	8000550 <__aeabi_dmul>
 800cccc:	4602      	mov	r2, r0
 800ccce:	460b      	mov	r3, r1
 800ccd0:	a14b      	add	r1, pc, #300	; (adr r1, 800ce00 <__ieee754_pow+0x3d8>)
 800ccd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccd6:	f7f3 fa83 	bl	80001e0 <__aeabi_dsub>
 800ccda:	4622      	mov	r2, r4
 800ccdc:	462b      	mov	r3, r5
 800ccde:	f7f3 fc37 	bl	8000550 <__aeabi_dmul>
 800cce2:	4602      	mov	r2, r0
 800cce4:	460b      	mov	r3, r1
 800cce6:	2000      	movs	r0, #0
 800cce8:	494d      	ldr	r1, [pc, #308]	; (800ce20 <__ieee754_pow+0x3f8>)
 800ccea:	f7f3 fa79 	bl	80001e0 <__aeabi_dsub>
 800ccee:	4622      	mov	r2, r4
 800ccf0:	4680      	mov	r8, r0
 800ccf2:	4689      	mov	r9, r1
 800ccf4:	462b      	mov	r3, r5
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	4629      	mov	r1, r5
 800ccfa:	f7f3 fc29 	bl	8000550 <__aeabi_dmul>
 800ccfe:	4602      	mov	r2, r0
 800cd00:	460b      	mov	r3, r1
 800cd02:	4640      	mov	r0, r8
 800cd04:	4649      	mov	r1, r9
 800cd06:	f7f3 fc23 	bl	8000550 <__aeabi_dmul>
 800cd0a:	a33f      	add	r3, pc, #252	; (adr r3, 800ce08 <__ieee754_pow+0x3e0>)
 800cd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd10:	f7f3 fc1e 	bl	8000550 <__aeabi_dmul>
 800cd14:	4602      	mov	r2, r0
 800cd16:	460b      	mov	r3, r1
 800cd18:	4650      	mov	r0, sl
 800cd1a:	4659      	mov	r1, fp
 800cd1c:	f7f3 fa60 	bl	80001e0 <__aeabi_dsub>
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	4680      	mov	r8, r0
 800cd26:	4689      	mov	r9, r1
 800cd28:	4630      	mov	r0, r6
 800cd2a:	4639      	mov	r1, r7
 800cd2c:	f7f3 fa5a 	bl	80001e4 <__adddf3>
 800cd30:	2000      	movs	r0, #0
 800cd32:	4632      	mov	r2, r6
 800cd34:	463b      	mov	r3, r7
 800cd36:	4604      	mov	r4, r0
 800cd38:	460d      	mov	r5, r1
 800cd3a:	f7f3 fa51 	bl	80001e0 <__aeabi_dsub>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	460b      	mov	r3, r1
 800cd42:	4640      	mov	r0, r8
 800cd44:	4649      	mov	r1, r9
 800cd46:	f7f3 fa4b 	bl	80001e0 <__aeabi_dsub>
 800cd4a:	9b04      	ldr	r3, [sp, #16]
 800cd4c:	9a06      	ldr	r2, [sp, #24]
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	4313      	orrs	r3, r2
 800cd52:	4682      	mov	sl, r0
 800cd54:	468b      	mov	fp, r1
 800cd56:	f040 81e7 	bne.w	800d128 <__ieee754_pow+0x700>
 800cd5a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ce10 <__ieee754_pow+0x3e8>
 800cd5e:	eeb0 8a47 	vmov.f32	s16, s14
 800cd62:	eef0 8a67 	vmov.f32	s17, s15
 800cd66:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cd6a:	2600      	movs	r6, #0
 800cd6c:	4632      	mov	r2, r6
 800cd6e:	463b      	mov	r3, r7
 800cd70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd74:	f7f3 fa34 	bl	80001e0 <__aeabi_dsub>
 800cd78:	4622      	mov	r2, r4
 800cd7a:	462b      	mov	r3, r5
 800cd7c:	f7f3 fbe8 	bl	8000550 <__aeabi_dmul>
 800cd80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd84:	4680      	mov	r8, r0
 800cd86:	4689      	mov	r9, r1
 800cd88:	4650      	mov	r0, sl
 800cd8a:	4659      	mov	r1, fp
 800cd8c:	f7f3 fbe0 	bl	8000550 <__aeabi_dmul>
 800cd90:	4602      	mov	r2, r0
 800cd92:	460b      	mov	r3, r1
 800cd94:	4640      	mov	r0, r8
 800cd96:	4649      	mov	r1, r9
 800cd98:	f7f3 fa24 	bl	80001e4 <__adddf3>
 800cd9c:	4632      	mov	r2, r6
 800cd9e:	463b      	mov	r3, r7
 800cda0:	4680      	mov	r8, r0
 800cda2:	4689      	mov	r9, r1
 800cda4:	4620      	mov	r0, r4
 800cda6:	4629      	mov	r1, r5
 800cda8:	f7f3 fbd2 	bl	8000550 <__aeabi_dmul>
 800cdac:	460b      	mov	r3, r1
 800cdae:	4604      	mov	r4, r0
 800cdb0:	460d      	mov	r5, r1
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	4649      	mov	r1, r9
 800cdb6:	4640      	mov	r0, r8
 800cdb8:	f7f3 fa14 	bl	80001e4 <__adddf3>
 800cdbc:	4b19      	ldr	r3, [pc, #100]	; (800ce24 <__ieee754_pow+0x3fc>)
 800cdbe:	4299      	cmp	r1, r3
 800cdc0:	ec45 4b19 	vmov	d9, r4, r5
 800cdc4:	4606      	mov	r6, r0
 800cdc6:	460f      	mov	r7, r1
 800cdc8:	468b      	mov	fp, r1
 800cdca:	f340 82f1 	ble.w	800d3b0 <__ieee754_pow+0x988>
 800cdce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800cdd2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800cdd6:	4303      	orrs	r3, r0
 800cdd8:	f000 81e4 	beq.w	800d1a4 <__ieee754_pow+0x77c>
 800cddc:	ec51 0b18 	vmov	r0, r1, d8
 800cde0:	2200      	movs	r2, #0
 800cde2:	2300      	movs	r3, #0
 800cde4:	f7f3 fe26 	bl	8000a34 <__aeabi_dcmplt>
 800cde8:	3800      	subs	r0, #0
 800cdea:	bf18      	it	ne
 800cdec:	2001      	movne	r0, #1
 800cdee:	e72b      	b.n	800cc48 <__ieee754_pow+0x220>
 800cdf0:	60000000 	.word	0x60000000
 800cdf4:	3ff71547 	.word	0x3ff71547
 800cdf8:	f85ddf44 	.word	0xf85ddf44
 800cdfc:	3e54ae0b 	.word	0x3e54ae0b
 800ce00:	55555555 	.word	0x55555555
 800ce04:	3fd55555 	.word	0x3fd55555
 800ce08:	652b82fe 	.word	0x652b82fe
 800ce0c:	3ff71547 	.word	0x3ff71547
 800ce10:	00000000 	.word	0x00000000
 800ce14:	bff00000 	.word	0xbff00000
 800ce18:	3ff00000 	.word	0x3ff00000
 800ce1c:	3fd00000 	.word	0x3fd00000
 800ce20:	3fe00000 	.word	0x3fe00000
 800ce24:	408fffff 	.word	0x408fffff
 800ce28:	4bd5      	ldr	r3, [pc, #852]	; (800d180 <__ieee754_pow+0x758>)
 800ce2a:	402b      	ands	r3, r5
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	b92b      	cbnz	r3, 800ce3c <__ieee754_pow+0x414>
 800ce30:	4bd4      	ldr	r3, [pc, #848]	; (800d184 <__ieee754_pow+0x75c>)
 800ce32:	f7f3 fb8d 	bl	8000550 <__aeabi_dmul>
 800ce36:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ce3a:	460c      	mov	r4, r1
 800ce3c:	1523      	asrs	r3, r4, #20
 800ce3e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ce42:	4413      	add	r3, r2
 800ce44:	9305      	str	r3, [sp, #20]
 800ce46:	4bd0      	ldr	r3, [pc, #832]	; (800d188 <__ieee754_pow+0x760>)
 800ce48:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ce4c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ce50:	429c      	cmp	r4, r3
 800ce52:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ce56:	dd08      	ble.n	800ce6a <__ieee754_pow+0x442>
 800ce58:	4bcc      	ldr	r3, [pc, #816]	; (800d18c <__ieee754_pow+0x764>)
 800ce5a:	429c      	cmp	r4, r3
 800ce5c:	f340 8162 	ble.w	800d124 <__ieee754_pow+0x6fc>
 800ce60:	9b05      	ldr	r3, [sp, #20]
 800ce62:	3301      	adds	r3, #1
 800ce64:	9305      	str	r3, [sp, #20]
 800ce66:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ce6a:	2400      	movs	r4, #0
 800ce6c:	00e3      	lsls	r3, r4, #3
 800ce6e:	9307      	str	r3, [sp, #28]
 800ce70:	4bc7      	ldr	r3, [pc, #796]	; (800d190 <__ieee754_pow+0x768>)
 800ce72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce76:	ed93 7b00 	vldr	d7, [r3]
 800ce7a:	4629      	mov	r1, r5
 800ce7c:	ec53 2b17 	vmov	r2, r3, d7
 800ce80:	eeb0 9a47 	vmov.f32	s18, s14
 800ce84:	eef0 9a67 	vmov.f32	s19, s15
 800ce88:	4682      	mov	sl, r0
 800ce8a:	f7f3 f9a9 	bl	80001e0 <__aeabi_dsub>
 800ce8e:	4652      	mov	r2, sl
 800ce90:	4606      	mov	r6, r0
 800ce92:	460f      	mov	r7, r1
 800ce94:	462b      	mov	r3, r5
 800ce96:	ec51 0b19 	vmov	r0, r1, d9
 800ce9a:	f7f3 f9a3 	bl	80001e4 <__adddf3>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	460b      	mov	r3, r1
 800cea2:	2000      	movs	r0, #0
 800cea4:	49bb      	ldr	r1, [pc, #748]	; (800d194 <__ieee754_pow+0x76c>)
 800cea6:	f7f3 fc7d 	bl	80007a4 <__aeabi_ddiv>
 800ceaa:	ec41 0b1a 	vmov	d10, r0, r1
 800ceae:	4602      	mov	r2, r0
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	4639      	mov	r1, r7
 800ceb6:	f7f3 fb4b 	bl	8000550 <__aeabi_dmul>
 800ceba:	2300      	movs	r3, #0
 800cebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cec0:	9302      	str	r3, [sp, #8]
 800cec2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cec6:	46ab      	mov	fp, r5
 800cec8:	106d      	asrs	r5, r5, #1
 800ceca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cece:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ced2:	ec41 0b18 	vmov	d8, r0, r1
 800ced6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ceda:	2200      	movs	r2, #0
 800cedc:	4640      	mov	r0, r8
 800cede:	4649      	mov	r1, r9
 800cee0:	4614      	mov	r4, r2
 800cee2:	461d      	mov	r5, r3
 800cee4:	f7f3 fb34 	bl	8000550 <__aeabi_dmul>
 800cee8:	4602      	mov	r2, r0
 800ceea:	460b      	mov	r3, r1
 800ceec:	4630      	mov	r0, r6
 800ceee:	4639      	mov	r1, r7
 800cef0:	f7f3 f976 	bl	80001e0 <__aeabi_dsub>
 800cef4:	ec53 2b19 	vmov	r2, r3, d9
 800cef8:	4606      	mov	r6, r0
 800cefa:	460f      	mov	r7, r1
 800cefc:	4620      	mov	r0, r4
 800cefe:	4629      	mov	r1, r5
 800cf00:	f7f3 f96e 	bl	80001e0 <__aeabi_dsub>
 800cf04:	4602      	mov	r2, r0
 800cf06:	460b      	mov	r3, r1
 800cf08:	4650      	mov	r0, sl
 800cf0a:	4659      	mov	r1, fp
 800cf0c:	f7f3 f968 	bl	80001e0 <__aeabi_dsub>
 800cf10:	4642      	mov	r2, r8
 800cf12:	464b      	mov	r3, r9
 800cf14:	f7f3 fb1c 	bl	8000550 <__aeabi_dmul>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	4639      	mov	r1, r7
 800cf20:	f7f3 f95e 	bl	80001e0 <__aeabi_dsub>
 800cf24:	ec53 2b1a 	vmov	r2, r3, d10
 800cf28:	f7f3 fb12 	bl	8000550 <__aeabi_dmul>
 800cf2c:	ec53 2b18 	vmov	r2, r3, d8
 800cf30:	ec41 0b19 	vmov	d9, r0, r1
 800cf34:	ec51 0b18 	vmov	r0, r1, d8
 800cf38:	f7f3 fb0a 	bl	8000550 <__aeabi_dmul>
 800cf3c:	a37c      	add	r3, pc, #496	; (adr r3, 800d130 <__ieee754_pow+0x708>)
 800cf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf42:	4604      	mov	r4, r0
 800cf44:	460d      	mov	r5, r1
 800cf46:	f7f3 fb03 	bl	8000550 <__aeabi_dmul>
 800cf4a:	a37b      	add	r3, pc, #492	; (adr r3, 800d138 <__ieee754_pow+0x710>)
 800cf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf50:	f7f3 f948 	bl	80001e4 <__adddf3>
 800cf54:	4622      	mov	r2, r4
 800cf56:	462b      	mov	r3, r5
 800cf58:	f7f3 fafa 	bl	8000550 <__aeabi_dmul>
 800cf5c:	a378      	add	r3, pc, #480	; (adr r3, 800d140 <__ieee754_pow+0x718>)
 800cf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf62:	f7f3 f93f 	bl	80001e4 <__adddf3>
 800cf66:	4622      	mov	r2, r4
 800cf68:	462b      	mov	r3, r5
 800cf6a:	f7f3 faf1 	bl	8000550 <__aeabi_dmul>
 800cf6e:	a376      	add	r3, pc, #472	; (adr r3, 800d148 <__ieee754_pow+0x720>)
 800cf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf74:	f7f3 f936 	bl	80001e4 <__adddf3>
 800cf78:	4622      	mov	r2, r4
 800cf7a:	462b      	mov	r3, r5
 800cf7c:	f7f3 fae8 	bl	8000550 <__aeabi_dmul>
 800cf80:	a373      	add	r3, pc, #460	; (adr r3, 800d150 <__ieee754_pow+0x728>)
 800cf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf86:	f7f3 f92d 	bl	80001e4 <__adddf3>
 800cf8a:	4622      	mov	r2, r4
 800cf8c:	462b      	mov	r3, r5
 800cf8e:	f7f3 fadf 	bl	8000550 <__aeabi_dmul>
 800cf92:	a371      	add	r3, pc, #452	; (adr r3, 800d158 <__ieee754_pow+0x730>)
 800cf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf98:	f7f3 f924 	bl	80001e4 <__adddf3>
 800cf9c:	4622      	mov	r2, r4
 800cf9e:	4606      	mov	r6, r0
 800cfa0:	460f      	mov	r7, r1
 800cfa2:	462b      	mov	r3, r5
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	4629      	mov	r1, r5
 800cfa8:	f7f3 fad2 	bl	8000550 <__aeabi_dmul>
 800cfac:	4602      	mov	r2, r0
 800cfae:	460b      	mov	r3, r1
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	4639      	mov	r1, r7
 800cfb4:	f7f3 facc 	bl	8000550 <__aeabi_dmul>
 800cfb8:	4642      	mov	r2, r8
 800cfba:	4604      	mov	r4, r0
 800cfbc:	460d      	mov	r5, r1
 800cfbe:	464b      	mov	r3, r9
 800cfc0:	ec51 0b18 	vmov	r0, r1, d8
 800cfc4:	f7f3 f90e 	bl	80001e4 <__adddf3>
 800cfc8:	ec53 2b19 	vmov	r2, r3, d9
 800cfcc:	f7f3 fac0 	bl	8000550 <__aeabi_dmul>
 800cfd0:	4622      	mov	r2, r4
 800cfd2:	462b      	mov	r3, r5
 800cfd4:	f7f3 f906 	bl	80001e4 <__adddf3>
 800cfd8:	4642      	mov	r2, r8
 800cfda:	4682      	mov	sl, r0
 800cfdc:	468b      	mov	fp, r1
 800cfde:	464b      	mov	r3, r9
 800cfe0:	4640      	mov	r0, r8
 800cfe2:	4649      	mov	r1, r9
 800cfe4:	f7f3 fab4 	bl	8000550 <__aeabi_dmul>
 800cfe8:	4b6b      	ldr	r3, [pc, #428]	; (800d198 <__ieee754_pow+0x770>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	4606      	mov	r6, r0
 800cfee:	460f      	mov	r7, r1
 800cff0:	f7f3 f8f8 	bl	80001e4 <__adddf3>
 800cff4:	4652      	mov	r2, sl
 800cff6:	465b      	mov	r3, fp
 800cff8:	f7f3 f8f4 	bl	80001e4 <__adddf3>
 800cffc:	2000      	movs	r0, #0
 800cffe:	4604      	mov	r4, r0
 800d000:	460d      	mov	r5, r1
 800d002:	4602      	mov	r2, r0
 800d004:	460b      	mov	r3, r1
 800d006:	4640      	mov	r0, r8
 800d008:	4649      	mov	r1, r9
 800d00a:	f7f3 faa1 	bl	8000550 <__aeabi_dmul>
 800d00e:	4b62      	ldr	r3, [pc, #392]	; (800d198 <__ieee754_pow+0x770>)
 800d010:	4680      	mov	r8, r0
 800d012:	4689      	mov	r9, r1
 800d014:	2200      	movs	r2, #0
 800d016:	4620      	mov	r0, r4
 800d018:	4629      	mov	r1, r5
 800d01a:	f7f3 f8e1 	bl	80001e0 <__aeabi_dsub>
 800d01e:	4632      	mov	r2, r6
 800d020:	463b      	mov	r3, r7
 800d022:	f7f3 f8dd 	bl	80001e0 <__aeabi_dsub>
 800d026:	4602      	mov	r2, r0
 800d028:	460b      	mov	r3, r1
 800d02a:	4650      	mov	r0, sl
 800d02c:	4659      	mov	r1, fp
 800d02e:	f7f3 f8d7 	bl	80001e0 <__aeabi_dsub>
 800d032:	ec53 2b18 	vmov	r2, r3, d8
 800d036:	f7f3 fa8b 	bl	8000550 <__aeabi_dmul>
 800d03a:	4622      	mov	r2, r4
 800d03c:	4606      	mov	r6, r0
 800d03e:	460f      	mov	r7, r1
 800d040:	462b      	mov	r3, r5
 800d042:	ec51 0b19 	vmov	r0, r1, d9
 800d046:	f7f3 fa83 	bl	8000550 <__aeabi_dmul>
 800d04a:	4602      	mov	r2, r0
 800d04c:	460b      	mov	r3, r1
 800d04e:	4630      	mov	r0, r6
 800d050:	4639      	mov	r1, r7
 800d052:	f7f3 f8c7 	bl	80001e4 <__adddf3>
 800d056:	4606      	mov	r6, r0
 800d058:	460f      	mov	r7, r1
 800d05a:	4602      	mov	r2, r0
 800d05c:	460b      	mov	r3, r1
 800d05e:	4640      	mov	r0, r8
 800d060:	4649      	mov	r1, r9
 800d062:	f7f3 f8bf 	bl	80001e4 <__adddf3>
 800d066:	a33e      	add	r3, pc, #248	; (adr r3, 800d160 <__ieee754_pow+0x738>)
 800d068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06c:	2000      	movs	r0, #0
 800d06e:	4604      	mov	r4, r0
 800d070:	460d      	mov	r5, r1
 800d072:	f7f3 fa6d 	bl	8000550 <__aeabi_dmul>
 800d076:	4642      	mov	r2, r8
 800d078:	ec41 0b18 	vmov	d8, r0, r1
 800d07c:	464b      	mov	r3, r9
 800d07e:	4620      	mov	r0, r4
 800d080:	4629      	mov	r1, r5
 800d082:	f7f3 f8ad 	bl	80001e0 <__aeabi_dsub>
 800d086:	4602      	mov	r2, r0
 800d088:	460b      	mov	r3, r1
 800d08a:	4630      	mov	r0, r6
 800d08c:	4639      	mov	r1, r7
 800d08e:	f7f3 f8a7 	bl	80001e0 <__aeabi_dsub>
 800d092:	a335      	add	r3, pc, #212	; (adr r3, 800d168 <__ieee754_pow+0x740>)
 800d094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d098:	f7f3 fa5a 	bl	8000550 <__aeabi_dmul>
 800d09c:	a334      	add	r3, pc, #208	; (adr r3, 800d170 <__ieee754_pow+0x748>)
 800d09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	460f      	mov	r7, r1
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	4629      	mov	r1, r5
 800d0aa:	f7f3 fa51 	bl	8000550 <__aeabi_dmul>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	4639      	mov	r1, r7
 800d0b6:	f7f3 f895 	bl	80001e4 <__adddf3>
 800d0ba:	9a07      	ldr	r2, [sp, #28]
 800d0bc:	4b37      	ldr	r3, [pc, #220]	; (800d19c <__ieee754_pow+0x774>)
 800d0be:	4413      	add	r3, r2
 800d0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c4:	f7f3 f88e 	bl	80001e4 <__adddf3>
 800d0c8:	4682      	mov	sl, r0
 800d0ca:	9805      	ldr	r0, [sp, #20]
 800d0cc:	468b      	mov	fp, r1
 800d0ce:	f7f3 f9d5 	bl	800047c <__aeabi_i2d>
 800d0d2:	9a07      	ldr	r2, [sp, #28]
 800d0d4:	4b32      	ldr	r3, [pc, #200]	; (800d1a0 <__ieee754_pow+0x778>)
 800d0d6:	4413      	add	r3, r2
 800d0d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d0dc:	4606      	mov	r6, r0
 800d0de:	460f      	mov	r7, r1
 800d0e0:	4652      	mov	r2, sl
 800d0e2:	465b      	mov	r3, fp
 800d0e4:	ec51 0b18 	vmov	r0, r1, d8
 800d0e8:	f7f3 f87c 	bl	80001e4 <__adddf3>
 800d0ec:	4642      	mov	r2, r8
 800d0ee:	464b      	mov	r3, r9
 800d0f0:	f7f3 f878 	bl	80001e4 <__adddf3>
 800d0f4:	4632      	mov	r2, r6
 800d0f6:	463b      	mov	r3, r7
 800d0f8:	f7f3 f874 	bl	80001e4 <__adddf3>
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	4632      	mov	r2, r6
 800d100:	463b      	mov	r3, r7
 800d102:	4604      	mov	r4, r0
 800d104:	460d      	mov	r5, r1
 800d106:	f7f3 f86b 	bl	80001e0 <__aeabi_dsub>
 800d10a:	4642      	mov	r2, r8
 800d10c:	464b      	mov	r3, r9
 800d10e:	f7f3 f867 	bl	80001e0 <__aeabi_dsub>
 800d112:	ec53 2b18 	vmov	r2, r3, d8
 800d116:	f7f3 f863 	bl	80001e0 <__aeabi_dsub>
 800d11a:	4602      	mov	r2, r0
 800d11c:	460b      	mov	r3, r1
 800d11e:	4650      	mov	r0, sl
 800d120:	4659      	mov	r1, fp
 800d122:	e610      	b.n	800cd46 <__ieee754_pow+0x31e>
 800d124:	2401      	movs	r4, #1
 800d126:	e6a1      	b.n	800ce6c <__ieee754_pow+0x444>
 800d128:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d178 <__ieee754_pow+0x750>
 800d12c:	e617      	b.n	800cd5e <__ieee754_pow+0x336>
 800d12e:	bf00      	nop
 800d130:	4a454eef 	.word	0x4a454eef
 800d134:	3fca7e28 	.word	0x3fca7e28
 800d138:	93c9db65 	.word	0x93c9db65
 800d13c:	3fcd864a 	.word	0x3fcd864a
 800d140:	a91d4101 	.word	0xa91d4101
 800d144:	3fd17460 	.word	0x3fd17460
 800d148:	518f264d 	.word	0x518f264d
 800d14c:	3fd55555 	.word	0x3fd55555
 800d150:	db6fabff 	.word	0xdb6fabff
 800d154:	3fdb6db6 	.word	0x3fdb6db6
 800d158:	33333303 	.word	0x33333303
 800d15c:	3fe33333 	.word	0x3fe33333
 800d160:	e0000000 	.word	0xe0000000
 800d164:	3feec709 	.word	0x3feec709
 800d168:	dc3a03fd 	.word	0xdc3a03fd
 800d16c:	3feec709 	.word	0x3feec709
 800d170:	145b01f5 	.word	0x145b01f5
 800d174:	be3e2fe0 	.word	0xbe3e2fe0
 800d178:	00000000 	.word	0x00000000
 800d17c:	3ff00000 	.word	0x3ff00000
 800d180:	7ff00000 	.word	0x7ff00000
 800d184:	43400000 	.word	0x43400000
 800d188:	0003988e 	.word	0x0003988e
 800d18c:	000bb679 	.word	0x000bb679
 800d190:	0800e218 	.word	0x0800e218
 800d194:	3ff00000 	.word	0x3ff00000
 800d198:	40080000 	.word	0x40080000
 800d19c:	0800e238 	.word	0x0800e238
 800d1a0:	0800e228 	.word	0x0800e228
 800d1a4:	a3b5      	add	r3, pc, #724	; (adr r3, 800d47c <__ieee754_pow+0xa54>)
 800d1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1aa:	4640      	mov	r0, r8
 800d1ac:	4649      	mov	r1, r9
 800d1ae:	f7f3 f819 	bl	80001e4 <__adddf3>
 800d1b2:	4622      	mov	r2, r4
 800d1b4:	ec41 0b1a 	vmov	d10, r0, r1
 800d1b8:	462b      	mov	r3, r5
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	4639      	mov	r1, r7
 800d1be:	f7f3 f80f 	bl	80001e0 <__aeabi_dsub>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	ec51 0b1a 	vmov	r0, r1, d10
 800d1ca:	f7f3 fc51 	bl	8000a70 <__aeabi_dcmpgt>
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	f47f ae04 	bne.w	800cddc <__ieee754_pow+0x3b4>
 800d1d4:	4aa4      	ldr	r2, [pc, #656]	; (800d468 <__ieee754_pow+0xa40>)
 800d1d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	f340 8108 	ble.w	800d3f0 <__ieee754_pow+0x9c8>
 800d1e0:	151b      	asrs	r3, r3, #20
 800d1e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d1e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d1ea:	fa4a f303 	asr.w	r3, sl, r3
 800d1ee:	445b      	add	r3, fp
 800d1f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d1f4:	4e9d      	ldr	r6, [pc, #628]	; (800d46c <__ieee754_pow+0xa44>)
 800d1f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d1fa:	4116      	asrs	r6, r2
 800d1fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d200:	2000      	movs	r0, #0
 800d202:	ea23 0106 	bic.w	r1, r3, r6
 800d206:	f1c2 0214 	rsb	r2, r2, #20
 800d20a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d20e:	fa4a fa02 	asr.w	sl, sl, r2
 800d212:	f1bb 0f00 	cmp.w	fp, #0
 800d216:	4602      	mov	r2, r0
 800d218:	460b      	mov	r3, r1
 800d21a:	4620      	mov	r0, r4
 800d21c:	4629      	mov	r1, r5
 800d21e:	bfb8      	it	lt
 800d220:	f1ca 0a00 	rsblt	sl, sl, #0
 800d224:	f7f2 ffdc 	bl	80001e0 <__aeabi_dsub>
 800d228:	ec41 0b19 	vmov	d9, r0, r1
 800d22c:	4642      	mov	r2, r8
 800d22e:	464b      	mov	r3, r9
 800d230:	ec51 0b19 	vmov	r0, r1, d9
 800d234:	f7f2 ffd6 	bl	80001e4 <__adddf3>
 800d238:	a37b      	add	r3, pc, #492	; (adr r3, 800d428 <__ieee754_pow+0xa00>)
 800d23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23e:	2000      	movs	r0, #0
 800d240:	4604      	mov	r4, r0
 800d242:	460d      	mov	r5, r1
 800d244:	f7f3 f984 	bl	8000550 <__aeabi_dmul>
 800d248:	ec53 2b19 	vmov	r2, r3, d9
 800d24c:	4606      	mov	r6, r0
 800d24e:	460f      	mov	r7, r1
 800d250:	4620      	mov	r0, r4
 800d252:	4629      	mov	r1, r5
 800d254:	f7f2 ffc4 	bl	80001e0 <__aeabi_dsub>
 800d258:	4602      	mov	r2, r0
 800d25a:	460b      	mov	r3, r1
 800d25c:	4640      	mov	r0, r8
 800d25e:	4649      	mov	r1, r9
 800d260:	f7f2 ffbe 	bl	80001e0 <__aeabi_dsub>
 800d264:	a372      	add	r3, pc, #456	; (adr r3, 800d430 <__ieee754_pow+0xa08>)
 800d266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26a:	f7f3 f971 	bl	8000550 <__aeabi_dmul>
 800d26e:	a372      	add	r3, pc, #456	; (adr r3, 800d438 <__ieee754_pow+0xa10>)
 800d270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d274:	4680      	mov	r8, r0
 800d276:	4689      	mov	r9, r1
 800d278:	4620      	mov	r0, r4
 800d27a:	4629      	mov	r1, r5
 800d27c:	f7f3 f968 	bl	8000550 <__aeabi_dmul>
 800d280:	4602      	mov	r2, r0
 800d282:	460b      	mov	r3, r1
 800d284:	4640      	mov	r0, r8
 800d286:	4649      	mov	r1, r9
 800d288:	f7f2 ffac 	bl	80001e4 <__adddf3>
 800d28c:	4604      	mov	r4, r0
 800d28e:	460d      	mov	r5, r1
 800d290:	4602      	mov	r2, r0
 800d292:	460b      	mov	r3, r1
 800d294:	4630      	mov	r0, r6
 800d296:	4639      	mov	r1, r7
 800d298:	f7f2 ffa4 	bl	80001e4 <__adddf3>
 800d29c:	4632      	mov	r2, r6
 800d29e:	463b      	mov	r3, r7
 800d2a0:	4680      	mov	r8, r0
 800d2a2:	4689      	mov	r9, r1
 800d2a4:	f7f2 ff9c 	bl	80001e0 <__aeabi_dsub>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	4620      	mov	r0, r4
 800d2ae:	4629      	mov	r1, r5
 800d2b0:	f7f2 ff96 	bl	80001e0 <__aeabi_dsub>
 800d2b4:	4642      	mov	r2, r8
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	460f      	mov	r7, r1
 800d2ba:	464b      	mov	r3, r9
 800d2bc:	4640      	mov	r0, r8
 800d2be:	4649      	mov	r1, r9
 800d2c0:	f7f3 f946 	bl	8000550 <__aeabi_dmul>
 800d2c4:	a35e      	add	r3, pc, #376	; (adr r3, 800d440 <__ieee754_pow+0xa18>)
 800d2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ca:	4604      	mov	r4, r0
 800d2cc:	460d      	mov	r5, r1
 800d2ce:	f7f3 f93f 	bl	8000550 <__aeabi_dmul>
 800d2d2:	a35d      	add	r3, pc, #372	; (adr r3, 800d448 <__ieee754_pow+0xa20>)
 800d2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d8:	f7f2 ff82 	bl	80001e0 <__aeabi_dsub>
 800d2dc:	4622      	mov	r2, r4
 800d2de:	462b      	mov	r3, r5
 800d2e0:	f7f3 f936 	bl	8000550 <__aeabi_dmul>
 800d2e4:	a35a      	add	r3, pc, #360	; (adr r3, 800d450 <__ieee754_pow+0xa28>)
 800d2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ea:	f7f2 ff7b 	bl	80001e4 <__adddf3>
 800d2ee:	4622      	mov	r2, r4
 800d2f0:	462b      	mov	r3, r5
 800d2f2:	f7f3 f92d 	bl	8000550 <__aeabi_dmul>
 800d2f6:	a358      	add	r3, pc, #352	; (adr r3, 800d458 <__ieee754_pow+0xa30>)
 800d2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fc:	f7f2 ff70 	bl	80001e0 <__aeabi_dsub>
 800d300:	4622      	mov	r2, r4
 800d302:	462b      	mov	r3, r5
 800d304:	f7f3 f924 	bl	8000550 <__aeabi_dmul>
 800d308:	a355      	add	r3, pc, #340	; (adr r3, 800d460 <__ieee754_pow+0xa38>)
 800d30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30e:	f7f2 ff69 	bl	80001e4 <__adddf3>
 800d312:	4622      	mov	r2, r4
 800d314:	462b      	mov	r3, r5
 800d316:	f7f3 f91b 	bl	8000550 <__aeabi_dmul>
 800d31a:	4602      	mov	r2, r0
 800d31c:	460b      	mov	r3, r1
 800d31e:	4640      	mov	r0, r8
 800d320:	4649      	mov	r1, r9
 800d322:	f7f2 ff5d 	bl	80001e0 <__aeabi_dsub>
 800d326:	4604      	mov	r4, r0
 800d328:	460d      	mov	r5, r1
 800d32a:	4602      	mov	r2, r0
 800d32c:	460b      	mov	r3, r1
 800d32e:	4640      	mov	r0, r8
 800d330:	4649      	mov	r1, r9
 800d332:	f7f3 f90d 	bl	8000550 <__aeabi_dmul>
 800d336:	2200      	movs	r2, #0
 800d338:	ec41 0b19 	vmov	d9, r0, r1
 800d33c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d340:	4620      	mov	r0, r4
 800d342:	4629      	mov	r1, r5
 800d344:	f7f2 ff4c 	bl	80001e0 <__aeabi_dsub>
 800d348:	4602      	mov	r2, r0
 800d34a:	460b      	mov	r3, r1
 800d34c:	ec51 0b19 	vmov	r0, r1, d9
 800d350:	f7f3 fa28 	bl	80007a4 <__aeabi_ddiv>
 800d354:	4632      	mov	r2, r6
 800d356:	4604      	mov	r4, r0
 800d358:	460d      	mov	r5, r1
 800d35a:	463b      	mov	r3, r7
 800d35c:	4640      	mov	r0, r8
 800d35e:	4649      	mov	r1, r9
 800d360:	f7f3 f8f6 	bl	8000550 <__aeabi_dmul>
 800d364:	4632      	mov	r2, r6
 800d366:	463b      	mov	r3, r7
 800d368:	f7f2 ff3c 	bl	80001e4 <__adddf3>
 800d36c:	4602      	mov	r2, r0
 800d36e:	460b      	mov	r3, r1
 800d370:	4620      	mov	r0, r4
 800d372:	4629      	mov	r1, r5
 800d374:	f7f2 ff34 	bl	80001e0 <__aeabi_dsub>
 800d378:	4642      	mov	r2, r8
 800d37a:	464b      	mov	r3, r9
 800d37c:	f7f2 ff30 	bl	80001e0 <__aeabi_dsub>
 800d380:	460b      	mov	r3, r1
 800d382:	4602      	mov	r2, r0
 800d384:	493a      	ldr	r1, [pc, #232]	; (800d470 <__ieee754_pow+0xa48>)
 800d386:	2000      	movs	r0, #0
 800d388:	f7f2 ff2a 	bl	80001e0 <__aeabi_dsub>
 800d38c:	ec41 0b10 	vmov	d0, r0, r1
 800d390:	ee10 3a90 	vmov	r3, s1
 800d394:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d39c:	da2b      	bge.n	800d3f6 <__ieee754_pow+0x9ce>
 800d39e:	4650      	mov	r0, sl
 800d3a0:	f000 fdca 	bl	800df38 <scalbn>
 800d3a4:	ec51 0b10 	vmov	r0, r1, d0
 800d3a8:	ec53 2b18 	vmov	r2, r3, d8
 800d3ac:	f7ff bbed 	b.w	800cb8a <__ieee754_pow+0x162>
 800d3b0:	4b30      	ldr	r3, [pc, #192]	; (800d474 <__ieee754_pow+0xa4c>)
 800d3b2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d3b6:	429e      	cmp	r6, r3
 800d3b8:	f77f af0c 	ble.w	800d1d4 <__ieee754_pow+0x7ac>
 800d3bc:	4b2e      	ldr	r3, [pc, #184]	; (800d478 <__ieee754_pow+0xa50>)
 800d3be:	440b      	add	r3, r1
 800d3c0:	4303      	orrs	r3, r0
 800d3c2:	d009      	beq.n	800d3d8 <__ieee754_pow+0x9b0>
 800d3c4:	ec51 0b18 	vmov	r0, r1, d8
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	f7f3 fb32 	bl	8000a34 <__aeabi_dcmplt>
 800d3d0:	3800      	subs	r0, #0
 800d3d2:	bf18      	it	ne
 800d3d4:	2001      	movne	r0, #1
 800d3d6:	e447      	b.n	800cc68 <__ieee754_pow+0x240>
 800d3d8:	4622      	mov	r2, r4
 800d3da:	462b      	mov	r3, r5
 800d3dc:	f7f2 ff00 	bl	80001e0 <__aeabi_dsub>
 800d3e0:	4642      	mov	r2, r8
 800d3e2:	464b      	mov	r3, r9
 800d3e4:	f7f3 fb3a 	bl	8000a5c <__aeabi_dcmpge>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	f43f aef3 	beq.w	800d1d4 <__ieee754_pow+0x7ac>
 800d3ee:	e7e9      	b.n	800d3c4 <__ieee754_pow+0x99c>
 800d3f0:	f04f 0a00 	mov.w	sl, #0
 800d3f4:	e71a      	b.n	800d22c <__ieee754_pow+0x804>
 800d3f6:	ec51 0b10 	vmov	r0, r1, d0
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	e7d4      	b.n	800d3a8 <__ieee754_pow+0x980>
 800d3fe:	491c      	ldr	r1, [pc, #112]	; (800d470 <__ieee754_pow+0xa48>)
 800d400:	2000      	movs	r0, #0
 800d402:	f7ff bb30 	b.w	800ca66 <__ieee754_pow+0x3e>
 800d406:	2000      	movs	r0, #0
 800d408:	2100      	movs	r1, #0
 800d40a:	f7ff bb2c 	b.w	800ca66 <__ieee754_pow+0x3e>
 800d40e:	4630      	mov	r0, r6
 800d410:	4639      	mov	r1, r7
 800d412:	f7ff bb28 	b.w	800ca66 <__ieee754_pow+0x3e>
 800d416:	9204      	str	r2, [sp, #16]
 800d418:	f7ff bb7a 	b.w	800cb10 <__ieee754_pow+0xe8>
 800d41c:	2300      	movs	r3, #0
 800d41e:	f7ff bb64 	b.w	800caea <__ieee754_pow+0xc2>
 800d422:	bf00      	nop
 800d424:	f3af 8000 	nop.w
 800d428:	00000000 	.word	0x00000000
 800d42c:	3fe62e43 	.word	0x3fe62e43
 800d430:	fefa39ef 	.word	0xfefa39ef
 800d434:	3fe62e42 	.word	0x3fe62e42
 800d438:	0ca86c39 	.word	0x0ca86c39
 800d43c:	be205c61 	.word	0xbe205c61
 800d440:	72bea4d0 	.word	0x72bea4d0
 800d444:	3e663769 	.word	0x3e663769
 800d448:	c5d26bf1 	.word	0xc5d26bf1
 800d44c:	3ebbbd41 	.word	0x3ebbbd41
 800d450:	af25de2c 	.word	0xaf25de2c
 800d454:	3f11566a 	.word	0x3f11566a
 800d458:	16bebd93 	.word	0x16bebd93
 800d45c:	3f66c16c 	.word	0x3f66c16c
 800d460:	5555553e 	.word	0x5555553e
 800d464:	3fc55555 	.word	0x3fc55555
 800d468:	3fe00000 	.word	0x3fe00000
 800d46c:	000fffff 	.word	0x000fffff
 800d470:	3ff00000 	.word	0x3ff00000
 800d474:	4090cbff 	.word	0x4090cbff
 800d478:	3f6f3400 	.word	0x3f6f3400
 800d47c:	652b82fe 	.word	0x652b82fe
 800d480:	3c971547 	.word	0x3c971547

0800d484 <__ieee754_sqrt>:
 800d484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d488:	ec55 4b10 	vmov	r4, r5, d0
 800d48c:	4e55      	ldr	r6, [pc, #340]	; (800d5e4 <__ieee754_sqrt+0x160>)
 800d48e:	43ae      	bics	r6, r5
 800d490:	ee10 0a10 	vmov	r0, s0
 800d494:	ee10 3a10 	vmov	r3, s0
 800d498:	462a      	mov	r2, r5
 800d49a:	4629      	mov	r1, r5
 800d49c:	d110      	bne.n	800d4c0 <__ieee754_sqrt+0x3c>
 800d49e:	ee10 2a10 	vmov	r2, s0
 800d4a2:	462b      	mov	r3, r5
 800d4a4:	f7f3 f854 	bl	8000550 <__aeabi_dmul>
 800d4a8:	4602      	mov	r2, r0
 800d4aa:	460b      	mov	r3, r1
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	4629      	mov	r1, r5
 800d4b0:	f7f2 fe98 	bl	80001e4 <__adddf3>
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	460d      	mov	r5, r1
 800d4b8:	ec45 4b10 	vmov	d0, r4, r5
 800d4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c0:	2d00      	cmp	r5, #0
 800d4c2:	dc10      	bgt.n	800d4e6 <__ieee754_sqrt+0x62>
 800d4c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d4c8:	4330      	orrs	r0, r6
 800d4ca:	d0f5      	beq.n	800d4b8 <__ieee754_sqrt+0x34>
 800d4cc:	b15d      	cbz	r5, 800d4e6 <__ieee754_sqrt+0x62>
 800d4ce:	ee10 2a10 	vmov	r2, s0
 800d4d2:	462b      	mov	r3, r5
 800d4d4:	ee10 0a10 	vmov	r0, s0
 800d4d8:	f7f2 fe82 	bl	80001e0 <__aeabi_dsub>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	460b      	mov	r3, r1
 800d4e0:	f7f3 f960 	bl	80007a4 <__aeabi_ddiv>
 800d4e4:	e7e6      	b.n	800d4b4 <__ieee754_sqrt+0x30>
 800d4e6:	1512      	asrs	r2, r2, #20
 800d4e8:	d074      	beq.n	800d5d4 <__ieee754_sqrt+0x150>
 800d4ea:	07d4      	lsls	r4, r2, #31
 800d4ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d4f0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d4f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d4f8:	bf5e      	ittt	pl
 800d4fa:	0fda      	lsrpl	r2, r3, #31
 800d4fc:	005b      	lslpl	r3, r3, #1
 800d4fe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d502:	2400      	movs	r4, #0
 800d504:	0fda      	lsrs	r2, r3, #31
 800d506:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d50a:	107f      	asrs	r7, r7, #1
 800d50c:	005b      	lsls	r3, r3, #1
 800d50e:	2516      	movs	r5, #22
 800d510:	4620      	mov	r0, r4
 800d512:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d516:	1886      	adds	r6, r0, r2
 800d518:	428e      	cmp	r6, r1
 800d51a:	bfde      	ittt	le
 800d51c:	1b89      	suble	r1, r1, r6
 800d51e:	18b0      	addle	r0, r6, r2
 800d520:	18a4      	addle	r4, r4, r2
 800d522:	0049      	lsls	r1, r1, #1
 800d524:	3d01      	subs	r5, #1
 800d526:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d52a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d52e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d532:	d1f0      	bne.n	800d516 <__ieee754_sqrt+0x92>
 800d534:	462a      	mov	r2, r5
 800d536:	f04f 0e20 	mov.w	lr, #32
 800d53a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d53e:	4281      	cmp	r1, r0
 800d540:	eb06 0c05 	add.w	ip, r6, r5
 800d544:	dc02      	bgt.n	800d54c <__ieee754_sqrt+0xc8>
 800d546:	d113      	bne.n	800d570 <__ieee754_sqrt+0xec>
 800d548:	459c      	cmp	ip, r3
 800d54a:	d811      	bhi.n	800d570 <__ieee754_sqrt+0xec>
 800d54c:	f1bc 0f00 	cmp.w	ip, #0
 800d550:	eb0c 0506 	add.w	r5, ip, r6
 800d554:	da43      	bge.n	800d5de <__ieee754_sqrt+0x15a>
 800d556:	2d00      	cmp	r5, #0
 800d558:	db41      	blt.n	800d5de <__ieee754_sqrt+0x15a>
 800d55a:	f100 0801 	add.w	r8, r0, #1
 800d55e:	1a09      	subs	r1, r1, r0
 800d560:	459c      	cmp	ip, r3
 800d562:	bf88      	it	hi
 800d564:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d568:	eba3 030c 	sub.w	r3, r3, ip
 800d56c:	4432      	add	r2, r6
 800d56e:	4640      	mov	r0, r8
 800d570:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d574:	f1be 0e01 	subs.w	lr, lr, #1
 800d578:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d57c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d580:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d584:	d1db      	bne.n	800d53e <__ieee754_sqrt+0xba>
 800d586:	430b      	orrs	r3, r1
 800d588:	d006      	beq.n	800d598 <__ieee754_sqrt+0x114>
 800d58a:	1c50      	adds	r0, r2, #1
 800d58c:	bf13      	iteet	ne
 800d58e:	3201      	addne	r2, #1
 800d590:	3401      	addeq	r4, #1
 800d592:	4672      	moveq	r2, lr
 800d594:	f022 0201 	bicne.w	r2, r2, #1
 800d598:	1063      	asrs	r3, r4, #1
 800d59a:	0852      	lsrs	r2, r2, #1
 800d59c:	07e1      	lsls	r1, r4, #31
 800d59e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d5a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d5a6:	bf48      	it	mi
 800d5a8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d5ac:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d5b0:	4614      	mov	r4, r2
 800d5b2:	e781      	b.n	800d4b8 <__ieee754_sqrt+0x34>
 800d5b4:	0ad9      	lsrs	r1, r3, #11
 800d5b6:	3815      	subs	r0, #21
 800d5b8:	055b      	lsls	r3, r3, #21
 800d5ba:	2900      	cmp	r1, #0
 800d5bc:	d0fa      	beq.n	800d5b4 <__ieee754_sqrt+0x130>
 800d5be:	02cd      	lsls	r5, r1, #11
 800d5c0:	d50a      	bpl.n	800d5d8 <__ieee754_sqrt+0x154>
 800d5c2:	f1c2 0420 	rsb	r4, r2, #32
 800d5c6:	fa23 f404 	lsr.w	r4, r3, r4
 800d5ca:	1e55      	subs	r5, r2, #1
 800d5cc:	4093      	lsls	r3, r2
 800d5ce:	4321      	orrs	r1, r4
 800d5d0:	1b42      	subs	r2, r0, r5
 800d5d2:	e78a      	b.n	800d4ea <__ieee754_sqrt+0x66>
 800d5d4:	4610      	mov	r0, r2
 800d5d6:	e7f0      	b.n	800d5ba <__ieee754_sqrt+0x136>
 800d5d8:	0049      	lsls	r1, r1, #1
 800d5da:	3201      	adds	r2, #1
 800d5dc:	e7ef      	b.n	800d5be <__ieee754_sqrt+0x13a>
 800d5de:	4680      	mov	r8, r0
 800d5e0:	e7bd      	b.n	800d55e <__ieee754_sqrt+0xda>
 800d5e2:	bf00      	nop
 800d5e4:	7ff00000 	.word	0x7ff00000

0800d5e8 <__ieee754_rem_pio2f>:
 800d5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5ea:	ee10 6a10 	vmov	r6, s0
 800d5ee:	4b8e      	ldr	r3, [pc, #568]	; (800d828 <__ieee754_rem_pio2f+0x240>)
 800d5f0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d5f4:	429d      	cmp	r5, r3
 800d5f6:	b087      	sub	sp, #28
 800d5f8:	eef0 7a40 	vmov.f32	s15, s0
 800d5fc:	4604      	mov	r4, r0
 800d5fe:	dc05      	bgt.n	800d60c <__ieee754_rem_pio2f+0x24>
 800d600:	2300      	movs	r3, #0
 800d602:	ed80 0a00 	vstr	s0, [r0]
 800d606:	6043      	str	r3, [r0, #4]
 800d608:	2000      	movs	r0, #0
 800d60a:	e01a      	b.n	800d642 <__ieee754_rem_pio2f+0x5a>
 800d60c:	4b87      	ldr	r3, [pc, #540]	; (800d82c <__ieee754_rem_pio2f+0x244>)
 800d60e:	429d      	cmp	r5, r3
 800d610:	dc46      	bgt.n	800d6a0 <__ieee754_rem_pio2f+0xb8>
 800d612:	2e00      	cmp	r6, #0
 800d614:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800d830 <__ieee754_rem_pio2f+0x248>
 800d618:	4b86      	ldr	r3, [pc, #536]	; (800d834 <__ieee754_rem_pio2f+0x24c>)
 800d61a:	f025 050f 	bic.w	r5, r5, #15
 800d61e:	dd1f      	ble.n	800d660 <__ieee754_rem_pio2f+0x78>
 800d620:	429d      	cmp	r5, r3
 800d622:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d626:	d00e      	beq.n	800d646 <__ieee754_rem_pio2f+0x5e>
 800d628:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800d838 <__ieee754_rem_pio2f+0x250>
 800d62c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800d630:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d634:	ed80 0a00 	vstr	s0, [r0]
 800d638:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d63c:	2001      	movs	r0, #1
 800d63e:	edc4 7a01 	vstr	s15, [r4, #4]
 800d642:	b007      	add	sp, #28
 800d644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d646:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800d83c <__ieee754_rem_pio2f+0x254>
 800d64a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800d840 <__ieee754_rem_pio2f+0x258>
 800d64e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d652:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d656:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d65a:	edc0 6a00 	vstr	s13, [r0]
 800d65e:	e7eb      	b.n	800d638 <__ieee754_rem_pio2f+0x50>
 800d660:	429d      	cmp	r5, r3
 800d662:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d666:	d00e      	beq.n	800d686 <__ieee754_rem_pio2f+0x9e>
 800d668:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800d838 <__ieee754_rem_pio2f+0x250>
 800d66c:	ee37 0a87 	vadd.f32	s0, s15, s14
 800d670:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d674:	ed80 0a00 	vstr	s0, [r0]
 800d678:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d67c:	f04f 30ff 	mov.w	r0, #4294967295
 800d680:	edc4 7a01 	vstr	s15, [r4, #4]
 800d684:	e7dd      	b.n	800d642 <__ieee754_rem_pio2f+0x5a>
 800d686:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800d83c <__ieee754_rem_pio2f+0x254>
 800d68a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800d840 <__ieee754_rem_pio2f+0x258>
 800d68e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d692:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d696:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d69a:	edc0 6a00 	vstr	s13, [r0]
 800d69e:	e7eb      	b.n	800d678 <__ieee754_rem_pio2f+0x90>
 800d6a0:	4b68      	ldr	r3, [pc, #416]	; (800d844 <__ieee754_rem_pio2f+0x25c>)
 800d6a2:	429d      	cmp	r5, r3
 800d6a4:	dc72      	bgt.n	800d78c <__ieee754_rem_pio2f+0x1a4>
 800d6a6:	f000 fccd 	bl	800e044 <fabsf>
 800d6aa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800d848 <__ieee754_rem_pio2f+0x260>
 800d6ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d6b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d6b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d6be:	ee17 0a90 	vmov	r0, s15
 800d6c2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800d830 <__ieee754_rem_pio2f+0x248>
 800d6c6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d6ca:	281f      	cmp	r0, #31
 800d6cc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800d838 <__ieee754_rem_pio2f+0x250>
 800d6d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6d4:	eeb1 6a47 	vneg.f32	s12, s14
 800d6d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d6dc:	ee16 2a90 	vmov	r2, s13
 800d6e0:	dc1c      	bgt.n	800d71c <__ieee754_rem_pio2f+0x134>
 800d6e2:	495a      	ldr	r1, [pc, #360]	; (800d84c <__ieee754_rem_pio2f+0x264>)
 800d6e4:	1e47      	subs	r7, r0, #1
 800d6e6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800d6ea:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800d6ee:	428b      	cmp	r3, r1
 800d6f0:	d014      	beq.n	800d71c <__ieee754_rem_pio2f+0x134>
 800d6f2:	6022      	str	r2, [r4, #0]
 800d6f4:	ed94 7a00 	vldr	s14, [r4]
 800d6f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d6fc:	2e00      	cmp	r6, #0
 800d6fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d702:	ed84 0a01 	vstr	s0, [r4, #4]
 800d706:	da9c      	bge.n	800d642 <__ieee754_rem_pio2f+0x5a>
 800d708:	eeb1 7a47 	vneg.f32	s14, s14
 800d70c:	eeb1 0a40 	vneg.f32	s0, s0
 800d710:	ed84 7a00 	vstr	s14, [r4]
 800d714:	ed84 0a01 	vstr	s0, [r4, #4]
 800d718:	4240      	negs	r0, r0
 800d71a:	e792      	b.n	800d642 <__ieee754_rem_pio2f+0x5a>
 800d71c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d720:	15eb      	asrs	r3, r5, #23
 800d722:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800d726:	2d08      	cmp	r5, #8
 800d728:	dde3      	ble.n	800d6f2 <__ieee754_rem_pio2f+0x10a>
 800d72a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800d83c <__ieee754_rem_pio2f+0x254>
 800d72e:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d840 <__ieee754_rem_pio2f+0x258>
 800d732:	eef0 6a40 	vmov.f32	s13, s0
 800d736:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d73a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800d73e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800d742:	eef0 7a40 	vmov.f32	s15, s0
 800d746:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d74a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d74e:	ee15 2a90 	vmov	r2, s11
 800d752:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d756:	1a5b      	subs	r3, r3, r1
 800d758:	2b19      	cmp	r3, #25
 800d75a:	dc04      	bgt.n	800d766 <__ieee754_rem_pio2f+0x17e>
 800d75c:	edc4 5a00 	vstr	s11, [r4]
 800d760:	eeb0 0a66 	vmov.f32	s0, s13
 800d764:	e7c6      	b.n	800d6f4 <__ieee754_rem_pio2f+0x10c>
 800d766:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800d850 <__ieee754_rem_pio2f+0x268>
 800d76a:	eeb0 0a66 	vmov.f32	s0, s13
 800d76e:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d772:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d776:	eddf 6a37 	vldr	s13, [pc, #220]	; 800d854 <__ieee754_rem_pio2f+0x26c>
 800d77a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d77e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d782:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d786:	ed84 7a00 	vstr	s14, [r4]
 800d78a:	e7b3      	b.n	800d6f4 <__ieee754_rem_pio2f+0x10c>
 800d78c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d790:	db06      	blt.n	800d7a0 <__ieee754_rem_pio2f+0x1b8>
 800d792:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d796:	edc0 7a01 	vstr	s15, [r0, #4]
 800d79a:	edc0 7a00 	vstr	s15, [r0]
 800d79e:	e733      	b.n	800d608 <__ieee754_rem_pio2f+0x20>
 800d7a0:	15ea      	asrs	r2, r5, #23
 800d7a2:	3a86      	subs	r2, #134	; 0x86
 800d7a4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d7a8:	ee07 3a90 	vmov	s15, r3
 800d7ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d7b0:	eddf 6a29 	vldr	s13, [pc, #164]	; 800d858 <__ieee754_rem_pio2f+0x270>
 800d7b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d7b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d7bc:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d7c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d7c4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d7c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d7cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d7d0:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d7d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d7d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e0:	edcd 7a05 	vstr	s15, [sp, #20]
 800d7e4:	d11e      	bne.n	800d824 <__ieee754_rem_pio2f+0x23c>
 800d7e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ee:	bf14      	ite	ne
 800d7f0:	2302      	movne	r3, #2
 800d7f2:	2301      	moveq	r3, #1
 800d7f4:	4919      	ldr	r1, [pc, #100]	; (800d85c <__ieee754_rem_pio2f+0x274>)
 800d7f6:	9101      	str	r1, [sp, #4]
 800d7f8:	2102      	movs	r1, #2
 800d7fa:	9100      	str	r1, [sp, #0]
 800d7fc:	a803      	add	r0, sp, #12
 800d7fe:	4621      	mov	r1, r4
 800d800:	f000 f88e 	bl	800d920 <__kernel_rem_pio2f>
 800d804:	2e00      	cmp	r6, #0
 800d806:	f6bf af1c 	bge.w	800d642 <__ieee754_rem_pio2f+0x5a>
 800d80a:	edd4 7a00 	vldr	s15, [r4]
 800d80e:	eef1 7a67 	vneg.f32	s15, s15
 800d812:	edc4 7a00 	vstr	s15, [r4]
 800d816:	edd4 7a01 	vldr	s15, [r4, #4]
 800d81a:	eef1 7a67 	vneg.f32	s15, s15
 800d81e:	edc4 7a01 	vstr	s15, [r4, #4]
 800d822:	e779      	b.n	800d718 <__ieee754_rem_pio2f+0x130>
 800d824:	2303      	movs	r3, #3
 800d826:	e7e5      	b.n	800d7f4 <__ieee754_rem_pio2f+0x20c>
 800d828:	3f490fd8 	.word	0x3f490fd8
 800d82c:	4016cbe3 	.word	0x4016cbe3
 800d830:	3fc90f80 	.word	0x3fc90f80
 800d834:	3fc90fd0 	.word	0x3fc90fd0
 800d838:	37354443 	.word	0x37354443
 800d83c:	37354400 	.word	0x37354400
 800d840:	2e85a308 	.word	0x2e85a308
 800d844:	43490f80 	.word	0x43490f80
 800d848:	3f22f984 	.word	0x3f22f984
 800d84c:	0800e248 	.word	0x0800e248
 800d850:	2e85a300 	.word	0x2e85a300
 800d854:	248d3132 	.word	0x248d3132
 800d858:	43800000 	.word	0x43800000
 800d85c:	0800e2c8 	.word	0x0800e2c8

0800d860 <__kernel_cosf>:
 800d860:	ee10 3a10 	vmov	r3, s0
 800d864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d868:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d86c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d870:	da05      	bge.n	800d87e <__kernel_cosf+0x1e>
 800d872:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d876:	ee17 2a90 	vmov	r2, s15
 800d87a:	2a00      	cmp	r2, #0
 800d87c:	d03d      	beq.n	800d8fa <__kernel_cosf+0x9a>
 800d87e:	ee60 5a00 	vmul.f32	s11, s0, s0
 800d882:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d900 <__kernel_cosf+0xa0>
 800d886:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d904 <__kernel_cosf+0xa4>
 800d88a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800d908 <__kernel_cosf+0xa8>
 800d88e:	4a1f      	ldr	r2, [pc, #124]	; (800d90c <__kernel_cosf+0xac>)
 800d890:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d894:	4293      	cmp	r3, r2
 800d896:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800d910 <__kernel_cosf+0xb0>
 800d89a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d89e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800d914 <__kernel_cosf+0xb4>
 800d8a2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d8a6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800d918 <__kernel_cosf+0xb8>
 800d8aa:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d8ae:	eeb0 7a66 	vmov.f32	s14, s13
 800d8b2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d8b6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800d8ba:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800d8be:	ee67 6a25 	vmul.f32	s13, s14, s11
 800d8c2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800d8c6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d8ca:	dc04      	bgt.n	800d8d6 <__kernel_cosf+0x76>
 800d8cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d8d0:	ee36 0a47 	vsub.f32	s0, s12, s14
 800d8d4:	4770      	bx	lr
 800d8d6:	4a11      	ldr	r2, [pc, #68]	; (800d91c <__kernel_cosf+0xbc>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	bfda      	itte	le
 800d8dc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800d8e0:	ee06 3a90 	vmovle	s13, r3
 800d8e4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800d8e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d8ec:	ee36 0a66 	vsub.f32	s0, s12, s13
 800d8f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d8f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d8f8:	4770      	bx	lr
 800d8fa:	eeb0 0a46 	vmov.f32	s0, s12
 800d8fe:	4770      	bx	lr
 800d900:	ad47d74e 	.word	0xad47d74e
 800d904:	310f74f6 	.word	0x310f74f6
 800d908:	3d2aaaab 	.word	0x3d2aaaab
 800d90c:	3e999999 	.word	0x3e999999
 800d910:	b493f27c 	.word	0xb493f27c
 800d914:	37d00d01 	.word	0x37d00d01
 800d918:	bab60b61 	.word	0xbab60b61
 800d91c:	3f480000 	.word	0x3f480000

0800d920 <__kernel_rem_pio2f>:
 800d920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d924:	ed2d 8b04 	vpush	{d8-d9}
 800d928:	b0d9      	sub	sp, #356	; 0x164
 800d92a:	4688      	mov	r8, r1
 800d92c:	9002      	str	r0, [sp, #8]
 800d92e:	49bb      	ldr	r1, [pc, #748]	; (800dc1c <__kernel_rem_pio2f+0x2fc>)
 800d930:	9866      	ldr	r0, [sp, #408]	; 0x198
 800d932:	9301      	str	r3, [sp, #4]
 800d934:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800d938:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800d93c:	1e59      	subs	r1, r3, #1
 800d93e:	1d13      	adds	r3, r2, #4
 800d940:	db27      	blt.n	800d992 <__kernel_rem_pio2f+0x72>
 800d942:	f1b2 0b03 	subs.w	fp, r2, #3
 800d946:	bf48      	it	mi
 800d948:	f102 0b04 	addmi.w	fp, r2, #4
 800d94c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800d950:	1c45      	adds	r5, r0, #1
 800d952:	00ec      	lsls	r4, r5, #3
 800d954:	1a47      	subs	r7, r0, r1
 800d956:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800dc2c <__kernel_rem_pio2f+0x30c>
 800d95a:	9403      	str	r4, [sp, #12]
 800d95c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800d960:	eb0a 0c01 	add.w	ip, sl, r1
 800d964:	ae1c      	add	r6, sp, #112	; 0x70
 800d966:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800d96a:	2400      	movs	r4, #0
 800d96c:	4564      	cmp	r4, ip
 800d96e:	dd12      	ble.n	800d996 <__kernel_rem_pio2f+0x76>
 800d970:	9b01      	ldr	r3, [sp, #4]
 800d972:	ac1c      	add	r4, sp, #112	; 0x70
 800d974:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800d978:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800d97c:	f04f 0c00 	mov.w	ip, #0
 800d980:	45d4      	cmp	ip, sl
 800d982:	dc27      	bgt.n	800d9d4 <__kernel_rem_pio2f+0xb4>
 800d984:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800d988:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800dc2c <__kernel_rem_pio2f+0x30c>
 800d98c:	4627      	mov	r7, r4
 800d98e:	2600      	movs	r6, #0
 800d990:	e016      	b.n	800d9c0 <__kernel_rem_pio2f+0xa0>
 800d992:	2000      	movs	r0, #0
 800d994:	e7dc      	b.n	800d950 <__kernel_rem_pio2f+0x30>
 800d996:	42e7      	cmn	r7, r4
 800d998:	bf5d      	ittte	pl
 800d99a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800d99e:	ee07 3a90 	vmovpl	s15, r3
 800d9a2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d9a6:	eef0 7a47 	vmovmi.f32	s15, s14
 800d9aa:	ece6 7a01 	vstmia	r6!, {s15}
 800d9ae:	3401      	adds	r4, #1
 800d9b0:	e7dc      	b.n	800d96c <__kernel_rem_pio2f+0x4c>
 800d9b2:	ecf9 6a01 	vldmia	r9!, {s13}
 800d9b6:	ed97 7a00 	vldr	s14, [r7]
 800d9ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d9be:	3601      	adds	r6, #1
 800d9c0:	428e      	cmp	r6, r1
 800d9c2:	f1a7 0704 	sub.w	r7, r7, #4
 800d9c6:	ddf4      	ble.n	800d9b2 <__kernel_rem_pio2f+0x92>
 800d9c8:	eceb 7a01 	vstmia	fp!, {s15}
 800d9cc:	f10c 0c01 	add.w	ip, ip, #1
 800d9d0:	3404      	adds	r4, #4
 800d9d2:	e7d5      	b.n	800d980 <__kernel_rem_pio2f+0x60>
 800d9d4:	ab08      	add	r3, sp, #32
 800d9d6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800d9da:	eddf 8a93 	vldr	s17, [pc, #588]	; 800dc28 <__kernel_rem_pio2f+0x308>
 800d9de:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800dc24 <__kernel_rem_pio2f+0x304>
 800d9e2:	9304      	str	r3, [sp, #16]
 800d9e4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800d9e8:	4656      	mov	r6, sl
 800d9ea:	00b3      	lsls	r3, r6, #2
 800d9ec:	9305      	str	r3, [sp, #20]
 800d9ee:	ab58      	add	r3, sp, #352	; 0x160
 800d9f0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800d9f4:	ac08      	add	r4, sp, #32
 800d9f6:	ab44      	add	r3, sp, #272	; 0x110
 800d9f8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800d9fc:	46a4      	mov	ip, r4
 800d9fe:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800da02:	4637      	mov	r7, r6
 800da04:	2f00      	cmp	r7, #0
 800da06:	f1a0 0004 	sub.w	r0, r0, #4
 800da0a:	dc4f      	bgt.n	800daac <__kernel_rem_pio2f+0x18c>
 800da0c:	4628      	mov	r0, r5
 800da0e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800da12:	f000 fb61 	bl	800e0d8 <scalbnf>
 800da16:	eeb0 8a40 	vmov.f32	s16, s0
 800da1a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800da1e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800da22:	f000 fb17 	bl	800e054 <floorf>
 800da26:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800da2a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800da2e:	2d00      	cmp	r5, #0
 800da30:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800da34:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800da38:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800da3c:	ee17 9a90 	vmov	r9, s15
 800da40:	ee38 8a40 	vsub.f32	s16, s16, s0
 800da44:	dd44      	ble.n	800dad0 <__kernel_rem_pio2f+0x1b0>
 800da46:	f106 3cff 	add.w	ip, r6, #4294967295
 800da4a:	ab08      	add	r3, sp, #32
 800da4c:	f1c5 0e08 	rsb	lr, r5, #8
 800da50:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800da54:	fa47 f00e 	asr.w	r0, r7, lr
 800da58:	4481      	add	r9, r0
 800da5a:	fa00 f00e 	lsl.w	r0, r0, lr
 800da5e:	1a3f      	subs	r7, r7, r0
 800da60:	f1c5 0007 	rsb	r0, r5, #7
 800da64:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800da68:	4107      	asrs	r7, r0
 800da6a:	2f00      	cmp	r7, #0
 800da6c:	dd3f      	ble.n	800daee <__kernel_rem_pio2f+0x1ce>
 800da6e:	f04f 0e00 	mov.w	lr, #0
 800da72:	f109 0901 	add.w	r9, r9, #1
 800da76:	4673      	mov	r3, lr
 800da78:	4576      	cmp	r6, lr
 800da7a:	dc6b      	bgt.n	800db54 <__kernel_rem_pio2f+0x234>
 800da7c:	2d00      	cmp	r5, #0
 800da7e:	dd04      	ble.n	800da8a <__kernel_rem_pio2f+0x16a>
 800da80:	2d01      	cmp	r5, #1
 800da82:	d078      	beq.n	800db76 <__kernel_rem_pio2f+0x256>
 800da84:	2d02      	cmp	r5, #2
 800da86:	f000 8081 	beq.w	800db8c <__kernel_rem_pio2f+0x26c>
 800da8a:	2f02      	cmp	r7, #2
 800da8c:	d12f      	bne.n	800daee <__kernel_rem_pio2f+0x1ce>
 800da8e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800da92:	ee30 8a48 	vsub.f32	s16, s0, s16
 800da96:	b353      	cbz	r3, 800daee <__kernel_rem_pio2f+0x1ce>
 800da98:	4628      	mov	r0, r5
 800da9a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800da9e:	f000 fb1b 	bl	800e0d8 <scalbnf>
 800daa2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800daa6:	ee38 8a40 	vsub.f32	s16, s16, s0
 800daaa:	e020      	b.n	800daee <__kernel_rem_pio2f+0x1ce>
 800daac:	ee60 7a28 	vmul.f32	s15, s0, s17
 800dab0:	3f01      	subs	r7, #1
 800dab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800daba:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800dabe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dac2:	ecac 0a01 	vstmia	ip!, {s0}
 800dac6:	ed90 0a00 	vldr	s0, [r0]
 800daca:	ee37 0a80 	vadd.f32	s0, s15, s0
 800dace:	e799      	b.n	800da04 <__kernel_rem_pio2f+0xe4>
 800dad0:	d105      	bne.n	800dade <__kernel_rem_pio2f+0x1be>
 800dad2:	1e70      	subs	r0, r6, #1
 800dad4:	ab08      	add	r3, sp, #32
 800dad6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800dada:	11ff      	asrs	r7, r7, #7
 800dadc:	e7c5      	b.n	800da6a <__kernel_rem_pio2f+0x14a>
 800dade:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800dae2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800dae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daea:	da31      	bge.n	800db50 <__kernel_rem_pio2f+0x230>
 800daec:	2700      	movs	r7, #0
 800daee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800daf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf6:	f040 809b 	bne.w	800dc30 <__kernel_rem_pio2f+0x310>
 800dafa:	1e74      	subs	r4, r6, #1
 800dafc:	46a4      	mov	ip, r4
 800dafe:	2000      	movs	r0, #0
 800db00:	45d4      	cmp	ip, sl
 800db02:	da4a      	bge.n	800db9a <__kernel_rem_pio2f+0x27a>
 800db04:	2800      	cmp	r0, #0
 800db06:	d07a      	beq.n	800dbfe <__kernel_rem_pio2f+0x2de>
 800db08:	ab08      	add	r3, sp, #32
 800db0a:	3d08      	subs	r5, #8
 800db0c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800db10:	2b00      	cmp	r3, #0
 800db12:	f000 8081 	beq.w	800dc18 <__kernel_rem_pio2f+0x2f8>
 800db16:	4628      	mov	r0, r5
 800db18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800db1c:	00a5      	lsls	r5, r4, #2
 800db1e:	f000 fadb 	bl	800e0d8 <scalbnf>
 800db22:	aa44      	add	r2, sp, #272	; 0x110
 800db24:	1d2b      	adds	r3, r5, #4
 800db26:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800dc28 <__kernel_rem_pio2f+0x308>
 800db2a:	18d1      	adds	r1, r2, r3
 800db2c:	4622      	mov	r2, r4
 800db2e:	2a00      	cmp	r2, #0
 800db30:	f280 80ae 	bge.w	800dc90 <__kernel_rem_pio2f+0x370>
 800db34:	4622      	mov	r2, r4
 800db36:	2a00      	cmp	r2, #0
 800db38:	f2c0 80cc 	blt.w	800dcd4 <__kernel_rem_pio2f+0x3b4>
 800db3c:	a944      	add	r1, sp, #272	; 0x110
 800db3e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800db42:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800dc20 <__kernel_rem_pio2f+0x300>
 800db46:	eddf 7a39 	vldr	s15, [pc, #228]	; 800dc2c <__kernel_rem_pio2f+0x30c>
 800db4a:	2000      	movs	r0, #0
 800db4c:	1aa1      	subs	r1, r4, r2
 800db4e:	e0b6      	b.n	800dcbe <__kernel_rem_pio2f+0x39e>
 800db50:	2702      	movs	r7, #2
 800db52:	e78c      	b.n	800da6e <__kernel_rem_pio2f+0x14e>
 800db54:	6820      	ldr	r0, [r4, #0]
 800db56:	b94b      	cbnz	r3, 800db6c <__kernel_rem_pio2f+0x24c>
 800db58:	b118      	cbz	r0, 800db62 <__kernel_rem_pio2f+0x242>
 800db5a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800db5e:	6020      	str	r0, [r4, #0]
 800db60:	2001      	movs	r0, #1
 800db62:	f10e 0e01 	add.w	lr, lr, #1
 800db66:	3404      	adds	r4, #4
 800db68:	4603      	mov	r3, r0
 800db6a:	e785      	b.n	800da78 <__kernel_rem_pio2f+0x158>
 800db6c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800db70:	6020      	str	r0, [r4, #0]
 800db72:	4618      	mov	r0, r3
 800db74:	e7f5      	b.n	800db62 <__kernel_rem_pio2f+0x242>
 800db76:	1e74      	subs	r4, r6, #1
 800db78:	a808      	add	r0, sp, #32
 800db7a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800db7e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800db82:	f10d 0c20 	add.w	ip, sp, #32
 800db86:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800db8a:	e77e      	b.n	800da8a <__kernel_rem_pio2f+0x16a>
 800db8c:	1e74      	subs	r4, r6, #1
 800db8e:	a808      	add	r0, sp, #32
 800db90:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800db94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800db98:	e7f3      	b.n	800db82 <__kernel_rem_pio2f+0x262>
 800db9a:	ab08      	add	r3, sp, #32
 800db9c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800dba0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800dba4:	4318      	orrs	r0, r3
 800dba6:	e7ab      	b.n	800db00 <__kernel_rem_pio2f+0x1e0>
 800dba8:	f10c 0c01 	add.w	ip, ip, #1
 800dbac:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800dbb0:	2c00      	cmp	r4, #0
 800dbb2:	d0f9      	beq.n	800dba8 <__kernel_rem_pio2f+0x288>
 800dbb4:	9b05      	ldr	r3, [sp, #20]
 800dbb6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800dbba:	eb0d 0003 	add.w	r0, sp, r3
 800dbbe:	9b01      	ldr	r3, [sp, #4]
 800dbc0:	18f4      	adds	r4, r6, r3
 800dbc2:	ab1c      	add	r3, sp, #112	; 0x70
 800dbc4:	1c77      	adds	r7, r6, #1
 800dbc6:	384c      	subs	r0, #76	; 0x4c
 800dbc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dbcc:	4466      	add	r6, ip
 800dbce:	42be      	cmp	r6, r7
 800dbd0:	f6ff af0b 	blt.w	800d9ea <__kernel_rem_pio2f+0xca>
 800dbd4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800dbd8:	f8dd e008 	ldr.w	lr, [sp, #8]
 800dbdc:	ee07 3a90 	vmov	s15, r3
 800dbe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbe4:	f04f 0c00 	mov.w	ip, #0
 800dbe8:	ece4 7a01 	vstmia	r4!, {s15}
 800dbec:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800dc2c <__kernel_rem_pio2f+0x30c>
 800dbf0:	46a1      	mov	r9, r4
 800dbf2:	458c      	cmp	ip, r1
 800dbf4:	dd07      	ble.n	800dc06 <__kernel_rem_pio2f+0x2e6>
 800dbf6:	ece0 7a01 	vstmia	r0!, {s15}
 800dbfa:	3701      	adds	r7, #1
 800dbfc:	e7e7      	b.n	800dbce <__kernel_rem_pio2f+0x2ae>
 800dbfe:	9804      	ldr	r0, [sp, #16]
 800dc00:	f04f 0c01 	mov.w	ip, #1
 800dc04:	e7d2      	b.n	800dbac <__kernel_rem_pio2f+0x28c>
 800dc06:	ecfe 6a01 	vldmia	lr!, {s13}
 800dc0a:	ed39 7a01 	vldmdb	r9!, {s14}
 800dc0e:	f10c 0c01 	add.w	ip, ip, #1
 800dc12:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dc16:	e7ec      	b.n	800dbf2 <__kernel_rem_pio2f+0x2d2>
 800dc18:	3c01      	subs	r4, #1
 800dc1a:	e775      	b.n	800db08 <__kernel_rem_pio2f+0x1e8>
 800dc1c:	0800e60c 	.word	0x0800e60c
 800dc20:	0800e5e0 	.word	0x0800e5e0
 800dc24:	43800000 	.word	0x43800000
 800dc28:	3b800000 	.word	0x3b800000
 800dc2c:	00000000 	.word	0x00000000
 800dc30:	9b03      	ldr	r3, [sp, #12]
 800dc32:	eeb0 0a48 	vmov.f32	s0, s16
 800dc36:	1a98      	subs	r0, r3, r2
 800dc38:	f000 fa4e 	bl	800e0d8 <scalbnf>
 800dc3c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800dc24 <__kernel_rem_pio2f+0x304>
 800dc40:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800dc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc48:	db19      	blt.n	800dc7e <__kernel_rem_pio2f+0x35e>
 800dc4a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800dc28 <__kernel_rem_pio2f+0x308>
 800dc4e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800dc52:	aa08      	add	r2, sp, #32
 800dc54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc58:	1c74      	adds	r4, r6, #1
 800dc5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc5e:	3508      	adds	r5, #8
 800dc60:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800dc64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc68:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dc6c:	ee10 3a10 	vmov	r3, s0
 800dc70:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800dc74:	ee17 3a90 	vmov	r3, s15
 800dc78:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800dc7c:	e74b      	b.n	800db16 <__kernel_rem_pio2f+0x1f6>
 800dc7e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dc82:	aa08      	add	r2, sp, #32
 800dc84:	ee10 3a10 	vmov	r3, s0
 800dc88:	4634      	mov	r4, r6
 800dc8a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800dc8e:	e742      	b.n	800db16 <__kernel_rem_pio2f+0x1f6>
 800dc90:	a808      	add	r0, sp, #32
 800dc92:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800dc96:	9001      	str	r0, [sp, #4]
 800dc98:	ee07 0a90 	vmov	s15, r0
 800dc9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dca0:	3a01      	subs	r2, #1
 800dca2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800dca6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800dcaa:	ed61 7a01 	vstmdb	r1!, {s15}
 800dcae:	e73e      	b.n	800db2e <__kernel_rem_pio2f+0x20e>
 800dcb0:	ecfc 6a01 	vldmia	ip!, {s13}
 800dcb4:	ecb6 7a01 	vldmia	r6!, {s14}
 800dcb8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dcbc:	3001      	adds	r0, #1
 800dcbe:	4550      	cmp	r0, sl
 800dcc0:	dc01      	bgt.n	800dcc6 <__kernel_rem_pio2f+0x3a6>
 800dcc2:	4288      	cmp	r0, r1
 800dcc4:	ddf4      	ble.n	800dcb0 <__kernel_rem_pio2f+0x390>
 800dcc6:	a858      	add	r0, sp, #352	; 0x160
 800dcc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dccc:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800dcd0:	3a01      	subs	r2, #1
 800dcd2:	e730      	b.n	800db36 <__kernel_rem_pio2f+0x216>
 800dcd4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800dcd6:	2a02      	cmp	r2, #2
 800dcd8:	dc09      	bgt.n	800dcee <__kernel_rem_pio2f+0x3ce>
 800dcda:	2a00      	cmp	r2, #0
 800dcdc:	dc2a      	bgt.n	800dd34 <__kernel_rem_pio2f+0x414>
 800dcde:	d043      	beq.n	800dd68 <__kernel_rem_pio2f+0x448>
 800dce0:	f009 0007 	and.w	r0, r9, #7
 800dce4:	b059      	add	sp, #356	; 0x164
 800dce6:	ecbd 8b04 	vpop	{d8-d9}
 800dcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcee:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800dcf0:	2b03      	cmp	r3, #3
 800dcf2:	d1f5      	bne.n	800dce0 <__kernel_rem_pio2f+0x3c0>
 800dcf4:	ab30      	add	r3, sp, #192	; 0xc0
 800dcf6:	442b      	add	r3, r5
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	f1a1 0104 	sub.w	r1, r1, #4
 800dd04:	dc51      	bgt.n	800ddaa <__kernel_rem_pio2f+0x48a>
 800dd06:	4621      	mov	r1, r4
 800dd08:	2901      	cmp	r1, #1
 800dd0a:	f1a2 0204 	sub.w	r2, r2, #4
 800dd0e:	dc5c      	bgt.n	800ddca <__kernel_rem_pio2f+0x4aa>
 800dd10:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800dc2c <__kernel_rem_pio2f+0x30c>
 800dd14:	3304      	adds	r3, #4
 800dd16:	2c01      	cmp	r4, #1
 800dd18:	dc67      	bgt.n	800ddea <__kernel_rem_pio2f+0x4ca>
 800dd1a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800dd1e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800dd22:	2f00      	cmp	r7, #0
 800dd24:	d167      	bne.n	800ddf6 <__kernel_rem_pio2f+0x4d6>
 800dd26:	edc8 6a00 	vstr	s13, [r8]
 800dd2a:	ed88 7a01 	vstr	s14, [r8, #4]
 800dd2e:	edc8 7a02 	vstr	s15, [r8, #8]
 800dd32:	e7d5      	b.n	800dce0 <__kernel_rem_pio2f+0x3c0>
 800dd34:	aa30      	add	r2, sp, #192	; 0xc0
 800dd36:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800dc2c <__kernel_rem_pio2f+0x30c>
 800dd3a:	4413      	add	r3, r2
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	2a00      	cmp	r2, #0
 800dd40:	da24      	bge.n	800dd8c <__kernel_rem_pio2f+0x46c>
 800dd42:	b34f      	cbz	r7, 800dd98 <__kernel_rem_pio2f+0x478>
 800dd44:	eef1 7a47 	vneg.f32	s15, s14
 800dd48:	edc8 7a00 	vstr	s15, [r8]
 800dd4c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800dd50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dd54:	aa31      	add	r2, sp, #196	; 0xc4
 800dd56:	2301      	movs	r3, #1
 800dd58:	429c      	cmp	r4, r3
 800dd5a:	da20      	bge.n	800dd9e <__kernel_rem_pio2f+0x47e>
 800dd5c:	b10f      	cbz	r7, 800dd62 <__kernel_rem_pio2f+0x442>
 800dd5e:	eef1 7a67 	vneg.f32	s15, s15
 800dd62:	edc8 7a01 	vstr	s15, [r8, #4]
 800dd66:	e7bb      	b.n	800dce0 <__kernel_rem_pio2f+0x3c0>
 800dd68:	aa30      	add	r2, sp, #192	; 0xc0
 800dd6a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800dc2c <__kernel_rem_pio2f+0x30c>
 800dd6e:	4413      	add	r3, r2
 800dd70:	2c00      	cmp	r4, #0
 800dd72:	da05      	bge.n	800dd80 <__kernel_rem_pio2f+0x460>
 800dd74:	b10f      	cbz	r7, 800dd7a <__kernel_rem_pio2f+0x45a>
 800dd76:	eef1 7a67 	vneg.f32	s15, s15
 800dd7a:	edc8 7a00 	vstr	s15, [r8]
 800dd7e:	e7af      	b.n	800dce0 <__kernel_rem_pio2f+0x3c0>
 800dd80:	ed33 7a01 	vldmdb	r3!, {s14}
 800dd84:	3c01      	subs	r4, #1
 800dd86:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dd8a:	e7f1      	b.n	800dd70 <__kernel_rem_pio2f+0x450>
 800dd8c:	ed73 7a01 	vldmdb	r3!, {s15}
 800dd90:	3a01      	subs	r2, #1
 800dd92:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dd96:	e7d2      	b.n	800dd3e <__kernel_rem_pio2f+0x41e>
 800dd98:	eef0 7a47 	vmov.f32	s15, s14
 800dd9c:	e7d4      	b.n	800dd48 <__kernel_rem_pio2f+0x428>
 800dd9e:	ecb2 7a01 	vldmia	r2!, {s14}
 800dda2:	3301      	adds	r3, #1
 800dda4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dda8:	e7d6      	b.n	800dd58 <__kernel_rem_pio2f+0x438>
 800ddaa:	edd1 7a00 	vldr	s15, [r1]
 800ddae:	edd1 6a01 	vldr	s13, [r1, #4]
 800ddb2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ddb6:	3801      	subs	r0, #1
 800ddb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ddbc:	ed81 7a00 	vstr	s14, [r1]
 800ddc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ddc4:	edc1 7a01 	vstr	s15, [r1, #4]
 800ddc8:	e799      	b.n	800dcfe <__kernel_rem_pio2f+0x3de>
 800ddca:	edd2 7a00 	vldr	s15, [r2]
 800ddce:	edd2 6a01 	vldr	s13, [r2, #4]
 800ddd2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ddd6:	3901      	subs	r1, #1
 800ddd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dddc:	ed82 7a00 	vstr	s14, [r2]
 800dde0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dde4:	edc2 7a01 	vstr	s15, [r2, #4]
 800dde8:	e78e      	b.n	800dd08 <__kernel_rem_pio2f+0x3e8>
 800ddea:	ed33 7a01 	vldmdb	r3!, {s14}
 800ddee:	3c01      	subs	r4, #1
 800ddf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ddf4:	e78f      	b.n	800dd16 <__kernel_rem_pio2f+0x3f6>
 800ddf6:	eef1 6a66 	vneg.f32	s13, s13
 800ddfa:	eeb1 7a47 	vneg.f32	s14, s14
 800ddfe:	edc8 6a00 	vstr	s13, [r8]
 800de02:	ed88 7a01 	vstr	s14, [r8, #4]
 800de06:	eef1 7a67 	vneg.f32	s15, s15
 800de0a:	e790      	b.n	800dd2e <__kernel_rem_pio2f+0x40e>

0800de0c <__kernel_sinf>:
 800de0c:	ee10 3a10 	vmov	r3, s0
 800de10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de14:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800de18:	da04      	bge.n	800de24 <__kernel_sinf+0x18>
 800de1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800de1e:	ee17 3a90 	vmov	r3, s15
 800de22:	b35b      	cbz	r3, 800de7c <__kernel_sinf+0x70>
 800de24:	ee20 7a00 	vmul.f32	s14, s0, s0
 800de28:	eddf 7a15 	vldr	s15, [pc, #84]	; 800de80 <__kernel_sinf+0x74>
 800de2c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800de84 <__kernel_sinf+0x78>
 800de30:	eea7 6a27 	vfma.f32	s12, s14, s15
 800de34:	eddf 7a14 	vldr	s15, [pc, #80]	; 800de88 <__kernel_sinf+0x7c>
 800de38:	eee6 7a07 	vfma.f32	s15, s12, s14
 800de3c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800de8c <__kernel_sinf+0x80>
 800de40:	eea7 6a87 	vfma.f32	s12, s15, s14
 800de44:	eddf 7a12 	vldr	s15, [pc, #72]	; 800de90 <__kernel_sinf+0x84>
 800de48:	ee60 6a07 	vmul.f32	s13, s0, s14
 800de4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800de50:	b930      	cbnz	r0, 800de60 <__kernel_sinf+0x54>
 800de52:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800de94 <__kernel_sinf+0x88>
 800de56:	eea7 6a27 	vfma.f32	s12, s14, s15
 800de5a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800de5e:	4770      	bx	lr
 800de60:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800de64:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800de68:	eee0 7a86 	vfma.f32	s15, s1, s12
 800de6c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800de70:	eddf 7a09 	vldr	s15, [pc, #36]	; 800de98 <__kernel_sinf+0x8c>
 800de74:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800de78:	ee30 0a60 	vsub.f32	s0, s0, s1
 800de7c:	4770      	bx	lr
 800de7e:	bf00      	nop
 800de80:	2f2ec9d3 	.word	0x2f2ec9d3
 800de84:	b2d72f34 	.word	0xb2d72f34
 800de88:	3638ef1b 	.word	0x3638ef1b
 800de8c:	b9500d01 	.word	0xb9500d01
 800de90:	3c088889 	.word	0x3c088889
 800de94:	be2aaaab 	.word	0xbe2aaaab
 800de98:	3e2aaaab 	.word	0x3e2aaaab

0800de9c <with_errno>:
 800de9c:	b570      	push	{r4, r5, r6, lr}
 800de9e:	4604      	mov	r4, r0
 800dea0:	460d      	mov	r5, r1
 800dea2:	4616      	mov	r6, r2
 800dea4:	f7fe f9f2 	bl	800c28c <__errno>
 800dea8:	4629      	mov	r1, r5
 800deaa:	6006      	str	r6, [r0, #0]
 800deac:	4620      	mov	r0, r4
 800deae:	bd70      	pop	{r4, r5, r6, pc}

0800deb0 <xflow>:
 800deb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deb2:	4614      	mov	r4, r2
 800deb4:	461d      	mov	r5, r3
 800deb6:	b108      	cbz	r0, 800debc <xflow+0xc>
 800deb8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800debc:	e9cd 2300 	strd	r2, r3, [sp]
 800dec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dec4:	4620      	mov	r0, r4
 800dec6:	4629      	mov	r1, r5
 800dec8:	f7f2 fb42 	bl	8000550 <__aeabi_dmul>
 800decc:	2222      	movs	r2, #34	; 0x22
 800dece:	b003      	add	sp, #12
 800ded0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ded4:	f7ff bfe2 	b.w	800de9c <with_errno>

0800ded8 <__math_uflow>:
 800ded8:	b508      	push	{r3, lr}
 800deda:	2200      	movs	r2, #0
 800dedc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dee0:	f7ff ffe6 	bl	800deb0 <xflow>
 800dee4:	ec41 0b10 	vmov	d0, r0, r1
 800dee8:	bd08      	pop	{r3, pc}

0800deea <__math_oflow>:
 800deea:	b508      	push	{r3, lr}
 800deec:	2200      	movs	r2, #0
 800deee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800def2:	f7ff ffdd 	bl	800deb0 <xflow>
 800def6:	ec41 0b10 	vmov	d0, r0, r1
 800defa:	bd08      	pop	{r3, pc}

0800defc <fabs>:
 800defc:	ec51 0b10 	vmov	r0, r1, d0
 800df00:	ee10 2a10 	vmov	r2, s0
 800df04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df08:	ec43 2b10 	vmov	d0, r2, r3
 800df0c:	4770      	bx	lr

0800df0e <finite>:
 800df0e:	b082      	sub	sp, #8
 800df10:	ed8d 0b00 	vstr	d0, [sp]
 800df14:	9801      	ldr	r0, [sp, #4]
 800df16:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800df1a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800df1e:	0fc0      	lsrs	r0, r0, #31
 800df20:	b002      	add	sp, #8
 800df22:	4770      	bx	lr
 800df24:	0000      	movs	r0, r0
	...

0800df28 <nan>:
 800df28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800df30 <nan+0x8>
 800df2c:	4770      	bx	lr
 800df2e:	bf00      	nop
 800df30:	00000000 	.word	0x00000000
 800df34:	7ff80000 	.word	0x7ff80000

0800df38 <scalbn>:
 800df38:	b570      	push	{r4, r5, r6, lr}
 800df3a:	ec55 4b10 	vmov	r4, r5, d0
 800df3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800df42:	4606      	mov	r6, r0
 800df44:	462b      	mov	r3, r5
 800df46:	b99a      	cbnz	r2, 800df70 <scalbn+0x38>
 800df48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800df4c:	4323      	orrs	r3, r4
 800df4e:	d036      	beq.n	800dfbe <scalbn+0x86>
 800df50:	4b39      	ldr	r3, [pc, #228]	; (800e038 <scalbn+0x100>)
 800df52:	4629      	mov	r1, r5
 800df54:	ee10 0a10 	vmov	r0, s0
 800df58:	2200      	movs	r2, #0
 800df5a:	f7f2 faf9 	bl	8000550 <__aeabi_dmul>
 800df5e:	4b37      	ldr	r3, [pc, #220]	; (800e03c <scalbn+0x104>)
 800df60:	429e      	cmp	r6, r3
 800df62:	4604      	mov	r4, r0
 800df64:	460d      	mov	r5, r1
 800df66:	da10      	bge.n	800df8a <scalbn+0x52>
 800df68:	a32b      	add	r3, pc, #172	; (adr r3, 800e018 <scalbn+0xe0>)
 800df6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6e:	e03a      	b.n	800dfe6 <scalbn+0xae>
 800df70:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800df74:	428a      	cmp	r2, r1
 800df76:	d10c      	bne.n	800df92 <scalbn+0x5a>
 800df78:	ee10 2a10 	vmov	r2, s0
 800df7c:	4620      	mov	r0, r4
 800df7e:	4629      	mov	r1, r5
 800df80:	f7f2 f930 	bl	80001e4 <__adddf3>
 800df84:	4604      	mov	r4, r0
 800df86:	460d      	mov	r5, r1
 800df88:	e019      	b.n	800dfbe <scalbn+0x86>
 800df8a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800df8e:	460b      	mov	r3, r1
 800df90:	3a36      	subs	r2, #54	; 0x36
 800df92:	4432      	add	r2, r6
 800df94:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800df98:	428a      	cmp	r2, r1
 800df9a:	dd08      	ble.n	800dfae <scalbn+0x76>
 800df9c:	2d00      	cmp	r5, #0
 800df9e:	a120      	add	r1, pc, #128	; (adr r1, 800e020 <scalbn+0xe8>)
 800dfa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfa4:	da1c      	bge.n	800dfe0 <scalbn+0xa8>
 800dfa6:	a120      	add	r1, pc, #128	; (adr r1, 800e028 <scalbn+0xf0>)
 800dfa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfac:	e018      	b.n	800dfe0 <scalbn+0xa8>
 800dfae:	2a00      	cmp	r2, #0
 800dfb0:	dd08      	ble.n	800dfc4 <scalbn+0x8c>
 800dfb2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dfb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dfba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dfbe:	ec45 4b10 	vmov	d0, r4, r5
 800dfc2:	bd70      	pop	{r4, r5, r6, pc}
 800dfc4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dfc8:	da19      	bge.n	800dffe <scalbn+0xc6>
 800dfca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dfce:	429e      	cmp	r6, r3
 800dfd0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800dfd4:	dd0a      	ble.n	800dfec <scalbn+0xb4>
 800dfd6:	a112      	add	r1, pc, #72	; (adr r1, 800e020 <scalbn+0xe8>)
 800dfd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d1e2      	bne.n	800dfa6 <scalbn+0x6e>
 800dfe0:	a30f      	add	r3, pc, #60	; (adr r3, 800e020 <scalbn+0xe8>)
 800dfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe6:	f7f2 fab3 	bl	8000550 <__aeabi_dmul>
 800dfea:	e7cb      	b.n	800df84 <scalbn+0x4c>
 800dfec:	a10a      	add	r1, pc, #40	; (adr r1, 800e018 <scalbn+0xe0>)
 800dfee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d0b8      	beq.n	800df68 <scalbn+0x30>
 800dff6:	a10e      	add	r1, pc, #56	; (adr r1, 800e030 <scalbn+0xf8>)
 800dff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dffc:	e7b4      	b.n	800df68 <scalbn+0x30>
 800dffe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e002:	3236      	adds	r2, #54	; 0x36
 800e004:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e008:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e00c:	4620      	mov	r0, r4
 800e00e:	4b0c      	ldr	r3, [pc, #48]	; (800e040 <scalbn+0x108>)
 800e010:	2200      	movs	r2, #0
 800e012:	e7e8      	b.n	800dfe6 <scalbn+0xae>
 800e014:	f3af 8000 	nop.w
 800e018:	c2f8f359 	.word	0xc2f8f359
 800e01c:	01a56e1f 	.word	0x01a56e1f
 800e020:	8800759c 	.word	0x8800759c
 800e024:	7e37e43c 	.word	0x7e37e43c
 800e028:	8800759c 	.word	0x8800759c
 800e02c:	fe37e43c 	.word	0xfe37e43c
 800e030:	c2f8f359 	.word	0xc2f8f359
 800e034:	81a56e1f 	.word	0x81a56e1f
 800e038:	43500000 	.word	0x43500000
 800e03c:	ffff3cb0 	.word	0xffff3cb0
 800e040:	3c900000 	.word	0x3c900000

0800e044 <fabsf>:
 800e044:	ee10 3a10 	vmov	r3, s0
 800e048:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e04c:	ee00 3a10 	vmov	s0, r3
 800e050:	4770      	bx	lr
	...

0800e054 <floorf>:
 800e054:	ee10 3a10 	vmov	r3, s0
 800e058:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e05c:	3a7f      	subs	r2, #127	; 0x7f
 800e05e:	2a16      	cmp	r2, #22
 800e060:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e064:	dc2a      	bgt.n	800e0bc <floorf+0x68>
 800e066:	2a00      	cmp	r2, #0
 800e068:	da11      	bge.n	800e08e <floorf+0x3a>
 800e06a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800e0cc <floorf+0x78>
 800e06e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e072:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e07a:	dd05      	ble.n	800e088 <floorf+0x34>
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	da23      	bge.n	800e0c8 <floorf+0x74>
 800e080:	4a13      	ldr	r2, [pc, #76]	; (800e0d0 <floorf+0x7c>)
 800e082:	2900      	cmp	r1, #0
 800e084:	bf18      	it	ne
 800e086:	4613      	movne	r3, r2
 800e088:	ee00 3a10 	vmov	s0, r3
 800e08c:	4770      	bx	lr
 800e08e:	4911      	ldr	r1, [pc, #68]	; (800e0d4 <floorf+0x80>)
 800e090:	4111      	asrs	r1, r2
 800e092:	420b      	tst	r3, r1
 800e094:	d0fa      	beq.n	800e08c <floorf+0x38>
 800e096:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e0cc <floorf+0x78>
 800e09a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e09e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0a6:	ddef      	ble.n	800e088 <floorf+0x34>
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	bfbe      	ittt	lt
 800e0ac:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800e0b0:	fa40 f202 	asrlt.w	r2, r0, r2
 800e0b4:	189b      	addlt	r3, r3, r2
 800e0b6:	ea23 0301 	bic.w	r3, r3, r1
 800e0ba:	e7e5      	b.n	800e088 <floorf+0x34>
 800e0bc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e0c0:	d3e4      	bcc.n	800e08c <floorf+0x38>
 800e0c2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e0c6:	4770      	bx	lr
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	e7dd      	b.n	800e088 <floorf+0x34>
 800e0cc:	7149f2ca 	.word	0x7149f2ca
 800e0d0:	bf800000 	.word	0xbf800000
 800e0d4:	007fffff 	.word	0x007fffff

0800e0d8 <scalbnf>:
 800e0d8:	ee10 3a10 	vmov	r3, s0
 800e0dc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e0e0:	d025      	beq.n	800e12e <scalbnf+0x56>
 800e0e2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e0e6:	d302      	bcc.n	800e0ee <scalbnf+0x16>
 800e0e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e0ec:	4770      	bx	lr
 800e0ee:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e0f2:	d122      	bne.n	800e13a <scalbnf+0x62>
 800e0f4:	4b2a      	ldr	r3, [pc, #168]	; (800e1a0 <scalbnf+0xc8>)
 800e0f6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e1a4 <scalbnf+0xcc>
 800e0fa:	4298      	cmp	r0, r3
 800e0fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e100:	db16      	blt.n	800e130 <scalbnf+0x58>
 800e102:	ee10 3a10 	vmov	r3, s0
 800e106:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e10a:	3a19      	subs	r2, #25
 800e10c:	4402      	add	r2, r0
 800e10e:	2afe      	cmp	r2, #254	; 0xfe
 800e110:	dd15      	ble.n	800e13e <scalbnf+0x66>
 800e112:	ee10 3a10 	vmov	r3, s0
 800e116:	eddf 7a24 	vldr	s15, [pc, #144]	; 800e1a8 <scalbnf+0xd0>
 800e11a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e1ac <scalbnf+0xd4>
 800e11e:	2b00      	cmp	r3, #0
 800e120:	eeb0 7a67 	vmov.f32	s14, s15
 800e124:	bfb8      	it	lt
 800e126:	eef0 7a66 	vmovlt.f32	s15, s13
 800e12a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800e12e:	4770      	bx	lr
 800e130:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e1b0 <scalbnf+0xd8>
 800e134:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e138:	4770      	bx	lr
 800e13a:	0dd2      	lsrs	r2, r2, #23
 800e13c:	e7e6      	b.n	800e10c <scalbnf+0x34>
 800e13e:	2a00      	cmp	r2, #0
 800e140:	dd06      	ble.n	800e150 <scalbnf+0x78>
 800e142:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e146:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e14a:	ee00 3a10 	vmov	s0, r3
 800e14e:	4770      	bx	lr
 800e150:	f112 0f16 	cmn.w	r2, #22
 800e154:	da1a      	bge.n	800e18c <scalbnf+0xb4>
 800e156:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e15a:	4298      	cmp	r0, r3
 800e15c:	ee10 3a10 	vmov	r3, s0
 800e160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e164:	dd0a      	ble.n	800e17c <scalbnf+0xa4>
 800e166:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e1a8 <scalbnf+0xd0>
 800e16a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e1ac <scalbnf+0xd4>
 800e16e:	eef0 7a40 	vmov.f32	s15, s0
 800e172:	2b00      	cmp	r3, #0
 800e174:	bf18      	it	ne
 800e176:	eeb0 0a47 	vmovne.f32	s0, s14
 800e17a:	e7db      	b.n	800e134 <scalbnf+0x5c>
 800e17c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800e1b0 <scalbnf+0xd8>
 800e180:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e1b4 <scalbnf+0xdc>
 800e184:	eef0 7a40 	vmov.f32	s15, s0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	e7f3      	b.n	800e174 <scalbnf+0x9c>
 800e18c:	3219      	adds	r2, #25
 800e18e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e192:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e196:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e1b8 <scalbnf+0xe0>
 800e19a:	ee07 3a10 	vmov	s14, r3
 800e19e:	e7c4      	b.n	800e12a <scalbnf+0x52>
 800e1a0:	ffff3cb0 	.word	0xffff3cb0
 800e1a4:	4c000000 	.word	0x4c000000
 800e1a8:	7149f2ca 	.word	0x7149f2ca
 800e1ac:	f149f2ca 	.word	0xf149f2ca
 800e1b0:	0da24260 	.word	0x0da24260
 800e1b4:	8da24260 	.word	0x8da24260
 800e1b8:	33000000 	.word	0x33000000

0800e1bc <_init>:
 800e1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1be:	bf00      	nop
 800e1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1c2:	bc08      	pop	{r3}
 800e1c4:	469e      	mov	lr, r3
 800e1c6:	4770      	bx	lr

0800e1c8 <_fini>:
 800e1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ca:	bf00      	nop
 800e1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ce:	bc08      	pop	{r3}
 800e1d0:	469e      	mov	lr, r3
 800e1d2:	4770      	bx	lr
