
RoboticArmControlSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc64  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800de00  0800de00  0001de00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e240  0800e240  000202f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e240  0800e240  0001e240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e248  0800e248  000202f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e248  0800e248  0001e248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e24c  0800e24c  0001e24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  0800e250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c68  200002f8  0800e548  000202f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f60  0800e548  00020f60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154d2  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002524  00000000  00000000  000357fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00037d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  00038ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ea1  00000000  00000000  00039fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c12  00000000  00000000  00051e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d4e4  00000000  00000000  00066a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103f67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053bc  00000000  00000000  00103fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002f8 	.word	0x200002f8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800dde4 	.word	0x0800dde4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002fc 	.word	0x200002fc
 80001d4:	0800dde4 	.word	0x0800dde4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <modbus_1t5_Timeout+0x1c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	751a      	strb	r2, [r3, #20]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	20000314 	.word	0x20000314

08000ec4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <modbus_3t5_Timeout+0x1c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	755a      	strb	r2, [r3, #21]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	20000314 	.word	0x20000314

08000ee4 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000efe:	1c59      	adds	r1, r3, #1
 8000f00:	b289      	uxth	r1, r1
 8000f02:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000f06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f0a:	d210      	bcs.n	8000f2e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68d8      	ldr	r0, [r3, #12]
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f1e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f22:	4413      	add	r3, r2
 8000f24:	3302      	adds	r3, #2
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f009 fe2b 	bl	800ab84 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000314 	.word	0x20000314

08000f48 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f52:	4a24      	ldr	r2, [pc, #144]	; (8000fe4 <Modbus_init+0x9c>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <Modbus_init+0x9c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <Modbus_init+0x9c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <Modbus_init+0xa0>)
 8000f68:	2114      	movs	r1, #20
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f008 ffbc 	bl	8009ee8 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <Modbus_init+0x9c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <Modbus_init+0xa4>)
 8000f78:	210e      	movs	r1, #14
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f008 ffb4 	bl	8009ee8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <Modbus_init+0x9c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <Modbus_init+0xa8>)
 8000f88:	2103      	movs	r1, #3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f009 fd52 	bl	800aa34 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <Modbus_init+0x9c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68d8      	ldr	r0, [r3, #12]
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <Modbus_init+0x9c>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <Modbus_init+0x9c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000fa2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	2201      	movs	r2, #1
 8000fac:	4619      	mov	r1, r3
 8000fae:	f009 fde9 	bl	800ab84 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <Modbus_init+0x9c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d10c      	bne.n	8000fdc <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <Modbus_init+0x9c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f008 f841 	bl	8009050 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <Modbus_init+0x9c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f008 fa76 	bl	80094c8 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000314 	.word	0x20000314
 8000fe8:	08000ea5 	.word	0x08000ea5
 8000fec:	08000ec5 	.word	0x08000ec5
 8000ff0:	08000ee5 	.word	0x08000ee5

08000ff4 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001000:	23ff      	movs	r3, #255	; 0xff
 8001002:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001004:	23ff      	movs	r3, #255	; 0xff
 8001006:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001008:	e013      	b.n	8001032 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	4053      	eors	r3, r2
 8001016:	b2db      	uxtb	r3, r3
 8001018:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <CRC16+0x64>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4413      	add	r3, r2
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	4053      	eors	r3, r2
 8001026:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001028:	4a0c      	ldr	r2, [pc, #48]	; (800105c <CRC16+0x68>)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001032:	883b      	ldrh	r3, [r7, #0]
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	803a      	strh	r2, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e6      	bne.n	800100a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20000100 	.word	0x20000100
 800105c:	20000000 	.word	0x20000000

08001060 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001066:	4b81      	ldr	r3, [pc, #516]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	7e1b      	ldrb	r3, [r3, #24]
 800106c:	3b01      	subs	r3, #1
 800106e:	2b03      	cmp	r3, #3
 8001070:	d80a      	bhi.n	8001088 <Modbus_Protocal_Worker+0x28>
 8001072:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <Modbus_Protocal_Worker+0x18>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	08001093 	.word	0x08001093
 800107c:	08001233 	.word	0x08001233
 8001080:	0800111f 	.word	0x0800111f
 8001084:	08001145 	.word	0x08001145
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001088:	4b78      	ldr	r3, [pc, #480]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2201      	movs	r2, #1
 800108e:	761a      	strb	r2, [r3, #24]
		break;
 8001090:	e0e8      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001092:	4b76      	ldr	r3, [pc, #472]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800109e:	f000 f9dd 	bl	800145c <Modbus_Emission>
 80010a2:	e01c      	b.n	80010de <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80010a4:	4b71      	ldr	r3, [pc, #452]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	7d9b      	ldrb	r3, [r3, #22]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d017      	beq.n	80010de <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80010ae:	4b6f      	ldr	r3, [pc, #444]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80010b6:	4b6d      	ldr	r3, [pc, #436]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80010be:	4b6b      	ldr	r3, [pc, #428]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b68      	ldr	r3, [pc, #416]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 0201 	orr.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010d6:	4b65      	ldr	r3, [pc, #404]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2203      	movs	r2, #3
 80010dc:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010de:	4b63      	ldr	r3, [pc, #396]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b20      	cmp	r3, #32
 80010ec:	f040 80b3 	bne.w	8001256 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80010f0:	4b5e      	ldr	r3, [pc, #376]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010fa:	4b5c      	ldr	r3, [pc, #368]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68d8      	ldr	r0, [r3, #12]
 8001100:	4b5a      	ldr	r3, [pc, #360]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b59      	ldr	r3, [pc, #356]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800110c:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001110:	4413      	add	r3, r2
 8001112:	3302      	adds	r3, #2
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	f009 fd34 	bl	800ab84 <HAL_UART_Receive_IT>
		}
		break;
 800111c:	e09b      	b.n	8001256 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800111e:	4b53      	ldr	r3, [pc, #332]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	7d1b      	ldrb	r3, [r3, #20]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 8098 	beq.w	800125a <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800112a:	4b50      	ldr	r3, [pc, #320]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001132:	4b4e      	ldr	r3, [pc, #312]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	22fe      	movs	r2, #254	; 0xfe
 8001138:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800113a:	4b4c      	ldr	r3, [pc, #304]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2204      	movs	r2, #4
 8001140:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001142:	e08a      	b.n	800125a <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001144:	4b49      	ldr	r3, [pc, #292]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	7d9b      	ldrb	r3, [r3, #22]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d009      	beq.n	8001162 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d103      	bne.n	8001162 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800115a:	4b44      	ldr	r3, [pc, #272]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	22ff      	movs	r2, #255	; 0xff
 8001160:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001162:	4b42      	ldr	r3, [pc, #264]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800116a:	f113 0f02 	cmn.w	r3, #2
 800116e:	d150      	bne.n	8001212 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001170:	4b3e      	ldr	r3, [pc, #248]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2200      	movs	r2, #0
 8001176:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001178:	4b3c      	ldr	r3, [pc, #240]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001180:	4b3a      	ldr	r3, [pc, #232]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001188:	3b02      	subs	r3, #2
 800118a:	4619      	mov	r1, r3
 800118c:	4610      	mov	r0, r2
 800118e:	f7ff ff31 	bl	8000ff4 <CRC16>
 8001192:	4603      	mov	r3, r0
 8001194:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001196:	793a      	ldrb	r2, [r7, #4]
 8001198:	4b34      	ldr	r3, [pc, #208]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800119a:	6819      	ldr	r1, [r3, #0]
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011a4:	3b02      	subs	r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d10c      	bne.n	80011ca <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80011b0:	797a      	ldrb	r2, [r7, #5]
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011b4:	6819      	ldr	r1, [r3, #0]
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011be:	3b01      	subs	r3, #1
 80011c0:	440b      	add	r3, r1
 80011c2:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d004      	beq.n	80011d4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	22ff      	movs	r2, #255	; 0xff
 80011d0:	75da      	strb	r2, [r3, #23]
				break;
 80011d2:	e047      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d113      	bne.n	800120e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80011f6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001200:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001202:	461a      	mov	r2, r3
 8001204:	f00a fe80 	bl	800bf08 <memcpy>

			//execute command
			Modbus_frame_response();
 8001208:	f000 f910 	bl	800142c <Modbus_frame_response>
 800120c:	e001      	b.n	8001212 <Modbus_Protocal_Worker+0x1b2>
				break;
 800120e:	bf00      	nop
					}
		break;


	}
}
 8001210:	e028      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	7d5b      	ldrb	r3, [r3, #21]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2201      	movs	r2, #1
 8001222:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	4618      	mov	r0, r3
 800122c:	f009 fd58 	bl	800ace0 <HAL_UART_AbortReceive>
		break;
 8001230:	e015      	b.n	800125e <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b20      	cmp	r3, #32
 8001240:	d10f      	bne.n	8001262 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	761a      	strb	r2, [r3, #24]
		break;
 8001254:	e005      	b.n	8001262 <Modbus_Protocal_Worker+0x202>
		break;
 8001256:	bf00      	nop
 8001258:	e004      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 800125a:	bf00      	nop
 800125c:	e002      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 800125e:	bf00      	nop
 8001260:	e000      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 8001262:	bf00      	nop
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000314 	.word	0x20000314

08001270 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <modbusWrite1Register+0x80>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	7e9b      	ldrb	r3, [r3, #26]
 800127c:	b29b      	uxth	r3, r3
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <modbusWrite1Register+0x80>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7edb      	ldrb	r3, [r3, #27]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4413      	add	r3, r2
 800128c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800128e:	88fa      	ldrh	r2, [r7, #6]
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <modbusWrite1Register+0x80>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	429a      	cmp	r2, r3
 8001298:	d903      	bls.n	80012a2 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800129a:	2002      	movs	r0, #2
 800129c:	f000 f8a4 	bl	80013e8 <ModbusErrorReply>
			 return;
 80012a0:	e023      	b.n	80012ea <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <modbusWrite1Register+0x80>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <modbusWrite1Register+0x80>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	440b      	add	r3, r1
 80012b2:	7f12      	ldrb	r2, [r2, #28]
 80012b4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <modbusWrite1Register+0x80>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <modbusWrite1Register+0x80>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6859      	ldr	r1, [r3, #4]
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	440b      	add	r3, r1
 80012c6:	7f52      	ldrb	r2, [r2, #29]
 80012c8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <modbusWrite1Register+0x80>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <modbusWrite1Register+0x80>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 80012d8:	2208      	movs	r2, #8
 80012da:	4619      	mov	r1, r3
 80012dc:	f00a fe14 	bl	800bf08 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <modbusWrite1Register+0x80>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2205      	movs	r2, #5
 80012e6:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000314 	.word	0x20000314

080012f4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <modbusRead1Register+0xf0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	7f1b      	ldrb	r3, [r3, #28]
 8001300:	b29b      	uxth	r3, r3
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <modbusRead1Register+0xf0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	7f5b      	ldrb	r3, [r3, #29]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <modbusRead1Register+0xf0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	7e9b      	ldrb	r3, [r3, #26]
 8001318:	b29b      	uxth	r3, r3
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <modbusRead1Register+0xf0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	7edb      	ldrb	r3, [r3, #27]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4413      	add	r3, r2
 8001328:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <modbusRead1Register+0x42>
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	2b7d      	cmp	r3, #125	; 0x7d
 8001334:	d903      	bls.n	800133e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001336:	2003      	movs	r0, #3
 8001338:	f000 f856 	bl	80013e8 <ModbusErrorReply>
		 return;
 800133c:	e04e      	b.n	80013dc <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800133e:	88ba      	ldrh	r2, [r7, #4]
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <modbusRead1Register+0xf0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	429a      	cmp	r2, r3
 8001348:	d808      	bhi.n	800135c <modbusRead1Register+0x68>
 800134a:	88ba      	ldrh	r2, [r7, #4]
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	4413      	add	r3, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <modbusRead1Register+0xf0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	429a      	cmp	r2, r3
 800135a:	d903      	bls.n	8001364 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800135c:	2002      	movs	r0, #2
 800135e:	f000 f843 	bl	80013e8 <ModbusErrorReply>
		 return;
 8001362:	e03b      	b.n	80013dc <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <modbusRead1Register+0xf0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2203      	movs	r2, #3
 800136a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <modbusRead1Register+0xf0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	0052      	lsls	r2, r2, #1
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800137e:	2400      	movs	r4, #0
 8001380:	e020      	b.n	80013c4 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <modbusRead1Register+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	4423      	add	r3, r4
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	18d1      	adds	r1, r2, r3
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <modbusRead1Register+0xf0>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	1c63      	adds	r3, r4, #1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	7849      	ldrb	r1, [r1, #1]
 800139a:	4413      	add	r3, r2
 800139c:	460a      	mov	r2, r1
 800139e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <modbusRead1Register+0xf0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	4423      	add	r3, r4
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	18d1      	adds	r1, r2, r3
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <modbusRead1Register+0xf0>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	0063      	lsls	r3, r4, #1
 80013b6:	3303      	adds	r3, #3
 80013b8:	7809      	ldrb	r1, [r1, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	460a      	mov	r2, r1
 80013be:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80013c2:	3401      	adds	r4, #1
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	429c      	cmp	r4, r3
 80013c8:	dbdb      	blt.n	8001382 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <modbusRead1Register+0xf0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0052      	lsls	r2, r2, #1
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000314 	.word	0x20000314

080013e8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <ModbusErrorReply+0x40>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	7e5a      	ldrb	r2, [r3, #25]
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <ModbusErrorReply+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <ModbusErrorReply+0x40>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <ModbusErrorReply+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2202      	movs	r2, #2
 8001416:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000314 	.word	0x20000314

0800142c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <Modbus_frame_response+0x2c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	7e5b      	ldrb	r3, [r3, #25]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d004      	beq.n	8001444 <Modbus_frame_response+0x18>
 800143a:	2b06      	cmp	r3, #6
 800143c:	d105      	bne.n	800144a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800143e:	f7ff ff17 	bl	8001270 <modbusWrite1Register>
		break;
 8001442:	e006      	b.n	8001452 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001444:	f7ff ff56 	bl	80012f4 <modbusRead1Register>
		break;
 8001448:	e003      	b.n	8001452 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800144a:	2001      	movs	r0, #1
 800144c:	f7ff ffcc 	bl	80013e8 <ModbusErrorReply>
		break;
 8001450:	bf00      	nop

	}
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000314 	.word	0x20000314

0800145c <Modbus_Emission>:

void Modbus_Emission()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <Modbus_Emission+0xfc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b20      	cmp	r3, #32
 8001470:	d15e      	bne.n	8001530 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <Modbus_Emission+0xfc>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <Modbus_Emission+0xfc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001480:	4b35      	ldr	r3, [pc, #212]	; (8001558 <Modbus_Emission+0xfc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001488:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <Modbus_Emission+0xfc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <Modbus_Emission+0xfc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800149a:	461a      	mov	r2, r3
 800149c:	f00a fd34 	bl	800bf08 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <Modbus_Emission+0xfc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <Modbus_Emission+0xfc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3203      	adds	r2, #3
 80014b0:	b292      	uxth	r2, r2
 80014b2:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <Modbus_Emission+0xfc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <Modbus_Emission+0xfc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014c6:	3b02      	subs	r3, #2
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f7ff fd92 	bl	8000ff4 <CRC16>
 80014d0:	4603      	mov	r3, r0
 80014d2:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <Modbus_Emission+0xfc>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <Modbus_Emission+0xfc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014e0:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80014e2:	7939      	ldrb	r1, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	460a      	mov	r2, r1
 80014e8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <Modbus_Emission+0xfc>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <Modbus_Emission+0xfc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014f8:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014fa:	7979      	ldrb	r1, [r7, #5]
 80014fc:	4413      	add	r3, r2
 80014fe:	460a      	mov	r2, r1
 8001500:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <Modbus_Emission+0xfc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b20      	cmp	r3, #32
 8001512:	d10d      	bne.n	8001530 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <Modbus_Emission+0xfc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <Modbus_Emission+0xfc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <Modbus_Emission+0xfc>)
 8001524:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001526:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800152a:	461a      	mov	r2, r3
 800152c:	f009 fb5a 	bl	800abe4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <Modbus_Emission+0xfc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <Modbus_Emission+0xfc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <Modbus_Emission+0xfc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <Modbus_Emission+0xfc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2202      	movs	r2, #2
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000314 	.word	0x20000314

0800155c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001562:	f003 f811 	bl	8004588 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001566:	f000 f8e3 	bl	8001730 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800156a:	f000 fbff 	bl	8001d6c <MX_GPIO_Init>
	MX_DMA_Init();
 800156e:	f000 fbc7 	bl	8001d00 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001572:	f000 fb99 	bl	8001ca8 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001576:	f000 f9d1 	bl	800191c <MX_TIM1_Init>
	MX_TIM5_Init();
 800157a:	f000 faed 	bl	8001b58 <MX_TIM5_Init>
	MX_TIM2_Init();
 800157e:	f000 fa51 	bl	8001a24 <MX_TIM2_Init>
	MX_ADC1_Init();
 8001582:	f000 f93d 	bl	8001800 <MX_ADC1_Init>
	MX_TIM3_Init();
 8001586:	f000 fa99 	bl	8001abc <MX_TIM3_Init>
	MX_TIM11_Init();
 800158a:	f000 fb39 	bl	8001c00 <MX_TIM11_Init>
	MX_I2C2_Init();
 800158e:	f000 f997 	bl	80018c0 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001592:	2104      	movs	r1, #4
 8001594:	4853      	ldr	r0, [pc, #332]	; (80016e4 <main+0x188>)
 8001596:	f008 f8b1 	bl	80096fc <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start(&htim1);
 800159a:	4853      	ldr	r0, [pc, #332]	; (80016e8 <main+0x18c>)
 800159c:	f007 fcfe 	bl	8008f9c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015a0:	2100      	movs	r1, #0
 80015a2:	4851      	ldr	r0, [pc, #324]	; (80016e8 <main+0x18c>)
 80015a4:	f007 fe78 	bl	8009298 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 80015a8:	4850      	ldr	r0, [pc, #320]	; (80016ec <main+0x190>)
 80015aa:	f007 fd51 	bl	8009050 <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, (uint16_t*) buffer, 20);
 80015ae:	2214      	movs	r2, #20
 80015b0:	494f      	ldr	r1, [pc, #316]	; (80016f0 <main+0x194>)
 80015b2:	4850      	ldr	r0, [pc, #320]	; (80016f4 <main+0x198>)
 80015b4:	f003 f8c2 	bl	800473c <HAL_ADC_Start_DMA>

	hmodbus.huart = &huart2;
 80015b8:	4b4f      	ldr	r3, [pc, #316]	; (80016f8 <main+0x19c>)
 80015ba:	4a50      	ldr	r2, [pc, #320]	; (80016fc <main+0x1a0>)
 80015bc:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 80015be:	4b4e      	ldr	r3, [pc, #312]	; (80016f8 <main+0x19c>)
 80015c0:	4a4f      	ldr	r2, [pc, #316]	; (8001700 <main+0x1a4>)
 80015c2:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80015c4:	4b4c      	ldr	r3, [pc, #304]	; (80016f8 <main+0x19c>)
 80015c6:	2215      	movs	r2, #21
 80015c8:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70; // 70
 80015ca:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <main+0x19c>)
 80015cc:	2246      	movs	r2, #70	; 0x46
 80015ce:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80015d0:	494c      	ldr	r1, [pc, #304]	; (8001704 <main+0x1a8>)
 80015d2:	4849      	ldr	r0, [pc, #292]	; (80016f8 <main+0x19c>)
 80015d4:	f7ff fcb8 	bl	8000f48 <Modbus_init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Modbus_Protocal_Worker();
 80015d8:	f7ff fd42 	bl	8001060 <Modbus_Protocal_Worker>
		static uint32_t timestamp = 0;

		handleEmergency();
 80015dc:	f002 fb22 	bl	8003c24 <handleEmergency>
		if (HAL_GetTick() >= timestamp) {
 80015e0:	f003 f838 	bl	8004654 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	4b48      	ldr	r3, [pc, #288]	; (8001708 <main+0x1ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3f4      	bcc.n	80015d8 <main+0x7c>
			timestamp = HAL_GetTick() + 100;
 80015ee:	f003 f831 	bl	8004654 <HAL_GetTick>
 80015f2:	4603      	mov	r3, r0
 80015f4:	3364      	adds	r3, #100	; 0x64
 80015f6:	4a44      	ldr	r2, [pc, #272]	; (8001708 <main+0x1ac>)
 80015f8:	6013      	str	r3, [r2, #0]

			int16_t sentPos = mmActPos * 10;
 80015fa:	4b44      	ldr	r3, [pc, #272]	; (800170c <main+0x1b0>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800160c:	ee17 3a90 	vmov	r3, s15
 8001610:	80fb      	strh	r3, [r7, #6]
			int16_t sentVel = mmActVel * 10;
 8001612:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <main+0x1b4>)
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800161c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001624:	ee17 3a90 	vmov	r3, s15
 8001628:	80bb      	strh	r3, [r7, #4]
			int16_t sentAcc = mmActAcc * 10;
 800162a:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <main+0x1b8>)
 800162c:	edd3 7a00 	vldr	s15, [r3]
 8001630:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800163c:	ee17 3a90 	vmov	r3, s15
 8001640:	807b      	strh	r3, [r7, #2]
			registerFrame[0].U16 = 22881; // WRITE : Heartbeat Protocol
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <main+0x1a8>)
 8001644:	f645 1261 	movw	r2, #22881	; 0x5961
 8001648:	801a      	strh	r2, [r3, #0]
			registerFrame[17].U16 = sentPos; // WRITE : y-axis Actual Position
 800164a:	88fa      	ldrh	r2, [r7, #6]
 800164c:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <main+0x1a8>)
 800164e:	845a      	strh	r2, [r3, #34]	; 0x22
			registerFrame[18].U16 = sentVel; // WRITE : y-axis Actual Speed
 8001650:	88ba      	ldrh	r2, [r7, #4]
 8001652:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <main+0x1a8>)
 8001654:	849a      	strh	r2, [r3, #36]	; 0x24
			registerFrame[19].U16 = sentAcc; // WRITE : y-axis Actual Acceleration
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <main+0x1a8>)
 800165a:	84da      	strh	r2, [r3, #38]	; 0x26

			if (x[0] && x2) {
 800165c:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <main+0x1bc>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00c      	beq.n	800167e <main+0x122>
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <main+0x1c0>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <main+0x122>
				//x[2] = 1;
				endEffectorControl(endEffector.status, 0);
 800166c:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <main+0x1c4>)
 800166e:	795b      	ldrb	r3, [r3, #5]
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f002 fb0c 	bl	8003c90 <endEffectorControl>
				//HAL_Delay(10);
				endEffectorPick();
 8001678:	f000 fdba 	bl	80021f0 <endEffectorPick>
 800167c:	e00f      	b.n	800169e <main+0x142>
				//HAL_Delay(3000);
				//endEffectorPlace();
			} else if (x[1] && x2) {
 800167e:	4b26      	ldr	r3, [pc, #152]	; (8001718 <main+0x1bc>)
 8001680:	785b      	ldrb	r3, [r3, #1]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00b      	beq.n	800169e <main+0x142>
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <main+0x1c0>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <main+0x142>
				endEffectorControl(endEffector.status, 0);
 800168e:	4b24      	ldr	r3, [pc, #144]	; (8001720 <main+0x1c4>)
 8001690:	795b      	ldrb	r3, [r3, #5]
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f002 fafb 	bl	8003c90 <endEffectorControl>
				//HAL_Delay(10);
				//endEffectorPick();
				endEffectorPlace();
 800169a:	f000 fe0b 	bl	80022b4 <endEffectorPlace>
				//HAL_Delay(3000);
			}

			endEffectorDataScan[1] = registerFrame[2].U16;
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <main+0x1a8>)
 80016a0:	889b      	ldrh	r3, [r3, #4]
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <main+0x1c8>)
 80016a6:	705a      	strb	r2, [r3, #1]
			if (endEffectorDataScan[1] != endEffectorDataScan[0]) {
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <main+0x1c8>)
 80016aa:	785a      	ldrb	r2, [r3, #1]
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <main+0x1c8>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d008      	beq.n	80016c6 <main+0x16a>
				endEffectorStatusControl(registerFrame[2].U16);
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <main+0x1a8>)
 80016b6:	889b      	ldrh	r3, [r3, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 fba9 	bl	8003e10 <endEffectorStatusControl>
				endEffectorDataScan[0] = endEffectorDataScan[1];
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <main+0x1c8>)
 80016c0:	785a      	ldrb	r2, [r3, #1]
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <main+0x1c8>)
 80016c4:	701a      	strb	r2, [r3, #0]

			}

			joyDisplayLED();
 80016c6:	f002 f945 	bl	8003954 <joyDisplayLED>

			if (joyStart) {
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <main+0x1cc>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d082      	beq.n	80015d8 <main+0x7c>
				buttonInput(); // DETECT : Button Input
 80016d2:	f001 ff83 	bl	80035dc <buttonInput>
				buttonLogic(joyLogic);
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <main+0x1d0>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	f001 ffe7 	bl	80036b0 <buttonLogic>
	while (1) {
 80016e2:	e779      	b.n	80015d8 <main+0x7c>
 80016e4:	20000630 	.word	0x20000630
 80016e8:	20000414 	.word	0x20000414
 80016ec:	200004c8 	.word	0x200004c8
 80016f0:	20000dd8 	.word	0x20000dd8
 80016f4:	20000318 	.word	0x20000318
 80016f8:	2000086c 	.word	0x2000086c
 80016fc:	20000798 	.word	0x20000798
 8001700:	200006e4 	.word	0x200006e4
 8001704:	20000d44 	.word	0x20000d44
 8001708:	20000f58 	.word	0x20000f58
 800170c:	20000e18 	.word	0x20000e18
 8001710:	20000e20 	.word	0x20000e20
 8001714:	20000e24 	.word	0x20000e24
 8001718:	20000f50 	.word	0x20000f50
 800171c:	20000f53 	.word	0x20000f53
 8001720:	20000268 	.word	0x20000268
 8001724:	20000f40 	.word	0x20000f40
 8001728:	20000f4b 	.word	0x20000f4b
 800172c:	20000e04 	.word	0x20000e04

08001730 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b094      	sub	sp, #80	; 0x50
 8001734:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	2230      	movs	r2, #48	; 0x30
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f00a fbf0 	bl	800bf24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <SystemClock_Config+0xc8>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a26      	ldr	r2, [pc, #152]	; (80017f8 <SystemClock_Config+0xc8>)
 800175e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <SystemClock_Config+0xc8>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	4b21      	ldr	r3, [pc, #132]	; (80017fc <SystemClock_Config+0xcc>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a20      	ldr	r2, [pc, #128]	; (80017fc <SystemClock_Config+0xcc>)
 800177a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <SystemClock_Config+0xcc>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800178c:	2302      	movs	r3, #2
 800178e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001790:	2301      	movs	r3, #1
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001794:	2310      	movs	r3, #16
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001798:	2302      	movs	r3, #2
 800179a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800179c:	2300      	movs	r3, #0
 800179e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80017a0:	2308      	movs	r3, #8
 80017a2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80017a4:	2364      	movs	r3, #100	; 0x64
 80017a6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017a8:	2302      	movs	r3, #2
 80017aa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80017ac:	2304      	movs	r3, #4
 80017ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80017b0:	f107 0320 	add.w	r3, r7, #32
 80017b4:	4618      	mov	r0, r3
 80017b6:	f006 fefd 	bl	80085b4 <HAL_RCC_OscConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <SystemClock_Config+0x94>
		Error_Handler();
 80017c0:	f002 fb8c 	bl	8003edc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017c4:	230f      	movs	r3, #15
 80017c6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c8:	2302      	movs	r3, #2
 80017ca:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	2103      	movs	r1, #3
 80017e0:	4618      	mov	r0, r3
 80017e2:	f007 f95f 	bl	8008aa4 <HAL_RCC_ClockConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <SystemClock_Config+0xc0>
		Error_Handler();
 80017ec:	f002 fb76 	bl	8003edc <Error_Handler>
	}
}
 80017f0:	bf00      	nop
 80017f2:	3750      	adds	r7, #80	; 0x50
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40007000 	.word	0x40007000

08001800 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001806:	463b      	mov	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001812:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <MX_ADC1_Init+0xb4>)
 8001814:	4a28      	ldr	r2, [pc, #160]	; (80018b8 <MX_ADC1_Init+0xb8>)
 8001816:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001818:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <MX_ADC1_Init+0xb4>)
 800181a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800181e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001820:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <MX_ADC1_Init+0xb4>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8001826:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <MX_ADC1_Init+0xb4>)
 8001828:	2201      	movs	r2, #1
 800182a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800182c:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <MX_ADC1_Init+0xb4>)
 800182e:	2201      	movs	r2, #1
 8001830:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <MX_ADC1_Init+0xb4>)
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800183a:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <MX_ADC1_Init+0xb4>)
 800183c:	2200      	movs	r2, #0
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <MX_ADC1_Init+0xb4>)
 8001842:	4a1e      	ldr	r2, [pc, #120]	; (80018bc <MX_ADC1_Init+0xbc>)
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <MX_ADC1_Init+0xb4>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <MX_ADC1_Init+0xb4>)
 800184e:	2202      	movs	r2, #2
 8001850:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <MX_ADC1_Init+0xb4>)
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800185a:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <MX_ADC1_Init+0xb4>)
 800185c:	2201      	movs	r2, #1
 800185e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001860:	4814      	ldr	r0, [pc, #80]	; (80018b4 <MX_ADC1_Init+0xb4>)
 8001862:	f002 ff27 	bl	80046b4 <HAL_ADC_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_ADC1_Init+0x70>
		Error_Handler();
 800186c:	f002 fb36 	bl	8003edc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8001870:	230d      	movs	r3, #13
 8001872:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001874:	2301      	movs	r3, #1
 8001876:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001878:	2303      	movs	r3, #3
 800187a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800187c:	463b      	mov	r3, r7
 800187e:	4619      	mov	r1, r3
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <MX_ADC1_Init+0xb4>)
 8001882:	f003 f869 	bl	8004958 <HAL_ADC_ConfigChannel>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_ADC1_Init+0x90>
		Error_Handler();
 800188c:	f002 fb26 	bl	8003edc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 8001890:	230a      	movs	r3, #10
 8001892:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8001894:	2302      	movs	r3, #2
 8001896:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001898:	463b      	mov	r3, r7
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_ADC1_Init+0xb4>)
 800189e:	f003 f85b 	bl	8004958 <HAL_ADC_ConfigChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_ADC1_Init+0xac>
		Error_Handler();
 80018a8:	f002 fb18 	bl	8003edc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000318 	.word	0x20000318
 80018b8:	40012000 	.word	0x40012000
 80018bc:	0f000001 	.word	0x0f000001

080018c0 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_I2C2_Init+0x50>)
 80018c6:	4a13      	ldr	r2, [pc, #76]	; (8001914 <MX_I2C2_Init+0x54>)
 80018c8:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_I2C2_Init+0x50>)
 80018cc:	4a12      	ldr	r2, [pc, #72]	; (8001918 <MX_I2C2_Init+0x58>)
 80018ce:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_I2C2_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_I2C2_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_I2C2_Init+0x50>)
 80018de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018e2:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <MX_I2C2_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_I2C2_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <MX_I2C2_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_I2C2_Init+0x50>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <MX_I2C2_Init+0x50>)
 80018fe:	f004 f9d9 	bl	8005cb4 <HAL_I2C_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_I2C2_Init+0x4c>
		Error_Handler();
 8001908:	f002 fae8 	bl	8003edc <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200003c0 	.word	0x200003c0
 8001914:	40005800 	.word	0x40005800
 8001918:	000186a0 	.word	0x000186a0

0800191c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b092      	sub	sp, #72	; 0x48
 8001920:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001922:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800192c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	615a      	str	r2, [r3, #20]
 800193e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	2220      	movs	r2, #32
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f00a faec 	bl	800bf24 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800194c:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <MX_TIM1_Init+0x100>)
 800194e:	4a34      	ldr	r2, [pc, #208]	; (8001a20 <MX_TIM1_Init+0x104>)
 8001950:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 99;
 8001952:	4b32      	ldr	r3, [pc, #200]	; (8001a1c <MX_TIM1_Init+0x100>)
 8001954:	2263      	movs	r2, #99	; 0x63
 8001956:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001958:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <MX_TIM1_Init+0x100>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 800195e:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <MX_TIM1_Init+0x100>)
 8001960:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001964:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001966:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <MX_TIM1_Init+0x100>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <MX_TIM1_Init+0x100>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001972:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <MX_TIM1_Init+0x100>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001978:	4828      	ldr	r0, [pc, #160]	; (8001a1c <MX_TIM1_Init+0x100>)
 800197a:	f007 fc31 	bl	80091e0 <HAL_TIM_PWM_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM1_Init+0x6c>
		Error_Handler();
 8001984:	f002 faaa 	bl	8003edc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001988:	2300      	movs	r3, #0
 800198a:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001990:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001994:	4619      	mov	r1, r3
 8001996:	4821      	ldr	r0, [pc, #132]	; (8001a1c <MX_TIM1_Init+0x100>)
 8001998:	f008 ff14 	bl	800a7c4 <HAL_TIMEx_MasterConfigSynchronization>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80019a2:	f002 fa9b 	bl	8003edc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a6:	2360      	movs	r3, #96	; 0x60
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019b2:	2300      	movs	r3, #0
 80019b4:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80019c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c6:	2200      	movs	r2, #0
 80019c8:	4619      	mov	r1, r3
 80019ca:	4814      	ldr	r0, [pc, #80]	; (8001a1c <MX_TIM1_Init+0x100>)
 80019cc:	f008 f8a8 	bl	8009b20 <HAL_TIM_PWM_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 80019d6:	f002 fa81 	bl	8003edc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4807      	ldr	r0, [pc, #28]	; (8001a1c <MX_TIM1_Init+0x100>)
 80019fe:	f008 ff4f 	bl	800a8a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 8001a08:	f002 fa68 	bl	8003edc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <MX_TIM1_Init+0x100>)
 8001a0e:	f002 fc45 	bl	800429c <HAL_TIM_MspPostInit>

}
 8001a12:	bf00      	nop
 8001a14:	3748      	adds	r7, #72	; 0x48
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000414 	.word	0x20000414
 8001a20:	40010000 	.word	0x40010000

08001a24 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <MX_TIM2_Init+0x94>)
 8001a42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a46:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9999;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_TIM2_Init+0x94>)
 8001a4a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a4e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <MX_TIM2_Init+0x94>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_TIM2_Init+0x94>)
 8001a58:	2209      	movs	r2, #9
 8001a5a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <MX_TIM2_Init+0x94>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_TIM2_Init+0x94>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001a68:	4813      	ldr	r0, [pc, #76]	; (8001ab8 <MX_TIM2_Init+0x94>)
 8001a6a:	f007 fa3b 	bl	8008ee4 <HAL_TIM_Base_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM2_Init+0x54>
		Error_Handler();
 8001a74:	f002 fa32 	bl	8003edc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001a7e:	f107 0308 	add.w	r3, r7, #8
 8001a82:	4619      	mov	r1, r3
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <MX_TIM2_Init+0x94>)
 8001a86:	f008 f90d 	bl	8009ca4 <HAL_TIM_ConfigClockSource>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM2_Init+0x70>
		Error_Handler();
 8001a90:	f002 fa24 	bl	8003edc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_TIM2_Init+0x94>)
 8001aa2:	f008 fe8f 	bl	800a7c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001aac:	f002 fa16 	bl	8003edc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200004c8 	.word	0x200004c8

08001abc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001ada:	4a1e      	ldr	r2, [pc, #120]	; (8001b54 <MX_TIM3_Init+0x98>)
 8001adc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001af0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001afe:	4814      	ldr	r0, [pc, #80]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001b00:	f007 f9f0 	bl	8008ee4 <HAL_TIM_Base_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM3_Init+0x52>
		Error_Handler();
 8001b0a:	f002 f9e7 	bl	8003edc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b12:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001b14:	f107 0308 	add.w	r3, r7, #8
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480d      	ldr	r0, [pc, #52]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001b1c:	f008 f8c2 	bl	8009ca4 <HAL_TIM_ConfigClockSource>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM3_Init+0x6e>
		Error_Handler();
 8001b26:	f002 f9d9 	bl	8003edc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001b32:	463b      	mov	r3, r7
 8001b34:	4619      	mov	r1, r3
 8001b36:	4806      	ldr	r0, [pc, #24]	; (8001b50 <MX_TIM3_Init+0x94>)
 8001b38:	f008 fe44 	bl	800a7c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001b42:	f002 f9cb 	bl	8003edc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000057c 	.word	0x2000057c
 8001b54:	40000400 	.word	0x40000400

08001b58 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08c      	sub	sp, #48	; 0x30
 8001b5c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	2224      	movs	r2, #36	; 0x24
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f00a f9dc 	bl	800bf24 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001b74:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <MX_TIM5_Init+0xa0>)
 8001b76:	4a21      	ldr	r2, [pc, #132]	; (8001bfc <MX_TIM5_Init+0xa4>)
 8001b78:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001b7a:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <MX_TIM5_Init+0xa0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <MX_TIM5_Init+0xa0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <MX_TIM5_Init+0xa0>)
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <MX_TIM5_Init+0xa0>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b94:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <MX_TIM5_Init+0xa0>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <MX_TIM5_Init+0xa0>)
 8001bc6:	f007 fce5 	bl	8009594 <HAL_TIM_Encoder_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM5_Init+0x7c>
		Error_Handler();
 8001bd0:	f002 f984 	bl	8003edc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_TIM5_Init+0xa0>)
 8001be2:	f008 fdef 	bl	800a7c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM5_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001bec:	f002 f976 	bl	8003edc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	3730      	adds	r7, #48	; 0x30
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000630 	.word	0x20000630
 8001bfc:	40000c00 	.word	0x40000c00

08001c00 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
 8001c14:	615a      	str	r2, [r3, #20]
 8001c16:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <MX_TIM11_Init+0xa0>)
 8001c1a:	4a22      	ldr	r2, [pc, #136]	; (8001ca4 <MX_TIM11_Init+0xa4>)
 8001c1c:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 99;
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <MX_TIM11_Init+0xa0>)
 8001c20:	2263      	movs	r2, #99	; 0x63
 8001c22:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c24:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <MX_TIM11_Init+0xa0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 2005;
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <MX_TIM11_Init+0xa0>)
 8001c2c:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8001c30:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c32:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <MX_TIM11_Init+0xa0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <MX_TIM11_Init+0xa0>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 8001c3e:	4818      	ldr	r0, [pc, #96]	; (8001ca0 <MX_TIM11_Init+0xa0>)
 8001c40:	f007 f950 	bl	8008ee4 <HAL_TIM_Base_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM11_Init+0x4e>
		Error_Handler();
 8001c4a:	f002 f947 	bl	8003edc <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim11) != HAL_OK) {
 8001c4e:	4814      	ldr	r0, [pc, #80]	; (8001ca0 <MX_TIM11_Init+0xa0>)
 8001c50:	f007 fa60 	bl	8009114 <HAL_TIM_OC_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM11_Init+0x5e>
		Error_Handler();
 8001c5a:	f002 f93f 	bl	8003edc <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK) {
 8001c5e:	2108      	movs	r1, #8
 8001c60:	480f      	ldr	r0, [pc, #60]	; (8001ca0 <MX_TIM11_Init+0xa0>)
 8001c62:	f007 fbc9 	bl	80093f8 <HAL_TIM_OnePulse_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM11_Init+0x70>
		Error_Handler();
 8001c6c:	f002 f936 	bl	8003edc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001c70:	2310      	movs	r3, #16
 8001c72:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 1433;
 8001c74:	f240 5399 	movw	r3, #1433	; 0x599
 8001c78:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2200      	movs	r2, #0
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_TIM11_Init+0xa0>)
 8001c8a:	f007 feed 	bl	8009a68 <HAL_TIM_OC_ConfigChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM11_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001c94:	f002 f922 	bl	8003edc <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	3720      	adds	r7, #32
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200006e4 	.word	0x200006e4
 8001ca4:	40014800 	.word	0x40014800

08001ca8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <MX_USART2_UART_Init+0x50>)
 8001cae:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <MX_USART2_UART_Init+0x54>)
 8001cb0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_USART2_UART_Init+0x50>)
 8001cb4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001cb8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001cba:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <MX_USART2_UART_Init+0x50>)
 8001cbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cc0:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <MX_USART2_UART_Init+0x50>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_USART2_UART_Init+0x50>)
 8001cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_USART2_UART_Init+0x50>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <MX_USART2_UART_Init+0x50>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_USART2_UART_Init+0x50>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_USART2_UART_Init+0x50>)
 8001ce4:	f008 fe4c 	bl	800a980 <HAL_UART_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_USART2_UART_Init+0x4a>
		Error_Handler();
 8001cee:	f002 f8f5 	bl	8003edc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000798 	.word	0x20000798
 8001cfc:	40004400 	.word	0x40004400

08001d00 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <MX_DMA_Init+0x68>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <MX_DMA_Init+0x68>)
 8001d10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <MX_DMA_Init+0x68>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <MX_DMA_Init+0x68>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <MX_DMA_Init+0x68>)
 8001d2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <MX_DMA_Init+0x68>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	2011      	movs	r0, #17
 8001d44:	f003 f993 	bl	800506e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001d48:	2011      	movs	r0, #17
 8001d4a:	f003 f9ac 	bl	80050a6 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	2038      	movs	r0, #56	; 0x38
 8001d54:	f003 f98b 	bl	800506e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d58:	2038      	movs	r0, #56	; 0x38
 8001d5a:	f003 f9a4 	bl	80050a6 <HAL_NVIC_EnableIRQ>

}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800

08001d6c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	4b62      	ldr	r3, [pc, #392]	; (8001f10 <MX_GPIO_Init+0x1a4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a61      	ldr	r2, [pc, #388]	; (8001f10 <MX_GPIO_Init+0x1a4>)
 8001d8c:	f043 0304 	orr.w	r3, r3, #4
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b5f      	ldr	r3, [pc, #380]	; (8001f10 <MX_GPIO_Init+0x1a4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b5b      	ldr	r3, [pc, #364]	; (8001f10 <MX_GPIO_Init+0x1a4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a5a      	ldr	r2, [pc, #360]	; (8001f10 <MX_GPIO_Init+0x1a4>)
 8001da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b58      	ldr	r3, [pc, #352]	; (8001f10 <MX_GPIO_Init+0x1a4>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	4b54      	ldr	r3, [pc, #336]	; (8001f10 <MX_GPIO_Init+0x1a4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a53      	ldr	r2, [pc, #332]	; (8001f10 <MX_GPIO_Init+0x1a4>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b51      	ldr	r3, [pc, #324]	; (8001f10 <MX_GPIO_Init+0x1a4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b4d      	ldr	r3, [pc, #308]	; (8001f10 <MX_GPIO_Init+0x1a4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a4c      	ldr	r2, [pc, #304]	; (8001f10 <MX_GPIO_Init+0x1a4>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b4a      	ldr	r3, [pc, #296]	; (8001f10 <MX_GPIO_Init+0x1a4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12,
 8001df2:	2200      	movs	r2, #0
 8001df4:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8001df8:	4846      	ldr	r0, [pc, #280]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001dfa:	f003 ff27 	bl	8005c4c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f44f 51aa 	mov.w	r1, #5440	; 0x1540
 8001e04:	4844      	ldr	r0, [pc, #272]	; (8001f18 <MX_GPIO_Init+0x1ac>)
 8001e06:	f003 ff21 	bl	8005c4c <HAL_GPIO_WritePin>
	GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_12, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2140      	movs	r1, #64	; 0x40
 8001e0e:	4843      	ldr	r0, [pc, #268]	; (8001f1c <MX_GPIO_Init+0x1b0>)
 8001e10:	f003 ff1c 	bl	8005c4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001e14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e1a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4619      	mov	r1, r3
 8001e2a:	483b      	ldr	r0, [pc, #236]	; (8001f18 <MX_GPIO_Init+0x1ac>)
 8001e2c:	f003 fd72 	bl	8005914 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e30:	2304      	movs	r3, #4
 8001e32:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	4835      	ldr	r0, [pc, #212]	; (8001f18 <MX_GPIO_Init+0x1ac>)
 8001e44:	f003 fd66 	bl	8005914 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e48:	2310      	movs	r3, #16
 8001e4a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	482e      	ldr	r0, [pc, #184]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001e5c:	f003 fd5a 	bl	8005914 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA10 PA11 PA12 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8001e60:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001e64:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4826      	ldr	r0, [pc, #152]	; (8001f14 <MX_GPIO_Init+0x1a8>)
 8001e7a:	f003 fd4b 	bl	8005914 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e7e:	2320      	movs	r3, #32
 8001e80:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4821      	ldr	r0, [pc, #132]	; (8001f18 <MX_GPIO_Init+0x1ac>)
 8001e92:	f003 fd3f 	bl	8005914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB14 PB5 PB7
	 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_14 | GPIO_PIN_5 | GPIO_PIN_7
 8001e96:	f244 23a1 	movw	r3, #17057	; 0x42a1
 8001e9a:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	481c      	ldr	r0, [pc, #112]	; (8001f1c <MX_GPIO_Init+0x1b0>)
 8001eac:	f003 fd32 	bl	8005914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC6 PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_8;
 8001eb0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001eb4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4813      	ldr	r0, [pc, #76]	; (8001f18 <MX_GPIO_Init+0x1ac>)
 8001eca:	f003 fd23 	bl	8005914 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC10 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001ece:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ed2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ed4:	2311      	movs	r3, #17
 8001ed6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	480c      	ldr	r0, [pc, #48]	; (8001f18 <MX_GPIO_Init+0x1ac>)
 8001ee8:	f003 fd14 	bl	8005914 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eec:	2340      	movs	r3, #64	; 0x40
 8001eee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ef0:	2311      	movs	r3, #17
 8001ef2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	4619      	mov	r1, r3
 8001f02:	4806      	ldr	r0, [pc, #24]	; (8001f1c <MX_GPIO_Init+0x1b0>)
 8001f04:	f003 fd06 	bl	8005914 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001f08:	bf00      	nop
 8001f0a:	3728      	adds	r7, #40	; 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	40020400 	.word	0x40020400

08001f20 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 && x2 == 0) //
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a2f      	ldr	r2, [pc, #188]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d156      	bne.n	8001fde <HAL_TIM_PeriodElapsedCallback+0xbe>
 8001f30:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d152      	bne.n	8001fde <HAL_TIM_PeriodElapsedCallback+0xbe>
			{
		photoDetect();
 8001f38:	f000 fcd2 	bl	80028e0 <photoDetect>
		robotArmStateDataScan[1] = registerFrame[1].U16;
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f3e:	885b      	ldrh	r3, [r3, #2]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f44:	705a      	strb	r2, [r3, #1]
		if (robotArmStateDataScan[1] != robotArmStateDataScan[0]) {
 8001f46:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f48:	785a      	ldrb	r2, [r3, #1]
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d008      	beq.n	8001f64 <HAL_TIM_PeriodElapsedCallback+0x44>
			robotArmState(registerFrame[1].U16); // READ : Base System Status
 8001f52:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f54:	885b      	ldrh	r3, [r3, #2]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f001 fd46 	bl	80039e8 <robotArmState>
			robotArmStateDataScan[0] = robotArmStateDataScan[1];
 8001f5c:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f5e:	785a      	ldrb	r2, [r3, #1]
 8001f60:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f62:	701a      	strb	r2, [r3, #0]
		}

		readEncoder();
 8001f64:	f000 fa44 	bl	80023f0 <readEncoder>

		if (photoSig[0] || photoSig[2]) // SOFTWARE LIMIT : Motor/Encoder Photo Sensor
 8001f68:	4b23      	ldr	r3, [pc, #140]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d103      	bne.n	8001f78 <HAL_TIM_PeriodElapsedCallback+0x58>
 8001f70:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001f72:	789b      	ldrb	r3, [r3, #2]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_TIM_PeriodElapsedCallback+0x64>
				{
			duty = 0;
 8001f78:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
			setMotor();
 8001f80:	f000 fa10 	bl	80023a4 <setMotor>
		}

		if (startSetHome) {
 8001f84:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_TIM_PeriodElapsedCallback+0x70>
			setHome();
 8001f8c:	f000 fa4c 	bl	8002428 <setHome>
		}

		if (startPointModeY) {
 8001f90:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01c      	beq.n	8001fd2 <HAL_TIM_PeriodElapsedCallback+0xb2>
			int16_t targetPosPointMode = registerFrame[49].U16; // READ : Goal Point y
 8001f98:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001f9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001f9e:	81fb      	strh	r3, [r7, #14]
			onlyPositionControl(initPosY, targetPosPointMode / 10);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	ee07 3a90 	vmov	s15, r3
 8001fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fb0:	4a16      	ldr	r2, [pc, #88]	; (800200c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001fb2:	fb82 1203 	smull	r1, r2, r2, r3
 8001fb6:	1092      	asrs	r2, r2, #2
 8001fb8:	17db      	asrs	r3, r3, #31
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	ee07 3a10 	vmov	s14, r3
 8001fc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001fc6:	eef0 0a47 	vmov.f32	s1, s14
 8001fca:	eeb0 0a67 	vmov.f32	s0, s15
 8001fce:	f000 fa97 	bl	8002500 <onlyPositionControl>
		}

		if (startRunTray) {
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_TIM_PeriodElapsedCallback+0xbe>
			runTrayMode();
 8001fda:	f000 f81d 	bl	8002018 <runTrayMode>
		}

	}
}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200004c8 	.word	0x200004c8
 8001fec:	20000f53 	.word	0x20000f53
 8001ff0:	20000d44 	.word	0x20000d44
 8001ff4:	20000f44 	.word	0x20000f44
 8001ff8:	20000e34 	.word	0x20000e34
 8001ffc:	20000e08 	.word	0x20000e08
 8002000:	20000264 	.word	0x20000264
 8002004:	20000f35 	.word	0x20000f35
 8002008:	20000f38 	.word	0x20000f38
 800200c:	66666667 	.word	0x66666667
 8002010:	20000f47 	.word	0x20000f47
 8002014:	00000000 	.word	0x00000000

08002018 <runTrayMode>:

void runTrayMode() {
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0


	switch (runTrayModeCase) {
 800201c:	4b68      	ldr	r3, [pc, #416]	; (80021c0 <runTrayMode+0x1a8>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b06      	cmp	r3, #6
 8002022:	f200 80c7 	bhi.w	80021b4 <runTrayMode+0x19c>
 8002026:	a201      	add	r2, pc, #4	; (adr r2, 800202c <runTrayMode+0x14>)
 8002028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202c:	08002049 	.word	0x08002049
 8002030:	0800204f 	.word	0x0800204f
 8002034:	080020c7 	.word	0x080020c7
 8002038:	080020f1 	.word	0x080020f1
 800203c:	08002105 	.word	0x08002105
 8002040:	0800217d 	.word	0x0800217d
 8002044:	080021a7 	.word	0x080021a7
	// BEFORE START SET HOME FIRST
	case 0:
		setHome();
 8002048:	f000 f9ee 	bl	8002428 <setHome>
		break;
 800204c:	e0b2      	b.n	80021b4 <runTrayMode+0x19c>
	case 1: // GO PICK
		// X-Axis
		PIDCase = 0;
 800204e:	4b5d      	ldr	r3, [pc, #372]	; (80021c4 <runTrayMode+0x1ac>)
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
		registerFrame[64].U16 = 0b0000000000000010; // RUN : x-axis Moving Status
 8002054:	4b5c      	ldr	r3, [pc, #368]	; (80021c8 <runTrayMode+0x1b0>)
 8002056:	2202      	movs	r2, #2
 8002058:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		registerFrame[65].U16 = objPickPos[pathComplete].x; // SET : x-axis Target Position
 800205c:	4b5b      	ldr	r3, [pc, #364]	; (80021cc <runTrayMode+0x1b4>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4a5b      	ldr	r2, [pc, #364]	; (80021d0 <runTrayMode+0x1b8>)
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800206e:	ee17 3a90 	vmov	r3, s15
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b54      	ldr	r3, [pc, #336]	; (80021c8 <runTrayMode+0x1b0>)
 8002076:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		registerFrame[66].U16 = 3000; // SET : x-axis Target Speed
 800207a:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <runTrayMode+0x1b0>)
 800207c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002080:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		registerFrame[67].U16 = 1; // SET : x-axis Target Speed
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <runTrayMode+0x1b0>)
 8002086:	2201      	movs	r2, #1
 8002088:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

		// Y-Axis
		passInit = 0;
 800208c:	4b51      	ldr	r3, [pc, #324]	; (80021d4 <runTrayMode+0x1bc>)
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]

		registerFrame[16].U16 = 0b0000000000001000; // GO PICK : y-axis Moving Status
 8002092:	4b4d      	ldr	r3, [pc, #308]	; (80021c8 <runTrayMode+0x1b0>)
 8002094:	2208      	movs	r2, #8
 8002096:	841a      	strh	r2, [r3, #32]
		initPosY = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 8002098:	4b4f      	ldr	r3, [pc, #316]	; (80021d8 <runTrayMode+0x1c0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe f9ed 	bl	800047c <__aeabi_i2d>
 80020a2:	a345      	add	r3, pc, #276	; (adr r3, 80021b8 <runTrayMode+0x1a0>)
 80020a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a8:	f7fe fa52 	bl	8000550 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7fe fcfc 	bl	8000ab0 <__aeabi_d2iz>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4a48      	ldr	r2, [pc, #288]	; (80021dc <runTrayMode+0x1c4>)
 80020bc:	6013      	str	r3, [r2, #0]

		runTrayModeCase = 2;
 80020be:	4b40      	ldr	r3, [pc, #256]	; (80021c0 <runTrayMode+0x1a8>)
 80020c0:	2202      	movs	r2, #2
 80020c2:	701a      	strb	r2, [r3, #0]
		break;
 80020c4:	e076      	b.n	80021b4 <runTrayMode+0x19c>
	case 2:
		onlyPositionControl(initPosY, objPickPos[pathComplete].y);
 80020c6:	4b45      	ldr	r3, [pc, #276]	; (80021dc <runTrayMode+0x1c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	ee07 3a90 	vmov	s15, r3
 80020ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d2:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <runTrayMode+0x1b4>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	4a3e      	ldr	r2, [pc, #248]	; (80021d0 <runTrayMode+0x1b8>)
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	3304      	adds	r3, #4
 80020de:	ed93 7a00 	vldr	s14, [r3]
 80020e2:	eef0 0a47 	vmov.f32	s1, s14
 80020e6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ea:	f000 fa09 	bl	8002500 <onlyPositionControl>
		break;
 80020ee:	e061      	b.n	80021b4 <runTrayMode+0x19c>
	case 3:
		// END EFFECTOR CONTROL
		checkGoPick = 5;
 80020f0:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <runTrayMode+0x1c8>)
 80020f2:	2205      	movs	r2, #5
 80020f4:	701a      	strb	r2, [r3, #0]
		//endEffectorControl(endEffector.status, 0);
		//HAL_Delay(10);
		//endEffectorPick();
		// endEffectorPicking = 1;
		x2 = 1;
 80020f6:	4b3b      	ldr	r3, [pc, #236]	; (80021e4 <runTrayMode+0x1cc>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
		x[0] = 1;
 80020fc:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <runTrayMode+0x1d0>)
 80020fe:	2201      	movs	r2, #1
 8002100:	701a      	strb	r2, [r3, #0]

		break;
 8002102:	e057      	b.n	80021b4 <runTrayMode+0x19c>
	case 4:  // GO PLACE
		PIDCase = 0;
 8002104:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <runTrayMode+0x1ac>)
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
		//checkGoPick = 1;
		// X-Axis
		registerFrame[64].U16 = 0b0000000000000010; // RUN : x-axis Moving Status
 800210a:	4b2f      	ldr	r3, [pc, #188]	; (80021c8 <runTrayMode+0x1b0>)
 800210c:	2202      	movs	r2, #2
 800210e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		registerFrame[65].U16 = objPlacePos[pathComplete].x; // SET : x-axis Target Position
 8002112:	4b2e      	ldr	r3, [pc, #184]	; (80021cc <runTrayMode+0x1b4>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	4a35      	ldr	r2, [pc, #212]	; (80021ec <runTrayMode+0x1d4>)
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4413      	add	r3, r2
 800211c:	edd3 7a00 	vldr	s15, [r3]
 8002120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002124:	ee17 3a90 	vmov	r3, s15
 8002128:	b29a      	uxth	r2, r3
 800212a:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <runTrayMode+0x1b0>)
 800212c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		registerFrame[66].U16 = 3000; // SET : x-axis Target Speed
 8002130:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <runTrayMode+0x1b0>)
 8002132:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002136:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		registerFrame[67].U16 = 1; // SET : x-axis Target Speed
 800213a:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <runTrayMode+0x1b0>)
 800213c:	2201      	movs	r2, #1
 800213e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

		// Y-Axis
		passInit = 0;
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <runTrayMode+0x1bc>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]

		registerFrame[16].U16 = 0b0000000000010000; // GO PLACE : y-axis Moving Status
 8002148:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <runTrayMode+0x1b0>)
 800214a:	2210      	movs	r2, #16
 800214c:	841a      	strh	r2, [r3, #32]

		initPosY = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 800214e:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <runTrayMode+0x1c0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe f992 	bl	800047c <__aeabi_i2d>
 8002158:	a317      	add	r3, pc, #92	; (adr r3, 80021b8 <runTrayMode+0x1a0>)
 800215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215e:	f7fe f9f7 	bl	8000550 <__aeabi_dmul>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4610      	mov	r0, r2
 8002168:	4619      	mov	r1, r3
 800216a:	f7fe fca1 	bl	8000ab0 <__aeabi_d2iz>
 800216e:	4603      	mov	r3, r0
 8002170:	4a1a      	ldr	r2, [pc, #104]	; (80021dc <runTrayMode+0x1c4>)
 8002172:	6013      	str	r3, [r2, #0]
		runTrayModeCase = 5;
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <runTrayMode+0x1a8>)
 8002176:	2205      	movs	r2, #5
 8002178:	701a      	strb	r2, [r3, #0]

		break;
 800217a:	e01b      	b.n	80021b4 <runTrayMode+0x19c>
	case 5:
		onlyPositionControl(initPosY, objPlacePos[pathComplete].y);
 800217c:	4b17      	ldr	r3, [pc, #92]	; (80021dc <runTrayMode+0x1c4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	ee07 3a90 	vmov	s15, r3
 8002184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002188:	4b10      	ldr	r3, [pc, #64]	; (80021cc <runTrayMode+0x1b4>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4a17      	ldr	r2, [pc, #92]	; (80021ec <runTrayMode+0x1d4>)
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	3304      	adds	r3, #4
 8002194:	ed93 7a00 	vldr	s14, [r3]
 8002198:	eef0 0a47 	vmov.f32	s1, s14
 800219c:	eeb0 0a67 	vmov.f32	s0, s15
 80021a0:	f000 f9ae 	bl	8002500 <onlyPositionControl>
		break;
 80021a4:	e006      	b.n	80021b4 <runTrayMode+0x19c>
		// END EFFECTOR CONTROL
		//endEffectorControl(endEffector.status, 0);
		//HAL_Delay(10);
		//endEffectorPlace();
		// endEffectorPlacing = 1;
		x2 = 1;
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <runTrayMode+0x1cc>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
		x[1] = 1;
 80021ac:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <runTrayMode+0x1d0>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	705a      	strb	r2, [r3, #1]

		break;
 80021b2:	bf00      	nop
	}

}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	464f6faa 	.word	0x464f6faa
 80021bc:	3f8199cb 	.word	0x3f8199cb
 80021c0:	20000f49 	.word	0x20000f49
 80021c4:	20000f4e 	.word	0x20000f4e
 80021c8:	20000d44 	.word	0x20000d44
 80021cc:	20000f48 	.word	0x20000f48
 80021d0:	20000e38 	.word	0x20000e38
 80021d4:	20000f4c 	.word	0x20000f4c
 80021d8:	20000e10 	.word	0x20000e10
 80021dc:	20000f38 	.word	0x20000f38
 80021e0:	20000f4d 	.word	0x20000f4d
 80021e4:	20000f53 	.word	0x20000f53
 80021e8:	20000f50 	.word	0x20000f50
 80021ec:	20000e80 	.word	0x20000e80

080021f0 <endEffectorPick>:

void endEffectorPick() {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0

	switch (endEffectorState) {
 80021f4:	4b28      	ldr	r3, [pc, #160]	; (8002298 <endEffectorPick+0xa8>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d84a      	bhi.n	8002292 <endEffectorPick+0xa2>
 80021fc:	a201      	add	r2, pc, #4	; (adr r2, 8002204 <endEffectorPick+0x14>)
 80021fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002202:	bf00      	nop
 8002204:	08002215 	.word	0x08002215
 8002208:	08002231 	.word	0x08002231
 800220c:	0800224d 	.word	0x0800224d
 8002210:	08002269 	.word	0x08002269
	case 0:
		endEffectorControl(endEffector.gripperWork, 1); // GRIPPER ON
 8002214:	4b21      	ldr	r3, [pc, #132]	; (800229c <endEffectorPick+0xac>)
 8002216:	789b      	ldrb	r3, [r3, #2]
 8002218:	2101      	movs	r1, #1
 800221a:	4618      	mov	r0, r3
 800221c:	f001 fd38 	bl	8003c90 <endEffectorControl>
		if (readStatus[0] == 0b100) {
 8002220:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <endEffectorPick+0xb0>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b04      	cmp	r3, #4
 8002226:	d12f      	bne.n	8002288 <endEffectorPick+0x98>
			endEffectorState = 1;
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <endEffectorPick+0xa8>)
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800222e:	e02b      	b.n	8002288 <endEffectorPick+0x98>
	case 1:
		endEffectorControl(endEffector.gripperPickAndPlace, 1); // PICK UP
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <endEffectorPick+0xac>)
 8002232:	78db      	ldrb	r3, [r3, #3]
 8002234:	2101      	movs	r1, #1
 8002236:	4618      	mov	r0, r3
 8002238:	f001 fd2a 	bl	8003c90 <endEffectorControl>
		if (readStatus[0] == 0b0111) {
 800223c:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <endEffectorPick+0xb0>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b07      	cmp	r3, #7
 8002242:	d123      	bne.n	800228c <endEffectorPick+0x9c>
			endEffectorState = 2;
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <endEffectorPick+0xa8>)
 8002246:	2202      	movs	r2, #2
 8002248:	701a      	strb	r2, [r3, #0]
		}
		break;
 800224a:	e01f      	b.n	800228c <endEffectorPick+0x9c>
	case 2:
		endEffectorControl(endEffector.gripperWork, 0); // GRIPPER OFF
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <endEffectorPick+0xac>)
 800224e:	789b      	ldrb	r3, [r3, #2]
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f001 fd1c 	bl	8003c90 <endEffectorControl>
		if (readStatus[0] == 0b011) {
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <endEffectorPick+0xb0>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d117      	bne.n	8002290 <endEffectorPick+0xa0>
			endEffectorState = 3;
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <endEffectorPick+0xa8>)
 8002262:	2203      	movs	r2, #3
 8002264:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002266:	e013      	b.n	8002290 <endEffectorPick+0xa0>
	case 3:
		runTrayModeCase = 4;
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <endEffectorPick+0xb4>)
 800226a:	2204      	movs	r2, #4
 800226c:	701a      	strb	r2, [r3, #0]
		endEffectorState = 0;
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <endEffectorPick+0xa8>)
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]
		endEffectorPicking = 0;
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <endEffectorPick+0xb8>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
		x[0] = 0;
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <endEffectorPick+0xbc>)
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
		x2 = 0;
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <endEffectorPick+0xc0>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
		break;
 8002286:	e004      	b.n	8002292 <endEffectorPick+0xa2>
		break;
 8002288:	bf00      	nop
 800228a:	e002      	b.n	8002292 <endEffectorPick+0xa2>
		break;
 800228c:	bf00      	nop
 800228e:	e000      	b.n	8002292 <endEffectorPick+0xa2>
		break;
 8002290:	bf00      	nop
//	if (readStatus[0] == 0b111) {
//		runTrayModeCase = 3;
//		endEffectorPicking = 0;
//
//	}
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000f46 	.word	0x20000f46
 800229c:	20000268 	.word	0x20000268
 80022a0:	20000f3c 	.word	0x20000f3c
 80022a4:	20000f49 	.word	0x20000f49
 80022a8:	20000f4a 	.word	0x20000f4a
 80022ac:	20000f50 	.word	0x20000f50
 80022b0:	20000f53 	.word	0x20000f53

080022b4 <endEffectorPlace>:

void endEffectorPlace() {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	switch (endEffectorState) {
 80022b8:	4b32      	ldr	r3, [pc, #200]	; (8002384 <endEffectorPlace+0xd0>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d85e      	bhi.n	800237e <endEffectorPlace+0xca>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <endEffectorPlace+0x14>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	080022d9 	.word	0x080022d9
 80022cc:	080022f5 	.word	0x080022f5
 80022d0:	08002311 	.word	0x08002311
 80022d4:	0800232d 	.word	0x0800232d
	case 0:
		endEffectorControl(endEffector.gripperWork, 1); // GRIPPER ON
 80022d8:	4b2b      	ldr	r3, [pc, #172]	; (8002388 <endEffectorPlace+0xd4>)
 80022da:	789b      	ldrb	r3, [r3, #2]
 80022dc:	2101      	movs	r1, #1
 80022de:	4618      	mov	r0, r3
 80022e0:	f001 fcd6 	bl	8003c90 <endEffectorControl>
		if (readStatus[0] == 0b111) {
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <endEffectorPlace+0xd8>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b07      	cmp	r3, #7
 80022ea:	d141      	bne.n	8002370 <endEffectorPlace+0xbc>
			endEffectorState = 1;
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <endEffectorPlace+0xd0>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80022f2:	e03d      	b.n	8002370 <endEffectorPlace+0xbc>
	case 1:
		endEffectorControl(endEffector.gripperPickAndPlace, 0); // PICK DOWN
 80022f4:	4b24      	ldr	r3, [pc, #144]	; (8002388 <endEffectorPlace+0xd4>)
 80022f6:	78db      	ldrb	r3, [r3, #3]
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f001 fcc8 	bl	8003c90 <endEffectorControl>
		if (readStatus[0] == 0b0100) {
 8002300:	4b22      	ldr	r3, [pc, #136]	; (800238c <endEffectorPlace+0xd8>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b04      	cmp	r3, #4
 8002306:	d135      	bne.n	8002374 <endEffectorPlace+0xc0>
			endEffectorState = 2;
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <endEffectorPlace+0xd0>)
 800230a:	2202      	movs	r2, #2
 800230c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800230e:	e031      	b.n	8002374 <endEffectorPlace+0xc0>
	case 2:
		endEffectorControl(endEffector.gripperWork, 0); // GRIPPER OFF
 8002310:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <endEffectorPlace+0xd4>)
 8002312:	789b      	ldrb	r3, [r3, #2]
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f001 fcba 	bl	8003c90 <endEffectorControl>
		if (readStatus[0] == 0b0000) {
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <endEffectorPlace+0xd8>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d129      	bne.n	8002378 <endEffectorPlace+0xc4>
			endEffectorState = 3;
 8002324:	4b17      	ldr	r3, [pc, #92]	; (8002384 <endEffectorPlace+0xd0>)
 8002326:	2203      	movs	r2, #3
 8002328:	701a      	strb	r2, [r3, #0]
		}
		break;
 800232a:	e025      	b.n	8002378 <endEffectorPlace+0xc4>
	case 3:
		runTrayModeCase = 1;
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <endEffectorPlace+0xdc>)
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
		endEffectorState = 0;
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <endEffectorPlace+0xd0>)
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
		endEffectorPicking = 0;
 8002338:	4b16      	ldr	r3, [pc, #88]	; (8002394 <endEffectorPlace+0xe0>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
		pathComplete += 1;
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <endEffectorPlace+0xe4>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	3301      	adds	r3, #1
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <endEffectorPlace+0xe4>)
 8002348:	701a      	strb	r2, [r3, #0]
		x[1] = 0;
 800234a:	4b14      	ldr	r3, [pc, #80]	; (800239c <endEffectorPlace+0xe8>)
 800234c:	2200      	movs	r2, #0
 800234e:	705a      	strb	r2, [r3, #1]
		x2 = 0;
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <endEffectorPlace+0xec>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
		if (pathComplete == 9) { // PUT IN SWITCH CASE
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <endEffectorPlace+0xe4>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b09      	cmp	r3, #9
 800235c:	d10e      	bne.n	800237c <endEffectorPlace+0xc8>
			setHome();
 800235e:	f000 f863 	bl	8002428 <setHome>
			pathComplete = 0;
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <endEffectorPlace+0xe4>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
			runTrayModeCase = 0;
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <endEffectorPlace+0xdc>)
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800236e:	e005      	b.n	800237c <endEffectorPlace+0xc8>
		break;
 8002370:	bf00      	nop
 8002372:	e004      	b.n	800237e <endEffectorPlace+0xca>
		break;
 8002374:	bf00      	nop
 8002376:	e002      	b.n	800237e <endEffectorPlace+0xca>
		break;
 8002378:	bf00      	nop
 800237a:	e000      	b.n	800237e <endEffectorPlace+0xca>
		break;
 800237c:	bf00      	nop
//		pathComplete += 1;
//		runTrayModeCase = 1;
//		endEffectorPlacing = 0;
//
//	}
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000f46 	.word	0x20000f46
 8002388:	20000268 	.word	0x20000268
 800238c:	20000f3c 	.word	0x20000f3c
 8002390:	20000f49 	.word	0x20000f49
 8002394:	20000f4a 	.word	0x20000f4a
 8002398:	20000f48 	.word	0x20000f48
 800239c:	20000f50 	.word	0x20000f50
 80023a0:	20000f53 	.word	0x20000f53

080023a4 <setMotor>:
void setMotor() {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	if (dirAxisY) {
 80023a8:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <setMotor+0x3c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <setMotor+0x18>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80023b0:	2201      	movs	r2, #1
 80023b2:	2140      	movs	r1, #64	; 0x40
 80023b4:	480b      	ldr	r0, [pc, #44]	; (80023e4 <setMotor+0x40>)
 80023b6:	f003 fc49 	bl	8005c4c <HAL_GPIO_WritePin>
 80023ba:	e004      	b.n	80023c6 <setMotor+0x22>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80023bc:	2200      	movs	r2, #0
 80023be:	2140      	movs	r1, #64	; 0x40
 80023c0:	4808      	ldr	r0, [pc, #32]	; (80023e4 <setMotor+0x40>)
 80023c2:	f003 fc43 	bl	8005c4c <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <setMotor+0x44>)
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <setMotor+0x48>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d4:	ee17 2a90 	vmov	r2, s15
 80023d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000244 	.word	0x20000244
 80023e4:	40020800 	.word	0x40020800
 80023e8:	20000e08 	.word	0x20000e08
 80023ec:	20000414 	.word	0x20000414

080023f0 <readEncoder>:

void readEncoder() {
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <readEncoder+0x28>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b07      	ldr	r3, [pc, #28]	; (800241c <readEncoder+0x2c>)
 80023fe:	601a      	str	r2, [r3, #0]
	QEIReadModified = QEIReadRaw - QEIHome;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <readEncoder+0x2c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <readEncoder+0x30>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	4a06      	ldr	r2, [pc, #24]	; (8002424 <readEncoder+0x34>)
 800240c:	6013      	str	r3, [r2, #0]
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	20000630 	.word	0x20000630
 800241c:	20000e0c 	.word	0x20000e0c
 8002420:	20000e14 	.word	0x20000e14
 8002424:	20000e10 	.word	0x20000e10

08002428 <setHome>:

void setHome() {
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0

	switch (myHomeState) {
 800242c:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <setHome+0xac>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d02f      	beq.n	8002494 <setHome+0x6c>
 8002434:	2b02      	cmp	r3, #2
 8002436:	dc4b      	bgt.n	80024d0 <setHome+0xa8>
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <setHome+0x1a>
 800243c:	2b01      	cmp	r3, #1
 800243e:	d014      	beq.n	800246a <setHome+0x42>
		}
		break;

	}

}
 8002440:	e046      	b.n	80024d0 <setHome+0xa8>
		if (photoSig[0]) // Motor Photo Sensor
 8002442:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <setHome+0xb0>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <setHome+0x2a>
			myHomeState = 1;
 800244a:	4b22      	ldr	r3, [pc, #136]	; (80024d4 <setHome+0xac>)
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
		break;
 8002450:	e03e      	b.n	80024d0 <setHome+0xa8>
			dirAxisY = 0;
 8002452:	4b22      	ldr	r3, [pc, #136]	; (80024dc <setHome+0xb4>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
			duty = 220;
 8002458:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <setHome+0xb8>)
 800245a:	4a22      	ldr	r2, [pc, #136]	; (80024e4 <setHome+0xbc>)
 800245c:	601a      	str	r2, [r3, #0]
			setMotor();
 800245e:	f7ff ffa1 	bl	80023a4 <setMotor>
			myHomeState = 1;
 8002462:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <setHome+0xac>)
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
		break;
 8002468:	e032      	b.n	80024d0 <setHome+0xa8>
		if (photoSig[0]) // Motor Photo Sensor
 800246a:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <setHome+0xb0>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <setHome+0x5c>
			dirAxisY = 1;
 8002472:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <setHome+0xb4>)
 8002474:	2201      	movs	r2, #1
 8002476:	701a      	strb	r2, [r3, #0]
			duty = 220;
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <setHome+0xb8>)
 800247a:	4a1a      	ldr	r2, [pc, #104]	; (80024e4 <setHome+0xbc>)
 800247c:	601a      	str	r2, [r3, #0]
			setMotor();
 800247e:	f7ff ff91 	bl	80023a4 <setMotor>
		break;
 8002482:	e022      	b.n	80024ca <setHome+0xa2>
		} else if (photoSig[1]) // Center Photo Sensor
 8002484:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <setHome+0xb0>)
 8002486:	785b      	ldrb	r3, [r3, #1]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01e      	beq.n	80024ca <setHome+0xa2>
			myHomeState = 2;
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <setHome+0xac>)
 800248e:	2202      	movs	r2, #2
 8002490:	701a      	strb	r2, [r3, #0]
		break;
 8002492:	e01a      	b.n	80024ca <setHome+0xa2>
		duty = 0;
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <setHome+0xb8>)
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
		setMotor();
 800249c:	f7ff ff82 	bl	80023a4 <setMotor>
		QEIHome = QEIReadRaw;
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <setHome+0xc0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a11      	ldr	r2, [pc, #68]	; (80024ec <setHome+0xc4>)
 80024a6:	6013      	str	r3, [r2, #0]
		startSetHome = 0;
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <setHome+0xc8>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
		myHomeState = 0;
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <setHome+0xac>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
		registerFrame[16].U16 = 0; // RESET : y-axis Moving Status
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <setHome+0xcc>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	841a      	strh	r2, [r3, #32]
		if (startRunTray) {
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <setHome+0xd0>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <setHome+0xa6>
			runTrayModeCase = 1;
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <setHome+0xd4>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
		break;
 80024c8:	e001      	b.n	80024ce <setHome+0xa6>
		break;
 80024ca:	bf00      	nop
 80024cc:	e000      	b.n	80024d0 <setHome+0xa8>
		break;
 80024ce:	bf00      	nop
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000f34 	.word	0x20000f34
 80024d8:	20000e34 	.word	0x20000e34
 80024dc:	20000244 	.word	0x20000244
 80024e0:	20000e08 	.word	0x20000e08
 80024e4:	435c0000 	.word	0x435c0000
 80024e8:	20000e0c 	.word	0x20000e0c
 80024ec:	20000e14 	.word	0x20000e14
 80024f0:	20000264 	.word	0x20000264
 80024f4:	20000d44 	.word	0x20000d44
 80024f8:	20000f47 	.word	0x20000f47
 80024fc:	20000f49 	.word	0x20000f49

08002500 <onlyPositionControl>:
	}
	prePos = mmActPos;
	setMotor();
}

void onlyPositionControl(float initPos, float targetPos) {
 8002500:	b5b0      	push	{r4, r5, r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	ed87 0a01 	vstr	s0, [r7, #4]
 800250a:	edc7 0a00 	vstr	s1, [r7]
	calculationTraj result = trapezoidalTraj(initPos, targetPos);
 800250e:	f107 0308 	add.w	r3, r7, #8
 8002512:	edd7 0a00 	vldr	s1, [r7]
 8002516:	ed97 0a01 	vldr	s0, [r7, #4]
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fa04 	bl	8002928 <trapezoidalTraj>

	switch (PIDCase) {
 8002520:	4b99      	ldr	r3, [pc, #612]	; (8002788 <onlyPositionControl+0x288>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <onlyPositionControl+0x30>
 8002528:	2b01      	cmp	r3, #1
 800252a:	f000 8100 	beq.w	800272e <onlyPositionControl+0x22e>

		}
		break;
	}

}
 800252e:	e11a      	b.n	8002766 <onlyPositionControl+0x266>
		mmActPos = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 8002530:	4b96      	ldr	r3, [pc, #600]	; (800278c <onlyPositionControl+0x28c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fd ffa1 	bl	800047c <__aeabi_i2d>
 800253a:	a38d      	add	r3, pc, #564	; (adr r3, 8002770 <onlyPositionControl+0x270>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f7fe f806 	bl	8000550 <__aeabi_dmul>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	f7fe fad8 	bl	8000b00 <__aeabi_d2f>
 8002550:	4603      	mov	r3, r0
 8002552:	4a8f      	ldr	r2, [pc, #572]	; (8002790 <onlyPositionControl+0x290>)
 8002554:	6013      	str	r3, [r2, #0]
		mmActVel = (mmActPos - prePos) / 0.001;
 8002556:	4b8e      	ldr	r3, [pc, #568]	; (8002790 <onlyPositionControl+0x290>)
 8002558:	ed93 7a00 	vldr	s14, [r3]
 800255c:	4b8d      	ldr	r3, [pc, #564]	; (8002794 <onlyPositionControl+0x294>)
 800255e:	edd3 7a00 	vldr	s15, [r3]
 8002562:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002566:	ee17 0a90 	vmov	r0, s15
 800256a:	f7fd ff99 	bl	80004a0 <__aeabi_f2d>
 800256e:	a382      	add	r3, pc, #520	; (adr r3, 8002778 <onlyPositionControl+0x278>)
 8002570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002574:	f7fe f916 	bl	80007a4 <__aeabi_ddiv>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	f7fe fabe 	bl	8000b00 <__aeabi_d2f>
 8002584:	4603      	mov	r3, r0
 8002586:	4a84      	ldr	r2, [pc, #528]	; (8002798 <onlyPositionControl+0x298>)
 8002588:	6013      	str	r3, [r2, #0]
		mmActAcc = (mmActVel - preVel) / 0.001;
 800258a:	4b83      	ldr	r3, [pc, #524]	; (8002798 <onlyPositionControl+0x298>)
 800258c:	ed93 7a00 	vldr	s14, [r3]
 8002590:	4b82      	ldr	r3, [pc, #520]	; (800279c <onlyPositionControl+0x29c>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259a:	ee17 0a90 	vmov	r0, s15
 800259e:	f7fd ff7f 	bl	80004a0 <__aeabi_f2d>
 80025a2:	a375      	add	r3, pc, #468	; (adr r3, 8002778 <onlyPositionControl+0x278>)
 80025a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a8:	f7fe f8fc 	bl	80007a4 <__aeabi_ddiv>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f7fe faa4 	bl	8000b00 <__aeabi_d2f>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4a79      	ldr	r2, [pc, #484]	; (80027a0 <onlyPositionControl+0x2a0>)
 80025bc:	6013      	str	r3, [r2, #0]
		mmError = result.posTraj - mmActPos;
 80025be:	ed97 7a02 	vldr	s14, [r7, #8]
 80025c2:	4b73      	ldr	r3, [pc, #460]	; (8002790 <onlyPositionControl+0x290>)
 80025c4:	edd3 7a00 	vldr	s15, [r3]
 80025c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025cc:	4b75      	ldr	r3, [pc, #468]	; (80027a4 <onlyPositionControl+0x2a4>)
 80025ce:	edc3 7a00 	vstr	s15, [r3]
		positionPID.eIntegral = positionPID.eIntegral + (mmError * 0.001);
 80025d2:	4b75      	ldr	r3, [pc, #468]	; (80027a8 <onlyPositionControl+0x2a8>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ff62 	bl	80004a0 <__aeabi_f2d>
 80025dc:	4604      	mov	r4, r0
 80025de:	460d      	mov	r5, r1
 80025e0:	4b70      	ldr	r3, [pc, #448]	; (80027a4 <onlyPositionControl+0x2a4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd ff5b 	bl	80004a0 <__aeabi_f2d>
 80025ea:	a363      	add	r3, pc, #396	; (adr r3, 8002778 <onlyPositionControl+0x278>)
 80025ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f0:	f7fd ffae 	bl	8000550 <__aeabi_dmul>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4620      	mov	r0, r4
 80025fa:	4629      	mov	r1, r5
 80025fc:	f7fd fdf2 	bl	80001e4 <__adddf3>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	f7fe fa7a 	bl	8000b00 <__aeabi_d2f>
 800260c:	4603      	mov	r3, r0
 800260e:	4a66      	ldr	r2, [pc, #408]	; (80027a8 <onlyPositionControl+0x2a8>)
 8002610:	60d3      	str	r3, [r2, #12]
		duty = (positionPID.pTerm * mmError)
 8002612:	4b65      	ldr	r3, [pc, #404]	; (80027a8 <onlyPositionControl+0x2a8>)
 8002614:	ed93 7a00 	vldr	s14, [r3]
 8002618:	4b62      	ldr	r3, [pc, #392]	; (80027a4 <onlyPositionControl+0x2a4>)
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ (positionPID.iTerm * positionPID.eIntegral);
 8002622:	4b61      	ldr	r3, [pc, #388]	; (80027a8 <onlyPositionControl+0x2a8>)
 8002624:	edd3 6a01 	vldr	s13, [r3, #4]
 8002628:	4b5f      	ldr	r3, [pc, #380]	; (80027a8 <onlyPositionControl+0x2a8>)
 800262a:	edd3 7a03 	vldr	s15, [r3, #12]
 800262e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002632:	ee77 7a27 	vadd.f32	s15, s14, s15
		duty = (positionPID.pTerm * mmError)
 8002636:	4b5d      	ldr	r3, [pc, #372]	; (80027ac <onlyPositionControl+0x2ac>)
 8002638:	edc3 7a00 	vstr	s15, [r3]
		if (duty < 0) {
 800263c:	4b5b      	ldr	r3, [pc, #364]	; (80027ac <onlyPositionControl+0x2ac>)
 800263e:	edd3 7a00 	vldr	s15, [r3]
 8002642:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264a:	d50b      	bpl.n	8002664 <onlyPositionControl+0x164>
			dirAxisY = 0;
 800264c:	4b58      	ldr	r3, [pc, #352]	; (80027b0 <onlyPositionControl+0x2b0>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
			duty = (-1) * duty;
 8002652:	4b56      	ldr	r3, [pc, #344]	; (80027ac <onlyPositionControl+0x2ac>)
 8002654:	edd3 7a00 	vldr	s15, [r3]
 8002658:	eef1 7a67 	vneg.f32	s15, s15
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <onlyPositionControl+0x2ac>)
 800265e:	edc3 7a00 	vstr	s15, [r3]
 8002662:	e002      	b.n	800266a <onlyPositionControl+0x16a>
			dirAxisY = 1;
 8002664:	4b52      	ldr	r3, [pc, #328]	; (80027b0 <onlyPositionControl+0x2b0>)
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
		if (duty > 1000) {
 800266a:	4b50      	ldr	r3, [pc, #320]	; (80027ac <onlyPositionControl+0x2ac>)
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80027b4 <onlyPositionControl+0x2b4>
 8002674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267c:	dd03      	ble.n	8002686 <onlyPositionControl+0x186>
			duty = 1000;
 800267e:	4b4b      	ldr	r3, [pc, #300]	; (80027ac <onlyPositionControl+0x2ac>)
 8002680:	4a4d      	ldr	r2, [pc, #308]	; (80027b8 <onlyPositionControl+0x2b8>)
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	e00d      	b.n	80026a2 <onlyPositionControl+0x1a2>
		} else if (duty <= 100) {
 8002686:	4b49      	ldr	r3, [pc, #292]	; (80027ac <onlyPositionControl+0x2ac>)
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80027bc <onlyPositionControl+0x2bc>
 8002690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002698:	d803      	bhi.n	80026a2 <onlyPositionControl+0x1a2>
			duty = 0;
 800269a:	4b44      	ldr	r3, [pc, #272]	; (80027ac <onlyPositionControl+0x2ac>)
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
		setMotor();
 80026a2:	f7ff fe7f 	bl	80023a4 <setMotor>
		prePos = mmActPos;
 80026a6:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <onlyPositionControl+0x290>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a3a      	ldr	r2, [pc, #232]	; (8002794 <onlyPositionControl+0x294>)
 80026ac:	6013      	str	r3, [r2, #0]
		preVel = mmActVel;
 80026ae:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <onlyPositionControl+0x298>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a3a      	ldr	r2, [pc, #232]	; (800279c <onlyPositionControl+0x29c>)
 80026b4:	6013      	str	r3, [r2, #0]
		finalPIDChecky = result.posTraj;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	4a41      	ldr	r2, [pc, #260]	; (80027c0 <onlyPositionControl+0x2c0>)
 80026ba:	6013      	str	r3, [r2, #0]
		if (targetPos != 0 && result.posTraj != 0.0 && passInit && result.velTraj == 0.0) {
 80026bc:	edd7 7a00 	vldr	s15, [r7]
 80026c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c8:	d02d      	beq.n	8002726 <onlyPositionControl+0x226>
 80026ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80026ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d6:	d026      	beq.n	8002726 <onlyPositionControl+0x226>
 80026d8:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <onlyPositionControl+0x2c4>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d022      	beq.n	8002726 <onlyPositionControl+0x226>
 80026e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80026e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ec:	d11b      	bne.n	8002726 <onlyPositionControl+0x226>
			if (fabs(mmError) <= 0.6 && duty == 0) //&& passInit
 80026ee:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <onlyPositionControl+0x2a4>)
 80026f0:	edd3 7a00 	vldr	s15, [r3]
 80026f4:	eef0 7ae7 	vabs.f32	s15, s15
 80026f8:	ee17 0a90 	vmov	r0, s15
 80026fc:	f7fd fed0 	bl	80004a0 <__aeabi_f2d>
 8002700:	a31f      	add	r3, pc, #124	; (adr r3, 8002780 <onlyPositionControl+0x280>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	f7fe f99f 	bl	8000a48 <__aeabi_dcmple>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <onlyPositionControl+0x226>
 8002710:	4b26      	ldr	r3, [pc, #152]	; (80027ac <onlyPositionControl+0x2ac>)
 8002712:	edd3 7a00 	vldr	s15, [r3]
 8002716:	eef5 7a40 	vcmp.f32	s15, #0.0
 800271a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271e:	d102      	bne.n	8002726 <onlyPositionControl+0x226>
				PIDCase = 1;
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <onlyPositionControl+0x288>)
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
		passInit = 1;
 8002726:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <onlyPositionControl+0x2c4>)
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
		break;
 800272c:	e01b      	b.n	8002766 <onlyPositionControl+0x266>
		if (runTrayModeCase == 2) {
 800272e:	4b26      	ldr	r3, [pc, #152]	; (80027c8 <onlyPositionControl+0x2c8>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d109      	bne.n	800274a <onlyPositionControl+0x24a>
			runTrayModeCase = 3;
 8002736:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <onlyPositionControl+0x2c8>)
 8002738:	2203      	movs	r2, #3
 800273a:	701a      	strb	r2, [r3, #0]
			passInit = 0;
 800273c:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <onlyPositionControl+0x2c4>)
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
			PIDCase = 0;
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <onlyPositionControl+0x288>)
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
		break;
 8002748:	e00c      	b.n	8002764 <onlyPositionControl+0x264>
		} else if (runTrayModeCase == 5) {
 800274a:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <onlyPositionControl+0x2c8>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b05      	cmp	r3, #5
 8002750:	d108      	bne.n	8002764 <onlyPositionControl+0x264>
			runTrayModeCase = 6;
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <onlyPositionControl+0x2c8>)
 8002754:	2206      	movs	r2, #6
 8002756:	701a      	strb	r2, [r3, #0]
			passInit = 0;
 8002758:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <onlyPositionControl+0x2c4>)
 800275a:	2200      	movs	r2, #0
 800275c:	701a      	strb	r2, [r3, #0]
			PIDCase = 0;
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <onlyPositionControl+0x288>)
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
		break;
 8002764:	bf00      	nop
}
 8002766:	bf00      	nop
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bdb0      	pop	{r4, r5, r7, pc}
 800276e:	bf00      	nop
 8002770:	464f6faa 	.word	0x464f6faa
 8002774:	3f8199cb 	.word	0x3f8199cb
 8002778:	d2f1a9fc 	.word	0xd2f1a9fc
 800277c:	3f50624d 	.word	0x3f50624d
 8002780:	33333333 	.word	0x33333333
 8002784:	3fe33333 	.word	0x3fe33333
 8002788:	20000f4e 	.word	0x20000f4e
 800278c:	20000e10 	.word	0x20000e10
 8002790:	20000e18 	.word	0x20000e18
 8002794:	20000e28 	.word	0x20000e28
 8002798:	20000e20 	.word	0x20000e20
 800279c:	20000e2c 	.word	0x20000e2c
 80027a0:	20000e24 	.word	0x20000e24
 80027a4:	20000e1c 	.word	0x20000e1c
 80027a8:	20000248 	.word	0x20000248
 80027ac:	20000e08 	.word	0x20000e08
 80027b0:	20000244 	.word	0x20000244
 80027b4:	447a0000 	.word	0x447a0000
 80027b8:	447a0000 	.word	0x447a0000
 80027bc:	42c80000 	.word	0x42c80000
 80027c0:	20000f54 	.word	0x20000f54
 80027c4:	20000f4c 	.word	0x20000f4c
 80027c8:	20000f49 	.word	0x20000f49

080027cc <jogAxisY>:

void jogAxisY() {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
	refYPos = buffer[0].subdata.yAxis;
 80027d0:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <jogAxisY+0xec>)
 80027d2:	885b      	ldrh	r3, [r3, #2]
 80027d4:	ee07 3a90 	vmov	s15, r3
 80027d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027dc:	4b37      	ldr	r3, [pc, #220]	; (80028bc <jogAxisY+0xf0>)
 80027de:	edc3 7a00 	vstr	s15, [r3]
	if (refYPos > 2500) {
 80027e2:	4b36      	ldr	r3, [pc, #216]	; (80028bc <jogAxisY+0xf0>)
 80027e4:	edd3 7a00 	vldr	s15, [r3]
 80027e8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80028c0 <jogAxisY+0xf4>
 80027ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f4:	dd03      	ble.n	80027fe <jogAxisY+0x32>
		dirAxisY = 1;
 80027f6:	4b33      	ldr	r3, [pc, #204]	; (80028c4 <jogAxisY+0xf8>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e00c      	b.n	8002818 <jogAxisY+0x4c>
	} else if (refYPos < 1500) {
 80027fe:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <jogAxisY+0xf0>)
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80028c8 <jogAxisY+0xfc>
 8002808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002810:	d502      	bpl.n	8002818 <jogAxisY+0x4c>
		dirAxisY = 0;
 8002812:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <jogAxisY+0xf8>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
	}
	if (refYPos > 3600 || refYPos < 100) {
 8002818:	4b28      	ldr	r3, [pc, #160]	; (80028bc <jogAxisY+0xf0>)
 800281a:	edd3 7a00 	vldr	s15, [r3]
 800281e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80028cc <jogAxisY+0x100>
 8002822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282a:	dc09      	bgt.n	8002840 <jogAxisY+0x74>
 800282c:	4b23      	ldr	r3, [pc, #140]	; (80028bc <jogAxisY+0xf0>)
 800282e:	edd3 7a00 	vldr	s15, [r3]
 8002832:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80028d0 <jogAxisY+0x104>
 8002836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283e:	d503      	bpl.n	8002848 <jogAxisY+0x7c>
		duty = 250;
 8002840:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <jogAxisY+0x108>)
 8002842:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <jogAxisY+0x10c>)
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	e033      	b.n	80028b0 <jogAxisY+0xe4>
	} else if (refYPos > 2500 && refYPos <= 3600) {
 8002848:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <jogAxisY+0xf0>)
 800284a:	edd3 7a00 	vldr	s15, [r3]
 800284e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80028c0 <jogAxisY+0xf4>
 8002852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285a:	dd0d      	ble.n	8002878 <jogAxisY+0xac>
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <jogAxisY+0xf0>)
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80028cc <jogAxisY+0x100>
 8002866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286e:	d803      	bhi.n	8002878 <jogAxisY+0xac>
		duty = 200;
 8002870:	4b18      	ldr	r3, [pc, #96]	; (80028d4 <jogAxisY+0x108>)
 8002872:	4a1a      	ldr	r2, [pc, #104]	; (80028dc <jogAxisY+0x110>)
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	e01b      	b.n	80028b0 <jogAxisY+0xe4>
	}

	else if (refYPos > 100 && refYPos <= 1500) {
 8002878:	4b10      	ldr	r3, [pc, #64]	; (80028bc <jogAxisY+0xf0>)
 800287a:	edd3 7a00 	vldr	s15, [r3]
 800287e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80028d0 <jogAxisY+0x104>
 8002882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288a:	dd0d      	ble.n	80028a8 <jogAxisY+0xdc>
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <jogAxisY+0xf0>)
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80028c8 <jogAxisY+0xfc>
 8002896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289e:	d803      	bhi.n	80028a8 <jogAxisY+0xdc>
		duty = 200;
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <jogAxisY+0x108>)
 80028a2:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <jogAxisY+0x110>)
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e003      	b.n	80028b0 <jogAxisY+0xe4>
	} else {
		duty = 0;
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <jogAxisY+0x108>)
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
	}
	setMotor();
 80028b0:	f7ff fd78 	bl	80023a4 <setMotor>

}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000dd8 	.word	0x20000dd8
 80028bc:	20000224 	.word	0x20000224
 80028c0:	451c4000 	.word	0x451c4000
 80028c4:	20000244 	.word	0x20000244
 80028c8:	44bb8000 	.word	0x44bb8000
 80028cc:	45610000 	.word	0x45610000
 80028d0:	42c80000 	.word	0x42c80000
 80028d4:	20000e08 	.word	0x20000e08
 80028d8:	437a0000 	.word	0x437a0000
 80028dc:	43480000 	.word	0x43480000

080028e0 <photoDetect>:

void photoDetect() {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
	photoSig[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);  // MOTOR Photo Sensor
 80028e4:	2120      	movs	r1, #32
 80028e6:	480d      	ldr	r0, [pc, #52]	; (800291c <photoDetect+0x3c>)
 80028e8:	f003 f998 	bl	8005c1c <HAL_GPIO_ReadPin>
 80028ec:	4603      	mov	r3, r0
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <photoDetect+0x40>)
 80028f2:	701a      	strb	r2, [r3, #0]
	photoSig[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // CENTER Photo Sensor
 80028f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028f8:	4808      	ldr	r0, [pc, #32]	; (800291c <photoDetect+0x3c>)
 80028fa:	f003 f98f 	bl	8005c1c <HAL_GPIO_ReadPin>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	4b07      	ldr	r3, [pc, #28]	; (8002920 <photoDetect+0x40>)
 8002904:	705a      	strb	r2, [r3, #1]
	photoSig[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);  // ENCODER Photo Sensor
 8002906:	f44f 7100 	mov.w	r1, #512	; 0x200
 800290a:	4804      	ldr	r0, [pc, #16]	; (800291c <photoDetect+0x3c>)
 800290c:	f003 f986 	bl	8005c1c <HAL_GPIO_ReadPin>
 8002910:	4603      	mov	r3, r0
 8002912:	461a      	mov	r2, r3
 8002914:	4b02      	ldr	r3, [pc, #8]	; (8002920 <photoDetect+0x40>)
 8002916:	709a      	strb	r2, [r3, #2]
}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40020400 	.word	0x40020400
 8002920:	20000e34 	.word	0x20000e34
 8002924:	00000000 	.word	0x00000000

08002928 <trapezoidalTraj>:

calculationTraj trapezoidalTraj(float qi, float qf) {
 8002928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800292c:	b096      	sub	sp, #88	; 0x58
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	ed87 0a02 	vstr	s0, [r7, #8]
 8002936:	edc7 0a01 	vstr	s1, [r7, #4]
	calculationTraj result;

	float diffPos = abs(qf - qi);
 800293a:	ed97 7a01 	vldr	s14, [r7, #4]
 800293e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002946:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800294a:	ee17 3a90 	vmov	r3, s15
 800294e:	2b00      	cmp	r3, #0
 8002950:	bfb8      	it	lt
 8002952:	425b      	neglt	r3, r3
 8002954:	ee07 3a90 	vmov	s15, r3
 8002958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800295c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	int8_t handleMinus = (qf - qi) / diffPos;
 8002960:	ed97 7a01 	vldr	s14, [r7, #4]
 8002964:	edd7 7a02 	vldr	s15, [r7, #8]
 8002968:	ee77 6a67 	vsub.f32	s13, s14, s15
 800296c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002978:	edc7 7a00 	vstr	s15, [r7]
 800297c:	783b      	ldrb	r3, [r7, #0]
 800297e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	float timeTrapSeg1 = qdm / qddm;
 8002982:	4bb3      	ldr	r3, [pc, #716]	; (8002c50 <trapezoidalTraj+0x328>)
 8002984:	edd3 6a00 	vldr	s13, [r3]
 8002988:	4bb2      	ldr	r3, [pc, #712]	; (8002c54 <trapezoidalTraj+0x32c>)
 800298a:	ed93 7a00 	vldr	s14, [r3]
 800298e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002992:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float timeTriSeg1 = pow((diffPos / qddm), 0.5);
 8002996:	4baf      	ldr	r3, [pc, #700]	; (8002c54 <trapezoidalTraj+0x32c>)
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80029a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80029a4:	ee16 0a90 	vmov	r0, s13
 80029a8:	f7fd fd7a 	bl	80004a0 <__aeabi_f2d>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	ed9f 1ba5 	vldr	d1, [pc, #660]	; 8002c48 <trapezoidalTraj+0x320>
 80029b4:	ec43 2b10 	vmov	d0, r2, r3
 80029b8:	f009 fb7a 	bl	800c0b0 <pow>
 80029bc:	ec53 2b10 	vmov	r2, r3, d0
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f7fe f89c 	bl	8000b00 <__aeabi_d2f>
 80029c8:	4603      	mov	r3, r0
 80029ca:	64bb      	str	r3, [r7, #72]	; 0x48

	if (timeTriSeg1 < timeTrapSeg1) // triangle shape
 80029cc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80029d0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80029d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029dc:	f140 8140 	bpl.w	8002c60 <trapezoidalTraj+0x338>
			{
		float qTriSeg1 = 0.5 * qddm * timeTriSeg1 * timeTriSeg1;
 80029e0:	4b9c      	ldr	r3, [pc, #624]	; (8002c54 <trapezoidalTraj+0x32c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fd fd5b 	bl	80004a0 <__aeabi_f2d>
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	4b9a      	ldr	r3, [pc, #616]	; (8002c58 <trapezoidalTraj+0x330>)
 80029f0:	f7fd fdae 	bl	8000550 <__aeabi_dmul>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4614      	mov	r4, r2
 80029fa:	461d      	mov	r5, r3
 80029fc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80029fe:	f7fd fd4f 	bl	80004a0 <__aeabi_f2d>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4620      	mov	r0, r4
 8002a08:	4629      	mov	r1, r5
 8002a0a:	f7fd fda1 	bl	8000550 <__aeabi_dmul>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4614      	mov	r4, r2
 8002a14:	461d      	mov	r5, r3
 8002a16:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002a18:	f7fd fd42 	bl	80004a0 <__aeabi_f2d>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4620      	mov	r0, r4
 8002a22:	4629      	mov	r1, r5
 8002a24:	f7fd fd94 	bl	8000550 <__aeabi_dmul>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f7fe f866 	bl	8000b00 <__aeabi_d2f>
 8002a34:	4603      	mov	r3, r0
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
		float qdTriSeg1 = qddm * timeTriSeg1;
 8002a38:	4b86      	ldr	r3, [pc, #536]	; (8002c54 <trapezoidalTraj+0x32c>)
 8002a3a:	edd3 7a00 	vldr	s15, [r3]
 8002a3e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a46:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		if (actualTime <= timeTriSeg1) {
 8002a4a:	4b84      	ldr	r3, [pc, #528]	; (8002c5c <trapezoidalTraj+0x334>)
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002a54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5c:	db57      	blt.n	8002b0e <trapezoidalTraj+0x1e6>
			result.posTraj = qi
					+ (0.5 * qddm * actualTime * actualTime) * handleMinus;
 8002a5e:	68b8      	ldr	r0, [r7, #8]
 8002a60:	f7fd fd1e 	bl	80004a0 <__aeabi_f2d>
 8002a64:	4604      	mov	r4, r0
 8002a66:	460d      	mov	r5, r1
 8002a68:	4b7a      	ldr	r3, [pc, #488]	; (8002c54 <trapezoidalTraj+0x32c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd17 	bl	80004a0 <__aeabi_f2d>
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	4b78      	ldr	r3, [pc, #480]	; (8002c58 <trapezoidalTraj+0x330>)
 8002a78:	f7fd fd6a 	bl	8000550 <__aeabi_dmul>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4690      	mov	r8, r2
 8002a82:	4699      	mov	r9, r3
 8002a84:	4b75      	ldr	r3, [pc, #468]	; (8002c5c <trapezoidalTraj+0x334>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fd fd09 	bl	80004a0 <__aeabi_f2d>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4640      	mov	r0, r8
 8002a94:	4649      	mov	r1, r9
 8002a96:	f7fd fd5b 	bl	8000550 <__aeabi_dmul>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4690      	mov	r8, r2
 8002aa0:	4699      	mov	r9, r3
 8002aa2:	4b6e      	ldr	r3, [pc, #440]	; (8002c5c <trapezoidalTraj+0x334>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fd fcfa 	bl	80004a0 <__aeabi_f2d>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4640      	mov	r0, r8
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	f7fd fd4c 	bl	8000550 <__aeabi_dmul>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4690      	mov	r8, r2
 8002abe:	4699      	mov	r9, r3
 8002ac0:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fcd9 	bl	800047c <__aeabi_i2d>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4640      	mov	r0, r8
 8002ad0:	4649      	mov	r1, r9
 8002ad2:	f7fd fd3d 	bl	8000550 <__aeabi_dmul>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4620      	mov	r0, r4
 8002adc:	4629      	mov	r1, r5
 8002ade:	f7fd fb81 	bl	80001e4 <__adddf3>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f7fe f809 	bl	8000b00 <__aeabi_d2f>
 8002aee:	4603      	mov	r3, r0
			result.posTraj = qi
 8002af0:	617b      	str	r3, [r7, #20]
			result.velTraj = qddm * actualTime;
 8002af2:	4b58      	ldr	r3, [pc, #352]	; (8002c54 <trapezoidalTraj+0x32c>)
 8002af4:	ed93 7a00 	vldr	s14, [r3]
 8002af8:	4b58      	ldr	r3, [pc, #352]	; (8002c5c <trapezoidalTraj+0x334>)
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b02:	edc7 7a06 	vstr	s15, [r7, #24]
			result.accTraj = qddm;
 8002b06:	4b53      	ldr	r3, [pc, #332]	; (8002c54 <trapezoidalTraj+0x32c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	e282      	b.n	8003014 <trapezoidalTraj+0x6ec>
		}

		else if (actualTime > timeTriSeg1 && actualTime <= (timeTriSeg1 * 2)) {
 8002b0e:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <trapezoidalTraj+0x334>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002b18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b20:	f140 8086 	bpl.w	8002c30 <trapezoidalTraj+0x308>
 8002b24:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002b28:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b2c:	4b4b      	ldr	r3, [pc, #300]	; (8002c5c <trapezoidalTraj+0x334>)
 8002b2e:	edd3 7a00 	vldr	s15, [r3]
 8002b32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3a:	db79      	blt.n	8002c30 <trapezoidalTraj+0x308>
			float actualTimeSeg2 = actualTime - timeTriSeg1;
 8002b3c:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <trapezoidalTraj+0x334>)
 8002b3e:	ed93 7a00 	vldr	s14, [r3]
 8002b42:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b4a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			result.posTraj = qi
					+ (qTriSeg1 + (qdTriSeg1 * actualTimeSeg2)
 8002b4e:	68b8      	ldr	r0, [r7, #8]
 8002b50:	f7fd fca6 	bl	80004a0 <__aeabi_f2d>
 8002b54:	4604      	mov	r4, r0
 8002b56:	460d      	mov	r5, r1
 8002b58:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002b5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b64:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6c:	ee17 0a90 	vmov	r0, s15
 8002b70:	f7fd fc96 	bl	80004a0 <__aeabi_f2d>
 8002b74:	4680      	mov	r8, r0
 8002b76:	4689      	mov	r9, r1
							- (0.5 * qddm * actualTimeSeg2 * actualTimeSeg2))
 8002b78:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <trapezoidalTraj+0x32c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fd fc8f 	bl	80004a0 <__aeabi_f2d>
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	4b34      	ldr	r3, [pc, #208]	; (8002c58 <trapezoidalTraj+0x330>)
 8002b88:	f7fd fce2 	bl	8000550 <__aeabi_dmul>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4692      	mov	sl, r2
 8002b92:	469b      	mov	fp, r3
 8002b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b96:	f7fd fc83 	bl	80004a0 <__aeabi_f2d>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4650      	mov	r0, sl
 8002ba0:	4659      	mov	r1, fp
 8002ba2:	f7fd fcd5 	bl	8000550 <__aeabi_dmul>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4692      	mov	sl, r2
 8002bac:	469b      	mov	fp, r3
 8002bae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bb0:	f7fd fc76 	bl	80004a0 <__aeabi_f2d>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4650      	mov	r0, sl
 8002bba:	4659      	mov	r1, fp
 8002bbc:	f7fd fcc8 	bl	8000550 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4640      	mov	r0, r8
 8002bc6:	4649      	mov	r1, r9
 8002bc8:	f7fd fb0a 	bl	80001e0 <__aeabi_dsub>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4690      	mov	r8, r2
 8002bd2:	4699      	mov	r9, r3
							* handleMinus;
 8002bd4:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fc4f 	bl	800047c <__aeabi_i2d>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4640      	mov	r0, r8
 8002be4:	4649      	mov	r1, r9
 8002be6:	f7fd fcb3 	bl	8000550 <__aeabi_dmul>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
					+ (qTriSeg1 + (qdTriSeg1 * actualTimeSeg2)
 8002bee:	4620      	mov	r0, r4
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	f7fd faf7 	bl	80001e4 <__adddf3>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f7fd ff7f 	bl	8000b00 <__aeabi_d2f>
 8002c02:	4603      	mov	r3, r0
			result.posTraj = qi
 8002c04:	617b      	str	r3, [r7, #20]
			result.velTraj = qdTriSeg1 - (qddm * actualTimeSeg2);
 8002c06:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <trapezoidalTraj+0x32c>)
 8002c08:	ed93 7a00 	vldr	s14, [r3]
 8002c0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c14:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1c:	edc7 7a06 	vstr	s15, [r7, #24]
			result.accTraj = -qddm;
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <trapezoidalTraj+0x32c>)
 8002c22:	edd3 7a00 	vldr	s15, [r3]
 8002c26:	eef1 7a67 	vneg.f32	s15, s15
 8002c2a:	edc7 7a07 	vstr	s15, [r7, #28]
		else if (actualTime > timeTriSeg1 && actualTime <= (timeTriSeg1 * 2)) {
 8002c2e:	e1f1      	b.n	8003014 <trapezoidalTraj+0x6ec>
		}

		else {
			result.posTraj = qf;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	617b      	str	r3, [r7, #20]
			result.velTraj = 0;
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
			result.accTraj = 0;
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	e1e8      	b.n	8003014 <trapezoidalTraj+0x6ec>
 8002c42:	bf00      	nop
 8002c44:	f3af 8000 	nop.w
 8002c48:	00000000 	.word	0x00000000
 8002c4c:	3fe00000 	.word	0x3fe00000
 8002c50:	2000025c 	.word	0x2000025c
 8002c54:	20000258 	.word	0x20000258
 8002c58:	3fe00000 	.word	0x3fe00000
 8002c5c:	20000260 	.word	0x20000260
	}

	else // trapezoidal shape
	{
		float timeTrapSeg2 = (diffPos
				- (2 * 0.5 * qddm * (timeTrapSeg1) * (timeTrapSeg1))) / qdm;
 8002c60:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002c62:	f7fd fc1d 	bl	80004a0 <__aeabi_f2d>
 8002c66:	4604      	mov	r4, r0
 8002c68:	460d      	mov	r5, r1
 8002c6a:	4b90      	ldr	r3, [pc, #576]	; (8002eac <trapezoidalTraj+0x584>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fc16 	bl	80004a0 <__aeabi_f2d>
 8002c74:	4680      	mov	r8, r0
 8002c76:	4689      	mov	r9, r1
 8002c78:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002c7a:	f7fd fc11 	bl	80004a0 <__aeabi_f2d>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4640      	mov	r0, r8
 8002c84:	4649      	mov	r1, r9
 8002c86:	f7fd fc63 	bl	8000550 <__aeabi_dmul>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4690      	mov	r8, r2
 8002c90:	4699      	mov	r9, r3
 8002c92:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002c94:	f7fd fc04 	bl	80004a0 <__aeabi_f2d>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4640      	mov	r0, r8
 8002c9e:	4649      	mov	r1, r9
 8002ca0:	f7fd fc56 	bl	8000550 <__aeabi_dmul>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4620      	mov	r0, r4
 8002caa:	4629      	mov	r1, r5
 8002cac:	f7fd fa98 	bl	80001e0 <__aeabi_dsub>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4614      	mov	r4, r2
 8002cb6:	461d      	mov	r5, r3
 8002cb8:	4b7d      	ldr	r3, [pc, #500]	; (8002eb0 <trapezoidalTraj+0x588>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fbef 	bl	80004a0 <__aeabi_f2d>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	4629      	mov	r1, r5
 8002cca:	f7fd fd6b 	bl	80007a4 <__aeabi_ddiv>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
		float timeTrapSeg2 = (diffPos
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f7fd ff13 	bl	8000b00 <__aeabi_d2f>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	647b      	str	r3, [r7, #68]	; 0x44
		float timeTrapSeg3 = qdm / qddm;
 8002cde:	4b74      	ldr	r3, [pc, #464]	; (8002eb0 <trapezoidalTraj+0x588>)
 8002ce0:	edd3 6a00 	vldr	s13, [r3]
 8002ce4:	4b71      	ldr	r3, [pc, #452]	; (8002eac <trapezoidalTraj+0x584>)
 8002ce6:	ed93 7a00 	vldr	s14, [r3]
 8002cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cee:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		float qTrapSeg1 = 0.5 * qddm * (timeTrapSeg1) * (timeTrapSeg1);
 8002cf2:	4b6e      	ldr	r3, [pc, #440]	; (8002eac <trapezoidalTraj+0x584>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fbd2 	bl	80004a0 <__aeabi_f2d>
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	4b6c      	ldr	r3, [pc, #432]	; (8002eb4 <trapezoidalTraj+0x58c>)
 8002d02:	f7fd fc25 	bl	8000550 <__aeabi_dmul>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4614      	mov	r4, r2
 8002d0c:	461d      	mov	r5, r3
 8002d0e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002d10:	f7fd fbc6 	bl	80004a0 <__aeabi_f2d>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4620      	mov	r0, r4
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	f7fd fc18 	bl	8000550 <__aeabi_dmul>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4614      	mov	r4, r2
 8002d26:	461d      	mov	r5, r3
 8002d28:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002d2a:	f7fd fbb9 	bl	80004a0 <__aeabi_f2d>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4620      	mov	r0, r4
 8002d34:	4629      	mov	r1, r5
 8002d36:	f7fd fc0b 	bl	8000550 <__aeabi_dmul>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	f7fd fedd 	bl	8000b00 <__aeabi_d2f>
 8002d46:	4603      	mov	r3, r0
 8002d48:	63fb      	str	r3, [r7, #60]	; 0x3c
		float qTrapSeg2 = qTrapSeg1 + (qdm * timeTrapSeg2);
 8002d4a:	4b59      	ldr	r3, [pc, #356]	; (8002eb0 <trapezoidalTraj+0x588>)
 8002d4c:	ed93 7a00 	vldr	s14, [r3]
 8002d50:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d58:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d60:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		if (actualTime <= timeTrapSeg1) {
 8002d64:	4b54      	ldr	r3, [pc, #336]	; (8002eb8 <trapezoidalTraj+0x590>)
 8002d66:	edd3 7a00 	vldr	s15, [r3]
 8002d6a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002d6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d76:	db57      	blt.n	8002e28 <trapezoidalTraj+0x500>
			result.posTraj = qi
					+ (0.5 * qddm * actualTime * actualTime) * handleMinus;
 8002d78:	68b8      	ldr	r0, [r7, #8]
 8002d7a:	f7fd fb91 	bl	80004a0 <__aeabi_f2d>
 8002d7e:	4604      	mov	r4, r0
 8002d80:	460d      	mov	r5, r1
 8002d82:	4b4a      	ldr	r3, [pc, #296]	; (8002eac <trapezoidalTraj+0x584>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fb8a 	bl	80004a0 <__aeabi_f2d>
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	4b48      	ldr	r3, [pc, #288]	; (8002eb4 <trapezoidalTraj+0x58c>)
 8002d92:	f7fd fbdd 	bl	8000550 <__aeabi_dmul>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4690      	mov	r8, r2
 8002d9c:	4699      	mov	r9, r3
 8002d9e:	4b46      	ldr	r3, [pc, #280]	; (8002eb8 <trapezoidalTraj+0x590>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fb7c 	bl	80004a0 <__aeabi_f2d>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4640      	mov	r0, r8
 8002dae:	4649      	mov	r1, r9
 8002db0:	f7fd fbce 	bl	8000550 <__aeabi_dmul>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4690      	mov	r8, r2
 8002dba:	4699      	mov	r9, r3
 8002dbc:	4b3e      	ldr	r3, [pc, #248]	; (8002eb8 <trapezoidalTraj+0x590>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fb6d 	bl	80004a0 <__aeabi_f2d>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4640      	mov	r0, r8
 8002dcc:	4649      	mov	r1, r9
 8002dce:	f7fd fbbf 	bl	8000550 <__aeabi_dmul>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4690      	mov	r8, r2
 8002dd8:	4699      	mov	r9, r3
 8002dda:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fd fb4c 	bl	800047c <__aeabi_i2d>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4640      	mov	r0, r8
 8002dea:	4649      	mov	r1, r9
 8002dec:	f7fd fbb0 	bl	8000550 <__aeabi_dmul>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4620      	mov	r0, r4
 8002df6:	4629      	mov	r1, r5
 8002df8:	f7fd f9f4 	bl	80001e4 <__adddf3>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4610      	mov	r0, r2
 8002e02:	4619      	mov	r1, r3
 8002e04:	f7fd fe7c 	bl	8000b00 <__aeabi_d2f>
 8002e08:	4603      	mov	r3, r0
			result.posTraj = qi
 8002e0a:	617b      	str	r3, [r7, #20]
			result.velTraj = qddm * actualTime;
 8002e0c:	4b27      	ldr	r3, [pc, #156]	; (8002eac <trapezoidalTraj+0x584>)
 8002e0e:	ed93 7a00 	vldr	s14, [r3]
 8002e12:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <trapezoidalTraj+0x590>)
 8002e14:	edd3 7a00 	vldr	s15, [r3]
 8002e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1c:	edc7 7a06 	vstr	s15, [r7, #24]
			result.accTraj = qddm;
 8002e20:	4b22      	ldr	r3, [pc, #136]	; (8002eac <trapezoidalTraj+0x584>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	e0f5      	b.n	8003014 <trapezoidalTraj+0x6ec>
		} else if (actualTime > timeTrapSeg1
 8002e28:	4b23      	ldr	r3, [pc, #140]	; (8002eb8 <trapezoidalTraj+0x590>)
 8002e2a:	edd3 7a00 	vldr	s15, [r3]
 8002e2e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002e32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e3a:	d53f      	bpl.n	8002ebc <trapezoidalTraj+0x594>
				&& actualTime <= timeTrapSeg2 + timeTrapSeg1) {
 8002e3c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002e40:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <trapezoidalTraj+0x590>)
 8002e4a:	edd3 7a00 	vldr	s15, [r3]
 8002e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e56:	db31      	blt.n	8002ebc <trapezoidalTraj+0x594>
			float t2 = actualTime - timeTrapSeg1;
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <trapezoidalTraj+0x590>)
 8002e5a:	ed93 7a00 	vldr	s14, [r3]
 8002e5e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e66:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			result.posTraj = qi + (qTrapSeg1 + qdm * (t2)) * handleMinus;
 8002e6a:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <trapezoidalTraj+0x588>)
 8002e6c:	ed93 7a00 	vldr	s14, [r3]
 8002e70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e78:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e80:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002e84:	ee07 3a90 	vmov	s15, r3
 8002e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e90:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e98:	edc7 7a05 	vstr	s15, [r7, #20]
			result.velTraj = qdm;
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <trapezoidalTraj+0x588>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	61bb      	str	r3, [r7, #24]
			result.accTraj = 0;
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	61fb      	str	r3, [r7, #28]
				&& actualTime <= timeTrapSeg2 + timeTrapSeg1) {
 8002ea8:	e0b4      	b.n	8003014 <trapezoidalTraj+0x6ec>
 8002eaa:	bf00      	nop
 8002eac:	20000258 	.word	0x20000258
 8002eb0:	2000025c 	.word	0x2000025c
 8002eb4:	3fe00000 	.word	0x3fe00000
 8002eb8:	20000260 	.word	0x20000260
		} else if (actualTime > timeTrapSeg2 + timeTrapSeg1
 8002ebc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002ec0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ec8:	4b8b      	ldr	r3, [pc, #556]	; (80030f8 <trapezoidalTraj+0x7d0>)
 8002eca:	edd3 7a00 	vldr	s15, [r3]
 8002ece:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed6:	f140 8095 	bpl.w	8003004 <trapezoidalTraj+0x6dc>
				&& actualTime <= timeTrapSeg3 + timeTrapSeg2 + timeTrapSeg1) {
 8002eda:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002ede:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002ee2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002eea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eee:	4b82      	ldr	r3, [pc, #520]	; (80030f8 <trapezoidalTraj+0x7d0>)
 8002ef0:	edd3 7a00 	vldr	s15, [r3]
 8002ef4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efc:	f2c0 8082 	blt.w	8003004 <trapezoidalTraj+0x6dc>
			float t3 = actualTime - timeTrapSeg2 - timeTrapSeg1;
 8002f00:	4b7d      	ldr	r3, [pc, #500]	; (80030f8 <trapezoidalTraj+0x7d0>)
 8002f02:	ed93 7a00 	vldr	s14, [r3]
 8002f06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f0e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f16:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			result.posTraj = qi
					+ (qTrapSeg2 + (qdm * t3) - 0.5 * qddm * t3 * t3)
 8002f1a:	68b8      	ldr	r0, [r7, #8]
 8002f1c:	f7fd fac0 	bl	80004a0 <__aeabi_f2d>
 8002f20:	4604      	mov	r4, r0
 8002f22:	460d      	mov	r5, r1
 8002f24:	4b75      	ldr	r3, [pc, #468]	; (80030fc <trapezoidalTraj+0x7d4>)
 8002f26:	ed93 7a00 	vldr	s14, [r3]
 8002f2a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002f2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f32:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f3a:	ee17 0a90 	vmov	r0, s15
 8002f3e:	f7fd faaf 	bl	80004a0 <__aeabi_f2d>
 8002f42:	4680      	mov	r8, r0
 8002f44:	4689      	mov	r9, r1
 8002f46:	4b6e      	ldr	r3, [pc, #440]	; (8003100 <trapezoidalTraj+0x7d8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd faa8 	bl	80004a0 <__aeabi_f2d>
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	4b6b      	ldr	r3, [pc, #428]	; (8003104 <trapezoidalTraj+0x7dc>)
 8002f56:	f7fd fafb 	bl	8000550 <__aeabi_dmul>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4692      	mov	sl, r2
 8002f60:	469b      	mov	fp, r3
 8002f62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f64:	f7fd fa9c 	bl	80004a0 <__aeabi_f2d>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4650      	mov	r0, sl
 8002f6e:	4659      	mov	r1, fp
 8002f70:	f7fd faee 	bl	8000550 <__aeabi_dmul>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4692      	mov	sl, r2
 8002f7a:	469b      	mov	fp, r3
 8002f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f7e:	f7fd fa8f 	bl	80004a0 <__aeabi_f2d>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4650      	mov	r0, sl
 8002f88:	4659      	mov	r1, fp
 8002f8a:	f7fd fae1 	bl	8000550 <__aeabi_dmul>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4640      	mov	r0, r8
 8002f94:	4649      	mov	r1, r9
 8002f96:	f7fd f923 	bl	80001e0 <__aeabi_dsub>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4690      	mov	r8, r2
 8002fa0:	4699      	mov	r9, r3
							* handleMinus;
 8002fa2:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd fa68 	bl	800047c <__aeabi_i2d>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4640      	mov	r0, r8
 8002fb2:	4649      	mov	r1, r9
 8002fb4:	f7fd facc 	bl	8000550 <__aeabi_dmul>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
					+ (qTrapSeg2 + (qdm * t3) - 0.5 * qddm * t3 * t3)
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	4629      	mov	r1, r5
 8002fc0:	f7fd f910 	bl	80001e4 <__adddf3>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f7fd fd98 	bl	8000b00 <__aeabi_d2f>
 8002fd0:	4603      	mov	r3, r0
			result.posTraj = qi
 8002fd2:	617b      	str	r3, [r7, #20]
			result.velTraj = -qddm * t3 + qdm;
 8002fd4:	4b4a      	ldr	r3, [pc, #296]	; (8003100 <trapezoidalTraj+0x7d8>)
 8002fd6:	edd3 7a00 	vldr	s15, [r3]
 8002fda:	eeb1 7a67 	vneg.f32	s14, s15
 8002fde:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002fe2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fe6:	4b45      	ldr	r3, [pc, #276]	; (80030fc <trapezoidalTraj+0x7d4>)
 8002fe8:	edd3 7a00 	vldr	s15, [r3]
 8002fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff0:	edc7 7a06 	vstr	s15, [r7, #24]
			result.accTraj = -qddm;
 8002ff4:	4b42      	ldr	r3, [pc, #264]	; (8003100 <trapezoidalTraj+0x7d8>)
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	eef1 7a67 	vneg.f32	s15, s15
 8002ffe:	edc7 7a07 	vstr	s15, [r7, #28]
				&& actualTime <= timeTrapSeg3 + timeTrapSeg2 + timeTrapSeg1) {
 8003002:	e007      	b.n	8003014 <trapezoidalTraj+0x6ec>
		} else {
			result.posTraj = qf;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	617b      	str	r3, [r7, #20]
			result.velTraj = 0;
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
			result.accTraj = 0;
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	61fb      	str	r3, [r7, #28]

		}

	}

	checkPos = result.posTraj;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	4a3c      	ldr	r2, [pc, #240]	; (8003108 <trapezoidalTraj+0x7e0>)
 8003018:	6013      	str	r3, [r2, #0]
	checkVel = result.velTraj;
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	4a3b      	ldr	r2, [pc, #236]	; (800310c <trapezoidalTraj+0x7e4>)
 800301e:	6013      	str	r3, [r2, #0]
	checkAcc = result.accTraj;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	4a3b      	ldr	r2, [pc, #236]	; (8003110 <trapezoidalTraj+0x7e8>)
 8003024:	6013      	str	r3, [r2, #0]

	actualTime += 0.001;
 8003026:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <trapezoidalTraj+0x7d0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fa38 	bl	80004a0 <__aeabi_f2d>
 8003030:	a32f      	add	r3, pc, #188	; (adr r3, 80030f0 <trapezoidalTraj+0x7c8>)
 8003032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003036:	f7fd f8d5 	bl	80001e4 <__adddf3>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	f7fd fd5d 	bl	8000b00 <__aeabi_d2f>
 8003046:	4603      	mov	r3, r0
 8003048:	4a2b      	ldr	r2, [pc, #172]	; (80030f8 <trapezoidalTraj+0x7d0>)
 800304a:	6013      	str	r3, [r2, #0]

	// CHECK STATUS

	if (startPointModeY) {
 800304c:	4b31      	ldr	r3, [pc, #196]	; (8003114 <trapezoidalTraj+0x7ec>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d021      	beq.n	8003098 <trapezoidalTraj+0x770>
		// POINT MODE

		if (result.posTraj == qf) {
 8003054:	edd7 7a05 	vldr	s15, [r7, #20]
 8003058:	ed97 7a01 	vldr	s14, [r7, #4]
 800305c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003064:	d115      	bne.n	8003092 <trapezoidalTraj+0x76a>
			result.reachTraj = 1;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 3020 	strb.w	r3, [r7, #32]
			actualTime = 0.001;
 800306c:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <trapezoidalTraj+0x7d0>)
 800306e:	4a2a      	ldr	r2, [pc, #168]	; (8003118 <trapezoidalTraj+0x7f0>)
 8003070:	601a      	str	r2, [r3, #0]
			startPointModeY = 0;
 8003072:	4b28      	ldr	r3, [pc, #160]	; (8003114 <trapezoidalTraj+0x7ec>)
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
			initPosY = mmActPos;
 8003078:	4b28      	ldr	r3, [pc, #160]	; (800311c <trapezoidalTraj+0x7f4>)
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003082:	ee17 2a90 	vmov	r2, s15
 8003086:	4b26      	ldr	r3, [pc, #152]	; (8003120 <trapezoidalTraj+0x7f8>)
 8003088:	601a      	str	r2, [r3, #0]
			registerFrame[16].U16 = 0; // RESET : y-axis Moving Status
 800308a:	4b26      	ldr	r3, [pc, #152]	; (8003124 <trapezoidalTraj+0x7fc>)
 800308c:	2200      	movs	r2, #0
 800308e:	841a      	strh	r2, [r3, #32]
 8003090:	e002      	b.n	8003098 <trapezoidalTraj+0x770>
		} else {
			result.reachTraj = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	f887 3020 	strb.w	r3, [r7, #32]
		}
	}

	if (startRunTray) {
 8003098:	4b23      	ldr	r3, [pc, #140]	; (8003128 <trapezoidalTraj+0x800>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01b      	beq.n	80030d8 <trapezoidalTraj+0x7b0>
		// RUN TRAY MODE

		if (result.posTraj == qf) {
 80030a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80030a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80030a8:	eeb4 7a67 	vcmp.f32	s14, s15
 80030ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b0:	d10f      	bne.n	80030d2 <trapezoidalTraj+0x7aa>
			result.reachTraj = 1;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 3020 	strb.w	r3, [r7, #32]
			actualTime = 0.001;
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <trapezoidalTraj+0x7d0>)
 80030ba:	4a17      	ldr	r2, [pc, #92]	; (8003118 <trapezoidalTraj+0x7f0>)
 80030bc:	601a      	str	r2, [r3, #0]
			initPosY = mmActPos;
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <trapezoidalTraj+0x7f4>)
 80030c0:	edd3 7a00 	vldr	s15, [r3]
 80030c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030c8:	ee17 2a90 	vmov	r2, s15
 80030cc:	4b14      	ldr	r3, [pc, #80]	; (8003120 <trapezoidalTraj+0x7f8>)
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e002      	b.n	80030d8 <trapezoidalTraj+0x7b0>

		}

		else {
			result.reachTraj = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f887 3020 	strb.w	r3, [r7, #32]
		}
	}

	return result;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	461c      	mov	r4, r3
 80030dc:	f107 0314 	add.w	r3, r7, #20
 80030e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	3758      	adds	r7, #88	; 0x58
 80030ea:	46bd      	mov	sp, r7
 80030ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80030f4:	3f50624d 	.word	0x3f50624d
 80030f8:	20000260 	.word	0x20000260
 80030fc:	2000025c 	.word	0x2000025c
 8003100:	20000258 	.word	0x20000258
 8003104:	3fe00000 	.word	0x3fe00000
 8003108:	20000f28 	.word	0x20000f28
 800310c:	20000f2c 	.word	0x20000f2c
 8003110:	20000f30 	.word	0x20000f30
 8003114:	20000f35 	.word	0x20000f35
 8003118:	3a83126f 	.word	0x3a83126f
 800311c:	20000e18 	.word	0x20000e18
 8003120:	20000f38 	.word	0x20000f38
 8003124:	20000d44 	.word	0x20000d44
 8003128:	20000f47 	.word	0x20000f47
 800312c:	00000000 	.word	0x00000000

08003130 <calibrateTray>:

void calibrateTray(trayPos trayX, trayPos trayY, Point *objPos) {
 8003130:	b084      	sub	sp, #16
 8003132:	b5b0      	push	{r4, r5, r7, lr}
 8003134:	b092      	sub	sp, #72	; 0x48
 8003136:	af00      	add	r7, sp, #0
 8003138:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800313c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float length1 = pow(
			pow(trayX.pos1 - trayX.pos2, 2) + pow(trayY.pos1 - trayY.pos2, 2),
 8003140:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003144:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800314c:	ee17 0a90 	vmov	r0, s15
 8003150:	f7fd f9a6 	bl	80004a0 <__aeabi_f2d>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	ed9f 1bcd 	vldr	d1, [pc, #820]	; 8003490 <calibrateTray+0x360>
 800315c:	ec43 2b10 	vmov	d0, r2, r3
 8003160:	f008 ffa6 	bl	800c0b0 <pow>
 8003164:	ec55 4b10 	vmov	r4, r5, d0
 8003168:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800316c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003174:	ee17 0a90 	vmov	r0, s15
 8003178:	f7fd f992 	bl	80004a0 <__aeabi_f2d>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	ed9f 1bc3 	vldr	d1, [pc, #780]	; 8003490 <calibrateTray+0x360>
 8003184:	ec43 2b10 	vmov	d0, r2, r3
 8003188:	f008 ff92 	bl	800c0b0 <pow>
 800318c:	ec53 2b10 	vmov	r2, r3, d0
	float length1 = pow(
 8003190:	4620      	mov	r0, r4
 8003192:	4629      	mov	r1, r5
 8003194:	f7fd f826 	bl	80001e4 <__adddf3>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	ec43 2b17 	vmov	d7, r2, r3
 80031a0:	ed9f 1bbd 	vldr	d1, [pc, #756]	; 8003498 <calibrateTray+0x368>
 80031a4:	eeb0 0a47 	vmov.f32	s0, s14
 80031a8:	eef0 0a67 	vmov.f32	s1, s15
 80031ac:	f008 ff80 	bl	800c0b0 <pow>
 80031b0:	ec53 2b10 	vmov	r2, r3, d0
 80031b4:	4610      	mov	r0, r2
 80031b6:	4619      	mov	r1, r3
 80031b8:	f7fd fca2 	bl	8000b00 <__aeabi_d2f>
 80031bc:	4603      	mov	r3, r0
 80031be:	62fb      	str	r3, [r7, #44]	; 0x2c
			0.5);
	float length2 = pow(
			pow(trayX.pos2 - trayX.pos3, 2) + pow(trayY.pos2 - trayY.pos3, 2),
 80031c0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80031c4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80031c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031cc:	ee17 0a90 	vmov	r0, s15
 80031d0:	f7fd f966 	bl	80004a0 <__aeabi_f2d>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	ed9f 1bad 	vldr	d1, [pc, #692]	; 8003490 <calibrateTray+0x360>
 80031dc:	ec43 2b10 	vmov	d0, r2, r3
 80031e0:	f008 ff66 	bl	800c0b0 <pow>
 80031e4:	ec55 4b10 	vmov	r4, r5, d0
 80031e8:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80031ec:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80031f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031f4:	ee17 0a90 	vmov	r0, s15
 80031f8:	f7fd f952 	bl	80004a0 <__aeabi_f2d>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	ed9f 1ba3 	vldr	d1, [pc, #652]	; 8003490 <calibrateTray+0x360>
 8003204:	ec43 2b10 	vmov	d0, r2, r3
 8003208:	f008 ff52 	bl	800c0b0 <pow>
 800320c:	ec53 2b10 	vmov	r2, r3, d0
	float length2 = pow(
 8003210:	4620      	mov	r0, r4
 8003212:	4629      	mov	r1, r5
 8003214:	f7fc ffe6 	bl	80001e4 <__adddf3>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	ec43 2b17 	vmov	d7, r2, r3
 8003220:	ed9f 1b9d 	vldr	d1, [pc, #628]	; 8003498 <calibrateTray+0x368>
 8003224:	eeb0 0a47 	vmov.f32	s0, s14
 8003228:	eef0 0a67 	vmov.f32	s1, s15
 800322c:	f008 ff40 	bl	800c0b0 <pow>
 8003230:	ec53 2b10 	vmov	r2, r3, d0
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	f7fd fc62 	bl	8000b00 <__aeabi_d2f>
 800323c:	4603      	mov	r3, r0
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
			0.5);
	uint8_t k = 50;
 8003240:	2332      	movs	r3, #50	; 0x32
 8003242:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (length1 > length2) {
 8003246:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800324a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800324e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003256:	dd02      	ble.n	800325e <calibrateTray+0x12e>
		k = 60;
 8003258:	233c      	movs	r3, #60	; 0x3c
 800325a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	float length3 = trayY.pos1 - trayY.pos2;
 800325e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8003262:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float radians = acos(length3 / k);
 800326e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800327a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800327e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003282:	ee16 0a90 	vmov	r0, s13
 8003286:	f7fd f90b 	bl	80004a0 <__aeabi_f2d>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	ec43 2b10 	vmov	d0, r2, r3
 8003292:	f008 fed9 	bl	800c048 <acos>
 8003296:	ec53 2b10 	vmov	r2, r3, d0
 800329a:	4610      	mov	r0, r2
 800329c:	4619      	mov	r1, r3
 800329e:	f7fd fc2f 	bl	8000b00 <__aeabi_d2f>
 80032a2:	4603      	mov	r3, r0
 80032a4:	643b      	str	r3, [r7, #64]	; 0x40

	float TrayOriginX = trayX.pos2;
 80032a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	float TrayOriginY = trayY.pos2;
 80032aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
	int16_t writeDeg = 36000 - (radians * (180 / M_PI) * 100);
 80032ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80032b0:	f7fd f8f6 	bl	80004a0 <__aeabi_f2d>
 80032b4:	a37c      	add	r3, pc, #496	; (adr r3, 80034a8 <calibrateTray+0x378>)
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	f7fd f949 	bl	8000550 <__aeabi_dmul>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4610      	mov	r0, r2
 80032c4:	4619      	mov	r1, r3
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	4b7d      	ldr	r3, [pc, #500]	; (80034c0 <calibrateTray+0x390>)
 80032cc:	f7fd f940 	bl	8000550 <__aeabi_dmul>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	a172      	add	r1, pc, #456	; (adr r1, 80034a0 <calibrateTray+0x370>)
 80032d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032da:	f7fc ff81 	bl	80001e0 <__aeabi_dsub>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	f7fd fbe3 	bl	8000ab0 <__aeabi_d2iz>
 80032ea:	4603      	mov	r3, r0
 80032ec:	86fb      	strh	r3, [r7, #54]	; 0x36
	if (k == 60) {
 80032ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032f2:	2b3c      	cmp	r3, #60	; 0x3c
 80032f4:	d133      	bne.n	800335e <calibrateTray+0x22e>

		TrayOriginX = trayX.pos3;
 80032f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		TrayOriginY = trayY.pos3;
 80032fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032fc:	63bb      	str	r3, [r7, #56]	; 0x38
		writeDeg = 27000 - (radians * (180 / M_PI) * 100);
 80032fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003300:	f7fd f8ce 	bl	80004a0 <__aeabi_f2d>
 8003304:	a368      	add	r3, pc, #416	; (adr r3, 80034a8 <calibrateTray+0x378>)
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	f7fd f921 	bl	8000550 <__aeabi_dmul>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4610      	mov	r0, r2
 8003314:	4619      	mov	r1, r3
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	4b69      	ldr	r3, [pc, #420]	; (80034c0 <calibrateTray+0x390>)
 800331c:	f7fd f918 	bl	8000550 <__aeabi_dmul>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	a162      	add	r1, pc, #392	; (adr r1, 80034b0 <calibrateTray+0x380>)
 8003326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800332a:	f7fc ff59 	bl	80001e0 <__aeabi_dsub>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	f7fd fbbb 	bl	8000ab0 <__aeabi_d2iz>
 800333a:	4603      	mov	r3, r0
 800333c:	86fb      	strh	r3, [r7, #54]	; 0x36
		radians -= (1.5 * M_PI);
 800333e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003340:	f7fd f8ae 	bl	80004a0 <__aeabi_f2d>
 8003344:	a35c      	add	r3, pc, #368	; (adr r3, 80034b8 <calibrateTray+0x388>)
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	f7fc ff49 	bl	80001e0 <__aeabi_dsub>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4610      	mov	r0, r2
 8003354:	4619      	mov	r1, r3
 8003356:	f7fd fbd3 	bl	8000b00 <__aeabi_d2f>
 800335a:	4603      	mov	r3, r0
 800335c:	643b      	str	r3, [r7, #64]	; 0x40
	}

	float a[3] = { 10.0f, 30.0f, 50.0f };
 800335e:	4a59      	ldr	r2, [pc, #356]	; (80034c4 <calibrateTray+0x394>)
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	ca07      	ldmia	r2, {r0, r1, r2}
 8003366:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float b[3] = { 40.0f, 25.0f, 10.0f };
 800336a:	4a57      	ldr	r2, [pc, #348]	; (80034c8 <calibrateTray+0x398>)
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003370:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (int i = 0; i < 9; i++) {
 8003374:	2300      	movs	r3, #0
 8003376:	633b      	str	r3, [r7, #48]	; 0x30
 8003378:	e060      	b.n	800343c <calibrateTray+0x30c>
		uint8_t index = i % 3;
 800337a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800337c:	4b53      	ldr	r3, [pc, #332]	; (80034cc <calibrateTray+0x39c>)
 800337e:	fb83 3102 	smull	r3, r1, r3, r2
 8003382:	17d3      	asrs	r3, r2, #31
 8003384:	1ac9      	subs	r1, r1, r3
 8003386:	460b      	mov	r3, r1
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	440b      	add	r3, r1
 800338c:	1ad1      	subs	r1, r2, r3
 800338e:	460b      	mov	r3, r1
 8003390:	77fb      	strb	r3, [r7, #31]
		objPos[i].x = TrayOriginX + a[index];
 8003392:	7ffb      	ldrb	r3, [r7, #31]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	3348      	adds	r3, #72	; 0x48
 8003398:	443b      	add	r3, r7
 800339a:	3b38      	subs	r3, #56	; 0x38
 800339c:	ed93 7a00 	vldr	s14, [r3]
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80033a8:	4413      	add	r3, r2
 80033aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80033ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b2:	edc3 7a00 	vstr	s15, [r3]

		uint8_t row = i / 3;
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	4a44      	ldr	r2, [pc, #272]	; (80034cc <calibrateTray+0x39c>)
 80033ba:	fb82 1203 	smull	r1, r2, r2, r3
 80033be:	17db      	asrs	r3, r3, #31
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	77bb      	strb	r3, [r7, #30]
		objPos[i].y = TrayOriginY + b[row];
 80033c4:	7fbb      	ldrb	r3, [r7, #30]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	3348      	adds	r3, #72	; 0x48
 80033ca:	443b      	add	r3, r7
 80033cc:	3b44      	subs	r3, #68	; 0x44
 80033ce:	ed93 7a00 	vldr	s14, [r3]
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80033da:	4413      	add	r3, r2
 80033dc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80033e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e4:	edc3 7a01 	vstr	s15, [r3, #4]
		objPos[i] = rotatePoint(objPos[i].x, objPos[i].y, TrayOriginX,
 80033e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80033f0:	4413      	add	r3, r2
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80033fe:	4413      	add	r3, r2
 8003400:	ed93 7a01 	vldr	s14, [r3, #4]
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800340c:	18d4      	adds	r4, r2, r3
 800340e:	ed97 2a10 	vldr	s4, [r7, #64]	; 0x40
 8003412:	edd7 1a0e 	vldr	s3, [r7, #56]	; 0x38
 8003416:	ed97 1a0f 	vldr	s2, [r7, #60]	; 0x3c
 800341a:	eef0 0a47 	vmov.f32	s1, s14
 800341e:	eeb0 0a67 	vmov.f32	s0, s15
 8003422:	f000 f875 	bl	8003510 <rotatePoint>
 8003426:	eeb0 7a40 	vmov.f32	s14, s0
 800342a:	eef0 7a60 	vmov.f32	s15, s1
 800342e:	ed84 7a00 	vstr	s14, [r4]
 8003432:	edc4 7a01 	vstr	s15, [r4, #4]
	for (int i = 0; i < 9; i++) {
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	3301      	adds	r3, #1
 800343a:	633b      	str	r3, [r7, #48]	; 0x30
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	2b08      	cmp	r3, #8
 8003440:	dd9b      	ble.n	800337a <calibrateTray+0x24a>
				TrayOriginY, radians);
	}

	int16_t writeTrayOriginX = TrayOriginX * 10; // CHANGE DATA TYPE
 8003442:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003446:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800344a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800344e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003452:	ee17 3a90 	vmov	r3, s15
 8003456:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t writeTrayOriginY = TrayOriginY * 10; // CHANGE DATA TYPE
 8003458:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800345c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003468:	ee17 3a90 	vmov	r3, s15
 800346c:	843b      	strh	r3, [r7, #32]
	if (calibrateTrayInput == 1) {
 800346e:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <calibrateTray+0x3a0>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d130      	bne.n	80034d8 <calibrateTray+0x3a8>
		registerFrame[32].U16 = writeTrayOriginX; // WRTTE : Pick Tray Origin x
 8003476:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003478:	4b16      	ldr	r3, [pc, #88]	; (80034d4 <calibrateTray+0x3a4>)
 800347a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		registerFrame[33].U16 = writeTrayOriginY; // WRTTE : Pick Tray Origin y
 800347e:	8c3a      	ldrh	r2, [r7, #32]
 8003480:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <calibrateTray+0x3a4>)
 8003482:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		registerFrame[34].U16 = writeDeg; // WRTTE : Pick Tray Orientation
 8003486:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <calibrateTray+0x3a4>)
 800348a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		registerFrame[35].U16 = writeTrayOriginX; //  WRTTE : Place Tray Origin x
		registerFrame[36].U16 = writeTrayOriginY; // WRTTE : Place Tray Origin y
		registerFrame[37].U16 = writeDeg; // WRTTE : Place Tray Orientation
	}

}
 800348e:	e033      	b.n	80034f8 <calibrateTray+0x3c8>
 8003490:	00000000 	.word	0x00000000
 8003494:	40000000 	.word	0x40000000
 8003498:	00000000 	.word	0x00000000
 800349c:	3fe00000 	.word	0x3fe00000
 80034a0:	00000000 	.word	0x00000000
 80034a4:	40e19400 	.word	0x40e19400
 80034a8:	1a63c1f8 	.word	0x1a63c1f8
 80034ac:	404ca5dc 	.word	0x404ca5dc
 80034b0:	00000000 	.word	0x00000000
 80034b4:	40da5e00 	.word	0x40da5e00
 80034b8:	7f3321d2 	.word	0x7f3321d2
 80034bc:	4012d97c 	.word	0x4012d97c
 80034c0:	40590000 	.word	0x40590000
 80034c4:	0800de00 	.word	0x0800de00
 80034c8:	0800de0c 	.word	0x0800de0c
 80034cc:	55555556 	.word	0x55555556
 80034d0:	20000e30 	.word	0x20000e30
 80034d4:	20000d44 	.word	0x20000d44
	} else if (calibrateTrayInput == 2) {
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <calibrateTray+0x3d8>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d10b      	bne.n	80034f8 <calibrateTray+0x3c8>
		registerFrame[35].U16 = writeTrayOriginX; //  WRTTE : Place Tray Origin x
 80034e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <calibrateTray+0x3dc>)
 80034e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		registerFrame[36].U16 = writeTrayOriginY; // WRTTE : Place Tray Origin y
 80034e8:	8c3a      	ldrh	r2, [r7, #32]
 80034ea:	4b08      	ldr	r3, [pc, #32]	; (800350c <calibrateTray+0x3dc>)
 80034ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		registerFrame[37].U16 = writeDeg; // WRTTE : Place Tray Orientation
 80034f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80034f2:	4b06      	ldr	r3, [pc, #24]	; (800350c <calibrateTray+0x3dc>)
 80034f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 80034f8:	bf00      	nop
 80034fa:	3748      	adds	r7, #72	; 0x48
 80034fc:	46bd      	mov	sp, r7
 80034fe:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003502:	b004      	add	sp, #16
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20000e30 	.word	0x20000e30
 800350c:	20000d44 	.word	0x20000d44

08003510 <rotatePoint>:

Point rotatePoint(float p1, float p2, float centerX, float centerY,
		float radians) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b090      	sub	sp, #64	; 0x40
 8003514:	af00      	add	r7, sp, #0
 8003516:	ed87 0a07 	vstr	s0, [r7, #28]
 800351a:	edc7 0a06 	vstr	s1, [r7, #24]
 800351e:	ed87 1a05 	vstr	s2, [r7, #20]
 8003522:	edc7 1a04 	vstr	s3, [r7, #16]
 8003526:	ed87 2a03 	vstr	s4, [r7, #12]
// ROTATION MATRIX
	float cosTheta = cosf(radians);
 800352a:	ed97 0a03 	vldr	s0, [r7, #12]
 800352e:	f008 fd01 	bl	800bf34 <cosf>
 8003532:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	float sinTheta = sinf(radians);
 8003536:	ed97 0a03 	vldr	s0, [r7, #12]
 800353a:	f008 fd3f 	bl	800bfbc <sinf>
 800353e:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

	float translatedX = p1 - centerX;
 8003542:	ed97 7a07 	vldr	s14, [r7, #28]
 8003546:	edd7 7a05 	vldr	s15, [r7, #20]
 800354a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800354e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float translatedY = p2 - centerY;
 8003552:	ed97 7a06 	vldr	s14, [r7, #24]
 8003556:	edd7 7a04 	vldr	s15, [r7, #16]
 800355a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800355e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	Point rotatedPoint;
	rotatedPoint.x = (translatedX * cosTheta) - (translatedY * sinTheta)
 8003562:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003566:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800356a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800356e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003572:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800357a:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ centerX;
 800357e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003582:	ee77 7a27 	vadd.f32	s15, s14, s15
	rotatedPoint.x = (translatedX * cosTheta) - (translatedY * sinTheta)
 8003586:	edc7 7a08 	vstr	s15, [r7, #32]
	rotatedPoint.y = (translatedX * sinTheta) + (translatedY * cosTheta)
 800358a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800358e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003592:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003596:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800359a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800359e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a2:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ centerY;
 80035a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80035aa:	ee77 7a27 	vadd.f32	s15, s14, s15
	rotatedPoint.y = (translatedX * sinTheta) + (translatedY * cosTheta)
 80035ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	return rotatedPoint;
 80035b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035b6:	f107 0220 	add.w	r2, r7, #32
 80035ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035be:	e883 0003 	stmia.w	r3, {r0, r1}
 80035c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	ee07 2a10 	vmov	s14, r2
 80035ca:	ee07 3a90 	vmov	s15, r3
}
 80035ce:	eeb0 0a47 	vmov.f32	s0, s14
 80035d2:	eef0 0a67 	vmov.f32	s1, s15
 80035d6:	3740      	adds	r7, #64	; 0x40
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <buttonInput>:

void buttonInput() {
 80035dc:	b598      	push	{r3, r4, r7, lr}
 80035de:	af00      	add	r7, sp, #0
	register int i;
	for (i = 0; i < 4; i++) {
 80035e0:	2400      	movs	r4, #0
 80035e2:	e051      	b.n	8003688 <buttonInput+0xac>
		Button1[i].Current = HAL_GPIO_ReadPin(joyPin[i].PORT, joyPin[i].PIN);
 80035e4:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <buttonInput+0xb8>)
 80035e6:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 80035ea:	492a      	ldr	r1, [pc, #168]	; (8003694 <buttonInput+0xb8>)
 80035ec:	00e3      	lsls	r3, r4, #3
 80035ee:	440b      	add	r3, r1
 80035f0:	889b      	ldrh	r3, [r3, #4]
 80035f2:	4619      	mov	r1, r3
 80035f4:	4610      	mov	r0, r2
 80035f6:	f002 fb11 	bl	8005c1c <HAL_GPIO_ReadPin>
 80035fa:	4603      	mov	r3, r0
 80035fc:	461a      	mov	r2, r3
 80035fe:	4b26      	ldr	r3, [pc, #152]	; (8003698 <buttonInput+0xbc>)
 8003600:	f803 2014 	strb.w	r2, [r3, r4, lsl #1]
		if (Button1[i].Last == 0 && Button1[i].Current == 1) {
 8003604:	4a24      	ldr	r2, [pc, #144]	; (8003698 <buttonInput+0xbc>)
 8003606:	0063      	lsls	r3, r4, #1
 8003608:	4413      	add	r3, r2
 800360a:	785b      	ldrb	r3, [r3, #1]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d132      	bne.n	8003676 <buttonInput+0x9a>
 8003610:	4b21      	ldr	r3, [pc, #132]	; (8003698 <buttonInput+0xbc>)
 8003612:	f813 3014 	ldrb.w	r3, [r3, r4, lsl #1]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d12d      	bne.n	8003676 <buttonInput+0x9a>
			if (i == 0) {
 800361a:	2c00      	cmp	r4, #0
 800361c:	d105      	bne.n	800362a <buttonInput+0x4e>
				countTopB += 1;
 800361e:	4b1f      	ldr	r3, [pc, #124]	; (800369c <buttonInput+0xc0>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	3301      	adds	r3, #1
 8003624:	b2da      	uxtb	r2, r3
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <buttonInput+0xc0>)
 8003628:	701a      	strb	r2, [r3, #0]
			}
			if (i == 1) {
 800362a:	2c01      	cmp	r4, #1
 800362c:	d108      	bne.n	8003640 <buttonInput+0x64>
				countRightB += 1;
 800362e:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <buttonInput+0xc4>)
 8003630:	f993 3000 	ldrsb.w	r3, [r3]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	3301      	adds	r3, #1
 8003638:	b2db      	uxtb	r3, r3
 800363a:	b25a      	sxtb	r2, r3
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <buttonInput+0xc4>)
 800363e:	701a      	strb	r2, [r3, #0]
			}
			if (i == 2) {
 8003640:	2c02      	cmp	r4, #2
 8003642:	d105      	bne.n	8003650 <buttonInput+0x74>
				countBottomB += 1;
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <buttonInput+0xc8>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	b2da      	uxtb	r2, r3
 800364c:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <buttonInput+0xc8>)
 800364e:	701a      	strb	r2, [r3, #0]
			}
			if (i == 3) {
 8003650:	2c03      	cmp	r4, #3
 8003652:	d105      	bne.n	8003660 <buttonInput+0x84>
				countLeftB += 1;
 8003654:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <buttonInput+0xcc>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	b2da      	uxtb	r2, r3
 800365c:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <buttonInput+0xcc>)
 800365e:	701a      	strb	r2, [r3, #0]

			}
			Button1[i].Last = Button1[i].Current;
 8003660:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <buttonInput+0xbc>)
 8003662:	f813 1014 	ldrb.w	r1, [r3, r4, lsl #1]
 8003666:	4a0c      	ldr	r2, [pc, #48]	; (8003698 <buttonInput+0xbc>)
 8003668:	0063      	lsls	r3, r4, #1
 800366a:	4413      	add	r3, r2
 800366c:	460a      	mov	r2, r1
 800366e:	705a      	strb	r2, [r3, #1]
			joyLogic = i;
 8003670:	b2e2      	uxtb	r2, r4
 8003672:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <buttonInput+0xd0>)
 8003674:	701a      	strb	r2, [r3, #0]
		}
		Button1[i].Last = Button1[i].Current;
 8003676:	4b08      	ldr	r3, [pc, #32]	; (8003698 <buttonInput+0xbc>)
 8003678:	f813 1014 	ldrb.w	r1, [r3, r4, lsl #1]
 800367c:	4a06      	ldr	r2, [pc, #24]	; (8003698 <buttonInput+0xbc>)
 800367e:	0063      	lsls	r3, r4, #1
 8003680:	4413      	add	r3, r2
 8003682:	460a      	mov	r2, r1
 8003684:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 4; i++) {
 8003686:	3401      	adds	r4, #1
 8003688:	2c03      	cmp	r4, #3
 800368a:	ddab      	ble.n	80035e4 <buttonInput+0x8>
	}
}
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	bd98      	pop	{r3, r4, r7, pc}
 8003692:	bf00      	nop
 8003694:	20000200 	.word	0x20000200
 8003698:	20000dd0 	.word	0x20000dd0
 800369c:	20000e01 	.word	0x20000e01
 80036a0:	20000e02 	.word	0x20000e02
 80036a4:	20000e00 	.word	0x20000e00
 80036a8:	20000e03 	.word	0x20000e03
 80036ac:	20000e04 	.word	0x20000e04

080036b0 <buttonLogic>:

void buttonLogic(uint16_t state) {
 80036b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b2:	b08d      	sub	sp, #52	; 0x34
 80036b4:	af0a      	add	r7, sp, #40	; 0x28
 80036b6:	4603      	mov	r3, r0
 80036b8:	80fb      	strh	r3, [r7, #6]
	if (countTopB % 2 == 1) {
 80036ba:	4b98      	ldr	r3, [pc, #608]	; (800391c <buttonLogic+0x26c>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d035      	beq.n	8003734 <buttonLogic+0x84>
		countRightB = 0;
 80036c8:	4b95      	ldr	r3, [pc, #596]	; (8003920 <buttonLogic+0x270>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]
		switch (state) {
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d830      	bhi.n	8003736 <buttonLogic+0x86>
 80036d4:	a201      	add	r2, pc, #4	; (adr r2, 80036dc <buttonLogic+0x2c>)
 80036d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036da:	bf00      	nop
 80036dc:	080036ed 	.word	0x080036ed
 80036e0:	08003707 	.word	0x08003707
 80036e4:	0800370f 	.word	0x0800370f
 80036e8:	0800372d 	.word	0x0800372d
		case 0: // ENTER JOG MODE
			joyLogicLED = 1;
 80036ec:	4b8d      	ldr	r3, [pc, #564]	; (8003924 <buttonLogic+0x274>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]
			if (switchAxis) {
 80036f2:	4b8d      	ldr	r3, [pc, #564]	; (8003928 <buttonLogic+0x278>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <buttonLogic+0x50>
				jogAxisY();
 80036fa:	f7ff f867 	bl	80027cc <jogAxisY>
			} else {
				jogAxisX();
			}
			break;
 80036fe:	e01a      	b.n	8003736 <buttonLogic+0x86>
				jogAxisX();
 8003700:	f000 fa4c 	bl	8003b9c <jogAxisX>
			break;
 8003704:	e017      	b.n	8003736 <buttonLogic+0x86>
		case 1: // RIGHT

			joyLogic = 0;
 8003706:	4b89      	ldr	r3, [pc, #548]	; (800392c <buttonLogic+0x27c>)
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
			break;
 800370c:	e013      	b.n	8003736 <buttonLogic+0x86>
		case 2: // CHANGE AXIS X/Y
			if (switchAxis) {
 800370e:	4b86      	ldr	r3, [pc, #536]	; (8003928 <buttonLogic+0x278>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <buttonLogic+0x6e>
				switchAxis = 0;
 8003716:	4b84      	ldr	r3, [pc, #528]	; (8003928 <buttonLogic+0x278>)
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
 800371c:	e002      	b.n	8003724 <buttonLogic+0x74>
			} else {
				switchAxis = 1;
 800371e:	4b82      	ldr	r3, [pc, #520]	; (8003928 <buttonLogic+0x278>)
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]
			}
			joyLogic = 0;
 8003724:	4b81      	ldr	r3, [pc, #516]	; (800392c <buttonLogic+0x27c>)
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]
			break;
 800372a:	e004      	b.n	8003736 <buttonLogic+0x86>
		case 3: // LEFT
			joyLogic = 0;
 800372c:	4b7f      	ldr	r3, [pc, #508]	; (800392c <buttonLogic+0x27c>)
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]

			break;
 8003732:	e000      	b.n	8003736 <buttonLogic+0x86>
		}
	}
 8003734:	bf00      	nop
	if (countTopB % 2 == 0) {
 8003736:	4b79      	ldr	r3, [pc, #484]	; (800391c <buttonLogic+0x26c>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	f040 80e5 	bne.w	8003910 <buttonLogic+0x260>
		switch (state) {
 8003746:	88fb      	ldrh	r3, [r7, #6]
 8003748:	2b03      	cmp	r3, #3
 800374a:	f200 80e2 	bhi.w	8003912 <buttonLogic+0x262>
 800374e:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <buttonLogic+0xa4>)
 8003750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003754:	08003765 	.word	0x08003765
 8003758:	08003791 	.word	0x08003791
 800375c:	080038fb 	.word	0x080038fb
 8003760:	08003903 	.word	0x08003903
		case 0: // ENTER CALIBRATE MODE
			if (countRightB == 3) {
 8003764:	4b6e      	ldr	r3, [pc, #440]	; (8003920 <buttonLogic+0x270>)
 8003766:	f993 3000 	ldrsb.w	r3, [r3]
 800376a:	2b03      	cmp	r3, #3
 800376c:	d103      	bne.n	8003776 <buttonLogic+0xc6>
				joyLogicLED = 3;
 800376e:	4b6d      	ldr	r3, [pc, #436]	; (8003924 <buttonLogic+0x274>)
 8003770:	2203      	movs	r2, #3
 8003772:	701a      	strb	r2, [r3, #0]
				joyLogicLED = 4;
			} else {
				joyLogicLED = 2;
			}

			break;
 8003774:	e0cd      	b.n	8003912 <buttonLogic+0x262>
			} else if (countRightB == 6) {
 8003776:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <buttonLogic+0x270>)
 8003778:	f993 3000 	ldrsb.w	r3, [r3]
 800377c:	2b06      	cmp	r3, #6
 800377e:	d103      	bne.n	8003788 <buttonLogic+0xd8>
				joyLogicLED = 4;
 8003780:	4b68      	ldr	r3, [pc, #416]	; (8003924 <buttonLogic+0x274>)
 8003782:	2204      	movs	r2, #4
 8003784:	701a      	strb	r2, [r3, #0]
			break;
 8003786:	e0c4      	b.n	8003912 <buttonLogic+0x262>
				joyLogicLED = 2;
 8003788:	4b66      	ldr	r3, [pc, #408]	; (8003924 <buttonLogic+0x274>)
 800378a:	2202      	movs	r2, #2
 800378c:	701a      	strb	r2, [r3, #0]
			break;
 800378e:	e0c0      	b.n	8003912 <buttonLogic+0x262>
		case 1: // MARK POSITION
			if (countRightB == 1) {
 8003790:	4b63      	ldr	r3, [pc, #396]	; (8003920 <buttonLogic+0x270>)
 8003792:	f993 3000 	ldrsb.w	r3, [r3]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d10e      	bne.n	80037b8 <buttonLogic+0x108>
				trayPickX.pos1 = registerFrame[68].U16; // READ : x-axis Actual Position
 800379a:	4b65      	ldr	r3, [pc, #404]	; (8003930 <buttonLogic+0x280>)
 800379c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80037a0:	ee07 3a90 	vmov	s15, r3
 80037a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a8:	4b62      	ldr	r3, [pc, #392]	; (8003934 <buttonLogic+0x284>)
 80037aa:	edc3 7a00 	vstr	s15, [r3]
				trayPickY.pos1 = mmActPos;
 80037ae:	4b62      	ldr	r3, [pc, #392]	; (8003938 <buttonLogic+0x288>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a62      	ldr	r2, [pc, #392]	; (800393c <buttonLogic+0x28c>)
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e09c      	b.n	80038f2 <buttonLogic+0x242>
			} else if (countRightB == 2) {
 80037b8:	4b59      	ldr	r3, [pc, #356]	; (8003920 <buttonLogic+0x270>)
 80037ba:	f993 3000 	ldrsb.w	r3, [r3]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d10e      	bne.n	80037e0 <buttonLogic+0x130>
				trayPickX.pos2 = registerFrame[68].U16; // READ : x-axis Actual Position
 80037c2:	4b5b      	ldr	r3, [pc, #364]	; (8003930 <buttonLogic+0x280>)
 80037c4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d0:	4b58      	ldr	r3, [pc, #352]	; (8003934 <buttonLogic+0x284>)
 80037d2:	edc3 7a01 	vstr	s15, [r3, #4]
				trayPickY.pos2 = mmActPos;
 80037d6:	4b58      	ldr	r3, [pc, #352]	; (8003938 <buttonLogic+0x288>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a58      	ldr	r2, [pc, #352]	; (800393c <buttonLogic+0x28c>)
 80037dc:	6053      	str	r3, [r2, #4]
 80037de:	e088      	b.n	80038f2 <buttonLogic+0x242>
			} else if (countRightB == 3) {
 80037e0:	4b4f      	ldr	r3, [pc, #316]	; (8003920 <buttonLogic+0x270>)
 80037e2:	f993 3000 	ldrsb.w	r3, [r3]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d12b      	bne.n	8003842 <buttonLogic+0x192>
				registerFrame[16].U16 = 0;
 80037ea:	4b51      	ldr	r3, [pc, #324]	; (8003930 <buttonLogic+0x280>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	841a      	strh	r2, [r3, #32]
				trayPickX.pos3 = registerFrame[68].U16; // READ : x-axis Actual Position
 80037f0:	4b4f      	ldr	r3, [pc, #316]	; (8003930 <buttonLogic+0x280>)
 80037f2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80037f6:	ee07 3a90 	vmov	s15, r3
 80037fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fe:	4b4d      	ldr	r3, [pc, #308]	; (8003934 <buttonLogic+0x284>)
 8003800:	edc3 7a02 	vstr	s15, [r3, #8]
				trayPickY.pos3 = mmActPos;
 8003804:	4b4c      	ldr	r3, [pc, #304]	; (8003938 <buttonLogic+0x288>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a4c      	ldr	r2, [pc, #304]	; (800393c <buttonLogic+0x28c>)
 800380a:	6093      	str	r3, [r2, #8]
				calibrateTrayInput = 1;
 800380c:	4b4c      	ldr	r3, [pc, #304]	; (8003940 <buttonLogic+0x290>)
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]
				calibrateTray(trayPickX, trayPickY, objPickPos);
 8003812:	4e48      	ldr	r6, [pc, #288]	; (8003934 <buttonLogic+0x284>)
 8003814:	4b4b      	ldr	r3, [pc, #300]	; (8003944 <buttonLogic+0x294>)
 8003816:	9308      	str	r3, [sp, #32]
 8003818:	4b48      	ldr	r3, [pc, #288]	; (800393c <buttonLogic+0x28c>)
 800381a:	ac02      	add	r4, sp, #8
 800381c:	461d      	mov	r5, r3
 800381e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003822:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003826:	e884 0003 	stmia.w	r4, {r0, r1}
 800382a:	466a      	mov	r2, sp
 800382c:	f106 0310 	add.w	r3, r6, #16
 8003830:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003834:	e882 0003 	stmia.w	r2, {r0, r1}
 8003838:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800383c:	f7ff fc78 	bl	8003130 <calibrateTray>
 8003840:	e057      	b.n	80038f2 <buttonLogic+0x242>
			} else if (countRightB == 4) {
 8003842:	4b37      	ldr	r3, [pc, #220]	; (8003920 <buttonLogic+0x270>)
 8003844:	f993 3000 	ldrsb.w	r3, [r3]
 8003848:	2b04      	cmp	r3, #4
 800384a:	d10e      	bne.n	800386a <buttonLogic+0x1ba>
				trayPlaceX.pos1 = registerFrame[68].U16; // READ : x-axis Actual Position
 800384c:	4b38      	ldr	r3, [pc, #224]	; (8003930 <buttonLogic+0x280>)
 800384e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385a:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <buttonLogic+0x298>)
 800385c:	edc3 7a00 	vstr	s15, [r3]
				trayPlaceY.pos1 = mmActPos;
 8003860:	4b35      	ldr	r3, [pc, #212]	; (8003938 <buttonLogic+0x288>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a39      	ldr	r2, [pc, #228]	; (800394c <buttonLogic+0x29c>)
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	e043      	b.n	80038f2 <buttonLogic+0x242>
			} else if (countRightB == 5) {
 800386a:	4b2d      	ldr	r3, [pc, #180]	; (8003920 <buttonLogic+0x270>)
 800386c:	f993 3000 	ldrsb.w	r3, [r3]
 8003870:	2b05      	cmp	r3, #5
 8003872:	d10e      	bne.n	8003892 <buttonLogic+0x1e2>
				trayPlaceX.pos2 = registerFrame[68].U16; // READ : x-axis Actual Position
 8003874:	4b2e      	ldr	r3, [pc, #184]	; (8003930 <buttonLogic+0x280>)
 8003876:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003882:	4b31      	ldr	r3, [pc, #196]	; (8003948 <buttonLogic+0x298>)
 8003884:	edc3 7a01 	vstr	s15, [r3, #4]
				trayPlaceY.pos2 = mmActPos;
 8003888:	4b2b      	ldr	r3, [pc, #172]	; (8003938 <buttonLogic+0x288>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a2f      	ldr	r2, [pc, #188]	; (800394c <buttonLogic+0x29c>)
 800388e:	6053      	str	r3, [r2, #4]
 8003890:	e02f      	b.n	80038f2 <buttonLogic+0x242>
			} else if (countRightB == 6) {
 8003892:	4b23      	ldr	r3, [pc, #140]	; (8003920 <buttonLogic+0x270>)
 8003894:	f993 3000 	ldrsb.w	r3, [r3]
 8003898:	2b06      	cmp	r3, #6
 800389a:	d12a      	bne.n	80038f2 <buttonLogic+0x242>
				registerFrame[16].U16 = 0;
 800389c:	4b24      	ldr	r3, [pc, #144]	; (8003930 <buttonLogic+0x280>)
 800389e:	2200      	movs	r2, #0
 80038a0:	841a      	strh	r2, [r3, #32]
				trayPlaceX.pos3 = registerFrame[68].U16; // READ : x-axis Actual Position
 80038a2:	4b23      	ldr	r3, [pc, #140]	; (8003930 <buttonLogic+0x280>)
 80038a4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80038a8:	ee07 3a90 	vmov	s15, r3
 80038ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b0:	4b25      	ldr	r3, [pc, #148]	; (8003948 <buttonLogic+0x298>)
 80038b2:	edc3 7a02 	vstr	s15, [r3, #8]
				trayPlaceY.pos3 = mmActPos;
 80038b6:	4b20      	ldr	r3, [pc, #128]	; (8003938 <buttonLogic+0x288>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a24      	ldr	r2, [pc, #144]	; (800394c <buttonLogic+0x29c>)
 80038bc:	6093      	str	r3, [r2, #8]
				calibrateTrayInput = 2;
 80038be:	4b20      	ldr	r3, [pc, #128]	; (8003940 <buttonLogic+0x290>)
 80038c0:	2202      	movs	r2, #2
 80038c2:	701a      	strb	r2, [r3, #0]
				calibrateTray(trayPlaceX, trayPlaceY, objPlacePos);
 80038c4:	4e20      	ldr	r6, [pc, #128]	; (8003948 <buttonLogic+0x298>)
 80038c6:	4b22      	ldr	r3, [pc, #136]	; (8003950 <buttonLogic+0x2a0>)
 80038c8:	9308      	str	r3, [sp, #32]
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <buttonLogic+0x29c>)
 80038cc:	ac02      	add	r4, sp, #8
 80038ce:	461d      	mov	r5, r3
 80038d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80038d8:	e884 0003 	stmia.w	r4, {r0, r1}
 80038dc:	466a      	mov	r2, sp
 80038de:	f106 0310 	add.w	r3, r6, #16
 80038e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038e6:	e882 0003 	stmia.w	r2, {r0, r1}
 80038ea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80038ee:	f7ff fc1f 	bl	8003130 <calibrateTray>
			}
			joyLogic = 0;
 80038f2:	4b0e      	ldr	r3, [pc, #56]	; (800392c <buttonLogic+0x27c>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
			break;
 80038f8:	e00b      	b.n	8003912 <buttonLogic+0x262>
		case 2: // OPEN LASER
			joyLogic = 0;
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <buttonLogic+0x27c>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	701a      	strb	r2, [r3, #0]

			break;
 8003900:	e007      	b.n	8003912 <buttonLogic+0x262>
		case 3: //  DELETE
			countRightB = 0;
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <buttonLogic+0x270>)
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]
			joyLogic = 0;
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <buttonLogic+0x27c>)
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
			break;
 800390e:	e000      	b.n	8003912 <buttonLogic+0x262>
		}
	}
 8003910:	bf00      	nop

}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800391a:	bf00      	nop
 800391c:	20000e01 	.word	0x20000e01
 8003920:	20000e02 	.word	0x20000e02
 8003924:	20000229 	.word	0x20000229
 8003928:	20000228 	.word	0x20000228
 800392c:	20000e04 	.word	0x20000e04
 8003930:	20000d44 	.word	0x20000d44
 8003934:	20000ec8 	.word	0x20000ec8
 8003938:	20000e18 	.word	0x20000e18
 800393c:	20000ee0 	.word	0x20000ee0
 8003940:	20000e30 	.word	0x20000e30
 8003944:	20000e38 	.word	0x20000e38
 8003948:	20000ef8 	.word	0x20000ef8
 800394c:	20000f10 	.word	0x20000f10
 8003950:	20000e80 	.word	0x20000e80

08003954 <joyDisplayLED>:

void joyDisplayLED() {
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
	if (joyLogicLED == 1) {
 8003958:	4b20      	ldr	r3, [pc, #128]	; (80039dc <joyDisplayLED+0x88>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d10c      	bne.n	800397a <joyDisplayLED+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8003960:	2201      	movs	r2, #1
 8003962:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003966:	481e      	ldr	r0, [pc, #120]	; (80039e0 <joyDisplayLED+0x8c>)
 8003968:	f002 f970 	bl	8005c4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800396c:	2200      	movs	r2, #0
 800396e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003972:	481b      	ldr	r0, [pc, #108]	; (80039e0 <joyDisplayLED+0x8c>)
 8003974:	f002 f96a 	bl	8005c4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
	} else if (joyLogicLED == 4) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
	}
}
 8003978:	e02e      	b.n	80039d8 <joyDisplayLED+0x84>
	} else if (joyLogicLED == 2) {
 800397a:	4b18      	ldr	r3, [pc, #96]	; (80039dc <joyDisplayLED+0x88>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d10c      	bne.n	800399c <joyDisplayLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8003982:	2200      	movs	r2, #0
 8003984:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003988:	4815      	ldr	r0, [pc, #84]	; (80039e0 <joyDisplayLED+0x8c>)
 800398a:	f002 f95f 	bl	8005c4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 800398e:	2201      	movs	r2, #1
 8003990:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003994:	4812      	ldr	r0, [pc, #72]	; (80039e0 <joyDisplayLED+0x8c>)
 8003996:	f002 f959 	bl	8005c4c <HAL_GPIO_WritePin>
}
 800399a:	e01d      	b.n	80039d8 <joyDisplayLED+0x84>
	} else if (joyLogicLED == 3) {
 800399c:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <joyDisplayLED+0x88>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d10b      	bne.n	80039bc <joyDisplayLED+0x68>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 80039a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039a8:	480d      	ldr	r0, [pc, #52]	; (80039e0 <joyDisplayLED+0x8c>)
 80039aa:	f002 f968 	bl	8005c7e <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 80039ae:	2201      	movs	r2, #1
 80039b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039b4:	480a      	ldr	r0, [pc, #40]	; (80039e0 <joyDisplayLED+0x8c>)
 80039b6:	f002 f949 	bl	8005c4c <HAL_GPIO_WritePin>
}
 80039ba:	e00d      	b.n	80039d8 <joyDisplayLED+0x84>
	} else if (joyLogicLED == 4) {
 80039bc:	4b07      	ldr	r3, [pc, #28]	; (80039dc <joyDisplayLED+0x88>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d109      	bne.n	80039d8 <joyDisplayLED+0x84>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 80039c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039c8:	4805      	ldr	r0, [pc, #20]	; (80039e0 <joyDisplayLED+0x8c>)
 80039ca:	f002 f958 	bl	8005c7e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 80039ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039d2:	4803      	ldr	r0, [pc, #12]	; (80039e0 <joyDisplayLED+0x8c>)
 80039d4:	f002 f953 	bl	8005c7e <HAL_GPIO_TogglePin>
}
 80039d8:	bf00      	nop
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000229 	.word	0x20000229
 80039e0:	40020800 	.word	0x40020800
 80039e4:	00000000 	.word	0x00000000

080039e8 <robotArmState>:

void robotArmState(uint16_t state) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	80fb      	strh	r3, [r7, #6]

	switch (state) {
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	2b0f      	cmp	r3, #15
 80039f8:	f200 80b9 	bhi.w	8003b6e <robotArmState+0x186>
 80039fc:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <robotArmState+0x1c>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003a45 	.word	0x08003a45
 8003a08:	08003a6b 	.word	0x08003a6b
 8003a0c:	08003b6f 	.word	0x08003b6f
 8003a10:	08003a91 	.word	0x08003a91
 8003a14:	08003b6f 	.word	0x08003b6f
 8003a18:	08003b6f 	.word	0x08003b6f
 8003a1c:	08003b6f 	.word	0x08003b6f
 8003a20:	08003acb 	.word	0x08003acb
 8003a24:	08003b6f 	.word	0x08003b6f
 8003a28:	08003b6f 	.word	0x08003b6f
 8003a2c:	08003b6f 	.word	0x08003b6f
 8003a30:	08003b6f 	.word	0x08003b6f
 8003a34:	08003b6f 	.word	0x08003b6f
 8003a38:	08003b6f 	.word	0x08003b6f
 8003a3c:	08003b6f 	.word	0x08003b6f
 8003a40:	08003af1 	.word	0x08003af1
	case 0b0000000000000001: // SET PICK TRAY
		registerFrame[16].U16 = 0b0000000000000001; // Jog Pick : y-axis Moving Status
 8003a44:	4b4e      	ldr	r3, [pc, #312]	; (8003b80 <robotArmState+0x198>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	841a      	strh	r2, [r3, #32]

		joyStart = 1;
 8003a4a:	4b4e      	ldr	r3, [pc, #312]	; (8003b84 <robotArmState+0x19c>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	701a      	strb	r2, [r3, #0]

		pilotLamp(0, 0); // OFF : PILOT LAMP LEFT
 8003a50:	2100      	movs	r1, #0
 8003a52:	2000      	movs	r0, #0
 8003a54:	f000 f900 	bl	8003c58 <pilotLamp>
		pilotLamp(1, 1); // ON : PILOT LAMP CENTER
 8003a58:	2101      	movs	r1, #1
 8003a5a:	2001      	movs	r0, #1
 8003a5c:	f000 f8fc 	bl	8003c58 <pilotLamp>
		pilotLamp(2, 0); // OFF : PILOT LAMP RIGHT
 8003a60:	2100      	movs	r1, #0
 8003a62:	2002      	movs	r0, #2
 8003a64:	f000 f8f8 	bl	8003c58 <pilotLamp>

		break;
 8003a68:	e081      	b.n	8003b6e <robotArmState+0x186>
	case 0b0000000000000010: // SET PLACE TRAY
		registerFrame[16].U16 = 0b0000000000000010; // Jog Place : y-axis Moving Status
 8003a6a:	4b45      	ldr	r3, [pc, #276]	; (8003b80 <robotArmState+0x198>)
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	841a      	strh	r2, [r3, #32]

		joyStart = 1;
 8003a70:	4b44      	ldr	r3, [pc, #272]	; (8003b84 <robotArmState+0x19c>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]

		pilotLamp(0, 0); // OFF : PILOT LAMP LEFT
 8003a76:	2100      	movs	r1, #0
 8003a78:	2000      	movs	r0, #0
 8003a7a:	f000 f8ed 	bl	8003c58 <pilotLamp>
		pilotLamp(1, 1); // ON : PILOT LAMP CENTER
 8003a7e:	2101      	movs	r1, #1
 8003a80:	2001      	movs	r0, #1
 8003a82:	f000 f8e9 	bl	8003c58 <pilotLamp>
		pilotLamp(2, 0);  // OFF : PILOT LAMP RIGHT
 8003a86:	2100      	movs	r1, #0
 8003a88:	2002      	movs	r0, #2
 8003a8a:	f000 f8e5 	bl	8003c58 <pilotLamp>

		break;
 8003a8e:	e06e      	b.n	8003b6e <robotArmState+0x186>
	case 0b0000000000000100: // HOME
		joyStart = 0;
 8003a90:	4b3c      	ldr	r3, [pc, #240]	; (8003b84 <robotArmState+0x19c>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
		registerFrame[16].U16 = 0b0000000000000100; // HOME : y-axis Moving Status
 8003a96:	4b3a      	ldr	r3, [pc, #232]	; (8003b80 <robotArmState+0x198>)
 8003a98:	2204      	movs	r2, #4
 8003a9a:	841a      	strh	r2, [r3, #32]
		registerFrame[64].U16 = 0b0000000000000001; // HOME : x-axis Moving Status
 8003a9c:	4b38      	ldr	r3, [pc, #224]	; (8003b80 <robotArmState+0x198>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		registerFrame[1].U16 = 0; // RESET : Base System Status
 8003aa4:	4b36      	ldr	r3, [pc, #216]	; (8003b80 <robotArmState+0x198>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	805a      	strh	r2, [r3, #2]

		startSetHome = 1; // START HOME -> Function
 8003aaa:	4b37      	ldr	r3, [pc, #220]	; (8003b88 <robotArmState+0x1a0>)
 8003aac:	2201      	movs	r2, #1
 8003aae:	701a      	strb	r2, [r3, #0]

		pilotLamp(0, 1); // ON : PILOT LAMP LEFT
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	f000 f8d0 	bl	8003c58 <pilotLamp>
		pilotLamp(1, 0); // OFF : PILOT LAMP CENTER
 8003ab8:	2100      	movs	r1, #0
 8003aba:	2001      	movs	r0, #1
 8003abc:	f000 f8cc 	bl	8003c58 <pilotLamp>
		pilotLamp(2, 0); // OFF : PILOT LAMP RIGHT
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	2002      	movs	r0, #2
 8003ac4:	f000 f8c8 	bl	8003c58 <pilotLamp>

		break;
 8003ac8:	e051      	b.n	8003b6e <robotArmState+0x186>
	case 0b0000000000001000: // RUN TRAY MODE 18 PATH
		joyStart = 0;
 8003aca:	4b2e      	ldr	r3, [pc, #184]	; (8003b84 <robotArmState+0x19c>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]

		startRunTray = 1; // START RUN TRAY -> Function
 8003ad0:	4b2e      	ldr	r3, [pc, #184]	; (8003b8c <robotArmState+0x1a4>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]

		pilotLamp(0, 0); // OFF : PILOT LAMP LEFT
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	2000      	movs	r0, #0
 8003ada:	f000 f8bd 	bl	8003c58 <pilotLamp>
		pilotLamp(1, 0); // OFF : PILOT LAMP CENTER
 8003ade:	2100      	movs	r1, #0
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	f000 f8b9 	bl	8003c58 <pilotLamp>
		pilotLamp(2, 1); // ON : PILOT LAMP RIGHT
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	2002      	movs	r0, #2
 8003aea:	f000 f8b5 	bl	8003c58 <pilotLamp>
		break;
 8003aee:	e03e      	b.n	8003b6e <robotArmState+0x186>
	case 0b0000000000010000: // RUN POINT MODE
		joyStart = 0;
 8003af0:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <robotArmState+0x19c>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]

		pilotLamp(0, 0); // OFF : PILOT LAMP LEFT
 8003af6:	2100      	movs	r1, #0
 8003af8:	2000      	movs	r0, #0
 8003afa:	f000 f8ad 	bl	8003c58 <pilotLamp>
		pilotLamp(1, 0); // OFF : PILOT LAMP CENTER
 8003afe:	2100      	movs	r1, #0
 8003b00:	2001      	movs	r0, #1
 8003b02:	f000 f8a9 	bl	8003c58 <pilotLamp>
		pilotLamp(2, 1); // ON : PILOT LAMP RIGHT
 8003b06:	2101      	movs	r1, #1
 8003b08:	2002      	movs	r0, #2
 8003b0a:	f000 f8a5 	bl	8003c58 <pilotLamp>

		// X-Axis
		registerFrame[64].U16 = 0b0000000000000010; // RUN : x-axis Moving Status
 8003b0e:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <robotArmState+0x198>)
 8003b10:	2202      	movs	r2, #2
 8003b12:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		registerFrame[65].U16 = registerFrame[48].U16; // SET : x-axis Target Position = Read : Goal Point x
 8003b16:	4b1a      	ldr	r3, [pc, #104]	; (8003b80 <robotArmState+0x198>)
 8003b18:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8003b1c:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <robotArmState+0x198>)
 8003b1e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		registerFrame[66].U16 = 3000; // SET : x-axis Target Speed
 8003b22:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <robotArmState+0x198>)
 8003b24:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003b28:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		registerFrame[67].U16 = 1; // SET : x-axis Target Speed
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <robotArmState+0x198>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

		// Y-Axis
		startPointModeY = 1; // START POINT MODE -> OnlyPositionControl Function
 8003b34:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <robotArmState+0x1a8>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
		initPosY = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 8003b3a:	4b16      	ldr	r3, [pc, #88]	; (8003b94 <robotArmState+0x1ac>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fc fc9c 	bl	800047c <__aeabi_i2d>
 8003b44:	a30c      	add	r3, pc, #48	; (adr r3, 8003b78 <robotArmState+0x190>)
 8003b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4a:	f7fc fd01 	bl	8000550 <__aeabi_dmul>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4610      	mov	r0, r2
 8003b54:	4619      	mov	r1, r3
 8003b56:	f7fc ffab 	bl	8000ab0 <__aeabi_d2iz>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <robotArmState+0x1b0>)
 8003b5e:	6013      	str	r3, [r2, #0]

		registerFrame[16].U16 = 0b0000000000100000; // Go Point : y-axis Moving Status
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <robotArmState+0x198>)
 8003b62:	2220      	movs	r2, #32
 8003b64:	841a      	strh	r2, [r3, #32]

		registerFrame[1].U16 = 0; // RESET: Base System Status
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <robotArmState+0x198>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	805a      	strh	r2, [r3, #2]

		break;
 8003b6c:	bf00      	nop
	}
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	464f6faa 	.word	0x464f6faa
 8003b7c:	3f8199cb 	.word	0x3f8199cb
 8003b80:	20000d44 	.word	0x20000d44
 8003b84:	20000f4b 	.word	0x20000f4b
 8003b88:	20000264 	.word	0x20000264
 8003b8c:	20000f47 	.word	0x20000f47
 8003b90:	20000f35 	.word	0x20000f35
 8003b94:	20000e10 	.word	0x20000e10
 8003b98:	20000f38 	.word	0x20000f38

08003b9c <jogAxisX>:

void jogAxisX() {
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
	refXPos = buffer[0].subdata.xAxis;
 8003ba0:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <jogAxisX+0x70>)
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	ee07 3a90 	vmov	s15, r3
 8003ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bac:	4b18      	ldr	r3, [pc, #96]	; (8003c10 <jogAxisX+0x74>)
 8003bae:	edc3 7a00 	vstr	s15, [r3]
	if (refXPos > 2500) {
 8003bb2:	4b17      	ldr	r3, [pc, #92]	; (8003c10 <jogAxisX+0x74>)
 8003bb4:	edd3 7a00 	vldr	s15, [r3]
 8003bb8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003c14 <jogAxisX+0x78>
 8003bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc4:	dd07      	ble.n	8003bd6 <jogAxisX+0x3a>
		dirAxisX = 1;
 8003bc6:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <jogAxisX+0x7c>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
		registerFrame[64].U16 = 0b0000000000000100; // JOG RIGHT : x-axis Moving Status
 8003bcc:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <jogAxisX+0x80>)
 8003bce:	2204      	movs	r2, #4
 8003bd0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	} else {
		registerFrame[64].U16 = 0; // RESET : x-axis Moving Status

	}

}
 8003bd4:	e015      	b.n	8003c02 <jogAxisX+0x66>
	} else if (refXPos < 1500) {
 8003bd6:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <jogAxisX+0x74>)
 8003bd8:	edd3 7a00 	vldr	s15, [r3]
 8003bdc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003c20 <jogAxisX+0x84>
 8003be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be8:	d507      	bpl.n	8003bfa <jogAxisX+0x5e>
		dirAxisX = 0;
 8003bea:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <jogAxisX+0x7c>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
		registerFrame[64].U16 = 0b0000000000001000; // JOG LEFT : x-axis Moving Status
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <jogAxisX+0x80>)
 8003bf2:	2208      	movs	r2, #8
 8003bf4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8003bf8:	e003      	b.n	8003c02 <jogAxisX+0x66>
		registerFrame[64].U16 = 0; // RESET : x-axis Moving Status
 8003bfa:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <jogAxisX+0x80>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8003c02:	bf00      	nop
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	20000dd8 	.word	0x20000dd8
 8003c10:	20000220 	.word	0x20000220
 8003c14:	451c4000 	.word	0x451c4000
 8003c18:	20000245 	.word	0x20000245
 8003c1c:	20000d44 	.word	0x20000d44
 8003c20:	44bb8000 	.word	0x44bb8000

08003c24 <handleEmergency>:

void HAL_ADC_ConvCallback(ADC_HandleTypeDef *hadc) {

}

void handleEmergency() {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == 0) {
 8003c28:	2120      	movs	r1, #32
 8003c2a:	480a      	ldr	r0, [pc, #40]	; (8003c54 <handleEmergency+0x30>)
 8003c2c:	f001 fff6 	bl	8005c1c <HAL_GPIO_ReadPin>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <handleEmergency+0x20>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8003c36:	2201      	movs	r2, #1
 8003c38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c3c:	4805      	ldr	r0, [pc, #20]	; (8003c54 <handleEmergency+0x30>)
 8003c3e:	f002 f805 	bl	8005c4c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
	}
}
 8003c42:	e005      	b.n	8003c50 <handleEmergency+0x2c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8003c44:	2200      	movs	r2, #0
 8003c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c4a:	4802      	ldr	r0, [pc, #8]	; (8003c54 <handleEmergency+0x30>)
 8003c4c:	f001 fffe 	bl	8005c4c <HAL_GPIO_WritePin>
}
 8003c50:	bf00      	nop
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40020800 	.word	0x40020800

08003c58 <pilotLamp>:
void pilotLamp(uint8_t id, uint8_t status) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	460a      	mov	r2, r1
 8003c62:	71fb      	strb	r3, [r7, #7]
 8003c64:	4613      	mov	r3, r2
 8003c66:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(pilotLampPin[id].PORT, pilotLampPin[id].PIN, status);
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <pilotLamp+0x34>)
 8003c6c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	4a06      	ldr	r2, [pc, #24]	; (8003c8c <pilotLamp+0x34>)
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4413      	add	r3, r2
 8003c78:	889b      	ldrh	r3, [r3, #4]
 8003c7a:	79ba      	ldrb	r2, [r7, #6]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f001 ffe5 	bl	8005c4c <HAL_GPIO_WritePin>

}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	2000022c 	.word	0x2000022c

08003c90 <endEffectorControl>:

void endEffectorControl(uint8_t mode, uint8_t status) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af04      	add	r7, sp, #16
 8003c96:	4603      	mov	r3, r0
 8003c98:	460a      	mov	r2, r1
 8003c9a:	71fb      	strb	r3, [r7, #7]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	71bb      	strb	r3, [r7, #6]
	switch (mode) {
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	2b05      	cmp	r3, #5
 8003ca4:	f200 809f 	bhi.w	8003de6 <endEffectorControl+0x156>
 8003ca8:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <endEffectorControl+0x20>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003cc9 	.word	0x08003cc9
 8003cb4:	08003cf3 	.word	0x08003cf3
 8003cb8:	08003d39 	.word	0x08003d39
 8003cbc:	08003d63 	.word	0x08003d63
 8003cc0:	08003d8d 	.word	0x08003d8d
 8003cc4:	08003db3 	.word	0x08003db3
	case 0: // LED ON-Off
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 8003cc8:	4b49      	ldr	r3, [pc, #292]	; (8003df0 <endEffectorControl+0x160>)
 8003cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d17d      	bne.n	8003dd0 <endEffectorControl+0x140>
			static uint8_t data[2][1] = { { 0x00 }, { 0x01 } };
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x01,
			I2C_MEMADD_SIZE_8BIT, data[status], 1, 100);
 8003cd4:	79bb      	ldrb	r3, [r7, #6]
 8003cd6:	4a47      	ldr	r2, [pc, #284]	; (8003df4 <endEffectorControl+0x164>)
 8003cd8:	4413      	add	r3, r2
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x01,
 8003cda:	2264      	movs	r2, #100	; 0x64
 8003cdc:	9202      	str	r2, [sp, #8]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	9201      	str	r2, [sp, #4]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	212a      	movs	r1, #42	; 0x2a
 8003cea:	4841      	ldr	r0, [pc, #260]	; (8003df0 <endEffectorControl+0x160>)
 8003cec:	f002 fb4c 	bl	8006388 <HAL_I2C_Mem_Write>
		}
		break;
 8003cf0:	e06e      	b.n	8003dd0 <endEffectorControl+0x140>

	case 1: //  Emergency Mode
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 8003cf2:	4b3f      	ldr	r3, [pc, #252]	; (8003df0 <endEffectorControl+0x160>)
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d16a      	bne.n	8003dd4 <endEffectorControl+0x144>
			if (status == 1) {
 8003cfe:	79bb      	ldrb	r3, [r7, #6]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d10c      	bne.n	8003d1e <endEffectorControl+0x8e>
				static uint8_t data[3] = { 0x7A, 0xFF, 0x81 };
				HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0xE5,
 8003d04:	2364      	movs	r3, #100	; 0x64
 8003d06:	9302      	str	r3, [sp, #8]
 8003d08:	2303      	movs	r3, #3
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	4b3a      	ldr	r3, [pc, #232]	; (8003df8 <endEffectorControl+0x168>)
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2301      	movs	r3, #1
 8003d12:	22e5      	movs	r2, #229	; 0xe5
 8003d14:	212a      	movs	r1, #42	; 0x2a
 8003d16:	4836      	ldr	r0, [pc, #216]	; (8003df0 <endEffectorControl+0x160>)
 8003d18:	f002 fb36 	bl	8006388 <HAL_I2C_Mem_Write>
				static uint8_t data[1] = { 0xF0 };
				HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0xF0,
				I2C_MEMADD_SIZE_8BIT, data, 0, 100);
			}
		}
		break;
 8003d1c:	e05a      	b.n	8003dd4 <endEffectorControl+0x144>
				HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0xF0,
 8003d1e:	2364      	movs	r3, #100	; 0x64
 8003d20:	9302      	str	r3, [sp, #8]
 8003d22:	2300      	movs	r3, #0
 8003d24:	9301      	str	r3, [sp, #4]
 8003d26:	4b35      	ldr	r3, [pc, #212]	; (8003dfc <endEffectorControl+0x16c>)
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	22f0      	movs	r2, #240	; 0xf0
 8003d2e:	212a      	movs	r1, #42	; 0x2a
 8003d30:	482f      	ldr	r0, [pc, #188]	; (8003df0 <endEffectorControl+0x160>)
 8003d32:	f002 fb29 	bl	8006388 <HAL_I2C_Mem_Write>
		break;
 8003d36:	e04d      	b.n	8003dd4 <endEffectorControl+0x144>

	case 2: // Gripper Working and Gripper Stops Working
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 8003d38:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <endEffectorControl+0x160>)
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d149      	bne.n	8003dd8 <endEffectorControl+0x148>
			static uint8_t data[2][1] = { { 0x8C }, { 0x13 } };
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x10,
			I2C_MEMADD_SIZE_8BIT, data[status], 1, 100);
 8003d44:	79bb      	ldrb	r3, [r7, #6]
 8003d46:	4a2e      	ldr	r2, [pc, #184]	; (8003e00 <endEffectorControl+0x170>)
 8003d48:	4413      	add	r3, r2
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x10,
 8003d4a:	2264      	movs	r2, #100	; 0x64
 8003d4c:	9202      	str	r2, [sp, #8]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	9201      	str	r2, [sp, #4]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	2301      	movs	r3, #1
 8003d56:	2210      	movs	r2, #16
 8003d58:	212a      	movs	r1, #42	; 0x2a
 8003d5a:	4825      	ldr	r0, [pc, #148]	; (8003df0 <endEffectorControl+0x160>)
 8003d5c:	f002 fb14 	bl	8006388 <HAL_I2C_Mem_Write>
		}
		break;
 8003d60:	e03a      	b.n	8003dd8 <endEffectorControl+0x148>

	case 3: // Gripper Pick Up and Gripper Place down
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 8003d62:	4b23      	ldr	r3, [pc, #140]	; (8003df0 <endEffectorControl+0x160>)
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d136      	bne.n	8003ddc <endEffectorControl+0x14c>
			static uint8_t data[2][1] = { { 0x69 }, { 0x5A } };
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x10,
			I2C_MEMADD_SIZE_8BIT, data[status], 1, 100);
 8003d6e:	79bb      	ldrb	r3, [r7, #6]
 8003d70:	4a24      	ldr	r2, [pc, #144]	; (8003e04 <endEffectorControl+0x174>)
 8003d72:	4413      	add	r3, r2
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x10,
 8003d74:	2264      	movs	r2, #100	; 0x64
 8003d76:	9202      	str	r2, [sp, #8]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	9201      	str	r2, [sp, #4]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	2301      	movs	r3, #1
 8003d80:	2210      	movs	r2, #16
 8003d82:	212a      	movs	r1, #42	; 0x2a
 8003d84:	481a      	ldr	r0, [pc, #104]	; (8003df0 <endEffectorControl+0x160>)
 8003d86:	f002 faff 	bl	8006388 <HAL_I2C_Mem_Write>
		}
		break;
 8003d8a:	e027      	b.n	8003ddc <endEffectorControl+0x14c>

	case 4: // Soft reset
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 8003d8c:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <endEffectorControl+0x160>)
 8003d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d123      	bne.n	8003de0 <endEffectorControl+0x150>
			static uint8_t data[3] = { 0xFF, 0x55, 0xAA };
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x00,
 8003d98:	2364      	movs	r3, #100	; 0x64
 8003d9a:	9302      	str	r3, [sp, #8]
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <endEffectorControl+0x178>)
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	2301      	movs	r3, #1
 8003da6:	2200      	movs	r2, #0
 8003da8:	212a      	movs	r1, #42	; 0x2a
 8003daa:	4811      	ldr	r0, [pc, #68]	; (8003df0 <endEffectorControl+0x160>)
 8003dac:	f002 faec 	bl	8006388 <HAL_I2C_Mem_Write>
			I2C_MEMADD_SIZE_8BIT, data, 3, 100);
		}
		break;
 8003db0:	e016      	b.n	8003de0 <endEffectorControl+0x150>

	case 5: // Current status
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 8003db2:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <endEffectorControl+0x160>)
 8003db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d112      	bne.n	8003de4 <endEffectorControl+0x154>
			HAL_I2C_Master_Receive(&hi2c2, endEffector_ADDR << 1, readStatus, 1,
 8003dbe:	2364      	movs	r3, #100	; 0x64
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	4a11      	ldr	r2, [pc, #68]	; (8003e0c <endEffectorControl+0x17c>)
 8003dc6:	212a      	movs	r1, #42	; 0x2a
 8003dc8:	4809      	ldr	r0, [pc, #36]	; (8003df0 <endEffectorControl+0x160>)
 8003dca:	f002 f8b7 	bl	8005f3c <HAL_I2C_Master_Receive>
					100);
		}
		break;
 8003dce:	e009      	b.n	8003de4 <endEffectorControl+0x154>
		break;
 8003dd0:	bf00      	nop
 8003dd2:	e008      	b.n	8003de6 <endEffectorControl+0x156>
		break;
 8003dd4:	bf00      	nop
 8003dd6:	e006      	b.n	8003de6 <endEffectorControl+0x156>
		break;
 8003dd8:	bf00      	nop
 8003dda:	e004      	b.n	8003de6 <endEffectorControl+0x156>
		break;
 8003ddc:	bf00      	nop
 8003dde:	e002      	b.n	8003de6 <endEffectorControl+0x156>
		break;
 8003de0:	bf00      	nop
 8003de2:	e000      	b.n	8003de6 <endEffectorControl+0x156>
		break;
 8003de4:	bf00      	nop
	}
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	200003c0 	.word	0x200003c0
 8003df4:	20000270 	.word	0x20000270
 8003df8:	20000274 	.word	0x20000274
 8003dfc:	20000278 	.word	0x20000278
 8003e00:	2000027c 	.word	0x2000027c
 8003e04:	20000280 	.word	0x20000280
 8003e08:	20000284 	.word	0x20000284
 8003e0c:	20000f3c 	.word	0x20000f3c

08003e10 <endEffectorStatusControl>:

void endEffectorStatusControl(uint16_t regisFrame) // PUT REGISTOR
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	80fb      	strh	r3, [r7, #6]

	switch (regisFrame) {
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	2b0a      	cmp	r3, #10
 8003e1e:	d857      	bhi.n	8003ed0 <endEffectorStatusControl+0xc0>
 8003e20:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <endEffectorStatusControl+0x18>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e55 	.word	0x08003e55
 8003e2c:	08003e75 	.word	0x08003e75
 8003e30:	08003e95 	.word	0x08003e95
 8003e34:	08003ed1 	.word	0x08003ed1
 8003e38:	08003ed1 	.word	0x08003ed1
 8003e3c:	08003ed1 	.word	0x08003ed1
 8003e40:	08003eb5 	.word	0x08003eb5
 8003e44:	08003ed1 	.word	0x08003ed1
 8003e48:	08003ed1 	.word	0x08003ed1
 8003e4c:	08003ed1 	.word	0x08003ed1
 8003e50:	08003ec3 	.word	0x08003ec3
	case 0b0000000000000000: // LASER OFF
		endEffectorControl(endEffector.gripperWork, 0);
 8003e54:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <endEffectorStatusControl+0xc8>)
 8003e56:	789b      	ldrb	r3, [r3, #2]
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ff18 	bl	8003c90 <endEffectorControl>
		HAL_Delay(10);
 8003e60:	200a      	movs	r0, #10
 8003e62:	f000 fc03 	bl	800466c <HAL_Delay>
		endEffectorControl(endEffector.testMode, 0);
 8003e66:	4b1c      	ldr	r3, [pc, #112]	; (8003ed8 <endEffectorStatusControl+0xc8>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ff0f 	bl	8003c90 <endEffectorControl>
		break;
 8003e72:	e02d      	b.n	8003ed0 <endEffectorStatusControl+0xc0>
	case 0b0000000000000001: // LASER ON

		endEffectorControl(endEffector.gripperWork, 0);
 8003e74:	4b18      	ldr	r3, [pc, #96]	; (8003ed8 <endEffectorStatusControl+0xc8>)
 8003e76:	789b      	ldrb	r3, [r3, #2]
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ff08 	bl	8003c90 <endEffectorControl>
		HAL_Delay(10);
 8003e80:	200a      	movs	r0, #10
 8003e82:	f000 fbf3 	bl	800466c <HAL_Delay>
		endEffectorControl(endEffector.testMode, 1);
 8003e86:	4b14      	ldr	r3, [pc, #80]	; (8003ed8 <endEffectorStatusControl+0xc8>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff feff 	bl	8003c90 <endEffectorControl>
		break;
 8003e92:	e01d      	b.n	8003ed0 <endEffectorStatusControl+0xc0>
	case 0b0000000000000010: // GRIPPER POWER

		endEffectorControl(endEffector.testMode, 0);
 8003e94:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <endEffectorStatusControl+0xc8>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fef8 	bl	8003c90 <endEffectorControl>
		HAL_Delay(10);
 8003ea0:	200a      	movs	r0, #10
 8003ea2:	f000 fbe3 	bl	800466c <HAL_Delay>
		endEffectorControl(endEffector.gripperWork, 1);
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <endEffectorStatusControl+0xc8>)
 8003ea8:	789b      	ldrb	r3, [r3, #2]
 8003eaa:	2101      	movs	r1, #1
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff feef 	bl	8003c90 <endEffectorControl>
		break;
 8003eb2:	e00d      	b.n	8003ed0 <endEffectorStatusControl+0xc0>
	case 0b0000000000000110: // GRIPPER PICK

		endEffectorControl(endEffector.gripperPickAndPlace, 1); // 1 -> PICK
 8003eb4:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <endEffectorStatusControl+0xc8>)
 8003eb6:	78db      	ldrb	r3, [r3, #3]
 8003eb8:	2101      	movs	r1, #1
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff fee8 	bl	8003c90 <endEffectorControl>
		break;
 8003ec0:	e006      	b.n	8003ed0 <endEffectorStatusControl+0xc0>
	case 0b0000000000001010: // GRIPPER PLACE
		endEffectorControl(endEffector.gripperPickAndPlace, 0); // 1 -> PLACE
 8003ec2:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <endEffectorStatusControl+0xc8>)
 8003ec4:	78db      	ldrb	r3, [r3, #3]
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff fee1 	bl	8003c90 <endEffectorControl>
		break;
 8003ece:	bf00      	nop
	}

}
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000268 	.word	0x20000268

08003edc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ee0:	b672      	cpsid	i
}
 8003ee2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003ee4:	e7fe      	b.n	8003ee4 <Error_Handler+0x8>
	...

08003ee8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <HAL_MspInit+0x4c>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	4a0f      	ldr	r2, [pc, #60]	; (8003f34 <HAL_MspInit+0x4c>)
 8003ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003efc:	6453      	str	r3, [r2, #68]	; 0x44
 8003efe:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <HAL_MspInit+0x4c>)
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f06:	607b      	str	r3, [r7, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	603b      	str	r3, [r7, #0]
 8003f0e:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_MspInit+0x4c>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	4a08      	ldr	r2, [pc, #32]	; (8003f34 <HAL_MspInit+0x4c>)
 8003f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f18:	6413      	str	r3, [r2, #64]	; 0x40
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_MspInit+0x4c>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003f26:	2007      	movs	r0, #7
 8003f28:	f001 f896 	bl	8005058 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40023800 	.word	0x40023800

08003f38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	; 0x28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f40:	f107 0314 	add.w	r3, r7, #20
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2f      	ldr	r2, [pc, #188]	; (8004014 <HAL_ADC_MspInit+0xdc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d157      	bne.n	800400a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	4b2e      	ldr	r3, [pc, #184]	; (8004018 <HAL_ADC_MspInit+0xe0>)
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	4a2d      	ldr	r2, [pc, #180]	; (8004018 <HAL_ADC_MspInit+0xe0>)
 8003f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f68:	6453      	str	r3, [r2, #68]	; 0x44
 8003f6a:	4b2b      	ldr	r3, [pc, #172]	; (8004018 <HAL_ADC_MspInit+0xe0>)
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	613b      	str	r3, [r7, #16]
 8003f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	4b27      	ldr	r3, [pc, #156]	; (8004018 <HAL_ADC_MspInit+0xe0>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	4a26      	ldr	r2, [pc, #152]	; (8004018 <HAL_ADC_MspInit+0xe0>)
 8003f80:	f043 0304 	orr.w	r3, r3, #4
 8003f84:	6313      	str	r3, [r2, #48]	; 0x30
 8003f86:	4b24      	ldr	r3, [pc, #144]	; (8004018 <HAL_ADC_MspInit+0xe0>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003f92:	2309      	movs	r3, #9
 8003f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f96:	2303      	movs	r3, #3
 8003f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f9e:	f107 0314 	add.w	r3, r7, #20
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	481d      	ldr	r0, [pc, #116]	; (800401c <HAL_ADC_MspInit+0xe4>)
 8003fa6:	f001 fcb5 	bl	8005914 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003faa:	4b1d      	ldr	r3, [pc, #116]	; (8004020 <HAL_ADC_MspInit+0xe8>)
 8003fac:	4a1d      	ldr	r2, [pc, #116]	; (8004024 <HAL_ADC_MspInit+0xec>)
 8003fae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003fb0:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <HAL_ADC_MspInit+0xe8>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fb6:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <HAL_ADC_MspInit+0xe8>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fbc:	4b18      	ldr	r3, [pc, #96]	; (8004020 <HAL_ADC_MspInit+0xe8>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003fc2:	4b17      	ldr	r3, [pc, #92]	; (8004020 <HAL_ADC_MspInit+0xe8>)
 8003fc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fc8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fca:	4b15      	ldr	r3, [pc, #84]	; (8004020 <HAL_ADC_MspInit+0xe8>)
 8003fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fd0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003fd2:	4b13      	ldr	r3, [pc, #76]	; (8004020 <HAL_ADC_MspInit+0xe8>)
 8003fd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fd8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003fda:	4b11      	ldr	r3, [pc, #68]	; (8004020 <HAL_ADC_MspInit+0xe8>)
 8003fdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fe0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003fe2:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <HAL_ADC_MspInit+0xe8>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fe8:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <HAL_ADC_MspInit+0xe8>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003fee:	480c      	ldr	r0, [pc, #48]	; (8004020 <HAL_ADC_MspInit+0xe8>)
 8003ff0:	f001 f874 	bl	80050dc <HAL_DMA_Init>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003ffa:	f7ff ff6f 	bl	8003edc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a07      	ldr	r2, [pc, #28]	; (8004020 <HAL_ADC_MspInit+0xe8>)
 8004002:	639a      	str	r2, [r3, #56]	; 0x38
 8004004:	4a06      	ldr	r2, [pc, #24]	; (8004020 <HAL_ADC_MspInit+0xe8>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800400a:	bf00      	nop
 800400c:	3728      	adds	r7, #40	; 0x28
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40012000 	.word	0x40012000
 8004018:	40023800 	.word	0x40023800
 800401c:	40020800 	.word	0x40020800
 8004020:	20000360 	.word	0x20000360
 8004024:	40026410 	.word	0x40026410

08004028 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004030:	f107 0314 	add.w	r3, r7, #20
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	60da      	str	r2, [r3, #12]
 800403e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a29      	ldr	r2, [pc, #164]	; (80040ec <HAL_I2C_MspInit+0xc4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d14c      	bne.n	80040e4 <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <HAL_I2C_MspInit+0xc8>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	4a27      	ldr	r2, [pc, #156]	; (80040f0 <HAL_I2C_MspInit+0xc8>)
 8004054:	f043 0302 	orr.w	r3, r3, #2
 8004058:	6313      	str	r3, [r2, #48]	; 0x30
 800405a:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <HAL_I2C_MspInit+0xc8>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800406a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800406c:	2312      	movs	r3, #18
 800406e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004070:	2300      	movs	r3, #0
 8004072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004074:	2303      	movs	r3, #3
 8004076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004078:	2304      	movs	r3, #4
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800407c:	f107 0314 	add.w	r3, r7, #20
 8004080:	4619      	mov	r1, r3
 8004082:	481c      	ldr	r0, [pc, #112]	; (80040f4 <HAL_I2C_MspInit+0xcc>)
 8004084:	f001 fc46 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004088:	2308      	movs	r3, #8
 800408a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800408c:	2312      	movs	r3, #18
 800408e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004090:	2300      	movs	r3, #0
 8004092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004094:	2303      	movs	r3, #3
 8004096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004098:	2309      	movs	r3, #9
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800409c:	f107 0314 	add.w	r3, r7, #20
 80040a0:	4619      	mov	r1, r3
 80040a2:	4814      	ldr	r0, [pc, #80]	; (80040f4 <HAL_I2C_MspInit+0xcc>)
 80040a4:	f001 fc36 	bl	8005914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <HAL_I2C_MspInit+0xc8>)
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	4a0f      	ldr	r2, [pc, #60]	; (80040f0 <HAL_I2C_MspInit+0xc8>)
 80040b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040b6:	6413      	str	r3, [r2, #64]	; 0x40
 80040b8:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <HAL_I2C_MspInit+0xc8>)
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80040c4:	2200      	movs	r2, #0
 80040c6:	2100      	movs	r1, #0
 80040c8:	2021      	movs	r0, #33	; 0x21
 80040ca:	f000 ffd0 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80040ce:	2021      	movs	r0, #33	; 0x21
 80040d0:	f000 ffe9 	bl	80050a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80040d4:	2200      	movs	r2, #0
 80040d6:	2100      	movs	r1, #0
 80040d8:	2022      	movs	r0, #34	; 0x22
 80040da:	f000 ffc8 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80040de:	2022      	movs	r0, #34	; 0x22
 80040e0:	f000 ffe1 	bl	80050a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80040e4:	bf00      	nop
 80040e6:	3728      	adds	r7, #40	; 0x28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40005800 	.word	0x40005800
 80040f0:	40023800 	.word	0x40023800
 80040f4:	40020400 	.word	0x40020400

080040f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a0e      	ldr	r2, [pc, #56]	; (8004140 <HAL_TIM_PWM_MspInit+0x48>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d115      	bne.n	8004136 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <HAL_TIM_PWM_MspInit+0x4c>)
 8004110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004112:	4a0c      	ldr	r2, [pc, #48]	; (8004144 <HAL_TIM_PWM_MspInit+0x4c>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	6453      	str	r3, [r2, #68]	; 0x44
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <HAL_TIM_PWM_MspInit+0x4c>)
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004126:	2200      	movs	r2, #0
 8004128:	2100      	movs	r1, #0
 800412a:	201a      	movs	r0, #26
 800412c:	f000 ff9f 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004130:	201a      	movs	r0, #26
 8004132:	f000 ffb8 	bl	80050a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004136:	bf00      	nop
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40010000 	.word	0x40010000
 8004144:	40023800 	.word	0x40023800

08004148 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004158:	d116      	bne.n	8004188 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	4b28      	ldr	r3, [pc, #160]	; (8004200 <HAL_TIM_Base_MspInit+0xb8>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	4a27      	ldr	r2, [pc, #156]	; (8004200 <HAL_TIM_Base_MspInit+0xb8>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	6413      	str	r3, [r2, #64]	; 0x40
 800416a:	4b25      	ldr	r3, [pc, #148]	; (8004200 <HAL_TIM_Base_MspInit+0xb8>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004176:	2200      	movs	r2, #0
 8004178:	2100      	movs	r1, #0
 800417a:	201c      	movs	r0, #28
 800417c:	f000 ff77 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004180:	201c      	movs	r0, #28
 8004182:	f000 ff90 	bl	80050a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004186:	e036      	b.n	80041f6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <HAL_TIM_Base_MspInit+0xbc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d116      	bne.n	80041c0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <HAL_TIM_Base_MspInit+0xb8>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	4a19      	ldr	r2, [pc, #100]	; (8004200 <HAL_TIM_Base_MspInit+0xb8>)
 800419c:	f043 0302 	orr.w	r3, r3, #2
 80041a0:	6413      	str	r3, [r2, #64]	; 0x40
 80041a2:	4b17      	ldr	r3, [pc, #92]	; (8004200 <HAL_TIM_Base_MspInit+0xb8>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80041ae:	2200      	movs	r2, #0
 80041b0:	2100      	movs	r1, #0
 80041b2:	201d      	movs	r0, #29
 80041b4:	f000 ff5b 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80041b8:	201d      	movs	r0, #29
 80041ba:	f000 ff74 	bl	80050a6 <HAL_NVIC_EnableIRQ>
}
 80041be:	e01a      	b.n	80041f6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a10      	ldr	r2, [pc, #64]	; (8004208 <HAL_TIM_Base_MspInit+0xc0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d115      	bne.n	80041f6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <HAL_TIM_Base_MspInit+0xb8>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	4a0b      	ldr	r2, [pc, #44]	; (8004200 <HAL_TIM_Base_MspInit+0xb8>)
 80041d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d8:	6453      	str	r3, [r2, #68]	; 0x44
 80041da:	4b09      	ldr	r3, [pc, #36]	; (8004200 <HAL_TIM_Base_MspInit+0xb8>)
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80041e6:	2200      	movs	r2, #0
 80041e8:	2100      	movs	r1, #0
 80041ea:	201a      	movs	r0, #26
 80041ec:	f000 ff3f 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80041f0:	201a      	movs	r0, #26
 80041f2:	f000 ff58 	bl	80050a6 <HAL_NVIC_EnableIRQ>
}
 80041f6:	bf00      	nop
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40023800 	.word	0x40023800
 8004204:	40000400 	.word	0x40000400
 8004208:	40014800 	.word	0x40014800

0800420c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004214:	f107 0314 	add.w	r3, r7, #20
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	609a      	str	r2, [r3, #8]
 8004220:	60da      	str	r2, [r3, #12]
 8004222:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a19      	ldr	r2, [pc, #100]	; (8004290 <HAL_TIM_Encoder_MspInit+0x84>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d12b      	bne.n	8004286 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	4b18      	ldr	r3, [pc, #96]	; (8004294 <HAL_TIM_Encoder_MspInit+0x88>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	4a17      	ldr	r2, [pc, #92]	; (8004294 <HAL_TIM_Encoder_MspInit+0x88>)
 8004238:	f043 0308 	orr.w	r3, r3, #8
 800423c:	6413      	str	r3, [r2, #64]	; 0x40
 800423e:	4b15      	ldr	r3, [pc, #84]	; (8004294 <HAL_TIM_Encoder_MspInit+0x88>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	4b11      	ldr	r3, [pc, #68]	; (8004294 <HAL_TIM_Encoder_MspInit+0x88>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	4a10      	ldr	r2, [pc, #64]	; (8004294 <HAL_TIM_Encoder_MspInit+0x88>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6313      	str	r3, [r2, #48]	; 0x30
 800425a:	4b0e      	ldr	r3, [pc, #56]	; (8004294 <HAL_TIM_Encoder_MspInit+0x88>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004266:	2303      	movs	r3, #3
 8004268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426a:	2302      	movs	r3, #2
 800426c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800426e:	2301      	movs	r3, #1
 8004270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004272:	2300      	movs	r3, #0
 8004274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004276:	2302      	movs	r3, #2
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800427a:	f107 0314 	add.w	r3, r7, #20
 800427e:	4619      	mov	r1, r3
 8004280:	4805      	ldr	r0, [pc, #20]	; (8004298 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004282:	f001 fb47 	bl	8005914 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004286:	bf00      	nop
 8004288:	3728      	adds	r7, #40	; 0x28
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40000c00 	.word	0x40000c00
 8004294:	40023800 	.word	0x40023800
 8004298:	40020000 	.word	0x40020000

0800429c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a4:	f107 030c 	add.w	r3, r7, #12
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a12      	ldr	r2, [pc, #72]	; (8004304 <HAL_TIM_MspPostInit+0x68>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d11e      	bne.n	80042fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	4b11      	ldr	r3, [pc, #68]	; (8004308 <HAL_TIM_MspPostInit+0x6c>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	4a10      	ldr	r2, [pc, #64]	; (8004308 <HAL_TIM_MspPostInit+0x6c>)
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	6313      	str	r3, [r2, #48]	; 0x30
 80042ce:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <HAL_TIM_MspPostInit+0x6c>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80042da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e0:	2302      	movs	r3, #2
 80042e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042ec:	2301      	movs	r3, #1
 80042ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f0:	f107 030c 	add.w	r3, r7, #12
 80042f4:	4619      	mov	r1, r3
 80042f6:	4805      	ldr	r0, [pc, #20]	; (800430c <HAL_TIM_MspPostInit+0x70>)
 80042f8:	f001 fb0c 	bl	8005914 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80042fc:	bf00      	nop
 80042fe:	3720      	adds	r7, #32
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40010000 	.word	0x40010000
 8004308:	40023800 	.word	0x40023800
 800430c:	40020000 	.word	0x40020000

08004310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	; 0x28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004318:	f107 0314 	add.w	r3, r7, #20
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a34      	ldr	r2, [pc, #208]	; (8004400 <HAL_UART_MspInit+0xf0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d161      	bne.n	80043f6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	4b33      	ldr	r3, [pc, #204]	; (8004404 <HAL_UART_MspInit+0xf4>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	4a32      	ldr	r2, [pc, #200]	; (8004404 <HAL_UART_MspInit+0xf4>)
 800433c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004340:	6413      	str	r3, [r2, #64]	; 0x40
 8004342:	4b30      	ldr	r3, [pc, #192]	; (8004404 <HAL_UART_MspInit+0xf4>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <HAL_UART_MspInit+0xf4>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	4a2b      	ldr	r2, [pc, #172]	; (8004404 <HAL_UART_MspInit+0xf4>)
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	6313      	str	r3, [r2, #48]	; 0x30
 800435e:	4b29      	ldr	r3, [pc, #164]	; (8004404 <HAL_UART_MspInit+0xf4>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800436a:	230c      	movs	r3, #12
 800436c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436e:	2302      	movs	r3, #2
 8004370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004376:	2303      	movs	r3, #3
 8004378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800437a:	2307      	movs	r3, #7
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800437e:	f107 0314 	add.w	r3, r7, #20
 8004382:	4619      	mov	r1, r3
 8004384:	4820      	ldr	r0, [pc, #128]	; (8004408 <HAL_UART_MspInit+0xf8>)
 8004386:	f001 fac5 	bl	8005914 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800438a:	4b20      	ldr	r3, [pc, #128]	; (800440c <HAL_UART_MspInit+0xfc>)
 800438c:	4a20      	ldr	r2, [pc, #128]	; (8004410 <HAL_UART_MspInit+0x100>)
 800438e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004390:	4b1e      	ldr	r3, [pc, #120]	; (800440c <HAL_UART_MspInit+0xfc>)
 8004392:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004396:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004398:	4b1c      	ldr	r3, [pc, #112]	; (800440c <HAL_UART_MspInit+0xfc>)
 800439a:	2240      	movs	r2, #64	; 0x40
 800439c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800439e:	4b1b      	ldr	r3, [pc, #108]	; (800440c <HAL_UART_MspInit+0xfc>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043a4:	4b19      	ldr	r3, [pc, #100]	; (800440c <HAL_UART_MspInit+0xfc>)
 80043a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043aa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043ac:	4b17      	ldr	r3, [pc, #92]	; (800440c <HAL_UART_MspInit+0xfc>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043b2:	4b16      	ldr	r3, [pc, #88]	; (800440c <HAL_UART_MspInit+0xfc>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80043b8:	4b14      	ldr	r3, [pc, #80]	; (800440c <HAL_UART_MspInit+0xfc>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80043be:	4b13      	ldr	r3, [pc, #76]	; (800440c <HAL_UART_MspInit+0xfc>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043c4:	4b11      	ldr	r3, [pc, #68]	; (800440c <HAL_UART_MspInit+0xfc>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80043ca:	4810      	ldr	r0, [pc, #64]	; (800440c <HAL_UART_MspInit+0xfc>)
 80043cc:	f000 fe86 	bl	80050dc <HAL_DMA_Init>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80043d6:	f7ff fd81 	bl	8003edc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a0b      	ldr	r2, [pc, #44]	; (800440c <HAL_UART_MspInit+0xfc>)
 80043de:	635a      	str	r2, [r3, #52]	; 0x34
 80043e0:	4a0a      	ldr	r2, [pc, #40]	; (800440c <HAL_UART_MspInit+0xfc>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80043e6:	2200      	movs	r2, #0
 80043e8:	2100      	movs	r1, #0
 80043ea:	2026      	movs	r0, #38	; 0x26
 80043ec:	f000 fe3f 	bl	800506e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80043f0:	2026      	movs	r0, #38	; 0x26
 80043f2:	f000 fe58 	bl	80050a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80043f6:	bf00      	nop
 80043f8:	3728      	adds	r7, #40	; 0x28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40004400 	.word	0x40004400
 8004404:	40023800 	.word	0x40023800
 8004408:	40020000 	.word	0x40020000
 800440c:	2000080c 	.word	0x2000080c
 8004410:	400260a0 	.word	0x400260a0

08004414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004418:	e7fe      	b.n	8004418 <NMI_Handler+0x4>

0800441a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800441a:	b480      	push	{r7}
 800441c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800441e:	e7fe      	b.n	800441e <HardFault_Handler+0x4>

08004420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004424:	e7fe      	b.n	8004424 <MemManage_Handler+0x4>

08004426 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004426:	b480      	push	{r7}
 8004428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800442a:	e7fe      	b.n	800442a <BusFault_Handler+0x4>

0800442c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004430:	e7fe      	b.n	8004430 <UsageFault_Handler+0x4>

08004432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004432:	b480      	push	{r7}
 8004434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004436:	bf00      	nop
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004444:	bf00      	nop
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800444e:	b480      	push	{r7}
 8004450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004452:	bf00      	nop
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004460:	f000 f8e4 	bl	800462c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004464:	bf00      	nop
 8004466:	bd80      	pop	{r7, pc}

08004468 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800446c:	4802      	ldr	r0, [pc, #8]	; (8004478 <DMA1_Stream6_IRQHandler+0x10>)
 800446e:	f000 ffcd 	bl	800540c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004472:	bf00      	nop
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	2000080c 	.word	0x2000080c

0800447c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004480:	4803      	ldr	r0, [pc, #12]	; (8004490 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004482:	f005 f9c9 	bl	8009818 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004486:	4803      	ldr	r0, [pc, #12]	; (8004494 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004488:	f005 f9c6 	bl	8009818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800448c:	bf00      	nop
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20000414 	.word	0x20000414
 8004494:	200006e4 	.word	0x200006e4

08004498 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800449c:	4802      	ldr	r0, [pc, #8]	; (80044a8 <TIM2_IRQHandler+0x10>)
 800449e:	f005 f9bb 	bl	8009818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	200004c8 	.word	0x200004c8

080044ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80044b0:	4802      	ldr	r0, [pc, #8]	; (80044bc <TIM3_IRQHandler+0x10>)
 80044b2:	f005 f9b1 	bl	8009818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	2000057c 	.word	0x2000057c

080044c0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80044c4:	4802      	ldr	r0, [pc, #8]	; (80044d0 <I2C2_EV_IRQHandler+0x10>)
 80044c6:	f002 f859 	bl	800657c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	200003c0 	.word	0x200003c0

080044d4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80044d8:	4802      	ldr	r0, [pc, #8]	; (80044e4 <I2C2_ER_IRQHandler+0x10>)
 80044da:	f002 f9c0 	bl	800685e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80044de:	bf00      	nop
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200003c0 	.word	0x200003c0

080044e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80044ec:	4802      	ldr	r0, [pc, #8]	; (80044f8 <USART2_IRQHandler+0x10>)
 80044ee:	f006 fc9b 	bl	800ae28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80044f2:	bf00      	nop
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20000798 	.word	0x20000798

080044fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004500:	4802      	ldr	r0, [pc, #8]	; (800450c <DMA2_Stream0_IRQHandler+0x10>)
 8004502:	f000 ff83 	bl	800540c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20000360 	.word	0x20000360

08004510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <SystemInit+0x20>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451a:	4a05      	ldr	r2, [pc, #20]	; (8004530 <SystemInit+0x20>)
 800451c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	e000ed00 	.word	0xe000ed00

08004534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800456c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004538:	480d      	ldr	r0, [pc, #52]	; (8004570 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800453a:	490e      	ldr	r1, [pc, #56]	; (8004574 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800453c:	4a0e      	ldr	r2, [pc, #56]	; (8004578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800453e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004540:	e002      	b.n	8004548 <LoopCopyDataInit>

08004542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004546:	3304      	adds	r3, #4

08004548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800454a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800454c:	d3f9      	bcc.n	8004542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800454e:	4a0b      	ldr	r2, [pc, #44]	; (800457c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004550:	4c0b      	ldr	r4, [pc, #44]	; (8004580 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004554:	e001      	b.n	800455a <LoopFillZerobss>

08004556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004558:	3204      	adds	r2, #4

0800455a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800455a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800455c:	d3fb      	bcc.n	8004556 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800455e:	f7ff ffd7 	bl	8004510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004562:	f007 fcad 	bl	800bec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004566:	f7fc fff9 	bl	800155c <main>
  bx  lr    
 800456a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800456c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004574:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8004578:	0800e250 	.word	0x0800e250
  ldr r2, =_sbss
 800457c:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8004580:	20000f60 	.word	0x20000f60

08004584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004584:	e7fe      	b.n	8004584 <ADC_IRQHandler>
	...

08004588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800458c:	4b0e      	ldr	r3, [pc, #56]	; (80045c8 <HAL_Init+0x40>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0d      	ldr	r2, [pc, #52]	; (80045c8 <HAL_Init+0x40>)
 8004592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004596:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004598:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <HAL_Init+0x40>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a0a      	ldr	r2, [pc, #40]	; (80045c8 <HAL_Init+0x40>)
 800459e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045a4:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <HAL_Init+0x40>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a07      	ldr	r2, [pc, #28]	; (80045c8 <HAL_Init+0x40>)
 80045aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045b0:	2003      	movs	r0, #3
 80045b2:	f000 fd51 	bl	8005058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045b6:	2000      	movs	r0, #0
 80045b8:	f000 f808 	bl	80045cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045bc:	f7ff fc94 	bl	8003ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40023c00 	.word	0x40023c00

080045cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045d4:	4b12      	ldr	r3, [pc, #72]	; (8004620 <HAL_InitTick+0x54>)
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4b12      	ldr	r3, [pc, #72]	; (8004624 <HAL_InitTick+0x58>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	4619      	mov	r1, r3
 80045de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80045e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fd69 	bl	80050c2 <HAL_SYSTICK_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e00e      	b.n	8004618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b0f      	cmp	r3, #15
 80045fe:	d80a      	bhi.n	8004616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004600:	2200      	movs	r2, #0
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	f04f 30ff 	mov.w	r0, #4294967295
 8004608:	f000 fd31 	bl	800506e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800460c:	4a06      	ldr	r2, [pc, #24]	; (8004628 <HAL_InitTick+0x5c>)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	e000      	b.n	8004618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
}
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20000288 	.word	0x20000288
 8004624:	20000290 	.word	0x20000290
 8004628:	2000028c 	.word	0x2000028c

0800462c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <HAL_IncTick+0x20>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	4b06      	ldr	r3, [pc, #24]	; (8004650 <HAL_IncTick+0x24>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4413      	add	r3, r2
 800463c:	4a04      	ldr	r2, [pc, #16]	; (8004650 <HAL_IncTick+0x24>)
 800463e:	6013      	str	r3, [r2, #0]
}
 8004640:	bf00      	nop
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20000290 	.word	0x20000290
 8004650:	20000f5c 	.word	0x20000f5c

08004654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  return uwTick;
 8004658:	4b03      	ldr	r3, [pc, #12]	; (8004668 <HAL_GetTick+0x14>)
 800465a:	681b      	ldr	r3, [r3, #0]
}
 800465c:	4618      	mov	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000f5c 	.word	0x20000f5c

0800466c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004674:	f7ff ffee 	bl	8004654 <HAL_GetTick>
 8004678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d005      	beq.n	8004692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004686:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <HAL_Delay+0x44>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004692:	bf00      	nop
 8004694:	f7ff ffde 	bl	8004654 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d8f7      	bhi.n	8004694 <HAL_Delay+0x28>
  {
  }
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000290 	.word	0x20000290

080046b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e033      	b.n	8004732 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff fc30 	bl	8003f38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d118      	bne.n	8004724 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80046fa:	f023 0302 	bic.w	r3, r3, #2
 80046fe:	f043 0202 	orr.w	r2, r3, #2
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fa58 	bl	8004bbc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f023 0303 	bic.w	r3, r3, #3
 800471a:	f043 0201 	orr.w	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	641a      	str	r2, [r3, #64]	; 0x40
 8004722:	e001      	b.n	8004728 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004730:	7bfb      	ldrb	r3, [r7, #15]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_ADC_Start_DMA+0x1e>
 8004756:	2302      	movs	r3, #2
 8004758:	e0ce      	b.n	80048f8 <HAL_ADC_Start_DMA+0x1bc>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b01      	cmp	r3, #1
 800476e:	d018      	beq.n	80047a2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004780:	4b5f      	ldr	r3, [pc, #380]	; (8004900 <HAL_ADC_Start_DMA+0x1c4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a5f      	ldr	r2, [pc, #380]	; (8004904 <HAL_ADC_Start_DMA+0x1c8>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	0c9a      	lsrs	r2, r3, #18
 800478c:	4613      	mov	r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4413      	add	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004794:	e002      	b.n	800479c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	3b01      	subs	r3, #1
 800479a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f9      	bne.n	8004796 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b0:	d107      	bne.n	80047c2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	f040 8086 	bne.w	80048de <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800480c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004810:	d106      	bne.n	8004820 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	f023 0206 	bic.w	r2, r3, #6
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	645a      	str	r2, [r3, #68]	; 0x44
 800481e:	e002      	b.n	8004826 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800482e:	4b36      	ldr	r3, [pc, #216]	; (8004908 <HAL_ADC_Start_DMA+0x1cc>)
 8004830:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	4a35      	ldr	r2, [pc, #212]	; (800490c <HAL_ADC_Start_DMA+0x1d0>)
 8004838:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	4a34      	ldr	r2, [pc, #208]	; (8004910 <HAL_ADC_Start_DMA+0x1d4>)
 8004840:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	4a33      	ldr	r2, [pc, #204]	; (8004914 <HAL_ADC_Start_DMA+0x1d8>)
 8004848:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004852:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004862:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004872:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	334c      	adds	r3, #76	; 0x4c
 800487e:	4619      	mov	r1, r3
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f000 fcd8 	bl	8005238 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10f      	bne.n	80048b4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d129      	bne.n	80048f6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048b0:	609a      	str	r2, [r3, #8]
 80048b2:	e020      	b.n	80048f6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a17      	ldr	r2, [pc, #92]	; (8004918 <HAL_ADC_Start_DMA+0x1dc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d11b      	bne.n	80048f6 <HAL_ADC_Start_DMA+0x1ba>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d114      	bne.n	80048f6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	e00b      	b.n	80048f6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f043 0210 	orr.w	r2, r3, #16
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	f043 0201 	orr.w	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	20000288 	.word	0x20000288
 8004904:	431bde83 	.word	0x431bde83
 8004908:	40012300 	.word	0x40012300
 800490c:	08004db5 	.word	0x08004db5
 8004910:	08004e6f 	.word	0x08004e6f
 8004914:	08004e8b 	.word	0x08004e8b
 8004918:	40012000 	.word	0x40012000

0800491c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x1c>
 8004970:	2302      	movs	r3, #2
 8004972:	e113      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x244>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b09      	cmp	r3, #9
 8004982:	d925      	bls.n	80049d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68d9      	ldr	r1, [r3, #12]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	461a      	mov	r2, r3
 8004992:	4613      	mov	r3, r2
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	4413      	add	r3, r2
 8004998:	3b1e      	subs	r3, #30
 800499a:	2207      	movs	r2, #7
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	43da      	mvns	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	400a      	ands	r2, r1
 80049a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68d9      	ldr	r1, [r3, #12]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	4618      	mov	r0, r3
 80049bc:	4603      	mov	r3, r0
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	4403      	add	r3, r0
 80049c2:	3b1e      	subs	r3, #30
 80049c4:	409a      	lsls	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	60da      	str	r2, [r3, #12]
 80049ce:	e022      	b.n	8004a16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6919      	ldr	r1, [r3, #16]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	4613      	mov	r3, r2
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	4413      	add	r3, r2
 80049e4:	2207      	movs	r2, #7
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	43da      	mvns	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	400a      	ands	r2, r1
 80049f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6919      	ldr	r1, [r3, #16]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	4618      	mov	r0, r3
 8004a06:	4603      	mov	r3, r0
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	4403      	add	r3, r0
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b06      	cmp	r3, #6
 8004a1c:	d824      	bhi.n	8004a68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	3b05      	subs	r3, #5
 8004a30:	221f      	movs	r2, #31
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43da      	mvns	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	400a      	ands	r2, r1
 8004a3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	3b05      	subs	r3, #5
 8004a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	635a      	str	r2, [r3, #52]	; 0x34
 8004a66:	e04c      	b.n	8004b02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b0c      	cmp	r3, #12
 8004a6e:	d824      	bhi.n	8004aba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	3b23      	subs	r3, #35	; 0x23
 8004a82:	221f      	movs	r2, #31
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43da      	mvns	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	400a      	ands	r2, r1
 8004a90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3b23      	subs	r3, #35	; 0x23
 8004aac:	fa00 f203 	lsl.w	r2, r0, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ab8:	e023      	b.n	8004b02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	3b41      	subs	r3, #65	; 0x41
 8004acc:	221f      	movs	r2, #31
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43da      	mvns	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	400a      	ands	r2, r1
 8004ada:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	4618      	mov	r0, r3
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	3b41      	subs	r3, #65	; 0x41
 8004af6:	fa00 f203 	lsl.w	r2, r0, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b02:	4b29      	ldr	r3, [pc, #164]	; (8004ba8 <HAL_ADC_ConfigChannel+0x250>)
 8004b04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a28      	ldr	r2, [pc, #160]	; (8004bac <HAL_ADC_ConfigChannel+0x254>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d10f      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0x1d8>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b12      	cmp	r3, #18
 8004b16:	d10b      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a1d      	ldr	r2, [pc, #116]	; (8004bac <HAL_ADC_ConfigChannel+0x254>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d12b      	bne.n	8004b92 <HAL_ADC_ConfigChannel+0x23a>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a1c      	ldr	r2, [pc, #112]	; (8004bb0 <HAL_ADC_ConfigChannel+0x258>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d003      	beq.n	8004b4c <HAL_ADC_ConfigChannel+0x1f4>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b11      	cmp	r3, #17
 8004b4a:	d122      	bne.n	8004b92 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a11      	ldr	r2, [pc, #68]	; (8004bb0 <HAL_ADC_ConfigChannel+0x258>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d111      	bne.n	8004b92 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b6e:	4b11      	ldr	r3, [pc, #68]	; (8004bb4 <HAL_ADC_ConfigChannel+0x25c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a11      	ldr	r2, [pc, #68]	; (8004bb8 <HAL_ADC_ConfigChannel+0x260>)
 8004b74:	fba2 2303 	umull	r2, r3, r2, r3
 8004b78:	0c9a      	lsrs	r2, r3, #18
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b84:	e002      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f9      	bne.n	8004b86 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	40012300 	.word	0x40012300
 8004bac:	40012000 	.word	0x40012000
 8004bb0:	10000012 	.word	0x10000012
 8004bb4:	20000288 	.word	0x20000288
 8004bb8:	431bde83 	.word	0x431bde83

08004bbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bc4:	4b79      	ldr	r3, [pc, #484]	; (8004dac <ADC_Init+0x1f0>)
 8004bc6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6859      	ldr	r1, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	021a      	lsls	r2, r3, #8
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004c14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6859      	ldr	r1, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6899      	ldr	r1, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4e:	4a58      	ldr	r2, [pc, #352]	; (8004db0 <ADC_Init+0x1f4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d022      	beq.n	8004c9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6899      	ldr	r1, [r3, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6899      	ldr	r1, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	609a      	str	r2, [r3, #8]
 8004c98:	e00f      	b.n	8004cba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ca8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0202 	bic.w	r2, r2, #2
 8004cc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6899      	ldr	r1, [r3, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	7e1b      	ldrb	r3, [r3, #24]
 8004cd4:	005a      	lsls	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01b      	beq.n	8004d20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cf6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004d06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6859      	ldr	r1, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	3b01      	subs	r3, #1
 8004d14:	035a      	lsls	r2, r3, #13
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]
 8004d1e:	e007      	b.n	8004d30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	051a      	lsls	r2, r3, #20
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6899      	ldr	r1, [r3, #8]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d72:	025a      	lsls	r2, r3, #9
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6899      	ldr	r1, [r3, #8]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	029a      	lsls	r2, r3, #10
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	609a      	str	r2, [r3, #8]
}
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40012300 	.word	0x40012300
 8004db0:	0f000001 	.word	0x0f000001

08004db4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d13c      	bne.n	8004e48 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d12b      	bne.n	8004e40 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d127      	bne.n	8004e40 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d006      	beq.n	8004e0c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d119      	bne.n	8004e40 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0220 	bic.w	r2, r2, #32
 8004e1a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d105      	bne.n	8004e40 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	f043 0201 	orr.w	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7ff fd6b 	bl	800491c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e46:	e00e      	b.n	8004e66 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	f003 0310 	and.w	r3, r3, #16
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f7ff fd75 	bl	8004944 <HAL_ADC_ErrorCallback>
}
 8004e5a:	e004      	b.n	8004e66 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
}
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff fd57 	bl	8004930 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e82:	bf00      	nop
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2240      	movs	r2, #64	; 0x40
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	f043 0204 	orr.w	r2, r3, #4
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f7ff fd4a 	bl	8004944 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004eb0:	bf00      	nop
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <__NVIC_SetPriorityGrouping+0x44>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004eea:	4a04      	ldr	r2, [pc, #16]	; (8004efc <__NVIC_SetPriorityGrouping+0x44>)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	60d3      	str	r3, [r2, #12]
}
 8004ef0:	bf00      	nop
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	e000ed00 	.word	0xe000ed00

08004f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f04:	4b04      	ldr	r3, [pc, #16]	; (8004f18 <__NVIC_GetPriorityGrouping+0x18>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	0a1b      	lsrs	r3, r3, #8
 8004f0a:	f003 0307 	and.w	r3, r3, #7
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	e000ed00 	.word	0xe000ed00

08004f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	4603      	mov	r3, r0
 8004f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	db0b      	blt.n	8004f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	f003 021f 	and.w	r2, r3, #31
 8004f34:	4907      	ldr	r1, [pc, #28]	; (8004f54 <__NVIC_EnableIRQ+0x38>)
 8004f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	e000e100 	.word	0xe000e100

08004f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	6039      	str	r1, [r7, #0]
 8004f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	db0a      	blt.n	8004f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	490c      	ldr	r1, [pc, #48]	; (8004fa4 <__NVIC_SetPriority+0x4c>)
 8004f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f76:	0112      	lsls	r2, r2, #4
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f80:	e00a      	b.n	8004f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	4908      	ldr	r1, [pc, #32]	; (8004fa8 <__NVIC_SetPriority+0x50>)
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	3b04      	subs	r3, #4
 8004f90:	0112      	lsls	r2, r2, #4
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	440b      	add	r3, r1
 8004f96:	761a      	strb	r2, [r3, #24]
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	e000e100 	.word	0xe000e100
 8004fa8:	e000ed00 	.word	0xe000ed00

08004fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b089      	sub	sp, #36	; 0x24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f1c3 0307 	rsb	r3, r3, #7
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	bf28      	it	cs
 8004fca:	2304      	movcs	r3, #4
 8004fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	2b06      	cmp	r3, #6
 8004fd4:	d902      	bls.n	8004fdc <NVIC_EncodePriority+0x30>
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	3b03      	subs	r3, #3
 8004fda:	e000      	b.n	8004fde <NVIC_EncodePriority+0x32>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	43da      	mvns	r2, r3
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	401a      	ands	r2, r3
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffe:	43d9      	mvns	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005004:	4313      	orrs	r3, r2
         );
}
 8005006:	4618      	mov	r0, r3
 8005008:	3724      	adds	r7, #36	; 0x24
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
	...

08005014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3b01      	subs	r3, #1
 8005020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005024:	d301      	bcc.n	800502a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005026:	2301      	movs	r3, #1
 8005028:	e00f      	b.n	800504a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800502a:	4a0a      	ldr	r2, [pc, #40]	; (8005054 <SysTick_Config+0x40>)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3b01      	subs	r3, #1
 8005030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005032:	210f      	movs	r1, #15
 8005034:	f04f 30ff 	mov.w	r0, #4294967295
 8005038:	f7ff ff8e 	bl	8004f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <SysTick_Config+0x40>)
 800503e:	2200      	movs	r2, #0
 8005040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005042:	4b04      	ldr	r3, [pc, #16]	; (8005054 <SysTick_Config+0x40>)
 8005044:	2207      	movs	r2, #7
 8005046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	e000e010 	.word	0xe000e010

08005058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff ff29 	bl	8004eb8 <__NVIC_SetPriorityGrouping>
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800506e:	b580      	push	{r7, lr}
 8005070:	b086      	sub	sp, #24
 8005072:	af00      	add	r7, sp, #0
 8005074:	4603      	mov	r3, r0
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	607a      	str	r2, [r7, #4]
 800507a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005080:	f7ff ff3e 	bl	8004f00 <__NVIC_GetPriorityGrouping>
 8005084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	6978      	ldr	r0, [r7, #20]
 800508c:	f7ff ff8e 	bl	8004fac <NVIC_EncodePriority>
 8005090:	4602      	mov	r2, r0
 8005092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005096:	4611      	mov	r1, r2
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff ff5d 	bl	8004f58 <__NVIC_SetPriority>
}
 800509e:	bf00      	nop
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	4603      	mov	r3, r0
 80050ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff ff31 	bl	8004f1c <__NVIC_EnableIRQ>
}
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b082      	sub	sp, #8
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7ff ffa2 	bl	8005014 <SysTick_Config>
 80050d0:	4603      	mov	r3, r0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050e8:	f7ff fab4 	bl	8004654 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e099      	b.n	800522c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0201 	bic.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005118:	e00f      	b.n	800513a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800511a:	f7ff fa9b 	bl	8004654 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b05      	cmp	r3, #5
 8005126:	d908      	bls.n	800513a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2203      	movs	r2, #3
 8005132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e078      	b.n	800522c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e8      	bne.n	800511a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4b38      	ldr	r3, [pc, #224]	; (8005234 <HAL_DMA_Init+0x158>)
 8005154:	4013      	ands	r3, r2
 8005156:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005166:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005172:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800517e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	2b04      	cmp	r3, #4
 8005192:	d107      	bne.n	80051a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	4313      	orrs	r3, r2
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f023 0307 	bic.w	r3, r3, #7
 80051ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d117      	bne.n	80051fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00e      	beq.n	80051fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fb1b 	bl	800581c <DMA_CheckFifoParam>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2240      	movs	r2, #64	; 0x40
 80051f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80051fa:	2301      	movs	r3, #1
 80051fc:	e016      	b.n	800522c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fad2 	bl	80057b0 <DMA_CalcBaseAndBitshift>
 800520c:	4603      	mov	r3, r0
 800520e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005214:	223f      	movs	r2, #63	; 0x3f
 8005216:	409a      	lsls	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	f010803f 	.word	0xf010803f

08005238 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005256:	2b01      	cmp	r3, #1
 8005258:	d101      	bne.n	800525e <HAL_DMA_Start_IT+0x26>
 800525a:	2302      	movs	r3, #2
 800525c:	e040      	b.n	80052e0 <HAL_DMA_Start_IT+0xa8>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b01      	cmp	r3, #1
 8005270:	d12f      	bne.n	80052d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2202      	movs	r2, #2
 8005276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	68b9      	ldr	r1, [r7, #8]
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 fa64 	bl	8005754 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005290:	223f      	movs	r2, #63	; 0x3f
 8005292:	409a      	lsls	r2, r3
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0216 	orr.w	r2, r2, #22
 80052a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d007      	beq.n	80052c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0208 	orr.w	r2, r2, #8
 80052be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	e005      	b.n	80052de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80052da:	2302      	movs	r3, #2
 80052dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80052de:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80052f6:	f7ff f9ad 	bl	8004654 <HAL_GetTick>
 80052fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d008      	beq.n	800531a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2280      	movs	r2, #128	; 0x80
 800530c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e052      	b.n	80053c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0216 	bic.w	r2, r2, #22
 8005328:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695a      	ldr	r2, [r3, #20]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005338:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <HAL_DMA_Abort+0x62>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005346:	2b00      	cmp	r3, #0
 8005348:	d007      	beq.n	800535a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0208 	bic.w	r2, r2, #8
 8005358:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800536a:	e013      	b.n	8005394 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800536c:	f7ff f972 	bl	8004654 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b05      	cmp	r3, #5
 8005378:	d90c      	bls.n	8005394 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2203      	movs	r2, #3
 8005384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e015      	b.n	80053c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e4      	bne.n	800536c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a6:	223f      	movs	r2, #63	; 0x3f
 80053a8:	409a      	lsls	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d004      	beq.n	80053e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2280      	movs	r2, #128	; 0x80
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e00c      	b.n	8005400 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2205      	movs	r2, #5
 80053ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005418:	4b8e      	ldr	r3, [pc, #568]	; (8005654 <HAL_DMA_IRQHandler+0x248>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a8e      	ldr	r2, [pc, #568]	; (8005658 <HAL_DMA_IRQHandler+0x24c>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	0a9b      	lsrs	r3, r3, #10
 8005424:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005436:	2208      	movs	r2, #8
 8005438:	409a      	lsls	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4013      	ands	r3, r2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d01a      	beq.n	8005478 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d013      	beq.n	8005478 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0204 	bic.w	r2, r2, #4
 800545e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005464:	2208      	movs	r2, #8
 8005466:	409a      	lsls	r2, r3
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005470:	f043 0201 	orr.w	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547c:	2201      	movs	r2, #1
 800547e:	409a      	lsls	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4013      	ands	r3, r2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d012      	beq.n	80054ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00b      	beq.n	80054ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549a:	2201      	movs	r2, #1
 800549c:	409a      	lsls	r2, r3
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a6:	f043 0202 	orr.w	r2, r3, #2
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b2:	2204      	movs	r2, #4
 80054b4:	409a      	lsls	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4013      	ands	r3, r2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d012      	beq.n	80054e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00b      	beq.n	80054e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d0:	2204      	movs	r2, #4
 80054d2:	409a      	lsls	r2, r3
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054dc:	f043 0204 	orr.w	r2, r3, #4
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e8:	2210      	movs	r2, #16
 80054ea:	409a      	lsls	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d043      	beq.n	800557c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0308 	and.w	r3, r3, #8
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d03c      	beq.n	800557c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005506:	2210      	movs	r2, #16
 8005508:	409a      	lsls	r2, r3
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d018      	beq.n	800554e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d108      	bne.n	800553c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	2b00      	cmp	r3, #0
 8005530:	d024      	beq.n	800557c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	4798      	blx	r3
 800553a:	e01f      	b.n	800557c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01b      	beq.n	800557c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	4798      	blx	r3
 800554c:	e016      	b.n	800557c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005558:	2b00      	cmp	r3, #0
 800555a:	d107      	bne.n	800556c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0208 	bic.w	r2, r2, #8
 800556a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005580:	2220      	movs	r2, #32
 8005582:	409a      	lsls	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4013      	ands	r3, r2
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 808f 	beq.w	80056ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 8087 	beq.w	80056ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a2:	2220      	movs	r2, #32
 80055a4:	409a      	lsls	r2, r3
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b05      	cmp	r3, #5
 80055b4:	d136      	bne.n	8005624 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0216 	bic.w	r2, r2, #22
 80055c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695a      	ldr	r2, [r3, #20]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d103      	bne.n	80055e6 <HAL_DMA_IRQHandler+0x1da>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d007      	beq.n	80055f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0208 	bic.w	r2, r2, #8
 80055f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fa:	223f      	movs	r2, #63	; 0x3f
 80055fc:	409a      	lsls	r2, r3
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005616:	2b00      	cmp	r3, #0
 8005618:	d07e      	beq.n	8005718 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	4798      	blx	r3
        }
        return;
 8005622:	e079      	b.n	8005718 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d01d      	beq.n	800566e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10d      	bne.n	800565c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005644:	2b00      	cmp	r3, #0
 8005646:	d031      	beq.n	80056ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	4798      	blx	r3
 8005650:	e02c      	b.n	80056ac <HAL_DMA_IRQHandler+0x2a0>
 8005652:	bf00      	nop
 8005654:	20000288 	.word	0x20000288
 8005658:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d023      	beq.n	80056ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	4798      	blx	r3
 800566c:	e01e      	b.n	80056ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10f      	bne.n	800569c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0210 	bic.w	r2, r2, #16
 800568a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d032      	beq.n	800571a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d022      	beq.n	8005706 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2205      	movs	r2, #5
 80056c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0201 	bic.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	3301      	adds	r3, #1
 80056dc:	60bb      	str	r3, [r7, #8]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d307      	bcc.n	80056f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f2      	bne.n	80056d8 <HAL_DMA_IRQHandler+0x2cc>
 80056f2:	e000      	b.n	80056f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80056f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d005      	beq.n	800571a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	4798      	blx	r3
 8005716:	e000      	b.n	800571a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005718:	bf00      	nop
    }
  }
}
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800572e:	b2db      	uxtb	r3, r3
}
 8005730:	4618      	mov	r0, r3
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005770:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b40      	cmp	r3, #64	; 0x40
 8005780:	d108      	bne.n	8005794 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005792:	e007      	b.n	80057a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	60da      	str	r2, [r3, #12]
}
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	3b10      	subs	r3, #16
 80057c0:	4a14      	ldr	r2, [pc, #80]	; (8005814 <DMA_CalcBaseAndBitshift+0x64>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	091b      	lsrs	r3, r3, #4
 80057c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80057ca:	4a13      	ldr	r2, [pc, #76]	; (8005818 <DMA_CalcBaseAndBitshift+0x68>)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b03      	cmp	r3, #3
 80057dc:	d909      	bls.n	80057f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057e6:	f023 0303 	bic.w	r3, r3, #3
 80057ea:	1d1a      	adds	r2, r3, #4
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	659a      	str	r2, [r3, #88]	; 0x58
 80057f0:	e007      	b.n	8005802 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057fa:	f023 0303 	bic.w	r3, r3, #3
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	aaaaaaab 	.word	0xaaaaaaab
 8005818:	0800de30 	.word	0x0800de30

0800581c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d11f      	bne.n	8005876 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b03      	cmp	r3, #3
 800583a:	d856      	bhi.n	80058ea <DMA_CheckFifoParam+0xce>
 800583c:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <DMA_CheckFifoParam+0x28>)
 800583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005842:	bf00      	nop
 8005844:	08005855 	.word	0x08005855
 8005848:	08005867 	.word	0x08005867
 800584c:	08005855 	.word	0x08005855
 8005850:	080058eb 	.word	0x080058eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d046      	beq.n	80058ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005864:	e043      	b.n	80058ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800586e:	d140      	bne.n	80058f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005874:	e03d      	b.n	80058f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587e:	d121      	bne.n	80058c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b03      	cmp	r3, #3
 8005884:	d837      	bhi.n	80058f6 <DMA_CheckFifoParam+0xda>
 8005886:	a201      	add	r2, pc, #4	; (adr r2, 800588c <DMA_CheckFifoParam+0x70>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	0800589d 	.word	0x0800589d
 8005890:	080058a3 	.word	0x080058a3
 8005894:	0800589d 	.word	0x0800589d
 8005898:	080058b5 	.word	0x080058b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
      break;
 80058a0:	e030      	b.n	8005904 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d025      	beq.n	80058fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058b2:	e022      	b.n	80058fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058bc:	d11f      	bne.n	80058fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80058c2:	e01c      	b.n	80058fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d903      	bls.n	80058d2 <DMA_CheckFifoParam+0xb6>
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d003      	beq.n	80058d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80058d0:	e018      	b.n	8005904 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	73fb      	strb	r3, [r7, #15]
      break;
 80058d6:	e015      	b.n	8005904 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00e      	beq.n	8005902 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
      break;
 80058e8:	e00b      	b.n	8005902 <DMA_CheckFifoParam+0xe6>
      break;
 80058ea:	bf00      	nop
 80058ec:	e00a      	b.n	8005904 <DMA_CheckFifoParam+0xe8>
      break;
 80058ee:	bf00      	nop
 80058f0:	e008      	b.n	8005904 <DMA_CheckFifoParam+0xe8>
      break;
 80058f2:	bf00      	nop
 80058f4:	e006      	b.n	8005904 <DMA_CheckFifoParam+0xe8>
      break;
 80058f6:	bf00      	nop
 80058f8:	e004      	b.n	8005904 <DMA_CheckFifoParam+0xe8>
      break;
 80058fa:	bf00      	nop
 80058fc:	e002      	b.n	8005904 <DMA_CheckFifoParam+0xe8>
      break;   
 80058fe:	bf00      	nop
 8005900:	e000      	b.n	8005904 <DMA_CheckFifoParam+0xe8>
      break;
 8005902:	bf00      	nop
    }
  } 
  
  return status; 
 8005904:	7bfb      	ldrb	r3, [r7, #15]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop

08005914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005914:	b480      	push	{r7}
 8005916:	b089      	sub	sp, #36	; 0x24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005922:	2300      	movs	r3, #0
 8005924:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005926:	2300      	movs	r3, #0
 8005928:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800592a:	2300      	movs	r3, #0
 800592c:	61fb      	str	r3, [r7, #28]
 800592e:	e159      	b.n	8005be4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005930:	2201      	movs	r2, #1
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	4013      	ands	r3, r2
 8005942:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	429a      	cmp	r2, r3
 800594a:	f040 8148 	bne.w	8005bde <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	2b01      	cmp	r3, #1
 8005958:	d005      	beq.n	8005966 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005962:	2b02      	cmp	r3, #2
 8005964:	d130      	bne.n	80059c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	2203      	movs	r2, #3
 8005972:	fa02 f303 	lsl.w	r3, r2, r3
 8005976:	43db      	mvns	r3, r3
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	4013      	ands	r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	4313      	orrs	r3, r2
 800598e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800599c:	2201      	movs	r2, #1
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	fa02 f303 	lsl.w	r3, r2, r3
 80059a4:	43db      	mvns	r3, r3
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	4013      	ands	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	091b      	lsrs	r3, r3, #4
 80059b2:	f003 0201 	and.w	r2, r3, #1
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	4313      	orrs	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f003 0303 	and.w	r3, r3, #3
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	d017      	beq.n	8005a04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	2203      	movs	r2, #3
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	43db      	mvns	r3, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4013      	ands	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d123      	bne.n	8005a58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	08da      	lsrs	r2, r3, #3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3208      	adds	r2, #8
 8005a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	220f      	movs	r2, #15
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	4013      	ands	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	fa02 f303 	lsl.w	r3, r2, r3
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	08da      	lsrs	r2, r3, #3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3208      	adds	r2, #8
 8005a52:	69b9      	ldr	r1, [r7, #24]
 8005a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	2203      	movs	r2, #3
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f003 0203 	and.w	r2, r3, #3
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 80a2 	beq.w	8005bde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	4b57      	ldr	r3, [pc, #348]	; (8005bfc <HAL_GPIO_Init+0x2e8>)
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa2:	4a56      	ldr	r2, [pc, #344]	; (8005bfc <HAL_GPIO_Init+0x2e8>)
 8005aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8005aaa:	4b54      	ldr	r3, [pc, #336]	; (8005bfc <HAL_GPIO_Init+0x2e8>)
 8005aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ab6:	4a52      	ldr	r2, [pc, #328]	; (8005c00 <HAL_GPIO_Init+0x2ec>)
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	089b      	lsrs	r3, r3, #2
 8005abc:	3302      	adds	r3, #2
 8005abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	220f      	movs	r2, #15
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a49      	ldr	r2, [pc, #292]	; (8005c04 <HAL_GPIO_Init+0x2f0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d019      	beq.n	8005b16 <HAL_GPIO_Init+0x202>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a48      	ldr	r2, [pc, #288]	; (8005c08 <HAL_GPIO_Init+0x2f4>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d013      	beq.n	8005b12 <HAL_GPIO_Init+0x1fe>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a47      	ldr	r2, [pc, #284]	; (8005c0c <HAL_GPIO_Init+0x2f8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00d      	beq.n	8005b0e <HAL_GPIO_Init+0x1fa>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a46      	ldr	r2, [pc, #280]	; (8005c10 <HAL_GPIO_Init+0x2fc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d007      	beq.n	8005b0a <HAL_GPIO_Init+0x1f6>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a45      	ldr	r2, [pc, #276]	; (8005c14 <HAL_GPIO_Init+0x300>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d101      	bne.n	8005b06 <HAL_GPIO_Init+0x1f2>
 8005b02:	2304      	movs	r3, #4
 8005b04:	e008      	b.n	8005b18 <HAL_GPIO_Init+0x204>
 8005b06:	2307      	movs	r3, #7
 8005b08:	e006      	b.n	8005b18 <HAL_GPIO_Init+0x204>
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e004      	b.n	8005b18 <HAL_GPIO_Init+0x204>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e002      	b.n	8005b18 <HAL_GPIO_Init+0x204>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e000      	b.n	8005b18 <HAL_GPIO_Init+0x204>
 8005b16:	2300      	movs	r3, #0
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	f002 0203 	and.w	r2, r2, #3
 8005b1e:	0092      	lsls	r2, r2, #2
 8005b20:	4093      	lsls	r3, r2
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b28:	4935      	ldr	r1, [pc, #212]	; (8005c00 <HAL_GPIO_Init+0x2ec>)
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	089b      	lsrs	r3, r3, #2
 8005b2e:	3302      	adds	r3, #2
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b36:	4b38      	ldr	r3, [pc, #224]	; (8005c18 <HAL_GPIO_Init+0x304>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	4013      	ands	r3, r2
 8005b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b5a:	4a2f      	ldr	r2, [pc, #188]	; (8005c18 <HAL_GPIO_Init+0x304>)
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b60:	4b2d      	ldr	r3, [pc, #180]	; (8005c18 <HAL_GPIO_Init+0x304>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b84:	4a24      	ldr	r2, [pc, #144]	; (8005c18 <HAL_GPIO_Init+0x304>)
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b8a:	4b23      	ldr	r3, [pc, #140]	; (8005c18 <HAL_GPIO_Init+0x304>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	43db      	mvns	r3, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	4013      	ands	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005bae:	4a1a      	ldr	r2, [pc, #104]	; (8005c18 <HAL_GPIO_Init+0x304>)
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bb4:	4b18      	ldr	r3, [pc, #96]	; (8005c18 <HAL_GPIO_Init+0x304>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bd8:	4a0f      	ldr	r2, [pc, #60]	; (8005c18 <HAL_GPIO_Init+0x304>)
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	3301      	adds	r3, #1
 8005be2:	61fb      	str	r3, [r7, #28]
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	2b0f      	cmp	r3, #15
 8005be8:	f67f aea2 	bls.w	8005930 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
 8005bf0:	3724      	adds	r7, #36	; 0x24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40023800 	.word	0x40023800
 8005c00:	40013800 	.word	0x40013800
 8005c04:	40020000 	.word	0x40020000
 8005c08:	40020400 	.word	0x40020400
 8005c0c:	40020800 	.word	0x40020800
 8005c10:	40020c00 	.word	0x40020c00
 8005c14:	40021000 	.word	0x40021000
 8005c18:	40013c00 	.word	0x40013c00

08005c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	460b      	mov	r3, r1
 8005c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	887b      	ldrh	r3, [r7, #2]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c34:	2301      	movs	r3, #1
 8005c36:	73fb      	strb	r3, [r7, #15]
 8005c38:	e001      	b.n	8005c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	460b      	mov	r3, r1
 8005c56:	807b      	strh	r3, [r7, #2]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c5c:	787b      	ldrb	r3, [r7, #1]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c62:	887a      	ldrh	r2, [r7, #2]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c68:	e003      	b.n	8005c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c6a:	887b      	ldrh	r3, [r7, #2]
 8005c6c:	041a      	lsls	r2, r3, #16
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	619a      	str	r2, [r3, #24]
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b085      	sub	sp, #20
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	460b      	mov	r3, r1
 8005c88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c90:	887a      	ldrh	r2, [r7, #2]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4013      	ands	r3, r2
 8005c96:	041a      	lsls	r2, r3, #16
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	43d9      	mvns	r1, r3
 8005c9c:	887b      	ldrh	r3, [r7, #2]
 8005c9e:	400b      	ands	r3, r1
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	619a      	str	r2, [r3, #24]
}
 8005ca6:	bf00      	nop
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
	...

08005cb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e12b      	b.n	8005f1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fe f9a4 	bl	8004028 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2224      	movs	r2, #36	; 0x24
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0201 	bic.w	r2, r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d18:	f003 f8bc 	bl	8008e94 <HAL_RCC_GetPCLK1Freq>
 8005d1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	4a81      	ldr	r2, [pc, #516]	; (8005f28 <HAL_I2C_Init+0x274>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d807      	bhi.n	8005d38 <HAL_I2C_Init+0x84>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4a80      	ldr	r2, [pc, #512]	; (8005f2c <HAL_I2C_Init+0x278>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	bf94      	ite	ls
 8005d30:	2301      	movls	r3, #1
 8005d32:	2300      	movhi	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	e006      	b.n	8005d46 <HAL_I2C_Init+0x92>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4a7d      	ldr	r2, [pc, #500]	; (8005f30 <HAL_I2C_Init+0x27c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	bf94      	ite	ls
 8005d40:	2301      	movls	r3, #1
 8005d42:	2300      	movhi	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e0e7      	b.n	8005f1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4a78      	ldr	r2, [pc, #480]	; (8005f34 <HAL_I2C_Init+0x280>)
 8005d52:	fba2 2303 	umull	r2, r3, r2, r3
 8005d56:	0c9b      	lsrs	r3, r3, #18
 8005d58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	4a6a      	ldr	r2, [pc, #424]	; (8005f28 <HAL_I2C_Init+0x274>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d802      	bhi.n	8005d88 <HAL_I2C_Init+0xd4>
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	3301      	adds	r3, #1
 8005d86:	e009      	b.n	8005d9c <HAL_I2C_Init+0xe8>
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d8e:	fb02 f303 	mul.w	r3, r2, r3
 8005d92:	4a69      	ldr	r2, [pc, #420]	; (8005f38 <HAL_I2C_Init+0x284>)
 8005d94:	fba2 2303 	umull	r2, r3, r2, r3
 8005d98:	099b      	lsrs	r3, r3, #6
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	430b      	orrs	r3, r1
 8005da2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005dae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	495c      	ldr	r1, [pc, #368]	; (8005f28 <HAL_I2C_Init+0x274>)
 8005db8:	428b      	cmp	r3, r1
 8005dba:	d819      	bhi.n	8005df0 <HAL_I2C_Init+0x13c>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	1e59      	subs	r1, r3, #1
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dca:	1c59      	adds	r1, r3, #1
 8005dcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005dd0:	400b      	ands	r3, r1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <HAL_I2C_Init+0x138>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	1e59      	subs	r1, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005de4:	3301      	adds	r3, #1
 8005de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dea:	e051      	b.n	8005e90 <HAL_I2C_Init+0x1dc>
 8005dec:	2304      	movs	r3, #4
 8005dee:	e04f      	b.n	8005e90 <HAL_I2C_Init+0x1dc>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d111      	bne.n	8005e1c <HAL_I2C_Init+0x168>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	1e58      	subs	r0, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6859      	ldr	r1, [r3, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	440b      	add	r3, r1
 8005e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	bf0c      	ite	eq
 8005e14:	2301      	moveq	r3, #1
 8005e16:	2300      	movne	r3, #0
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	e012      	b.n	8005e42 <HAL_I2C_Init+0x18e>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	1e58      	subs	r0, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6859      	ldr	r1, [r3, #4]
 8005e24:	460b      	mov	r3, r1
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	440b      	add	r3, r1
 8005e2a:	0099      	lsls	r1, r3, #2
 8005e2c:	440b      	add	r3, r1
 8005e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e32:	3301      	adds	r3, #1
 8005e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	bf0c      	ite	eq
 8005e3c:	2301      	moveq	r3, #1
 8005e3e:	2300      	movne	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <HAL_I2C_Init+0x196>
 8005e46:	2301      	movs	r3, #1
 8005e48:	e022      	b.n	8005e90 <HAL_I2C_Init+0x1dc>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10e      	bne.n	8005e70 <HAL_I2C_Init+0x1bc>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	1e58      	subs	r0, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6859      	ldr	r1, [r3, #4]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	440b      	add	r3, r1
 8005e60:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e64:	3301      	adds	r3, #1
 8005e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e6e:	e00f      	b.n	8005e90 <HAL_I2C_Init+0x1dc>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	1e58      	subs	r0, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6859      	ldr	r1, [r3, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	440b      	add	r3, r1
 8005e7e:	0099      	lsls	r1, r3, #2
 8005e80:	440b      	add	r3, r1
 8005e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e86:	3301      	adds	r3, #1
 8005e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	6809      	ldr	r1, [r1, #0]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69da      	ldr	r2, [r3, #28]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005ebe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6911      	ldr	r1, [r2, #16]
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	68d2      	ldr	r2, [r2, #12]
 8005eca:	4311      	orrs	r1, r2
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695a      	ldr	r2, [r3, #20]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	000186a0 	.word	0x000186a0
 8005f2c:	001e847f 	.word	0x001e847f
 8005f30:	003d08ff 	.word	0x003d08ff
 8005f34:	431bde83 	.word	0x431bde83
 8005f38:	10624dd3 	.word	0x10624dd3

08005f3c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08c      	sub	sp, #48	; 0x30
 8005f40:	af02      	add	r7, sp, #8
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	607a      	str	r2, [r7, #4]
 8005f46:	461a      	mov	r2, r3
 8005f48:	460b      	mov	r3, r1
 8005f4a:	817b      	strh	r3, [r7, #10]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f50:	f7fe fb80 	bl	8004654 <HAL_GetTick>
 8005f54:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b20      	cmp	r3, #32
 8005f60:	f040 820b 	bne.w	800637a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	2319      	movs	r3, #25
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	497c      	ldr	r1, [pc, #496]	; (8006160 <HAL_I2C_Master_Receive+0x224>)
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f002 f8f6 	bl	8008160 <I2C_WaitOnFlagUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e1fe      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_I2C_Master_Receive+0x50>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e1f7      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d007      	beq.n	8005fb2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f042 0201 	orr.w	r2, r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2222      	movs	r2, #34	; 0x22
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2210      	movs	r2, #16
 8005fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	893a      	ldrh	r2, [r7, #8]
 8005fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4a5c      	ldr	r2, [pc, #368]	; (8006164 <HAL_I2C_Master_Receive+0x228>)
 8005ff2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ff4:	8979      	ldrh	r1, [r7, #10]
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f001 fea4 	bl	8007d48 <I2C_MasterRequestRead>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e1b8      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600e:	2b00      	cmp	r3, #0
 8006010:	d113      	bne.n	800603a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006012:	2300      	movs	r3, #0
 8006014:	623b      	str	r3, [r7, #32]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	623b      	str	r3, [r7, #32]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	623b      	str	r3, [r7, #32]
 8006026:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	e18c      	b.n	8006354 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603e:	2b01      	cmp	r3, #1
 8006040:	d11b      	bne.n	800607a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006050:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006052:	2300      	movs	r3, #0
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	61fb      	str	r3, [r7, #28]
 8006066:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	e16c      	b.n	8006354 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607e:	2b02      	cmp	r3, #2
 8006080:	d11b      	bne.n	80060ba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006090:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060a2:	2300      	movs	r3, #0
 80060a4:	61bb      	str	r3, [r7, #24]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	e14c      	b.n	8006354 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ca:	2300      	movs	r3, #0
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060e0:	e138      	b.n	8006354 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	f200 80f1 	bhi.w	80062ce <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d123      	bne.n	800613c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f002 f9bb 	bl	8008474 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e139      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691a      	ldr	r2, [r3, #16]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006130:	b29b      	uxth	r3, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	855a      	strh	r2, [r3, #42]	; 0x2a
 800613a:	e10b      	b.n	8006354 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006140:	2b02      	cmp	r3, #2
 8006142:	d14e      	bne.n	80061e2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614a:	2200      	movs	r2, #0
 800614c:	4906      	ldr	r1, [pc, #24]	; (8006168 <HAL_I2C_Master_Receive+0x22c>)
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f002 f806 	bl	8008160 <I2C_WaitOnFlagUntilTimeout>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d008      	beq.n	800616c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e10e      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
 800615e:	bf00      	nop
 8006160:	00100002 	.word	0x00100002
 8006164:	ffff0000 	.word	0xffff0000
 8006168:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800617a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	b2d2      	uxtb	r2, r2
 8006188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	b2d2      	uxtb	r2, r2
 80061ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061e0:	e0b8      	b.n	8006354 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	2200      	movs	r2, #0
 80061ea:	4966      	ldr	r1, [pc, #408]	; (8006384 <HAL_I2C_Master_Receive+0x448>)
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f001 ffb7 	bl	8008160 <I2C_WaitOnFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e0bf      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800620a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691a      	ldr	r2, [r3, #16]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006234:	b29b      	uxth	r3, r3
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	2200      	movs	r2, #0
 8006246:	494f      	ldr	r1, [pc, #316]	; (8006384 <HAL_I2C_Master_Receive+0x448>)
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f001 ff89 	bl	8008160 <I2C_WaitOnFlagUntilTimeout>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e091      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006266:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	691a      	ldr	r2, [r3, #16]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006290:	b29b      	uxth	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	b29a      	uxth	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691a      	ldr	r2, [r3, #16]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062cc:	e042      	b.n	8006354 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f002 f8ce 	bl	8008474 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e04c      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	b2d2      	uxtb	r2, r2
 80062ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630a:	b29b      	uxth	r3, r3
 800630c:	3b01      	subs	r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	f003 0304 	and.w	r3, r3, #4
 800631e:	2b04      	cmp	r3, #4
 8006320:	d118      	bne.n	8006354 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	691a      	ldr	r2, [r3, #16]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633e:	3b01      	subs	r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634a:	b29b      	uxth	r3, r3
 800634c:	3b01      	subs	r3, #1
 800634e:	b29a      	uxth	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006358:	2b00      	cmp	r3, #0
 800635a:	f47f aec2 	bne.w	80060e2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	e000      	b.n	800637c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800637a:	2302      	movs	r3, #2
  }
}
 800637c:	4618      	mov	r0, r3
 800637e:	3728      	adds	r7, #40	; 0x28
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	00010004 	.word	0x00010004

08006388 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af02      	add	r7, sp, #8
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	4608      	mov	r0, r1
 8006392:	4611      	mov	r1, r2
 8006394:	461a      	mov	r2, r3
 8006396:	4603      	mov	r3, r0
 8006398:	817b      	strh	r3, [r7, #10]
 800639a:	460b      	mov	r3, r1
 800639c:	813b      	strh	r3, [r7, #8]
 800639e:	4613      	mov	r3, r2
 80063a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063a2:	f7fe f957 	bl	8004654 <HAL_GetTick>
 80063a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b20      	cmp	r3, #32
 80063b2:	f040 80d9 	bne.w	8006568 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	2319      	movs	r3, #25
 80063bc:	2201      	movs	r2, #1
 80063be:	496d      	ldr	r1, [pc, #436]	; (8006574 <HAL_I2C_Mem_Write+0x1ec>)
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f001 fecd 	bl	8008160 <I2C_WaitOnFlagUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80063cc:	2302      	movs	r3, #2
 80063ce:	e0cc      	b.n	800656a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <HAL_I2C_Mem_Write+0x56>
 80063da:	2302      	movs	r3, #2
 80063dc:	e0c5      	b.n	800656a <HAL_I2C_Mem_Write+0x1e2>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d007      	beq.n	8006404 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006412:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2221      	movs	r2, #33	; 0x21
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2240      	movs	r2, #64	; 0x40
 8006420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6a3a      	ldr	r2, [r7, #32]
 800642e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006434:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4a4d      	ldr	r2, [pc, #308]	; (8006578 <HAL_I2C_Mem_Write+0x1f0>)
 8006444:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006446:	88f8      	ldrh	r0, [r7, #6]
 8006448:	893a      	ldrh	r2, [r7, #8]
 800644a:	8979      	ldrh	r1, [r7, #10]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	4603      	mov	r3, r0
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f001 fd44 	bl	8007ee4 <I2C_RequestMemoryWrite>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d052      	beq.n	8006508 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e081      	b.n	800656a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f001 ff4e 	bl	800830c <I2C_WaitOnTXEFlagUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00d      	beq.n	8006492 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	2b04      	cmp	r3, #4
 800647c:	d107      	bne.n	800648e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800648c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e06b      	b.n	800656a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	781a      	ldrb	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d11b      	bne.n	8006508 <HAL_I2C_Mem_Write+0x180>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d017      	beq.n	8006508 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	781a      	ldrb	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1aa      	bne.n	8006466 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f001 ff3a 	bl	800838e <I2C_WaitOnBTFFlagUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00d      	beq.n	800653c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	2b04      	cmp	r3, #4
 8006526:	d107      	bne.n	8006538 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006536:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e016      	b.n	800656a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800654a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2220      	movs	r2, #32
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	e000      	b.n	800656a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006568:	2302      	movs	r3, #2
  }
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	00100002 	.word	0x00100002
 8006578:	ffff0000 	.word	0xffff0000

0800657c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800659c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	2b10      	cmp	r3, #16
 80065aa:	d003      	beq.n	80065b4 <HAL_I2C_EV_IRQHandler+0x38>
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	2b40      	cmp	r3, #64	; 0x40
 80065b0:	f040 80c1 	bne.w	8006736 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10d      	bne.n	80065ea <HAL_I2C_EV_IRQHandler+0x6e>
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80065d4:	d003      	beq.n	80065de <HAL_I2C_EV_IRQHandler+0x62>
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80065dc:	d101      	bne.n	80065e2 <HAL_I2C_EV_IRQHandler+0x66>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <HAL_I2C_EV_IRQHandler+0x68>
 80065e2:	2300      	movs	r3, #0
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	f000 8132 	beq.w	800684e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00c      	beq.n	800660e <HAL_I2C_EV_IRQHandler+0x92>
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	0a5b      	lsrs	r3, r3, #9
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d006      	beq.n	800660e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 ffbc 	bl	800857e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fd83 	bl	8007112 <I2C_Master_SB>
 800660c:	e092      	b.n	8006734 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	08db      	lsrs	r3, r3, #3
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <HAL_I2C_EV_IRQHandler+0xb2>
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	0a5b      	lsrs	r3, r3, #9
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fdf9 	bl	800721e <I2C_Master_ADD10>
 800662c:	e082      	b.n	8006734 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	085b      	lsrs	r3, r3, #1
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d009      	beq.n	800664e <HAL_I2C_EV_IRQHandler+0xd2>
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	0a5b      	lsrs	r3, r3, #9
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fe13 	bl	8007272 <I2C_Master_ADDR>
 800664c:	e072      	b.n	8006734 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	089b      	lsrs	r3, r3, #2
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d03b      	beq.n	80066d2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006668:	f000 80f3 	beq.w	8006852 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	09db      	lsrs	r3, r3, #7
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00f      	beq.n	8006698 <HAL_I2C_EV_IRQHandler+0x11c>
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	0a9b      	lsrs	r3, r3, #10
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d009      	beq.n	8006698 <HAL_I2C_EV_IRQHandler+0x11c>
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	089b      	lsrs	r3, r3, #2
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d103      	bne.n	8006698 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f9f3 	bl	8006a7c <I2C_MasterTransmit_TXE>
 8006696:	e04d      	b.n	8006734 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	089b      	lsrs	r3, r3, #2
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 80d6 	beq.w	8006852 <HAL_I2C_EV_IRQHandler+0x2d6>
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	0a5b      	lsrs	r3, r3, #9
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 80cf 	beq.w	8006852 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80066b4:	7bbb      	ldrb	r3, [r7, #14]
 80066b6:	2b21      	cmp	r3, #33	; 0x21
 80066b8:	d103      	bne.n	80066c2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fa7a 	bl	8006bb4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066c0:	e0c7      	b.n	8006852 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	2b40      	cmp	r3, #64	; 0x40
 80066c6:	f040 80c4 	bne.w	8006852 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fae8 	bl	8006ca0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066d0:	e0bf      	b.n	8006852 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e0:	f000 80b7 	beq.w	8006852 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	099b      	lsrs	r3, r3, #6
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00f      	beq.n	8006710 <HAL_I2C_EV_IRQHandler+0x194>
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	0a9b      	lsrs	r3, r3, #10
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d009      	beq.n	8006710 <HAL_I2C_EV_IRQHandler+0x194>
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	089b      	lsrs	r3, r3, #2
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b00      	cmp	r3, #0
 8006706:	d103      	bne.n	8006710 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fb5d 	bl	8006dc8 <I2C_MasterReceive_RXNE>
 800670e:	e011      	b.n	8006734 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	089b      	lsrs	r3, r3, #2
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 809a 	beq.w	8006852 <HAL_I2C_EV_IRQHandler+0x2d6>
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	0a5b      	lsrs	r3, r3, #9
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 8093 	beq.w	8006852 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fc06 	bl	8006f3e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006732:	e08e      	b.n	8006852 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006734:	e08d      	b.n	8006852 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	61fb      	str	r3, [r7, #28]
 8006746:	e007      	b.n	8006758 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	085b      	lsrs	r3, r3, #1
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	d012      	beq.n	800678a <HAL_I2C_EV_IRQHandler+0x20e>
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	0a5b      	lsrs	r3, r3, #9
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00c      	beq.n	800678a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006780:	69b9      	ldr	r1, [r7, #24]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 ffc4 	bl	8007710 <I2C_Slave_ADDR>
 8006788:	e066      	b.n	8006858 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	091b      	lsrs	r3, r3, #4
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <HAL_I2C_EV_IRQHandler+0x22e>
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	0a5b      	lsrs	r3, r3, #9
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fffe 	bl	80077a4 <I2C_Slave_STOPF>
 80067a8:	e056      	b.n	8006858 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80067aa:	7bbb      	ldrb	r3, [r7, #14]
 80067ac:	2b21      	cmp	r3, #33	; 0x21
 80067ae:	d002      	beq.n	80067b6 <HAL_I2C_EV_IRQHandler+0x23a>
 80067b0:	7bbb      	ldrb	r3, [r7, #14]
 80067b2:	2b29      	cmp	r3, #41	; 0x29
 80067b4:	d125      	bne.n	8006802 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	09db      	lsrs	r3, r3, #7
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00f      	beq.n	80067e2 <HAL_I2C_EV_IRQHandler+0x266>
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	0a9b      	lsrs	r3, r3, #10
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d009      	beq.n	80067e2 <HAL_I2C_EV_IRQHandler+0x266>
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	089b      	lsrs	r3, r3, #2
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d103      	bne.n	80067e2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 feda 	bl	8007594 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067e0:	e039      	b.n	8006856 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	089b      	lsrs	r3, r3, #2
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d033      	beq.n	8006856 <HAL_I2C_EV_IRQHandler+0x2da>
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	0a5b      	lsrs	r3, r3, #9
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d02d      	beq.n	8006856 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 ff07 	bl	800760e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006800:	e029      	b.n	8006856 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	099b      	lsrs	r3, r3, #6
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00f      	beq.n	800682e <HAL_I2C_EV_IRQHandler+0x2b2>
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	0a9b      	lsrs	r3, r3, #10
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d009      	beq.n	800682e <HAL_I2C_EV_IRQHandler+0x2b2>
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	089b      	lsrs	r3, r3, #2
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d103      	bne.n	800682e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 ff12 	bl	8007650 <I2C_SlaveReceive_RXNE>
 800682c:	e014      	b.n	8006858 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	089b      	lsrs	r3, r3, #2
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00e      	beq.n	8006858 <HAL_I2C_EV_IRQHandler+0x2dc>
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	0a5b      	lsrs	r3, r3, #9
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d008      	beq.n	8006858 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 ff40 	bl	80076cc <I2C_SlaveReceive_BTF>
 800684c:	e004      	b.n	8006858 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800684e:	bf00      	nop
 8006850:	e002      	b.n	8006858 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006852:	bf00      	nop
 8006854:	e000      	b.n	8006858 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006856:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b08a      	sub	sp, #40	; 0x28
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006876:	2300      	movs	r3, #0
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006880:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	0a1b      	lsrs	r3, r3, #8
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00e      	beq.n	80068ac <HAL_I2C_ER_IRQHandler+0x4e>
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	0a1b      	lsrs	r3, r3, #8
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d008      	beq.n	80068ac <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	f043 0301 	orr.w	r3, r3, #1
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068aa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	0a5b      	lsrs	r3, r3, #9
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00e      	beq.n	80068d6 <HAL_I2C_ER_IRQHandler+0x78>
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	0a1b      	lsrs	r3, r3, #8
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d008      	beq.n	80068d6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	f043 0302 	orr.w	r3, r3, #2
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80068d4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	0a9b      	lsrs	r3, r3, #10
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d03f      	beq.n	8006962 <HAL_I2C_ER_IRQHandler+0x104>
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	0a1b      	lsrs	r3, r3, #8
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d039      	beq.n	8006962 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80068ee:	7efb      	ldrb	r3, [r7, #27]
 80068f0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006900:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006906:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006908:	7ebb      	ldrb	r3, [r7, #26]
 800690a:	2b20      	cmp	r3, #32
 800690c:	d112      	bne.n	8006934 <HAL_I2C_ER_IRQHandler+0xd6>
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10f      	bne.n	8006934 <HAL_I2C_ER_IRQHandler+0xd6>
 8006914:	7cfb      	ldrb	r3, [r7, #19]
 8006916:	2b21      	cmp	r3, #33	; 0x21
 8006918:	d008      	beq.n	800692c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800691a:	7cfb      	ldrb	r3, [r7, #19]
 800691c:	2b29      	cmp	r3, #41	; 0x29
 800691e:	d005      	beq.n	800692c <HAL_I2C_ER_IRQHandler+0xce>
 8006920:	7cfb      	ldrb	r3, [r7, #19]
 8006922:	2b28      	cmp	r3, #40	; 0x28
 8006924:	d106      	bne.n	8006934 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2b21      	cmp	r3, #33	; 0x21
 800692a:	d103      	bne.n	8006934 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 f869 	bl	8007a04 <I2C_Slave_AF>
 8006932:	e016      	b.n	8006962 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800693c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	f043 0304 	orr.w	r3, r3, #4
 8006944:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006946:	7efb      	ldrb	r3, [r7, #27]
 8006948:	2b10      	cmp	r3, #16
 800694a:	d002      	beq.n	8006952 <HAL_I2C_ER_IRQHandler+0xf4>
 800694c:	7efb      	ldrb	r3, [r7, #27]
 800694e:	2b40      	cmp	r3, #64	; 0x40
 8006950:	d107      	bne.n	8006962 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006960:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	0adb      	lsrs	r3, r3, #11
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00e      	beq.n	800698c <HAL_I2C_ER_IRQHandler+0x12e>
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	0a1b      	lsrs	r3, r3, #8
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d008      	beq.n	800698c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	f043 0308 	orr.w	r3, r3, #8
 8006980:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800698a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	2b00      	cmp	r3, #0
 8006990:	d008      	beq.n	80069a4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f001 f8a0 	bl	8007ae4 <I2C_ITError>
  }
}
 80069a4:	bf00      	nop
 80069a6:	3728      	adds	r7, #40	; 0x28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	70fb      	strb	r3, [r7, #3]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a8a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a92:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d150      	bne.n	8006b44 <I2C_MasterTransmit_TXE+0xc8>
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	2b21      	cmp	r3, #33	; 0x21
 8006aa6:	d14d      	bne.n	8006b44 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b08      	cmp	r3, #8
 8006aac:	d01d      	beq.n	8006aea <I2C_MasterTransmit_TXE+0x6e>
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d01a      	beq.n	8006aea <I2C_MasterTransmit_TXE+0x6e>
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006aba:	d016      	beq.n	8006aea <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006aca:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2211      	movs	r2, #17
 8006ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2220      	movs	r2, #32
 8006ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff ff62 	bl	80069ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ae8:	e060      	b.n	8006bac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006af8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b08:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b40      	cmp	r3, #64	; 0x40
 8006b22:	d107      	bne.n	8006b34 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff ff7d 	bl	8006a2c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b32:	e03b      	b.n	8006bac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff ff35 	bl	80069ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b42:	e033      	b.n	8006bac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	2b21      	cmp	r3, #33	; 0x21
 8006b48:	d005      	beq.n	8006b56 <I2C_MasterTransmit_TXE+0xda>
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	2b40      	cmp	r3, #64	; 0x40
 8006b4e:	d12d      	bne.n	8006bac <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	2b22      	cmp	r3, #34	; 0x22
 8006b54:	d12a      	bne.n	8006bac <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d108      	bne.n	8006b72 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b6e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006b70:	e01c      	b.n	8006bac <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b40      	cmp	r3, #64	; 0x40
 8006b7c:	d103      	bne.n	8006b86 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f88e 	bl	8006ca0 <I2C_MemoryTransmit_TXE_BTF>
}
 8006b84:	e012      	b.n	8006bac <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	781a      	ldrb	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006baa:	e7ff      	b.n	8006bac <I2C_MasterTransmit_TXE+0x130>
 8006bac:	bf00      	nop
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b21      	cmp	r3, #33	; 0x21
 8006bcc:	d164      	bne.n	8006c98 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d012      	beq.n	8006bfe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	781a      	ldrb	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006bfc:	e04c      	b.n	8006c98 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d01d      	beq.n	8006c40 <I2C_MasterTransmit_BTF+0x8c>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	d01a      	beq.n	8006c40 <I2C_MasterTransmit_BTF+0x8c>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c10:	d016      	beq.n	8006c40 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c20:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2211      	movs	r2, #17
 8006c26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7ff feb7 	bl	80069ac <HAL_I2C_MasterTxCpltCallback>
}
 8006c3e:	e02b      	b.n	8006c98 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c4e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c5e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	d107      	bne.n	8006c8a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff fed2 	bl	8006a2c <HAL_I2C_MemTxCpltCallback>
}
 8006c88:	e006      	b.n	8006c98 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7ff fe8a 	bl	80069ac <HAL_I2C_MasterTxCpltCallback>
}
 8006c98:	bf00      	nop
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d11d      	bne.n	8006cf4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d10b      	bne.n	8006cd8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd0:	1c9a      	adds	r2, r3, #2
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006cd6:	e073      	b.n	8006dc0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	121b      	asrs	r3, r3, #8
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006cf2:	e065      	b.n	8006dc0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d10b      	bne.n	8006d14 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006d12:	e055      	b.n	8006dc0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d151      	bne.n	8006dc0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	2b22      	cmp	r3, #34	; 0x22
 8006d20:	d10d      	bne.n	8006d3e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d30:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006d3c:	e040      	b.n	8006dc0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d015      	beq.n	8006d74 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	2b21      	cmp	r3, #33	; 0x21
 8006d4c:	d112      	bne.n	8006d74 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d52:	781a      	ldrb	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006d72:	e025      	b.n	8006dc0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d120      	bne.n	8006dc0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	2b21      	cmp	r3, #33	; 0x21
 8006d82:	d11d      	bne.n	8006dc0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d92:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006da2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7ff fe36 	bl	8006a2c <HAL_I2C_MemTxCpltCallback>
}
 8006dc0:	bf00      	nop
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b22      	cmp	r3, #34	; 0x22
 8006dda:	f040 80ac 	bne.w	8006f36 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d921      	bls.n	8006e30 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691a      	ldr	r2, [r3, #16]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	1c5a      	adds	r2, r3, #1
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	f040 808c 	bne.w	8006f36 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e2c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006e2e:	e082      	b.n	8006f36 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d075      	beq.n	8006f24 <I2C_MasterReceive_RXNE+0x15c>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d002      	beq.n	8006e44 <I2C_MasterReceive_RXNE+0x7c>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d16f      	bne.n	8006f24 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 fae3 	bl	8008410 <I2C_WaitOnSTOPRequestThroughIT>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d142      	bne.n	8006ed6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e5e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e6e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	691a      	ldr	r2, [r3, #16]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b40      	cmp	r3, #64	; 0x40
 8006ea8:	d10a      	bne.n	8006ec0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff fdc1 	bl	8006a40 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006ebe:	e03a      	b.n	8006f36 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2212      	movs	r2, #18
 8006ecc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7ff fd76 	bl	80069c0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006ed4:	e02f      	b.n	8006f36 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ee4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	691a      	ldr	r2, [r3, #16]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff fd99 	bl	8006a54 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f22:	e008      	b.n	8006f36 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f32:	605a      	str	r2, [r3, #4]
}
 8006f34:	e7ff      	b.n	8006f36 <I2C_MasterReceive_RXNE+0x16e>
 8006f36:	bf00      	nop
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	d11b      	bne.n	8006f8e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f64:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	691a      	ldr	r2, [r3, #16]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f70:	b2d2      	uxtb	r2, r2
 8006f72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3b01      	subs	r3, #1
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006f8c:	e0bd      	b.n	800710a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	d129      	bne.n	8006fec <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fa6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d00a      	beq.n	8006fc4 <I2C_MasterReceive_BTF+0x86>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d007      	beq.n	8006fc4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fc2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006fea:	e08e      	b.n	800710a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d176      	bne.n	80070e4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d002      	beq.n	8007002 <I2C_MasterReceive_BTF+0xc4>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b10      	cmp	r3, #16
 8007000:	d108      	bne.n	8007014 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	e019      	b.n	8007048 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b04      	cmp	r3, #4
 8007018:	d002      	beq.n	8007020 <I2C_MasterReceive_BTF+0xe2>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b02      	cmp	r3, #2
 800701e:	d108      	bne.n	8007032 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800702e:	601a      	str	r2, [r3, #0]
 8007030:	e00a      	b.n	8007048 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2b10      	cmp	r3, #16
 8007036:	d007      	beq.n	8007048 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007046:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691a      	ldr	r2, [r3, #16]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007052:	b2d2      	uxtb	r2, r2
 8007054:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007064:	b29b      	uxth	r3, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	b29a      	uxth	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	691a      	ldr	r2, [r3, #16]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80070a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b40      	cmp	r3, #64	; 0x40
 80070b6:	d10a      	bne.n	80070ce <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff fcba 	bl	8006a40 <HAL_I2C_MemRxCpltCallback>
}
 80070cc:	e01d      	b.n	800710a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2212      	movs	r2, #18
 80070da:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff fc6f 	bl	80069c0 <HAL_I2C_MasterRxCpltCallback>
}
 80070e2:	e012      	b.n	800710a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691a      	ldr	r2, [r3, #16]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007100:	b29b      	uxth	r3, r3
 8007102:	3b01      	subs	r3, #1
 8007104:	b29a      	uxth	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800710a:	bf00      	nop
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b40      	cmp	r3, #64	; 0x40
 8007124:	d117      	bne.n	8007156 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712a:	2b00      	cmp	r3, #0
 800712c:	d109      	bne.n	8007142 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007132:	b2db      	uxtb	r3, r3
 8007134:	461a      	mov	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800713e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007140:	e067      	b.n	8007212 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007146:	b2db      	uxtb	r3, r3
 8007148:	f043 0301 	orr.w	r3, r3, #1
 800714c:	b2da      	uxtb	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	611a      	str	r2, [r3, #16]
}
 8007154:	e05d      	b.n	8007212 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800715e:	d133      	bne.n	80071c8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b21      	cmp	r3, #33	; 0x21
 800716a:	d109      	bne.n	8007180 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007170:	b2db      	uxtb	r3, r3
 8007172:	461a      	mov	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800717c:	611a      	str	r2, [r3, #16]
 800717e:	e008      	b.n	8007192 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007184:	b2db      	uxtb	r3, r3
 8007186:	f043 0301 	orr.w	r3, r3, #1
 800718a:	b2da      	uxtb	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007196:	2b00      	cmp	r3, #0
 8007198:	d004      	beq.n	80071a4 <I2C_Master_SB+0x92>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d108      	bne.n	80071b6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d032      	beq.n	8007212 <I2C_Master_SB+0x100>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d02d      	beq.n	8007212 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071c4:	605a      	str	r2, [r3, #4]
}
 80071c6:	e024      	b.n	8007212 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10e      	bne.n	80071ee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	11db      	asrs	r3, r3, #7
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	f003 0306 	and.w	r3, r3, #6
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	f063 030f 	orn	r3, r3, #15
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	611a      	str	r2, [r3, #16]
}
 80071ec:	e011      	b.n	8007212 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d10d      	bne.n	8007212 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	11db      	asrs	r3, r3, #7
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f003 0306 	and.w	r3, r3, #6
 8007204:	b2db      	uxtb	r3, r3
 8007206:	f063 030e 	orn	r3, r3, #14
 800720a:	b2da      	uxtb	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	611a      	str	r2, [r3, #16]
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722a:	b2da      	uxtb	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007236:	2b00      	cmp	r3, #0
 8007238:	d004      	beq.n	8007244 <I2C_Master_ADD10+0x26>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d108      	bne.n	8007256 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00c      	beq.n	8007266 <I2C_Master_ADD10+0x48>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d007      	beq.n	8007266 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007264:	605a      	str	r2, [r3, #4]
  }
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007272:	b480      	push	{r7}
 8007274:	b091      	sub	sp, #68	; 0x44
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007280:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b22      	cmp	r3, #34	; 0x22
 800729a:	f040 8169 	bne.w	8007570 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10f      	bne.n	80072c6 <I2C_Master_ADDR+0x54>
 80072a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80072aa:	2b40      	cmp	r3, #64	; 0x40
 80072ac:	d10b      	bne.n	80072c6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ae:	2300      	movs	r3, #0
 80072b0:	633b      	str	r3, [r7, #48]	; 0x30
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	633b      	str	r3, [r7, #48]	; 0x30
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	633b      	str	r3, [r7, #48]	; 0x30
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	e160      	b.n	8007588 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d11d      	bne.n	800730a <I2C_Master_ADDR+0x98>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80072d6:	d118      	bne.n	800730a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072d8:	2300      	movs	r3, #0
 80072da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072fc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	651a      	str	r2, [r3, #80]	; 0x50
 8007308:	e13e      	b.n	8007588 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d113      	bne.n	800733c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007314:	2300      	movs	r3, #0
 8007316:	62bb      	str	r3, [r7, #40]	; 0x28
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	62bb      	str	r3, [r7, #40]	; 0x28
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	e115      	b.n	8007568 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007340:	b29b      	uxth	r3, r3
 8007342:	2b01      	cmp	r3, #1
 8007344:	f040 808a 	bne.w	800745c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800734e:	d137      	bne.n	80073c0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800735e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800736a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800736e:	d113      	bne.n	8007398 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007380:	2300      	movs	r3, #0
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	627b      	str	r3, [r7, #36]	; 0x24
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	e0e7      	b.n	8007568 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007398:	2300      	movs	r3, #0
 800739a:	623b      	str	r3, [r7, #32]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	623b      	str	r3, [r7, #32]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	623b      	str	r3, [r7, #32]
 80073ac:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	e0d3      	b.n	8007568 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	2b08      	cmp	r3, #8
 80073c4:	d02e      	beq.n	8007424 <I2C_Master_ADDR+0x1b2>
 80073c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	d02b      	beq.n	8007424 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80073cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ce:	2b12      	cmp	r3, #18
 80073d0:	d102      	bne.n	80073d8 <I2C_Master_ADDR+0x166>
 80073d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d125      	bne.n	8007424 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d00e      	beq.n	80073fc <I2C_Master_ADDR+0x18a>
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d00b      	beq.n	80073fc <I2C_Master_ADDR+0x18a>
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	2b10      	cmp	r3, #16
 80073e8:	d008      	beq.n	80073fc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	e007      	b.n	800740c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800740a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800740c:	2300      	movs	r3, #0
 800740e:	61fb      	str	r3, [r7, #28]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	61fb      	str	r3, [r7, #28]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	61fb      	str	r3, [r7, #28]
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	e0a1      	b.n	8007568 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007432:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007434:	2300      	movs	r3, #0
 8007436:	61bb      	str	r3, [r7, #24]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	61bb      	str	r3, [r7, #24]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	61bb      	str	r3, [r7, #24]
 8007448:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	e085      	b.n	8007568 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b02      	cmp	r3, #2
 8007464:	d14d      	bne.n	8007502 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007468:	2b04      	cmp	r3, #4
 800746a:	d016      	beq.n	800749a <I2C_Master_ADDR+0x228>
 800746c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746e:	2b02      	cmp	r3, #2
 8007470:	d013      	beq.n	800749a <I2C_Master_ADDR+0x228>
 8007472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007474:	2b10      	cmp	r3, #16
 8007476:	d010      	beq.n	800749a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007486:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	e007      	b.n	80074aa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074a8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074b8:	d117      	bne.n	80074ea <I2C_Master_ADDR+0x278>
 80074ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074c0:	d00b      	beq.n	80074da <I2C_Master_ADDR+0x268>
 80074c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d008      	beq.n	80074da <I2C_Master_ADDR+0x268>
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	2b08      	cmp	r3, #8
 80074cc:	d005      	beq.n	80074da <I2C_Master_ADDR+0x268>
 80074ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d0:	2b10      	cmp	r3, #16
 80074d2:	d002      	beq.n	80074da <I2C_Master_ADDR+0x268>
 80074d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d107      	bne.n	80074ea <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ea:	2300      	movs	r3, #0
 80074ec:	617b      	str	r3, [r7, #20]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	617b      	str	r3, [r7, #20]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	e032      	b.n	8007568 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007510:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800751c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007520:	d117      	bne.n	8007552 <I2C_Master_ADDR+0x2e0>
 8007522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007524:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007528:	d00b      	beq.n	8007542 <I2C_Master_ADDR+0x2d0>
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	2b01      	cmp	r3, #1
 800752e:	d008      	beq.n	8007542 <I2C_Master_ADDR+0x2d0>
 8007530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007532:	2b08      	cmp	r3, #8
 8007534:	d005      	beq.n	8007542 <I2C_Master_ADDR+0x2d0>
 8007536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007538:	2b10      	cmp	r3, #16
 800753a:	d002      	beq.n	8007542 <I2C_Master_ADDR+0x2d0>
 800753c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753e:	2b20      	cmp	r3, #32
 8007540:	d107      	bne.n	8007552 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007550:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007552:	2300      	movs	r3, #0
 8007554:	613b      	str	r3, [r7, #16]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	695b      	ldr	r3, [r3, #20]
 800755c:	613b      	str	r3, [r7, #16]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	613b      	str	r3, [r7, #16]
 8007566:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800756e:	e00b      	b.n	8007588 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007570:	2300      	movs	r3, #0
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	68fb      	ldr	r3, [r7, #12]
}
 8007586:	e7ff      	b.n	8007588 <I2C_Master_ADDR+0x316>
 8007588:	bf00      	nop
 800758a:	3744      	adds	r7, #68	; 0x44
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d02b      	beq.n	8007606 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	781a      	ldrb	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d114      	bne.n	8007606 <I2C_SlaveTransmit_TXE+0x72>
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	2b29      	cmp	r3, #41	; 0x29
 80075e0:	d111      	bne.n	8007606 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2221      	movs	r2, #33	; 0x21
 80075f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2228      	movs	r2, #40	; 0x28
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7ff f9e7 	bl	80069d4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007606:	bf00      	nop
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761a:	b29b      	uxth	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d011      	beq.n	8007644 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	781a      	ldrb	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	1c5a      	adds	r2, r3, #1
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763a:	b29b      	uxth	r3, r3
 800763c:	3b01      	subs	r3, #1
 800763e:	b29a      	uxth	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800765e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007664:	b29b      	uxth	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d02c      	beq.n	80076c4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	691a      	ldr	r2, [r3, #16]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	b2d2      	uxtb	r2, r2
 8007676:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007686:	b29b      	uxth	r3, r3
 8007688:	3b01      	subs	r3, #1
 800768a:	b29a      	uxth	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007694:	b29b      	uxth	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d114      	bne.n	80076c4 <I2C_SlaveReceive_RXNE+0x74>
 800769a:	7bfb      	ldrb	r3, [r7, #15]
 800769c:	2b2a      	cmp	r3, #42	; 0x2a
 800769e:	d111      	bne.n	80076c4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2222      	movs	r2, #34	; 0x22
 80076b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2228      	movs	r2, #40	; 0x28
 80076ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff f992 	bl	80069e8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80076c4:	bf00      	nop
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d012      	beq.n	8007704 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	691a      	ldr	r2, [r3, #16]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	b2d2      	uxtb	r2, r2
 80076ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	3b01      	subs	r3, #1
 80076fe:	b29a      	uxth	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007724:	b2db      	uxtb	r3, r3
 8007726:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800772a:	2b28      	cmp	r3, #40	; 0x28
 800772c:	d127      	bne.n	800777e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800773c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	089b      	lsrs	r3, r3, #2
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800774a:	2301      	movs	r3, #1
 800774c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	09db      	lsrs	r3, r3, #7
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b00      	cmp	r3, #0
 8007758:	d103      	bne.n	8007762 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	81bb      	strh	r3, [r7, #12]
 8007760:	e002      	b.n	8007768 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007770:	89ba      	ldrh	r2, [r7, #12]
 8007772:	7bfb      	ldrb	r3, [r7, #15]
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7ff f940 	bl	80069fc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800777c:	e00e      	b.n	800779c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800777e:	2300      	movs	r3, #0
 8007780:	60bb      	str	r3, [r7, #8]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	60bb      	str	r3, [r7, #8]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	60bb      	str	r3, [r7, #8]
 8007792:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800779c:	bf00      	nop
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80077c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80077c4:	2300      	movs	r3, #0
 80077c6:	60bb      	str	r3, [r7, #8]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	60bb      	str	r3, [r7, #8]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0201 	orr.w	r2, r2, #1
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007800:	d172      	bne.n	80078e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	2b22      	cmp	r3, #34	; 0x22
 8007806:	d002      	beq.n	800780e <I2C_Slave_STOPF+0x6a>
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	2b2a      	cmp	r3, #42	; 0x2a
 800780c:	d135      	bne.n	800787a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	b29a      	uxth	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007820:	b29b      	uxth	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d005      	beq.n	8007832 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	f043 0204 	orr.w	r2, r3, #4
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007840:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007846:	4618      	mov	r0, r3
 8007848:	f7fd ff6a 	bl	8005720 <HAL_DMA_GetState>
 800784c:	4603      	mov	r3, r0
 800784e:	2b01      	cmp	r3, #1
 8007850:	d049      	beq.n	80078e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007856:	4a69      	ldr	r2, [pc, #420]	; (80079fc <I2C_Slave_STOPF+0x258>)
 8007858:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	4618      	mov	r0, r3
 8007860:	f7fd fdb2 	bl	80053c8 <HAL_DMA_Abort_IT>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d03d      	beq.n	80078e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007874:	4610      	mov	r0, r2
 8007876:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007878:	e035      	b.n	80078e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	b29a      	uxth	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788c:	b29b      	uxth	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d005      	beq.n	800789e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	f043 0204 	orr.w	r2, r3, #4
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fd ff34 	bl	8005720 <HAL_DMA_GetState>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d014      	beq.n	80078e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c2:	4a4e      	ldr	r2, [pc, #312]	; (80079fc <I2C_Slave_STOPF+0x258>)
 80078c4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fd fd7c 	bl	80053c8 <HAL_DMA_Abort_IT>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d008      	beq.n	80078e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80078e0:	4610      	mov	r0, r2
 80078e2:	4798      	blx	r3
 80078e4:	e000      	b.n	80078e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d03e      	beq.n	8007970 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	f003 0304 	and.w	r3, r3, #4
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	d112      	bne.n	8007926 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	691a      	ldr	r2, [r3, #16]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800791c:	b29b      	uxth	r3, r3
 800791e:	3b01      	subs	r3, #1
 8007920:	b29a      	uxth	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007930:	2b40      	cmp	r3, #64	; 0x40
 8007932:	d112      	bne.n	800795a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691a      	ldr	r2, [r3, #16]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	b2d2      	uxtb	r2, r2
 8007940:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007950:	b29b      	uxth	r3, r3
 8007952:	3b01      	subs	r3, #1
 8007954:	b29a      	uxth	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d005      	beq.n	8007970 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007968:	f043 0204 	orr.w	r2, r3, #4
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f8b3 	bl	8007ae4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800797e:	e039      	b.n	80079f4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	2b2a      	cmp	r3, #42	; 0x2a
 8007984:	d109      	bne.n	800799a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2228      	movs	r2, #40	; 0x28
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7ff f827 	bl	80069e8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b28      	cmp	r3, #40	; 0x28
 80079a4:	d111      	bne.n	80079ca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a15      	ldr	r2, [pc, #84]	; (8007a00 <I2C_Slave_STOPF+0x25c>)
 80079aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff f828 	bl	8006a18 <HAL_I2C_ListenCpltCallback>
}
 80079c8:	e014      	b.n	80079f4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ce:	2b22      	cmp	r3, #34	; 0x22
 80079d0:	d002      	beq.n	80079d8 <I2C_Slave_STOPF+0x234>
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	2b22      	cmp	r3, #34	; 0x22
 80079d6:	d10d      	bne.n	80079f4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7fe fffa 	bl	80069e8 <HAL_I2C_SlaveRxCpltCallback>
}
 80079f4:	bf00      	nop
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	08008011 	.word	0x08008011
 8007a00:	ffff0000 	.word	0xffff0000

08007a04 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a12:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2b08      	cmp	r3, #8
 8007a1e:	d002      	beq.n	8007a26 <I2C_Slave_AF+0x22>
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2b20      	cmp	r3, #32
 8007a24:	d129      	bne.n	8007a7a <I2C_Slave_AF+0x76>
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
 8007a28:	2b28      	cmp	r3, #40	; 0x28
 8007a2a:	d126      	bne.n	8007a7a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a2c      	ldr	r2, [pc, #176]	; (8007ae0 <I2C_Slave_AF+0xdc>)
 8007a30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a40:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a4a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a5a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7fe ffd0 	bl	8006a18 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007a78:	e02e      	b.n	8007ad8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	2b21      	cmp	r3, #33	; 0x21
 8007a7e:	d126      	bne.n	8007ace <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a17      	ldr	r2, [pc, #92]	; (8007ae0 <I2C_Slave_AF+0xdc>)
 8007a84:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2221      	movs	r2, #33	; 0x21
 8007a8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007aaa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ab4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ac4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7fe ff84 	bl	80069d4 <HAL_I2C_SlaveTxCpltCallback>
}
 8007acc:	e004      	b.n	8007ad8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ad6:	615a      	str	r2, [r3, #20]
}
 8007ad8:	bf00      	nop
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	ffff0000 	.word	0xffff0000

08007ae4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007afa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	2b10      	cmp	r3, #16
 8007b00:	d002      	beq.n	8007b08 <I2C_ITError+0x24>
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	2b40      	cmp	r3, #64	; 0x40
 8007b06:	d10a      	bne.n	8007b1e <I2C_ITError+0x3a>
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	2b22      	cmp	r3, #34	; 0x22
 8007b0c:	d107      	bne.n	8007b1e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b1c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
 8007b20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b24:	2b28      	cmp	r3, #40	; 0x28
 8007b26:	d107      	bne.n	8007b38 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2228      	movs	r2, #40	; 0x28
 8007b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b36:	e015      	b.n	8007b64 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b46:	d00a      	beq.n	8007b5e <I2C_ITError+0x7a>
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
 8007b4a:	2b60      	cmp	r3, #96	; 0x60
 8007b4c:	d007      	beq.n	8007b5e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b72:	d162      	bne.n	8007c3a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b82:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d020      	beq.n	8007bd4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b96:	4a6a      	ldr	r2, [pc, #424]	; (8007d40 <I2C_ITError+0x25c>)
 8007b98:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fd fc12 	bl	80053c8 <HAL_DMA_Abort_IT>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 8089 	beq.w	8007cbe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f022 0201 	bic.w	r2, r2, #1
 8007bba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007bce:	4610      	mov	r0, r2
 8007bd0:	4798      	blx	r3
 8007bd2:	e074      	b.n	8007cbe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd8:	4a59      	ldr	r2, [pc, #356]	; (8007d40 <I2C_ITError+0x25c>)
 8007bda:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fd fbf1 	bl	80053c8 <HAL_DMA_Abort_IT>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d068      	beq.n	8007cbe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf6:	2b40      	cmp	r3, #64	; 0x40
 8007bf8:	d10b      	bne.n	8007c12 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	691a      	ldr	r2, [r3, #16]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	b2d2      	uxtb	r2, r2
 8007c06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 0201 	bic.w	r2, r2, #1
 8007c20:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c34:	4610      	mov	r0, r2
 8007c36:	4798      	blx	r3
 8007c38:	e041      	b.n	8007cbe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b60      	cmp	r3, #96	; 0x60
 8007c44:	d125      	bne.n	8007c92 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5e:	2b40      	cmp	r3, #64	; 0x40
 8007c60:	d10b      	bne.n	8007c7a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	691a      	ldr	r2, [r3, #16]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	b2d2      	uxtb	r2, r2
 8007c6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 0201 	bic.w	r2, r2, #1
 8007c88:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7fe feec 	bl	8006a68 <HAL_I2C_AbortCpltCallback>
 8007c90:	e015      	b.n	8007cbe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9c:	2b40      	cmp	r3, #64	; 0x40
 8007c9e:	d10b      	bne.n	8007cb8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	691a      	ldr	r2, [r3, #16]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007caa:	b2d2      	uxtb	r2, r2
 8007cac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7fe fecb 	bl	8006a54 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10e      	bne.n	8007cec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d109      	bne.n	8007cec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d104      	bne.n	8007cec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d007      	beq.n	8007cfc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007cfa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d02:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	d113      	bne.n	8007d38 <I2C_ITError+0x254>
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
 8007d12:	2b28      	cmp	r3, #40	; 0x28
 8007d14:	d110      	bne.n	8007d38 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a0a      	ldr	r2, [pc, #40]	; (8007d44 <I2C_ITError+0x260>)
 8007d1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7fe fe70 	bl	8006a18 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d38:	bf00      	nop
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	08008011 	.word	0x08008011
 8007d44:	ffff0000 	.word	0xffff0000

08007d48 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b088      	sub	sp, #32
 8007d4c:	af02      	add	r7, sp, #8
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	607a      	str	r2, [r7, #4]
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	460b      	mov	r3, r1
 8007d56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d6c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	2b08      	cmp	r3, #8
 8007d72:	d006      	beq.n	8007d82 <I2C_MasterRequestRead+0x3a>
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d003      	beq.n	8007d82 <I2C_MasterRequestRead+0x3a>
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d80:	d108      	bne.n	8007d94 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d90:	601a      	str	r2, [r3, #0]
 8007d92:	e00b      	b.n	8007dac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d98:	2b11      	cmp	r3, #17
 8007d9a:	d107      	bne.n	8007dac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007daa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 f9d1 	bl	8008160 <I2C_WaitOnFlagUntilTimeout>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00d      	beq.n	8007de0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dd2:	d103      	bne.n	8007ddc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e079      	b.n	8007ed4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007de8:	d108      	bne.n	8007dfc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007dea:	897b      	ldrh	r3, [r7, #10]
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	f043 0301 	orr.w	r3, r3, #1
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	611a      	str	r2, [r3, #16]
 8007dfa:	e05f      	b.n	8007ebc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007dfc:	897b      	ldrh	r3, [r7, #10]
 8007dfe:	11db      	asrs	r3, r3, #7
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	f003 0306 	and.w	r3, r3, #6
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f063 030f 	orn	r3, r3, #15
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	4930      	ldr	r1, [pc, #192]	; (8007edc <I2C_MasterRequestRead+0x194>)
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f000 f9f7 	bl	800820e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e054      	b.n	8007ed4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007e2a:	897b      	ldrh	r3, [r7, #10]
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	4929      	ldr	r1, [pc, #164]	; (8007ee0 <I2C_MasterRequestRead+0x198>)
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 f9e7 	bl	800820e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e044      	b.n	8007ed4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	613b      	str	r3, [r7, #16]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	695b      	ldr	r3, [r3, #20]
 8007e54:	613b      	str	r3, [r7, #16]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	613b      	str	r3, [r7, #16]
 8007e5e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e6e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f000 f96f 	bl	8008160 <I2C_WaitOnFlagUntilTimeout>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00d      	beq.n	8007ea4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e96:	d103      	bne.n	8007ea0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e9e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e017      	b.n	8007ed4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007ea4:	897b      	ldrh	r3, [r7, #10]
 8007ea6:	11db      	asrs	r3, r3, #7
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	f003 0306 	and.w	r3, r3, #6
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	f063 030e 	orn	r3, r3, #14
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	4907      	ldr	r1, [pc, #28]	; (8007ee0 <I2C_MasterRequestRead+0x198>)
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 f9a3 	bl	800820e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	00010008 	.word	0x00010008
 8007ee0:	00010002 	.word	0x00010002

08007ee4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b088      	sub	sp, #32
 8007ee8:	af02      	add	r7, sp, #8
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	4608      	mov	r0, r1
 8007eee:	4611      	mov	r1, r2
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	817b      	strh	r3, [r7, #10]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	813b      	strh	r3, [r7, #8]
 8007efa:	4613      	mov	r3, r2
 8007efc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 f920 	bl	8008160 <I2C_WaitOnFlagUntilTimeout>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00d      	beq.n	8007f42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f34:	d103      	bne.n	8007f3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e05f      	b.n	8008002 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f42:	897b      	ldrh	r3, [r7, #10]
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	461a      	mov	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	6a3a      	ldr	r2, [r7, #32]
 8007f56:	492d      	ldr	r1, [pc, #180]	; (800800c <I2C_RequestMemoryWrite+0x128>)
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f000 f958 	bl	800820e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d001      	beq.n	8007f68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e04c      	b.n	8008002 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f68:	2300      	movs	r3, #0
 8007f6a:	617b      	str	r3, [r7, #20]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	617b      	str	r3, [r7, #20]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	617b      	str	r3, [r7, #20]
 8007f7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f80:	6a39      	ldr	r1, [r7, #32]
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 f9c2 	bl	800830c <I2C_WaitOnTXEFlagUntilTimeout>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00d      	beq.n	8007faa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	d107      	bne.n	8007fa6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e02b      	b.n	8008002 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007faa:	88fb      	ldrh	r3, [r7, #6]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d105      	bne.n	8007fbc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fb0:	893b      	ldrh	r3, [r7, #8]
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	611a      	str	r2, [r3, #16]
 8007fba:	e021      	b.n	8008000 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007fbc:	893b      	ldrh	r3, [r7, #8]
 8007fbe:	0a1b      	lsrs	r3, r3, #8
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fcc:	6a39      	ldr	r1, [r7, #32]
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 f99c 	bl	800830c <I2C_WaitOnTXEFlagUntilTimeout>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00d      	beq.n	8007ff6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	d107      	bne.n	8007ff2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ff0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e005      	b.n	8008002 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ff6:	893b      	ldrh	r3, [r7, #8]
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	00010002 	.word	0x00010002

08008010 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008020:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008028:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800802a:	4b4b      	ldr	r3, [pc, #300]	; (8008158 <I2C_DMAAbort+0x148>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	08db      	lsrs	r3, r3, #3
 8008030:	4a4a      	ldr	r2, [pc, #296]	; (800815c <I2C_DMAAbort+0x14c>)
 8008032:	fba2 2303 	umull	r2, r3, r2, r3
 8008036:	0a1a      	lsrs	r2, r3, #8
 8008038:	4613      	mov	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	00da      	lsls	r2, r3, #3
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d106      	bne.n	8008058 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	f043 0220 	orr.w	r2, r3, #32
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008056:	e00a      	b.n	800806e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3b01      	subs	r3, #1
 800805c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800806c:	d0ea      	beq.n	8008044 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800807a:	2200      	movs	r2, #0
 800807c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808a:	2200      	movs	r2, #0
 800808c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800809c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2200      	movs	r2, #0
 80080a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b0:	2200      	movs	r2, #0
 80080b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d003      	beq.n	80080c4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c0:	2200      	movs	r2, #0
 80080c2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 0201 	bic.w	r2, r2, #1
 80080d2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b60      	cmp	r3, #96	; 0x60
 80080de:	d10e      	bne.n	80080fe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2220      	movs	r2, #32
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	2200      	movs	r2, #0
 80080f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80080f6:	6978      	ldr	r0, [r7, #20]
 80080f8:	f7fe fcb6 	bl	8006a68 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80080fc:	e027      	b.n	800814e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80080fe:	7cfb      	ldrb	r3, [r7, #19]
 8008100:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008104:	2b28      	cmp	r3, #40	; 0x28
 8008106:	d117      	bne.n	8008138 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f042 0201 	orr.w	r2, r2, #1
 8008116:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008126:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2200      	movs	r2, #0
 800812c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	2228      	movs	r2, #40	; 0x28
 8008132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008136:	e007      	b.n	8008148 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	2220      	movs	r2, #32
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008148:	6978      	ldr	r0, [r7, #20]
 800814a:	f7fe fc83 	bl	8006a54 <HAL_I2C_ErrorCallback>
}
 800814e:	bf00      	nop
 8008150:	3718      	adds	r7, #24
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	20000288 	.word	0x20000288
 800815c:	14f8b589 	.word	0x14f8b589

08008160 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	603b      	str	r3, [r7, #0]
 800816c:	4613      	mov	r3, r2
 800816e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008170:	e025      	b.n	80081be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008178:	d021      	beq.n	80081be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800817a:	f7fc fa6b 	bl	8004654 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	429a      	cmp	r2, r3
 8008188:	d302      	bcc.n	8008190 <I2C_WaitOnFlagUntilTimeout+0x30>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d116      	bne.n	80081be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2220      	movs	r2, #32
 800819a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081aa:	f043 0220 	orr.w	r2, r3, #32
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e023      	b.n	8008206 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	0c1b      	lsrs	r3, r3, #16
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d10d      	bne.n	80081e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	43da      	mvns	r2, r3
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	4013      	ands	r3, r2
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bf0c      	ite	eq
 80081da:	2301      	moveq	r3, #1
 80081dc:	2300      	movne	r3, #0
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	461a      	mov	r2, r3
 80081e2:	e00c      	b.n	80081fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	43da      	mvns	r2, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4013      	ands	r3, r2
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	bf0c      	ite	eq
 80081f6:	2301      	moveq	r3, #1
 80081f8:	2300      	movne	r3, #0
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	461a      	mov	r2, r3
 80081fe:	79fb      	ldrb	r3, [r7, #7]
 8008200:	429a      	cmp	r2, r3
 8008202:	d0b6      	beq.n	8008172 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	60f8      	str	r0, [r7, #12]
 8008216:	60b9      	str	r1, [r7, #8]
 8008218:	607a      	str	r2, [r7, #4]
 800821a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800821c:	e051      	b.n	80082c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800822c:	d123      	bne.n	8008276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800823c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008246:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2220      	movs	r2, #32
 8008252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008262:	f043 0204 	orr.w	r2, r3, #4
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e046      	b.n	8008304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827c:	d021      	beq.n	80082c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800827e:	f7fc f9e9 	bl	8004654 <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	429a      	cmp	r2, r3
 800828c:	d302      	bcc.n	8008294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d116      	bne.n	80082c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2220      	movs	r2, #32
 800829e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ae:	f043 0220 	orr.w	r2, r3, #32
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e020      	b.n	8008304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	0c1b      	lsrs	r3, r3, #16
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d10c      	bne.n	80082e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	43da      	mvns	r2, r3
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	4013      	ands	r3, r2
 80082d8:	b29b      	uxth	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	bf14      	ite	ne
 80082de:	2301      	movne	r3, #1
 80082e0:	2300      	moveq	r3, #0
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	e00b      	b.n	80082fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	43da      	mvns	r2, r3
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	4013      	ands	r3, r2
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	bf14      	ite	ne
 80082f8:	2301      	movne	r3, #1
 80082fa:	2300      	moveq	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d18d      	bne.n	800821e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008318:	e02d      	b.n	8008376 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 f900 	bl	8008520 <I2C_IsAcknowledgeFailed>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e02d      	b.n	8008386 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008330:	d021      	beq.n	8008376 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008332:	f7fc f98f 	bl	8004654 <HAL_GetTick>
 8008336:	4602      	mov	r2, r0
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	429a      	cmp	r2, r3
 8008340:	d302      	bcc.n	8008348 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d116      	bne.n	8008376 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2220      	movs	r2, #32
 8008352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008362:	f043 0220 	orr.w	r2, r3, #32
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e007      	b.n	8008386 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008380:	2b80      	cmp	r3, #128	; 0x80
 8008382:	d1ca      	bne.n	800831a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b084      	sub	sp, #16
 8008392:	af00      	add	r7, sp, #0
 8008394:	60f8      	str	r0, [r7, #12]
 8008396:	60b9      	str	r1, [r7, #8]
 8008398:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800839a:	e02d      	b.n	80083f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 f8bf 	bl	8008520 <I2C_IsAcknowledgeFailed>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e02d      	b.n	8008408 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b2:	d021      	beq.n	80083f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083b4:	f7fc f94e 	bl	8004654 <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d302      	bcc.n	80083ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d116      	bne.n	80083f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2220      	movs	r2, #32
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e4:	f043 0220 	orr.w	r2, r3, #32
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e007      	b.n	8008408 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	f003 0304 	and.w	r3, r3, #4
 8008402:	2b04      	cmp	r3, #4
 8008404:	d1ca      	bne.n	800839c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800841c:	4b13      	ldr	r3, [pc, #76]	; (800846c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	08db      	lsrs	r3, r3, #3
 8008422:	4a13      	ldr	r2, [pc, #76]	; (8008470 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008424:	fba2 2303 	umull	r2, r3, r2, r3
 8008428:	0a1a      	lsrs	r2, r3, #8
 800842a:	4613      	mov	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4413      	add	r3, r2
 8008430:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3b01      	subs	r3, #1
 8008436:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d107      	bne.n	800844e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008442:	f043 0220 	orr.w	r2, r3, #32
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e008      	b.n	8008460 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800845c:	d0e9      	beq.n	8008432 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	20000288 	.word	0x20000288
 8008470:	14f8b589 	.word	0x14f8b589

08008474 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008480:	e042      	b.n	8008508 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	f003 0310 	and.w	r3, r3, #16
 800848c:	2b10      	cmp	r3, #16
 800848e:	d119      	bne.n	80084c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f06f 0210 	mvn.w	r2, #16
 8008498:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2220      	movs	r2, #32
 80084a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e029      	b.n	8008518 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084c4:	f7fc f8c6 	bl	8004654 <HAL_GetTick>
 80084c8:	4602      	mov	r2, r0
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d302      	bcc.n	80084da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d116      	bne.n	8008508 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2220      	movs	r2, #32
 80084e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f4:	f043 0220 	orr.w	r2, r3, #32
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e007      	b.n	8008518 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008512:	2b40      	cmp	r3, #64	; 0x40
 8008514:	d1b5      	bne.n	8008482 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008536:	d11b      	bne.n	8008570 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008540:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2220      	movs	r2, #32
 800854c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855c:	f043 0204 	orr.w	r2, r3, #4
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e000      	b.n	8008572 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800857e:	b480      	push	{r7}
 8008580:	b083      	sub	sp, #12
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800858e:	d103      	bne.n	8008598 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008596:	e007      	b.n	80085a8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80085a0:	d102      	bne.n	80085a8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2208      	movs	r2, #8
 80085a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e267      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d075      	beq.n	80086be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80085d2:	4b88      	ldr	r3, [pc, #544]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	f003 030c 	and.w	r3, r3, #12
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d00c      	beq.n	80085f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085de:	4b85      	ldr	r3, [pc, #532]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80085e6:	2b08      	cmp	r3, #8
 80085e8:	d112      	bne.n	8008610 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80085ea:	4b82      	ldr	r3, [pc, #520]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085f6:	d10b      	bne.n	8008610 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085f8:	4b7e      	ldr	r3, [pc, #504]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d05b      	beq.n	80086bc <HAL_RCC_OscConfig+0x108>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d157      	bne.n	80086bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e242      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008618:	d106      	bne.n	8008628 <HAL_RCC_OscConfig+0x74>
 800861a:	4b76      	ldr	r3, [pc, #472]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a75      	ldr	r2, [pc, #468]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	e01d      	b.n	8008664 <HAL_RCC_OscConfig+0xb0>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008630:	d10c      	bne.n	800864c <HAL_RCC_OscConfig+0x98>
 8008632:	4b70      	ldr	r3, [pc, #448]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a6f      	ldr	r2, [pc, #444]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800863c:	6013      	str	r3, [r2, #0]
 800863e:	4b6d      	ldr	r3, [pc, #436]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a6c      	ldr	r2, [pc, #432]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	e00b      	b.n	8008664 <HAL_RCC_OscConfig+0xb0>
 800864c:	4b69      	ldr	r3, [pc, #420]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a68      	ldr	r2, [pc, #416]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008656:	6013      	str	r3, [r2, #0]
 8008658:	4b66      	ldr	r3, [pc, #408]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a65      	ldr	r2, [pc, #404]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 800865e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d013      	beq.n	8008694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800866c:	f7fb fff2 	bl	8004654 <HAL_GetTick>
 8008670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008672:	e008      	b.n	8008686 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008674:	f7fb ffee 	bl	8004654 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b64      	cmp	r3, #100	; 0x64
 8008680:	d901      	bls.n	8008686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e207      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008686:	4b5b      	ldr	r3, [pc, #364]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d0f0      	beq.n	8008674 <HAL_RCC_OscConfig+0xc0>
 8008692:	e014      	b.n	80086be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008694:	f7fb ffde 	bl	8004654 <HAL_GetTick>
 8008698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800869a:	e008      	b.n	80086ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800869c:	f7fb ffda 	bl	8004654 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	2b64      	cmp	r3, #100	; 0x64
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e1f3      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086ae:	4b51      	ldr	r3, [pc, #324]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1f0      	bne.n	800869c <HAL_RCC_OscConfig+0xe8>
 80086ba:	e000      	b.n	80086be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d063      	beq.n	8008792 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086ca:	4b4a      	ldr	r3, [pc, #296]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f003 030c 	and.w	r3, r3, #12
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00b      	beq.n	80086ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086d6:	4b47      	ldr	r3, [pc, #284]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80086de:	2b08      	cmp	r3, #8
 80086e0:	d11c      	bne.n	800871c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086e2:	4b44      	ldr	r3, [pc, #272]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d116      	bne.n	800871c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086ee:	4b41      	ldr	r3, [pc, #260]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d005      	beq.n	8008706 <HAL_RCC_OscConfig+0x152>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d001      	beq.n	8008706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e1c7      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008706:	4b3b      	ldr	r3, [pc, #236]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	4937      	ldr	r1, [pc, #220]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008716:	4313      	orrs	r3, r2
 8008718:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800871a:	e03a      	b.n	8008792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d020      	beq.n	8008766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008724:	4b34      	ldr	r3, [pc, #208]	; (80087f8 <HAL_RCC_OscConfig+0x244>)
 8008726:	2201      	movs	r2, #1
 8008728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800872a:	f7fb ff93 	bl	8004654 <HAL_GetTick>
 800872e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008730:	e008      	b.n	8008744 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008732:	f7fb ff8f 	bl	8004654 <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	2b02      	cmp	r3, #2
 800873e:	d901      	bls.n	8008744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e1a8      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008744:	4b2b      	ldr	r3, [pc, #172]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0f0      	beq.n	8008732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008750:	4b28      	ldr	r3, [pc, #160]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	00db      	lsls	r3, r3, #3
 800875e:	4925      	ldr	r1, [pc, #148]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008760:	4313      	orrs	r3, r2
 8008762:	600b      	str	r3, [r1, #0]
 8008764:	e015      	b.n	8008792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008766:	4b24      	ldr	r3, [pc, #144]	; (80087f8 <HAL_RCC_OscConfig+0x244>)
 8008768:	2200      	movs	r2, #0
 800876a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876c:	f7fb ff72 	bl	8004654 <HAL_GetTick>
 8008770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008772:	e008      	b.n	8008786 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008774:	f7fb ff6e 	bl	8004654 <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	2b02      	cmp	r3, #2
 8008780:	d901      	bls.n	8008786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e187      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008786:	4b1b      	ldr	r3, [pc, #108]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1f0      	bne.n	8008774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0308 	and.w	r3, r3, #8
 800879a:	2b00      	cmp	r3, #0
 800879c:	d036      	beq.n	800880c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d016      	beq.n	80087d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087a6:	4b15      	ldr	r3, [pc, #84]	; (80087fc <HAL_RCC_OscConfig+0x248>)
 80087a8:	2201      	movs	r2, #1
 80087aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ac:	f7fb ff52 	bl	8004654 <HAL_GetTick>
 80087b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087b2:	e008      	b.n	80087c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087b4:	f7fb ff4e 	bl	8004654 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d901      	bls.n	80087c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e167      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087c6:	4b0b      	ldr	r3, [pc, #44]	; (80087f4 <HAL_RCC_OscConfig+0x240>)
 80087c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d0f0      	beq.n	80087b4 <HAL_RCC_OscConfig+0x200>
 80087d2:	e01b      	b.n	800880c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087d4:	4b09      	ldr	r3, [pc, #36]	; (80087fc <HAL_RCC_OscConfig+0x248>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087da:	f7fb ff3b 	bl	8004654 <HAL_GetTick>
 80087de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087e0:	e00e      	b.n	8008800 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087e2:	f7fb ff37 	bl	8004654 <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d907      	bls.n	8008800 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e150      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
 80087f4:	40023800 	.word	0x40023800
 80087f8:	42470000 	.word	0x42470000
 80087fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008800:	4b88      	ldr	r3, [pc, #544]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008804:	f003 0302 	and.w	r3, r3, #2
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1ea      	bne.n	80087e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0304 	and.w	r3, r3, #4
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 8097 	beq.w	8008948 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800881a:	2300      	movs	r3, #0
 800881c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800881e:	4b81      	ldr	r3, [pc, #516]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10f      	bne.n	800884a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800882a:	2300      	movs	r3, #0
 800882c:	60bb      	str	r3, [r7, #8]
 800882e:	4b7d      	ldr	r3, [pc, #500]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008832:	4a7c      	ldr	r2, [pc, #496]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008838:	6413      	str	r3, [r2, #64]	; 0x40
 800883a:	4b7a      	ldr	r3, [pc, #488]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 800883c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008842:	60bb      	str	r3, [r7, #8]
 8008844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008846:	2301      	movs	r3, #1
 8008848:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800884a:	4b77      	ldr	r3, [pc, #476]	; (8008a28 <HAL_RCC_OscConfig+0x474>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008852:	2b00      	cmp	r3, #0
 8008854:	d118      	bne.n	8008888 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008856:	4b74      	ldr	r3, [pc, #464]	; (8008a28 <HAL_RCC_OscConfig+0x474>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a73      	ldr	r2, [pc, #460]	; (8008a28 <HAL_RCC_OscConfig+0x474>)
 800885c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008862:	f7fb fef7 	bl	8004654 <HAL_GetTick>
 8008866:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008868:	e008      	b.n	800887c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800886a:	f7fb fef3 	bl	8004654 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	2b02      	cmp	r3, #2
 8008876:	d901      	bls.n	800887c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e10c      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800887c:	4b6a      	ldr	r3, [pc, #424]	; (8008a28 <HAL_RCC_OscConfig+0x474>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008884:	2b00      	cmp	r3, #0
 8008886:	d0f0      	beq.n	800886a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d106      	bne.n	800889e <HAL_RCC_OscConfig+0x2ea>
 8008890:	4b64      	ldr	r3, [pc, #400]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008894:	4a63      	ldr	r2, [pc, #396]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008896:	f043 0301 	orr.w	r3, r3, #1
 800889a:	6713      	str	r3, [r2, #112]	; 0x70
 800889c:	e01c      	b.n	80088d8 <HAL_RCC_OscConfig+0x324>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	2b05      	cmp	r3, #5
 80088a4:	d10c      	bne.n	80088c0 <HAL_RCC_OscConfig+0x30c>
 80088a6:	4b5f      	ldr	r3, [pc, #380]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80088a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088aa:	4a5e      	ldr	r2, [pc, #376]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80088ac:	f043 0304 	orr.w	r3, r3, #4
 80088b0:	6713      	str	r3, [r2, #112]	; 0x70
 80088b2:	4b5c      	ldr	r3, [pc, #368]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80088b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b6:	4a5b      	ldr	r2, [pc, #364]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80088b8:	f043 0301 	orr.w	r3, r3, #1
 80088bc:	6713      	str	r3, [r2, #112]	; 0x70
 80088be:	e00b      	b.n	80088d8 <HAL_RCC_OscConfig+0x324>
 80088c0:	4b58      	ldr	r3, [pc, #352]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80088c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c4:	4a57      	ldr	r2, [pc, #348]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80088c6:	f023 0301 	bic.w	r3, r3, #1
 80088ca:	6713      	str	r3, [r2, #112]	; 0x70
 80088cc:	4b55      	ldr	r3, [pc, #340]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80088ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d0:	4a54      	ldr	r2, [pc, #336]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80088d2:	f023 0304 	bic.w	r3, r3, #4
 80088d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d015      	beq.n	800890c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088e0:	f7fb feb8 	bl	8004654 <HAL_GetTick>
 80088e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088e6:	e00a      	b.n	80088fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088e8:	f7fb feb4 	bl	8004654 <HAL_GetTick>
 80088ec:	4602      	mov	r2, r0
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d901      	bls.n	80088fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e0cb      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088fe:	4b49      	ldr	r3, [pc, #292]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008902:	f003 0302 	and.w	r3, r3, #2
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0ee      	beq.n	80088e8 <HAL_RCC_OscConfig+0x334>
 800890a:	e014      	b.n	8008936 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800890c:	f7fb fea2 	bl	8004654 <HAL_GetTick>
 8008910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008912:	e00a      	b.n	800892a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008914:	f7fb fe9e 	bl	8004654 <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008922:	4293      	cmp	r3, r2
 8008924:	d901      	bls.n	800892a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e0b5      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800892a:	4b3e      	ldr	r3, [pc, #248]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 800892c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1ee      	bne.n	8008914 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d105      	bne.n	8008948 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800893c:	4b39      	ldr	r3, [pc, #228]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 800893e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008940:	4a38      	ldr	r2, [pc, #224]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008946:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 80a1 	beq.w	8008a94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008952:	4b34      	ldr	r3, [pc, #208]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f003 030c 	and.w	r3, r3, #12
 800895a:	2b08      	cmp	r3, #8
 800895c:	d05c      	beq.n	8008a18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	2b02      	cmp	r3, #2
 8008964:	d141      	bne.n	80089ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008966:	4b31      	ldr	r3, [pc, #196]	; (8008a2c <HAL_RCC_OscConfig+0x478>)
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800896c:	f7fb fe72 	bl	8004654 <HAL_GetTick>
 8008970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008972:	e008      	b.n	8008986 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008974:	f7fb fe6e 	bl	8004654 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b02      	cmp	r3, #2
 8008980:	d901      	bls.n	8008986 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e087      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008986:	4b27      	ldr	r3, [pc, #156]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1f0      	bne.n	8008974 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	69da      	ldr	r2, [r3, #28]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	431a      	orrs	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	019b      	lsls	r3, r3, #6
 80089a2:	431a      	orrs	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a8:	085b      	lsrs	r3, r3, #1
 80089aa:	3b01      	subs	r3, #1
 80089ac:	041b      	lsls	r3, r3, #16
 80089ae:	431a      	orrs	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	061b      	lsls	r3, r3, #24
 80089b6:	491b      	ldr	r1, [pc, #108]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089bc:	4b1b      	ldr	r3, [pc, #108]	; (8008a2c <HAL_RCC_OscConfig+0x478>)
 80089be:	2201      	movs	r2, #1
 80089c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089c2:	f7fb fe47 	bl	8004654 <HAL_GetTick>
 80089c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089c8:	e008      	b.n	80089dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089ca:	f7fb fe43 	bl	8004654 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d901      	bls.n	80089dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e05c      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089dc:	4b11      	ldr	r3, [pc, #68]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d0f0      	beq.n	80089ca <HAL_RCC_OscConfig+0x416>
 80089e8:	e054      	b.n	8008a94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089ea:	4b10      	ldr	r3, [pc, #64]	; (8008a2c <HAL_RCC_OscConfig+0x478>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089f0:	f7fb fe30 	bl	8004654 <HAL_GetTick>
 80089f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089f6:	e008      	b.n	8008a0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089f8:	f7fb fe2c 	bl	8004654 <HAL_GetTick>
 80089fc:	4602      	mov	r2, r0
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d901      	bls.n	8008a0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e045      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a0a:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <HAL_RCC_OscConfig+0x470>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1f0      	bne.n	80089f8 <HAL_RCC_OscConfig+0x444>
 8008a16:	e03d      	b.n	8008a94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d107      	bne.n	8008a30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e038      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
 8008a24:	40023800 	.word	0x40023800
 8008a28:	40007000 	.word	0x40007000
 8008a2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a30:	4b1b      	ldr	r3, [pc, #108]	; (8008aa0 <HAL_RCC_OscConfig+0x4ec>)
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d028      	beq.n	8008a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d121      	bne.n	8008a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d11a      	bne.n	8008a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a60:	4013      	ands	r3, r2
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d111      	bne.n	8008a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a76:	085b      	lsrs	r3, r3, #1
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d107      	bne.n	8008a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d001      	beq.n	8008a94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e000      	b.n	8008a96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	40023800 	.word	0x40023800

08008aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e0cc      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ab8:	4b68      	ldr	r3, [pc, #416]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0307 	and.w	r3, r3, #7
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d90c      	bls.n	8008ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ac6:	4b65      	ldr	r3, [pc, #404]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	b2d2      	uxtb	r2, r2
 8008acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ace:	4b63      	ldr	r3, [pc, #396]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0307 	and.w	r3, r3, #7
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d001      	beq.n	8008ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e0b8      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0302 	and.w	r3, r3, #2
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d020      	beq.n	8008b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0304 	and.w	r3, r3, #4
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d005      	beq.n	8008b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008af8:	4b59      	ldr	r3, [pc, #356]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	4a58      	ldr	r2, [pc, #352]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0308 	and.w	r3, r3, #8
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d005      	beq.n	8008b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b10:	4b53      	ldr	r3, [pc, #332]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	4a52      	ldr	r2, [pc, #328]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b1c:	4b50      	ldr	r3, [pc, #320]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	494d      	ldr	r1, [pc, #308]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d044      	beq.n	8008bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d107      	bne.n	8008b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b42:	4b47      	ldr	r3, [pc, #284]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d119      	bne.n	8008b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e07f      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d003      	beq.n	8008b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d107      	bne.n	8008b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b62:	4b3f      	ldr	r3, [pc, #252]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d109      	bne.n	8008b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e06f      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b72:	4b3b      	ldr	r3, [pc, #236]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e067      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b82:	4b37      	ldr	r3, [pc, #220]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f023 0203 	bic.w	r2, r3, #3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	4934      	ldr	r1, [pc, #208]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b90:	4313      	orrs	r3, r2
 8008b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b94:	f7fb fd5e 	bl	8004654 <HAL_GetTick>
 8008b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b9a:	e00a      	b.n	8008bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b9c:	f7fb fd5a 	bl	8004654 <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d901      	bls.n	8008bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e04f      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bb2:	4b2b      	ldr	r3, [pc, #172]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f003 020c 	and.w	r2, r3, #12
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d1eb      	bne.n	8008b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bc4:	4b25      	ldr	r3, [pc, #148]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0307 	and.w	r3, r3, #7
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d20c      	bcs.n	8008bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bd2:	4b22      	ldr	r3, [pc, #136]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	b2d2      	uxtb	r2, r2
 8008bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bda:	4b20      	ldr	r3, [pc, #128]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0307 	and.w	r3, r3, #7
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d001      	beq.n	8008bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e032      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0304 	and.w	r3, r3, #4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d008      	beq.n	8008c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bf8:	4b19      	ldr	r3, [pc, #100]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	4916      	ldr	r1, [pc, #88]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0308 	and.w	r3, r3, #8
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d009      	beq.n	8008c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c16:	4b12      	ldr	r3, [pc, #72]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	490e      	ldr	r1, [pc, #56]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c26:	4313      	orrs	r3, r2
 8008c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c2a:	f000 f821 	bl	8008c70 <HAL_RCC_GetSysClockFreq>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	4b0b      	ldr	r3, [pc, #44]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	091b      	lsrs	r3, r3, #4
 8008c36:	f003 030f 	and.w	r3, r3, #15
 8008c3a:	490a      	ldr	r1, [pc, #40]	; (8008c64 <HAL_RCC_ClockConfig+0x1c0>)
 8008c3c:	5ccb      	ldrb	r3, [r1, r3]
 8008c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c42:	4a09      	ldr	r2, [pc, #36]	; (8008c68 <HAL_RCC_ClockConfig+0x1c4>)
 8008c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c46:	4b09      	ldr	r3, [pc, #36]	; (8008c6c <HAL_RCC_ClockConfig+0x1c8>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fb fcbe 	bl	80045cc <HAL_InitTick>

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	40023c00 	.word	0x40023c00
 8008c60:	40023800 	.word	0x40023800
 8008c64:	0800de18 	.word	0x0800de18
 8008c68:	20000288 	.word	0x20000288
 8008c6c:	2000028c 	.word	0x2000028c

08008c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c74:	b094      	sub	sp, #80	; 0x50
 8008c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c80:	2300      	movs	r3, #0
 8008c82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008c84:	2300      	movs	r3, #0
 8008c86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c88:	4b79      	ldr	r3, [pc, #484]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f003 030c 	and.w	r3, r3, #12
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d00d      	beq.n	8008cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	f200 80e1 	bhi.w	8008e5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	d003      	beq.n	8008caa <HAL_RCC_GetSysClockFreq+0x3a>
 8008ca2:	e0db      	b.n	8008e5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ca4:	4b73      	ldr	r3, [pc, #460]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8008ca6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008ca8:	e0db      	b.n	8008e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008caa:	4b73      	ldr	r3, [pc, #460]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x208>)
 8008cac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008cae:	e0d8      	b.n	8008e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008cb0:	4b6f      	ldr	r3, [pc, #444]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008cba:	4b6d      	ldr	r3, [pc, #436]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d063      	beq.n	8008d8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cc6:	4b6a      	ldr	r3, [pc, #424]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	099b      	lsrs	r3, r3, #6
 8008ccc:	2200      	movs	r2, #0
 8008cce:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8008cda:	2300      	movs	r3, #0
 8008cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008ce2:	4622      	mov	r2, r4
 8008ce4:	462b      	mov	r3, r5
 8008ce6:	f04f 0000 	mov.w	r0, #0
 8008cea:	f04f 0100 	mov.w	r1, #0
 8008cee:	0159      	lsls	r1, r3, #5
 8008cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cf4:	0150      	lsls	r0, r2, #5
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	1a51      	subs	r1, r2, r1
 8008cfe:	6139      	str	r1, [r7, #16]
 8008d00:	4629      	mov	r1, r5
 8008d02:	eb63 0301 	sbc.w	r3, r3, r1
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	f04f 0200 	mov.w	r2, #0
 8008d0c:	f04f 0300 	mov.w	r3, #0
 8008d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d14:	4659      	mov	r1, fp
 8008d16:	018b      	lsls	r3, r1, #6
 8008d18:	4651      	mov	r1, sl
 8008d1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008d1e:	4651      	mov	r1, sl
 8008d20:	018a      	lsls	r2, r1, #6
 8008d22:	4651      	mov	r1, sl
 8008d24:	ebb2 0801 	subs.w	r8, r2, r1
 8008d28:	4659      	mov	r1, fp
 8008d2a:	eb63 0901 	sbc.w	r9, r3, r1
 8008d2e:	f04f 0200 	mov.w	r2, #0
 8008d32:	f04f 0300 	mov.w	r3, #0
 8008d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d42:	4690      	mov	r8, r2
 8008d44:	4699      	mov	r9, r3
 8008d46:	4623      	mov	r3, r4
 8008d48:	eb18 0303 	adds.w	r3, r8, r3
 8008d4c:	60bb      	str	r3, [r7, #8]
 8008d4e:	462b      	mov	r3, r5
 8008d50:	eb49 0303 	adc.w	r3, r9, r3
 8008d54:	60fb      	str	r3, [r7, #12]
 8008d56:	f04f 0200 	mov.w	r2, #0
 8008d5a:	f04f 0300 	mov.w	r3, #0
 8008d5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008d62:	4629      	mov	r1, r5
 8008d64:	024b      	lsls	r3, r1, #9
 8008d66:	4621      	mov	r1, r4
 8008d68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	024a      	lsls	r2, r1, #9
 8008d70:	4610      	mov	r0, r2
 8008d72:	4619      	mov	r1, r3
 8008d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d76:	2200      	movs	r2, #0
 8008d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d80:	f7f7 ff0e 	bl	8000ba0 <__aeabi_uldivmod>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4613      	mov	r3, r2
 8008d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d8c:	e058      	b.n	8008e40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d8e:	4b38      	ldr	r3, [pc, #224]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	099b      	lsrs	r3, r3, #6
 8008d94:	2200      	movs	r2, #0
 8008d96:	4618      	mov	r0, r3
 8008d98:	4611      	mov	r1, r2
 8008d9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008d9e:	623b      	str	r3, [r7, #32]
 8008da0:	2300      	movs	r3, #0
 8008da2:	627b      	str	r3, [r7, #36]	; 0x24
 8008da4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008da8:	4642      	mov	r2, r8
 8008daa:	464b      	mov	r3, r9
 8008dac:	f04f 0000 	mov.w	r0, #0
 8008db0:	f04f 0100 	mov.w	r1, #0
 8008db4:	0159      	lsls	r1, r3, #5
 8008db6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008dba:	0150      	lsls	r0, r2, #5
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	4641      	mov	r1, r8
 8008dc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8008dcc:	f04f 0200 	mov.w	r2, #0
 8008dd0:	f04f 0300 	mov.w	r3, #0
 8008dd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008dd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008ddc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008de0:	ebb2 040a 	subs.w	r4, r2, sl
 8008de4:	eb63 050b 	sbc.w	r5, r3, fp
 8008de8:	f04f 0200 	mov.w	r2, #0
 8008dec:	f04f 0300 	mov.w	r3, #0
 8008df0:	00eb      	lsls	r3, r5, #3
 8008df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008df6:	00e2      	lsls	r2, r4, #3
 8008df8:	4614      	mov	r4, r2
 8008dfa:	461d      	mov	r5, r3
 8008dfc:	4643      	mov	r3, r8
 8008dfe:	18e3      	adds	r3, r4, r3
 8008e00:	603b      	str	r3, [r7, #0]
 8008e02:	464b      	mov	r3, r9
 8008e04:	eb45 0303 	adc.w	r3, r5, r3
 8008e08:	607b      	str	r3, [r7, #4]
 8008e0a:	f04f 0200 	mov.w	r2, #0
 8008e0e:	f04f 0300 	mov.w	r3, #0
 8008e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008e16:	4629      	mov	r1, r5
 8008e18:	028b      	lsls	r3, r1, #10
 8008e1a:	4621      	mov	r1, r4
 8008e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008e20:	4621      	mov	r1, r4
 8008e22:	028a      	lsls	r2, r1, #10
 8008e24:	4610      	mov	r0, r2
 8008e26:	4619      	mov	r1, r3
 8008e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	61bb      	str	r3, [r7, #24]
 8008e2e:	61fa      	str	r2, [r7, #28]
 8008e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e34:	f7f7 feb4 	bl	8000ba0 <__aeabi_uldivmod>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008e40:	4b0b      	ldr	r3, [pc, #44]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	0c1b      	lsrs	r3, r3, #16
 8008e46:	f003 0303 	and.w	r3, r3, #3
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008e50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e5a:	e002      	b.n	8008e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e5c:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8008e5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3750      	adds	r7, #80	; 0x50
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e6e:	bf00      	nop
 8008e70:	40023800 	.word	0x40023800
 8008e74:	00f42400 	.word	0x00f42400
 8008e78:	007a1200 	.word	0x007a1200

08008e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e80:	4b03      	ldr	r3, [pc, #12]	; (8008e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e82:	681b      	ldr	r3, [r3, #0]
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	20000288 	.word	0x20000288

08008e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e98:	f7ff fff0 	bl	8008e7c <HAL_RCC_GetHCLKFreq>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	4b05      	ldr	r3, [pc, #20]	; (8008eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	0a9b      	lsrs	r3, r3, #10
 8008ea4:	f003 0307 	and.w	r3, r3, #7
 8008ea8:	4903      	ldr	r1, [pc, #12]	; (8008eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008eaa:	5ccb      	ldrb	r3, [r1, r3]
 8008eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	40023800 	.word	0x40023800
 8008eb8:	0800de28 	.word	0x0800de28

08008ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008ec0:	f7ff ffdc 	bl	8008e7c <HAL_RCC_GetHCLKFreq>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	4b05      	ldr	r3, [pc, #20]	; (8008edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	0b5b      	lsrs	r3, r3, #13
 8008ecc:	f003 0307 	and.w	r3, r3, #7
 8008ed0:	4903      	ldr	r1, [pc, #12]	; (8008ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ed2:	5ccb      	ldrb	r3, [r1, r3]
 8008ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	40023800 	.word	0x40023800
 8008ee0:	0800de28 	.word	0x0800de28

08008ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e04c      	b.n	8008f90 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d111      	bne.n	8008f26 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f001 fc02 	bl	800a714 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d102      	bne.n	8008f1e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a1f      	ldr	r2, [pc, #124]	; (8008f98 <HAL_TIM_Base_Init+0xb4>)
 8008f1c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2202      	movs	r2, #2
 8008f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	3304      	adds	r3, #4
 8008f36:	4619      	mov	r1, r3
 8008f38:	4610      	mov	r0, r2
 8008f3a:	f001 f91f 	bl	800a17c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	08004149 	.word	0x08004149

08008f9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d001      	beq.n	8008fb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e03c      	b.n	800902e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a1e      	ldr	r2, [pc, #120]	; (800903c <HAL_TIM_Base_Start+0xa0>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d018      	beq.n	8008ff8 <HAL_TIM_Base_Start+0x5c>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fce:	d013      	beq.n	8008ff8 <HAL_TIM_Base_Start+0x5c>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a1a      	ldr	r2, [pc, #104]	; (8009040 <HAL_TIM_Base_Start+0xa4>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d00e      	beq.n	8008ff8 <HAL_TIM_Base_Start+0x5c>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a19      	ldr	r2, [pc, #100]	; (8009044 <HAL_TIM_Base_Start+0xa8>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d009      	beq.n	8008ff8 <HAL_TIM_Base_Start+0x5c>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a17      	ldr	r2, [pc, #92]	; (8009048 <HAL_TIM_Base_Start+0xac>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d004      	beq.n	8008ff8 <HAL_TIM_Base_Start+0x5c>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a16      	ldr	r2, [pc, #88]	; (800904c <HAL_TIM_Base_Start+0xb0>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d111      	bne.n	800901c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f003 0307 	and.w	r3, r3, #7
 8009002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2b06      	cmp	r3, #6
 8009008:	d010      	beq.n	800902c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f042 0201 	orr.w	r2, r2, #1
 8009018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800901a:	e007      	b.n	800902c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f042 0201 	orr.w	r2, r2, #1
 800902a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	40010000 	.word	0x40010000
 8009040:	40000400 	.word	0x40000400
 8009044:	40000800 	.word	0x40000800
 8009048:	40000c00 	.word	0x40000c00
 800904c:	40014000 	.word	0x40014000

08009050 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b01      	cmp	r3, #1
 8009062:	d001      	beq.n	8009068 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e044      	b.n	80090f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2202      	movs	r2, #2
 800906c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0201 	orr.w	r2, r2, #1
 800907e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a1e      	ldr	r2, [pc, #120]	; (8009100 <HAL_TIM_Base_Start_IT+0xb0>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d018      	beq.n	80090bc <HAL_TIM_Base_Start_IT+0x6c>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009092:	d013      	beq.n	80090bc <HAL_TIM_Base_Start_IT+0x6c>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a1a      	ldr	r2, [pc, #104]	; (8009104 <HAL_TIM_Base_Start_IT+0xb4>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d00e      	beq.n	80090bc <HAL_TIM_Base_Start_IT+0x6c>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a19      	ldr	r2, [pc, #100]	; (8009108 <HAL_TIM_Base_Start_IT+0xb8>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d009      	beq.n	80090bc <HAL_TIM_Base_Start_IT+0x6c>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a17      	ldr	r2, [pc, #92]	; (800910c <HAL_TIM_Base_Start_IT+0xbc>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d004      	beq.n	80090bc <HAL_TIM_Base_Start_IT+0x6c>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a16      	ldr	r2, [pc, #88]	; (8009110 <HAL_TIM_Base_Start_IT+0xc0>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d111      	bne.n	80090e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f003 0307 	and.w	r3, r3, #7
 80090c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b06      	cmp	r3, #6
 80090cc:	d010      	beq.n	80090f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f042 0201 	orr.w	r2, r2, #1
 80090dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090de:	e007      	b.n	80090f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f042 0201 	orr.w	r2, r2, #1
 80090ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	40010000 	.word	0x40010000
 8009104:	40000400 	.word	0x40000400
 8009108:	40000800 	.word	0x40000800
 800910c:	40000c00 	.word	0x40000c00
 8009110:	40014000 	.word	0x40014000

08009114 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d101      	bne.n	8009126 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e04c      	b.n	80091c0 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800912c:	b2db      	uxtb	r3, r3
 800912e:	2b00      	cmp	r3, #0
 8009130:	d111      	bne.n	8009156 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f001 faea 	bl	800a714 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009144:	2b00      	cmp	r3, #0
 8009146:	d102      	bne.n	800914e <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a1f      	ldr	r2, [pc, #124]	; (80091c8 <HAL_TIM_OC_Init+0xb4>)
 800914c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2202      	movs	r2, #2
 800915a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	3304      	adds	r3, #4
 8009166:	4619      	mov	r1, r3
 8009168:	4610      	mov	r0, r2
 800916a:	f001 f807 	bl	800a17c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2201      	movs	r2, #1
 80091a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	080091cd 	.word	0x080091cd

080091cc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80091d4:	bf00      	nop
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d101      	bne.n	80091f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e04c      	b.n	800928c <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d111      	bne.n	8009222 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f001 fa84 	bl	800a714 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009210:	2b00      	cmp	r3, #0
 8009212:	d102      	bne.n	800921a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a1f      	ldr	r2, [pc, #124]	; (8009294 <HAL_TIM_PWM_Init+0xb4>)
 8009218:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2202      	movs	r2, #2
 8009226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	3304      	adds	r3, #4
 8009232:	4619      	mov	r1, r3
 8009234:	4610      	mov	r0, r2
 8009236:	f000 ffa1 	bl	800a17c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2201      	movs	r2, #1
 800926e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	080040f9 	.word	0x080040f9

08009298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d109      	bne.n	80092bc <HAL_TIM_PWM_Start+0x24>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	bf14      	ite	ne
 80092b4:	2301      	movne	r3, #1
 80092b6:	2300      	moveq	r3, #0
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	e022      	b.n	8009302 <HAL_TIM_PWM_Start+0x6a>
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	2b04      	cmp	r3, #4
 80092c0:	d109      	bne.n	80092d6 <HAL_TIM_PWM_Start+0x3e>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	bf14      	ite	ne
 80092ce:	2301      	movne	r3, #1
 80092d0:	2300      	moveq	r3, #0
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	e015      	b.n	8009302 <HAL_TIM_PWM_Start+0x6a>
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b08      	cmp	r3, #8
 80092da:	d109      	bne.n	80092f0 <HAL_TIM_PWM_Start+0x58>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	bf14      	ite	ne
 80092e8:	2301      	movne	r3, #1
 80092ea:	2300      	moveq	r3, #0
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	e008      	b.n	8009302 <HAL_TIM_PWM_Start+0x6a>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	bf14      	ite	ne
 80092fc:	2301      	movne	r3, #1
 80092fe:	2300      	moveq	r3, #0
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e068      	b.n	80093dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d104      	bne.n	800931a <HAL_TIM_PWM_Start+0x82>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2202      	movs	r2, #2
 8009314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009318:	e013      	b.n	8009342 <HAL_TIM_PWM_Start+0xaa>
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2b04      	cmp	r3, #4
 800931e:	d104      	bne.n	800932a <HAL_TIM_PWM_Start+0x92>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2202      	movs	r2, #2
 8009324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009328:	e00b      	b.n	8009342 <HAL_TIM_PWM_Start+0xaa>
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b08      	cmp	r3, #8
 800932e:	d104      	bne.n	800933a <HAL_TIM_PWM_Start+0xa2>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2202      	movs	r2, #2
 8009334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009338:	e003      	b.n	8009342 <HAL_TIM_PWM_Start+0xaa>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2202      	movs	r2, #2
 800933e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2201      	movs	r2, #1
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	4618      	mov	r0, r3
 800934c:	f001 f9bc 	bl	800a6c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a23      	ldr	r2, [pc, #140]	; (80093e4 <HAL_TIM_PWM_Start+0x14c>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d107      	bne.n	800936a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009368:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a1d      	ldr	r2, [pc, #116]	; (80093e4 <HAL_TIM_PWM_Start+0x14c>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d018      	beq.n	80093a6 <HAL_TIM_PWM_Start+0x10e>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800937c:	d013      	beq.n	80093a6 <HAL_TIM_PWM_Start+0x10e>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a19      	ldr	r2, [pc, #100]	; (80093e8 <HAL_TIM_PWM_Start+0x150>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d00e      	beq.n	80093a6 <HAL_TIM_PWM_Start+0x10e>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a17      	ldr	r2, [pc, #92]	; (80093ec <HAL_TIM_PWM_Start+0x154>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d009      	beq.n	80093a6 <HAL_TIM_PWM_Start+0x10e>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a16      	ldr	r2, [pc, #88]	; (80093f0 <HAL_TIM_PWM_Start+0x158>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d004      	beq.n	80093a6 <HAL_TIM_PWM_Start+0x10e>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a14      	ldr	r2, [pc, #80]	; (80093f4 <HAL_TIM_PWM_Start+0x15c>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d111      	bne.n	80093ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	f003 0307 	and.w	r3, r3, #7
 80093b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2b06      	cmp	r3, #6
 80093b6:	d010      	beq.n	80093da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f042 0201 	orr.w	r2, r2, #1
 80093c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093c8:	e007      	b.n	80093da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f042 0201 	orr.w	r2, r2, #1
 80093d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	40010000 	.word	0x40010000
 80093e8:	40000400 	.word	0x40000400
 80093ec:	40000800 	.word	0x40000800
 80093f0:	40000c00 	.word	0x40000c00
 80093f4:	40014000 	.word	0x40014000

080093f8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d101      	bne.n	800940c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e04c      	b.n	80094a6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b00      	cmp	r3, #0
 8009416:	d111      	bne.n	800943c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f001 f977 	bl	800a714 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800942a:	2b00      	cmp	r3, #0
 800942c:	d102      	bne.n	8009434 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a1f      	ldr	r2, [pc, #124]	; (80094b0 <HAL_TIM_OnePulse_Init+0xb8>)
 8009432:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3304      	adds	r3, #4
 800944c:	4619      	mov	r1, r3
 800944e:	4610      	mov	r0, r2
 8009450:	f000 fe94 	bl	800a17c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f022 0208 	bic.w	r2, r2, #8
 8009462:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	6819      	ldr	r1, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	430a      	orrs	r2, r1
 8009472:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	080094b5 	.word	0x080094b5

080094b4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80094e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80094f0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d108      	bne.n	800950a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80094f8:	7bbb      	ldrb	r3, [r7, #14]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d105      	bne.n	800950a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80094fe:	7b7b      	ldrb	r3, [r7, #13]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d102      	bne.n	800950a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009504:	7b3b      	ldrb	r3, [r7, #12]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d001      	beq.n	800950e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e03b      	b.n	8009586 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2202      	movs	r2, #2
 8009512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2202      	movs	r2, #2
 800951a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2202      	movs	r2, #2
 8009522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2202      	movs	r2, #2
 800952a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68da      	ldr	r2, [r3, #12]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f042 0202 	orr.w	r2, r2, #2
 800953c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68da      	ldr	r2, [r3, #12]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f042 0204 	orr.w	r2, r2, #4
 800954c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2201      	movs	r2, #1
 8009554:	2100      	movs	r1, #0
 8009556:	4618      	mov	r0, r3
 8009558:	f001 f8b6 	bl	800a6c8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2201      	movs	r2, #1
 8009562:	2104      	movs	r1, #4
 8009564:	4618      	mov	r0, r3
 8009566:	f001 f8af 	bl	800a6c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a08      	ldr	r2, [pc, #32]	; (8009590 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d107      	bne.n	8009584 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009582:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	40010000 	.word	0x40010000

08009594 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d101      	bne.n	80095a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e0a2      	b.n	80096ee <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d111      	bne.n	80095d8 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f001 f8a9 	bl	800a714 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d102      	bne.n	80095d0 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a4a      	ldr	r2, [pc, #296]	; (80096f8 <HAL_TIM_Encoder_Init+0x164>)
 80095ce:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2202      	movs	r2, #2
 80095dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	6812      	ldr	r2, [r2, #0]
 80095ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095ee:	f023 0307 	bic.w	r3, r3, #7
 80095f2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	3304      	adds	r3, #4
 80095fc:	4619      	mov	r1, r3
 80095fe:	4610      	mov	r0, r2
 8009600:	f000 fdbc 	bl	800a17c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6a1b      	ldr	r3, [r3, #32]
 800961a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	4313      	orrs	r3, r2
 8009624:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800962c:	f023 0303 	bic.w	r3, r3, #3
 8009630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	689a      	ldr	r2, [r3, #8]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	699b      	ldr	r3, [r3, #24]
 800963a:	021b      	lsls	r3, r3, #8
 800963c:	4313      	orrs	r3, r2
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	4313      	orrs	r3, r2
 8009642:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800964a:	f023 030c 	bic.w	r3, r3, #12
 800964e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800965a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	68da      	ldr	r2, [r3, #12]
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	69db      	ldr	r3, [r3, #28]
 8009664:	021b      	lsls	r3, r3, #8
 8009666:	4313      	orrs	r3, r2
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	4313      	orrs	r3, r2
 800966c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	011a      	lsls	r2, r3, #4
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	6a1b      	ldr	r3, [r3, #32]
 8009678:	031b      	lsls	r3, r3, #12
 800967a:	4313      	orrs	r3, r2
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	4313      	orrs	r3, r2
 8009680:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009688:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009690:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	011b      	lsls	r3, r3, #4
 800969c:	4313      	orrs	r3, r2
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	0800420d 	.word	0x0800420d

080096fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800970c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009714:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800971c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009724:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d110      	bne.n	800974e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d102      	bne.n	8009738 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009732:	7b7b      	ldrb	r3, [r7, #13]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d001      	beq.n	800973c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e069      	b.n	8009810 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2202      	movs	r2, #2
 8009740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2202      	movs	r2, #2
 8009748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800974c:	e031      	b.n	80097b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	2b04      	cmp	r3, #4
 8009752:	d110      	bne.n	8009776 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009754:	7bbb      	ldrb	r3, [r7, #14]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d102      	bne.n	8009760 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800975a:	7b3b      	ldrb	r3, [r7, #12]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d001      	beq.n	8009764 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e055      	b.n	8009810 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2202      	movs	r2, #2
 8009768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2202      	movs	r2, #2
 8009770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009774:	e01d      	b.n	80097b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009776:	7bfb      	ldrb	r3, [r7, #15]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d108      	bne.n	800978e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800977c:	7bbb      	ldrb	r3, [r7, #14]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d105      	bne.n	800978e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009782:	7b7b      	ldrb	r3, [r7, #13]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d102      	bne.n	800978e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009788:	7b3b      	ldrb	r3, [r7, #12]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d001      	beq.n	8009792 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e03e      	b.n	8009810 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2202      	movs	r2, #2
 8009796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2202      	movs	r2, #2
 800979e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2202      	movs	r2, #2
 80097a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2202      	movs	r2, #2
 80097ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d003      	beq.n	80097c0 <HAL_TIM_Encoder_Start+0xc4>
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	2b04      	cmp	r3, #4
 80097bc:	d008      	beq.n	80097d0 <HAL_TIM_Encoder_Start+0xd4>
 80097be:	e00f      	b.n	80097e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2201      	movs	r2, #1
 80097c6:	2100      	movs	r1, #0
 80097c8:	4618      	mov	r0, r3
 80097ca:	f000 ff7d 	bl	800a6c8 <TIM_CCxChannelCmd>
      break;
 80097ce:	e016      	b.n	80097fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2201      	movs	r2, #1
 80097d6:	2104      	movs	r1, #4
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 ff75 	bl	800a6c8 <TIM_CCxChannelCmd>
      break;
 80097de:	e00e      	b.n	80097fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2201      	movs	r2, #1
 80097e6:	2100      	movs	r1, #0
 80097e8:	4618      	mov	r0, r3
 80097ea:	f000 ff6d 	bl	800a6c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2201      	movs	r2, #1
 80097f4:	2104      	movs	r1, #4
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 ff66 	bl	800a6c8 <TIM_CCxChannelCmd>
      break;
 80097fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f042 0201 	orr.w	r2, r2, #1
 800980c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	f003 0302 	and.w	r3, r3, #2
 800982a:	2b02      	cmp	r3, #2
 800982c:	d128      	bne.n	8009880 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	f003 0302 	and.w	r3, r3, #2
 8009838:	2b02      	cmp	r3, #2
 800983a:	d121      	bne.n	8009880 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f06f 0202 	mvn.w	r2, #2
 8009844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2201      	movs	r2, #1
 800984a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	f003 0303 	and.w	r3, r3, #3
 8009856:	2b00      	cmp	r3, #0
 8009858:	d005      	beq.n	8009866 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	4798      	blx	r3
 8009864:	e009      	b.n	800987a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	f003 0304 	and.w	r3, r3, #4
 800988a:	2b04      	cmp	r3, #4
 800988c:	d128      	bne.n	80098e0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	f003 0304 	and.w	r3, r3, #4
 8009898:	2b04      	cmp	r3, #4
 800989a:	d121      	bne.n	80098e0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f06f 0204 	mvn.w	r2, #4
 80098a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2202      	movs	r2, #2
 80098aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d005      	beq.n	80098c6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	4798      	blx	r3
 80098c4:	e009      	b.n	80098da <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	f003 0308 	and.w	r3, r3, #8
 80098ea:	2b08      	cmp	r3, #8
 80098ec:	d128      	bne.n	8009940 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	f003 0308 	and.w	r3, r3, #8
 80098f8:	2b08      	cmp	r3, #8
 80098fa:	d121      	bne.n	8009940 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f06f 0208 	mvn.w	r2, #8
 8009904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2204      	movs	r2, #4
 800990a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	f003 0303 	and.w	r3, r3, #3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d005      	beq.n	8009926 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	4798      	blx	r3
 8009924:	e009      	b.n	800993a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	f003 0310 	and.w	r3, r3, #16
 800994a:	2b10      	cmp	r3, #16
 800994c:	d128      	bne.n	80099a0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	f003 0310 	and.w	r3, r3, #16
 8009958:	2b10      	cmp	r3, #16
 800995a:	d121      	bne.n	80099a0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f06f 0210 	mvn.w	r2, #16
 8009964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2208      	movs	r2, #8
 800996a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	69db      	ldr	r3, [r3, #28]
 8009972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009976:	2b00      	cmp	r3, #0
 8009978:	d005      	beq.n	8009986 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	4798      	blx	r3
 8009984:	e009      	b.n	800999a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d110      	bne.n	80099d0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d109      	bne.n	80099d0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f06f 0201 	mvn.w	r2, #1
 80099c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099da:	2b80      	cmp	r3, #128	; 0x80
 80099dc:	d110      	bne.n	8009a00 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099e8:	2b80      	cmp	r3, #128	; 0x80
 80099ea:	d109      	bne.n	8009a00 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a0a:	2b40      	cmp	r3, #64	; 0x40
 8009a0c:	d110      	bne.n	8009a30 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a18:	2b40      	cmp	r3, #64	; 0x40
 8009a1a:	d109      	bne.n	8009a30 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	f003 0320 	and.w	r3, r3, #32
 8009a3a:	2b20      	cmp	r3, #32
 8009a3c:	d110      	bne.n	8009a60 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	f003 0320 	and.w	r3, r3, #32
 8009a48:	2b20      	cmp	r3, #32
 8009a4a:	d109      	bne.n	8009a60 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f06f 0220 	mvn.w	r2, #32
 8009a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d101      	bne.n	8009a86 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009a82:	2302      	movs	r3, #2
 8009a84:	e048      	b.n	8009b18 <HAL_TIM_OC_ConfigChannel+0xb0>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b0c      	cmp	r3, #12
 8009a92:	d839      	bhi.n	8009b08 <HAL_TIM_OC_ConfigChannel+0xa0>
 8009a94:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <HAL_TIM_OC_ConfigChannel+0x34>)
 8009a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9a:	bf00      	nop
 8009a9c:	08009ad1 	.word	0x08009ad1
 8009aa0:	08009b09 	.word	0x08009b09
 8009aa4:	08009b09 	.word	0x08009b09
 8009aa8:	08009b09 	.word	0x08009b09
 8009aac:	08009adf 	.word	0x08009adf
 8009ab0:	08009b09 	.word	0x08009b09
 8009ab4:	08009b09 	.word	0x08009b09
 8009ab8:	08009b09 	.word	0x08009b09
 8009abc:	08009aed 	.word	0x08009aed
 8009ac0:	08009b09 	.word	0x08009b09
 8009ac4:	08009b09 	.word	0x08009b09
 8009ac8:	08009b09 	.word	0x08009b09
 8009acc:	08009afb 	.word	0x08009afb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68b9      	ldr	r1, [r7, #8]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 fbd0 	bl	800a27c <TIM_OC1_SetConfig>
      break;
 8009adc:	e017      	b.n	8009b0e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68b9      	ldr	r1, [r7, #8]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 fc2f 	bl	800a348 <TIM_OC2_SetConfig>
      break;
 8009aea:	e010      	b.n	8009b0e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68b9      	ldr	r1, [r7, #8]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fc94 	bl	800a420 <TIM_OC3_SetConfig>
      break;
 8009af8:	e009      	b.n	8009b0e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68b9      	ldr	r1, [r7, #8]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 fcf7 	bl	800a4f4 <TIM_OC4_SetConfig>
      break;
 8009b06:	e002      	b.n	8009b0e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d101      	bne.n	8009b3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b3a:	2302      	movs	r3, #2
 8009b3c:	e0ae      	b.n	8009c9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2b0c      	cmp	r3, #12
 8009b4a:	f200 809f 	bhi.w	8009c8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009b4e:	a201      	add	r2, pc, #4	; (adr r2, 8009b54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b54:	08009b89 	.word	0x08009b89
 8009b58:	08009c8d 	.word	0x08009c8d
 8009b5c:	08009c8d 	.word	0x08009c8d
 8009b60:	08009c8d 	.word	0x08009c8d
 8009b64:	08009bc9 	.word	0x08009bc9
 8009b68:	08009c8d 	.word	0x08009c8d
 8009b6c:	08009c8d 	.word	0x08009c8d
 8009b70:	08009c8d 	.word	0x08009c8d
 8009b74:	08009c0b 	.word	0x08009c0b
 8009b78:	08009c8d 	.word	0x08009c8d
 8009b7c:	08009c8d 	.word	0x08009c8d
 8009b80:	08009c8d 	.word	0x08009c8d
 8009b84:	08009c4b 	.word	0x08009c4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68b9      	ldr	r1, [r7, #8]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 fb74 	bl	800a27c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	699a      	ldr	r2, [r3, #24]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f042 0208 	orr.w	r2, r2, #8
 8009ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	699a      	ldr	r2, [r3, #24]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f022 0204 	bic.w	r2, r2, #4
 8009bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	6999      	ldr	r1, [r3, #24]
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	691a      	ldr	r2, [r3, #16]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	619a      	str	r2, [r3, #24]
      break;
 8009bc6:	e064      	b.n	8009c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68b9      	ldr	r1, [r7, #8]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f000 fbba 	bl	800a348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	699a      	ldr	r2, [r3, #24]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	699a      	ldr	r2, [r3, #24]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6999      	ldr	r1, [r3, #24]
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	021a      	lsls	r2, r3, #8
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	430a      	orrs	r2, r1
 8009c06:	619a      	str	r2, [r3, #24]
      break;
 8009c08:	e043      	b.n	8009c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68b9      	ldr	r1, [r7, #8]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 fc05 	bl	800a420 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	69da      	ldr	r2, [r3, #28]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f042 0208 	orr.w	r2, r2, #8
 8009c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	69da      	ldr	r2, [r3, #28]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f022 0204 	bic.w	r2, r2, #4
 8009c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	69d9      	ldr	r1, [r3, #28]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	691a      	ldr	r2, [r3, #16]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	430a      	orrs	r2, r1
 8009c46:	61da      	str	r2, [r3, #28]
      break;
 8009c48:	e023      	b.n	8009c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68b9      	ldr	r1, [r7, #8]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f000 fc4f 	bl	800a4f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	69da      	ldr	r2, [r3, #28]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	69da      	ldr	r2, [r3, #28]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	69d9      	ldr	r1, [r3, #28]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	021a      	lsls	r2, r3, #8
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	430a      	orrs	r2, r1
 8009c88:	61da      	str	r2, [r3, #28]
      break;
 8009c8a:	e002      	b.n	8009c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3718      	adds	r7, #24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d101      	bne.n	8009cc0 <HAL_TIM_ConfigClockSource+0x1c>
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	e0b4      	b.n	8009e2a <HAL_TIM_ConfigClockSource+0x186>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2202      	movs	r2, #2
 8009ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cf8:	d03e      	beq.n	8009d78 <HAL_TIM_ConfigClockSource+0xd4>
 8009cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cfe:	f200 8087 	bhi.w	8009e10 <HAL_TIM_ConfigClockSource+0x16c>
 8009d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d06:	f000 8086 	beq.w	8009e16 <HAL_TIM_ConfigClockSource+0x172>
 8009d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d0e:	d87f      	bhi.n	8009e10 <HAL_TIM_ConfigClockSource+0x16c>
 8009d10:	2b70      	cmp	r3, #112	; 0x70
 8009d12:	d01a      	beq.n	8009d4a <HAL_TIM_ConfigClockSource+0xa6>
 8009d14:	2b70      	cmp	r3, #112	; 0x70
 8009d16:	d87b      	bhi.n	8009e10 <HAL_TIM_ConfigClockSource+0x16c>
 8009d18:	2b60      	cmp	r3, #96	; 0x60
 8009d1a:	d050      	beq.n	8009dbe <HAL_TIM_ConfigClockSource+0x11a>
 8009d1c:	2b60      	cmp	r3, #96	; 0x60
 8009d1e:	d877      	bhi.n	8009e10 <HAL_TIM_ConfigClockSource+0x16c>
 8009d20:	2b50      	cmp	r3, #80	; 0x50
 8009d22:	d03c      	beq.n	8009d9e <HAL_TIM_ConfigClockSource+0xfa>
 8009d24:	2b50      	cmp	r3, #80	; 0x50
 8009d26:	d873      	bhi.n	8009e10 <HAL_TIM_ConfigClockSource+0x16c>
 8009d28:	2b40      	cmp	r3, #64	; 0x40
 8009d2a:	d058      	beq.n	8009dde <HAL_TIM_ConfigClockSource+0x13a>
 8009d2c:	2b40      	cmp	r3, #64	; 0x40
 8009d2e:	d86f      	bhi.n	8009e10 <HAL_TIM_ConfigClockSource+0x16c>
 8009d30:	2b30      	cmp	r3, #48	; 0x30
 8009d32:	d064      	beq.n	8009dfe <HAL_TIM_ConfigClockSource+0x15a>
 8009d34:	2b30      	cmp	r3, #48	; 0x30
 8009d36:	d86b      	bhi.n	8009e10 <HAL_TIM_ConfigClockSource+0x16c>
 8009d38:	2b20      	cmp	r3, #32
 8009d3a:	d060      	beq.n	8009dfe <HAL_TIM_ConfigClockSource+0x15a>
 8009d3c:	2b20      	cmp	r3, #32
 8009d3e:	d867      	bhi.n	8009e10 <HAL_TIM_ConfigClockSource+0x16c>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d05c      	beq.n	8009dfe <HAL_TIM_ConfigClockSource+0x15a>
 8009d44:	2b10      	cmp	r3, #16
 8009d46:	d05a      	beq.n	8009dfe <HAL_TIM_ConfigClockSource+0x15a>
 8009d48:	e062      	b.n	8009e10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6818      	ldr	r0, [r3, #0]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	6899      	ldr	r1, [r3, #8]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	f000 fc95 	bl	800a688 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	609a      	str	r2, [r3, #8]
      break;
 8009d76:	e04f      	b.n	8009e18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6818      	ldr	r0, [r3, #0]
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	6899      	ldr	r1, [r3, #8]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	685a      	ldr	r2, [r3, #4]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	f000 fc7e 	bl	800a688 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	689a      	ldr	r2, [r3, #8]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d9a:	609a      	str	r2, [r3, #8]
      break;
 8009d9c:	e03c      	b.n	8009e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6818      	ldr	r0, [r3, #0]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	6859      	ldr	r1, [r3, #4]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	461a      	mov	r2, r3
 8009dac:	f000 fbf2 	bl	800a594 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2150      	movs	r1, #80	; 0x50
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 fc4b 	bl	800a652 <TIM_ITRx_SetConfig>
      break;
 8009dbc:	e02c      	b.n	8009e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6818      	ldr	r0, [r3, #0]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	6859      	ldr	r1, [r3, #4]
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	f000 fc11 	bl	800a5f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2160      	movs	r1, #96	; 0x60
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f000 fc3b 	bl	800a652 <TIM_ITRx_SetConfig>
      break;
 8009ddc:	e01c      	b.n	8009e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6818      	ldr	r0, [r3, #0]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	6859      	ldr	r1, [r3, #4]
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	461a      	mov	r2, r3
 8009dec:	f000 fbd2 	bl	800a594 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2140      	movs	r1, #64	; 0x40
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 fc2b 	bl	800a652 <TIM_ITRx_SetConfig>
      break;
 8009dfc:	e00c      	b.n	8009e18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4619      	mov	r1, r3
 8009e08:	4610      	mov	r0, r2
 8009e0a:	f000 fc22 	bl	800a652 <TIM_ITRx_SetConfig>
      break;
 8009e0e:	e003      	b.n	8009e18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	73fb      	strb	r3, [r7, #15]
      break;
 8009e14:	e000      	b.n	8009e18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009e16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b083      	sub	sp, #12
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009e3a:	bf00      	nop
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b083      	sub	sp, #12
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e4e:	bf00      	nop
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b083      	sub	sp, #12
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e62:	bf00      	nop
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009e76:	bf00      	nop
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b083      	sub	sp, #12
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e8a:	bf00      	nop
 8009e8c:	370c      	adds	r7, #12
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b083      	sub	sp, #12
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009e9e:	bf00      	nop
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009eaa:	b480      	push	{r7}
 8009eac:	b083      	sub	sp, #12
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009eb2:	bf00      	nop
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b083      	sub	sp, #12
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009ec6:	bf00      	nop
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b083      	sub	sp, #12
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009eda:	bf00      	nop
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
	...

08009ee8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b087      	sub	sp, #28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e135      	b.n	800a170 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d101      	bne.n	8009f12 <HAL_TIM_RegisterCallback+0x2a>
 8009f0e:	2302      	movs	r3, #2
 8009f10:	e12e      	b.n	800a170 <HAL_TIM_RegisterCallback+0x288>
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	f040 80ba 	bne.w	800a09c <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8009f28:	7afb      	ldrb	r3, [r7, #11]
 8009f2a:	2b1a      	cmp	r3, #26
 8009f2c:	f200 80b3 	bhi.w	800a096 <HAL_TIM_RegisterCallback+0x1ae>
 8009f30:	a201      	add	r2, pc, #4	; (adr r2, 8009f38 <HAL_TIM_RegisterCallback+0x50>)
 8009f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f36:	bf00      	nop
 8009f38:	08009fa5 	.word	0x08009fa5
 8009f3c:	08009fad 	.word	0x08009fad
 8009f40:	08009fb5 	.word	0x08009fb5
 8009f44:	08009fbd 	.word	0x08009fbd
 8009f48:	08009fc5 	.word	0x08009fc5
 8009f4c:	08009fcd 	.word	0x08009fcd
 8009f50:	08009fd5 	.word	0x08009fd5
 8009f54:	08009fdd 	.word	0x08009fdd
 8009f58:	08009fe5 	.word	0x08009fe5
 8009f5c:	08009fed 	.word	0x08009fed
 8009f60:	08009ff5 	.word	0x08009ff5
 8009f64:	08009ffd 	.word	0x08009ffd
 8009f68:	0800a005 	.word	0x0800a005
 8009f6c:	0800a00d 	.word	0x0800a00d
 8009f70:	0800a015 	.word	0x0800a015
 8009f74:	0800a01f 	.word	0x0800a01f
 8009f78:	0800a029 	.word	0x0800a029
 8009f7c:	0800a033 	.word	0x0800a033
 8009f80:	0800a03d 	.word	0x0800a03d
 8009f84:	0800a047 	.word	0x0800a047
 8009f88:	0800a051 	.word	0x0800a051
 8009f8c:	0800a05b 	.word	0x0800a05b
 8009f90:	0800a065 	.word	0x0800a065
 8009f94:	0800a06f 	.word	0x0800a06f
 8009f98:	0800a079 	.word	0x0800a079
 8009f9c:	0800a083 	.word	0x0800a083
 8009fa0:	0800a08d 	.word	0x0800a08d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009faa:	e0dc      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009fb2:	e0d8      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009fba:	e0d4      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009fc2:	e0d0      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009fca:	e0cc      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009fd2:	e0c8      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009fda:	e0c4      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009fe2:	e0c0      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009fea:	e0bc      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009ff2:	e0b8      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009ffa:	e0b4      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a002:	e0b0      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a00a:	e0ac      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a012:	e0a8      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800a01c:	e0a3      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800a026:	e09e      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800a030:	e099      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800a03a:	e094      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800a044:	e08f      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800a04e:	e08a      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800a058:	e085      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800a062:	e080      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800a06c:	e07b      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800a076:	e076      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800a080:	e071      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800a08a:	e06c      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800a094:	e067      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	75fb      	strb	r3, [r7, #23]
        break;
 800a09a:	e064      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d15c      	bne.n	800a162 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800a0a8:	7afb      	ldrb	r3, [r7, #11]
 800a0aa:	2b0d      	cmp	r3, #13
 800a0ac:	d856      	bhi.n	800a15c <HAL_TIM_RegisterCallback+0x274>
 800a0ae:	a201      	add	r2, pc, #4	; (adr r2, 800a0b4 <HAL_TIM_RegisterCallback+0x1cc>)
 800a0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b4:	0800a0ed 	.word	0x0800a0ed
 800a0b8:	0800a0f5 	.word	0x0800a0f5
 800a0bc:	0800a0fd 	.word	0x0800a0fd
 800a0c0:	0800a105 	.word	0x0800a105
 800a0c4:	0800a10d 	.word	0x0800a10d
 800a0c8:	0800a115 	.word	0x0800a115
 800a0cc:	0800a11d 	.word	0x0800a11d
 800a0d0:	0800a125 	.word	0x0800a125
 800a0d4:	0800a12d 	.word	0x0800a12d
 800a0d8:	0800a135 	.word	0x0800a135
 800a0dc:	0800a13d 	.word	0x0800a13d
 800a0e0:	0800a145 	.word	0x0800a145
 800a0e4:	0800a14d 	.word	0x0800a14d
 800a0e8:	0800a155 	.word	0x0800a155
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a0f2:	e038      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a0fa:	e034      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a102:	e030      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a10a:	e02c      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a112:	e028      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a11a:	e024      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a122:	e020      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a12a:	e01c      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a132:	e018      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a13a:	e014      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a142:	e010      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a14a:	e00c      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a152:	e008      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a15a:	e004      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	75fb      	strb	r3, [r7, #23]
        break;
 800a160:	e001      	b.n	800a166 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a170:	4618      	mov	r0, r3
 800a172:	371c      	adds	r7, #28
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4a34      	ldr	r2, [pc, #208]	; (800a260 <TIM_Base_SetConfig+0xe4>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d00f      	beq.n	800a1b4 <TIM_Base_SetConfig+0x38>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a19a:	d00b      	beq.n	800a1b4 <TIM_Base_SetConfig+0x38>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a31      	ldr	r2, [pc, #196]	; (800a264 <TIM_Base_SetConfig+0xe8>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d007      	beq.n	800a1b4 <TIM_Base_SetConfig+0x38>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a30      	ldr	r2, [pc, #192]	; (800a268 <TIM_Base_SetConfig+0xec>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d003      	beq.n	800a1b4 <TIM_Base_SetConfig+0x38>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a2f      	ldr	r2, [pc, #188]	; (800a26c <TIM_Base_SetConfig+0xf0>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d108      	bne.n	800a1c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a25      	ldr	r2, [pc, #148]	; (800a260 <TIM_Base_SetConfig+0xe4>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d01b      	beq.n	800a206 <TIM_Base_SetConfig+0x8a>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d4:	d017      	beq.n	800a206 <TIM_Base_SetConfig+0x8a>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a22      	ldr	r2, [pc, #136]	; (800a264 <TIM_Base_SetConfig+0xe8>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d013      	beq.n	800a206 <TIM_Base_SetConfig+0x8a>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a21      	ldr	r2, [pc, #132]	; (800a268 <TIM_Base_SetConfig+0xec>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d00f      	beq.n	800a206 <TIM_Base_SetConfig+0x8a>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a20      	ldr	r2, [pc, #128]	; (800a26c <TIM_Base_SetConfig+0xf0>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d00b      	beq.n	800a206 <TIM_Base_SetConfig+0x8a>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a1f      	ldr	r2, [pc, #124]	; (800a270 <TIM_Base_SetConfig+0xf4>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d007      	beq.n	800a206 <TIM_Base_SetConfig+0x8a>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a1e      	ldr	r2, [pc, #120]	; (800a274 <TIM_Base_SetConfig+0xf8>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d003      	beq.n	800a206 <TIM_Base_SetConfig+0x8a>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a1d      	ldr	r2, [pc, #116]	; (800a278 <TIM_Base_SetConfig+0xfc>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d108      	bne.n	800a218 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a20c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	4313      	orrs	r3, r2
 800a216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	695b      	ldr	r3, [r3, #20]
 800a222:	4313      	orrs	r3, r2
 800a224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a08      	ldr	r2, [pc, #32]	; (800a260 <TIM_Base_SetConfig+0xe4>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d103      	bne.n	800a24c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	691a      	ldr	r2, [r3, #16]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2201      	movs	r2, #1
 800a250:	615a      	str	r2, [r3, #20]
}
 800a252:	bf00      	nop
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	40010000 	.word	0x40010000
 800a264:	40000400 	.word	0x40000400
 800a268:	40000800 	.word	0x40000800
 800a26c:	40000c00 	.word	0x40000c00
 800a270:	40014000 	.word	0x40014000
 800a274:	40014400 	.word	0x40014400
 800a278:	40014800 	.word	0x40014800

0800a27c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b087      	sub	sp, #28
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	f023 0201 	bic.w	r2, r3, #1
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	699b      	ldr	r3, [r3, #24]
 800a2a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f023 0303 	bic.w	r3, r3, #3
 800a2b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	f023 0302 	bic.w	r3, r3, #2
 800a2c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a1c      	ldr	r2, [pc, #112]	; (800a344 <TIM_OC1_SetConfig+0xc8>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d10c      	bne.n	800a2f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	f023 0308 	bic.w	r3, r3, #8
 800a2de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f023 0304 	bic.w	r3, r3, #4
 800a2f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a13      	ldr	r2, [pc, #76]	; (800a344 <TIM_OC1_SetConfig+0xc8>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d111      	bne.n	800a31e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	693a      	ldr	r2, [r7, #16]
 800a310:	4313      	orrs	r3, r2
 800a312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	693a      	ldr	r2, [r7, #16]
 800a322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	697a      	ldr	r2, [r7, #20]
 800a336:	621a      	str	r2, [r3, #32]
}
 800a338:	bf00      	nop
 800a33a:	371c      	adds	r7, #28
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	40010000 	.word	0x40010000

0800a348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a348:	b480      	push	{r7}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a1b      	ldr	r3, [r3, #32]
 800a356:	f023 0210 	bic.w	r2, r3, #16
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a1b      	ldr	r3, [r3, #32]
 800a362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a37e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	021b      	lsls	r3, r3, #8
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	4313      	orrs	r3, r2
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f023 0320 	bic.w	r3, r3, #32
 800a392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	011b      	lsls	r3, r3, #4
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a1e      	ldr	r2, [pc, #120]	; (800a41c <TIM_OC2_SetConfig+0xd4>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d10d      	bne.n	800a3c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	011b      	lsls	r3, r3, #4
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a15      	ldr	r2, [pc, #84]	; (800a41c <TIM_OC2_SetConfig+0xd4>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d113      	bne.n	800a3f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	695b      	ldr	r3, [r3, #20]
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	693a      	ldr	r2, [r7, #16]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	621a      	str	r2, [r3, #32]
}
 800a40e:	bf00      	nop
 800a410:	371c      	adds	r7, #28
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	40010000 	.word	0x40010000

0800a420 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a420:	b480      	push	{r7}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a1b      	ldr	r3, [r3, #32]
 800a43a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	69db      	ldr	r3, [r3, #28]
 800a446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a44e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f023 0303 	bic.w	r3, r3, #3
 800a456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	4313      	orrs	r3, r2
 800a460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	021b      	lsls	r3, r3, #8
 800a470:	697a      	ldr	r2, [r7, #20]
 800a472:	4313      	orrs	r3, r2
 800a474:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4a1d      	ldr	r2, [pc, #116]	; (800a4f0 <TIM_OC3_SetConfig+0xd0>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d10d      	bne.n	800a49a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a484:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	021b      	lsls	r3, r3, #8
 800a48c:	697a      	ldr	r2, [r7, #20]
 800a48e:	4313      	orrs	r3, r2
 800a490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a14      	ldr	r2, [pc, #80]	; (800a4f0 <TIM_OC3_SetConfig+0xd0>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d113      	bne.n	800a4ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	011b      	lsls	r3, r3, #4
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	011b      	lsls	r3, r3, #4
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	693a      	ldr	r2, [r7, #16]
 800a4ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	685a      	ldr	r2, [r3, #4]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	621a      	str	r2, [r3, #32]
}
 800a4e4:	bf00      	nop
 800a4e6:	371c      	adds	r7, #28
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr
 800a4f0:	40010000 	.word	0x40010000

0800a4f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b087      	sub	sp, #28
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	69db      	ldr	r3, [r3, #28]
 800a51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a52a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	021b      	lsls	r3, r3, #8
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	4313      	orrs	r3, r2
 800a536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a53e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	031b      	lsls	r3, r3, #12
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	4313      	orrs	r3, r2
 800a54a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a10      	ldr	r2, [pc, #64]	; (800a590 <TIM_OC4_SetConfig+0x9c>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d109      	bne.n	800a568 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a55a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	695b      	ldr	r3, [r3, #20]
 800a560:	019b      	lsls	r3, r3, #6
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	4313      	orrs	r3, r2
 800a566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	685a      	ldr	r2, [r3, #4]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	621a      	str	r2, [r3, #32]
}
 800a582:	bf00      	nop
 800a584:	371c      	adds	r7, #28
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	40010000 	.word	0x40010000

0800a594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6a1b      	ldr	r3, [r3, #32]
 800a5a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	f023 0201 	bic.w	r2, r3, #1
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	011b      	lsls	r3, r3, #4
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f023 030a 	bic.w	r3, r3, #10
 800a5d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	621a      	str	r2, [r3, #32]
}
 800a5e6:	bf00      	nop
 800a5e8:	371c      	adds	r7, #28
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b087      	sub	sp, #28
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	60f8      	str	r0, [r7, #12]
 800a5fa:	60b9      	str	r1, [r7, #8]
 800a5fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6a1b      	ldr	r3, [r3, #32]
 800a602:	f023 0210 	bic.w	r2, r3, #16
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	699b      	ldr	r3, [r3, #24]
 800a60e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6a1b      	ldr	r3, [r3, #32]
 800a614:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a61c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	031b      	lsls	r3, r3, #12
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	4313      	orrs	r3, r2
 800a626:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a62e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	011b      	lsls	r3, r3, #4
 800a634:	693a      	ldr	r2, [r7, #16]
 800a636:	4313      	orrs	r3, r2
 800a638:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	697a      	ldr	r2, [r7, #20]
 800a63e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	621a      	str	r2, [r3, #32]
}
 800a646:	bf00      	nop
 800a648:	371c      	adds	r7, #28
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr

0800a652 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a652:	b480      	push	{r7}
 800a654:	b085      	sub	sp, #20
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
 800a65a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a66a:	683a      	ldr	r2, [r7, #0]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	4313      	orrs	r3, r2
 800a670:	f043 0307 	orr.w	r3, r3, #7
 800a674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	609a      	str	r2, [r3, #8]
}
 800a67c:	bf00      	nop
 800a67e:	3714      	adds	r7, #20
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a688:	b480      	push	{r7}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
 800a694:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	021a      	lsls	r2, r3, #8
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	697a      	ldr	r2, [r7, #20]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	697a      	ldr	r2, [r7, #20]
 800a6ba:	609a      	str	r2, [r3, #8]
}
 800a6bc:	bf00      	nop
 800a6be:	371c      	adds	r7, #28
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	f003 031f 	and.w	r3, r3, #31
 800a6da:	2201      	movs	r2, #1
 800a6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	6a1a      	ldr	r2, [r3, #32]
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	43db      	mvns	r3, r3
 800a6ea:	401a      	ands	r2, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6a1a      	ldr	r2, [r3, #32]
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	f003 031f 	and.w	r3, r3, #31
 800a6fa:	6879      	ldr	r1, [r7, #4]
 800a6fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a700:	431a      	orrs	r2, r3
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	621a      	str	r2, [r3, #32]
}
 800a706:	bf00      	nop
 800a708:	371c      	adds	r7, #28
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
	...

0800a714 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a1c      	ldr	r2, [pc, #112]	; (800a790 <TIM_ResetCallback+0x7c>)
 800a720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a1b      	ldr	r2, [pc, #108]	; (800a794 <TIM_ResetCallback+0x80>)
 800a728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a1a      	ldr	r2, [pc, #104]	; (800a798 <TIM_ResetCallback+0x84>)
 800a730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4a19      	ldr	r2, [pc, #100]	; (800a79c <TIM_ResetCallback+0x88>)
 800a738:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a18      	ldr	r2, [pc, #96]	; (800a7a0 <TIM_ResetCallback+0x8c>)
 800a740:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a17      	ldr	r2, [pc, #92]	; (800a7a4 <TIM_ResetCallback+0x90>)
 800a748:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a16      	ldr	r2, [pc, #88]	; (800a7a8 <TIM_ResetCallback+0x94>)
 800a750:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a15      	ldr	r2, [pc, #84]	; (800a7ac <TIM_ResetCallback+0x98>)
 800a758:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a14      	ldr	r2, [pc, #80]	; (800a7b0 <TIM_ResetCallback+0x9c>)
 800a760:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a13      	ldr	r2, [pc, #76]	; (800a7b4 <TIM_ResetCallback+0xa0>)
 800a768:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a12      	ldr	r2, [pc, #72]	; (800a7b8 <TIM_ResetCallback+0xa4>)
 800a770:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a11      	ldr	r2, [pc, #68]	; (800a7bc <TIM_ResetCallback+0xa8>)
 800a778:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a10      	ldr	r2, [pc, #64]	; (800a7c0 <TIM_ResetCallback+0xac>)
 800a780:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	08001f21 	.word	0x08001f21
 800a794:	08009e33 	.word	0x08009e33
 800a798:	08009eab 	.word	0x08009eab
 800a79c:	08009ebf 	.word	0x08009ebf
 800a7a0:	08009e5b 	.word	0x08009e5b
 800a7a4:	08009e6f 	.word	0x08009e6f
 800a7a8:	08009e47 	.word	0x08009e47
 800a7ac:	08009e83 	.word	0x08009e83
 800a7b0:	08009e97 	.word	0x08009e97
 800a7b4:	08009ed3 	.word	0x08009ed3
 800a7b8:	0800a945 	.word	0x0800a945
 800a7bc:	0800a959 	.word	0x0800a959
 800a7c0:	0800a96d 	.word	0x0800a96d

0800a7c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d101      	bne.n	800a7dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7d8:	2302      	movs	r3, #2
 800a7da:	e050      	b.n	800a87e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a1c      	ldr	r2, [pc, #112]	; (800a88c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d018      	beq.n	800a852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a828:	d013      	beq.n	800a852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a18      	ldr	r2, [pc, #96]	; (800a890 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d00e      	beq.n	800a852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a16      	ldr	r2, [pc, #88]	; (800a894 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d009      	beq.n	800a852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a15      	ldr	r2, [pc, #84]	; (800a898 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d004      	beq.n	800a852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a13      	ldr	r2, [pc, #76]	; (800a89c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d10c      	bne.n	800a86c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	4313      	orrs	r3, r2
 800a862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3714      	adds	r7, #20
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	40010000 	.word	0x40010000
 800a890:	40000400 	.word	0x40000400
 800a894:	40000800 	.word	0x40000800
 800a898:	40000c00 	.word	0x40000c00
 800a89c:	40014000 	.word	0x40014000

0800a8a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d101      	bne.n	800a8bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	e03d      	b.n	800a938 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	4313      	orrs	r3, r2
 800a908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	695b      	ldr	r3, [r3, #20]
 800a914:	4313      	orrs	r3, r2
 800a916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	4313      	orrs	r3, r2
 800a924:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a94c:	bf00      	nop
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d101      	bne.n	800a992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e04a      	b.n	800aa28 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d111      	bne.n	800a9c2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fd2c 	bl	800b404 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d102      	bne.n	800a9ba <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a1e      	ldr	r2, [pc, #120]	; (800aa30 <HAL_UART_Init+0xb0>)
 800a9b8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2224      	movs	r2, #36	; 0x24
 800a9c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68da      	ldr	r2, [r3, #12]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a9d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fff6 	bl	800b9cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	691a      	ldr	r2, [r3, #16]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a9ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	695a      	ldr	r2, [r3, #20]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a9fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	68da      	ldr	r2, [r3, #12]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa0e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2200      	movs	r2, #0
 800aa14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2220      	movs	r2, #32
 800aa1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2220      	movs	r2, #32
 800aa22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}
 800aa30:	08004311 	.word	0x08004311

0800aa34 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b087      	sub	sp, #28
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	607a      	str	r2, [r7, #4]
 800aa40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d107      	bne.n	800aa5c <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa50:	f043 0220 	orr.w	r2, r3, #32
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e08c      	b.n	800ab76 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d101      	bne.n	800aa6a <HAL_UART_RegisterCallback+0x36>
 800aa66:	2302      	movs	r3, #2
 800aa68:	e085      	b.n	800ab76 <HAL_UART_RegisterCallback+0x142>
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2b20      	cmp	r3, #32
 800aa7c:	d151      	bne.n	800ab22 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800aa7e:	7afb      	ldrb	r3, [r7, #11]
 800aa80:	2b0c      	cmp	r3, #12
 800aa82:	d845      	bhi.n	800ab10 <HAL_UART_RegisterCallback+0xdc>
 800aa84:	a201      	add	r2, pc, #4	; (adr r2, 800aa8c <HAL_UART_RegisterCallback+0x58>)
 800aa86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8a:	bf00      	nop
 800aa8c:	0800aac1 	.word	0x0800aac1
 800aa90:	0800aac9 	.word	0x0800aac9
 800aa94:	0800aad1 	.word	0x0800aad1
 800aa98:	0800aad9 	.word	0x0800aad9
 800aa9c:	0800aae1 	.word	0x0800aae1
 800aaa0:	0800aae9 	.word	0x0800aae9
 800aaa4:	0800aaf1 	.word	0x0800aaf1
 800aaa8:	0800aaf9 	.word	0x0800aaf9
 800aaac:	0800ab11 	.word	0x0800ab11
 800aab0:	0800ab11 	.word	0x0800ab11
 800aab4:	0800ab11 	.word	0x0800ab11
 800aab8:	0800ab01 	.word	0x0800ab01
 800aabc:	0800ab09 	.word	0x0800ab09
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800aac6:	e051      	b.n	800ab6c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800aace:	e04d      	b.n	800ab6c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800aad6:	e049      	b.n	800ab6c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800aade:	e045      	b.n	800ab6c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800aae6:	e041      	b.n	800ab6c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800aaee:	e03d      	b.n	800ab6c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800aaf6:	e039      	b.n	800ab6c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800aafe:	e035      	b.n	800ab6c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800ab06:	e031      	b.n	800ab6c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800ab0e:	e02d      	b.n	800ab6c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab14:	f043 0220 	orr.w	r2, r3, #32
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	75fb      	strb	r3, [r7, #23]
        break;
 800ab20:	e024      	b.n	800ab6c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d116      	bne.n	800ab5c <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800ab2e:	7afb      	ldrb	r3, [r7, #11]
 800ab30:	2b0b      	cmp	r3, #11
 800ab32:	d002      	beq.n	800ab3a <HAL_UART_RegisterCallback+0x106>
 800ab34:	2b0c      	cmp	r3, #12
 800ab36:	d004      	beq.n	800ab42 <HAL_UART_RegisterCallback+0x10e>
 800ab38:	e007      	b.n	800ab4a <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800ab40:	e014      	b.n	800ab6c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800ab48:	e010      	b.n	800ab6c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4e:	f043 0220 	orr.w	r2, r3, #32
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	75fb      	strb	r3, [r7, #23]
        break;
 800ab5a:	e007      	b.n	800ab6c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab60:	f043 0220 	orr.w	r2, r3, #32
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	371c      	adds	r7, #28
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop

0800ab84 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	2b20      	cmp	r3, #32
 800ab9c:	d11d      	bne.n	800abda <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d002      	beq.n	800abaa <HAL_UART_Receive_IT+0x26>
 800aba4:	88fb      	ldrh	r3, [r7, #6]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d101      	bne.n	800abae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e016      	b.n	800abdc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d101      	bne.n	800abbc <HAL_UART_Receive_IT+0x38>
 800abb8:	2302      	movs	r3, #2
 800abba:	e00f      	b.n	800abdc <HAL_UART_Receive_IT+0x58>
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2200      	movs	r2, #0
 800abc8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800abca:	88fb      	ldrh	r3, [r7, #6]
 800abcc:	461a      	mov	r2, r3
 800abce:	68b9      	ldr	r1, [r7, #8]
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f000 fcf7 	bl	800b5c4 <UART_Start_Receive_IT>
 800abd6:	4603      	mov	r3, r0
 800abd8:	e000      	b.n	800abdc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800abda:	2302      	movs	r3, #2
  }
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b08c      	sub	sp, #48	; 0x30
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	4613      	mov	r3, r2
 800abf0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b20      	cmp	r3, #32
 800abfc:	d165      	bne.n	800acca <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d002      	beq.n	800ac0a <HAL_UART_Transmit_DMA+0x26>
 800ac04:	88fb      	ldrh	r3, [r7, #6]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d101      	bne.n	800ac0e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e05e      	b.n	800accc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d101      	bne.n	800ac1c <HAL_UART_Transmit_DMA+0x38>
 800ac18:	2302      	movs	r3, #2
 800ac1a:	e057      	b.n	800accc <HAL_UART_Transmit_DMA+0xe8>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	88fa      	ldrh	r2, [r7, #6]
 800ac2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	88fa      	ldrh	r2, [r7, #6]
 800ac34:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2221      	movs	r2, #33	; 0x21
 800ac40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac48:	4a22      	ldr	r2, [pc, #136]	; (800acd4 <HAL_UART_Transmit_DMA+0xf0>)
 800ac4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac50:	4a21      	ldr	r2, [pc, #132]	; (800acd8 <HAL_UART_Transmit_DMA+0xf4>)
 800ac52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac58:	4a20      	ldr	r2, [pc, #128]	; (800acdc <HAL_UART_Transmit_DMA+0xf8>)
 800ac5a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac60:	2200      	movs	r2, #0
 800ac62:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ac64:	f107 0308 	add.w	r3, r7, #8
 800ac68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ac6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac70:	6819      	ldr	r1, [r3, #0]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	3304      	adds	r3, #4
 800ac78:	461a      	mov	r2, r3
 800ac7a:	88fb      	ldrh	r3, [r7, #6]
 800ac7c:	f7fa fadc 	bl	8005238 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac88:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	3314      	adds	r3, #20
 800ac98:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	e853 3f00 	ldrex	r3, [r3]
 800aca0:	617b      	str	r3, [r7, #20]
   return(result);
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca8:	62bb      	str	r3, [r7, #40]	; 0x28
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	3314      	adds	r3, #20
 800acb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acb2:	627a      	str	r2, [r7, #36]	; 0x24
 800acb4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb6:	6a39      	ldr	r1, [r7, #32]
 800acb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acba:	e841 2300 	strex	r3, r2, [r1]
 800acbe:	61fb      	str	r3, [r7, #28]
   return(result);
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1e5      	bne.n	800ac92 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	e000      	b.n	800accc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800acca:	2302      	movs	r3, #2
  }
}
 800accc:	4618      	mov	r0, r3
 800acce:	3730      	adds	r7, #48	; 0x30
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	0800b475 	.word	0x0800b475
 800acd8:	0800b511 	.word	0x0800b511
 800acdc:	0800b52f 	.word	0x0800b52f

0800ace0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b09a      	sub	sp, #104	; 0x68
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	330c      	adds	r3, #12
 800acee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acf2:	e853 3f00 	ldrex	r3, [r3]
 800acf6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800acf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800acfe:	667b      	str	r3, [r7, #100]	; 0x64
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	330c      	adds	r3, #12
 800ad06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ad08:	657a      	str	r2, [r7, #84]	; 0x54
 800ad0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad10:	e841 2300 	strex	r3, r2, [r1]
 800ad14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d1e5      	bne.n	800ace8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	3314      	adds	r3, #20
 800ad22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad26:	e853 3f00 	ldrex	r3, [r3]
 800ad2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2e:	f023 0301 	bic.w	r3, r3, #1
 800ad32:	663b      	str	r3, [r7, #96]	; 0x60
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	3314      	adds	r3, #20
 800ad3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad3c:	643a      	str	r2, [r7, #64]	; 0x40
 800ad3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad44:	e841 2300 	strex	r3, r2, [r1]
 800ad48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1e5      	bne.n	800ad1c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d119      	bne.n	800ad8c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	330c      	adds	r3, #12
 800ad5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad60:	6a3b      	ldr	r3, [r7, #32]
 800ad62:	e853 3f00 	ldrex	r3, [r3]
 800ad66:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	f023 0310 	bic.w	r3, r3, #16
 800ad6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	330c      	adds	r3, #12
 800ad76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad78:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad80:	e841 2300 	strex	r3, r2, [r1]
 800ad84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e5      	bne.n	800ad58 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	695b      	ldr	r3, [r3, #20]
 800ad92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad96:	2b40      	cmp	r3, #64	; 0x40
 800ad98:	d136      	bne.n	800ae08 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	3314      	adds	r3, #20
 800ada0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	e853 3f00 	ldrex	r3, [r3]
 800ada8:	60bb      	str	r3, [r7, #8]
   return(result);
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adb0:	65bb      	str	r3, [r7, #88]	; 0x58
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	3314      	adds	r3, #20
 800adb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800adba:	61ba      	str	r2, [r7, #24]
 800adbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adbe:	6979      	ldr	r1, [r7, #20]
 800adc0:	69ba      	ldr	r2, [r7, #24]
 800adc2:	e841 2300 	strex	r3, r2, [r1]
 800adc6:	613b      	str	r3, [r7, #16]
   return(result);
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1e5      	bne.n	800ad9a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add2:	2b00      	cmp	r3, #0
 800add4:	d018      	beq.n	800ae08 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adda:	2200      	movs	r2, #0
 800addc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fa fa80 	bl	80052e8 <HAL_DMA_Abort>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00c      	beq.n	800ae08 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fa fca2 	bl	800573c <HAL_DMA_GetError>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b20      	cmp	r3, #32
 800adfc:	d104      	bne.n	800ae08 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2210      	movs	r2, #16
 800ae02:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800ae04:	2303      	movs	r3, #3
 800ae06:	e00a      	b.n	800ae1e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2220      	movs	r2, #32
 800ae12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3768      	adds	r7, #104	; 0x68
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
	...

0800ae28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b0ba      	sub	sp, #232	; 0xe8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	695b      	ldr	r3, [r3, #20]
 800ae4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ae54:	2300      	movs	r3, #0
 800ae56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae5e:	f003 030f 	and.w	r3, r3, #15
 800ae62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ae66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10f      	bne.n	800ae8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae72:	f003 0320 	and.w	r3, r3, #32
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d009      	beq.n	800ae8e <HAL_UART_IRQHandler+0x66>
 800ae7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae7e:	f003 0320 	and.w	r3, r3, #32
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d003      	beq.n	800ae8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fce3 	bl	800b852 <UART_Receive_IT>
      return;
 800ae8c:	e25b      	b.n	800b346 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ae8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f000 80e1 	beq.w	800b05a <HAL_UART_IRQHandler+0x232>
 800ae98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae9c:	f003 0301 	and.w	r3, r3, #1
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d106      	bne.n	800aeb2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aea8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f000 80d4 	beq.w	800b05a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aeb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeb6:	f003 0301 	and.w	r3, r3, #1
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00b      	beq.n	800aed6 <HAL_UART_IRQHandler+0xae>
 800aebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d005      	beq.n	800aed6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	f043 0201 	orr.w	r2, r3, #1
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeda:	f003 0304 	and.w	r3, r3, #4
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00b      	beq.n	800aefa <HAL_UART_IRQHandler+0xd2>
 800aee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aee6:	f003 0301 	and.w	r3, r3, #1
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d005      	beq.n	800aefa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef2:	f043 0202 	orr.w	r2, r3, #2
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aefa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aefe:	f003 0302 	and.w	r3, r3, #2
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00b      	beq.n	800af1e <HAL_UART_IRQHandler+0xf6>
 800af06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af0a:	f003 0301 	and.w	r3, r3, #1
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d005      	beq.n	800af1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af16:	f043 0204 	orr.w	r2, r3, #4
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800af1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af22:	f003 0308 	and.w	r3, r3, #8
 800af26:	2b00      	cmp	r3, #0
 800af28:	d011      	beq.n	800af4e <HAL_UART_IRQHandler+0x126>
 800af2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af2e:	f003 0320 	and.w	r3, r3, #32
 800af32:	2b00      	cmp	r3, #0
 800af34:	d105      	bne.n	800af42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800af36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af3a:	f003 0301 	and.w	r3, r3, #1
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d005      	beq.n	800af4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af46:	f043 0208 	orr.w	r2, r3, #8
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af52:	2b00      	cmp	r3, #0
 800af54:	f000 81f2 	beq.w	800b33c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af5c:	f003 0320 	and.w	r3, r3, #32
 800af60:	2b00      	cmp	r3, #0
 800af62:	d008      	beq.n	800af76 <HAL_UART_IRQHandler+0x14e>
 800af64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af68:	f003 0320 	and.w	r3, r3, #32
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fc6e 	bl	800b852 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	695b      	ldr	r3, [r3, #20]
 800af7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af80:	2b40      	cmp	r3, #64	; 0x40
 800af82:	bf0c      	ite	eq
 800af84:	2301      	moveq	r3, #1
 800af86:	2300      	movne	r3, #0
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af92:	f003 0308 	and.w	r3, r3, #8
 800af96:	2b00      	cmp	r3, #0
 800af98:	d103      	bne.n	800afa2 <HAL_UART_IRQHandler+0x17a>
 800af9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d051      	beq.n	800b046 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 fb74 	bl	800b690 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	695b      	ldr	r3, [r3, #20]
 800afae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb2:	2b40      	cmp	r3, #64	; 0x40
 800afb4:	d142      	bne.n	800b03c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	3314      	adds	r3, #20
 800afbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800afc4:	e853 3f00 	ldrex	r3, [r3]
 800afc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800afcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800afd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	3314      	adds	r3, #20
 800afde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800afe2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800afe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800afee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aff2:	e841 2300 	strex	r3, r2, [r1]
 800aff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800affa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d1d9      	bne.n	800afb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b006:	2b00      	cmp	r3, #0
 800b008:	d013      	beq.n	800b032 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00e:	4a7f      	ldr	r2, [pc, #508]	; (800b20c <HAL_UART_IRQHandler+0x3e4>)
 800b010:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b016:	4618      	mov	r0, r3
 800b018:	f7fa f9d6 	bl	80053c8 <HAL_DMA_Abort_IT>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d019      	beq.n	800b056 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b02c:	4610      	mov	r0, r2
 800b02e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b030:	e011      	b.n	800b056 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b03a:	e00c      	b.n	800b056 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b044:	e007      	b.n	800b056 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b054:	e172      	b.n	800b33c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b056:	bf00      	nop
    return;
 800b058:	e170      	b.n	800b33c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b05e:	2b01      	cmp	r3, #1
 800b060:	f040 814c 	bne.w	800b2fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b068:	f003 0310 	and.w	r3, r3, #16
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f000 8145 	beq.w	800b2fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b076:	f003 0310 	and.w	r3, r3, #16
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f000 813e 	beq.w	800b2fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b080:	2300      	movs	r3, #0
 800b082:	60bb      	str	r3, [r7, #8]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	60bb      	str	r3, [r7, #8]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	60bb      	str	r3, [r7, #8]
 800b094:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	695b      	ldr	r3, [r3, #20]
 800b09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a0:	2b40      	cmp	r3, #64	; 0x40
 800b0a2:	f040 80b5 	bne.w	800b210 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f000 8142 	beq.w	800b340 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	f080 813b 	bcs.w	800b340 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b0d0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d6:	69db      	ldr	r3, [r3, #28]
 800b0d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0dc:	f000 8088 	beq.w	800b1f0 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	330c      	adds	r3, #12
 800b0e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0ee:	e853 3f00 	ldrex	r3, [r3]
 800b0f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b0f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	330c      	adds	r3, #12
 800b108:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b10c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b110:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b114:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b118:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b11c:	e841 2300 	strex	r3, r2, [r1]
 800b120:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b124:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1d9      	bne.n	800b0e0 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	3314      	adds	r3, #20
 800b132:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b136:	e853 3f00 	ldrex	r3, [r3]
 800b13a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b13c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b13e:	f023 0301 	bic.w	r3, r3, #1
 800b142:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	3314      	adds	r3, #20
 800b14c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b150:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b154:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b156:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b158:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b15c:	e841 2300 	strex	r3, r2, [r1]
 800b160:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b164:	2b00      	cmp	r3, #0
 800b166:	d1e1      	bne.n	800b12c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	3314      	adds	r3, #20
 800b16e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b172:	e853 3f00 	ldrex	r3, [r3]
 800b176:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b17a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b17e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	3314      	adds	r3, #20
 800b188:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b18c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b18e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b190:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b192:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b194:	e841 2300 	strex	r3, r2, [r1]
 800b198:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b19a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1e3      	bne.n	800b168 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2220      	movs	r2, #32
 800b1a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	330c      	adds	r3, #12
 800b1b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b8:	e853 3f00 	ldrex	r3, [r3]
 800b1bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b1be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1c0:	f023 0310 	bic.w	r3, r3, #16
 800b1c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	330c      	adds	r3, #12
 800b1ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b1d2:	65ba      	str	r2, [r7, #88]	; 0x58
 800b1d4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1da:	e841 2300 	strex	r3, r2, [r1]
 800b1de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b1e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d1e3      	bne.n	800b1ae <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fa f87c 	bl	80052e8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b1fc:	b292      	uxth	r2, r2
 800b1fe:	1a8a      	subs	r2, r1, r2
 800b200:	b292      	uxth	r2, r2
 800b202:	4611      	mov	r1, r2
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b208:	e09a      	b.n	800b340 <HAL_UART_IRQHandler+0x518>
 800b20a:	bf00      	nop
 800b20c:	0800b757 	.word	0x0800b757
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b218:	b29b      	uxth	r3, r3
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b224:	b29b      	uxth	r3, r3
 800b226:	2b00      	cmp	r3, #0
 800b228:	f000 808c 	beq.w	800b344 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b22c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 8087 	beq.w	800b344 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	330c      	adds	r3, #12
 800b23c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b240:	e853 3f00 	ldrex	r3, [r3]
 800b244:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b248:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b24c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	330c      	adds	r3, #12
 800b256:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b25a:	647a      	str	r2, [r7, #68]	; 0x44
 800b25c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b260:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b262:	e841 2300 	strex	r3, r2, [r1]
 800b266:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1e3      	bne.n	800b236 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3314      	adds	r3, #20
 800b274:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	e853 3f00 	ldrex	r3, [r3]
 800b27c:	623b      	str	r3, [r7, #32]
   return(result);
 800b27e:	6a3b      	ldr	r3, [r7, #32]
 800b280:	f023 0301 	bic.w	r3, r3, #1
 800b284:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	3314      	adds	r3, #20
 800b28e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b292:	633a      	str	r2, [r7, #48]	; 0x30
 800b294:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b296:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b29a:	e841 2300 	strex	r3, r2, [r1]
 800b29e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1e3      	bne.n	800b26e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2220      	movs	r2, #32
 800b2aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	330c      	adds	r3, #12
 800b2ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	e853 3f00 	ldrex	r3, [r3]
 800b2c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f023 0310 	bic.w	r3, r3, #16
 800b2ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	330c      	adds	r3, #12
 800b2d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b2d8:	61fa      	str	r2, [r7, #28]
 800b2da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2dc:	69b9      	ldr	r1, [r7, #24]
 800b2de:	69fa      	ldr	r2, [r7, #28]
 800b2e0:	e841 2300 	strex	r3, r2, [r1]
 800b2e4:	617b      	str	r3, [r7, #20]
   return(result);
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1e3      	bne.n	800b2b4 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2f0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b2fa:	e023      	b.n	800b344 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b304:	2b00      	cmp	r3, #0
 800b306:	d009      	beq.n	800b31c <HAL_UART_IRQHandler+0x4f4>
 800b308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b30c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b310:	2b00      	cmp	r3, #0
 800b312:	d003      	beq.n	800b31c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 fa33 	bl	800b780 <UART_Transmit_IT>
    return;
 800b31a:	e014      	b.n	800b346 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b31c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00e      	beq.n	800b346 <HAL_UART_IRQHandler+0x51e>
 800b328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b330:	2b00      	cmp	r3, #0
 800b332:	d008      	beq.n	800b346 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 fa73 	bl	800b820 <UART_EndTransmit_IT>
    return;
 800b33a:	e004      	b.n	800b346 <HAL_UART_IRQHandler+0x51e>
    return;
 800b33c:	bf00      	nop
 800b33e:	e002      	b.n	800b346 <HAL_UART_IRQHandler+0x51e>
      return;
 800b340:	bf00      	nop
 800b342:	e000      	b.n	800b346 <HAL_UART_IRQHandler+0x51e>
      return;
 800b344:	bf00      	nop
  }
}
 800b346:	37e8      	adds	r7, #232	; 0xe8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b354:	bf00      	nop
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b368:	bf00      	nop
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b372:	4770      	bx	lr

0800b374 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b37c:	bf00      	nop
 800b37e:	370c      	adds	r7, #12
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b390:	bf00      	nop
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b3a4:	bf00      	nop
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b3b8:	bf00      	nop
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b3cc:	bf00      	nop
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a10      	ldr	r2, [pc, #64]	; (800b450 <UART_InitCallbacksToDefault+0x4c>)
 800b410:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4a0f      	ldr	r2, [pc, #60]	; (800b454 <UART_InitCallbacksToDefault+0x50>)
 800b416:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4a0f      	ldr	r2, [pc, #60]	; (800b458 <UART_InitCallbacksToDefault+0x54>)
 800b41c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4a0e      	ldr	r2, [pc, #56]	; (800b45c <UART_InitCallbacksToDefault+0x58>)
 800b422:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4a0e      	ldr	r2, [pc, #56]	; (800b460 <UART_InitCallbacksToDefault+0x5c>)
 800b428:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a0d      	ldr	r2, [pc, #52]	; (800b464 <UART_InitCallbacksToDefault+0x60>)
 800b42e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4a0d      	ldr	r2, [pc, #52]	; (800b468 <UART_InitCallbacksToDefault+0x64>)
 800b434:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a0c      	ldr	r2, [pc, #48]	; (800b46c <UART_InitCallbacksToDefault+0x68>)
 800b43a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a0c      	ldr	r2, [pc, #48]	; (800b470 <UART_InitCallbacksToDefault+0x6c>)
 800b440:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b442:	bf00      	nop
 800b444:	370c      	adds	r7, #12
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	0800b361 	.word	0x0800b361
 800b454:	0800b34d 	.word	0x0800b34d
 800b458:	0800b389 	.word	0x0800b389
 800b45c:	0800b375 	.word	0x0800b375
 800b460:	0800b39d 	.word	0x0800b39d
 800b464:	0800b3b1 	.word	0x0800b3b1
 800b468:	0800b3c5 	.word	0x0800b3c5
 800b46c:	0800b3d9 	.word	0x0800b3d9
 800b470:	0800b3ed 	.word	0x0800b3ed

0800b474 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b090      	sub	sp, #64	; 0x40
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b480:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d137      	bne.n	800b500 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b492:	2200      	movs	r2, #0
 800b494:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	3314      	adds	r3, #20
 800b49c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a0:	e853 3f00 	ldrex	r3, [r3]
 800b4a4:	623b      	str	r3, [r7, #32]
   return(result);
 800b4a6:	6a3b      	ldr	r3, [r7, #32]
 800b4a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	3314      	adds	r3, #20
 800b4b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4b6:	633a      	str	r2, [r7, #48]	; 0x30
 800b4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4be:	e841 2300 	strex	r3, r2, [r1]
 800b4c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1e5      	bne.n	800b496 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b4ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	330c      	adds	r3, #12
 800b4d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	e853 3f00 	ldrex	r3, [r3]
 800b4d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4e0:	637b      	str	r3, [r7, #52]	; 0x34
 800b4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	330c      	adds	r3, #12
 800b4e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4ea:	61fa      	str	r2, [r7, #28]
 800b4ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ee:	69b9      	ldr	r1, [r7, #24]
 800b4f0:	69fa      	ldr	r2, [r7, #28]
 800b4f2:	e841 2300 	strex	r3, r2, [r1]
 800b4f6:	617b      	str	r3, [r7, #20]
   return(result);
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d1e5      	bne.n	800b4ca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b4fe:	e003      	b.n	800b508 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800b500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b504:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b506:	4798      	blx	r3
}
 800b508:	bf00      	nop
 800b50a:	3740      	adds	r7, #64	; 0x40
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b526:	bf00      	nop
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b084      	sub	sp, #16
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b536:	2300      	movs	r3, #0
 800b538:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b54a:	2b80      	cmp	r3, #128	; 0x80
 800b54c:	bf0c      	ite	eq
 800b54e:	2301      	moveq	r3, #1
 800b550:	2300      	movne	r3, #0
 800b552:	b2db      	uxtb	r3, r3
 800b554:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	2b21      	cmp	r3, #33	; 0x21
 800b560:	d108      	bne.n	800b574 <UART_DMAError+0x46>
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d005      	beq.n	800b574 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	2200      	movs	r2, #0
 800b56c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b56e:	68b8      	ldr	r0, [r7, #8]
 800b570:	f000 f866 	bl	800b640 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	695b      	ldr	r3, [r3, #20]
 800b57a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b57e:	2b40      	cmp	r3, #64	; 0x40
 800b580:	bf0c      	ite	eq
 800b582:	2301      	moveq	r3, #1
 800b584:	2300      	movne	r3, #0
 800b586:	b2db      	uxtb	r3, r3
 800b588:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b590:	b2db      	uxtb	r3, r3
 800b592:	2b22      	cmp	r3, #34	; 0x22
 800b594:	d108      	bne.n	800b5a8 <UART_DMAError+0x7a>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d005      	beq.n	800b5a8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b5a2:	68b8      	ldr	r0, [r7, #8]
 800b5a4:	f000 f874 	bl	800b690 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ac:	f043 0210 	orr.w	r2, r3, #16
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5b8:	68b8      	ldr	r0, [r7, #8]
 800b5ba:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5bc:	bf00      	nop
 800b5be:	3710      	adds	r7, #16
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	68ba      	ldr	r2, [r7, #8]
 800b5d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	88fa      	ldrh	r2, [r7, #6]
 800b5dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	88fa      	ldrh	r2, [r7, #6]
 800b5e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2222      	movs	r2, #34	; 0x22
 800b5ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d007      	beq.n	800b612 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	68da      	ldr	r2, [r3, #12]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b610:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	695a      	ldr	r2, [r3, #20]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f042 0201 	orr.w	r2, r2, #1
 800b620:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68da      	ldr	r2, [r3, #12]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f042 0220 	orr.w	r2, r2, #32
 800b630:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b640:	b480      	push	{r7}
 800b642:	b089      	sub	sp, #36	; 0x24
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	330c      	adds	r3, #12
 800b64e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	e853 3f00 	ldrex	r3, [r3]
 800b656:	60bb      	str	r3, [r7, #8]
   return(result);
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b65e:	61fb      	str	r3, [r7, #28]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	330c      	adds	r3, #12
 800b666:	69fa      	ldr	r2, [r7, #28]
 800b668:	61ba      	str	r2, [r7, #24]
 800b66a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66c:	6979      	ldr	r1, [r7, #20]
 800b66e:	69ba      	ldr	r2, [r7, #24]
 800b670:	e841 2300 	strex	r3, r2, [r1]
 800b674:	613b      	str	r3, [r7, #16]
   return(result);
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d1e5      	bne.n	800b648 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2220      	movs	r2, #32
 800b680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b684:	bf00      	nop
 800b686:	3724      	adds	r7, #36	; 0x24
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b690:	b480      	push	{r7}
 800b692:	b095      	sub	sp, #84	; 0x54
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	330c      	adds	r3, #12
 800b69e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a2:	e853 3f00 	ldrex	r3, [r3]
 800b6a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b6ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	330c      	adds	r3, #12
 800b6b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b6b8:	643a      	str	r2, [r7, #64]	; 0x40
 800b6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b6be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6c0:	e841 2300 	strex	r3, r2, [r1]
 800b6c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1e5      	bne.n	800b698 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	3314      	adds	r3, #20
 800b6d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d4:	6a3b      	ldr	r3, [r7, #32]
 800b6d6:	e853 3f00 	ldrex	r3, [r3]
 800b6da:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	f023 0301 	bic.w	r3, r3, #1
 800b6e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	3314      	adds	r3, #20
 800b6ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6f4:	e841 2300 	strex	r3, r2, [r1]
 800b6f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1e5      	bne.n	800b6cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b704:	2b01      	cmp	r3, #1
 800b706:	d119      	bne.n	800b73c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	330c      	adds	r3, #12
 800b70e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	e853 3f00 	ldrex	r3, [r3]
 800b716:	60bb      	str	r3, [r7, #8]
   return(result);
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	f023 0310 	bic.w	r3, r3, #16
 800b71e:	647b      	str	r3, [r7, #68]	; 0x44
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	330c      	adds	r3, #12
 800b726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b728:	61ba      	str	r2, [r7, #24]
 800b72a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72c:	6979      	ldr	r1, [r7, #20]
 800b72e:	69ba      	ldr	r2, [r7, #24]
 800b730:	e841 2300 	strex	r3, r2, [r1]
 800b734:	613b      	str	r3, [r7, #16]
   return(result);
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1e5      	bne.n	800b708 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2220      	movs	r2, #32
 800b740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b74a:	bf00      	nop
 800b74c:	3754      	adds	r7, #84	; 0x54
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b084      	sub	sp, #16
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b762:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2200      	movs	r2, #0
 800b768:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2200      	movs	r2, #0
 800b76e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b778:	bf00      	nop
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	2b21      	cmp	r3, #33	; 0x21
 800b792:	d13e      	bne.n	800b812 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b79c:	d114      	bne.n	800b7c8 <UART_Transmit_IT+0x48>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	691b      	ldr	r3, [r3, #16]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d110      	bne.n	800b7c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6a1b      	ldr	r3, [r3, #32]
 800b7aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	881b      	ldrh	r3, [r3, #0]
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b7ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6a1b      	ldr	r3, [r3, #32]
 800b7c0:	1c9a      	adds	r2, r3, #2
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	621a      	str	r2, [r3, #32]
 800b7c6:	e008      	b.n	800b7da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6a1b      	ldr	r3, [r3, #32]
 800b7cc:	1c59      	adds	r1, r3, #1
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	6211      	str	r1, [r2, #32]
 800b7d2:	781a      	ldrb	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d10f      	bne.n	800b80e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	68da      	ldr	r2, [r3, #12]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b7fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68da      	ldr	r2, [r3, #12]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b80c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b80e:	2300      	movs	r3, #0
 800b810:	e000      	b.n	800b814 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b812:	2302      	movs	r3, #2
  }
}
 800b814:	4618      	mov	r0, r3
 800b816:	3714      	adds	r7, #20
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	68da      	ldr	r2, [r3, #12]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b836:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2220      	movs	r2, #32
 800b83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b08c      	sub	sp, #48	; 0x30
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b22      	cmp	r3, #34	; 0x22
 800b864:	f040 80ad 	bne.w	800b9c2 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b870:	d117      	bne.n	800b8a2 <UART_Receive_IT+0x50>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d113      	bne.n	800b8a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b87a:	2300      	movs	r3, #0
 800b87c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b882:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b890:	b29a      	uxth	r2, r3
 800b892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b894:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b89a:	1c9a      	adds	r2, r3, #2
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	629a      	str	r2, [r3, #40]	; 0x28
 800b8a0:	e026      	b.n	800b8f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8b4:	d007      	beq.n	800b8c6 <UART_Receive_IT+0x74>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10a      	bne.n	800b8d4 <UART_Receive_IT+0x82>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d106      	bne.n	800b8d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d0:	701a      	strb	r2, [r3, #0]
 800b8d2:	e008      	b.n	800b8e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8e0:	b2da      	uxtb	r2, r3
 800b8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ea:	1c5a      	adds	r2, r3, #1
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b900:	2b00      	cmp	r3, #0
 800b902:	d15c      	bne.n	800b9be <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68da      	ldr	r2, [r3, #12]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f022 0220 	bic.w	r2, r2, #32
 800b912:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	68da      	ldr	r2, [r3, #12]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b922:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	695a      	ldr	r2, [r3, #20]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f022 0201 	bic.w	r2, r2, #1
 800b932:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2220      	movs	r2, #32
 800b938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b940:	2b01      	cmp	r3, #1
 800b942:	d136      	bne.n	800b9b2 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	330c      	adds	r3, #12
 800b950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	e853 3f00 	ldrex	r3, [r3]
 800b958:	613b      	str	r3, [r7, #16]
   return(result);
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	f023 0310 	bic.w	r3, r3, #16
 800b960:	627b      	str	r3, [r7, #36]	; 0x24
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	330c      	adds	r3, #12
 800b968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b96a:	623a      	str	r2, [r7, #32]
 800b96c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b96e:	69f9      	ldr	r1, [r7, #28]
 800b970:	6a3a      	ldr	r2, [r7, #32]
 800b972:	e841 2300 	strex	r3, r2, [r1]
 800b976:	61bb      	str	r3, [r7, #24]
   return(result);
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d1e5      	bne.n	800b94a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f003 0310 	and.w	r3, r3, #16
 800b988:	2b10      	cmp	r3, #16
 800b98a:	d10a      	bne.n	800b9a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b98c:	2300      	movs	r3, #0
 800b98e:	60fb      	str	r3, [r7, #12]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	60fb      	str	r3, [r7, #12]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	60fb      	str	r3, [r7, #12]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b9aa:	4611      	mov	r1, r2
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	4798      	blx	r3
 800b9b0:	e003      	b.n	800b9ba <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	e002      	b.n	800b9c4 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	e000      	b.n	800b9c4 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b9c2:	2302      	movs	r3, #2
  }
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3730      	adds	r7, #48	; 0x30
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9d0:	b0c0      	sub	sp, #256	; 0x100
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b9e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9e8:	68d9      	ldr	r1, [r3, #12]
 800b9ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	ea40 0301 	orr.w	r3, r0, r1
 800b9f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b9f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9fa:	689a      	ldr	r2, [r3, #8]
 800b9fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	431a      	orrs	r2, r3
 800ba04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba08:	695b      	ldr	r3, [r3, #20]
 800ba0a:	431a      	orrs	r2, r3
 800ba0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba10:	69db      	ldr	r3, [r3, #28]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ba18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ba24:	f021 010c 	bic.w	r1, r1, #12
 800ba28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba32:	430b      	orrs	r3, r1
 800ba34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ba36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	695b      	ldr	r3, [r3, #20]
 800ba3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ba42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba46:	6999      	ldr	r1, [r3, #24]
 800ba48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba4c:	681a      	ldr	r2, [r3, #0]
 800ba4e:	ea40 0301 	orr.w	r3, r0, r1
 800ba52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ba54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	4b8f      	ldr	r3, [pc, #572]	; (800bc98 <UART_SetConfig+0x2cc>)
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d005      	beq.n	800ba6c <UART_SetConfig+0xa0>
 800ba60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	4b8d      	ldr	r3, [pc, #564]	; (800bc9c <UART_SetConfig+0x2d0>)
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d104      	bne.n	800ba76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ba6c:	f7fd fa26 	bl	8008ebc <HAL_RCC_GetPCLK2Freq>
 800ba70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ba74:	e003      	b.n	800ba7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ba76:	f7fd fa0d 	bl	8008e94 <HAL_RCC_GetPCLK1Freq>
 800ba7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba82:	69db      	ldr	r3, [r3, #28]
 800ba84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba88:	f040 810c 	bne.w	800bca4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ba8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba90:	2200      	movs	r2, #0
 800ba92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ba96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ba9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ba9e:	4622      	mov	r2, r4
 800baa0:	462b      	mov	r3, r5
 800baa2:	1891      	adds	r1, r2, r2
 800baa4:	65b9      	str	r1, [r7, #88]	; 0x58
 800baa6:	415b      	adcs	r3, r3
 800baa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800baaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800baae:	4621      	mov	r1, r4
 800bab0:	eb12 0801 	adds.w	r8, r2, r1
 800bab4:	4629      	mov	r1, r5
 800bab6:	eb43 0901 	adc.w	r9, r3, r1
 800baba:	f04f 0200 	mov.w	r2, #0
 800babe:	f04f 0300 	mov.w	r3, #0
 800bac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800baca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bace:	4690      	mov	r8, r2
 800bad0:	4699      	mov	r9, r3
 800bad2:	4623      	mov	r3, r4
 800bad4:	eb18 0303 	adds.w	r3, r8, r3
 800bad8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800badc:	462b      	mov	r3, r5
 800bade:	eb49 0303 	adc.w	r3, r9, r3
 800bae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800baf2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800baf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bafa:	460b      	mov	r3, r1
 800bafc:	18db      	adds	r3, r3, r3
 800bafe:	653b      	str	r3, [r7, #80]	; 0x50
 800bb00:	4613      	mov	r3, r2
 800bb02:	eb42 0303 	adc.w	r3, r2, r3
 800bb06:	657b      	str	r3, [r7, #84]	; 0x54
 800bb08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bb0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bb10:	f7f5 f846 	bl	8000ba0 <__aeabi_uldivmod>
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	4b61      	ldr	r3, [pc, #388]	; (800bca0 <UART_SetConfig+0x2d4>)
 800bb1a:	fba3 2302 	umull	r2, r3, r3, r2
 800bb1e:	095b      	lsrs	r3, r3, #5
 800bb20:	011c      	lsls	r4, r3, #4
 800bb22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb26:	2200      	movs	r2, #0
 800bb28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bb30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bb34:	4642      	mov	r2, r8
 800bb36:	464b      	mov	r3, r9
 800bb38:	1891      	adds	r1, r2, r2
 800bb3a:	64b9      	str	r1, [r7, #72]	; 0x48
 800bb3c:	415b      	adcs	r3, r3
 800bb3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bb44:	4641      	mov	r1, r8
 800bb46:	eb12 0a01 	adds.w	sl, r2, r1
 800bb4a:	4649      	mov	r1, r9
 800bb4c:	eb43 0b01 	adc.w	fp, r3, r1
 800bb50:	f04f 0200 	mov.w	r2, #0
 800bb54:	f04f 0300 	mov.w	r3, #0
 800bb58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bb5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bb60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bb64:	4692      	mov	sl, r2
 800bb66:	469b      	mov	fp, r3
 800bb68:	4643      	mov	r3, r8
 800bb6a:	eb1a 0303 	adds.w	r3, sl, r3
 800bb6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb72:	464b      	mov	r3, r9
 800bb74:	eb4b 0303 	adc.w	r3, fp, r3
 800bb78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bb7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bb8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bb90:	460b      	mov	r3, r1
 800bb92:	18db      	adds	r3, r3, r3
 800bb94:	643b      	str	r3, [r7, #64]	; 0x40
 800bb96:	4613      	mov	r3, r2
 800bb98:	eb42 0303 	adc.w	r3, r2, r3
 800bb9c:	647b      	str	r3, [r7, #68]	; 0x44
 800bb9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bba2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bba6:	f7f4 fffb 	bl	8000ba0 <__aeabi_uldivmod>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	460b      	mov	r3, r1
 800bbae:	4611      	mov	r1, r2
 800bbb0:	4b3b      	ldr	r3, [pc, #236]	; (800bca0 <UART_SetConfig+0x2d4>)
 800bbb2:	fba3 2301 	umull	r2, r3, r3, r1
 800bbb6:	095b      	lsrs	r3, r3, #5
 800bbb8:	2264      	movs	r2, #100	; 0x64
 800bbba:	fb02 f303 	mul.w	r3, r2, r3
 800bbbe:	1acb      	subs	r3, r1, r3
 800bbc0:	00db      	lsls	r3, r3, #3
 800bbc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bbc6:	4b36      	ldr	r3, [pc, #216]	; (800bca0 <UART_SetConfig+0x2d4>)
 800bbc8:	fba3 2302 	umull	r2, r3, r3, r2
 800bbcc:	095b      	lsrs	r3, r3, #5
 800bbce:	005b      	lsls	r3, r3, #1
 800bbd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bbd4:	441c      	add	r4, r3
 800bbd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bbe0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bbe4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bbe8:	4642      	mov	r2, r8
 800bbea:	464b      	mov	r3, r9
 800bbec:	1891      	adds	r1, r2, r2
 800bbee:	63b9      	str	r1, [r7, #56]	; 0x38
 800bbf0:	415b      	adcs	r3, r3
 800bbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bbf8:	4641      	mov	r1, r8
 800bbfa:	1851      	adds	r1, r2, r1
 800bbfc:	6339      	str	r1, [r7, #48]	; 0x30
 800bbfe:	4649      	mov	r1, r9
 800bc00:	414b      	adcs	r3, r1
 800bc02:	637b      	str	r3, [r7, #52]	; 0x34
 800bc04:	f04f 0200 	mov.w	r2, #0
 800bc08:	f04f 0300 	mov.w	r3, #0
 800bc0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bc10:	4659      	mov	r1, fp
 800bc12:	00cb      	lsls	r3, r1, #3
 800bc14:	4651      	mov	r1, sl
 800bc16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc1a:	4651      	mov	r1, sl
 800bc1c:	00ca      	lsls	r2, r1, #3
 800bc1e:	4610      	mov	r0, r2
 800bc20:	4619      	mov	r1, r3
 800bc22:	4603      	mov	r3, r0
 800bc24:	4642      	mov	r2, r8
 800bc26:	189b      	adds	r3, r3, r2
 800bc28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc2c:	464b      	mov	r3, r9
 800bc2e:	460a      	mov	r2, r1
 800bc30:	eb42 0303 	adc.w	r3, r2, r3
 800bc34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bc44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bc48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	18db      	adds	r3, r3, r3
 800bc50:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc52:	4613      	mov	r3, r2
 800bc54:	eb42 0303 	adc.w	r3, r2, r3
 800bc58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bc5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bc62:	f7f4 ff9d 	bl	8000ba0 <__aeabi_uldivmod>
 800bc66:	4602      	mov	r2, r0
 800bc68:	460b      	mov	r3, r1
 800bc6a:	4b0d      	ldr	r3, [pc, #52]	; (800bca0 <UART_SetConfig+0x2d4>)
 800bc6c:	fba3 1302 	umull	r1, r3, r3, r2
 800bc70:	095b      	lsrs	r3, r3, #5
 800bc72:	2164      	movs	r1, #100	; 0x64
 800bc74:	fb01 f303 	mul.w	r3, r1, r3
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	00db      	lsls	r3, r3, #3
 800bc7c:	3332      	adds	r3, #50	; 0x32
 800bc7e:	4a08      	ldr	r2, [pc, #32]	; (800bca0 <UART_SetConfig+0x2d4>)
 800bc80:	fba2 2303 	umull	r2, r3, r2, r3
 800bc84:	095b      	lsrs	r3, r3, #5
 800bc86:	f003 0207 	and.w	r2, r3, #7
 800bc8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4422      	add	r2, r4
 800bc92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bc94:	e105      	b.n	800bea2 <UART_SetConfig+0x4d6>
 800bc96:	bf00      	nop
 800bc98:	40011000 	.word	0x40011000
 800bc9c:	40011400 	.word	0x40011400
 800bca0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bcae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bcb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bcb6:	4642      	mov	r2, r8
 800bcb8:	464b      	mov	r3, r9
 800bcba:	1891      	adds	r1, r2, r2
 800bcbc:	6239      	str	r1, [r7, #32]
 800bcbe:	415b      	adcs	r3, r3
 800bcc0:	627b      	str	r3, [r7, #36]	; 0x24
 800bcc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bcc6:	4641      	mov	r1, r8
 800bcc8:	1854      	adds	r4, r2, r1
 800bcca:	4649      	mov	r1, r9
 800bccc:	eb43 0501 	adc.w	r5, r3, r1
 800bcd0:	f04f 0200 	mov.w	r2, #0
 800bcd4:	f04f 0300 	mov.w	r3, #0
 800bcd8:	00eb      	lsls	r3, r5, #3
 800bcda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bcde:	00e2      	lsls	r2, r4, #3
 800bce0:	4614      	mov	r4, r2
 800bce2:	461d      	mov	r5, r3
 800bce4:	4643      	mov	r3, r8
 800bce6:	18e3      	adds	r3, r4, r3
 800bce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bcec:	464b      	mov	r3, r9
 800bcee:	eb45 0303 	adc.w	r3, r5, r3
 800bcf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bcf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bd06:	f04f 0200 	mov.w	r2, #0
 800bd0a:	f04f 0300 	mov.w	r3, #0
 800bd0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bd12:	4629      	mov	r1, r5
 800bd14:	008b      	lsls	r3, r1, #2
 800bd16:	4621      	mov	r1, r4
 800bd18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd1c:	4621      	mov	r1, r4
 800bd1e:	008a      	lsls	r2, r1, #2
 800bd20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bd24:	f7f4 ff3c 	bl	8000ba0 <__aeabi_uldivmod>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	4b60      	ldr	r3, [pc, #384]	; (800beb0 <UART_SetConfig+0x4e4>)
 800bd2e:	fba3 2302 	umull	r2, r3, r3, r2
 800bd32:	095b      	lsrs	r3, r3, #5
 800bd34:	011c      	lsls	r4, r3, #4
 800bd36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bd40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bd44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bd48:	4642      	mov	r2, r8
 800bd4a:	464b      	mov	r3, r9
 800bd4c:	1891      	adds	r1, r2, r2
 800bd4e:	61b9      	str	r1, [r7, #24]
 800bd50:	415b      	adcs	r3, r3
 800bd52:	61fb      	str	r3, [r7, #28]
 800bd54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bd58:	4641      	mov	r1, r8
 800bd5a:	1851      	adds	r1, r2, r1
 800bd5c:	6139      	str	r1, [r7, #16]
 800bd5e:	4649      	mov	r1, r9
 800bd60:	414b      	adcs	r3, r1
 800bd62:	617b      	str	r3, [r7, #20]
 800bd64:	f04f 0200 	mov.w	r2, #0
 800bd68:	f04f 0300 	mov.w	r3, #0
 800bd6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bd70:	4659      	mov	r1, fp
 800bd72:	00cb      	lsls	r3, r1, #3
 800bd74:	4651      	mov	r1, sl
 800bd76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd7a:	4651      	mov	r1, sl
 800bd7c:	00ca      	lsls	r2, r1, #3
 800bd7e:	4610      	mov	r0, r2
 800bd80:	4619      	mov	r1, r3
 800bd82:	4603      	mov	r3, r0
 800bd84:	4642      	mov	r2, r8
 800bd86:	189b      	adds	r3, r3, r2
 800bd88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd8c:	464b      	mov	r3, r9
 800bd8e:	460a      	mov	r2, r1
 800bd90:	eb42 0303 	adc.w	r3, r2, r3
 800bd94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	67bb      	str	r3, [r7, #120]	; 0x78
 800bda2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bda4:	f04f 0200 	mov.w	r2, #0
 800bda8:	f04f 0300 	mov.w	r3, #0
 800bdac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bdb0:	4649      	mov	r1, r9
 800bdb2:	008b      	lsls	r3, r1, #2
 800bdb4:	4641      	mov	r1, r8
 800bdb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bdba:	4641      	mov	r1, r8
 800bdbc:	008a      	lsls	r2, r1, #2
 800bdbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bdc2:	f7f4 feed 	bl	8000ba0 <__aeabi_uldivmod>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	460b      	mov	r3, r1
 800bdca:	4b39      	ldr	r3, [pc, #228]	; (800beb0 <UART_SetConfig+0x4e4>)
 800bdcc:	fba3 1302 	umull	r1, r3, r3, r2
 800bdd0:	095b      	lsrs	r3, r3, #5
 800bdd2:	2164      	movs	r1, #100	; 0x64
 800bdd4:	fb01 f303 	mul.w	r3, r1, r3
 800bdd8:	1ad3      	subs	r3, r2, r3
 800bdda:	011b      	lsls	r3, r3, #4
 800bddc:	3332      	adds	r3, #50	; 0x32
 800bdde:	4a34      	ldr	r2, [pc, #208]	; (800beb0 <UART_SetConfig+0x4e4>)
 800bde0:	fba2 2303 	umull	r2, r3, r2, r3
 800bde4:	095b      	lsrs	r3, r3, #5
 800bde6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdea:	441c      	add	r4, r3
 800bdec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	673b      	str	r3, [r7, #112]	; 0x70
 800bdf4:	677a      	str	r2, [r7, #116]	; 0x74
 800bdf6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bdfa:	4642      	mov	r2, r8
 800bdfc:	464b      	mov	r3, r9
 800bdfe:	1891      	adds	r1, r2, r2
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	415b      	adcs	r3, r3
 800be04:	60fb      	str	r3, [r7, #12]
 800be06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800be0a:	4641      	mov	r1, r8
 800be0c:	1851      	adds	r1, r2, r1
 800be0e:	6039      	str	r1, [r7, #0]
 800be10:	4649      	mov	r1, r9
 800be12:	414b      	adcs	r3, r1
 800be14:	607b      	str	r3, [r7, #4]
 800be16:	f04f 0200 	mov.w	r2, #0
 800be1a:	f04f 0300 	mov.w	r3, #0
 800be1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800be22:	4659      	mov	r1, fp
 800be24:	00cb      	lsls	r3, r1, #3
 800be26:	4651      	mov	r1, sl
 800be28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be2c:	4651      	mov	r1, sl
 800be2e:	00ca      	lsls	r2, r1, #3
 800be30:	4610      	mov	r0, r2
 800be32:	4619      	mov	r1, r3
 800be34:	4603      	mov	r3, r0
 800be36:	4642      	mov	r2, r8
 800be38:	189b      	adds	r3, r3, r2
 800be3a:	66bb      	str	r3, [r7, #104]	; 0x68
 800be3c:	464b      	mov	r3, r9
 800be3e:	460a      	mov	r2, r1
 800be40:	eb42 0303 	adc.w	r3, r2, r3
 800be44:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	663b      	str	r3, [r7, #96]	; 0x60
 800be50:	667a      	str	r2, [r7, #100]	; 0x64
 800be52:	f04f 0200 	mov.w	r2, #0
 800be56:	f04f 0300 	mov.w	r3, #0
 800be5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800be5e:	4649      	mov	r1, r9
 800be60:	008b      	lsls	r3, r1, #2
 800be62:	4641      	mov	r1, r8
 800be64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be68:	4641      	mov	r1, r8
 800be6a:	008a      	lsls	r2, r1, #2
 800be6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800be70:	f7f4 fe96 	bl	8000ba0 <__aeabi_uldivmod>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	4b0d      	ldr	r3, [pc, #52]	; (800beb0 <UART_SetConfig+0x4e4>)
 800be7a:	fba3 1302 	umull	r1, r3, r3, r2
 800be7e:	095b      	lsrs	r3, r3, #5
 800be80:	2164      	movs	r1, #100	; 0x64
 800be82:	fb01 f303 	mul.w	r3, r1, r3
 800be86:	1ad3      	subs	r3, r2, r3
 800be88:	011b      	lsls	r3, r3, #4
 800be8a:	3332      	adds	r3, #50	; 0x32
 800be8c:	4a08      	ldr	r2, [pc, #32]	; (800beb0 <UART_SetConfig+0x4e4>)
 800be8e:	fba2 2303 	umull	r2, r3, r2, r3
 800be92:	095b      	lsrs	r3, r3, #5
 800be94:	f003 020f 	and.w	r2, r3, #15
 800be98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4422      	add	r2, r4
 800bea0:	609a      	str	r2, [r3, #8]
}
 800bea2:	bf00      	nop
 800bea4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bea8:	46bd      	mov	sp, r7
 800beaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800beae:	bf00      	nop
 800beb0:	51eb851f 	.word	0x51eb851f

0800beb4 <__errno>:
 800beb4:	4b01      	ldr	r3, [pc, #4]	; (800bebc <__errno+0x8>)
 800beb6:	6818      	ldr	r0, [r3, #0]
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	20000294 	.word	0x20000294

0800bec0 <__libc_init_array>:
 800bec0:	b570      	push	{r4, r5, r6, lr}
 800bec2:	4d0d      	ldr	r5, [pc, #52]	; (800bef8 <__libc_init_array+0x38>)
 800bec4:	4c0d      	ldr	r4, [pc, #52]	; (800befc <__libc_init_array+0x3c>)
 800bec6:	1b64      	subs	r4, r4, r5
 800bec8:	10a4      	asrs	r4, r4, #2
 800beca:	2600      	movs	r6, #0
 800becc:	42a6      	cmp	r6, r4
 800bece:	d109      	bne.n	800bee4 <__libc_init_array+0x24>
 800bed0:	4d0b      	ldr	r5, [pc, #44]	; (800bf00 <__libc_init_array+0x40>)
 800bed2:	4c0c      	ldr	r4, [pc, #48]	; (800bf04 <__libc_init_array+0x44>)
 800bed4:	f001 ff86 	bl	800dde4 <_init>
 800bed8:	1b64      	subs	r4, r4, r5
 800beda:	10a4      	asrs	r4, r4, #2
 800bedc:	2600      	movs	r6, #0
 800bede:	42a6      	cmp	r6, r4
 800bee0:	d105      	bne.n	800beee <__libc_init_array+0x2e>
 800bee2:	bd70      	pop	{r4, r5, r6, pc}
 800bee4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bee8:	4798      	blx	r3
 800beea:	3601      	adds	r6, #1
 800beec:	e7ee      	b.n	800becc <__libc_init_array+0xc>
 800beee:	f855 3b04 	ldr.w	r3, [r5], #4
 800bef2:	4798      	blx	r3
 800bef4:	3601      	adds	r6, #1
 800bef6:	e7f2      	b.n	800bede <__libc_init_array+0x1e>
 800bef8:	0800e248 	.word	0x0800e248
 800befc:	0800e248 	.word	0x0800e248
 800bf00:	0800e248 	.word	0x0800e248
 800bf04:	0800e24c 	.word	0x0800e24c

0800bf08 <memcpy>:
 800bf08:	440a      	add	r2, r1
 800bf0a:	4291      	cmp	r1, r2
 800bf0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf10:	d100      	bne.n	800bf14 <memcpy+0xc>
 800bf12:	4770      	bx	lr
 800bf14:	b510      	push	{r4, lr}
 800bf16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf1e:	4291      	cmp	r1, r2
 800bf20:	d1f9      	bne.n	800bf16 <memcpy+0xe>
 800bf22:	bd10      	pop	{r4, pc}

0800bf24 <memset>:
 800bf24:	4402      	add	r2, r0
 800bf26:	4603      	mov	r3, r0
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d100      	bne.n	800bf2e <memset+0xa>
 800bf2c:	4770      	bx	lr
 800bf2e:	f803 1b01 	strb.w	r1, [r3], #1
 800bf32:	e7f9      	b.n	800bf28 <memset+0x4>

0800bf34 <cosf>:
 800bf34:	ee10 3a10 	vmov	r3, s0
 800bf38:	b507      	push	{r0, r1, r2, lr}
 800bf3a:	4a1e      	ldr	r2, [pc, #120]	; (800bfb4 <cosf+0x80>)
 800bf3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf40:	4293      	cmp	r3, r2
 800bf42:	dc06      	bgt.n	800bf52 <cosf+0x1e>
 800bf44:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800bfb8 <cosf+0x84>
 800bf48:	b003      	add	sp, #12
 800bf4a:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf4e:	f001 ba9b 	b.w	800d488 <__kernel_cosf>
 800bf52:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bf56:	db04      	blt.n	800bf62 <cosf+0x2e>
 800bf58:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bf5c:	b003      	add	sp, #12
 800bf5e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf62:	4668      	mov	r0, sp
 800bf64:	f001 f954 	bl	800d210 <__ieee754_rem_pio2f>
 800bf68:	f000 0003 	and.w	r0, r0, #3
 800bf6c:	2801      	cmp	r0, #1
 800bf6e:	d009      	beq.n	800bf84 <cosf+0x50>
 800bf70:	2802      	cmp	r0, #2
 800bf72:	d010      	beq.n	800bf96 <cosf+0x62>
 800bf74:	b9b0      	cbnz	r0, 800bfa4 <cosf+0x70>
 800bf76:	eddd 0a01 	vldr	s1, [sp, #4]
 800bf7a:	ed9d 0a00 	vldr	s0, [sp]
 800bf7e:	f001 fa83 	bl	800d488 <__kernel_cosf>
 800bf82:	e7eb      	b.n	800bf5c <cosf+0x28>
 800bf84:	eddd 0a01 	vldr	s1, [sp, #4]
 800bf88:	ed9d 0a00 	vldr	s0, [sp]
 800bf8c:	f001 fd52 	bl	800da34 <__kernel_sinf>
 800bf90:	eeb1 0a40 	vneg.f32	s0, s0
 800bf94:	e7e2      	b.n	800bf5c <cosf+0x28>
 800bf96:	eddd 0a01 	vldr	s1, [sp, #4]
 800bf9a:	ed9d 0a00 	vldr	s0, [sp]
 800bf9e:	f001 fa73 	bl	800d488 <__kernel_cosf>
 800bfa2:	e7f5      	b.n	800bf90 <cosf+0x5c>
 800bfa4:	eddd 0a01 	vldr	s1, [sp, #4]
 800bfa8:	ed9d 0a00 	vldr	s0, [sp]
 800bfac:	2001      	movs	r0, #1
 800bfae:	f001 fd41 	bl	800da34 <__kernel_sinf>
 800bfb2:	e7d3      	b.n	800bf5c <cosf+0x28>
 800bfb4:	3f490fd8 	.word	0x3f490fd8
 800bfb8:	00000000 	.word	0x00000000

0800bfbc <sinf>:
 800bfbc:	ee10 3a10 	vmov	r3, s0
 800bfc0:	b507      	push	{r0, r1, r2, lr}
 800bfc2:	4a1f      	ldr	r2, [pc, #124]	; (800c040 <sinf+0x84>)
 800bfc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	dc07      	bgt.n	800bfdc <sinf+0x20>
 800bfcc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800c044 <sinf+0x88>
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	b003      	add	sp, #12
 800bfd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfd8:	f001 bd2c 	b.w	800da34 <__kernel_sinf>
 800bfdc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bfe0:	db04      	blt.n	800bfec <sinf+0x30>
 800bfe2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bfe6:	b003      	add	sp, #12
 800bfe8:	f85d fb04 	ldr.w	pc, [sp], #4
 800bfec:	4668      	mov	r0, sp
 800bfee:	f001 f90f 	bl	800d210 <__ieee754_rem_pio2f>
 800bff2:	f000 0003 	and.w	r0, r0, #3
 800bff6:	2801      	cmp	r0, #1
 800bff8:	d00a      	beq.n	800c010 <sinf+0x54>
 800bffa:	2802      	cmp	r0, #2
 800bffc:	d00f      	beq.n	800c01e <sinf+0x62>
 800bffe:	b9c0      	cbnz	r0, 800c032 <sinf+0x76>
 800c000:	eddd 0a01 	vldr	s1, [sp, #4]
 800c004:	ed9d 0a00 	vldr	s0, [sp]
 800c008:	2001      	movs	r0, #1
 800c00a:	f001 fd13 	bl	800da34 <__kernel_sinf>
 800c00e:	e7ea      	b.n	800bfe6 <sinf+0x2a>
 800c010:	eddd 0a01 	vldr	s1, [sp, #4]
 800c014:	ed9d 0a00 	vldr	s0, [sp]
 800c018:	f001 fa36 	bl	800d488 <__kernel_cosf>
 800c01c:	e7e3      	b.n	800bfe6 <sinf+0x2a>
 800c01e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c022:	ed9d 0a00 	vldr	s0, [sp]
 800c026:	2001      	movs	r0, #1
 800c028:	f001 fd04 	bl	800da34 <__kernel_sinf>
 800c02c:	eeb1 0a40 	vneg.f32	s0, s0
 800c030:	e7d9      	b.n	800bfe6 <sinf+0x2a>
 800c032:	eddd 0a01 	vldr	s1, [sp, #4]
 800c036:	ed9d 0a00 	vldr	s0, [sp]
 800c03a:	f001 fa25 	bl	800d488 <__kernel_cosf>
 800c03e:	e7f5      	b.n	800c02c <sinf+0x70>
 800c040:	3f490fd8 	.word	0x3f490fd8
 800c044:	00000000 	.word	0x00000000

0800c048 <acos>:
 800c048:	b538      	push	{r3, r4, r5, lr}
 800c04a:	ed2d 8b02 	vpush	{d8}
 800c04e:	ec55 4b10 	vmov	r4, r5, d0
 800c052:	f000 f89d 	bl	800c190 <__ieee754_acos>
 800c056:	4622      	mov	r2, r4
 800c058:	462b      	mov	r3, r5
 800c05a:	4620      	mov	r0, r4
 800c05c:	4629      	mov	r1, r5
 800c05e:	eeb0 8a40 	vmov.f32	s16, s0
 800c062:	eef0 8a60 	vmov.f32	s17, s1
 800c066:	f7f4 fd0d 	bl	8000a84 <__aeabi_dcmpun>
 800c06a:	b9a8      	cbnz	r0, 800c098 <acos+0x50>
 800c06c:	ec45 4b10 	vmov	d0, r4, r5
 800c070:	f001 fd58 	bl	800db24 <fabs>
 800c074:	4b0c      	ldr	r3, [pc, #48]	; (800c0a8 <acos+0x60>)
 800c076:	ec51 0b10 	vmov	r0, r1, d0
 800c07a:	2200      	movs	r2, #0
 800c07c:	f7f4 fcf8 	bl	8000a70 <__aeabi_dcmpgt>
 800c080:	b150      	cbz	r0, 800c098 <acos+0x50>
 800c082:	f7ff ff17 	bl	800beb4 <__errno>
 800c086:	ecbd 8b02 	vpop	{d8}
 800c08a:	2321      	movs	r3, #33	; 0x21
 800c08c:	6003      	str	r3, [r0, #0]
 800c08e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c092:	4806      	ldr	r0, [pc, #24]	; (800c0ac <acos+0x64>)
 800c094:	f001 bd5c 	b.w	800db50 <nan>
 800c098:	eeb0 0a48 	vmov.f32	s0, s16
 800c09c:	eef0 0a68 	vmov.f32	s1, s17
 800c0a0:	ecbd 8b02 	vpop	{d8}
 800c0a4:	bd38      	pop	{r3, r4, r5, pc}
 800c0a6:	bf00      	nop
 800c0a8:	3ff00000 	.word	0x3ff00000
 800c0ac:	0800de38 	.word	0x0800de38

0800c0b0 <pow>:
 800c0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b2:	ed2d 8b02 	vpush	{d8}
 800c0b6:	eeb0 8a40 	vmov.f32	s16, s0
 800c0ba:	eef0 8a60 	vmov.f32	s17, s1
 800c0be:	ec55 4b11 	vmov	r4, r5, d1
 800c0c2:	f000 fac5 	bl	800c650 <__ieee754_pow>
 800c0c6:	4622      	mov	r2, r4
 800c0c8:	462b      	mov	r3, r5
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	ec57 6b10 	vmov	r6, r7, d0
 800c0d2:	f7f4 fcd7 	bl	8000a84 <__aeabi_dcmpun>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	d13b      	bne.n	800c152 <pow+0xa2>
 800c0da:	ec51 0b18 	vmov	r0, r1, d8
 800c0de:	2200      	movs	r2, #0
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f7f4 fc9d 	bl	8000a20 <__aeabi_dcmpeq>
 800c0e6:	b1b8      	cbz	r0, 800c118 <pow+0x68>
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	f7f4 fc96 	bl	8000a20 <__aeabi_dcmpeq>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d146      	bne.n	800c186 <pow+0xd6>
 800c0f8:	ec45 4b10 	vmov	d0, r4, r5
 800c0fc:	f001 fd1b 	bl	800db36 <finite>
 800c100:	b338      	cbz	r0, 800c152 <pow+0xa2>
 800c102:	2200      	movs	r2, #0
 800c104:	2300      	movs	r3, #0
 800c106:	4620      	mov	r0, r4
 800c108:	4629      	mov	r1, r5
 800c10a:	f7f4 fc93 	bl	8000a34 <__aeabi_dcmplt>
 800c10e:	b300      	cbz	r0, 800c152 <pow+0xa2>
 800c110:	f7ff fed0 	bl	800beb4 <__errno>
 800c114:	2322      	movs	r3, #34	; 0x22
 800c116:	e01b      	b.n	800c150 <pow+0xa0>
 800c118:	ec47 6b10 	vmov	d0, r6, r7
 800c11c:	f001 fd0b 	bl	800db36 <finite>
 800c120:	b9e0      	cbnz	r0, 800c15c <pow+0xac>
 800c122:	eeb0 0a48 	vmov.f32	s0, s16
 800c126:	eef0 0a68 	vmov.f32	s1, s17
 800c12a:	f001 fd04 	bl	800db36 <finite>
 800c12e:	b1a8      	cbz	r0, 800c15c <pow+0xac>
 800c130:	ec45 4b10 	vmov	d0, r4, r5
 800c134:	f001 fcff 	bl	800db36 <finite>
 800c138:	b180      	cbz	r0, 800c15c <pow+0xac>
 800c13a:	4632      	mov	r2, r6
 800c13c:	463b      	mov	r3, r7
 800c13e:	4630      	mov	r0, r6
 800c140:	4639      	mov	r1, r7
 800c142:	f7f4 fc9f 	bl	8000a84 <__aeabi_dcmpun>
 800c146:	2800      	cmp	r0, #0
 800c148:	d0e2      	beq.n	800c110 <pow+0x60>
 800c14a:	f7ff feb3 	bl	800beb4 <__errno>
 800c14e:	2321      	movs	r3, #33	; 0x21
 800c150:	6003      	str	r3, [r0, #0]
 800c152:	ecbd 8b02 	vpop	{d8}
 800c156:	ec47 6b10 	vmov	d0, r6, r7
 800c15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c15c:	2200      	movs	r2, #0
 800c15e:	2300      	movs	r3, #0
 800c160:	4630      	mov	r0, r6
 800c162:	4639      	mov	r1, r7
 800c164:	f7f4 fc5c 	bl	8000a20 <__aeabi_dcmpeq>
 800c168:	2800      	cmp	r0, #0
 800c16a:	d0f2      	beq.n	800c152 <pow+0xa2>
 800c16c:	eeb0 0a48 	vmov.f32	s0, s16
 800c170:	eef0 0a68 	vmov.f32	s1, s17
 800c174:	f001 fcdf 	bl	800db36 <finite>
 800c178:	2800      	cmp	r0, #0
 800c17a:	d0ea      	beq.n	800c152 <pow+0xa2>
 800c17c:	ec45 4b10 	vmov	d0, r4, r5
 800c180:	f001 fcd9 	bl	800db36 <finite>
 800c184:	e7c3      	b.n	800c10e <pow+0x5e>
 800c186:	4f01      	ldr	r7, [pc, #4]	; (800c18c <pow+0xdc>)
 800c188:	2600      	movs	r6, #0
 800c18a:	e7e2      	b.n	800c152 <pow+0xa2>
 800c18c:	3ff00000 	.word	0x3ff00000

0800c190 <__ieee754_acos>:
 800c190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c194:	ec55 4b10 	vmov	r4, r5, d0
 800c198:	49b7      	ldr	r1, [pc, #732]	; (800c478 <__ieee754_acos+0x2e8>)
 800c19a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c19e:	428b      	cmp	r3, r1
 800c1a0:	dd1b      	ble.n	800c1da <__ieee754_acos+0x4a>
 800c1a2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800c1a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c1aa:	4323      	orrs	r3, r4
 800c1ac:	d106      	bne.n	800c1bc <__ieee754_acos+0x2c>
 800c1ae:	2d00      	cmp	r5, #0
 800c1b0:	f300 8211 	bgt.w	800c5d6 <__ieee754_acos+0x446>
 800c1b4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800c410 <__ieee754_acos+0x280>
 800c1b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1bc:	ee10 2a10 	vmov	r2, s0
 800c1c0:	462b      	mov	r3, r5
 800c1c2:	ee10 0a10 	vmov	r0, s0
 800c1c6:	4629      	mov	r1, r5
 800c1c8:	f7f4 f80a 	bl	80001e0 <__aeabi_dsub>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	f7f4 fae8 	bl	80007a4 <__aeabi_ddiv>
 800c1d4:	ec41 0b10 	vmov	d0, r0, r1
 800c1d8:	e7ee      	b.n	800c1b8 <__ieee754_acos+0x28>
 800c1da:	49a8      	ldr	r1, [pc, #672]	; (800c47c <__ieee754_acos+0x2ec>)
 800c1dc:	428b      	cmp	r3, r1
 800c1de:	f300 8087 	bgt.w	800c2f0 <__ieee754_acos+0x160>
 800c1e2:	4aa7      	ldr	r2, [pc, #668]	; (800c480 <__ieee754_acos+0x2f0>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	f340 81f9 	ble.w	800c5dc <__ieee754_acos+0x44c>
 800c1ea:	ee10 2a10 	vmov	r2, s0
 800c1ee:	ee10 0a10 	vmov	r0, s0
 800c1f2:	462b      	mov	r3, r5
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	f7f4 f9ab 	bl	8000550 <__aeabi_dmul>
 800c1fa:	a387      	add	r3, pc, #540	; (adr r3, 800c418 <__ieee754_acos+0x288>)
 800c1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c200:	4606      	mov	r6, r0
 800c202:	460f      	mov	r7, r1
 800c204:	f7f4 f9a4 	bl	8000550 <__aeabi_dmul>
 800c208:	a385      	add	r3, pc, #532	; (adr r3, 800c420 <__ieee754_acos+0x290>)
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	f7f3 ffe9 	bl	80001e4 <__adddf3>
 800c212:	4632      	mov	r2, r6
 800c214:	463b      	mov	r3, r7
 800c216:	f7f4 f99b 	bl	8000550 <__aeabi_dmul>
 800c21a:	a383      	add	r3, pc, #524	; (adr r3, 800c428 <__ieee754_acos+0x298>)
 800c21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c220:	f7f3 ffde 	bl	80001e0 <__aeabi_dsub>
 800c224:	4632      	mov	r2, r6
 800c226:	463b      	mov	r3, r7
 800c228:	f7f4 f992 	bl	8000550 <__aeabi_dmul>
 800c22c:	a380      	add	r3, pc, #512	; (adr r3, 800c430 <__ieee754_acos+0x2a0>)
 800c22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c232:	f7f3 ffd7 	bl	80001e4 <__adddf3>
 800c236:	4632      	mov	r2, r6
 800c238:	463b      	mov	r3, r7
 800c23a:	f7f4 f989 	bl	8000550 <__aeabi_dmul>
 800c23e:	a37e      	add	r3, pc, #504	; (adr r3, 800c438 <__ieee754_acos+0x2a8>)
 800c240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c244:	f7f3 ffcc 	bl	80001e0 <__aeabi_dsub>
 800c248:	4632      	mov	r2, r6
 800c24a:	463b      	mov	r3, r7
 800c24c:	f7f4 f980 	bl	8000550 <__aeabi_dmul>
 800c250:	a37b      	add	r3, pc, #492	; (adr r3, 800c440 <__ieee754_acos+0x2b0>)
 800c252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c256:	f7f3 ffc5 	bl	80001e4 <__adddf3>
 800c25a:	4632      	mov	r2, r6
 800c25c:	463b      	mov	r3, r7
 800c25e:	f7f4 f977 	bl	8000550 <__aeabi_dmul>
 800c262:	a379      	add	r3, pc, #484	; (adr r3, 800c448 <__ieee754_acos+0x2b8>)
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	4680      	mov	r8, r0
 800c26a:	4689      	mov	r9, r1
 800c26c:	4630      	mov	r0, r6
 800c26e:	4639      	mov	r1, r7
 800c270:	f7f4 f96e 	bl	8000550 <__aeabi_dmul>
 800c274:	a376      	add	r3, pc, #472	; (adr r3, 800c450 <__ieee754_acos+0x2c0>)
 800c276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27a:	f7f3 ffb1 	bl	80001e0 <__aeabi_dsub>
 800c27e:	4632      	mov	r2, r6
 800c280:	463b      	mov	r3, r7
 800c282:	f7f4 f965 	bl	8000550 <__aeabi_dmul>
 800c286:	a374      	add	r3, pc, #464	; (adr r3, 800c458 <__ieee754_acos+0x2c8>)
 800c288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28c:	f7f3 ffaa 	bl	80001e4 <__adddf3>
 800c290:	4632      	mov	r2, r6
 800c292:	463b      	mov	r3, r7
 800c294:	f7f4 f95c 	bl	8000550 <__aeabi_dmul>
 800c298:	a371      	add	r3, pc, #452	; (adr r3, 800c460 <__ieee754_acos+0x2d0>)
 800c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29e:	f7f3 ff9f 	bl	80001e0 <__aeabi_dsub>
 800c2a2:	4632      	mov	r2, r6
 800c2a4:	463b      	mov	r3, r7
 800c2a6:	f7f4 f953 	bl	8000550 <__aeabi_dmul>
 800c2aa:	4b76      	ldr	r3, [pc, #472]	; (800c484 <__ieee754_acos+0x2f4>)
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	f7f3 ff99 	bl	80001e4 <__adddf3>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	4640      	mov	r0, r8
 800c2b8:	4649      	mov	r1, r9
 800c2ba:	f7f4 fa73 	bl	80007a4 <__aeabi_ddiv>
 800c2be:	4622      	mov	r2, r4
 800c2c0:	462b      	mov	r3, r5
 800c2c2:	f7f4 f945 	bl	8000550 <__aeabi_dmul>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	a167      	add	r1, pc, #412	; (adr r1, 800c468 <__ieee754_acos+0x2d8>)
 800c2cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2d0:	f7f3 ff86 	bl	80001e0 <__aeabi_dsub>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	4620      	mov	r0, r4
 800c2da:	4629      	mov	r1, r5
 800c2dc:	f7f3 ff80 	bl	80001e0 <__aeabi_dsub>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	a162      	add	r1, pc, #392	; (adr r1, 800c470 <__ieee754_acos+0x2e0>)
 800c2e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2ea:	f7f3 ff79 	bl	80001e0 <__aeabi_dsub>
 800c2ee:	e771      	b.n	800c1d4 <__ieee754_acos+0x44>
 800c2f0:	2d00      	cmp	r5, #0
 800c2f2:	f280 80cb 	bge.w	800c48c <__ieee754_acos+0x2fc>
 800c2f6:	ee10 0a10 	vmov	r0, s0
 800c2fa:	4b62      	ldr	r3, [pc, #392]	; (800c484 <__ieee754_acos+0x2f4>)
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	4629      	mov	r1, r5
 800c300:	f7f3 ff70 	bl	80001e4 <__adddf3>
 800c304:	4b60      	ldr	r3, [pc, #384]	; (800c488 <__ieee754_acos+0x2f8>)
 800c306:	2200      	movs	r2, #0
 800c308:	f7f4 f922 	bl	8000550 <__aeabi_dmul>
 800c30c:	a342      	add	r3, pc, #264	; (adr r3, 800c418 <__ieee754_acos+0x288>)
 800c30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c312:	4604      	mov	r4, r0
 800c314:	460d      	mov	r5, r1
 800c316:	f7f4 f91b 	bl	8000550 <__aeabi_dmul>
 800c31a:	a341      	add	r3, pc, #260	; (adr r3, 800c420 <__ieee754_acos+0x290>)
 800c31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c320:	f7f3 ff60 	bl	80001e4 <__adddf3>
 800c324:	4622      	mov	r2, r4
 800c326:	462b      	mov	r3, r5
 800c328:	f7f4 f912 	bl	8000550 <__aeabi_dmul>
 800c32c:	a33e      	add	r3, pc, #248	; (adr r3, 800c428 <__ieee754_acos+0x298>)
 800c32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c332:	f7f3 ff55 	bl	80001e0 <__aeabi_dsub>
 800c336:	4622      	mov	r2, r4
 800c338:	462b      	mov	r3, r5
 800c33a:	f7f4 f909 	bl	8000550 <__aeabi_dmul>
 800c33e:	a33c      	add	r3, pc, #240	; (adr r3, 800c430 <__ieee754_acos+0x2a0>)
 800c340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c344:	f7f3 ff4e 	bl	80001e4 <__adddf3>
 800c348:	4622      	mov	r2, r4
 800c34a:	462b      	mov	r3, r5
 800c34c:	f7f4 f900 	bl	8000550 <__aeabi_dmul>
 800c350:	a339      	add	r3, pc, #228	; (adr r3, 800c438 <__ieee754_acos+0x2a8>)
 800c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c356:	f7f3 ff43 	bl	80001e0 <__aeabi_dsub>
 800c35a:	4622      	mov	r2, r4
 800c35c:	462b      	mov	r3, r5
 800c35e:	f7f4 f8f7 	bl	8000550 <__aeabi_dmul>
 800c362:	a337      	add	r3, pc, #220	; (adr r3, 800c440 <__ieee754_acos+0x2b0>)
 800c364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c368:	f7f3 ff3c 	bl	80001e4 <__adddf3>
 800c36c:	4622      	mov	r2, r4
 800c36e:	462b      	mov	r3, r5
 800c370:	f7f4 f8ee 	bl	8000550 <__aeabi_dmul>
 800c374:	ec45 4b10 	vmov	d0, r4, r5
 800c378:	4680      	mov	r8, r0
 800c37a:	4689      	mov	r9, r1
 800c37c:	f000 fe96 	bl	800d0ac <__ieee754_sqrt>
 800c380:	a331      	add	r3, pc, #196	; (adr r3, 800c448 <__ieee754_acos+0x2b8>)
 800c382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c386:	4620      	mov	r0, r4
 800c388:	4629      	mov	r1, r5
 800c38a:	ec57 6b10 	vmov	r6, r7, d0
 800c38e:	f7f4 f8df 	bl	8000550 <__aeabi_dmul>
 800c392:	a32f      	add	r3, pc, #188	; (adr r3, 800c450 <__ieee754_acos+0x2c0>)
 800c394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c398:	f7f3 ff22 	bl	80001e0 <__aeabi_dsub>
 800c39c:	4622      	mov	r2, r4
 800c39e:	462b      	mov	r3, r5
 800c3a0:	f7f4 f8d6 	bl	8000550 <__aeabi_dmul>
 800c3a4:	a32c      	add	r3, pc, #176	; (adr r3, 800c458 <__ieee754_acos+0x2c8>)
 800c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3aa:	f7f3 ff1b 	bl	80001e4 <__adddf3>
 800c3ae:	4622      	mov	r2, r4
 800c3b0:	462b      	mov	r3, r5
 800c3b2:	f7f4 f8cd 	bl	8000550 <__aeabi_dmul>
 800c3b6:	a32a      	add	r3, pc, #168	; (adr r3, 800c460 <__ieee754_acos+0x2d0>)
 800c3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3bc:	f7f3 ff10 	bl	80001e0 <__aeabi_dsub>
 800c3c0:	4622      	mov	r2, r4
 800c3c2:	462b      	mov	r3, r5
 800c3c4:	f7f4 f8c4 	bl	8000550 <__aeabi_dmul>
 800c3c8:	4b2e      	ldr	r3, [pc, #184]	; (800c484 <__ieee754_acos+0x2f4>)
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f7f3 ff0a 	bl	80001e4 <__adddf3>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	4640      	mov	r0, r8
 800c3d6:	4649      	mov	r1, r9
 800c3d8:	f7f4 f9e4 	bl	80007a4 <__aeabi_ddiv>
 800c3dc:	4632      	mov	r2, r6
 800c3de:	463b      	mov	r3, r7
 800c3e0:	f7f4 f8b6 	bl	8000550 <__aeabi_dmul>
 800c3e4:	a320      	add	r3, pc, #128	; (adr r3, 800c468 <__ieee754_acos+0x2d8>)
 800c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ea:	f7f3 fef9 	bl	80001e0 <__aeabi_dsub>
 800c3ee:	4632      	mov	r2, r6
 800c3f0:	463b      	mov	r3, r7
 800c3f2:	f7f3 fef7 	bl	80001e4 <__adddf3>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	f7f3 fef3 	bl	80001e4 <__adddf3>
 800c3fe:	4602      	mov	r2, r0
 800c400:	460b      	mov	r3, r1
 800c402:	a103      	add	r1, pc, #12	; (adr r1, 800c410 <__ieee754_acos+0x280>)
 800c404:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c408:	e76f      	b.n	800c2ea <__ieee754_acos+0x15a>
 800c40a:	bf00      	nop
 800c40c:	f3af 8000 	nop.w
 800c410:	54442d18 	.word	0x54442d18
 800c414:	400921fb 	.word	0x400921fb
 800c418:	0dfdf709 	.word	0x0dfdf709
 800c41c:	3f023de1 	.word	0x3f023de1
 800c420:	7501b288 	.word	0x7501b288
 800c424:	3f49efe0 	.word	0x3f49efe0
 800c428:	b5688f3b 	.word	0xb5688f3b
 800c42c:	3fa48228 	.word	0x3fa48228
 800c430:	0e884455 	.word	0x0e884455
 800c434:	3fc9c155 	.word	0x3fc9c155
 800c438:	03eb6f7d 	.word	0x03eb6f7d
 800c43c:	3fd4d612 	.word	0x3fd4d612
 800c440:	55555555 	.word	0x55555555
 800c444:	3fc55555 	.word	0x3fc55555
 800c448:	b12e9282 	.word	0xb12e9282
 800c44c:	3fb3b8c5 	.word	0x3fb3b8c5
 800c450:	1b8d0159 	.word	0x1b8d0159
 800c454:	3fe6066c 	.word	0x3fe6066c
 800c458:	9c598ac8 	.word	0x9c598ac8
 800c45c:	40002ae5 	.word	0x40002ae5
 800c460:	1c8a2d4b 	.word	0x1c8a2d4b
 800c464:	40033a27 	.word	0x40033a27
 800c468:	33145c07 	.word	0x33145c07
 800c46c:	3c91a626 	.word	0x3c91a626
 800c470:	54442d18 	.word	0x54442d18
 800c474:	3ff921fb 	.word	0x3ff921fb
 800c478:	3fefffff 	.word	0x3fefffff
 800c47c:	3fdfffff 	.word	0x3fdfffff
 800c480:	3c600000 	.word	0x3c600000
 800c484:	3ff00000 	.word	0x3ff00000
 800c488:	3fe00000 	.word	0x3fe00000
 800c48c:	ee10 2a10 	vmov	r2, s0
 800c490:	462b      	mov	r3, r5
 800c492:	496d      	ldr	r1, [pc, #436]	; (800c648 <__ieee754_acos+0x4b8>)
 800c494:	2000      	movs	r0, #0
 800c496:	f7f3 fea3 	bl	80001e0 <__aeabi_dsub>
 800c49a:	4b6c      	ldr	r3, [pc, #432]	; (800c64c <__ieee754_acos+0x4bc>)
 800c49c:	2200      	movs	r2, #0
 800c49e:	f7f4 f857 	bl	8000550 <__aeabi_dmul>
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	460d      	mov	r5, r1
 800c4a6:	ec45 4b10 	vmov	d0, r4, r5
 800c4aa:	f000 fdff 	bl	800d0ac <__ieee754_sqrt>
 800c4ae:	a34e      	add	r3, pc, #312	; (adr r3, 800c5e8 <__ieee754_acos+0x458>)
 800c4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	ec59 8b10 	vmov	r8, r9, d0
 800c4bc:	f7f4 f848 	bl	8000550 <__aeabi_dmul>
 800c4c0:	a34b      	add	r3, pc, #300	; (adr r3, 800c5f0 <__ieee754_acos+0x460>)
 800c4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c6:	f7f3 fe8d 	bl	80001e4 <__adddf3>
 800c4ca:	4622      	mov	r2, r4
 800c4cc:	462b      	mov	r3, r5
 800c4ce:	f7f4 f83f 	bl	8000550 <__aeabi_dmul>
 800c4d2:	a349      	add	r3, pc, #292	; (adr r3, 800c5f8 <__ieee754_acos+0x468>)
 800c4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d8:	f7f3 fe82 	bl	80001e0 <__aeabi_dsub>
 800c4dc:	4622      	mov	r2, r4
 800c4de:	462b      	mov	r3, r5
 800c4e0:	f7f4 f836 	bl	8000550 <__aeabi_dmul>
 800c4e4:	a346      	add	r3, pc, #280	; (adr r3, 800c600 <__ieee754_acos+0x470>)
 800c4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ea:	f7f3 fe7b 	bl	80001e4 <__adddf3>
 800c4ee:	4622      	mov	r2, r4
 800c4f0:	462b      	mov	r3, r5
 800c4f2:	f7f4 f82d 	bl	8000550 <__aeabi_dmul>
 800c4f6:	a344      	add	r3, pc, #272	; (adr r3, 800c608 <__ieee754_acos+0x478>)
 800c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fc:	f7f3 fe70 	bl	80001e0 <__aeabi_dsub>
 800c500:	4622      	mov	r2, r4
 800c502:	462b      	mov	r3, r5
 800c504:	f7f4 f824 	bl	8000550 <__aeabi_dmul>
 800c508:	a341      	add	r3, pc, #260	; (adr r3, 800c610 <__ieee754_acos+0x480>)
 800c50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50e:	f7f3 fe69 	bl	80001e4 <__adddf3>
 800c512:	4622      	mov	r2, r4
 800c514:	462b      	mov	r3, r5
 800c516:	f7f4 f81b 	bl	8000550 <__aeabi_dmul>
 800c51a:	a33f      	add	r3, pc, #252	; (adr r3, 800c618 <__ieee754_acos+0x488>)
 800c51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c520:	4682      	mov	sl, r0
 800c522:	468b      	mov	fp, r1
 800c524:	4620      	mov	r0, r4
 800c526:	4629      	mov	r1, r5
 800c528:	f7f4 f812 	bl	8000550 <__aeabi_dmul>
 800c52c:	a33c      	add	r3, pc, #240	; (adr r3, 800c620 <__ieee754_acos+0x490>)
 800c52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c532:	f7f3 fe55 	bl	80001e0 <__aeabi_dsub>
 800c536:	4622      	mov	r2, r4
 800c538:	462b      	mov	r3, r5
 800c53a:	f7f4 f809 	bl	8000550 <__aeabi_dmul>
 800c53e:	a33a      	add	r3, pc, #232	; (adr r3, 800c628 <__ieee754_acos+0x498>)
 800c540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c544:	f7f3 fe4e 	bl	80001e4 <__adddf3>
 800c548:	4622      	mov	r2, r4
 800c54a:	462b      	mov	r3, r5
 800c54c:	f7f4 f800 	bl	8000550 <__aeabi_dmul>
 800c550:	a337      	add	r3, pc, #220	; (adr r3, 800c630 <__ieee754_acos+0x4a0>)
 800c552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c556:	f7f3 fe43 	bl	80001e0 <__aeabi_dsub>
 800c55a:	4622      	mov	r2, r4
 800c55c:	462b      	mov	r3, r5
 800c55e:	f7f3 fff7 	bl	8000550 <__aeabi_dmul>
 800c562:	4b39      	ldr	r3, [pc, #228]	; (800c648 <__ieee754_acos+0x4b8>)
 800c564:	2200      	movs	r2, #0
 800c566:	f7f3 fe3d 	bl	80001e4 <__adddf3>
 800c56a:	4602      	mov	r2, r0
 800c56c:	460b      	mov	r3, r1
 800c56e:	4650      	mov	r0, sl
 800c570:	4659      	mov	r1, fp
 800c572:	f7f4 f917 	bl	80007a4 <__aeabi_ddiv>
 800c576:	4642      	mov	r2, r8
 800c578:	464b      	mov	r3, r9
 800c57a:	f7f3 ffe9 	bl	8000550 <__aeabi_dmul>
 800c57e:	2600      	movs	r6, #0
 800c580:	4682      	mov	sl, r0
 800c582:	468b      	mov	fp, r1
 800c584:	4632      	mov	r2, r6
 800c586:	464b      	mov	r3, r9
 800c588:	4630      	mov	r0, r6
 800c58a:	4649      	mov	r1, r9
 800c58c:	f7f3 ffe0 	bl	8000550 <__aeabi_dmul>
 800c590:	4602      	mov	r2, r0
 800c592:	460b      	mov	r3, r1
 800c594:	4620      	mov	r0, r4
 800c596:	4629      	mov	r1, r5
 800c598:	f7f3 fe22 	bl	80001e0 <__aeabi_dsub>
 800c59c:	4632      	mov	r2, r6
 800c59e:	4604      	mov	r4, r0
 800c5a0:	460d      	mov	r5, r1
 800c5a2:	464b      	mov	r3, r9
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	4649      	mov	r1, r9
 800c5a8:	f7f3 fe1c 	bl	80001e4 <__adddf3>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	4629      	mov	r1, r5
 800c5b4:	f7f4 f8f6 	bl	80007a4 <__aeabi_ddiv>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4650      	mov	r0, sl
 800c5be:	4659      	mov	r1, fp
 800c5c0:	f7f3 fe10 	bl	80001e4 <__adddf3>
 800c5c4:	4632      	mov	r2, r6
 800c5c6:	464b      	mov	r3, r9
 800c5c8:	f7f3 fe0c 	bl	80001e4 <__adddf3>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	f7f3 fe08 	bl	80001e4 <__adddf3>
 800c5d4:	e5fe      	b.n	800c1d4 <__ieee754_acos+0x44>
 800c5d6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800c638 <__ieee754_acos+0x4a8>
 800c5da:	e5ed      	b.n	800c1b8 <__ieee754_acos+0x28>
 800c5dc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800c640 <__ieee754_acos+0x4b0>
 800c5e0:	e5ea      	b.n	800c1b8 <__ieee754_acos+0x28>
 800c5e2:	bf00      	nop
 800c5e4:	f3af 8000 	nop.w
 800c5e8:	0dfdf709 	.word	0x0dfdf709
 800c5ec:	3f023de1 	.word	0x3f023de1
 800c5f0:	7501b288 	.word	0x7501b288
 800c5f4:	3f49efe0 	.word	0x3f49efe0
 800c5f8:	b5688f3b 	.word	0xb5688f3b
 800c5fc:	3fa48228 	.word	0x3fa48228
 800c600:	0e884455 	.word	0x0e884455
 800c604:	3fc9c155 	.word	0x3fc9c155
 800c608:	03eb6f7d 	.word	0x03eb6f7d
 800c60c:	3fd4d612 	.word	0x3fd4d612
 800c610:	55555555 	.word	0x55555555
 800c614:	3fc55555 	.word	0x3fc55555
 800c618:	b12e9282 	.word	0xb12e9282
 800c61c:	3fb3b8c5 	.word	0x3fb3b8c5
 800c620:	1b8d0159 	.word	0x1b8d0159
 800c624:	3fe6066c 	.word	0x3fe6066c
 800c628:	9c598ac8 	.word	0x9c598ac8
 800c62c:	40002ae5 	.word	0x40002ae5
 800c630:	1c8a2d4b 	.word	0x1c8a2d4b
 800c634:	40033a27 	.word	0x40033a27
	...
 800c640:	54442d18 	.word	0x54442d18
 800c644:	3ff921fb 	.word	0x3ff921fb
 800c648:	3ff00000 	.word	0x3ff00000
 800c64c:	3fe00000 	.word	0x3fe00000

0800c650 <__ieee754_pow>:
 800c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	ed2d 8b06 	vpush	{d8-d10}
 800c658:	b089      	sub	sp, #36	; 0x24
 800c65a:	ed8d 1b00 	vstr	d1, [sp]
 800c65e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c662:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c666:	ea58 0102 	orrs.w	r1, r8, r2
 800c66a:	ec57 6b10 	vmov	r6, r7, d0
 800c66e:	d115      	bne.n	800c69c <__ieee754_pow+0x4c>
 800c670:	19b3      	adds	r3, r6, r6
 800c672:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c676:	4152      	adcs	r2, r2
 800c678:	4299      	cmp	r1, r3
 800c67a:	4b89      	ldr	r3, [pc, #548]	; (800c8a0 <__ieee754_pow+0x250>)
 800c67c:	4193      	sbcs	r3, r2
 800c67e:	f080 84d2 	bcs.w	800d026 <__ieee754_pow+0x9d6>
 800c682:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c686:	4630      	mov	r0, r6
 800c688:	4639      	mov	r1, r7
 800c68a:	f7f3 fdab 	bl	80001e4 <__adddf3>
 800c68e:	ec41 0b10 	vmov	d0, r0, r1
 800c692:	b009      	add	sp, #36	; 0x24
 800c694:	ecbd 8b06 	vpop	{d8-d10}
 800c698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c69c:	4b81      	ldr	r3, [pc, #516]	; (800c8a4 <__ieee754_pow+0x254>)
 800c69e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c6a2:	429c      	cmp	r4, r3
 800c6a4:	ee10 aa10 	vmov	sl, s0
 800c6a8:	463d      	mov	r5, r7
 800c6aa:	dc06      	bgt.n	800c6ba <__ieee754_pow+0x6a>
 800c6ac:	d101      	bne.n	800c6b2 <__ieee754_pow+0x62>
 800c6ae:	2e00      	cmp	r6, #0
 800c6b0:	d1e7      	bne.n	800c682 <__ieee754_pow+0x32>
 800c6b2:	4598      	cmp	r8, r3
 800c6b4:	dc01      	bgt.n	800c6ba <__ieee754_pow+0x6a>
 800c6b6:	d10f      	bne.n	800c6d8 <__ieee754_pow+0x88>
 800c6b8:	b172      	cbz	r2, 800c6d8 <__ieee754_pow+0x88>
 800c6ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c6be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c6c2:	ea55 050a 	orrs.w	r5, r5, sl
 800c6c6:	d1dc      	bne.n	800c682 <__ieee754_pow+0x32>
 800c6c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c6cc:	18db      	adds	r3, r3, r3
 800c6ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c6d2:	4152      	adcs	r2, r2
 800c6d4:	429d      	cmp	r5, r3
 800c6d6:	e7d0      	b.n	800c67a <__ieee754_pow+0x2a>
 800c6d8:	2d00      	cmp	r5, #0
 800c6da:	da3b      	bge.n	800c754 <__ieee754_pow+0x104>
 800c6dc:	4b72      	ldr	r3, [pc, #456]	; (800c8a8 <__ieee754_pow+0x258>)
 800c6de:	4598      	cmp	r8, r3
 800c6e0:	dc51      	bgt.n	800c786 <__ieee754_pow+0x136>
 800c6e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c6e6:	4598      	cmp	r8, r3
 800c6e8:	f340 84ac 	ble.w	800d044 <__ieee754_pow+0x9f4>
 800c6ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c6f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c6f4:	2b14      	cmp	r3, #20
 800c6f6:	dd0f      	ble.n	800c718 <__ieee754_pow+0xc8>
 800c6f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c6fc:	fa22 f103 	lsr.w	r1, r2, r3
 800c700:	fa01 f303 	lsl.w	r3, r1, r3
 800c704:	4293      	cmp	r3, r2
 800c706:	f040 849d 	bne.w	800d044 <__ieee754_pow+0x9f4>
 800c70a:	f001 0101 	and.w	r1, r1, #1
 800c70e:	f1c1 0302 	rsb	r3, r1, #2
 800c712:	9304      	str	r3, [sp, #16]
 800c714:	b182      	cbz	r2, 800c738 <__ieee754_pow+0xe8>
 800c716:	e05f      	b.n	800c7d8 <__ieee754_pow+0x188>
 800c718:	2a00      	cmp	r2, #0
 800c71a:	d15b      	bne.n	800c7d4 <__ieee754_pow+0x184>
 800c71c:	f1c3 0314 	rsb	r3, r3, #20
 800c720:	fa48 f103 	asr.w	r1, r8, r3
 800c724:	fa01 f303 	lsl.w	r3, r1, r3
 800c728:	4543      	cmp	r3, r8
 800c72a:	f040 8488 	bne.w	800d03e <__ieee754_pow+0x9ee>
 800c72e:	f001 0101 	and.w	r1, r1, #1
 800c732:	f1c1 0302 	rsb	r3, r1, #2
 800c736:	9304      	str	r3, [sp, #16]
 800c738:	4b5c      	ldr	r3, [pc, #368]	; (800c8ac <__ieee754_pow+0x25c>)
 800c73a:	4598      	cmp	r8, r3
 800c73c:	d132      	bne.n	800c7a4 <__ieee754_pow+0x154>
 800c73e:	f1b9 0f00 	cmp.w	r9, #0
 800c742:	f280 8478 	bge.w	800d036 <__ieee754_pow+0x9e6>
 800c746:	4959      	ldr	r1, [pc, #356]	; (800c8ac <__ieee754_pow+0x25c>)
 800c748:	4632      	mov	r2, r6
 800c74a:	463b      	mov	r3, r7
 800c74c:	2000      	movs	r0, #0
 800c74e:	f7f4 f829 	bl	80007a4 <__aeabi_ddiv>
 800c752:	e79c      	b.n	800c68e <__ieee754_pow+0x3e>
 800c754:	2300      	movs	r3, #0
 800c756:	9304      	str	r3, [sp, #16]
 800c758:	2a00      	cmp	r2, #0
 800c75a:	d13d      	bne.n	800c7d8 <__ieee754_pow+0x188>
 800c75c:	4b51      	ldr	r3, [pc, #324]	; (800c8a4 <__ieee754_pow+0x254>)
 800c75e:	4598      	cmp	r8, r3
 800c760:	d1ea      	bne.n	800c738 <__ieee754_pow+0xe8>
 800c762:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c766:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c76a:	ea53 030a 	orrs.w	r3, r3, sl
 800c76e:	f000 845a 	beq.w	800d026 <__ieee754_pow+0x9d6>
 800c772:	4b4f      	ldr	r3, [pc, #316]	; (800c8b0 <__ieee754_pow+0x260>)
 800c774:	429c      	cmp	r4, r3
 800c776:	dd08      	ble.n	800c78a <__ieee754_pow+0x13a>
 800c778:	f1b9 0f00 	cmp.w	r9, #0
 800c77c:	f2c0 8457 	blt.w	800d02e <__ieee754_pow+0x9de>
 800c780:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c784:	e783      	b.n	800c68e <__ieee754_pow+0x3e>
 800c786:	2302      	movs	r3, #2
 800c788:	e7e5      	b.n	800c756 <__ieee754_pow+0x106>
 800c78a:	f1b9 0f00 	cmp.w	r9, #0
 800c78e:	f04f 0000 	mov.w	r0, #0
 800c792:	f04f 0100 	mov.w	r1, #0
 800c796:	f6bf af7a 	bge.w	800c68e <__ieee754_pow+0x3e>
 800c79a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c79e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c7a2:	e774      	b.n	800c68e <__ieee754_pow+0x3e>
 800c7a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c7a8:	d106      	bne.n	800c7b8 <__ieee754_pow+0x168>
 800c7aa:	4632      	mov	r2, r6
 800c7ac:	463b      	mov	r3, r7
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	4639      	mov	r1, r7
 800c7b2:	f7f3 fecd 	bl	8000550 <__aeabi_dmul>
 800c7b6:	e76a      	b.n	800c68e <__ieee754_pow+0x3e>
 800c7b8:	4b3e      	ldr	r3, [pc, #248]	; (800c8b4 <__ieee754_pow+0x264>)
 800c7ba:	4599      	cmp	r9, r3
 800c7bc:	d10c      	bne.n	800c7d8 <__ieee754_pow+0x188>
 800c7be:	2d00      	cmp	r5, #0
 800c7c0:	db0a      	blt.n	800c7d8 <__ieee754_pow+0x188>
 800c7c2:	ec47 6b10 	vmov	d0, r6, r7
 800c7c6:	b009      	add	sp, #36	; 0x24
 800c7c8:	ecbd 8b06 	vpop	{d8-d10}
 800c7cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d0:	f000 bc6c 	b.w	800d0ac <__ieee754_sqrt>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	9304      	str	r3, [sp, #16]
 800c7d8:	ec47 6b10 	vmov	d0, r6, r7
 800c7dc:	f001 f9a2 	bl	800db24 <fabs>
 800c7e0:	ec51 0b10 	vmov	r0, r1, d0
 800c7e4:	f1ba 0f00 	cmp.w	sl, #0
 800c7e8:	d129      	bne.n	800c83e <__ieee754_pow+0x1ee>
 800c7ea:	b124      	cbz	r4, 800c7f6 <__ieee754_pow+0x1a6>
 800c7ec:	4b2f      	ldr	r3, [pc, #188]	; (800c8ac <__ieee754_pow+0x25c>)
 800c7ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d123      	bne.n	800c83e <__ieee754_pow+0x1ee>
 800c7f6:	f1b9 0f00 	cmp.w	r9, #0
 800c7fa:	da05      	bge.n	800c808 <__ieee754_pow+0x1b8>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	460b      	mov	r3, r1
 800c800:	2000      	movs	r0, #0
 800c802:	492a      	ldr	r1, [pc, #168]	; (800c8ac <__ieee754_pow+0x25c>)
 800c804:	f7f3 ffce 	bl	80007a4 <__aeabi_ddiv>
 800c808:	2d00      	cmp	r5, #0
 800c80a:	f6bf af40 	bge.w	800c68e <__ieee754_pow+0x3e>
 800c80e:	9b04      	ldr	r3, [sp, #16]
 800c810:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c814:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c818:	4323      	orrs	r3, r4
 800c81a:	d108      	bne.n	800c82e <__ieee754_pow+0x1de>
 800c81c:	4602      	mov	r2, r0
 800c81e:	460b      	mov	r3, r1
 800c820:	4610      	mov	r0, r2
 800c822:	4619      	mov	r1, r3
 800c824:	f7f3 fcdc 	bl	80001e0 <__aeabi_dsub>
 800c828:	4602      	mov	r2, r0
 800c82a:	460b      	mov	r3, r1
 800c82c:	e78f      	b.n	800c74e <__ieee754_pow+0xfe>
 800c82e:	9b04      	ldr	r3, [sp, #16]
 800c830:	2b01      	cmp	r3, #1
 800c832:	f47f af2c 	bne.w	800c68e <__ieee754_pow+0x3e>
 800c836:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c83a:	4619      	mov	r1, r3
 800c83c:	e727      	b.n	800c68e <__ieee754_pow+0x3e>
 800c83e:	0feb      	lsrs	r3, r5, #31
 800c840:	3b01      	subs	r3, #1
 800c842:	9306      	str	r3, [sp, #24]
 800c844:	9a06      	ldr	r2, [sp, #24]
 800c846:	9b04      	ldr	r3, [sp, #16]
 800c848:	4313      	orrs	r3, r2
 800c84a:	d102      	bne.n	800c852 <__ieee754_pow+0x202>
 800c84c:	4632      	mov	r2, r6
 800c84e:	463b      	mov	r3, r7
 800c850:	e7e6      	b.n	800c820 <__ieee754_pow+0x1d0>
 800c852:	4b19      	ldr	r3, [pc, #100]	; (800c8b8 <__ieee754_pow+0x268>)
 800c854:	4598      	cmp	r8, r3
 800c856:	f340 80fb 	ble.w	800ca50 <__ieee754_pow+0x400>
 800c85a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c85e:	4598      	cmp	r8, r3
 800c860:	4b13      	ldr	r3, [pc, #76]	; (800c8b0 <__ieee754_pow+0x260>)
 800c862:	dd0c      	ble.n	800c87e <__ieee754_pow+0x22e>
 800c864:	429c      	cmp	r4, r3
 800c866:	dc0f      	bgt.n	800c888 <__ieee754_pow+0x238>
 800c868:	f1b9 0f00 	cmp.w	r9, #0
 800c86c:	da0f      	bge.n	800c88e <__ieee754_pow+0x23e>
 800c86e:	2000      	movs	r0, #0
 800c870:	b009      	add	sp, #36	; 0x24
 800c872:	ecbd 8b06 	vpop	{d8-d10}
 800c876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c87a:	f001 b94a 	b.w	800db12 <__math_oflow>
 800c87e:	429c      	cmp	r4, r3
 800c880:	dbf2      	blt.n	800c868 <__ieee754_pow+0x218>
 800c882:	4b0a      	ldr	r3, [pc, #40]	; (800c8ac <__ieee754_pow+0x25c>)
 800c884:	429c      	cmp	r4, r3
 800c886:	dd19      	ble.n	800c8bc <__ieee754_pow+0x26c>
 800c888:	f1b9 0f00 	cmp.w	r9, #0
 800c88c:	dcef      	bgt.n	800c86e <__ieee754_pow+0x21e>
 800c88e:	2000      	movs	r0, #0
 800c890:	b009      	add	sp, #36	; 0x24
 800c892:	ecbd 8b06 	vpop	{d8-d10}
 800c896:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c89a:	f001 b931 	b.w	800db00 <__math_uflow>
 800c89e:	bf00      	nop
 800c8a0:	fff00000 	.word	0xfff00000
 800c8a4:	7ff00000 	.word	0x7ff00000
 800c8a8:	433fffff 	.word	0x433fffff
 800c8ac:	3ff00000 	.word	0x3ff00000
 800c8b0:	3fefffff 	.word	0x3fefffff
 800c8b4:	3fe00000 	.word	0x3fe00000
 800c8b8:	41e00000 	.word	0x41e00000
 800c8bc:	4b60      	ldr	r3, [pc, #384]	; (800ca40 <__ieee754_pow+0x3f0>)
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f7f3 fc8e 	bl	80001e0 <__aeabi_dsub>
 800c8c4:	a354      	add	r3, pc, #336	; (adr r3, 800ca18 <__ieee754_pow+0x3c8>)
 800c8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	460d      	mov	r5, r1
 800c8ce:	f7f3 fe3f 	bl	8000550 <__aeabi_dmul>
 800c8d2:	a353      	add	r3, pc, #332	; (adr r3, 800ca20 <__ieee754_pow+0x3d0>)
 800c8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d8:	4606      	mov	r6, r0
 800c8da:	460f      	mov	r7, r1
 800c8dc:	4620      	mov	r0, r4
 800c8de:	4629      	mov	r1, r5
 800c8e0:	f7f3 fe36 	bl	8000550 <__aeabi_dmul>
 800c8e4:	4b57      	ldr	r3, [pc, #348]	; (800ca44 <__ieee754_pow+0x3f4>)
 800c8e6:	4682      	mov	sl, r0
 800c8e8:	468b      	mov	fp, r1
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	4629      	mov	r1, r5
 800c8f0:	f7f3 fe2e 	bl	8000550 <__aeabi_dmul>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	a14b      	add	r1, pc, #300	; (adr r1, 800ca28 <__ieee754_pow+0x3d8>)
 800c8fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8fe:	f7f3 fc6f 	bl	80001e0 <__aeabi_dsub>
 800c902:	4622      	mov	r2, r4
 800c904:	462b      	mov	r3, r5
 800c906:	f7f3 fe23 	bl	8000550 <__aeabi_dmul>
 800c90a:	4602      	mov	r2, r0
 800c90c:	460b      	mov	r3, r1
 800c90e:	2000      	movs	r0, #0
 800c910:	494d      	ldr	r1, [pc, #308]	; (800ca48 <__ieee754_pow+0x3f8>)
 800c912:	f7f3 fc65 	bl	80001e0 <__aeabi_dsub>
 800c916:	4622      	mov	r2, r4
 800c918:	4680      	mov	r8, r0
 800c91a:	4689      	mov	r9, r1
 800c91c:	462b      	mov	r3, r5
 800c91e:	4620      	mov	r0, r4
 800c920:	4629      	mov	r1, r5
 800c922:	f7f3 fe15 	bl	8000550 <__aeabi_dmul>
 800c926:	4602      	mov	r2, r0
 800c928:	460b      	mov	r3, r1
 800c92a:	4640      	mov	r0, r8
 800c92c:	4649      	mov	r1, r9
 800c92e:	f7f3 fe0f 	bl	8000550 <__aeabi_dmul>
 800c932:	a33f      	add	r3, pc, #252	; (adr r3, 800ca30 <__ieee754_pow+0x3e0>)
 800c934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c938:	f7f3 fe0a 	bl	8000550 <__aeabi_dmul>
 800c93c:	4602      	mov	r2, r0
 800c93e:	460b      	mov	r3, r1
 800c940:	4650      	mov	r0, sl
 800c942:	4659      	mov	r1, fp
 800c944:	f7f3 fc4c 	bl	80001e0 <__aeabi_dsub>
 800c948:	4602      	mov	r2, r0
 800c94a:	460b      	mov	r3, r1
 800c94c:	4680      	mov	r8, r0
 800c94e:	4689      	mov	r9, r1
 800c950:	4630      	mov	r0, r6
 800c952:	4639      	mov	r1, r7
 800c954:	f7f3 fc46 	bl	80001e4 <__adddf3>
 800c958:	2000      	movs	r0, #0
 800c95a:	4632      	mov	r2, r6
 800c95c:	463b      	mov	r3, r7
 800c95e:	4604      	mov	r4, r0
 800c960:	460d      	mov	r5, r1
 800c962:	f7f3 fc3d 	bl	80001e0 <__aeabi_dsub>
 800c966:	4602      	mov	r2, r0
 800c968:	460b      	mov	r3, r1
 800c96a:	4640      	mov	r0, r8
 800c96c:	4649      	mov	r1, r9
 800c96e:	f7f3 fc37 	bl	80001e0 <__aeabi_dsub>
 800c972:	9b04      	ldr	r3, [sp, #16]
 800c974:	9a06      	ldr	r2, [sp, #24]
 800c976:	3b01      	subs	r3, #1
 800c978:	4313      	orrs	r3, r2
 800c97a:	4682      	mov	sl, r0
 800c97c:	468b      	mov	fp, r1
 800c97e:	f040 81e7 	bne.w	800cd50 <__ieee754_pow+0x700>
 800c982:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ca38 <__ieee754_pow+0x3e8>
 800c986:	eeb0 8a47 	vmov.f32	s16, s14
 800c98a:	eef0 8a67 	vmov.f32	s17, s15
 800c98e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c992:	2600      	movs	r6, #0
 800c994:	4632      	mov	r2, r6
 800c996:	463b      	mov	r3, r7
 800c998:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c99c:	f7f3 fc20 	bl	80001e0 <__aeabi_dsub>
 800c9a0:	4622      	mov	r2, r4
 800c9a2:	462b      	mov	r3, r5
 800c9a4:	f7f3 fdd4 	bl	8000550 <__aeabi_dmul>
 800c9a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9ac:	4680      	mov	r8, r0
 800c9ae:	4689      	mov	r9, r1
 800c9b0:	4650      	mov	r0, sl
 800c9b2:	4659      	mov	r1, fp
 800c9b4:	f7f3 fdcc 	bl	8000550 <__aeabi_dmul>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	4640      	mov	r0, r8
 800c9be:	4649      	mov	r1, r9
 800c9c0:	f7f3 fc10 	bl	80001e4 <__adddf3>
 800c9c4:	4632      	mov	r2, r6
 800c9c6:	463b      	mov	r3, r7
 800c9c8:	4680      	mov	r8, r0
 800c9ca:	4689      	mov	r9, r1
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	4629      	mov	r1, r5
 800c9d0:	f7f3 fdbe 	bl	8000550 <__aeabi_dmul>
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	4604      	mov	r4, r0
 800c9d8:	460d      	mov	r5, r1
 800c9da:	4602      	mov	r2, r0
 800c9dc:	4649      	mov	r1, r9
 800c9de:	4640      	mov	r0, r8
 800c9e0:	f7f3 fc00 	bl	80001e4 <__adddf3>
 800c9e4:	4b19      	ldr	r3, [pc, #100]	; (800ca4c <__ieee754_pow+0x3fc>)
 800c9e6:	4299      	cmp	r1, r3
 800c9e8:	ec45 4b19 	vmov	d9, r4, r5
 800c9ec:	4606      	mov	r6, r0
 800c9ee:	460f      	mov	r7, r1
 800c9f0:	468b      	mov	fp, r1
 800c9f2:	f340 82f1 	ble.w	800cfd8 <__ieee754_pow+0x988>
 800c9f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c9fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c9fe:	4303      	orrs	r3, r0
 800ca00:	f000 81e4 	beq.w	800cdcc <__ieee754_pow+0x77c>
 800ca04:	ec51 0b18 	vmov	r0, r1, d8
 800ca08:	2200      	movs	r2, #0
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	f7f4 f812 	bl	8000a34 <__aeabi_dcmplt>
 800ca10:	3800      	subs	r0, #0
 800ca12:	bf18      	it	ne
 800ca14:	2001      	movne	r0, #1
 800ca16:	e72b      	b.n	800c870 <__ieee754_pow+0x220>
 800ca18:	60000000 	.word	0x60000000
 800ca1c:	3ff71547 	.word	0x3ff71547
 800ca20:	f85ddf44 	.word	0xf85ddf44
 800ca24:	3e54ae0b 	.word	0x3e54ae0b
 800ca28:	55555555 	.word	0x55555555
 800ca2c:	3fd55555 	.word	0x3fd55555
 800ca30:	652b82fe 	.word	0x652b82fe
 800ca34:	3ff71547 	.word	0x3ff71547
 800ca38:	00000000 	.word	0x00000000
 800ca3c:	bff00000 	.word	0xbff00000
 800ca40:	3ff00000 	.word	0x3ff00000
 800ca44:	3fd00000 	.word	0x3fd00000
 800ca48:	3fe00000 	.word	0x3fe00000
 800ca4c:	408fffff 	.word	0x408fffff
 800ca50:	4bd5      	ldr	r3, [pc, #852]	; (800cda8 <__ieee754_pow+0x758>)
 800ca52:	402b      	ands	r3, r5
 800ca54:	2200      	movs	r2, #0
 800ca56:	b92b      	cbnz	r3, 800ca64 <__ieee754_pow+0x414>
 800ca58:	4bd4      	ldr	r3, [pc, #848]	; (800cdac <__ieee754_pow+0x75c>)
 800ca5a:	f7f3 fd79 	bl	8000550 <__aeabi_dmul>
 800ca5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ca62:	460c      	mov	r4, r1
 800ca64:	1523      	asrs	r3, r4, #20
 800ca66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ca6a:	4413      	add	r3, r2
 800ca6c:	9305      	str	r3, [sp, #20]
 800ca6e:	4bd0      	ldr	r3, [pc, #832]	; (800cdb0 <__ieee754_pow+0x760>)
 800ca70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ca74:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ca78:	429c      	cmp	r4, r3
 800ca7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ca7e:	dd08      	ble.n	800ca92 <__ieee754_pow+0x442>
 800ca80:	4bcc      	ldr	r3, [pc, #816]	; (800cdb4 <__ieee754_pow+0x764>)
 800ca82:	429c      	cmp	r4, r3
 800ca84:	f340 8162 	ble.w	800cd4c <__ieee754_pow+0x6fc>
 800ca88:	9b05      	ldr	r3, [sp, #20]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	9305      	str	r3, [sp, #20]
 800ca8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ca92:	2400      	movs	r4, #0
 800ca94:	00e3      	lsls	r3, r4, #3
 800ca96:	9307      	str	r3, [sp, #28]
 800ca98:	4bc7      	ldr	r3, [pc, #796]	; (800cdb8 <__ieee754_pow+0x768>)
 800ca9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca9e:	ed93 7b00 	vldr	d7, [r3]
 800caa2:	4629      	mov	r1, r5
 800caa4:	ec53 2b17 	vmov	r2, r3, d7
 800caa8:	eeb0 9a47 	vmov.f32	s18, s14
 800caac:	eef0 9a67 	vmov.f32	s19, s15
 800cab0:	4682      	mov	sl, r0
 800cab2:	f7f3 fb95 	bl	80001e0 <__aeabi_dsub>
 800cab6:	4652      	mov	r2, sl
 800cab8:	4606      	mov	r6, r0
 800caba:	460f      	mov	r7, r1
 800cabc:	462b      	mov	r3, r5
 800cabe:	ec51 0b19 	vmov	r0, r1, d9
 800cac2:	f7f3 fb8f 	bl	80001e4 <__adddf3>
 800cac6:	4602      	mov	r2, r0
 800cac8:	460b      	mov	r3, r1
 800caca:	2000      	movs	r0, #0
 800cacc:	49bb      	ldr	r1, [pc, #748]	; (800cdbc <__ieee754_pow+0x76c>)
 800cace:	f7f3 fe69 	bl	80007a4 <__aeabi_ddiv>
 800cad2:	ec41 0b1a 	vmov	d10, r0, r1
 800cad6:	4602      	mov	r2, r0
 800cad8:	460b      	mov	r3, r1
 800cada:	4630      	mov	r0, r6
 800cadc:	4639      	mov	r1, r7
 800cade:	f7f3 fd37 	bl	8000550 <__aeabi_dmul>
 800cae2:	2300      	movs	r3, #0
 800cae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cae8:	9302      	str	r3, [sp, #8]
 800caea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800caee:	46ab      	mov	fp, r5
 800caf0:	106d      	asrs	r5, r5, #1
 800caf2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800caf6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cafa:	ec41 0b18 	vmov	d8, r0, r1
 800cafe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800cb02:	2200      	movs	r2, #0
 800cb04:	4640      	mov	r0, r8
 800cb06:	4649      	mov	r1, r9
 800cb08:	4614      	mov	r4, r2
 800cb0a:	461d      	mov	r5, r3
 800cb0c:	f7f3 fd20 	bl	8000550 <__aeabi_dmul>
 800cb10:	4602      	mov	r2, r0
 800cb12:	460b      	mov	r3, r1
 800cb14:	4630      	mov	r0, r6
 800cb16:	4639      	mov	r1, r7
 800cb18:	f7f3 fb62 	bl	80001e0 <__aeabi_dsub>
 800cb1c:	ec53 2b19 	vmov	r2, r3, d9
 800cb20:	4606      	mov	r6, r0
 800cb22:	460f      	mov	r7, r1
 800cb24:	4620      	mov	r0, r4
 800cb26:	4629      	mov	r1, r5
 800cb28:	f7f3 fb5a 	bl	80001e0 <__aeabi_dsub>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	460b      	mov	r3, r1
 800cb30:	4650      	mov	r0, sl
 800cb32:	4659      	mov	r1, fp
 800cb34:	f7f3 fb54 	bl	80001e0 <__aeabi_dsub>
 800cb38:	4642      	mov	r2, r8
 800cb3a:	464b      	mov	r3, r9
 800cb3c:	f7f3 fd08 	bl	8000550 <__aeabi_dmul>
 800cb40:	4602      	mov	r2, r0
 800cb42:	460b      	mov	r3, r1
 800cb44:	4630      	mov	r0, r6
 800cb46:	4639      	mov	r1, r7
 800cb48:	f7f3 fb4a 	bl	80001e0 <__aeabi_dsub>
 800cb4c:	ec53 2b1a 	vmov	r2, r3, d10
 800cb50:	f7f3 fcfe 	bl	8000550 <__aeabi_dmul>
 800cb54:	ec53 2b18 	vmov	r2, r3, d8
 800cb58:	ec41 0b19 	vmov	d9, r0, r1
 800cb5c:	ec51 0b18 	vmov	r0, r1, d8
 800cb60:	f7f3 fcf6 	bl	8000550 <__aeabi_dmul>
 800cb64:	a37c      	add	r3, pc, #496	; (adr r3, 800cd58 <__ieee754_pow+0x708>)
 800cb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	460d      	mov	r5, r1
 800cb6e:	f7f3 fcef 	bl	8000550 <__aeabi_dmul>
 800cb72:	a37b      	add	r3, pc, #492	; (adr r3, 800cd60 <__ieee754_pow+0x710>)
 800cb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb78:	f7f3 fb34 	bl	80001e4 <__adddf3>
 800cb7c:	4622      	mov	r2, r4
 800cb7e:	462b      	mov	r3, r5
 800cb80:	f7f3 fce6 	bl	8000550 <__aeabi_dmul>
 800cb84:	a378      	add	r3, pc, #480	; (adr r3, 800cd68 <__ieee754_pow+0x718>)
 800cb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8a:	f7f3 fb2b 	bl	80001e4 <__adddf3>
 800cb8e:	4622      	mov	r2, r4
 800cb90:	462b      	mov	r3, r5
 800cb92:	f7f3 fcdd 	bl	8000550 <__aeabi_dmul>
 800cb96:	a376      	add	r3, pc, #472	; (adr r3, 800cd70 <__ieee754_pow+0x720>)
 800cb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9c:	f7f3 fb22 	bl	80001e4 <__adddf3>
 800cba0:	4622      	mov	r2, r4
 800cba2:	462b      	mov	r3, r5
 800cba4:	f7f3 fcd4 	bl	8000550 <__aeabi_dmul>
 800cba8:	a373      	add	r3, pc, #460	; (adr r3, 800cd78 <__ieee754_pow+0x728>)
 800cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbae:	f7f3 fb19 	bl	80001e4 <__adddf3>
 800cbb2:	4622      	mov	r2, r4
 800cbb4:	462b      	mov	r3, r5
 800cbb6:	f7f3 fccb 	bl	8000550 <__aeabi_dmul>
 800cbba:	a371      	add	r3, pc, #452	; (adr r3, 800cd80 <__ieee754_pow+0x730>)
 800cbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc0:	f7f3 fb10 	bl	80001e4 <__adddf3>
 800cbc4:	4622      	mov	r2, r4
 800cbc6:	4606      	mov	r6, r0
 800cbc8:	460f      	mov	r7, r1
 800cbca:	462b      	mov	r3, r5
 800cbcc:	4620      	mov	r0, r4
 800cbce:	4629      	mov	r1, r5
 800cbd0:	f7f3 fcbe 	bl	8000550 <__aeabi_dmul>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	4630      	mov	r0, r6
 800cbda:	4639      	mov	r1, r7
 800cbdc:	f7f3 fcb8 	bl	8000550 <__aeabi_dmul>
 800cbe0:	4642      	mov	r2, r8
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	460d      	mov	r5, r1
 800cbe6:	464b      	mov	r3, r9
 800cbe8:	ec51 0b18 	vmov	r0, r1, d8
 800cbec:	f7f3 fafa 	bl	80001e4 <__adddf3>
 800cbf0:	ec53 2b19 	vmov	r2, r3, d9
 800cbf4:	f7f3 fcac 	bl	8000550 <__aeabi_dmul>
 800cbf8:	4622      	mov	r2, r4
 800cbfa:	462b      	mov	r3, r5
 800cbfc:	f7f3 faf2 	bl	80001e4 <__adddf3>
 800cc00:	4642      	mov	r2, r8
 800cc02:	4682      	mov	sl, r0
 800cc04:	468b      	mov	fp, r1
 800cc06:	464b      	mov	r3, r9
 800cc08:	4640      	mov	r0, r8
 800cc0a:	4649      	mov	r1, r9
 800cc0c:	f7f3 fca0 	bl	8000550 <__aeabi_dmul>
 800cc10:	4b6b      	ldr	r3, [pc, #428]	; (800cdc0 <__ieee754_pow+0x770>)
 800cc12:	2200      	movs	r2, #0
 800cc14:	4606      	mov	r6, r0
 800cc16:	460f      	mov	r7, r1
 800cc18:	f7f3 fae4 	bl	80001e4 <__adddf3>
 800cc1c:	4652      	mov	r2, sl
 800cc1e:	465b      	mov	r3, fp
 800cc20:	f7f3 fae0 	bl	80001e4 <__adddf3>
 800cc24:	2000      	movs	r0, #0
 800cc26:	4604      	mov	r4, r0
 800cc28:	460d      	mov	r5, r1
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	4640      	mov	r0, r8
 800cc30:	4649      	mov	r1, r9
 800cc32:	f7f3 fc8d 	bl	8000550 <__aeabi_dmul>
 800cc36:	4b62      	ldr	r3, [pc, #392]	; (800cdc0 <__ieee754_pow+0x770>)
 800cc38:	4680      	mov	r8, r0
 800cc3a:	4689      	mov	r9, r1
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	4620      	mov	r0, r4
 800cc40:	4629      	mov	r1, r5
 800cc42:	f7f3 facd 	bl	80001e0 <__aeabi_dsub>
 800cc46:	4632      	mov	r2, r6
 800cc48:	463b      	mov	r3, r7
 800cc4a:	f7f3 fac9 	bl	80001e0 <__aeabi_dsub>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	460b      	mov	r3, r1
 800cc52:	4650      	mov	r0, sl
 800cc54:	4659      	mov	r1, fp
 800cc56:	f7f3 fac3 	bl	80001e0 <__aeabi_dsub>
 800cc5a:	ec53 2b18 	vmov	r2, r3, d8
 800cc5e:	f7f3 fc77 	bl	8000550 <__aeabi_dmul>
 800cc62:	4622      	mov	r2, r4
 800cc64:	4606      	mov	r6, r0
 800cc66:	460f      	mov	r7, r1
 800cc68:	462b      	mov	r3, r5
 800cc6a:	ec51 0b19 	vmov	r0, r1, d9
 800cc6e:	f7f3 fc6f 	bl	8000550 <__aeabi_dmul>
 800cc72:	4602      	mov	r2, r0
 800cc74:	460b      	mov	r3, r1
 800cc76:	4630      	mov	r0, r6
 800cc78:	4639      	mov	r1, r7
 800cc7a:	f7f3 fab3 	bl	80001e4 <__adddf3>
 800cc7e:	4606      	mov	r6, r0
 800cc80:	460f      	mov	r7, r1
 800cc82:	4602      	mov	r2, r0
 800cc84:	460b      	mov	r3, r1
 800cc86:	4640      	mov	r0, r8
 800cc88:	4649      	mov	r1, r9
 800cc8a:	f7f3 faab 	bl	80001e4 <__adddf3>
 800cc8e:	a33e      	add	r3, pc, #248	; (adr r3, 800cd88 <__ieee754_pow+0x738>)
 800cc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc94:	2000      	movs	r0, #0
 800cc96:	4604      	mov	r4, r0
 800cc98:	460d      	mov	r5, r1
 800cc9a:	f7f3 fc59 	bl	8000550 <__aeabi_dmul>
 800cc9e:	4642      	mov	r2, r8
 800cca0:	ec41 0b18 	vmov	d8, r0, r1
 800cca4:	464b      	mov	r3, r9
 800cca6:	4620      	mov	r0, r4
 800cca8:	4629      	mov	r1, r5
 800ccaa:	f7f3 fa99 	bl	80001e0 <__aeabi_dsub>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	4639      	mov	r1, r7
 800ccb6:	f7f3 fa93 	bl	80001e0 <__aeabi_dsub>
 800ccba:	a335      	add	r3, pc, #212	; (adr r3, 800cd90 <__ieee754_pow+0x740>)
 800ccbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc0:	f7f3 fc46 	bl	8000550 <__aeabi_dmul>
 800ccc4:	a334      	add	r3, pc, #208	; (adr r3, 800cd98 <__ieee754_pow+0x748>)
 800ccc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccca:	4606      	mov	r6, r0
 800cccc:	460f      	mov	r7, r1
 800ccce:	4620      	mov	r0, r4
 800ccd0:	4629      	mov	r1, r5
 800ccd2:	f7f3 fc3d 	bl	8000550 <__aeabi_dmul>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	460b      	mov	r3, r1
 800ccda:	4630      	mov	r0, r6
 800ccdc:	4639      	mov	r1, r7
 800ccde:	f7f3 fa81 	bl	80001e4 <__adddf3>
 800cce2:	9a07      	ldr	r2, [sp, #28]
 800cce4:	4b37      	ldr	r3, [pc, #220]	; (800cdc4 <__ieee754_pow+0x774>)
 800cce6:	4413      	add	r3, r2
 800cce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccec:	f7f3 fa7a 	bl	80001e4 <__adddf3>
 800ccf0:	4682      	mov	sl, r0
 800ccf2:	9805      	ldr	r0, [sp, #20]
 800ccf4:	468b      	mov	fp, r1
 800ccf6:	f7f3 fbc1 	bl	800047c <__aeabi_i2d>
 800ccfa:	9a07      	ldr	r2, [sp, #28]
 800ccfc:	4b32      	ldr	r3, [pc, #200]	; (800cdc8 <__ieee754_pow+0x778>)
 800ccfe:	4413      	add	r3, r2
 800cd00:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd04:	4606      	mov	r6, r0
 800cd06:	460f      	mov	r7, r1
 800cd08:	4652      	mov	r2, sl
 800cd0a:	465b      	mov	r3, fp
 800cd0c:	ec51 0b18 	vmov	r0, r1, d8
 800cd10:	f7f3 fa68 	bl	80001e4 <__adddf3>
 800cd14:	4642      	mov	r2, r8
 800cd16:	464b      	mov	r3, r9
 800cd18:	f7f3 fa64 	bl	80001e4 <__adddf3>
 800cd1c:	4632      	mov	r2, r6
 800cd1e:	463b      	mov	r3, r7
 800cd20:	f7f3 fa60 	bl	80001e4 <__adddf3>
 800cd24:	2000      	movs	r0, #0
 800cd26:	4632      	mov	r2, r6
 800cd28:	463b      	mov	r3, r7
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	460d      	mov	r5, r1
 800cd2e:	f7f3 fa57 	bl	80001e0 <__aeabi_dsub>
 800cd32:	4642      	mov	r2, r8
 800cd34:	464b      	mov	r3, r9
 800cd36:	f7f3 fa53 	bl	80001e0 <__aeabi_dsub>
 800cd3a:	ec53 2b18 	vmov	r2, r3, d8
 800cd3e:	f7f3 fa4f 	bl	80001e0 <__aeabi_dsub>
 800cd42:	4602      	mov	r2, r0
 800cd44:	460b      	mov	r3, r1
 800cd46:	4650      	mov	r0, sl
 800cd48:	4659      	mov	r1, fp
 800cd4a:	e610      	b.n	800c96e <__ieee754_pow+0x31e>
 800cd4c:	2401      	movs	r4, #1
 800cd4e:	e6a1      	b.n	800ca94 <__ieee754_pow+0x444>
 800cd50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800cda0 <__ieee754_pow+0x750>
 800cd54:	e617      	b.n	800c986 <__ieee754_pow+0x336>
 800cd56:	bf00      	nop
 800cd58:	4a454eef 	.word	0x4a454eef
 800cd5c:	3fca7e28 	.word	0x3fca7e28
 800cd60:	93c9db65 	.word	0x93c9db65
 800cd64:	3fcd864a 	.word	0x3fcd864a
 800cd68:	a91d4101 	.word	0xa91d4101
 800cd6c:	3fd17460 	.word	0x3fd17460
 800cd70:	518f264d 	.word	0x518f264d
 800cd74:	3fd55555 	.word	0x3fd55555
 800cd78:	db6fabff 	.word	0xdb6fabff
 800cd7c:	3fdb6db6 	.word	0x3fdb6db6
 800cd80:	33333303 	.word	0x33333303
 800cd84:	3fe33333 	.word	0x3fe33333
 800cd88:	e0000000 	.word	0xe0000000
 800cd8c:	3feec709 	.word	0x3feec709
 800cd90:	dc3a03fd 	.word	0xdc3a03fd
 800cd94:	3feec709 	.word	0x3feec709
 800cd98:	145b01f5 	.word	0x145b01f5
 800cd9c:	be3e2fe0 	.word	0xbe3e2fe0
 800cda0:	00000000 	.word	0x00000000
 800cda4:	3ff00000 	.word	0x3ff00000
 800cda8:	7ff00000 	.word	0x7ff00000
 800cdac:	43400000 	.word	0x43400000
 800cdb0:	0003988e 	.word	0x0003988e
 800cdb4:	000bb679 	.word	0x000bb679
 800cdb8:	0800de40 	.word	0x0800de40
 800cdbc:	3ff00000 	.word	0x3ff00000
 800cdc0:	40080000 	.word	0x40080000
 800cdc4:	0800de60 	.word	0x0800de60
 800cdc8:	0800de50 	.word	0x0800de50
 800cdcc:	a3b5      	add	r3, pc, #724	; (adr r3, 800d0a4 <__ieee754_pow+0xa54>)
 800cdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd2:	4640      	mov	r0, r8
 800cdd4:	4649      	mov	r1, r9
 800cdd6:	f7f3 fa05 	bl	80001e4 <__adddf3>
 800cdda:	4622      	mov	r2, r4
 800cddc:	ec41 0b1a 	vmov	d10, r0, r1
 800cde0:	462b      	mov	r3, r5
 800cde2:	4630      	mov	r0, r6
 800cde4:	4639      	mov	r1, r7
 800cde6:	f7f3 f9fb 	bl	80001e0 <__aeabi_dsub>
 800cdea:	4602      	mov	r2, r0
 800cdec:	460b      	mov	r3, r1
 800cdee:	ec51 0b1a 	vmov	r0, r1, d10
 800cdf2:	f7f3 fe3d 	bl	8000a70 <__aeabi_dcmpgt>
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	f47f ae04 	bne.w	800ca04 <__ieee754_pow+0x3b4>
 800cdfc:	4aa4      	ldr	r2, [pc, #656]	; (800d090 <__ieee754_pow+0xa40>)
 800cdfe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce02:	4293      	cmp	r3, r2
 800ce04:	f340 8108 	ble.w	800d018 <__ieee754_pow+0x9c8>
 800ce08:	151b      	asrs	r3, r3, #20
 800ce0a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ce0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ce12:	fa4a f303 	asr.w	r3, sl, r3
 800ce16:	445b      	add	r3, fp
 800ce18:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ce1c:	4e9d      	ldr	r6, [pc, #628]	; (800d094 <__ieee754_pow+0xa44>)
 800ce1e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ce22:	4116      	asrs	r6, r2
 800ce24:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ce28:	2000      	movs	r0, #0
 800ce2a:	ea23 0106 	bic.w	r1, r3, r6
 800ce2e:	f1c2 0214 	rsb	r2, r2, #20
 800ce32:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ce36:	fa4a fa02 	asr.w	sl, sl, r2
 800ce3a:	f1bb 0f00 	cmp.w	fp, #0
 800ce3e:	4602      	mov	r2, r0
 800ce40:	460b      	mov	r3, r1
 800ce42:	4620      	mov	r0, r4
 800ce44:	4629      	mov	r1, r5
 800ce46:	bfb8      	it	lt
 800ce48:	f1ca 0a00 	rsblt	sl, sl, #0
 800ce4c:	f7f3 f9c8 	bl	80001e0 <__aeabi_dsub>
 800ce50:	ec41 0b19 	vmov	d9, r0, r1
 800ce54:	4642      	mov	r2, r8
 800ce56:	464b      	mov	r3, r9
 800ce58:	ec51 0b19 	vmov	r0, r1, d9
 800ce5c:	f7f3 f9c2 	bl	80001e4 <__adddf3>
 800ce60:	a37b      	add	r3, pc, #492	; (adr r3, 800d050 <__ieee754_pow+0xa00>)
 800ce62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce66:	2000      	movs	r0, #0
 800ce68:	4604      	mov	r4, r0
 800ce6a:	460d      	mov	r5, r1
 800ce6c:	f7f3 fb70 	bl	8000550 <__aeabi_dmul>
 800ce70:	ec53 2b19 	vmov	r2, r3, d9
 800ce74:	4606      	mov	r6, r0
 800ce76:	460f      	mov	r7, r1
 800ce78:	4620      	mov	r0, r4
 800ce7a:	4629      	mov	r1, r5
 800ce7c:	f7f3 f9b0 	bl	80001e0 <__aeabi_dsub>
 800ce80:	4602      	mov	r2, r0
 800ce82:	460b      	mov	r3, r1
 800ce84:	4640      	mov	r0, r8
 800ce86:	4649      	mov	r1, r9
 800ce88:	f7f3 f9aa 	bl	80001e0 <__aeabi_dsub>
 800ce8c:	a372      	add	r3, pc, #456	; (adr r3, 800d058 <__ieee754_pow+0xa08>)
 800ce8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce92:	f7f3 fb5d 	bl	8000550 <__aeabi_dmul>
 800ce96:	a372      	add	r3, pc, #456	; (adr r3, 800d060 <__ieee754_pow+0xa10>)
 800ce98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9c:	4680      	mov	r8, r0
 800ce9e:	4689      	mov	r9, r1
 800cea0:	4620      	mov	r0, r4
 800cea2:	4629      	mov	r1, r5
 800cea4:	f7f3 fb54 	bl	8000550 <__aeabi_dmul>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	460b      	mov	r3, r1
 800ceac:	4640      	mov	r0, r8
 800ceae:	4649      	mov	r1, r9
 800ceb0:	f7f3 f998 	bl	80001e4 <__adddf3>
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	460d      	mov	r5, r1
 800ceb8:	4602      	mov	r2, r0
 800ceba:	460b      	mov	r3, r1
 800cebc:	4630      	mov	r0, r6
 800cebe:	4639      	mov	r1, r7
 800cec0:	f7f3 f990 	bl	80001e4 <__adddf3>
 800cec4:	4632      	mov	r2, r6
 800cec6:	463b      	mov	r3, r7
 800cec8:	4680      	mov	r8, r0
 800ceca:	4689      	mov	r9, r1
 800cecc:	f7f3 f988 	bl	80001e0 <__aeabi_dsub>
 800ced0:	4602      	mov	r2, r0
 800ced2:	460b      	mov	r3, r1
 800ced4:	4620      	mov	r0, r4
 800ced6:	4629      	mov	r1, r5
 800ced8:	f7f3 f982 	bl	80001e0 <__aeabi_dsub>
 800cedc:	4642      	mov	r2, r8
 800cede:	4606      	mov	r6, r0
 800cee0:	460f      	mov	r7, r1
 800cee2:	464b      	mov	r3, r9
 800cee4:	4640      	mov	r0, r8
 800cee6:	4649      	mov	r1, r9
 800cee8:	f7f3 fb32 	bl	8000550 <__aeabi_dmul>
 800ceec:	a35e      	add	r3, pc, #376	; (adr r3, 800d068 <__ieee754_pow+0xa18>)
 800ceee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef2:	4604      	mov	r4, r0
 800cef4:	460d      	mov	r5, r1
 800cef6:	f7f3 fb2b 	bl	8000550 <__aeabi_dmul>
 800cefa:	a35d      	add	r3, pc, #372	; (adr r3, 800d070 <__ieee754_pow+0xa20>)
 800cefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf00:	f7f3 f96e 	bl	80001e0 <__aeabi_dsub>
 800cf04:	4622      	mov	r2, r4
 800cf06:	462b      	mov	r3, r5
 800cf08:	f7f3 fb22 	bl	8000550 <__aeabi_dmul>
 800cf0c:	a35a      	add	r3, pc, #360	; (adr r3, 800d078 <__ieee754_pow+0xa28>)
 800cf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf12:	f7f3 f967 	bl	80001e4 <__adddf3>
 800cf16:	4622      	mov	r2, r4
 800cf18:	462b      	mov	r3, r5
 800cf1a:	f7f3 fb19 	bl	8000550 <__aeabi_dmul>
 800cf1e:	a358      	add	r3, pc, #352	; (adr r3, 800d080 <__ieee754_pow+0xa30>)
 800cf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf24:	f7f3 f95c 	bl	80001e0 <__aeabi_dsub>
 800cf28:	4622      	mov	r2, r4
 800cf2a:	462b      	mov	r3, r5
 800cf2c:	f7f3 fb10 	bl	8000550 <__aeabi_dmul>
 800cf30:	a355      	add	r3, pc, #340	; (adr r3, 800d088 <__ieee754_pow+0xa38>)
 800cf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf36:	f7f3 f955 	bl	80001e4 <__adddf3>
 800cf3a:	4622      	mov	r2, r4
 800cf3c:	462b      	mov	r3, r5
 800cf3e:	f7f3 fb07 	bl	8000550 <__aeabi_dmul>
 800cf42:	4602      	mov	r2, r0
 800cf44:	460b      	mov	r3, r1
 800cf46:	4640      	mov	r0, r8
 800cf48:	4649      	mov	r1, r9
 800cf4a:	f7f3 f949 	bl	80001e0 <__aeabi_dsub>
 800cf4e:	4604      	mov	r4, r0
 800cf50:	460d      	mov	r5, r1
 800cf52:	4602      	mov	r2, r0
 800cf54:	460b      	mov	r3, r1
 800cf56:	4640      	mov	r0, r8
 800cf58:	4649      	mov	r1, r9
 800cf5a:	f7f3 faf9 	bl	8000550 <__aeabi_dmul>
 800cf5e:	2200      	movs	r2, #0
 800cf60:	ec41 0b19 	vmov	d9, r0, r1
 800cf64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf68:	4620      	mov	r0, r4
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	f7f3 f938 	bl	80001e0 <__aeabi_dsub>
 800cf70:	4602      	mov	r2, r0
 800cf72:	460b      	mov	r3, r1
 800cf74:	ec51 0b19 	vmov	r0, r1, d9
 800cf78:	f7f3 fc14 	bl	80007a4 <__aeabi_ddiv>
 800cf7c:	4632      	mov	r2, r6
 800cf7e:	4604      	mov	r4, r0
 800cf80:	460d      	mov	r5, r1
 800cf82:	463b      	mov	r3, r7
 800cf84:	4640      	mov	r0, r8
 800cf86:	4649      	mov	r1, r9
 800cf88:	f7f3 fae2 	bl	8000550 <__aeabi_dmul>
 800cf8c:	4632      	mov	r2, r6
 800cf8e:	463b      	mov	r3, r7
 800cf90:	f7f3 f928 	bl	80001e4 <__adddf3>
 800cf94:	4602      	mov	r2, r0
 800cf96:	460b      	mov	r3, r1
 800cf98:	4620      	mov	r0, r4
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	f7f3 f920 	bl	80001e0 <__aeabi_dsub>
 800cfa0:	4642      	mov	r2, r8
 800cfa2:	464b      	mov	r3, r9
 800cfa4:	f7f3 f91c 	bl	80001e0 <__aeabi_dsub>
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	4602      	mov	r2, r0
 800cfac:	493a      	ldr	r1, [pc, #232]	; (800d098 <__ieee754_pow+0xa48>)
 800cfae:	2000      	movs	r0, #0
 800cfb0:	f7f3 f916 	bl	80001e0 <__aeabi_dsub>
 800cfb4:	ec41 0b10 	vmov	d0, r0, r1
 800cfb8:	ee10 3a90 	vmov	r3, s1
 800cfbc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cfc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfc4:	da2b      	bge.n	800d01e <__ieee754_pow+0x9ce>
 800cfc6:	4650      	mov	r0, sl
 800cfc8:	f000 fdca 	bl	800db60 <scalbn>
 800cfcc:	ec51 0b10 	vmov	r0, r1, d0
 800cfd0:	ec53 2b18 	vmov	r2, r3, d8
 800cfd4:	f7ff bbed 	b.w	800c7b2 <__ieee754_pow+0x162>
 800cfd8:	4b30      	ldr	r3, [pc, #192]	; (800d09c <__ieee754_pow+0xa4c>)
 800cfda:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cfde:	429e      	cmp	r6, r3
 800cfe0:	f77f af0c 	ble.w	800cdfc <__ieee754_pow+0x7ac>
 800cfe4:	4b2e      	ldr	r3, [pc, #184]	; (800d0a0 <__ieee754_pow+0xa50>)
 800cfe6:	440b      	add	r3, r1
 800cfe8:	4303      	orrs	r3, r0
 800cfea:	d009      	beq.n	800d000 <__ieee754_pow+0x9b0>
 800cfec:	ec51 0b18 	vmov	r0, r1, d8
 800cff0:	2200      	movs	r2, #0
 800cff2:	2300      	movs	r3, #0
 800cff4:	f7f3 fd1e 	bl	8000a34 <__aeabi_dcmplt>
 800cff8:	3800      	subs	r0, #0
 800cffa:	bf18      	it	ne
 800cffc:	2001      	movne	r0, #1
 800cffe:	e447      	b.n	800c890 <__ieee754_pow+0x240>
 800d000:	4622      	mov	r2, r4
 800d002:	462b      	mov	r3, r5
 800d004:	f7f3 f8ec 	bl	80001e0 <__aeabi_dsub>
 800d008:	4642      	mov	r2, r8
 800d00a:	464b      	mov	r3, r9
 800d00c:	f7f3 fd26 	bl	8000a5c <__aeabi_dcmpge>
 800d010:	2800      	cmp	r0, #0
 800d012:	f43f aef3 	beq.w	800cdfc <__ieee754_pow+0x7ac>
 800d016:	e7e9      	b.n	800cfec <__ieee754_pow+0x99c>
 800d018:	f04f 0a00 	mov.w	sl, #0
 800d01c:	e71a      	b.n	800ce54 <__ieee754_pow+0x804>
 800d01e:	ec51 0b10 	vmov	r0, r1, d0
 800d022:	4619      	mov	r1, r3
 800d024:	e7d4      	b.n	800cfd0 <__ieee754_pow+0x980>
 800d026:	491c      	ldr	r1, [pc, #112]	; (800d098 <__ieee754_pow+0xa48>)
 800d028:	2000      	movs	r0, #0
 800d02a:	f7ff bb30 	b.w	800c68e <__ieee754_pow+0x3e>
 800d02e:	2000      	movs	r0, #0
 800d030:	2100      	movs	r1, #0
 800d032:	f7ff bb2c 	b.w	800c68e <__ieee754_pow+0x3e>
 800d036:	4630      	mov	r0, r6
 800d038:	4639      	mov	r1, r7
 800d03a:	f7ff bb28 	b.w	800c68e <__ieee754_pow+0x3e>
 800d03e:	9204      	str	r2, [sp, #16]
 800d040:	f7ff bb7a 	b.w	800c738 <__ieee754_pow+0xe8>
 800d044:	2300      	movs	r3, #0
 800d046:	f7ff bb64 	b.w	800c712 <__ieee754_pow+0xc2>
 800d04a:	bf00      	nop
 800d04c:	f3af 8000 	nop.w
 800d050:	00000000 	.word	0x00000000
 800d054:	3fe62e43 	.word	0x3fe62e43
 800d058:	fefa39ef 	.word	0xfefa39ef
 800d05c:	3fe62e42 	.word	0x3fe62e42
 800d060:	0ca86c39 	.word	0x0ca86c39
 800d064:	be205c61 	.word	0xbe205c61
 800d068:	72bea4d0 	.word	0x72bea4d0
 800d06c:	3e663769 	.word	0x3e663769
 800d070:	c5d26bf1 	.word	0xc5d26bf1
 800d074:	3ebbbd41 	.word	0x3ebbbd41
 800d078:	af25de2c 	.word	0xaf25de2c
 800d07c:	3f11566a 	.word	0x3f11566a
 800d080:	16bebd93 	.word	0x16bebd93
 800d084:	3f66c16c 	.word	0x3f66c16c
 800d088:	5555553e 	.word	0x5555553e
 800d08c:	3fc55555 	.word	0x3fc55555
 800d090:	3fe00000 	.word	0x3fe00000
 800d094:	000fffff 	.word	0x000fffff
 800d098:	3ff00000 	.word	0x3ff00000
 800d09c:	4090cbff 	.word	0x4090cbff
 800d0a0:	3f6f3400 	.word	0x3f6f3400
 800d0a4:	652b82fe 	.word	0x652b82fe
 800d0a8:	3c971547 	.word	0x3c971547

0800d0ac <__ieee754_sqrt>:
 800d0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b0:	ec55 4b10 	vmov	r4, r5, d0
 800d0b4:	4e55      	ldr	r6, [pc, #340]	; (800d20c <__ieee754_sqrt+0x160>)
 800d0b6:	43ae      	bics	r6, r5
 800d0b8:	ee10 0a10 	vmov	r0, s0
 800d0bc:	ee10 3a10 	vmov	r3, s0
 800d0c0:	462a      	mov	r2, r5
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	d110      	bne.n	800d0e8 <__ieee754_sqrt+0x3c>
 800d0c6:	ee10 2a10 	vmov	r2, s0
 800d0ca:	462b      	mov	r3, r5
 800d0cc:	f7f3 fa40 	bl	8000550 <__aeabi_dmul>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	4629      	mov	r1, r5
 800d0d8:	f7f3 f884 	bl	80001e4 <__adddf3>
 800d0dc:	4604      	mov	r4, r0
 800d0de:	460d      	mov	r5, r1
 800d0e0:	ec45 4b10 	vmov	d0, r4, r5
 800d0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0e8:	2d00      	cmp	r5, #0
 800d0ea:	dc10      	bgt.n	800d10e <__ieee754_sqrt+0x62>
 800d0ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d0f0:	4330      	orrs	r0, r6
 800d0f2:	d0f5      	beq.n	800d0e0 <__ieee754_sqrt+0x34>
 800d0f4:	b15d      	cbz	r5, 800d10e <__ieee754_sqrt+0x62>
 800d0f6:	ee10 2a10 	vmov	r2, s0
 800d0fa:	462b      	mov	r3, r5
 800d0fc:	ee10 0a10 	vmov	r0, s0
 800d100:	f7f3 f86e 	bl	80001e0 <__aeabi_dsub>
 800d104:	4602      	mov	r2, r0
 800d106:	460b      	mov	r3, r1
 800d108:	f7f3 fb4c 	bl	80007a4 <__aeabi_ddiv>
 800d10c:	e7e6      	b.n	800d0dc <__ieee754_sqrt+0x30>
 800d10e:	1512      	asrs	r2, r2, #20
 800d110:	d074      	beq.n	800d1fc <__ieee754_sqrt+0x150>
 800d112:	07d4      	lsls	r4, r2, #31
 800d114:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d118:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d11c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d120:	bf5e      	ittt	pl
 800d122:	0fda      	lsrpl	r2, r3, #31
 800d124:	005b      	lslpl	r3, r3, #1
 800d126:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d12a:	2400      	movs	r4, #0
 800d12c:	0fda      	lsrs	r2, r3, #31
 800d12e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d132:	107f      	asrs	r7, r7, #1
 800d134:	005b      	lsls	r3, r3, #1
 800d136:	2516      	movs	r5, #22
 800d138:	4620      	mov	r0, r4
 800d13a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d13e:	1886      	adds	r6, r0, r2
 800d140:	428e      	cmp	r6, r1
 800d142:	bfde      	ittt	le
 800d144:	1b89      	suble	r1, r1, r6
 800d146:	18b0      	addle	r0, r6, r2
 800d148:	18a4      	addle	r4, r4, r2
 800d14a:	0049      	lsls	r1, r1, #1
 800d14c:	3d01      	subs	r5, #1
 800d14e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d152:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d156:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d15a:	d1f0      	bne.n	800d13e <__ieee754_sqrt+0x92>
 800d15c:	462a      	mov	r2, r5
 800d15e:	f04f 0e20 	mov.w	lr, #32
 800d162:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d166:	4281      	cmp	r1, r0
 800d168:	eb06 0c05 	add.w	ip, r6, r5
 800d16c:	dc02      	bgt.n	800d174 <__ieee754_sqrt+0xc8>
 800d16e:	d113      	bne.n	800d198 <__ieee754_sqrt+0xec>
 800d170:	459c      	cmp	ip, r3
 800d172:	d811      	bhi.n	800d198 <__ieee754_sqrt+0xec>
 800d174:	f1bc 0f00 	cmp.w	ip, #0
 800d178:	eb0c 0506 	add.w	r5, ip, r6
 800d17c:	da43      	bge.n	800d206 <__ieee754_sqrt+0x15a>
 800d17e:	2d00      	cmp	r5, #0
 800d180:	db41      	blt.n	800d206 <__ieee754_sqrt+0x15a>
 800d182:	f100 0801 	add.w	r8, r0, #1
 800d186:	1a09      	subs	r1, r1, r0
 800d188:	459c      	cmp	ip, r3
 800d18a:	bf88      	it	hi
 800d18c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d190:	eba3 030c 	sub.w	r3, r3, ip
 800d194:	4432      	add	r2, r6
 800d196:	4640      	mov	r0, r8
 800d198:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d19c:	f1be 0e01 	subs.w	lr, lr, #1
 800d1a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d1a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d1a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d1ac:	d1db      	bne.n	800d166 <__ieee754_sqrt+0xba>
 800d1ae:	430b      	orrs	r3, r1
 800d1b0:	d006      	beq.n	800d1c0 <__ieee754_sqrt+0x114>
 800d1b2:	1c50      	adds	r0, r2, #1
 800d1b4:	bf13      	iteet	ne
 800d1b6:	3201      	addne	r2, #1
 800d1b8:	3401      	addeq	r4, #1
 800d1ba:	4672      	moveq	r2, lr
 800d1bc:	f022 0201 	bicne.w	r2, r2, #1
 800d1c0:	1063      	asrs	r3, r4, #1
 800d1c2:	0852      	lsrs	r2, r2, #1
 800d1c4:	07e1      	lsls	r1, r4, #31
 800d1c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d1ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d1ce:	bf48      	it	mi
 800d1d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d1d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d1d8:	4614      	mov	r4, r2
 800d1da:	e781      	b.n	800d0e0 <__ieee754_sqrt+0x34>
 800d1dc:	0ad9      	lsrs	r1, r3, #11
 800d1de:	3815      	subs	r0, #21
 800d1e0:	055b      	lsls	r3, r3, #21
 800d1e2:	2900      	cmp	r1, #0
 800d1e4:	d0fa      	beq.n	800d1dc <__ieee754_sqrt+0x130>
 800d1e6:	02cd      	lsls	r5, r1, #11
 800d1e8:	d50a      	bpl.n	800d200 <__ieee754_sqrt+0x154>
 800d1ea:	f1c2 0420 	rsb	r4, r2, #32
 800d1ee:	fa23 f404 	lsr.w	r4, r3, r4
 800d1f2:	1e55      	subs	r5, r2, #1
 800d1f4:	4093      	lsls	r3, r2
 800d1f6:	4321      	orrs	r1, r4
 800d1f8:	1b42      	subs	r2, r0, r5
 800d1fa:	e78a      	b.n	800d112 <__ieee754_sqrt+0x66>
 800d1fc:	4610      	mov	r0, r2
 800d1fe:	e7f0      	b.n	800d1e2 <__ieee754_sqrt+0x136>
 800d200:	0049      	lsls	r1, r1, #1
 800d202:	3201      	adds	r2, #1
 800d204:	e7ef      	b.n	800d1e6 <__ieee754_sqrt+0x13a>
 800d206:	4680      	mov	r8, r0
 800d208:	e7bd      	b.n	800d186 <__ieee754_sqrt+0xda>
 800d20a:	bf00      	nop
 800d20c:	7ff00000 	.word	0x7ff00000

0800d210 <__ieee754_rem_pio2f>:
 800d210:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d212:	ee10 6a10 	vmov	r6, s0
 800d216:	4b8e      	ldr	r3, [pc, #568]	; (800d450 <__ieee754_rem_pio2f+0x240>)
 800d218:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d21c:	429d      	cmp	r5, r3
 800d21e:	b087      	sub	sp, #28
 800d220:	eef0 7a40 	vmov.f32	s15, s0
 800d224:	4604      	mov	r4, r0
 800d226:	dc05      	bgt.n	800d234 <__ieee754_rem_pio2f+0x24>
 800d228:	2300      	movs	r3, #0
 800d22a:	ed80 0a00 	vstr	s0, [r0]
 800d22e:	6043      	str	r3, [r0, #4]
 800d230:	2000      	movs	r0, #0
 800d232:	e01a      	b.n	800d26a <__ieee754_rem_pio2f+0x5a>
 800d234:	4b87      	ldr	r3, [pc, #540]	; (800d454 <__ieee754_rem_pio2f+0x244>)
 800d236:	429d      	cmp	r5, r3
 800d238:	dc46      	bgt.n	800d2c8 <__ieee754_rem_pio2f+0xb8>
 800d23a:	2e00      	cmp	r6, #0
 800d23c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800d458 <__ieee754_rem_pio2f+0x248>
 800d240:	4b86      	ldr	r3, [pc, #536]	; (800d45c <__ieee754_rem_pio2f+0x24c>)
 800d242:	f025 050f 	bic.w	r5, r5, #15
 800d246:	dd1f      	ble.n	800d288 <__ieee754_rem_pio2f+0x78>
 800d248:	429d      	cmp	r5, r3
 800d24a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d24e:	d00e      	beq.n	800d26e <__ieee754_rem_pio2f+0x5e>
 800d250:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800d460 <__ieee754_rem_pio2f+0x250>
 800d254:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800d258:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d25c:	ed80 0a00 	vstr	s0, [r0]
 800d260:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d264:	2001      	movs	r0, #1
 800d266:	edc4 7a01 	vstr	s15, [r4, #4]
 800d26a:	b007      	add	sp, #28
 800d26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d26e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800d464 <__ieee754_rem_pio2f+0x254>
 800d272:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800d468 <__ieee754_rem_pio2f+0x258>
 800d276:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d27a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d27e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d282:	edc0 6a00 	vstr	s13, [r0]
 800d286:	e7eb      	b.n	800d260 <__ieee754_rem_pio2f+0x50>
 800d288:	429d      	cmp	r5, r3
 800d28a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d28e:	d00e      	beq.n	800d2ae <__ieee754_rem_pio2f+0x9e>
 800d290:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800d460 <__ieee754_rem_pio2f+0x250>
 800d294:	ee37 0a87 	vadd.f32	s0, s15, s14
 800d298:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d29c:	ed80 0a00 	vstr	s0, [r0]
 800d2a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a8:	edc4 7a01 	vstr	s15, [r4, #4]
 800d2ac:	e7dd      	b.n	800d26a <__ieee754_rem_pio2f+0x5a>
 800d2ae:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800d464 <__ieee754_rem_pio2f+0x254>
 800d2b2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800d468 <__ieee754_rem_pio2f+0x258>
 800d2b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d2ba:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d2be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d2c2:	edc0 6a00 	vstr	s13, [r0]
 800d2c6:	e7eb      	b.n	800d2a0 <__ieee754_rem_pio2f+0x90>
 800d2c8:	4b68      	ldr	r3, [pc, #416]	; (800d46c <__ieee754_rem_pio2f+0x25c>)
 800d2ca:	429d      	cmp	r5, r3
 800d2cc:	dc72      	bgt.n	800d3b4 <__ieee754_rem_pio2f+0x1a4>
 800d2ce:	f000 fccd 	bl	800dc6c <fabsf>
 800d2d2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800d470 <__ieee754_rem_pio2f+0x260>
 800d2d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d2da:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d2de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d2e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d2e6:	ee17 0a90 	vmov	r0, s15
 800d2ea:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800d458 <__ieee754_rem_pio2f+0x248>
 800d2ee:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d2f2:	281f      	cmp	r0, #31
 800d2f4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800d460 <__ieee754_rem_pio2f+0x250>
 800d2f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2fc:	eeb1 6a47 	vneg.f32	s12, s14
 800d300:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d304:	ee16 2a90 	vmov	r2, s13
 800d308:	dc1c      	bgt.n	800d344 <__ieee754_rem_pio2f+0x134>
 800d30a:	495a      	ldr	r1, [pc, #360]	; (800d474 <__ieee754_rem_pio2f+0x264>)
 800d30c:	1e47      	subs	r7, r0, #1
 800d30e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800d312:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800d316:	428b      	cmp	r3, r1
 800d318:	d014      	beq.n	800d344 <__ieee754_rem_pio2f+0x134>
 800d31a:	6022      	str	r2, [r4, #0]
 800d31c:	ed94 7a00 	vldr	s14, [r4]
 800d320:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d324:	2e00      	cmp	r6, #0
 800d326:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d32a:	ed84 0a01 	vstr	s0, [r4, #4]
 800d32e:	da9c      	bge.n	800d26a <__ieee754_rem_pio2f+0x5a>
 800d330:	eeb1 7a47 	vneg.f32	s14, s14
 800d334:	eeb1 0a40 	vneg.f32	s0, s0
 800d338:	ed84 7a00 	vstr	s14, [r4]
 800d33c:	ed84 0a01 	vstr	s0, [r4, #4]
 800d340:	4240      	negs	r0, r0
 800d342:	e792      	b.n	800d26a <__ieee754_rem_pio2f+0x5a>
 800d344:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d348:	15eb      	asrs	r3, r5, #23
 800d34a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800d34e:	2d08      	cmp	r5, #8
 800d350:	dde3      	ble.n	800d31a <__ieee754_rem_pio2f+0x10a>
 800d352:	eddf 7a44 	vldr	s15, [pc, #272]	; 800d464 <__ieee754_rem_pio2f+0x254>
 800d356:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d468 <__ieee754_rem_pio2f+0x258>
 800d35a:	eef0 6a40 	vmov.f32	s13, s0
 800d35e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d362:	ee30 0a66 	vsub.f32	s0, s0, s13
 800d366:	eea6 0a27 	vfma.f32	s0, s12, s15
 800d36a:	eef0 7a40 	vmov.f32	s15, s0
 800d36e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d372:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d376:	ee15 2a90 	vmov	r2, s11
 800d37a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d37e:	1a5b      	subs	r3, r3, r1
 800d380:	2b19      	cmp	r3, #25
 800d382:	dc04      	bgt.n	800d38e <__ieee754_rem_pio2f+0x17e>
 800d384:	edc4 5a00 	vstr	s11, [r4]
 800d388:	eeb0 0a66 	vmov.f32	s0, s13
 800d38c:	e7c6      	b.n	800d31c <__ieee754_rem_pio2f+0x10c>
 800d38e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800d478 <__ieee754_rem_pio2f+0x268>
 800d392:	eeb0 0a66 	vmov.f32	s0, s13
 800d396:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d39a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d39e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800d47c <__ieee754_rem_pio2f+0x26c>
 800d3a2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d3a6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d3aa:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d3ae:	ed84 7a00 	vstr	s14, [r4]
 800d3b2:	e7b3      	b.n	800d31c <__ieee754_rem_pio2f+0x10c>
 800d3b4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d3b8:	db06      	blt.n	800d3c8 <__ieee754_rem_pio2f+0x1b8>
 800d3ba:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d3be:	edc0 7a01 	vstr	s15, [r0, #4]
 800d3c2:	edc0 7a00 	vstr	s15, [r0]
 800d3c6:	e733      	b.n	800d230 <__ieee754_rem_pio2f+0x20>
 800d3c8:	15ea      	asrs	r2, r5, #23
 800d3ca:	3a86      	subs	r2, #134	; 0x86
 800d3cc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d3d0:	ee07 3a90 	vmov	s15, r3
 800d3d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d3d8:	eddf 6a29 	vldr	s13, [pc, #164]	; 800d480 <__ieee754_rem_pio2f+0x270>
 800d3dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d3e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3e4:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d3e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d3ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d3f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d3f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3f8:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d3fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d400:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d408:	edcd 7a05 	vstr	s15, [sp, #20]
 800d40c:	d11e      	bne.n	800d44c <__ieee754_rem_pio2f+0x23c>
 800d40e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d416:	bf14      	ite	ne
 800d418:	2302      	movne	r3, #2
 800d41a:	2301      	moveq	r3, #1
 800d41c:	4919      	ldr	r1, [pc, #100]	; (800d484 <__ieee754_rem_pio2f+0x274>)
 800d41e:	9101      	str	r1, [sp, #4]
 800d420:	2102      	movs	r1, #2
 800d422:	9100      	str	r1, [sp, #0]
 800d424:	a803      	add	r0, sp, #12
 800d426:	4621      	mov	r1, r4
 800d428:	f000 f88e 	bl	800d548 <__kernel_rem_pio2f>
 800d42c:	2e00      	cmp	r6, #0
 800d42e:	f6bf af1c 	bge.w	800d26a <__ieee754_rem_pio2f+0x5a>
 800d432:	edd4 7a00 	vldr	s15, [r4]
 800d436:	eef1 7a67 	vneg.f32	s15, s15
 800d43a:	edc4 7a00 	vstr	s15, [r4]
 800d43e:	edd4 7a01 	vldr	s15, [r4, #4]
 800d442:	eef1 7a67 	vneg.f32	s15, s15
 800d446:	edc4 7a01 	vstr	s15, [r4, #4]
 800d44a:	e779      	b.n	800d340 <__ieee754_rem_pio2f+0x130>
 800d44c:	2303      	movs	r3, #3
 800d44e:	e7e5      	b.n	800d41c <__ieee754_rem_pio2f+0x20c>
 800d450:	3f490fd8 	.word	0x3f490fd8
 800d454:	4016cbe3 	.word	0x4016cbe3
 800d458:	3fc90f80 	.word	0x3fc90f80
 800d45c:	3fc90fd0 	.word	0x3fc90fd0
 800d460:	37354443 	.word	0x37354443
 800d464:	37354400 	.word	0x37354400
 800d468:	2e85a308 	.word	0x2e85a308
 800d46c:	43490f80 	.word	0x43490f80
 800d470:	3f22f984 	.word	0x3f22f984
 800d474:	0800de70 	.word	0x0800de70
 800d478:	2e85a300 	.word	0x2e85a300
 800d47c:	248d3132 	.word	0x248d3132
 800d480:	43800000 	.word	0x43800000
 800d484:	0800def0 	.word	0x0800def0

0800d488 <__kernel_cosf>:
 800d488:	ee10 3a10 	vmov	r3, s0
 800d48c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d490:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d494:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d498:	da05      	bge.n	800d4a6 <__kernel_cosf+0x1e>
 800d49a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d49e:	ee17 2a90 	vmov	r2, s15
 800d4a2:	2a00      	cmp	r2, #0
 800d4a4:	d03d      	beq.n	800d522 <__kernel_cosf+0x9a>
 800d4a6:	ee60 5a00 	vmul.f32	s11, s0, s0
 800d4aa:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d528 <__kernel_cosf+0xa0>
 800d4ae:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d52c <__kernel_cosf+0xa4>
 800d4b2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800d530 <__kernel_cosf+0xa8>
 800d4b6:	4a1f      	ldr	r2, [pc, #124]	; (800d534 <__kernel_cosf+0xac>)
 800d4b8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800d538 <__kernel_cosf+0xb0>
 800d4c2:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d4c6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800d53c <__kernel_cosf+0xb4>
 800d4ca:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d4ce:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800d540 <__kernel_cosf+0xb8>
 800d4d2:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d4d6:	eeb0 7a66 	vmov.f32	s14, s13
 800d4da:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d4de:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800d4e2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800d4e6:	ee67 6a25 	vmul.f32	s13, s14, s11
 800d4ea:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800d4ee:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d4f2:	dc04      	bgt.n	800d4fe <__kernel_cosf+0x76>
 800d4f4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d4f8:	ee36 0a47 	vsub.f32	s0, s12, s14
 800d4fc:	4770      	bx	lr
 800d4fe:	4a11      	ldr	r2, [pc, #68]	; (800d544 <__kernel_cosf+0xbc>)
 800d500:	4293      	cmp	r3, r2
 800d502:	bfda      	itte	le
 800d504:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800d508:	ee06 3a90 	vmovle	s13, r3
 800d50c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800d510:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d514:	ee36 0a66 	vsub.f32	s0, s12, s13
 800d518:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d51c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d520:	4770      	bx	lr
 800d522:	eeb0 0a46 	vmov.f32	s0, s12
 800d526:	4770      	bx	lr
 800d528:	ad47d74e 	.word	0xad47d74e
 800d52c:	310f74f6 	.word	0x310f74f6
 800d530:	3d2aaaab 	.word	0x3d2aaaab
 800d534:	3e999999 	.word	0x3e999999
 800d538:	b493f27c 	.word	0xb493f27c
 800d53c:	37d00d01 	.word	0x37d00d01
 800d540:	bab60b61 	.word	0xbab60b61
 800d544:	3f480000 	.word	0x3f480000

0800d548 <__kernel_rem_pio2f>:
 800d548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54c:	ed2d 8b04 	vpush	{d8-d9}
 800d550:	b0d9      	sub	sp, #356	; 0x164
 800d552:	4688      	mov	r8, r1
 800d554:	9002      	str	r0, [sp, #8]
 800d556:	49bb      	ldr	r1, [pc, #748]	; (800d844 <__kernel_rem_pio2f+0x2fc>)
 800d558:	9866      	ldr	r0, [sp, #408]	; 0x198
 800d55a:	9301      	str	r3, [sp, #4]
 800d55c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800d560:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800d564:	1e59      	subs	r1, r3, #1
 800d566:	1d13      	adds	r3, r2, #4
 800d568:	db27      	blt.n	800d5ba <__kernel_rem_pio2f+0x72>
 800d56a:	f1b2 0b03 	subs.w	fp, r2, #3
 800d56e:	bf48      	it	mi
 800d570:	f102 0b04 	addmi.w	fp, r2, #4
 800d574:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800d578:	1c45      	adds	r5, r0, #1
 800d57a:	00ec      	lsls	r4, r5, #3
 800d57c:	1a47      	subs	r7, r0, r1
 800d57e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800d854 <__kernel_rem_pio2f+0x30c>
 800d582:	9403      	str	r4, [sp, #12]
 800d584:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800d588:	eb0a 0c01 	add.w	ip, sl, r1
 800d58c:	ae1c      	add	r6, sp, #112	; 0x70
 800d58e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800d592:	2400      	movs	r4, #0
 800d594:	4564      	cmp	r4, ip
 800d596:	dd12      	ble.n	800d5be <__kernel_rem_pio2f+0x76>
 800d598:	9b01      	ldr	r3, [sp, #4]
 800d59a:	ac1c      	add	r4, sp, #112	; 0x70
 800d59c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800d5a0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800d5a4:	f04f 0c00 	mov.w	ip, #0
 800d5a8:	45d4      	cmp	ip, sl
 800d5aa:	dc27      	bgt.n	800d5fc <__kernel_rem_pio2f+0xb4>
 800d5ac:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800d5b0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800d854 <__kernel_rem_pio2f+0x30c>
 800d5b4:	4627      	mov	r7, r4
 800d5b6:	2600      	movs	r6, #0
 800d5b8:	e016      	b.n	800d5e8 <__kernel_rem_pio2f+0xa0>
 800d5ba:	2000      	movs	r0, #0
 800d5bc:	e7dc      	b.n	800d578 <__kernel_rem_pio2f+0x30>
 800d5be:	42e7      	cmn	r7, r4
 800d5c0:	bf5d      	ittte	pl
 800d5c2:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800d5c6:	ee07 3a90 	vmovpl	s15, r3
 800d5ca:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d5ce:	eef0 7a47 	vmovmi.f32	s15, s14
 800d5d2:	ece6 7a01 	vstmia	r6!, {s15}
 800d5d6:	3401      	adds	r4, #1
 800d5d8:	e7dc      	b.n	800d594 <__kernel_rem_pio2f+0x4c>
 800d5da:	ecf9 6a01 	vldmia	r9!, {s13}
 800d5de:	ed97 7a00 	vldr	s14, [r7]
 800d5e2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d5e6:	3601      	adds	r6, #1
 800d5e8:	428e      	cmp	r6, r1
 800d5ea:	f1a7 0704 	sub.w	r7, r7, #4
 800d5ee:	ddf4      	ble.n	800d5da <__kernel_rem_pio2f+0x92>
 800d5f0:	eceb 7a01 	vstmia	fp!, {s15}
 800d5f4:	f10c 0c01 	add.w	ip, ip, #1
 800d5f8:	3404      	adds	r4, #4
 800d5fa:	e7d5      	b.n	800d5a8 <__kernel_rem_pio2f+0x60>
 800d5fc:	ab08      	add	r3, sp, #32
 800d5fe:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800d602:	eddf 8a93 	vldr	s17, [pc, #588]	; 800d850 <__kernel_rem_pio2f+0x308>
 800d606:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800d84c <__kernel_rem_pio2f+0x304>
 800d60a:	9304      	str	r3, [sp, #16]
 800d60c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800d610:	4656      	mov	r6, sl
 800d612:	00b3      	lsls	r3, r6, #2
 800d614:	9305      	str	r3, [sp, #20]
 800d616:	ab58      	add	r3, sp, #352	; 0x160
 800d618:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800d61c:	ac08      	add	r4, sp, #32
 800d61e:	ab44      	add	r3, sp, #272	; 0x110
 800d620:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800d624:	46a4      	mov	ip, r4
 800d626:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800d62a:	4637      	mov	r7, r6
 800d62c:	2f00      	cmp	r7, #0
 800d62e:	f1a0 0004 	sub.w	r0, r0, #4
 800d632:	dc4f      	bgt.n	800d6d4 <__kernel_rem_pio2f+0x18c>
 800d634:	4628      	mov	r0, r5
 800d636:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800d63a:	f000 fb61 	bl	800dd00 <scalbnf>
 800d63e:	eeb0 8a40 	vmov.f32	s16, s0
 800d642:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800d646:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d64a:	f000 fb17 	bl	800dc7c <floorf>
 800d64e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800d652:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d656:	2d00      	cmp	r5, #0
 800d658:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800d65c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d660:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800d664:	ee17 9a90 	vmov	r9, s15
 800d668:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d66c:	dd44      	ble.n	800d6f8 <__kernel_rem_pio2f+0x1b0>
 800d66e:	f106 3cff 	add.w	ip, r6, #4294967295
 800d672:	ab08      	add	r3, sp, #32
 800d674:	f1c5 0e08 	rsb	lr, r5, #8
 800d678:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800d67c:	fa47 f00e 	asr.w	r0, r7, lr
 800d680:	4481      	add	r9, r0
 800d682:	fa00 f00e 	lsl.w	r0, r0, lr
 800d686:	1a3f      	subs	r7, r7, r0
 800d688:	f1c5 0007 	rsb	r0, r5, #7
 800d68c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800d690:	4107      	asrs	r7, r0
 800d692:	2f00      	cmp	r7, #0
 800d694:	dd3f      	ble.n	800d716 <__kernel_rem_pio2f+0x1ce>
 800d696:	f04f 0e00 	mov.w	lr, #0
 800d69a:	f109 0901 	add.w	r9, r9, #1
 800d69e:	4673      	mov	r3, lr
 800d6a0:	4576      	cmp	r6, lr
 800d6a2:	dc6b      	bgt.n	800d77c <__kernel_rem_pio2f+0x234>
 800d6a4:	2d00      	cmp	r5, #0
 800d6a6:	dd04      	ble.n	800d6b2 <__kernel_rem_pio2f+0x16a>
 800d6a8:	2d01      	cmp	r5, #1
 800d6aa:	d078      	beq.n	800d79e <__kernel_rem_pio2f+0x256>
 800d6ac:	2d02      	cmp	r5, #2
 800d6ae:	f000 8081 	beq.w	800d7b4 <__kernel_rem_pio2f+0x26c>
 800d6b2:	2f02      	cmp	r7, #2
 800d6b4:	d12f      	bne.n	800d716 <__kernel_rem_pio2f+0x1ce>
 800d6b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d6ba:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d6be:	b353      	cbz	r3, 800d716 <__kernel_rem_pio2f+0x1ce>
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800d6c6:	f000 fb1b 	bl	800dd00 <scalbnf>
 800d6ca:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800d6ce:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d6d2:	e020      	b.n	800d716 <__kernel_rem_pio2f+0x1ce>
 800d6d4:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d6d8:	3f01      	subs	r7, #1
 800d6da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6e2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d6e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d6ea:	ecac 0a01 	vstmia	ip!, {s0}
 800d6ee:	ed90 0a00 	vldr	s0, [r0]
 800d6f2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d6f6:	e799      	b.n	800d62c <__kernel_rem_pio2f+0xe4>
 800d6f8:	d105      	bne.n	800d706 <__kernel_rem_pio2f+0x1be>
 800d6fa:	1e70      	subs	r0, r6, #1
 800d6fc:	ab08      	add	r3, sp, #32
 800d6fe:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800d702:	11ff      	asrs	r7, r7, #7
 800d704:	e7c5      	b.n	800d692 <__kernel_rem_pio2f+0x14a>
 800d706:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d70a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d712:	da31      	bge.n	800d778 <__kernel_rem_pio2f+0x230>
 800d714:	2700      	movs	r7, #0
 800d716:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d71e:	f040 809b 	bne.w	800d858 <__kernel_rem_pio2f+0x310>
 800d722:	1e74      	subs	r4, r6, #1
 800d724:	46a4      	mov	ip, r4
 800d726:	2000      	movs	r0, #0
 800d728:	45d4      	cmp	ip, sl
 800d72a:	da4a      	bge.n	800d7c2 <__kernel_rem_pio2f+0x27a>
 800d72c:	2800      	cmp	r0, #0
 800d72e:	d07a      	beq.n	800d826 <__kernel_rem_pio2f+0x2de>
 800d730:	ab08      	add	r3, sp, #32
 800d732:	3d08      	subs	r5, #8
 800d734:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	f000 8081 	beq.w	800d840 <__kernel_rem_pio2f+0x2f8>
 800d73e:	4628      	mov	r0, r5
 800d740:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d744:	00a5      	lsls	r5, r4, #2
 800d746:	f000 fadb 	bl	800dd00 <scalbnf>
 800d74a:	aa44      	add	r2, sp, #272	; 0x110
 800d74c:	1d2b      	adds	r3, r5, #4
 800d74e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800d850 <__kernel_rem_pio2f+0x308>
 800d752:	18d1      	adds	r1, r2, r3
 800d754:	4622      	mov	r2, r4
 800d756:	2a00      	cmp	r2, #0
 800d758:	f280 80ae 	bge.w	800d8b8 <__kernel_rem_pio2f+0x370>
 800d75c:	4622      	mov	r2, r4
 800d75e:	2a00      	cmp	r2, #0
 800d760:	f2c0 80cc 	blt.w	800d8fc <__kernel_rem_pio2f+0x3b4>
 800d764:	a944      	add	r1, sp, #272	; 0x110
 800d766:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800d76a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800d848 <__kernel_rem_pio2f+0x300>
 800d76e:	eddf 7a39 	vldr	s15, [pc, #228]	; 800d854 <__kernel_rem_pio2f+0x30c>
 800d772:	2000      	movs	r0, #0
 800d774:	1aa1      	subs	r1, r4, r2
 800d776:	e0b6      	b.n	800d8e6 <__kernel_rem_pio2f+0x39e>
 800d778:	2702      	movs	r7, #2
 800d77a:	e78c      	b.n	800d696 <__kernel_rem_pio2f+0x14e>
 800d77c:	6820      	ldr	r0, [r4, #0]
 800d77e:	b94b      	cbnz	r3, 800d794 <__kernel_rem_pio2f+0x24c>
 800d780:	b118      	cbz	r0, 800d78a <__kernel_rem_pio2f+0x242>
 800d782:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800d786:	6020      	str	r0, [r4, #0]
 800d788:	2001      	movs	r0, #1
 800d78a:	f10e 0e01 	add.w	lr, lr, #1
 800d78e:	3404      	adds	r4, #4
 800d790:	4603      	mov	r3, r0
 800d792:	e785      	b.n	800d6a0 <__kernel_rem_pio2f+0x158>
 800d794:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800d798:	6020      	str	r0, [r4, #0]
 800d79a:	4618      	mov	r0, r3
 800d79c:	e7f5      	b.n	800d78a <__kernel_rem_pio2f+0x242>
 800d79e:	1e74      	subs	r4, r6, #1
 800d7a0:	a808      	add	r0, sp, #32
 800d7a2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800d7a6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d7aa:	f10d 0c20 	add.w	ip, sp, #32
 800d7ae:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800d7b2:	e77e      	b.n	800d6b2 <__kernel_rem_pio2f+0x16a>
 800d7b4:	1e74      	subs	r4, r6, #1
 800d7b6:	a808      	add	r0, sp, #32
 800d7b8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800d7bc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800d7c0:	e7f3      	b.n	800d7aa <__kernel_rem_pio2f+0x262>
 800d7c2:	ab08      	add	r3, sp, #32
 800d7c4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800d7c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d7cc:	4318      	orrs	r0, r3
 800d7ce:	e7ab      	b.n	800d728 <__kernel_rem_pio2f+0x1e0>
 800d7d0:	f10c 0c01 	add.w	ip, ip, #1
 800d7d4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800d7d8:	2c00      	cmp	r4, #0
 800d7da:	d0f9      	beq.n	800d7d0 <__kernel_rem_pio2f+0x288>
 800d7dc:	9b05      	ldr	r3, [sp, #20]
 800d7de:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800d7e2:	eb0d 0003 	add.w	r0, sp, r3
 800d7e6:	9b01      	ldr	r3, [sp, #4]
 800d7e8:	18f4      	adds	r4, r6, r3
 800d7ea:	ab1c      	add	r3, sp, #112	; 0x70
 800d7ec:	1c77      	adds	r7, r6, #1
 800d7ee:	384c      	subs	r0, #76	; 0x4c
 800d7f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d7f4:	4466      	add	r6, ip
 800d7f6:	42be      	cmp	r6, r7
 800d7f8:	f6ff af0b 	blt.w	800d612 <__kernel_rem_pio2f+0xca>
 800d7fc:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800d800:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d804:	ee07 3a90 	vmov	s15, r3
 800d808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d80c:	f04f 0c00 	mov.w	ip, #0
 800d810:	ece4 7a01 	vstmia	r4!, {s15}
 800d814:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800d854 <__kernel_rem_pio2f+0x30c>
 800d818:	46a1      	mov	r9, r4
 800d81a:	458c      	cmp	ip, r1
 800d81c:	dd07      	ble.n	800d82e <__kernel_rem_pio2f+0x2e6>
 800d81e:	ece0 7a01 	vstmia	r0!, {s15}
 800d822:	3701      	adds	r7, #1
 800d824:	e7e7      	b.n	800d7f6 <__kernel_rem_pio2f+0x2ae>
 800d826:	9804      	ldr	r0, [sp, #16]
 800d828:	f04f 0c01 	mov.w	ip, #1
 800d82c:	e7d2      	b.n	800d7d4 <__kernel_rem_pio2f+0x28c>
 800d82e:	ecfe 6a01 	vldmia	lr!, {s13}
 800d832:	ed39 7a01 	vldmdb	r9!, {s14}
 800d836:	f10c 0c01 	add.w	ip, ip, #1
 800d83a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d83e:	e7ec      	b.n	800d81a <__kernel_rem_pio2f+0x2d2>
 800d840:	3c01      	subs	r4, #1
 800d842:	e775      	b.n	800d730 <__kernel_rem_pio2f+0x1e8>
 800d844:	0800e234 	.word	0x0800e234
 800d848:	0800e208 	.word	0x0800e208
 800d84c:	43800000 	.word	0x43800000
 800d850:	3b800000 	.word	0x3b800000
 800d854:	00000000 	.word	0x00000000
 800d858:	9b03      	ldr	r3, [sp, #12]
 800d85a:	eeb0 0a48 	vmov.f32	s0, s16
 800d85e:	1a98      	subs	r0, r3, r2
 800d860:	f000 fa4e 	bl	800dd00 <scalbnf>
 800d864:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800d84c <__kernel_rem_pio2f+0x304>
 800d868:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d870:	db19      	blt.n	800d8a6 <__kernel_rem_pio2f+0x35e>
 800d872:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800d850 <__kernel_rem_pio2f+0x308>
 800d876:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d87a:	aa08      	add	r2, sp, #32
 800d87c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d880:	1c74      	adds	r4, r6, #1
 800d882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d886:	3508      	adds	r5, #8
 800d888:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d88c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d890:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d894:	ee10 3a10 	vmov	r3, s0
 800d898:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800d89c:	ee17 3a90 	vmov	r3, s15
 800d8a0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d8a4:	e74b      	b.n	800d73e <__kernel_rem_pio2f+0x1f6>
 800d8a6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d8aa:	aa08      	add	r2, sp, #32
 800d8ac:	ee10 3a10 	vmov	r3, s0
 800d8b0:	4634      	mov	r4, r6
 800d8b2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800d8b6:	e742      	b.n	800d73e <__kernel_rem_pio2f+0x1f6>
 800d8b8:	a808      	add	r0, sp, #32
 800d8ba:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800d8be:	9001      	str	r0, [sp, #4]
 800d8c0:	ee07 0a90 	vmov	s15, r0
 800d8c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8c8:	3a01      	subs	r2, #1
 800d8ca:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d8ce:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d8d2:	ed61 7a01 	vstmdb	r1!, {s15}
 800d8d6:	e73e      	b.n	800d756 <__kernel_rem_pio2f+0x20e>
 800d8d8:	ecfc 6a01 	vldmia	ip!, {s13}
 800d8dc:	ecb6 7a01 	vldmia	r6!, {s14}
 800d8e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d8e4:	3001      	adds	r0, #1
 800d8e6:	4550      	cmp	r0, sl
 800d8e8:	dc01      	bgt.n	800d8ee <__kernel_rem_pio2f+0x3a6>
 800d8ea:	4288      	cmp	r0, r1
 800d8ec:	ddf4      	ble.n	800d8d8 <__kernel_rem_pio2f+0x390>
 800d8ee:	a858      	add	r0, sp, #352	; 0x160
 800d8f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d8f4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800d8f8:	3a01      	subs	r2, #1
 800d8fa:	e730      	b.n	800d75e <__kernel_rem_pio2f+0x216>
 800d8fc:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800d8fe:	2a02      	cmp	r2, #2
 800d900:	dc09      	bgt.n	800d916 <__kernel_rem_pio2f+0x3ce>
 800d902:	2a00      	cmp	r2, #0
 800d904:	dc2a      	bgt.n	800d95c <__kernel_rem_pio2f+0x414>
 800d906:	d043      	beq.n	800d990 <__kernel_rem_pio2f+0x448>
 800d908:	f009 0007 	and.w	r0, r9, #7
 800d90c:	b059      	add	sp, #356	; 0x164
 800d90e:	ecbd 8b04 	vpop	{d8-d9}
 800d912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d916:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800d918:	2b03      	cmp	r3, #3
 800d91a:	d1f5      	bne.n	800d908 <__kernel_rem_pio2f+0x3c0>
 800d91c:	ab30      	add	r3, sp, #192	; 0xc0
 800d91e:	442b      	add	r3, r5
 800d920:	461a      	mov	r2, r3
 800d922:	4619      	mov	r1, r3
 800d924:	4620      	mov	r0, r4
 800d926:	2800      	cmp	r0, #0
 800d928:	f1a1 0104 	sub.w	r1, r1, #4
 800d92c:	dc51      	bgt.n	800d9d2 <__kernel_rem_pio2f+0x48a>
 800d92e:	4621      	mov	r1, r4
 800d930:	2901      	cmp	r1, #1
 800d932:	f1a2 0204 	sub.w	r2, r2, #4
 800d936:	dc5c      	bgt.n	800d9f2 <__kernel_rem_pio2f+0x4aa>
 800d938:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800d854 <__kernel_rem_pio2f+0x30c>
 800d93c:	3304      	adds	r3, #4
 800d93e:	2c01      	cmp	r4, #1
 800d940:	dc67      	bgt.n	800da12 <__kernel_rem_pio2f+0x4ca>
 800d942:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800d946:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800d94a:	2f00      	cmp	r7, #0
 800d94c:	d167      	bne.n	800da1e <__kernel_rem_pio2f+0x4d6>
 800d94e:	edc8 6a00 	vstr	s13, [r8]
 800d952:	ed88 7a01 	vstr	s14, [r8, #4]
 800d956:	edc8 7a02 	vstr	s15, [r8, #8]
 800d95a:	e7d5      	b.n	800d908 <__kernel_rem_pio2f+0x3c0>
 800d95c:	aa30      	add	r2, sp, #192	; 0xc0
 800d95e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800d854 <__kernel_rem_pio2f+0x30c>
 800d962:	4413      	add	r3, r2
 800d964:	4622      	mov	r2, r4
 800d966:	2a00      	cmp	r2, #0
 800d968:	da24      	bge.n	800d9b4 <__kernel_rem_pio2f+0x46c>
 800d96a:	b34f      	cbz	r7, 800d9c0 <__kernel_rem_pio2f+0x478>
 800d96c:	eef1 7a47 	vneg.f32	s15, s14
 800d970:	edc8 7a00 	vstr	s15, [r8]
 800d974:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800d978:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d97c:	aa31      	add	r2, sp, #196	; 0xc4
 800d97e:	2301      	movs	r3, #1
 800d980:	429c      	cmp	r4, r3
 800d982:	da20      	bge.n	800d9c6 <__kernel_rem_pio2f+0x47e>
 800d984:	b10f      	cbz	r7, 800d98a <__kernel_rem_pio2f+0x442>
 800d986:	eef1 7a67 	vneg.f32	s15, s15
 800d98a:	edc8 7a01 	vstr	s15, [r8, #4]
 800d98e:	e7bb      	b.n	800d908 <__kernel_rem_pio2f+0x3c0>
 800d990:	aa30      	add	r2, sp, #192	; 0xc0
 800d992:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800d854 <__kernel_rem_pio2f+0x30c>
 800d996:	4413      	add	r3, r2
 800d998:	2c00      	cmp	r4, #0
 800d99a:	da05      	bge.n	800d9a8 <__kernel_rem_pio2f+0x460>
 800d99c:	b10f      	cbz	r7, 800d9a2 <__kernel_rem_pio2f+0x45a>
 800d99e:	eef1 7a67 	vneg.f32	s15, s15
 800d9a2:	edc8 7a00 	vstr	s15, [r8]
 800d9a6:	e7af      	b.n	800d908 <__kernel_rem_pio2f+0x3c0>
 800d9a8:	ed33 7a01 	vldmdb	r3!, {s14}
 800d9ac:	3c01      	subs	r4, #1
 800d9ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9b2:	e7f1      	b.n	800d998 <__kernel_rem_pio2f+0x450>
 800d9b4:	ed73 7a01 	vldmdb	r3!, {s15}
 800d9b8:	3a01      	subs	r2, #1
 800d9ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d9be:	e7d2      	b.n	800d966 <__kernel_rem_pio2f+0x41e>
 800d9c0:	eef0 7a47 	vmov.f32	s15, s14
 800d9c4:	e7d4      	b.n	800d970 <__kernel_rem_pio2f+0x428>
 800d9c6:	ecb2 7a01 	vldmia	r2!, {s14}
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9d0:	e7d6      	b.n	800d980 <__kernel_rem_pio2f+0x438>
 800d9d2:	edd1 7a00 	vldr	s15, [r1]
 800d9d6:	edd1 6a01 	vldr	s13, [r1, #4]
 800d9da:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d9de:	3801      	subs	r0, #1
 800d9e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9e4:	ed81 7a00 	vstr	s14, [r1]
 800d9e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ec:	edc1 7a01 	vstr	s15, [r1, #4]
 800d9f0:	e799      	b.n	800d926 <__kernel_rem_pio2f+0x3de>
 800d9f2:	edd2 7a00 	vldr	s15, [r2]
 800d9f6:	edd2 6a01 	vldr	s13, [r2, #4]
 800d9fa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d9fe:	3901      	subs	r1, #1
 800da00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da04:	ed82 7a00 	vstr	s14, [r2]
 800da08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da0c:	edc2 7a01 	vstr	s15, [r2, #4]
 800da10:	e78e      	b.n	800d930 <__kernel_rem_pio2f+0x3e8>
 800da12:	ed33 7a01 	vldmdb	r3!, {s14}
 800da16:	3c01      	subs	r4, #1
 800da18:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da1c:	e78f      	b.n	800d93e <__kernel_rem_pio2f+0x3f6>
 800da1e:	eef1 6a66 	vneg.f32	s13, s13
 800da22:	eeb1 7a47 	vneg.f32	s14, s14
 800da26:	edc8 6a00 	vstr	s13, [r8]
 800da2a:	ed88 7a01 	vstr	s14, [r8, #4]
 800da2e:	eef1 7a67 	vneg.f32	s15, s15
 800da32:	e790      	b.n	800d956 <__kernel_rem_pio2f+0x40e>

0800da34 <__kernel_sinf>:
 800da34:	ee10 3a10 	vmov	r3, s0
 800da38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da3c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800da40:	da04      	bge.n	800da4c <__kernel_sinf+0x18>
 800da42:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800da46:	ee17 3a90 	vmov	r3, s15
 800da4a:	b35b      	cbz	r3, 800daa4 <__kernel_sinf+0x70>
 800da4c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800da50:	eddf 7a15 	vldr	s15, [pc, #84]	; 800daa8 <__kernel_sinf+0x74>
 800da54:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800daac <__kernel_sinf+0x78>
 800da58:	eea7 6a27 	vfma.f32	s12, s14, s15
 800da5c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800dab0 <__kernel_sinf+0x7c>
 800da60:	eee6 7a07 	vfma.f32	s15, s12, s14
 800da64:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800dab4 <__kernel_sinf+0x80>
 800da68:	eea7 6a87 	vfma.f32	s12, s15, s14
 800da6c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800dab8 <__kernel_sinf+0x84>
 800da70:	ee60 6a07 	vmul.f32	s13, s0, s14
 800da74:	eee6 7a07 	vfma.f32	s15, s12, s14
 800da78:	b930      	cbnz	r0, 800da88 <__kernel_sinf+0x54>
 800da7a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800dabc <__kernel_sinf+0x88>
 800da7e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800da82:	eea6 0a26 	vfma.f32	s0, s12, s13
 800da86:	4770      	bx	lr
 800da88:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800da8c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800da90:	eee0 7a86 	vfma.f32	s15, s1, s12
 800da94:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800da98:	eddf 7a09 	vldr	s15, [pc, #36]	; 800dac0 <__kernel_sinf+0x8c>
 800da9c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800daa0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop
 800daa8:	2f2ec9d3 	.word	0x2f2ec9d3
 800daac:	b2d72f34 	.word	0xb2d72f34
 800dab0:	3638ef1b 	.word	0x3638ef1b
 800dab4:	b9500d01 	.word	0xb9500d01
 800dab8:	3c088889 	.word	0x3c088889
 800dabc:	be2aaaab 	.word	0xbe2aaaab
 800dac0:	3e2aaaab 	.word	0x3e2aaaab

0800dac4 <with_errno>:
 800dac4:	b570      	push	{r4, r5, r6, lr}
 800dac6:	4604      	mov	r4, r0
 800dac8:	460d      	mov	r5, r1
 800daca:	4616      	mov	r6, r2
 800dacc:	f7fe f9f2 	bl	800beb4 <__errno>
 800dad0:	4629      	mov	r1, r5
 800dad2:	6006      	str	r6, [r0, #0]
 800dad4:	4620      	mov	r0, r4
 800dad6:	bd70      	pop	{r4, r5, r6, pc}

0800dad8 <xflow>:
 800dad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dada:	4614      	mov	r4, r2
 800dadc:	461d      	mov	r5, r3
 800dade:	b108      	cbz	r0, 800dae4 <xflow+0xc>
 800dae0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dae4:	e9cd 2300 	strd	r2, r3, [sp]
 800dae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800daec:	4620      	mov	r0, r4
 800daee:	4629      	mov	r1, r5
 800daf0:	f7f2 fd2e 	bl	8000550 <__aeabi_dmul>
 800daf4:	2222      	movs	r2, #34	; 0x22
 800daf6:	b003      	add	sp, #12
 800daf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dafc:	f7ff bfe2 	b.w	800dac4 <with_errno>

0800db00 <__math_uflow>:
 800db00:	b508      	push	{r3, lr}
 800db02:	2200      	movs	r2, #0
 800db04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800db08:	f7ff ffe6 	bl	800dad8 <xflow>
 800db0c:	ec41 0b10 	vmov	d0, r0, r1
 800db10:	bd08      	pop	{r3, pc}

0800db12 <__math_oflow>:
 800db12:	b508      	push	{r3, lr}
 800db14:	2200      	movs	r2, #0
 800db16:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800db1a:	f7ff ffdd 	bl	800dad8 <xflow>
 800db1e:	ec41 0b10 	vmov	d0, r0, r1
 800db22:	bd08      	pop	{r3, pc}

0800db24 <fabs>:
 800db24:	ec51 0b10 	vmov	r0, r1, d0
 800db28:	ee10 2a10 	vmov	r2, s0
 800db2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db30:	ec43 2b10 	vmov	d0, r2, r3
 800db34:	4770      	bx	lr

0800db36 <finite>:
 800db36:	b082      	sub	sp, #8
 800db38:	ed8d 0b00 	vstr	d0, [sp]
 800db3c:	9801      	ldr	r0, [sp, #4]
 800db3e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800db42:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800db46:	0fc0      	lsrs	r0, r0, #31
 800db48:	b002      	add	sp, #8
 800db4a:	4770      	bx	lr
 800db4c:	0000      	movs	r0, r0
	...

0800db50 <nan>:
 800db50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800db58 <nan+0x8>
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop
 800db58:	00000000 	.word	0x00000000
 800db5c:	7ff80000 	.word	0x7ff80000

0800db60 <scalbn>:
 800db60:	b570      	push	{r4, r5, r6, lr}
 800db62:	ec55 4b10 	vmov	r4, r5, d0
 800db66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800db6a:	4606      	mov	r6, r0
 800db6c:	462b      	mov	r3, r5
 800db6e:	b99a      	cbnz	r2, 800db98 <scalbn+0x38>
 800db70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800db74:	4323      	orrs	r3, r4
 800db76:	d036      	beq.n	800dbe6 <scalbn+0x86>
 800db78:	4b39      	ldr	r3, [pc, #228]	; (800dc60 <scalbn+0x100>)
 800db7a:	4629      	mov	r1, r5
 800db7c:	ee10 0a10 	vmov	r0, s0
 800db80:	2200      	movs	r2, #0
 800db82:	f7f2 fce5 	bl	8000550 <__aeabi_dmul>
 800db86:	4b37      	ldr	r3, [pc, #220]	; (800dc64 <scalbn+0x104>)
 800db88:	429e      	cmp	r6, r3
 800db8a:	4604      	mov	r4, r0
 800db8c:	460d      	mov	r5, r1
 800db8e:	da10      	bge.n	800dbb2 <scalbn+0x52>
 800db90:	a32b      	add	r3, pc, #172	; (adr r3, 800dc40 <scalbn+0xe0>)
 800db92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db96:	e03a      	b.n	800dc0e <scalbn+0xae>
 800db98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800db9c:	428a      	cmp	r2, r1
 800db9e:	d10c      	bne.n	800dbba <scalbn+0x5a>
 800dba0:	ee10 2a10 	vmov	r2, s0
 800dba4:	4620      	mov	r0, r4
 800dba6:	4629      	mov	r1, r5
 800dba8:	f7f2 fb1c 	bl	80001e4 <__adddf3>
 800dbac:	4604      	mov	r4, r0
 800dbae:	460d      	mov	r5, r1
 800dbb0:	e019      	b.n	800dbe6 <scalbn+0x86>
 800dbb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	3a36      	subs	r2, #54	; 0x36
 800dbba:	4432      	add	r2, r6
 800dbbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dbc0:	428a      	cmp	r2, r1
 800dbc2:	dd08      	ble.n	800dbd6 <scalbn+0x76>
 800dbc4:	2d00      	cmp	r5, #0
 800dbc6:	a120      	add	r1, pc, #128	; (adr r1, 800dc48 <scalbn+0xe8>)
 800dbc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbcc:	da1c      	bge.n	800dc08 <scalbn+0xa8>
 800dbce:	a120      	add	r1, pc, #128	; (adr r1, 800dc50 <scalbn+0xf0>)
 800dbd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbd4:	e018      	b.n	800dc08 <scalbn+0xa8>
 800dbd6:	2a00      	cmp	r2, #0
 800dbd8:	dd08      	ble.n	800dbec <scalbn+0x8c>
 800dbda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dbde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dbe2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dbe6:	ec45 4b10 	vmov	d0, r4, r5
 800dbea:	bd70      	pop	{r4, r5, r6, pc}
 800dbec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dbf0:	da19      	bge.n	800dc26 <scalbn+0xc6>
 800dbf2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dbf6:	429e      	cmp	r6, r3
 800dbf8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800dbfc:	dd0a      	ble.n	800dc14 <scalbn+0xb4>
 800dbfe:	a112      	add	r1, pc, #72	; (adr r1, 800dc48 <scalbn+0xe8>)
 800dc00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d1e2      	bne.n	800dbce <scalbn+0x6e>
 800dc08:	a30f      	add	r3, pc, #60	; (adr r3, 800dc48 <scalbn+0xe8>)
 800dc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0e:	f7f2 fc9f 	bl	8000550 <__aeabi_dmul>
 800dc12:	e7cb      	b.n	800dbac <scalbn+0x4c>
 800dc14:	a10a      	add	r1, pc, #40	; (adr r1, 800dc40 <scalbn+0xe0>)
 800dc16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d0b8      	beq.n	800db90 <scalbn+0x30>
 800dc1e:	a10e      	add	r1, pc, #56	; (adr r1, 800dc58 <scalbn+0xf8>)
 800dc20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc24:	e7b4      	b.n	800db90 <scalbn+0x30>
 800dc26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dc2a:	3236      	adds	r2, #54	; 0x36
 800dc2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dc30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dc34:	4620      	mov	r0, r4
 800dc36:	4b0c      	ldr	r3, [pc, #48]	; (800dc68 <scalbn+0x108>)
 800dc38:	2200      	movs	r2, #0
 800dc3a:	e7e8      	b.n	800dc0e <scalbn+0xae>
 800dc3c:	f3af 8000 	nop.w
 800dc40:	c2f8f359 	.word	0xc2f8f359
 800dc44:	01a56e1f 	.word	0x01a56e1f
 800dc48:	8800759c 	.word	0x8800759c
 800dc4c:	7e37e43c 	.word	0x7e37e43c
 800dc50:	8800759c 	.word	0x8800759c
 800dc54:	fe37e43c 	.word	0xfe37e43c
 800dc58:	c2f8f359 	.word	0xc2f8f359
 800dc5c:	81a56e1f 	.word	0x81a56e1f
 800dc60:	43500000 	.word	0x43500000
 800dc64:	ffff3cb0 	.word	0xffff3cb0
 800dc68:	3c900000 	.word	0x3c900000

0800dc6c <fabsf>:
 800dc6c:	ee10 3a10 	vmov	r3, s0
 800dc70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc74:	ee00 3a10 	vmov	s0, r3
 800dc78:	4770      	bx	lr
	...

0800dc7c <floorf>:
 800dc7c:	ee10 3a10 	vmov	r3, s0
 800dc80:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800dc84:	3a7f      	subs	r2, #127	; 0x7f
 800dc86:	2a16      	cmp	r2, #22
 800dc88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dc8c:	dc2a      	bgt.n	800dce4 <floorf+0x68>
 800dc8e:	2a00      	cmp	r2, #0
 800dc90:	da11      	bge.n	800dcb6 <floorf+0x3a>
 800dc92:	eddf 7a18 	vldr	s15, [pc, #96]	; 800dcf4 <floorf+0x78>
 800dc96:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dc9a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dca2:	dd05      	ble.n	800dcb0 <floorf+0x34>
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	da23      	bge.n	800dcf0 <floorf+0x74>
 800dca8:	4a13      	ldr	r2, [pc, #76]	; (800dcf8 <floorf+0x7c>)
 800dcaa:	2900      	cmp	r1, #0
 800dcac:	bf18      	it	ne
 800dcae:	4613      	movne	r3, r2
 800dcb0:	ee00 3a10 	vmov	s0, r3
 800dcb4:	4770      	bx	lr
 800dcb6:	4911      	ldr	r1, [pc, #68]	; (800dcfc <floorf+0x80>)
 800dcb8:	4111      	asrs	r1, r2
 800dcba:	420b      	tst	r3, r1
 800dcbc:	d0fa      	beq.n	800dcb4 <floorf+0x38>
 800dcbe:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800dcf4 <floorf+0x78>
 800dcc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dcc6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dcca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcce:	ddef      	ble.n	800dcb0 <floorf+0x34>
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	bfbe      	ittt	lt
 800dcd4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800dcd8:	fa40 f202 	asrlt.w	r2, r0, r2
 800dcdc:	189b      	addlt	r3, r3, r2
 800dcde:	ea23 0301 	bic.w	r3, r3, r1
 800dce2:	e7e5      	b.n	800dcb0 <floorf+0x34>
 800dce4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800dce8:	d3e4      	bcc.n	800dcb4 <floorf+0x38>
 800dcea:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dcee:	4770      	bx	lr
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	e7dd      	b.n	800dcb0 <floorf+0x34>
 800dcf4:	7149f2ca 	.word	0x7149f2ca
 800dcf8:	bf800000 	.word	0xbf800000
 800dcfc:	007fffff 	.word	0x007fffff

0800dd00 <scalbnf>:
 800dd00:	ee10 3a10 	vmov	r3, s0
 800dd04:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800dd08:	d025      	beq.n	800dd56 <scalbnf+0x56>
 800dd0a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800dd0e:	d302      	bcc.n	800dd16 <scalbnf+0x16>
 800dd10:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dd14:	4770      	bx	lr
 800dd16:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800dd1a:	d122      	bne.n	800dd62 <scalbnf+0x62>
 800dd1c:	4b2a      	ldr	r3, [pc, #168]	; (800ddc8 <scalbnf+0xc8>)
 800dd1e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ddcc <scalbnf+0xcc>
 800dd22:	4298      	cmp	r0, r3
 800dd24:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dd28:	db16      	blt.n	800dd58 <scalbnf+0x58>
 800dd2a:	ee10 3a10 	vmov	r3, s0
 800dd2e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800dd32:	3a19      	subs	r2, #25
 800dd34:	4402      	add	r2, r0
 800dd36:	2afe      	cmp	r2, #254	; 0xfe
 800dd38:	dd15      	ble.n	800dd66 <scalbnf+0x66>
 800dd3a:	ee10 3a10 	vmov	r3, s0
 800dd3e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800ddd0 <scalbnf+0xd0>
 800dd42:	eddf 6a24 	vldr	s13, [pc, #144]	; 800ddd4 <scalbnf+0xd4>
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	eeb0 7a67 	vmov.f32	s14, s15
 800dd4c:	bfb8      	it	lt
 800dd4e:	eef0 7a66 	vmovlt.f32	s15, s13
 800dd52:	ee27 0a27 	vmul.f32	s0, s14, s15
 800dd56:	4770      	bx	lr
 800dd58:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ddd8 <scalbnf+0xd8>
 800dd5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dd60:	4770      	bx	lr
 800dd62:	0dd2      	lsrs	r2, r2, #23
 800dd64:	e7e6      	b.n	800dd34 <scalbnf+0x34>
 800dd66:	2a00      	cmp	r2, #0
 800dd68:	dd06      	ble.n	800dd78 <scalbnf+0x78>
 800dd6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dd6e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800dd72:	ee00 3a10 	vmov	s0, r3
 800dd76:	4770      	bx	lr
 800dd78:	f112 0f16 	cmn.w	r2, #22
 800dd7c:	da1a      	bge.n	800ddb4 <scalbnf+0xb4>
 800dd7e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dd82:	4298      	cmp	r0, r3
 800dd84:	ee10 3a10 	vmov	r3, s0
 800dd88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd8c:	dd0a      	ble.n	800dda4 <scalbnf+0xa4>
 800dd8e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ddd0 <scalbnf+0xd0>
 800dd92:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ddd4 <scalbnf+0xd4>
 800dd96:	eef0 7a40 	vmov.f32	s15, s0
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	bf18      	it	ne
 800dd9e:	eeb0 0a47 	vmovne.f32	s0, s14
 800dda2:	e7db      	b.n	800dd5c <scalbnf+0x5c>
 800dda4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800ddd8 <scalbnf+0xd8>
 800dda8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800dddc <scalbnf+0xdc>
 800ddac:	eef0 7a40 	vmov.f32	s15, s0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	e7f3      	b.n	800dd9c <scalbnf+0x9c>
 800ddb4:	3219      	adds	r2, #25
 800ddb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ddba:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ddbe:	eddf 7a08 	vldr	s15, [pc, #32]	; 800dde0 <scalbnf+0xe0>
 800ddc2:	ee07 3a10 	vmov	s14, r3
 800ddc6:	e7c4      	b.n	800dd52 <scalbnf+0x52>
 800ddc8:	ffff3cb0 	.word	0xffff3cb0
 800ddcc:	4c000000 	.word	0x4c000000
 800ddd0:	7149f2ca 	.word	0x7149f2ca
 800ddd4:	f149f2ca 	.word	0xf149f2ca
 800ddd8:	0da24260 	.word	0x0da24260
 800dddc:	8da24260 	.word	0x8da24260
 800dde0:	33000000 	.word	0x33000000

0800dde4 <_init>:
 800dde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dde6:	bf00      	nop
 800dde8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddea:	bc08      	pop	{r3}
 800ddec:	469e      	mov	lr, r3
 800ddee:	4770      	bx	lr

0800ddf0 <_fini>:
 800ddf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddf2:	bf00      	nop
 800ddf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddf6:	bc08      	pop	{r3}
 800ddf8:	469e      	mov	lr, r3
 800ddfa:	4770      	bx	lr
