
RoboticArmControlSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2cc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800e468  0800e468  0001e468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8a8  0800e8a8  000202fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8a8  0800e8a8  0001e8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8b0  0800e8b0  000202fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8b0  0800e8b0  0001e8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8b4  0800e8b4  0001e8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  0800e8b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c6c  200002fc  0800ebb4  000202fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f68  0800ebb4  00020f68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156f6  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002524  00000000  00000000  00035a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00037f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  00039100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ea1  00000000  00000000  0003a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e21  00000000  00000000  000520a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d609  00000000  00000000  00066eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001044d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f0  00000000  00000000  00104524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002fc 	.word	0x200002fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800e44c 	.word	0x0800e44c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000300 	.word	0x20000300
 80001d4:	0800e44c 	.word	0x0800e44c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <modbus_1t5_Timeout+0x1c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	751a      	strb	r2, [r3, #20]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	20000318 	.word	0x20000318

08000ec4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <modbus_3t5_Timeout+0x1c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	755a      	strb	r2, [r3, #21]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	20000318 	.word	0x20000318

08000ee4 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000efe:	1c59      	adds	r1, r3, #1
 8000f00:	b289      	uxth	r1, r1
 8000f02:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000f06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f0a:	d210      	bcs.n	8000f2e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68d8      	ldr	r0, [r3, #12]
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f1e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f22:	4413      	add	r3, r2
 8000f24:	3302      	adds	r3, #2
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f00a f95f 	bl	800b1ec <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <modbus_UART_Recived+0x60>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000318 	.word	0x20000318

08000f48 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f52:	4a24      	ldr	r2, [pc, #144]	; (8000fe4 <Modbus_init+0x9c>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <Modbus_init+0x9c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <Modbus_init+0x9c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <Modbus_init+0xa0>)
 8000f68:	2114      	movs	r1, #20
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f009 faf0 	bl	800a550 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <Modbus_init+0x9c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <Modbus_init+0xa4>)
 8000f78:	210e      	movs	r1, #14
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f009 fae8 	bl	800a550 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <Modbus_init+0x9c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <Modbus_init+0xa8>)
 8000f88:	2103      	movs	r1, #3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f00a f886 	bl	800b09c <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <Modbus_init+0x9c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68d8      	ldr	r0, [r3, #12]
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <Modbus_init+0x9c>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <Modbus_init+0x9c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000fa2:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	2201      	movs	r2, #1
 8000fac:	4619      	mov	r1, r3
 8000fae:	f00a f91d 	bl	800b1ec <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <Modbus_init+0x9c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d10c      	bne.n	8000fdc <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <Modbus_init+0x9c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f008 fb75 	bl	80096b8 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <Modbus_init+0x9c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f008 fdaa 	bl	8009b30 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000318 	.word	0x20000318
 8000fe8:	08000ea5 	.word	0x08000ea5
 8000fec:	08000ec5 	.word	0x08000ec5
 8000ff0:	08000ee5 	.word	0x08000ee5

08000ff4 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001000:	23ff      	movs	r3, #255	; 0xff
 8001002:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001004:	23ff      	movs	r3, #255	; 0xff
 8001006:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001008:	e013      	b.n	8001032 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	4053      	eors	r3, r2
 8001016:	b2db      	uxtb	r3, r3
 8001018:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <CRC16+0x64>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4413      	add	r3, r2
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	4053      	eors	r3, r2
 8001026:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001028:	4a0c      	ldr	r2, [pc, #48]	; (800105c <CRC16+0x68>)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001032:	883b      	ldrh	r3, [r7, #0]
 8001034:	1e5a      	subs	r2, r3, #1
 8001036:	803a      	strh	r2, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e6      	bne.n	800100a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	b29b      	uxth	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20000100 	.word	0x20000100
 800105c:	20000000 	.word	0x20000000

08001060 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001066:	4b81      	ldr	r3, [pc, #516]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	7e1b      	ldrb	r3, [r3, #24]
 800106c:	3b01      	subs	r3, #1
 800106e:	2b03      	cmp	r3, #3
 8001070:	d80a      	bhi.n	8001088 <Modbus_Protocal_Worker+0x28>
 8001072:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <Modbus_Protocal_Worker+0x18>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	08001093 	.word	0x08001093
 800107c:	08001233 	.word	0x08001233
 8001080:	0800111f 	.word	0x0800111f
 8001084:	08001145 	.word	0x08001145
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001088:	4b78      	ldr	r3, [pc, #480]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2201      	movs	r2, #1
 800108e:	761a      	strb	r2, [r3, #24]
		break;
 8001090:	e0e8      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001092:	4b76      	ldr	r3, [pc, #472]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800109e:	f000 f9dd 	bl	800145c <Modbus_Emission>
 80010a2:	e01c      	b.n	80010de <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80010a4:	4b71      	ldr	r3, [pc, #452]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	7d9b      	ldrb	r3, [r3, #22]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d017      	beq.n	80010de <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80010ae:	4b6f      	ldr	r3, [pc, #444]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80010b6:	4b6d      	ldr	r3, [pc, #436]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80010be:	4b6b      	ldr	r3, [pc, #428]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b68      	ldr	r3, [pc, #416]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 0201 	orr.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010d6:	4b65      	ldr	r3, [pc, #404]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2203      	movs	r2, #3
 80010dc:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010de:	4b63      	ldr	r3, [pc, #396]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b20      	cmp	r3, #32
 80010ec:	f040 80b3 	bne.w	8001256 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80010f0:	4b5e      	ldr	r3, [pc, #376]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010fa:	4b5c      	ldr	r3, [pc, #368]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68d8      	ldr	r0, [r3, #12]
 8001100:	4b5a      	ldr	r3, [pc, #360]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b59      	ldr	r3, [pc, #356]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800110c:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001110:	4413      	add	r3, r2
 8001112:	3302      	adds	r3, #2
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	f00a f868 	bl	800b1ec <HAL_UART_Receive_IT>
		}
		break;
 800111c:	e09b      	b.n	8001256 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800111e:	4b53      	ldr	r3, [pc, #332]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	7d1b      	ldrb	r3, [r3, #20]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 8098 	beq.w	800125a <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800112a:	4b50      	ldr	r3, [pc, #320]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001132:	4b4e      	ldr	r3, [pc, #312]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	22fe      	movs	r2, #254	; 0xfe
 8001138:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800113a:	4b4c      	ldr	r3, [pc, #304]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2204      	movs	r2, #4
 8001140:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001142:	e08a      	b.n	800125a <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001144:	4b49      	ldr	r3, [pc, #292]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	7d9b      	ldrb	r3, [r3, #22]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d009      	beq.n	8001162 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d103      	bne.n	8001162 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800115a:	4b44      	ldr	r3, [pc, #272]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	22ff      	movs	r2, #255	; 0xff
 8001160:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001162:	4b42      	ldr	r3, [pc, #264]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800116a:	f113 0f02 	cmn.w	r3, #2
 800116e:	d150      	bne.n	8001212 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001170:	4b3e      	ldr	r3, [pc, #248]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2200      	movs	r2, #0
 8001176:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001178:	4b3c      	ldr	r3, [pc, #240]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001180:	4b3a      	ldr	r3, [pc, #232]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001188:	3b02      	subs	r3, #2
 800118a:	4619      	mov	r1, r3
 800118c:	4610      	mov	r0, r2
 800118e:	f7ff ff31 	bl	8000ff4 <CRC16>
 8001192:	4603      	mov	r3, r0
 8001194:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001196:	793a      	ldrb	r2, [r7, #4]
 8001198:	4b34      	ldr	r3, [pc, #208]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800119a:	6819      	ldr	r1, [r3, #0]
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011a4:	3b02      	subs	r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d10c      	bne.n	80011ca <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80011b0:	797a      	ldrb	r2, [r7, #5]
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011b4:	6819      	ldr	r1, [r3, #0]
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011be:	3b01      	subs	r3, #1
 80011c0:	440b      	add	r3, r1
 80011c2:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d004      	beq.n	80011d4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	22ff      	movs	r2, #255	; 0xff
 80011d0:	75da      	strb	r2, [r3, #23]
				break;
 80011d2:	e047      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d113      	bne.n	800120e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80011ee:	4b1f      	ldr	r3, [pc, #124]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80011f6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001200:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001202:	461a      	mov	r2, r3
 8001204:	f00b f9b4 	bl	800c570 <memcpy>

			//execute command
			Modbus_frame_response();
 8001208:	f000 f910 	bl	800142c <Modbus_frame_response>
 800120c:	e001      	b.n	8001212 <Modbus_Protocal_Worker+0x1b2>
				break;
 800120e:	bf00      	nop
					}
		break;


	}
}
 8001210:	e028      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	7d5b      	ldrb	r3, [r3, #21]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2201      	movs	r2, #1
 8001222:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	4618      	mov	r0, r3
 800122c:	f00a f88c 	bl	800b348 <HAL_UART_AbortReceive>
		break;
 8001230:	e015      	b.n	800125e <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b20      	cmp	r3, #32
 8001240:	d10f      	bne.n	8001262 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <Modbus_Protocal_Worker+0x20c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	761a      	strb	r2, [r3, #24]
		break;
 8001254:	e005      	b.n	8001262 <Modbus_Protocal_Worker+0x202>
		break;
 8001256:	bf00      	nop
 8001258:	e004      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 800125a:	bf00      	nop
 800125c:	e002      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 800125e:	bf00      	nop
 8001260:	e000      	b.n	8001264 <Modbus_Protocal_Worker+0x204>
		break;
 8001262:	bf00      	nop
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000318 	.word	0x20000318

08001270 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <modbusWrite1Register+0x80>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	7e9b      	ldrb	r3, [r3, #26]
 800127c:	b29b      	uxth	r3, r3
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <modbusWrite1Register+0x80>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7edb      	ldrb	r3, [r3, #27]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4413      	add	r3, r2
 800128c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800128e:	88fa      	ldrh	r2, [r7, #6]
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <modbusWrite1Register+0x80>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	429a      	cmp	r2, r3
 8001298:	d903      	bls.n	80012a2 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800129a:	2002      	movs	r0, #2
 800129c:	f000 f8a4 	bl	80013e8 <ModbusErrorReply>
			 return;
 80012a0:	e023      	b.n	80012ea <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <modbusWrite1Register+0x80>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <modbusWrite1Register+0x80>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	440b      	add	r3, r1
 80012b2:	7f12      	ldrb	r2, [r2, #28]
 80012b4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <modbusWrite1Register+0x80>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <modbusWrite1Register+0x80>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6859      	ldr	r1, [r3, #4]
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	440b      	add	r3, r1
 80012c6:	7f52      	ldrb	r2, [r2, #29]
 80012c8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <modbusWrite1Register+0x80>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <modbusWrite1Register+0x80>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 80012d8:	2208      	movs	r2, #8
 80012da:	4619      	mov	r1, r3
 80012dc:	f00b f948 	bl	800c570 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <modbusWrite1Register+0x80>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2205      	movs	r2, #5
 80012e6:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000318 	.word	0x20000318

080012f4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <modbusRead1Register+0xf0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	7f1b      	ldrb	r3, [r3, #28]
 8001300:	b29b      	uxth	r3, r3
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <modbusRead1Register+0xf0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	7f5b      	ldrb	r3, [r3, #29]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <modbusRead1Register+0xf0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	7e9b      	ldrb	r3, [r3, #26]
 8001318:	b29b      	uxth	r3, r3
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <modbusRead1Register+0xf0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	7edb      	ldrb	r3, [r3, #27]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4413      	add	r3, r2
 8001328:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <modbusRead1Register+0x42>
 8001330:	88fb      	ldrh	r3, [r7, #6]
 8001332:	2b7d      	cmp	r3, #125	; 0x7d
 8001334:	d903      	bls.n	800133e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001336:	2003      	movs	r0, #3
 8001338:	f000 f856 	bl	80013e8 <ModbusErrorReply>
		 return;
 800133c:	e04e      	b.n	80013dc <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800133e:	88ba      	ldrh	r2, [r7, #4]
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <modbusRead1Register+0xf0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	429a      	cmp	r2, r3
 8001348:	d808      	bhi.n	800135c <modbusRead1Register+0x68>
 800134a:	88ba      	ldrh	r2, [r7, #4]
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	4413      	add	r3, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <modbusRead1Register+0xf0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	429a      	cmp	r2, r3
 800135a:	d903      	bls.n	8001364 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800135c:	2002      	movs	r0, #2
 800135e:	f000 f843 	bl	80013e8 <ModbusErrorReply>
		 return;
 8001362:	e03b      	b.n	80013dc <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <modbusRead1Register+0xf0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2203      	movs	r2, #3
 800136a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <modbusRead1Register+0xf0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	0052      	lsls	r2, r2, #1
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800137e:	2400      	movs	r4, #0
 8001380:	e020      	b.n	80013c4 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <modbusRead1Register+0xf0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	4423      	add	r3, r4
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	18d1      	adds	r1, r2, r3
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <modbusRead1Register+0xf0>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	1c63      	adds	r3, r4, #1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	7849      	ldrb	r1, [r1, #1]
 800139a:	4413      	add	r3, r2
 800139c:	460a      	mov	r2, r1
 800139e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <modbusRead1Register+0xf0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	4423      	add	r3, r4
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	18d1      	adds	r1, r2, r3
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <modbusRead1Register+0xf0>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	0063      	lsls	r3, r4, #1
 80013b6:	3303      	adds	r3, #3
 80013b8:	7809      	ldrb	r1, [r1, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	460a      	mov	r2, r1
 80013be:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80013c2:	3401      	adds	r4, #1
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	429c      	cmp	r4, r3
 80013c8:	dbdb      	blt.n	8001382 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <modbusRead1Register+0xf0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0052      	lsls	r2, r2, #1
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000318 	.word	0x20000318

080013e8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <ModbusErrorReply+0x40>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	7e5a      	ldrb	r2, [r3, #25]
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <ModbusErrorReply+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <ModbusErrorReply+0x40>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <ModbusErrorReply+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2202      	movs	r2, #2
 8001416:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000318 	.word	0x20000318

0800142c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <Modbus_frame_response+0x2c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	7e5b      	ldrb	r3, [r3, #25]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d004      	beq.n	8001444 <Modbus_frame_response+0x18>
 800143a:	2b06      	cmp	r3, #6
 800143c:	d105      	bne.n	800144a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800143e:	f7ff ff17 	bl	8001270 <modbusWrite1Register>
		break;
 8001442:	e006      	b.n	8001452 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001444:	f7ff ff56 	bl	80012f4 <modbusRead1Register>
		break;
 8001448:	e003      	b.n	8001452 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800144a:	2001      	movs	r0, #1
 800144c:	f7ff ffcc 	bl	80013e8 <ModbusErrorReply>
		break;
 8001450:	bf00      	nop

	}
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000318 	.word	0x20000318

0800145c <Modbus_Emission>:

void Modbus_Emission()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <Modbus_Emission+0xfc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b20      	cmp	r3, #32
 8001470:	d15e      	bne.n	8001530 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <Modbus_Emission+0xfc>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <Modbus_Emission+0xfc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001480:	4b35      	ldr	r3, [pc, #212]	; (8001558 <Modbus_Emission+0xfc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001488:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <Modbus_Emission+0xfc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001492:	4b31      	ldr	r3, [pc, #196]	; (8001558 <Modbus_Emission+0xfc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800149a:	461a      	mov	r2, r3
 800149c:	f00b f868 	bl	800c570 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <Modbus_Emission+0xfc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <Modbus_Emission+0xfc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3203      	adds	r2, #3
 80014b0:	b292      	uxth	r2, r2
 80014b2:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014b6:	4b28      	ldr	r3, [pc, #160]	; (8001558 <Modbus_Emission+0xfc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <Modbus_Emission+0xfc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014c6:	3b02      	subs	r3, #2
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f7ff fd92 	bl	8000ff4 <CRC16>
 80014d0:	4603      	mov	r3, r0
 80014d2:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <Modbus_Emission+0xfc>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <Modbus_Emission+0xfc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014e0:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80014e2:	7939      	ldrb	r1, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	460a      	mov	r2, r1
 80014e8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <Modbus_Emission+0xfc>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <Modbus_Emission+0xfc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014f8:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014fa:	7979      	ldrb	r1, [r7, #5]
 80014fc:	4413      	add	r3, r2
 80014fe:	460a      	mov	r2, r1
 8001500:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <Modbus_Emission+0xfc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b20      	cmp	r3, #32
 8001512:	d10d      	bne.n	8001530 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <Modbus_Emission+0xfc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <Modbus_Emission+0xfc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <Modbus_Emission+0xfc>)
 8001524:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001526:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800152a:	461a      	mov	r2, r3
 800152c:	f009 fe8e 	bl	800b24c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <Modbus_Emission+0xfc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <Modbus_Emission+0xfc>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <Modbus_Emission+0xfc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <Modbus_Emission+0xfc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2202      	movs	r2, #2
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000318 	.word	0x20000318
 800155c:	00000000 	.word	0x00000000

08001560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001566:	f003 fb67 	bl	8004c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156a:	f000 f99f 	bl	80018ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800156e:	f000 fcbb 	bl	8001ee8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001572:	f000 fc83 	bl	8001e7c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001576:	f000 fc55 	bl	8001e24 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800157a:	f000 fa8d 	bl	8001a98 <MX_TIM1_Init>
  MX_TIM5_Init();
 800157e:	f000 fba9 	bl	8001cd4 <MX_TIM5_Init>
  MX_TIM2_Init();
 8001582:	f000 fb0d 	bl	8001ba0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001586:	f000 f9f9 	bl	800197c <MX_ADC1_Init>
  MX_TIM3_Init();
 800158a:	f000 fb55 	bl	8001c38 <MX_TIM3_Init>
  MX_TIM11_Init();
 800158e:	f000 fbf5 	bl	8001d7c <MX_TIM11_Init>
  MX_I2C2_Init();
 8001592:	f000 fa53 	bl	8001a3c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001596:	2104      	movs	r1, #4
 8001598:	48a1      	ldr	r0, [pc, #644]	; (8001820 <main+0x2c0>)
 800159a:	f008 fbe3 	bl	8009d64 <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start(&htim1);
 800159e:	48a1      	ldr	r0, [pc, #644]	; (8001824 <main+0x2c4>)
 80015a0:	f008 f830 	bl	8009604 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015a4:	2100      	movs	r1, #0
 80015a6:	489f      	ldr	r0, [pc, #636]	; (8001824 <main+0x2c4>)
 80015a8:	f008 f9aa 	bl	8009900 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 80015ac:	489e      	ldr	r0, [pc, #632]	; (8001828 <main+0x2c8>)
 80015ae:	f008 f883 	bl	80096b8 <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, (uint16_t*) buffer, 20);
 80015b2:	2214      	movs	r2, #20
 80015b4:	499d      	ldr	r1, [pc, #628]	; (800182c <main+0x2cc>)
 80015b6:	489e      	ldr	r0, [pc, #632]	; (8001830 <main+0x2d0>)
 80015b8:	f003 fbf4 	bl	8004da4 <HAL_ADC_Start_DMA>

	hmodbus.huart = &huart2;
 80015bc:	4b9d      	ldr	r3, [pc, #628]	; (8001834 <main+0x2d4>)
 80015be:	4a9e      	ldr	r2, [pc, #632]	; (8001838 <main+0x2d8>)
 80015c0:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim11;
 80015c2:	4b9c      	ldr	r3, [pc, #624]	; (8001834 <main+0x2d4>)
 80015c4:	4a9d      	ldr	r2, [pc, #628]	; (800183c <main+0x2dc>)
 80015c6:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80015c8:	4b9a      	ldr	r3, [pc, #616]	; (8001834 <main+0x2d4>)
 80015ca:	2215      	movs	r2, #21
 80015cc:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 70; // 70
 80015ce:	4b99      	ldr	r3, [pc, #612]	; (8001834 <main+0x2d4>)
 80015d0:	2246      	movs	r2, #70	; 0x46
 80015d2:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80015d4:	499a      	ldr	r1, [pc, #616]	; (8001840 <main+0x2e0>)
 80015d6:	4897      	ldr	r0, [pc, #604]	; (8001834 <main+0x2d4>)
 80015d8:	f7ff fcb6 	bl	8000f48 <Modbus_init>

	endEffectorControl(endEffector.reset, 1);
 80015dc:	4b99      	ldr	r3, [pc, #612]	; (8001844 <main+0x2e4>)
 80015de:	791b      	ldrb	r3, [r3, #4]
 80015e0:	2101      	movs	r1, #1
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 fe62 	bl	80042ac <endEffectorControl>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Modbus_Protocal_Worker();
 80015e8:	f7ff fd3a 	bl	8001060 <Modbus_Protocal_Worker>
		static uint32_t timestamp = 0;

		if (HAL_GetTick() >= timestamp) {
 80015ec:	f003 fb8a 	bl	8004d04 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b95      	ldr	r3, [pc, #596]	; (8001848 <main+0x2e8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d3f6      	bcc.n	80015e8 <main+0x88>
			timestamp = HAL_GetTick() + 100;
 80015fa:	f003 fb83 	bl	8004d04 <HAL_GetTick>
 80015fe:	4603      	mov	r3, r0
 8001600:	3364      	adds	r3, #100	; 0x64
 8001602:	4a91      	ldr	r2, [pc, #580]	; (8001848 <main+0x2e8>)
 8001604:	6013      	str	r3, [r2, #0]

			int16_t sentPos = (int16_t) (mmActPos * 10);
 8001606:	4b91      	ldr	r3, [pc, #580]	; (800184c <main+0x2ec>)
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001618:	ee17 3a90 	vmov	r3, s15
 800161c:	80fb      	strh	r3, [r7, #6]
			int16_t sentVel = (int16_t) (mmActVel * 10);
 800161e:	4b8c      	ldr	r3, [pc, #560]	; (8001850 <main+0x2f0>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001630:	ee17 3a90 	vmov	r3, s15
 8001634:	80bb      	strh	r3, [r7, #4]
			int16_t sentAcc = (int16_t) (mmActAcc * 10);
 8001636:	4b87      	ldr	r3, [pc, #540]	; (8001854 <main+0x2f4>)
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001648:	ee17 3a90 	vmov	r3, s15
 800164c:	807b      	strh	r3, [r7, #2]
			registerFrame[0].U16 = 22881; // WRITE : Heartbeat Protocol
 800164e:	4b7c      	ldr	r3, [pc, #496]	; (8001840 <main+0x2e0>)
 8001650:	f645 1261 	movw	r2, #22881	; 0x5961
 8001654:	801a      	strh	r2, [r3, #0]
			registerFrame[17].U16 = sentPos; // WRITE : y-axis Actual Position
 8001656:	88fa      	ldrh	r2, [r7, #6]
 8001658:	4b79      	ldr	r3, [pc, #484]	; (8001840 <main+0x2e0>)
 800165a:	845a      	strh	r2, [r3, #34]	; 0x22
			registerFrame[18].U16 = sentVel; // WRITE : y-axis Actual Speed
 800165c:	88ba      	ldrh	r2, [r7, #4]
 800165e:	4b78      	ldr	r3, [pc, #480]	; (8001840 <main+0x2e0>)
 8001660:	849a      	strh	r2, [r3, #36]	; 0x24
			registerFrame[19].U16 = sentAcc; // WRITE : y-axis Actual Acceleration
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	4b76      	ldr	r3, [pc, #472]	; (8001840 <main+0x2e0>)
 8001666:	84da      	strh	r2, [r3, #38]	; 0x26

			mmActPos = QEIReadModified * (2 * 3.14159 * 11.205 / 8192); // NO THIS FUNCTION WHEN TEST WITH ONLY Y-AXIS
 8001668:	4b7b      	ldr	r3, [pc, #492]	; (8001858 <main+0x2f8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff05 	bl	800047c <__aeabi_i2d>
 8001672:	a367      	add	r3, pc, #412	; (adr r3, 8001810 <main+0x2b0>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ff6a 	bl	8000550 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fa3c 	bl	8000b00 <__aeabi_d2f>
 8001688:	4603      	mov	r3, r0
 800168a:	4a70      	ldr	r2, [pc, #448]	; (800184c <main+0x2ec>)
 800168c:	6013      	str	r3, [r2, #0]

			myActPos = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 800168e:	4b72      	ldr	r3, [pc, #456]	; (8001858 <main+0x2f8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fef2 	bl	800047c <__aeabi_i2d>
 8001698:	a35d      	add	r3, pc, #372	; (adr r3, 8001810 <main+0x2b0>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7fe ff57 	bl	8000550 <__aeabi_dmul>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f7ff fa29 	bl	8000b00 <__aeabi_d2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4a6a      	ldr	r2, [pc, #424]	; (800185c <main+0x2fc>)
 80016b2:	6013      	str	r3, [r2, #0]
			myActVel = (mmActPos - myPrePos) / 0.1;
 80016b4:	4b65      	ldr	r3, [pc, #404]	; (800184c <main+0x2ec>)
 80016b6:	ed93 7a00 	vldr	s14, [r3]
 80016ba:	4b69      	ldr	r3, [pc, #420]	; (8001860 <main+0x300>)
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c4:	ee17 0a90 	vmov	r0, s15
 80016c8:	f7fe feea 	bl	80004a0 <__aeabi_f2d>
 80016cc:	a352      	add	r3, pc, #328	; (adr r3, 8001818 <main+0x2b8>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7ff f867 	bl	80007a4 <__aeabi_ddiv>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff fa0f 	bl	8000b00 <__aeabi_d2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4a5f      	ldr	r2, [pc, #380]	; (8001864 <main+0x304>)
 80016e6:	6013      	str	r3, [r2, #0]
			myActAcc = (mmActVel - myPreVel) / 0.1;
 80016e8:	4b59      	ldr	r3, [pc, #356]	; (8001850 <main+0x2f0>)
 80016ea:	ed93 7a00 	vldr	s14, [r3]
 80016ee:	4b5e      	ldr	r3, [pc, #376]	; (8001868 <main+0x308>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f8:	ee17 0a90 	vmov	r0, s15
 80016fc:	f7fe fed0 	bl	80004a0 <__aeabi_f2d>
 8001700:	a345      	add	r3, pc, #276	; (adr r3, 8001818 <main+0x2b8>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7ff f84d 	bl	80007a4 <__aeabi_ddiv>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff f9f5 	bl	8000b00 <__aeabi_d2f>
 8001716:	4603      	mov	r3, r0
 8001718:	4a54      	ldr	r2, [pc, #336]	; (800186c <main+0x30c>)
 800171a:	6013      	str	r3, [r2, #0]

			//
			myPrePos = myActPos;
 800171c:	4b4f      	ldr	r3, [pc, #316]	; (800185c <main+0x2fc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a4f      	ldr	r2, [pc, #316]	; (8001860 <main+0x300>)
 8001722:	6013      	str	r3, [r2, #0]
			myPreVel = myActVel;
 8001724:	4b4f      	ldr	r3, [pc, #316]	; (8001864 <main+0x304>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a4f      	ldr	r2, [pc, #316]	; (8001868 <main+0x308>)
 800172a:	6013      	str	r3, [r2, #0]

			//
			handleEmergency();
 800172c:	f002 fd2a 	bl	8004184 <handleEmergency>
//				runTrayModeCase = 6;
//			} else if (runTrayModeCase == 1) {
//				runTrayModeCase = 3;
//			}

			if (x[0] && x2) {
 8001730:	4b4f      	ldr	r3, [pc, #316]	; (8001870 <main+0x310>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <main+0x1e6>
 8001738:	4b4e      	ldr	r3, [pc, #312]	; (8001874 <main+0x314>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <main+0x1e6>
				endEffectorPick();
 8001740:	f000 fe62 	bl	8002408 <endEffectorPick>
 8001744:	e009      	b.n	800175a <main+0x1fa>

			} else if (x[1] && x2) {
 8001746:	4b4a      	ldr	r3, [pc, #296]	; (8001870 <main+0x310>)
 8001748:	785b      	ldrb	r3, [r3, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <main+0x1fa>
 800174e:	4b49      	ldr	r3, [pc, #292]	; (8001874 <main+0x314>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <main+0x1fa>
				endEffectorPlace();
 8001756:	f000 fe95 	bl	8002484 <endEffectorPlace>
			}

			endEffectorDataScan[1] = registerFrame[2].U16;
 800175a:	4b39      	ldr	r3, [pc, #228]	; (8001840 <main+0x2e0>)
 800175c:	889b      	ldrh	r3, [r3, #4]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b45      	ldr	r3, [pc, #276]	; (8001878 <main+0x318>)
 8001762:	705a      	strb	r2, [r3, #1]
			if ((endEffectorDataScan[1] != endEffectorDataScan[0]
 8001764:	4b44      	ldr	r3, [pc, #272]	; (8001878 <main+0x318>)
 8001766:	785a      	ldrb	r2, [r3, #1]
 8001768:	4b43      	ldr	r3, [pc, #268]	; (8001878 <main+0x318>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d103      	bne.n	8001778 <main+0x218>
					|| endStateCheck == 1) && x2 == 0) {
 8001770:	4b42      	ldr	r3, [pc, #264]	; (800187c <main+0x31c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d10c      	bne.n	8001792 <main+0x232>
 8001778:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <main+0x314>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d108      	bne.n	8001792 <main+0x232>
				endEffectorStatusControl(registerFrame[2].U16);
 8001780:	4b2f      	ldr	r3, [pc, #188]	; (8001840 <main+0x2e0>)
 8001782:	889b      	ldrh	r3, [r3, #4]
 8001784:	4618      	mov	r0, r3
 8001786:	f002 fe61 	bl	800444c <endEffectorStatusControl>
				endEffectorDataScan[0] = endEffectorDataScan[1];
 800178a:	4b3b      	ldr	r3, [pc, #236]	; (8001878 <main+0x318>)
 800178c:	785a      	ldrb	r2, [r3, #1]
 800178e:	4b3a      	ldr	r3, [pc, #232]	; (8001878 <main+0x318>)
 8001790:	701a      	strb	r2, [r3, #0]

			}

			joyDisplayLED();
 8001792:	f002 fb7d 	bl	8003e90 <joyDisplayLED>

			if (joyStart) {
 8001796:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <main+0x320>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <main+0x24e>

				buttonInput(); // DETECT : Button Input
 800179e:	f002 f947 	bl	8003a30 <buttonInput>
				buttonLogic(joyLogic);
 80017a2:	4b38      	ldr	r3, [pc, #224]	; (8001884 <main+0x324>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 f9ab 	bl	8003b04 <buttonLogic>
			}
			//
			if (endTimeStatus) {
 80017ae:	4b36      	ldr	r3, [pc, #216]	; (8001888 <main+0x328>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <main+0x262>
				endTime += 1;
 80017b6:	4b35      	ldr	r3, [pc, #212]	; (800188c <main+0x32c>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	b29a      	uxth	r2, r3
 80017be:	4b33      	ldr	r3, [pc, #204]	; (800188c <main+0x32c>)
 80017c0:	801a      	strh	r2, [r3, #0]
			}
			if (endTimeStatus2) {
 80017c2:	4b33      	ldr	r3, [pc, #204]	; (8001890 <main+0x330>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <main+0x276>
				endTime2 += 1;
 80017ca:	4b32      	ldr	r3, [pc, #200]	; (8001894 <main+0x334>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b30      	ldr	r3, [pc, #192]	; (8001894 <main+0x334>)
 80017d4:	801a      	strh	r2, [r3, #0]
			}
			if (endTimeStatus3) {
 80017d6:	4b30      	ldr	r3, [pc, #192]	; (8001898 <main+0x338>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <main+0x28a>
				endTime3 += 1;
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <main+0x33c>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	4b2d      	ldr	r3, [pc, #180]	; (800189c <main+0x33c>)
 80017e8:	801a      	strh	r2, [r3, #0]
			}

			if(flag){
 80017ea:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <main+0x340>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f43f aefa 	beq.w	80015e8 <main+0x88>
				flag=0;
 80017f4:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <main+0x340>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
				endEffectorControl(mode, status);
 80017fa:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <main+0x344>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	4a2a      	ldr	r2, [pc, #168]	; (80018a8 <main+0x348>)
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f002 fd51 	bl	80042ac <endEffectorControl>
	while (1) {
 800180a:	e6ed      	b.n	80015e8 <main+0x88>
 800180c:	f3af 8000 	nop.w
 8001810:	464f6faa 	.word	0x464f6faa
 8001814:	3f8199cb 	.word	0x3f8199cb
 8001818:	9999999a 	.word	0x9999999a
 800181c:	3fb99999 	.word	0x3fb99999
 8001820:	20000634 	.word	0x20000634
 8001824:	20000418 	.word	0x20000418
 8001828:	200004cc 	.word	0x200004cc
 800182c:	20000ddc 	.word	0x20000ddc
 8001830:	2000031c 	.word	0x2000031c
 8001834:	20000870 	.word	0x20000870
 8001838:	2000079c 	.word	0x2000079c
 800183c:	200006e8 	.word	0x200006e8
 8001840:	20000d48 	.word	0x20000d48
 8001844:	20000268 	.word	0x20000268
 8001848:	20000f60 	.word	0x20000f60
 800184c:	20000e1c 	.word	0x20000e1c
 8001850:	20000e24 	.word	0x20000e24
 8001854:	20000e28 	.word	0x20000e28
 8001858:	20000e14 	.word	0x20000e14
 800185c:	20000f38 	.word	0x20000f38
 8001860:	20000f3c 	.word	0x20000f3c
 8001864:	20000f40 	.word	0x20000f40
 8001868:	20000f44 	.word	0x20000f44
 800186c:	20000f48 	.word	0x20000f48
 8001870:	20000f28 	.word	0x20000f28
 8001874:	20000f2c 	.word	0x20000f2c
 8001878:	20000f18 	.word	0x20000f18
 800187c:	20000f4e 	.word	0x20000f4e
 8001880:	20000f23 	.word	0x20000f23
 8001884:	20000e08 	.word	0x20000e08
 8001888:	20000f52 	.word	0x20000f52
 800188c:	20000f50 	.word	0x20000f50
 8001890:	20000f56 	.word	0x20000f56
 8001894:	20000f54 	.word	0x20000f54
 8001898:	20000f5a 	.word	0x20000f5a
 800189c:	20000f58 	.word	0x20000f58
 80018a0:	20000f5b 	.word	0x20000f5b
 80018a4:	20000f5c 	.word	0x20000f5c
 80018a8:	20000f5d 	.word	0x20000f5d

080018ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b094      	sub	sp, #80	; 0x50
 80018b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b2:	f107 0320 	add.w	r3, r7, #32
 80018b6:	2230      	movs	r2, #48	; 0x30
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f00a fe66 	bl	800c58c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	4b27      	ldr	r3, [pc, #156]	; (8001974 <SystemClock_Config+0xc8>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	4a26      	ldr	r2, [pc, #152]	; (8001974 <SystemClock_Config+0xc8>)
 80018da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018de:	6413      	str	r3, [r2, #64]	; 0x40
 80018e0:	4b24      	ldr	r3, [pc, #144]	; (8001974 <SystemClock_Config+0xc8>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ec:	2300      	movs	r3, #0
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	4b21      	ldr	r3, [pc, #132]	; (8001978 <SystemClock_Config+0xcc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a20      	ldr	r2, [pc, #128]	; (8001978 <SystemClock_Config+0xcc>)
 80018f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <SystemClock_Config+0xcc>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001908:	2302      	movs	r3, #2
 800190a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800190c:	2301      	movs	r3, #1
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001910:	2310      	movs	r3, #16
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001914:	2302      	movs	r3, #2
 8001916:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001918:	2300      	movs	r3, #0
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800191c:	2308      	movs	r3, #8
 800191e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001920:	2364      	movs	r3, #100	; 0x64
 8001922:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001924:	2302      	movs	r3, #2
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001928:	2304      	movs	r3, #4
 800192a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800192c:	f107 0320 	add.w	r3, r7, #32
 8001930:	4618      	mov	r0, r3
 8001932:	f007 f973 	bl	8008c1c <HAL_RCC_OscConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800193c:	f002 fe26 	bl	800458c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001940:	230f      	movs	r3, #15
 8001942:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001944:	2302      	movs	r3, #2
 8001946:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800194c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001950:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001956:	f107 030c 	add.w	r3, r7, #12
 800195a:	2103      	movs	r1, #3
 800195c:	4618      	mov	r0, r3
 800195e:	f007 fbd5 	bl	800910c <HAL_RCC_ClockConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001968:	f002 fe10 	bl	800458c <Error_Handler>
  }
}
 800196c:	bf00      	nop
 800196e:	3750      	adds	r7, #80	; 0x50
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	40007000 	.word	0x40007000

0800197c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001982:	463b      	mov	r3, r7
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <MX_ADC1_Init+0xb4>)
 8001990:	4a28      	ldr	r2, [pc, #160]	; (8001a34 <MX_ADC1_Init+0xb8>)
 8001992:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001994:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <MX_ADC1_Init+0xb4>)
 8001996:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800199a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800199c:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <MX_ADC1_Init+0xb4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <MX_ADC1_Init+0xb4>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019a8:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <MX_ADC1_Init+0xb4>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <MX_ADC1_Init+0xb4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <MX_ADC1_Init+0xb4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019bc:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <MX_ADC1_Init+0xb4>)
 80019be:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <MX_ADC1_Init+0xbc>)
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019c2:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <MX_ADC1_Init+0xb4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <MX_ADC1_Init+0xb4>)
 80019ca:	2202      	movs	r2, #2
 80019cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <MX_ADC1_Init+0xb4>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <MX_ADC1_Init+0xb4>)
 80019d8:	2201      	movs	r2, #1
 80019da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019dc:	4814      	ldr	r0, [pc, #80]	; (8001a30 <MX_ADC1_Init+0xb4>)
 80019de:	f003 f99d 	bl	8004d1c <HAL_ADC_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019e8:	f002 fdd0 	bl	800458c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80019ec:	230d      	movs	r3, #13
 80019ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019f0:	2301      	movs	r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80019f4:	2303      	movs	r3, #3
 80019f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019f8:	463b      	mov	r3, r7
 80019fa:	4619      	mov	r1, r3
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <MX_ADC1_Init+0xb4>)
 80019fe:	f003 fadf 	bl	8004fc0 <HAL_ADC_ConfigChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a08:	f002 fdc0 	bl	800458c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a0c:	230a      	movs	r3, #10
 8001a0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a10:	2302      	movs	r3, #2
 8001a12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a14:	463b      	mov	r3, r7
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_ADC1_Init+0xb4>)
 8001a1a:	f003 fad1 	bl	8004fc0 <HAL_ADC_ConfigChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001a24:	f002 fdb2 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	2000031c 	.word	0x2000031c
 8001a34:	40012000 	.word	0x40012000
 8001a38:	0f000001 	.word	0x0f000001

08001a3c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <MX_I2C2_Init+0x50>)
 8001a42:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <MX_I2C2_Init+0x54>)
 8001a44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_I2C2_Init+0x50>)
 8001a48:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <MX_I2C2_Init+0x58>)
 8001a4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_I2C2_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_I2C2_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_I2C2_Init+0x50>)
 8001a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a5e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <MX_I2C2_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_I2C2_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <MX_I2C2_Init+0x50>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_I2C2_Init+0x50>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a78:	4804      	ldr	r0, [pc, #16]	; (8001a8c <MX_I2C2_Init+0x50>)
 8001a7a:	f004 fc4f 	bl	800631c <HAL_I2C_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a84:	f002 fd82 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200003c4 	.word	0x200003c4
 8001a90:	40005800 	.word	0x40005800
 8001a94:	000186a0 	.word	0x000186a0

08001a98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b092      	sub	sp, #72	; 0x48
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
 8001ab8:	615a      	str	r2, [r3, #20]
 8001aba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	2220      	movs	r2, #32
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f00a fd62 	bl	800c58c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ac8:	4b33      	ldr	r3, [pc, #204]	; (8001b98 <MX_TIM1_Init+0x100>)
 8001aca:	4a34      	ldr	r2, [pc, #208]	; (8001b9c <MX_TIM1_Init+0x104>)
 8001acc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8001ace:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <MX_TIM1_Init+0x100>)
 8001ad0:	2263      	movs	r2, #99	; 0x63
 8001ad2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad4:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <MX_TIM1_Init+0x100>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001ada:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <MX_TIM1_Init+0x100>)
 8001adc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ae0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae2:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <MX_TIM1_Init+0x100>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <MX_TIM1_Init+0x100>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aee:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <MX_TIM1_Init+0x100>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001af4:	4828      	ldr	r0, [pc, #160]	; (8001b98 <MX_TIM1_Init+0x100>)
 8001af6:	f007 fea7 	bl	8009848 <HAL_TIM_PWM_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001b00:	f002 fd44 	bl	800458c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b04:	2300      	movs	r3, #0
 8001b06:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b10:	4619      	mov	r1, r3
 8001b12:	4821      	ldr	r0, [pc, #132]	; (8001b98 <MX_TIM1_Init+0x100>)
 8001b14:	f009 f98a 	bl	800ae2c <HAL_TIMEx_MasterConfigSynchronization>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001b1e:	f002 fd35 	bl	800458c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b22:	2360      	movs	r3, #96	; 0x60
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b42:	2200      	movs	r2, #0
 8001b44:	4619      	mov	r1, r3
 8001b46:	4814      	ldr	r0, [pc, #80]	; (8001b98 <MX_TIM1_Init+0x100>)
 8001b48:	f008 fb1e 	bl	800a188 <HAL_TIM_PWM_ConfigChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001b52:	f002 fd1b 	bl	800458c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	4619      	mov	r1, r3
 8001b78:	4807      	ldr	r0, [pc, #28]	; (8001b98 <MX_TIM1_Init+0x100>)
 8001b7a:	f009 f9c5 	bl	800af08 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001b84:	f002 fd02 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b88:	4803      	ldr	r0, [pc, #12]	; (8001b98 <MX_TIM1_Init+0x100>)
 8001b8a:	f002 fedf 	bl	800494c <HAL_TIM_MspPostInit>

}
 8001b8e:	bf00      	nop
 8001b90:	3748      	adds	r7, #72	; 0x48
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000418 	.word	0x20000418
 8001b9c:	40010000 	.word	0x40010000

08001ba0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001bc6:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001bd4:	2209      	movs	r2, #9
 8001bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001be4:	4813      	ldr	r0, [pc, #76]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001be6:	f007 fcb1 	bl	800954c <HAL_TIM_Base_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bf0:	f002 fccc 	bl	800458c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bfa:	f107 0308 	add.w	r3, r7, #8
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001c02:	f008 fb83 	bl	800a30c <HAL_TIM_ConfigClockSource>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c0c:	f002 fcbe 	bl	800458c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c18:	463b      	mov	r3, r7
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_TIM2_Init+0x94>)
 8001c1e:	f009 f905 	bl	800ae2c <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c28:	f002 fcb0 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200004cc 	.word	0x200004cc

08001c38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <MX_TIM3_Init+0x94>)
 8001c56:	4a1e      	ldr	r2, [pc, #120]	; (8001cd0 <MX_TIM3_Init+0x98>)
 8001c58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <MX_TIM3_Init+0x94>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c60:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <MX_TIM3_Init+0x94>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <MX_TIM3_Init+0x94>)
 8001c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <MX_TIM3_Init+0x94>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c74:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <MX_TIM3_Init+0x94>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c7a:	4814      	ldr	r0, [pc, #80]	; (8001ccc <MX_TIM3_Init+0x94>)
 8001c7c:	f007 fc66 	bl	800954c <HAL_TIM_Base_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001c86:	f002 fc81 	bl	800458c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c90:	f107 0308 	add.w	r3, r7, #8
 8001c94:	4619      	mov	r1, r3
 8001c96:	480d      	ldr	r0, [pc, #52]	; (8001ccc <MX_TIM3_Init+0x94>)
 8001c98:	f008 fb38 	bl	800a30c <HAL_TIM_ConfigClockSource>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001ca2:	f002 fc73 	bl	800458c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cae:	463b      	mov	r3, r7
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4806      	ldr	r0, [pc, #24]	; (8001ccc <MX_TIM3_Init+0x94>)
 8001cb4:	f009 f8ba 	bl	800ae2c <HAL_TIMEx_MasterConfigSynchronization>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001cbe:	f002 fc65 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000580 	.word	0x20000580
 8001cd0:	40000400 	.word	0x40000400

08001cd4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08c      	sub	sp, #48	; 0x30
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	2224      	movs	r2, #36	; 0x24
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f00a fc52 	bl	800c58c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001cf0:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <MX_TIM5_Init+0xa0>)
 8001cf2:	4a21      	ldr	r2, [pc, #132]	; (8001d78 <MX_TIM5_Init+0xa4>)
 8001cf4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <MX_TIM5_Init+0xa0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <MX_TIM5_Init+0xa0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001d02:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <MX_TIM5_Init+0xa0>)
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295
 8001d08:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <MX_TIM5_Init+0xa0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <MX_TIM5_Init+0xa0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d16:	2303      	movs	r3, #3
 8001d18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480c      	ldr	r0, [pc, #48]	; (8001d74 <MX_TIM5_Init+0xa0>)
 8001d42:	f007 ff5b 	bl	8009bfc <HAL_TIM_Encoder_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001d4c:	f002 fc1e 	bl	800458c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_TIM5_Init+0xa0>)
 8001d5e:	f009 f865 	bl	800ae2c <HAL_TIMEx_MasterConfigSynchronization>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001d68:	f002 fc10 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	3730      	adds	r7, #48	; 0x30
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000634 	.word	0x20000634
 8001d78:	40000c00 	.word	0x40000c00

08001d7c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
 8001d90:	615a      	str	r2, [r3, #20]
 8001d92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001d94:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <MX_TIM11_Init+0xa0>)
 8001d96:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <MX_TIM11_Init+0xa4>)
 8001d98:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8001d9a:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <MX_TIM11_Init+0xa0>)
 8001d9c:	2263      	movs	r2, #99	; 0x63
 8001d9e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da0:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <MX_TIM11_Init+0xa0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8001da6:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <MX_TIM11_Init+0xa0>)
 8001da8:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8001dac:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <MX_TIM11_Init+0xa0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <MX_TIM11_Init+0xa0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001dba:	4818      	ldr	r0, [pc, #96]	; (8001e1c <MX_TIM11_Init+0xa0>)
 8001dbc:	f007 fbc6 	bl	800954c <HAL_TIM_Base_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001dc6:	f002 fbe1 	bl	800458c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8001dca:	4814      	ldr	r0, [pc, #80]	; (8001e1c <MX_TIM11_Init+0xa0>)
 8001dcc:	f007 fcd6 	bl	800977c <HAL_TIM_OC_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001dd6:	f002 fbd9 	bl	800458c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8001dda:	2108      	movs	r1, #8
 8001ddc:	480f      	ldr	r0, [pc, #60]	; (8001e1c <MX_TIM11_Init+0xa0>)
 8001dde:	f007 fe3f 	bl	8009a60 <HAL_TIM_OnePulse_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8001de8:	f002 fbd0 	bl	800458c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001dec:	2310      	movs	r3, #16
 8001dee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8001df0:	f240 5399 	movw	r3, #1433	; 0x599
 8001df4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2200      	movs	r2, #0
 8001e02:	4619      	mov	r1, r3
 8001e04:	4805      	ldr	r0, [pc, #20]	; (8001e1c <MX_TIM11_Init+0xa0>)
 8001e06:	f008 f963 	bl	800a0d0 <HAL_TIM_OC_ConfigChannel>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8001e10:	f002 fbbc 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	3720      	adds	r7, #32
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200006e8 	.word	0x200006e8
 8001e20:	40014800 	.word	0x40014800

08001e24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <MX_USART2_UART_Init+0x50>)
 8001e2a:	4a13      	ldr	r2, [pc, #76]	; (8001e78 <MX_USART2_UART_Init+0x54>)
 8001e2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_USART2_UART_Init+0x50>)
 8001e30:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001e34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <MX_USART2_UART_Init+0x50>)
 8001e38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e3c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <MX_USART2_UART_Init+0x50>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <MX_USART2_UART_Init+0x50>)
 8001e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <MX_USART2_UART_Init+0x50>)
 8001e4e:	220c      	movs	r2, #12
 8001e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <MX_USART2_UART_Init+0x50>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <MX_USART2_UART_Init+0x50>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_USART2_UART_Init+0x50>)
 8001e60:	f009 f8c2 	bl	800afe8 <HAL_UART_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001e6a:	f002 fb8f 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000079c 	.word	0x2000079c
 8001e78:	40004400 	.word	0x40004400

08001e7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <MX_DMA_Init+0x68>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <MX_DMA_Init+0x68>)
 8001e8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <MX_DMA_Init+0x68>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <MX_DMA_Init+0x68>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <MX_DMA_Init+0x68>)
 8001ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <MX_DMA_Init+0x68>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2011      	movs	r0, #17
 8001ec0:	f003 fc09 	bl	80056d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001ec4:	2011      	movs	r0, #17
 8001ec6:	f003 fc22 	bl	800570e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2038      	movs	r0, #56	; 0x38
 8001ed0:	f003 fc01 	bl	80056d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ed4:	2038      	movs	r0, #56	; 0x38
 8001ed6:	f003 fc1a 	bl	800570e <HAL_NVIC_EnableIRQ>

}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800

08001ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	4b62      	ldr	r3, [pc, #392]	; (800208c <MX_GPIO_Init+0x1a4>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a61      	ldr	r2, [pc, #388]	; (800208c <MX_GPIO_Init+0x1a4>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b5f      	ldr	r3, [pc, #380]	; (800208c <MX_GPIO_Init+0x1a4>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b5b      	ldr	r3, [pc, #364]	; (800208c <MX_GPIO_Init+0x1a4>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a5a      	ldr	r2, [pc, #360]	; (800208c <MX_GPIO_Init+0x1a4>)
 8001f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b58      	ldr	r3, [pc, #352]	; (800208c <MX_GPIO_Init+0x1a4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	4b54      	ldr	r3, [pc, #336]	; (800208c <MX_GPIO_Init+0x1a4>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a53      	ldr	r2, [pc, #332]	; (800208c <MX_GPIO_Init+0x1a4>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b51      	ldr	r3, [pc, #324]	; (800208c <MX_GPIO_Init+0x1a4>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	4b4d      	ldr	r3, [pc, #308]	; (800208c <MX_GPIO_Init+0x1a4>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a4c      	ldr	r2, [pc, #304]	; (800208c <MX_GPIO_Init+0x1a4>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b4a      	ldr	r3, [pc, #296]	; (800208c <MX_GPIO_Init+0x1a4>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8001f74:	4846      	ldr	r0, [pc, #280]	; (8002090 <MX_GPIO_Init+0x1a8>)
 8001f76:	f004 f99d 	bl	80062b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 51aa 	mov.w	r1, #5440	; 0x1540
 8001f80:	4844      	ldr	r0, [pc, #272]	; (8002094 <MX_GPIO_Init+0x1ac>)
 8001f82:	f004 f997 	bl	80062b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2140      	movs	r1, #64	; 0x40
 8001f8a:	4843      	ldr	r0, [pc, #268]	; (8002098 <MX_GPIO_Init+0x1b0>)
 8001f8c:	f004 f992 	bl	80062b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	483b      	ldr	r0, [pc, #236]	; (8002094 <MX_GPIO_Init+0x1ac>)
 8001fa8:	f003 ffe8 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fac:	2304      	movs	r3, #4
 8001fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4835      	ldr	r0, [pc, #212]	; (8002094 <MX_GPIO_Init+0x1ac>)
 8001fc0:	f003 ffdc 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	482e      	ldr	r0, [pc, #184]	; (8002090 <MX_GPIO_Init+0x1a8>)
 8001fd8:	f003 ffd0 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001fdc:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4826      	ldr	r0, [pc, #152]	; (8002090 <MX_GPIO_Init+0x1a8>)
 8001ff6:	f003 ffc1 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ffa:	2320      	movs	r3, #32
 8001ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002002:	2301      	movs	r3, #1
 8002004:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	4821      	ldr	r0, [pc, #132]	; (8002094 <MX_GPIO_Init+0x1ac>)
 800200e:	f003 ffb5 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB5 PB7
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_7
 8002012:	f244 23a1 	movw	r3, #17057	; 0x42a1
 8002016:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	4619      	mov	r1, r3
 8002026:	481c      	ldr	r0, [pc, #112]	; (8002098 <MX_GPIO_Init+0x1b0>)
 8002028:	f003 ffa8 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800202c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	2301      	movs	r3, #1
 8002034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4619      	mov	r1, r3
 8002044:	4813      	ldr	r0, [pc, #76]	; (8002094 <MX_GPIO_Init+0x1ac>)
 8002046:	f003 ff99 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800204a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800204e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002050:	2311      	movs	r3, #17
 8002052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	480c      	ldr	r0, [pc, #48]	; (8002094 <MX_GPIO_Init+0x1ac>)
 8002064:	f003 ff8a 	bl	8005f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002068:	2340      	movs	r3, #64	; 0x40
 800206a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800206c:	2311      	movs	r3, #17
 800206e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	4806      	ldr	r0, [pc, #24]	; (8002098 <MX_GPIO_Init+0x1b0>)
 8002080:	f003 ff7c 	bl	8005f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002084:	bf00      	nop
 8002086:	3728      	adds	r7, #40	; 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40023800 	.word	0x40023800
 8002090:	40020000 	.word	0x40020000
 8002094:	40020800 	.word	0x40020800
 8002098:	40020400 	.word	0x40020400

0800209c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 && x2 == 0) //
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a3b      	ldr	r2, [pc, #236]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d16e      	bne.n	800218a <HAL_TIM_PeriodElapsedCallback+0xee>
 80020ac:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d16a      	bne.n	800218a <HAL_TIM_PeriodElapsedCallback+0xee>
			{
		photoDetect();
 80020b4:	f000 fdd6 	bl	8002c64 <photoDetect>
		robotArmStateDataScan[1] = registerFrame[1].U16;
 80020b8:	4b38      	ldr	r3, [pc, #224]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x100>)
 80020ba:	885b      	ldrh	r3, [r3, #2]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80020c0:	705a      	strb	r2, [r3, #1]
		if (robotArmStateDataScan[1] != robotArmStateDataScan[0]) {
 80020c2:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80020c4:	785a      	ldrb	r2, [r3, #1]
 80020c6:	4b36      	ldr	r3, [pc, #216]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d008      	beq.n	80020e0 <HAL_TIM_PeriodElapsedCallback+0x44>
			robotArmState(registerFrame[1].U16); // READ : Base System Status
 80020ce:	4b33      	ldr	r3, [pc, #204]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x100>)
 80020d0:	885b      	ldrh	r3, [r3, #2]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f001 ff24 	bl	8003f20 <robotArmState>
			robotArmStateDataScan[0] = robotArmStateDataScan[1];
 80020d8:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80020da:	785a      	ldrb	r2, [r3, #1]
 80020dc:	4b30      	ldr	r3, [pc, #192]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80020de:	701a      	strb	r2, [r3, #0]
		}

		readEncoder();
 80020e0:	f000 fa46 	bl	8002570 <readEncoder>

		if (photoSig[0] || photoSig[2]) // SOFTWARE LIMIT : Motor/Encoder Photo Sensor
 80020e4:	4b2f      	ldr	r3, [pc, #188]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d103      	bne.n	80020f4 <HAL_TIM_PeriodElapsedCallback+0x58>
 80020ec:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80020ee:	789b      	ldrb	r3, [r3, #2]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_TIM_PeriodElapsedCallback+0x64>
				{
			duty = 0;
 80020f4:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
			setMotor();
 80020fc:	f000 fa12 	bl	8002524 <setMotor>
		}

		if (startSetHome) {
 8002100:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_TIM_PeriodElapsedCallback+0x70>
			// endEffectorControl(endEffector.gripperWork, 1);
			setHome();
 8002108:	f000 fa4e 	bl	80025a8 <setHome>
		}

		if (startPointModeY) {
 800210c:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d027      	beq.n	8002164 <HAL_TIM_PeriodElapsedCallback+0xc8>
			int16_t targetPosPointMode = registerFrame[49].U16; // READ : Goal Point y
 8002114:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002116:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800211a:	81fb      	strh	r3, [r7, #14]
			checkTarget = targetPosPointMode / 10;
 800211c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002120:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002122:	fb82 1203 	smull	r1, r2, r2, r3
 8002126:	1092      	asrs	r2, r2, #2
 8002128:	17db      	asrs	r3, r3, #31
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	b21a      	sxth	r2, r3
 800212e:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002130:	801a      	strh	r2, [r3, #0]
			onlyPositionControlPointMode(initPosY, targetPosPointMode / 10);
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800213e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002142:	4a1c      	ldr	r2, [pc, #112]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002144:	fb82 1203 	smull	r1, r2, r2, r3
 8002148:	1092      	asrs	r2, r2, #2
 800214a:	17db      	asrs	r3, r3, #31
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	b21b      	sxth	r3, r3
 8002150:	ee07 3a10 	vmov	s14, r3
 8002154:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002158:	eef0 0a47 	vmov.f32	s1, s14
 800215c:	eeb0 0a67 	vmov.f32	s0, s15
 8002160:	f000 fbf6 	bl	8002950 <onlyPositionControlPointMode>
		}

		if (startRunTray) {
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00e      	beq.n	800218a <HAL_TIM_PeriodElapsedCallback+0xee>
			if (endResetFlag) {
 800216c:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_TIM_PeriodElapsedCallback+0xea>
				endResetFlag = 0;
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
				endEffectorControl(endEffector.gripperWork, 1);
 800217a:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800217c:	789b      	ldrb	r3, [r3, #2]
 800217e:	2101      	movs	r1, #1
 8002180:	4618      	mov	r0, r3
 8002182:	f002 f893 	bl	80042ac <endEffectorControl>
				//registerFrame[2].U16==0b0000000000000000;
			}
			runTrayMode();
 8002186:	f000 f823 	bl	80021d0 <runTrayMode>
		}

	}
}
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200004cc 	.word	0x200004cc
 8002198:	20000f2c 	.word	0x20000f2c
 800219c:	20000d48 	.word	0x20000d48
 80021a0:	20000f1c 	.word	0x20000f1c
 80021a4:	20000e3c 	.word	0x20000e3c
 80021a8:	20000e0c 	.word	0x20000e0c
 80021ac:	20000264 	.word	0x20000264
 80021b0:	20000f0d 	.word	0x20000f0d
 80021b4:	66666667 	.word	0x66666667
 80021b8:	20000f4c 	.word	0x20000f4c
 80021bc:	20000f10 	.word	0x20000f10
 80021c0:	20000f1f 	.word	0x20000f1f
 80021c4:	20000271 	.word	0x20000271
 80021c8:	20000268 	.word	0x20000268
 80021cc:	00000000 	.word	0x00000000

080021d0 <runTrayMode>:

void runTrayMode() {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0

	switch (runTrayModeCase) {
 80021d4:	4b7e      	ldr	r3, [pc, #504]	; (80023d0 <runTrayMode+0x200>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b06      	cmp	r3, #6
 80021da:	f200 80f1 	bhi.w	80023c0 <runTrayMode+0x1f0>
 80021de:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <runTrayMode+0x14>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	08002201 	.word	0x08002201
 80021e8:	08002207 	.word	0x08002207
 80021ec:	080022a3 	.word	0x080022a3
 80021f0:	080022d3 	.word	0x080022d3
 80021f4:	080022e7 	.word	0x080022e7
 80021f8:	08002383 	.word	0x08002383
 80021fc:	080023b3 	.word	0x080023b3
	// BEFORE START SET HOME FIRST
	case 0:
		setHome();
 8002200:	f000 f9d2 	bl	80025a8 <setHome>
		break;
 8002204:	e0dc      	b.n	80023c0 <runTrayMode+0x1f0>
	case 1: // GO PICK

		if (goPick) {
 8002206:	4b73      	ldr	r3, [pc, #460]	; (80023d4 <runTrayMode+0x204>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d039      	beq.n	8002282 <runTrayMode+0xb2>
			// X-Axis
			PIDCase = 0;
 800220e:	4b72      	ldr	r3, [pc, #456]	; (80023d8 <runTrayMode+0x208>)
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
			registerFrame[65].U16 =
					(int16_t) ((objPickPos[pathComplete].x) * 10); // SET : x-axis Target Position
 8002214:	4b71      	ldr	r3, [pc, #452]	; (80023dc <runTrayMode+0x20c>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4a71      	ldr	r2, [pc, #452]	; (80023e0 <runTrayMode+0x210>)
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002226:	ee67 7a87 	vmul.f32	s15, s15, s14
 800222a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800222e:	ee17 3a90 	vmov	r3, s15
 8002232:	b21b      	sxth	r3, r3
 8002234:	b29a      	uxth	r2, r3
			registerFrame[65].U16 =
 8002236:	4b6b      	ldr	r3, [pc, #428]	; (80023e4 <runTrayMode+0x214>)
 8002238:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
			registerFrame[66].U16 = 3000; // SET : x-axis Target Speed
 800223c:	4b69      	ldr	r3, [pc, #420]	; (80023e4 <runTrayMode+0x214>)
 800223e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002242:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
			registerFrame[67].U16 = 1; // SET : x-axis Target Speed
 8002246:	4b67      	ldr	r3, [pc, #412]	; (80023e4 <runTrayMode+0x214>)
 8002248:	2201      	movs	r2, #1
 800224a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

			registerFrame[64].U16 = 0b0000000000000010; // RUN : x-axis Moving Status
 800224e:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <runTrayMode+0x214>)
 8002250:	2202      	movs	r2, #2
 8002252:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

			// Y-Axis
			passInit = 0;
 8002256:	4b64      	ldr	r3, [pc, #400]	; (80023e8 <runTrayMode+0x218>)
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]

			initPosY = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 800225c:	4b63      	ldr	r3, [pc, #396]	; (80023ec <runTrayMode+0x21c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f90b 	bl	800047c <__aeabi_i2d>
 8002266:	a358      	add	r3, pc, #352	; (adr r3, 80023c8 <runTrayMode+0x1f8>)
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	f7fe f970 	bl	8000550 <__aeabi_dmul>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f7fe fc1a 	bl	8000ab0 <__aeabi_d2iz>
 800227c:	4603      	mov	r3, r0
 800227e:	4a5c      	ldr	r2, [pc, #368]	; (80023f0 <runTrayMode+0x220>)
 8002280:	6013      	str	r3, [r2, #0]
		}

		if (registerFrame[64].U16 == 0) {
 8002282:	4b58      	ldr	r3, [pc, #352]	; (80023e4 <runTrayMode+0x214>)
 8002284:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002288:	2b00      	cmp	r3, #0
 800228a:	d106      	bne.n	800229a <runTrayMode+0xca>
			registerFrame[64].U16 = 2;
 800228c:	4b55      	ldr	r3, [pc, #340]	; (80023e4 <runTrayMode+0x214>)
 800228e:	2202      	movs	r2, #2
 8002290:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			runTrayModeCase = 2;
 8002294:	4b4e      	ldr	r3, [pc, #312]	; (80023d0 <runTrayMode+0x200>)
 8002296:	2202      	movs	r2, #2
 8002298:	701a      	strb	r2, [r3, #0]
		}

		// runTrayModeCase = 2; //// only Test Y-Axis

		goPick = 0;
 800229a:	4b4e      	ldr	r3, [pc, #312]	; (80023d4 <runTrayMode+0x204>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
		break;
 80022a0:	e08e      	b.n	80023c0 <runTrayMode+0x1f0>
	case 2:
		goPick = 1;
 80022a2:	4b4c      	ldr	r3, [pc, #304]	; (80023d4 <runTrayMode+0x204>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
		onlyPositionControl(initPosY, objPickPos[pathComplete].y);
 80022a8:	4b51      	ldr	r3, [pc, #324]	; (80023f0 <runTrayMode+0x220>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	ee07 3a90 	vmov	s15, r3
 80022b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b4:	4b49      	ldr	r3, [pc, #292]	; (80023dc <runTrayMode+0x20c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4a49      	ldr	r2, [pc, #292]	; (80023e0 <runTrayMode+0x210>)
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	3304      	adds	r3, #4
 80022c0:	ed93 7a00 	vldr	s14, [r3]
 80022c4:	eef0 0a47 	vmov.f32	s1, s14
 80022c8:	eeb0 0a67 	vmov.f32	s0, s15
 80022cc:	f000 f9ec 	bl	80026a8 <onlyPositionControl>
		break;
 80022d0:	e076      	b.n	80023c0 <runTrayMode+0x1f0>
	case 3:
		// END EFFECTOR CONTROL
		checkGoPick = 5;
 80022d2:	4b48      	ldr	r3, [pc, #288]	; (80023f4 <runTrayMode+0x224>)
 80022d4:	2205      	movs	r2, #5
 80022d6:	701a      	strb	r2, [r3, #0]
		//endEffectorControl(endEffector.gripperWork, 1);//<------------------------
		x2 = 1;
 80022d8:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <runTrayMode+0x228>)
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
		x[0] = 1;
 80022de:	4b47      	ldr	r3, [pc, #284]	; (80023fc <runTrayMode+0x22c>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
		break;
 80022e4:	e06c      	b.n	80023c0 <runTrayMode+0x1f0>
	case 4:  // GO PLACE

		if (goPlace) {
 80022e6:	4b46      	ldr	r3, [pc, #280]	; (8002400 <runTrayMode+0x230>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d039      	beq.n	8002362 <runTrayMode+0x192>
			// X-Axis
			PIDCase = 0;
 80022ee:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <runTrayMode+0x208>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
			registerFrame[65].U16 = (int16_t) ((objPlacePos[pathComplete].x)
 80022f4:	4b39      	ldr	r3, [pc, #228]	; (80023dc <runTrayMode+0x20c>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4a42      	ldr	r2, [pc, #264]	; (8002404 <runTrayMode+0x234>)
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	edd3 7a00 	vldr	s15, [r3]
					* 10);  // SET : x-axis Target Position
 8002302:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002306:	ee67 7a87 	vmul.f32	s15, s15, s14
			registerFrame[65].U16 = (int16_t) ((objPlacePos[pathComplete].x)
 800230a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800230e:	ee17 3a90 	vmov	r3, s15
 8002312:	b21b      	sxth	r3, r3
 8002314:	b29a      	uxth	r2, r3
 8002316:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <runTrayMode+0x214>)
 8002318:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
			registerFrame[66].U16 = 3000; // SET : x-axis Target Speed
 800231c:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <runTrayMode+0x214>)
 800231e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002322:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
			registerFrame[67].U16 = 1; // SET : x-axis Target Speed
 8002326:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <runTrayMode+0x214>)
 8002328:	2201      	movs	r2, #1
 800232a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

			registerFrame[64].U16 = 0b0000000000000010; // RUN : x-axis Moving Status
 800232e:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <runTrayMode+0x214>)
 8002330:	2202      	movs	r2, #2
 8002332:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

			// Y-Axis
			passInit = 0;
 8002336:	4b2c      	ldr	r3, [pc, #176]	; (80023e8 <runTrayMode+0x218>)
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]

			initPosY = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 800233c:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <runTrayMode+0x21c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f89b 	bl	800047c <__aeabi_i2d>
 8002346:	a320      	add	r3, pc, #128	; (adr r3, 80023c8 <runTrayMode+0x1f8>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe f900 	bl	8000550 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f7fe fbaa 	bl	8000ab0 <__aeabi_d2iz>
 800235c:	4603      	mov	r3, r0
 800235e:	4a24      	ldr	r2, [pc, #144]	; (80023f0 <runTrayMode+0x220>)
 8002360:	6013      	str	r3, [r2, #0]
		}

		if (registerFrame[64].U16 == 0) {
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <runTrayMode+0x214>)
 8002364:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8002368:	2b00      	cmp	r3, #0
 800236a:	d106      	bne.n	800237a <runTrayMode+0x1aa>
			registerFrame[64].U16 = 2;
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <runTrayMode+0x214>)
 800236e:	2202      	movs	r2, #2
 8002370:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			runTrayModeCase = 5;
 8002374:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <runTrayMode+0x200>)
 8002376:	2205      	movs	r2, #5
 8002378:	701a      	strb	r2, [r3, #0]
		}

		// runTrayModeCase = 5; // only test Y-Axis
		goPlace = 0;
 800237a:	4b21      	ldr	r3, [pc, #132]	; (8002400 <runTrayMode+0x230>)
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
		break;
 8002380:	e01e      	b.n	80023c0 <runTrayMode+0x1f0>
	case 5:
		goPlace = 1;
 8002382:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <runTrayMode+0x230>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
		onlyPositionControl(initPosY, objPlacePos[pathComplete].y);
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <runTrayMode+0x220>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	ee07 3a90 	vmov	s15, r3
 8002390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <runTrayMode+0x20c>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	4a1a      	ldr	r2, [pc, #104]	; (8002404 <runTrayMode+0x234>)
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	3304      	adds	r3, #4
 80023a0:	ed93 7a00 	vldr	s14, [r3]
 80023a4:	eef0 0a47 	vmov.f32	s1, s14
 80023a8:	eeb0 0a67 	vmov.f32	s0, s15
 80023ac:	f000 f97c 	bl	80026a8 <onlyPositionControl>
		break;
 80023b0:	e006      	b.n	80023c0 <runTrayMode+0x1f0>
	case 6:
		//endEffectorControl(endEffector.gripperWork, 1);
		x2 = 1;
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <runTrayMode+0x228>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
		x[1] = 1;
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <runTrayMode+0x22c>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	705a      	strb	r2, [r3, #1]

		break;
 80023be:	bf00      	nop
	}

}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	f3af 8000 	nop.w
 80023c8:	464f6faa 	.word	0x464f6faa
 80023cc:	3f8199cb 	.word	0x3f8199cb
 80023d0:	20000f21 	.word	0x20000f21
 80023d4:	2000026f 	.word	0x2000026f
 80023d8:	20000f26 	.word	0x20000f26
 80023dc:	20000f20 	.word	0x20000f20
 80023e0:	20000e40 	.word	0x20000e40
 80023e4:	20000d48 	.word	0x20000d48
 80023e8:	20000f24 	.word	0x20000f24
 80023ec:	20000e14 	.word	0x20000e14
 80023f0:	20000f10 	.word	0x20000f10
 80023f4:	20000f25 	.word	0x20000f25
 80023f8:	20000f2c 	.word	0x20000f2c
 80023fc:	20000f28 	.word	0x20000f28
 8002400:	20000270 	.word	0x20000270
 8002404:	20000e88 	.word	0x20000e88

08002408 <endEffectorPick>:
void endEffectorPick() {
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0

	switch (endEffectorState) {
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <endEffectorPick+0x60>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <endEffectorPick+0x12>
 8002414:	2b02      	cmp	r3, #2
 8002416:	d007      	beq.n	8002428 <endEffectorPick+0x20>
			x2 = 0;
		}
		break;
	}

}
 8002418:	e020      	b.n	800245c <endEffectorPick+0x54>
		endTimeStatus = 1;
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <endEffectorPick+0x64>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
		endEffectorState = 2;
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <endEffectorPick+0x60>)
 8002422:	2202      	movs	r2, #2
 8002424:	701a      	strb	r2, [r3, #0]
		break;
 8002426:	e019      	b.n	800245c <endEffectorPick+0x54>
		if (endTime >= 40) {
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <endEffectorPick+0x68>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	2b27      	cmp	r3, #39	; 0x27
 800242e:	d914      	bls.n	800245a <endEffectorPick+0x52>
			endTime = 0;
 8002430:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <endEffectorPick+0x68>)
 8002432:	2200      	movs	r2, #0
 8002434:	801a      	strh	r2, [r3, #0]
			endTimeStatus = 0;
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <endEffectorPick+0x64>)
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
			runTrayModeCase = 4;
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <endEffectorPick+0x6c>)
 800243e:	2204      	movs	r2, #4
 8002440:	701a      	strb	r2, [r3, #0]
			endEffectorState = 0;
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <endEffectorPick+0x60>)
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
			endEffectorPicking = 0;
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <endEffectorPick+0x70>)
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]
			x[0] = 0;
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <endEffectorPick+0x74>)
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
			x2 = 0;
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <endEffectorPick+0x78>)
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
		break;
 800245a:	bf00      	nop
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000f1e 	.word	0x20000f1e
 800246c:	20000f52 	.word	0x20000f52
 8002470:	20000f50 	.word	0x20000f50
 8002474:	20000f21 	.word	0x20000f21
 8002478:	20000f22 	.word	0x20000f22
 800247c:	20000f28 	.word	0x20000f28
 8002480:	20000f2c 	.word	0x20000f2c

08002484 <endEffectorPlace>:
void endEffectorPlace() {
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
	switch (endEffectorState) {
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <endEffectorPlace+0x80>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <endEffectorPlace+0x12>
 8002490:	2b02      	cmp	r3, #2
 8002492:	d007      	beq.n	80024a4 <endEffectorPlace+0x20>
				runTrayModeCase = 0;
			}
		}
		break;
	}
}
 8002494:	e030      	b.n	80024f8 <endEffectorPlace+0x74>
		endTimeStatus = 1;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <endEffectorPlace+0x84>)
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
		endEffectorState = 2;
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <endEffectorPlace+0x80>)
 800249e:	2202      	movs	r2, #2
 80024a0:	701a      	strb	r2, [r3, #0]
		break;
 80024a2:	e029      	b.n	80024f8 <endEffectorPlace+0x74>
		if (endTime >= 40) {
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <endEffectorPlace+0x88>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	2b27      	cmp	r3, #39	; 0x27
 80024aa:	d924      	bls.n	80024f6 <endEffectorPlace+0x72>
			endTime = 0;
 80024ac:	4b17      	ldr	r3, [pc, #92]	; (800250c <endEffectorPlace+0x88>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	801a      	strh	r2, [r3, #0]
			endTimeStatus = 0;
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <endEffectorPlace+0x84>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
			runTrayModeCase = 1;
 80024b8:	4b15      	ldr	r3, [pc, #84]	; (8002510 <endEffectorPlace+0x8c>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
			endEffectorState = 0;
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <endEffectorPlace+0x80>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
			endEffectorPicking = 0;
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <endEffectorPlace+0x90>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
			pathComplete += 1;
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <endEffectorPlace+0x94>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	3301      	adds	r3, #1
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <endEffectorPlace+0x94>)
 80024d4:	701a      	strb	r2, [r3, #0]
			x[1] = 0;
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <endEffectorPlace+0x98>)
 80024d8:	2200      	movs	r2, #0
 80024da:	705a      	strb	r2, [r3, #1]
			x2 = 0;
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <endEffectorPlace+0x9c>)
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
			if (pathComplete == 9) { // PUT IN SWITCH CASE
 80024e2:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <endEffectorPlace+0x94>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b09      	cmp	r3, #9
 80024e8:	d105      	bne.n	80024f6 <endEffectorPlace+0x72>
				pathComplete = 0;
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <endEffectorPlace+0x94>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
				runTrayModeCase = 0;
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <endEffectorPlace+0x8c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
		break;
 80024f6:	bf00      	nop
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000f1e 	.word	0x20000f1e
 8002508:	20000f52 	.word	0x20000f52
 800250c:	20000f50 	.word	0x20000f50
 8002510:	20000f21 	.word	0x20000f21
 8002514:	20000f22 	.word	0x20000f22
 8002518:	20000f20 	.word	0x20000f20
 800251c:	20000f28 	.word	0x20000f28
 8002520:	20000f2c 	.word	0x20000f2c

08002524 <setMotor>:
void setMotor() {
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
	if (dirAxisY) {
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <setMotor+0x3c>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <setMotor+0x18>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002530:	2201      	movs	r2, #1
 8002532:	2140      	movs	r1, #64	; 0x40
 8002534:	480b      	ldr	r0, [pc, #44]	; (8002564 <setMotor+0x40>)
 8002536:	f003 febd 	bl	80062b4 <HAL_GPIO_WritePin>
 800253a:	e004      	b.n	8002546 <setMotor+0x22>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800253c:	2200      	movs	r2, #0
 800253e:	2140      	movs	r1, #64	; 0x40
 8002540:	4808      	ldr	r0, [pc, #32]	; (8002564 <setMotor+0x40>)
 8002542:	f003 feb7 	bl	80062b4 <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <setMotor+0x44>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <setMotor+0x48>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002554:	ee17 2a90 	vmov	r2, s15
 8002558:	635a      	str	r2, [r3, #52]	; 0x34
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000244 	.word	0x20000244
 8002564:	40020800 	.word	0x40020800
 8002568:	20000e0c 	.word	0x20000e0c
 800256c:	20000418 	.word	0x20000418

08002570 <readEncoder>:

void readEncoder() {
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 8002574:	4b08      	ldr	r3, [pc, #32]	; (8002598 <readEncoder+0x28>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	461a      	mov	r2, r3
 800257c:	4b07      	ldr	r3, [pc, #28]	; (800259c <readEncoder+0x2c>)
 800257e:	601a      	str	r2, [r3, #0]
	QEIReadModified = QEIReadRaw - QEIHome;
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <readEncoder+0x2c>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <readEncoder+0x30>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	4a06      	ldr	r2, [pc, #24]	; (80025a4 <readEncoder+0x34>)
 800258c:	6013      	str	r3, [r2, #0]
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	20000634 	.word	0x20000634
 800259c:	20000e10 	.word	0x20000e10
 80025a0:	20000e18 	.word	0x20000e18
 80025a4:	20000e14 	.word	0x20000e14

080025a8 <setHome>:

void setHome() {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0

	switch (myHomeState) {
 80025ac:	4b30      	ldr	r3, [pc, #192]	; (8002670 <setHome+0xc8>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d85a      	bhi.n	800266a <setHome+0xc2>
 80025b4:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <setHome+0x14>)
 80025b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ba:	bf00      	nop
 80025bc:	080025cd 	.word	0x080025cd
 80025c0:	080025f5 	.word	0x080025f5
 80025c4:	0800261f 	.word	0x0800261f
 80025c8:	08002633 	.word	0x08002633
	case 0:
		if (photoSig[0]) // Motor Photo Sensor
 80025cc:	4b29      	ldr	r3, [pc, #164]	; (8002674 <setHome+0xcc>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <setHome+0x34>
		{
			myHomeState = 1;
 80025d4:	4b26      	ldr	r3, [pc, #152]	; (8002670 <setHome+0xc8>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
			dirAxisY = 0;
			duty = 290;
			setMotor();
			myHomeState = 1;
		}
		break;
 80025da:	e046      	b.n	800266a <setHome+0xc2>
			dirAxisY = 0;
 80025dc:	4b26      	ldr	r3, [pc, #152]	; (8002678 <setHome+0xd0>)
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
			duty = 290;
 80025e2:	4b26      	ldr	r3, [pc, #152]	; (800267c <setHome+0xd4>)
 80025e4:	4a26      	ldr	r2, [pc, #152]	; (8002680 <setHome+0xd8>)
 80025e6:	601a      	str	r2, [r3, #0]
			setMotor();
 80025e8:	f7ff ff9c 	bl	8002524 <setMotor>
			myHomeState = 1;
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <setHome+0xc8>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
		break;
 80025f2:	e03a      	b.n	800266a <setHome+0xc2>
	case 1:
		if (photoSig[0]) // Motor Photo Sensor
 80025f4:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <setHome+0xcc>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <setHome+0x66>
		{
			dirAxisY = 1;
 80025fc:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <setHome+0xd0>)
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
			duty = 300;
 8002602:	4b1e      	ldr	r3, [pc, #120]	; (800267c <setHome+0xd4>)
 8002604:	4a1f      	ldr	r2, [pc, #124]	; (8002684 <setHome+0xdc>)
 8002606:	601a      	str	r2, [r3, #0]
			setMotor();
 8002608:	f7ff ff8c 	bl	8002524 <setMotor>
		} else if (photoSig[1]) // Center Photo Sensor
		{
			myHomeState = 2;
		}
		break;
 800260c:	e02a      	b.n	8002664 <setHome+0xbc>
		} else if (photoSig[1]) // Center Photo Sensor
 800260e:	4b19      	ldr	r3, [pc, #100]	; (8002674 <setHome+0xcc>)
 8002610:	785b      	ldrb	r3, [r3, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d026      	beq.n	8002664 <setHome+0xbc>
			myHomeState = 2;
 8002616:	4b16      	ldr	r3, [pc, #88]	; (8002670 <setHome+0xc8>)
 8002618:	2202      	movs	r2, #2
 800261a:	701a      	strb	r2, [r3, #0]
		break;
 800261c:	e022      	b.n	8002664 <setHome+0xbc>
	case 2:
		duty = 0;
 800261e:	4b17      	ldr	r3, [pc, #92]	; (800267c <setHome+0xd4>)
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
		setMotor();
 8002626:	f7ff ff7d 	bl	8002524 <setMotor>
		myHomeState = 3;
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <setHome+0xc8>)
 800262c:	2203      	movs	r2, #3
 800262e:	701a      	strb	r2, [r3, #0]
		break;
 8002630:	e01b      	b.n	800266a <setHome+0xc2>
	case 3:
		QEIHome = QEIReadRaw;
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <setHome+0xe0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a15      	ldr	r2, [pc, #84]	; (800268c <setHome+0xe4>)
 8002638:	6013      	str	r3, [r2, #0]
		startSetHome = 0;
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <setHome+0xe8>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
		myHomeState = 0;
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <setHome+0xc8>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
		registerFrame[16].U16 = 0; // RESET : y-axis Moving Status
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <setHome+0xec>)
 8002648:	2200      	movs	r2, #0
 800264a:	841a      	strh	r2, [r3, #32]
		mmActPos = 0;
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <setHome+0xf0>)
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
		if (startRunTray) {
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <setHome+0xf4>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <setHome+0xc0>
			runTrayModeCase = 1;
 800265c:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <setHome+0xf8>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002662:	e001      	b.n	8002668 <setHome+0xc0>
		break;
 8002664:	bf00      	nop
 8002666:	e000      	b.n	800266a <setHome+0xc2>
		break;
 8002668:	bf00      	nop

	}

}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000f0c 	.word	0x20000f0c
 8002674:	20000e3c 	.word	0x20000e3c
 8002678:	20000244 	.word	0x20000244
 800267c:	20000e0c 	.word	0x20000e0c
 8002680:	43910000 	.word	0x43910000
 8002684:	43960000 	.word	0x43960000
 8002688:	20000e10 	.word	0x20000e10
 800268c:	20000e18 	.word	0x20000e18
 8002690:	20000264 	.word	0x20000264
 8002694:	20000d48 	.word	0x20000d48
 8002698:	20000e1c 	.word	0x20000e1c
 800269c:	20000f1f 	.word	0x20000f1f
 80026a0:	20000f21 	.word	0x20000f21
 80026a4:	00000000 	.word	0x00000000

080026a8 <onlyPositionControl>:
	}
	prePos = mmActPos;
	setMotor();
}

void onlyPositionControl(float initPos, float targetPos) {
 80026a8:	b5b0      	push	{r4, r5, r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80026b2:	edc7 0a00 	vstr	s1, [r7]
	calculationTraj result = trapezoidalTraj(initPos, targetPos);
 80026b6:	f107 0308 	add.w	r3, r7, #8
 80026ba:	edd7 0a00 	vldr	s1, [r7]
 80026be:	ed97 0a01 	vldr	s0, [r7, #4]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 faf0 	bl	8002ca8 <trapezoidalTraj>

	switch (PIDCase) {
 80026c8:	4b8f      	ldr	r3, [pc, #572]	; (8002908 <onlyPositionControl+0x260>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <onlyPositionControl+0x30>
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	f000 80e5 	beq.w	80028a0 <onlyPositionControl+0x1f8>

		}
		break;
	}

}
 80026d6:	e10b      	b.n	80028f0 <onlyPositionControl+0x248>
		mmActPos = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 80026d8:	4b8c      	ldr	r3, [pc, #560]	; (800290c <onlyPositionControl+0x264>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fd fecd 	bl	800047c <__aeabi_i2d>
 80026e2:	a385      	add	r3, pc, #532	; (adr r3, 80028f8 <onlyPositionControl+0x250>)
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	f7fd ff32 	bl	8000550 <__aeabi_dmul>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f7fe fa04 	bl	8000b00 <__aeabi_d2f>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4a85      	ldr	r2, [pc, #532]	; (8002910 <onlyPositionControl+0x268>)
 80026fc:	6013      	str	r3, [r2, #0]
		mmActVel = (mmActPos - prePos) / 0.001;
 80026fe:	4b84      	ldr	r3, [pc, #528]	; (8002910 <onlyPositionControl+0x268>)
 8002700:	ed93 7a00 	vldr	s14, [r3]
 8002704:	4b83      	ldr	r3, [pc, #524]	; (8002914 <onlyPositionControl+0x26c>)
 8002706:	edd3 7a00 	vldr	s15, [r3]
 800270a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800270e:	ee17 0a90 	vmov	r0, s15
 8002712:	f7fd fec5 	bl	80004a0 <__aeabi_f2d>
 8002716:	a37a      	add	r3, pc, #488	; (adr r3, 8002900 <onlyPositionControl+0x258>)
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	f7fe f842 	bl	80007a4 <__aeabi_ddiv>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	f7fe f9ea 	bl	8000b00 <__aeabi_d2f>
 800272c:	4603      	mov	r3, r0
 800272e:	4a7a      	ldr	r2, [pc, #488]	; (8002918 <onlyPositionControl+0x270>)
 8002730:	6013      	str	r3, [r2, #0]
		mmActAcc = (mmActVel - preVel) / 0.001;
 8002732:	4b79      	ldr	r3, [pc, #484]	; (8002918 <onlyPositionControl+0x270>)
 8002734:	ed93 7a00 	vldr	s14, [r3]
 8002738:	4b78      	ldr	r3, [pc, #480]	; (800291c <onlyPositionControl+0x274>)
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002742:	ee17 0a90 	vmov	r0, s15
 8002746:	f7fd feab 	bl	80004a0 <__aeabi_f2d>
 800274a:	a36d      	add	r3, pc, #436	; (adr r3, 8002900 <onlyPositionControl+0x258>)
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	f7fe f828 	bl	80007a4 <__aeabi_ddiv>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f7fe f9d0 	bl	8000b00 <__aeabi_d2f>
 8002760:	4603      	mov	r3, r0
 8002762:	4a6f      	ldr	r2, [pc, #444]	; (8002920 <onlyPositionControl+0x278>)
 8002764:	6013      	str	r3, [r2, #0]
		mmError = result.posTraj - mmActPos;
 8002766:	ed97 7a02 	vldr	s14, [r7, #8]
 800276a:	4b69      	ldr	r3, [pc, #420]	; (8002910 <onlyPositionControl+0x268>)
 800276c:	edd3 7a00 	vldr	s15, [r3]
 8002770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002774:	4b6b      	ldr	r3, [pc, #428]	; (8002924 <onlyPositionControl+0x27c>)
 8002776:	edc3 7a00 	vstr	s15, [r3]
		positionPID.eIntegral = positionPID.eIntegral + (mmError * 0.001);
 800277a:	4b6b      	ldr	r3, [pc, #428]	; (8002928 <onlyPositionControl+0x280>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd fe8e 	bl	80004a0 <__aeabi_f2d>
 8002784:	4604      	mov	r4, r0
 8002786:	460d      	mov	r5, r1
 8002788:	4b66      	ldr	r3, [pc, #408]	; (8002924 <onlyPositionControl+0x27c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd fe87 	bl	80004a0 <__aeabi_f2d>
 8002792:	a35b      	add	r3, pc, #364	; (adr r3, 8002900 <onlyPositionControl+0x258>)
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	f7fd feda 	bl	8000550 <__aeabi_dmul>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4620      	mov	r0, r4
 80027a2:	4629      	mov	r1, r5
 80027a4:	f7fd fd1e 	bl	80001e4 <__adddf3>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f7fe f9a6 	bl	8000b00 <__aeabi_d2f>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4a5c      	ldr	r2, [pc, #368]	; (8002928 <onlyPositionControl+0x280>)
 80027b8:	60d3      	str	r3, [r2, #12]
		duty = (positionPID.pTerm * mmError)
 80027ba:	4b5b      	ldr	r3, [pc, #364]	; (8002928 <onlyPositionControl+0x280>)
 80027bc:	ed93 7a00 	vldr	s14, [r3]
 80027c0:	4b58      	ldr	r3, [pc, #352]	; (8002924 <onlyPositionControl+0x27c>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ (positionPID.iTerm * positionPID.eIntegral);
 80027ca:	4b57      	ldr	r3, [pc, #348]	; (8002928 <onlyPositionControl+0x280>)
 80027cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80027d0:	4b55      	ldr	r3, [pc, #340]	; (8002928 <onlyPositionControl+0x280>)
 80027d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80027d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027da:	ee77 7a27 	vadd.f32	s15, s14, s15
		duty = (positionPID.pTerm * mmError)
 80027de:	4b53      	ldr	r3, [pc, #332]	; (800292c <onlyPositionControl+0x284>)
 80027e0:	edc3 7a00 	vstr	s15, [r3]
		if (duty < 0) {
 80027e4:	4b51      	ldr	r3, [pc, #324]	; (800292c <onlyPositionControl+0x284>)
 80027e6:	edd3 7a00 	vldr	s15, [r3]
 80027ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f2:	d50b      	bpl.n	800280c <onlyPositionControl+0x164>
			dirAxisY = 0;
 80027f4:	4b4e      	ldr	r3, [pc, #312]	; (8002930 <onlyPositionControl+0x288>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
			duty = (-1) * duty;
 80027fa:	4b4c      	ldr	r3, [pc, #304]	; (800292c <onlyPositionControl+0x284>)
 80027fc:	edd3 7a00 	vldr	s15, [r3]
 8002800:	eef1 7a67 	vneg.f32	s15, s15
 8002804:	4b49      	ldr	r3, [pc, #292]	; (800292c <onlyPositionControl+0x284>)
 8002806:	edc3 7a00 	vstr	s15, [r3]
 800280a:	e002      	b.n	8002812 <onlyPositionControl+0x16a>
			dirAxisY = 1;
 800280c:	4b48      	ldr	r3, [pc, #288]	; (8002930 <onlyPositionControl+0x288>)
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
		if (duty > 1000) {
 8002812:	4b46      	ldr	r3, [pc, #280]	; (800292c <onlyPositionControl+0x284>)
 8002814:	edd3 7a00 	vldr	s15, [r3]
 8002818:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002934 <onlyPositionControl+0x28c>
 800281c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002824:	dd03      	ble.n	800282e <onlyPositionControl+0x186>
			duty = 1000;
 8002826:	4b41      	ldr	r3, [pc, #260]	; (800292c <onlyPositionControl+0x284>)
 8002828:	4a43      	ldr	r2, [pc, #268]	; (8002938 <onlyPositionControl+0x290>)
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e00d      	b.n	800284a <onlyPositionControl+0x1a2>
		} else if (duty <= 290) {
 800282e:	4b3f      	ldr	r3, [pc, #252]	; (800292c <onlyPositionControl+0x284>)
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800293c <onlyPositionControl+0x294>
 8002838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002840:	d803      	bhi.n	800284a <onlyPositionControl+0x1a2>
			duty = 0;
 8002842:	4b3a      	ldr	r3, [pc, #232]	; (800292c <onlyPositionControl+0x284>)
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
		setMotor();
 800284a:	f7ff fe6b 	bl	8002524 <setMotor>
		prePos = mmActPos;
 800284e:	4b30      	ldr	r3, [pc, #192]	; (8002910 <onlyPositionControl+0x268>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a30      	ldr	r2, [pc, #192]	; (8002914 <onlyPositionControl+0x26c>)
 8002854:	6013      	str	r3, [r2, #0]
		preVel = mmActVel;
 8002856:	4b30      	ldr	r3, [pc, #192]	; (8002918 <onlyPositionControl+0x270>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a30      	ldr	r2, [pc, #192]	; (800291c <onlyPositionControl+0x274>)
 800285c:	6013      	str	r3, [r2, #0]
		finalPIDChecky = result.velTraj;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4a37      	ldr	r2, [pc, #220]	; (8002940 <onlyPositionControl+0x298>)
 8002862:	6013      	str	r3, [r2, #0]
		if (fabs(mmError) <= 1.5 && result.velTraj == 0.0 && passInit) {
 8002864:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <onlyPositionControl+0x27c>)
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	eef0 7ae7 	vabs.f32	s15, s15
 800286e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002872:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287a:	d80d      	bhi.n	8002898 <onlyPositionControl+0x1f0>
 800287c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002880:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002888:	d106      	bne.n	8002898 <onlyPositionControl+0x1f0>
 800288a:	4b2e      	ldr	r3, [pc, #184]	; (8002944 <onlyPositionControl+0x29c>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <onlyPositionControl+0x1f0>
			PIDCase = 1;
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <onlyPositionControl+0x260>)
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
		passInit = 1;
 8002898:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <onlyPositionControl+0x29c>)
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
		break;
 800289e:	e027      	b.n	80028f0 <onlyPositionControl+0x248>
		if (runTrayModeCase == 2) {
 80028a0:	4b29      	ldr	r3, [pc, #164]	; (8002948 <onlyPositionControl+0x2a0>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d10f      	bne.n	80028c8 <onlyPositionControl+0x220>
			runTrayModeCase = 3;
 80028a8:	4b27      	ldr	r3, [pc, #156]	; (8002948 <onlyPositionControl+0x2a0>)
 80028aa:	2203      	movs	r2, #3
 80028ac:	701a      	strb	r2, [r3, #0]
			passInit = 0;
 80028ae:	4b25      	ldr	r3, [pc, #148]	; (8002944 <onlyPositionControl+0x29c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
			PIDCase = 0;
 80028b4:	4b14      	ldr	r3, [pc, #80]	; (8002908 <onlyPositionControl+0x260>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
			duty = 0;
 80028ba:	4b1c      	ldr	r3, [pc, #112]	; (800292c <onlyPositionControl+0x284>)
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
			setMotor();
 80028c2:	f7ff fe2f 	bl	8002524 <setMotor>
		break;
 80028c6:	e012      	b.n	80028ee <onlyPositionControl+0x246>
		} else if (runTrayModeCase == 5) {
 80028c8:	4b1f      	ldr	r3, [pc, #124]	; (8002948 <onlyPositionControl+0x2a0>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d10e      	bne.n	80028ee <onlyPositionControl+0x246>
			runTrayModeCase = 6;
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <onlyPositionControl+0x2a0>)
 80028d2:	2206      	movs	r2, #6
 80028d4:	701a      	strb	r2, [r3, #0]
			passInit = 0;
 80028d6:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <onlyPositionControl+0x29c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
			PIDCase = 0;
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <onlyPositionControl+0x260>)
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
			duty = 0;
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <onlyPositionControl+0x284>)
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
			setMotor();
 80028ea:	f7ff fe1b 	bl	8002524 <setMotor>
		break;
 80028ee:	bf00      	nop
}
 80028f0:	bf00      	nop
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bdb0      	pop	{r4, r5, r7, pc}
 80028f8:	464f6faa 	.word	0x464f6faa
 80028fc:	3f8199cb 	.word	0x3f8199cb
 8002900:	d2f1a9fc 	.word	0xd2f1a9fc
 8002904:	3f50624d 	.word	0x3f50624d
 8002908:	20000f26 	.word	0x20000f26
 800290c:	20000e14 	.word	0x20000e14
 8002910:	20000e1c 	.word	0x20000e1c
 8002914:	20000e2c 	.word	0x20000e2c
 8002918:	20000e24 	.word	0x20000e24
 800291c:	20000e30 	.word	0x20000e30
 8002920:	20000e28 	.word	0x20000e28
 8002924:	20000e20 	.word	0x20000e20
 8002928:	20000248 	.word	0x20000248
 800292c:	20000e0c 	.word	0x20000e0c
 8002930:	20000244 	.word	0x20000244
 8002934:	447a0000 	.word	0x447a0000
 8002938:	447a0000 	.word	0x447a0000
 800293c:	43910000 	.word	0x43910000
 8002940:	20000f30 	.word	0x20000f30
 8002944:	20000f24 	.word	0x20000f24
 8002948:	20000f21 	.word	0x20000f21
 800294c:	00000000 	.word	0x00000000

08002950 <onlyPositionControlPointMode>:

void onlyPositionControlPointMode(float initPos, float targetPos) {
 8002950:	b5b0      	push	{r4, r5, r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	ed87 0a01 	vstr	s0, [r7, #4]
 800295a:	edc7 0a00 	vstr	s1, [r7]
	calculationTraj result = trapezoidalTraj(initPos, targetPos);
 800295e:	f107 0308 	add.w	r3, r7, #8
 8002962:	edd7 0a00 	vldr	s1, [r7]
 8002966:	ed97 0a01 	vldr	s0, [r7, #4]
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f99c 	bl	8002ca8 <trapezoidalTraj>

	mmActPos = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 8002970:	4b69      	ldr	r3, [pc, #420]	; (8002b18 <onlyPositionControlPointMode+0x1c8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7fd fd81 	bl	800047c <__aeabi_i2d>
 800297a:	a363      	add	r3, pc, #396	; (adr r3, 8002b08 <onlyPositionControlPointMode+0x1b8>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f7fd fde6 	bl	8000550 <__aeabi_dmul>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f8b8 	bl	8000b00 <__aeabi_d2f>
 8002990:	4603      	mov	r3, r0
 8002992:	4a62      	ldr	r2, [pc, #392]	; (8002b1c <onlyPositionControlPointMode+0x1cc>)
 8002994:	6013      	str	r3, [r2, #0]
	mmActVel = (mmActPos - prePos) / 0.001;
 8002996:	4b61      	ldr	r3, [pc, #388]	; (8002b1c <onlyPositionControlPointMode+0x1cc>)
 8002998:	ed93 7a00 	vldr	s14, [r3]
 800299c:	4b60      	ldr	r3, [pc, #384]	; (8002b20 <onlyPositionControlPointMode+0x1d0>)
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a6:	ee17 0a90 	vmov	r0, s15
 80029aa:	f7fd fd79 	bl	80004a0 <__aeabi_f2d>
 80029ae:	a358      	add	r3, pc, #352	; (adr r3, 8002b10 <onlyPositionControlPointMode+0x1c0>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fd fef6 	bl	80007a4 <__aeabi_ddiv>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f7fe f89e 	bl	8000b00 <__aeabi_d2f>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4a57      	ldr	r2, [pc, #348]	; (8002b24 <onlyPositionControlPointMode+0x1d4>)
 80029c8:	6013      	str	r3, [r2, #0]
	mmActAcc = (mmActVel - preVel) / 0.001;
 80029ca:	4b56      	ldr	r3, [pc, #344]	; (8002b24 <onlyPositionControlPointMode+0x1d4>)
 80029cc:	ed93 7a00 	vldr	s14, [r3]
 80029d0:	4b55      	ldr	r3, [pc, #340]	; (8002b28 <onlyPositionControlPointMode+0x1d8>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029da:	ee17 0a90 	vmov	r0, s15
 80029de:	f7fd fd5f 	bl	80004a0 <__aeabi_f2d>
 80029e2:	a34b      	add	r3, pc, #300	; (adr r3, 8002b10 <onlyPositionControlPointMode+0x1c0>)
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	f7fd fedc 	bl	80007a4 <__aeabi_ddiv>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	f7fe f884 	bl	8000b00 <__aeabi_d2f>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4a4c      	ldr	r2, [pc, #304]	; (8002b2c <onlyPositionControlPointMode+0x1dc>)
 80029fc:	6013      	str	r3, [r2, #0]

	mmError = result.posTraj - mmActPos;
 80029fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a02:	4b46      	ldr	r3, [pc, #280]	; (8002b1c <onlyPositionControlPointMode+0x1cc>)
 8002a04:	edd3 7a00 	vldr	s15, [r3]
 8002a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0c:	4b48      	ldr	r3, [pc, #288]	; (8002b30 <onlyPositionControlPointMode+0x1e0>)
 8002a0e:	edc3 7a00 	vstr	s15, [r3]
	positionPID.eIntegral = positionPID.eIntegral + (mmError * 0.001);
 8002a12:	4b48      	ldr	r3, [pc, #288]	; (8002b34 <onlyPositionControlPointMode+0x1e4>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fd fd42 	bl	80004a0 <__aeabi_f2d>
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	460d      	mov	r5, r1
 8002a20:	4b43      	ldr	r3, [pc, #268]	; (8002b30 <onlyPositionControlPointMode+0x1e0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fd fd3b 	bl	80004a0 <__aeabi_f2d>
 8002a2a:	a339      	add	r3, pc, #228	; (adr r3, 8002b10 <onlyPositionControlPointMode+0x1c0>)
 8002a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a30:	f7fd fd8e 	bl	8000550 <__aeabi_dmul>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4620      	mov	r0, r4
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	f7fd fbd2 	bl	80001e4 <__adddf3>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	f7fe f85a 	bl	8000b00 <__aeabi_d2f>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4a39      	ldr	r2, [pc, #228]	; (8002b34 <onlyPositionControlPointMode+0x1e4>)
 8002a50:	60d3      	str	r3, [r2, #12]
	duty = (positionPID.pTerm * mmError)
 8002a52:	4b38      	ldr	r3, [pc, #224]	; (8002b34 <onlyPositionControlPointMode+0x1e4>)
 8002a54:	ed93 7a00 	vldr	s14, [r3]
 8002a58:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <onlyPositionControlPointMode+0x1e0>)
 8002a5a:	edd3 7a00 	vldr	s15, [r3]
 8002a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (positionPID.iTerm * positionPID.eIntegral);
 8002a62:	4b34      	ldr	r3, [pc, #208]	; (8002b34 <onlyPositionControlPointMode+0x1e4>)
 8002a64:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a68:	4b32      	ldr	r3, [pc, #200]	; (8002b34 <onlyPositionControlPointMode+0x1e4>)
 8002a6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a72:	ee77 7a27 	vadd.f32	s15, s14, s15
	duty = (positionPID.pTerm * mmError)
 8002a76:	4b30      	ldr	r3, [pc, #192]	; (8002b38 <onlyPositionControlPointMode+0x1e8>)
 8002a78:	edc3 7a00 	vstr	s15, [r3]
//	} else {
//		flagControlPI = 0;
//		duty = (positionPID.pTerm * mmError);
//	}

	if (duty < 0) {
 8002a7c:	4b2e      	ldr	r3, [pc, #184]	; (8002b38 <onlyPositionControlPointMode+0x1e8>)
 8002a7e:	edd3 7a00 	vldr	s15, [r3]
 8002a82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8a:	d50b      	bpl.n	8002aa4 <onlyPositionControlPointMode+0x154>
		dirAxisY = 0;
 8002a8c:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <onlyPositionControlPointMode+0x1ec>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
		duty = (-1) * duty;
 8002a92:	4b29      	ldr	r3, [pc, #164]	; (8002b38 <onlyPositionControlPointMode+0x1e8>)
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	eef1 7a67 	vneg.f32	s15, s15
 8002a9c:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <onlyPositionControlPointMode+0x1e8>)
 8002a9e:	edc3 7a00 	vstr	s15, [r3]
 8002aa2:	e002      	b.n	8002aaa <onlyPositionControlPointMode+0x15a>
	} else {
		dirAxisY = 1;
 8002aa4:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <onlyPositionControlPointMode+0x1ec>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
	}
	if (duty > 1000) {
 8002aaa:	4b23      	ldr	r3, [pc, #140]	; (8002b38 <onlyPositionControlPointMode+0x1e8>)
 8002aac:	edd3 7a00 	vldr	s15, [r3]
 8002ab0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002b40 <onlyPositionControlPointMode+0x1f0>
 8002ab4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abc:	dd03      	ble.n	8002ac6 <onlyPositionControlPointMode+0x176>
		duty = 1000;
 8002abe:	4b1e      	ldr	r3, [pc, #120]	; (8002b38 <onlyPositionControlPointMode+0x1e8>)
 8002ac0:	4a20      	ldr	r2, [pc, #128]	; (8002b44 <onlyPositionControlPointMode+0x1f4>)
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e00d      	b.n	8002ae2 <onlyPositionControlPointMode+0x192>
	} else if (duty <= 290) {
 8002ac6:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <onlyPositionControlPointMode+0x1e8>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002b48 <onlyPositionControlPointMode+0x1f8>
 8002ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad8:	d803      	bhi.n	8002ae2 <onlyPositionControlPointMode+0x192>
		duty = 0;
 8002ada:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <onlyPositionControlPointMode+0x1e8>)
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
	}

	setMotor();
 8002ae2:	f7ff fd1f 	bl	8002524 <setMotor>

	prePos = mmActPos;
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <onlyPositionControlPointMode+0x1cc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a0d      	ldr	r2, [pc, #52]	; (8002b20 <onlyPositionControlPointMode+0x1d0>)
 8002aec:	6013      	str	r3, [r2, #0]
	preVel = mmActVel;
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <onlyPositionControlPointMode+0x1d4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <onlyPositionControlPointMode+0x1d8>)
 8002af4:	6013      	str	r3, [r2, #0]
	finalPIDChecky = result.posTraj;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <onlyPositionControlPointMode+0x1fc>)
 8002afa:	6013      	str	r3, [r2, #0]

}
 8002afc:	bf00      	nop
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bdb0      	pop	{r4, r5, r7, pc}
 8002b04:	f3af 8000 	nop.w
 8002b08:	464f6faa 	.word	0x464f6faa
 8002b0c:	3f8199cb 	.word	0x3f8199cb
 8002b10:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b14:	3f50624d 	.word	0x3f50624d
 8002b18:	20000e14 	.word	0x20000e14
 8002b1c:	20000e1c 	.word	0x20000e1c
 8002b20:	20000e2c 	.word	0x20000e2c
 8002b24:	20000e24 	.word	0x20000e24
 8002b28:	20000e30 	.word	0x20000e30
 8002b2c:	20000e28 	.word	0x20000e28
 8002b30:	20000e20 	.word	0x20000e20
 8002b34:	20000248 	.word	0x20000248
 8002b38:	20000e0c 	.word	0x20000e0c
 8002b3c:	20000244 	.word	0x20000244
 8002b40:	447a0000 	.word	0x447a0000
 8002b44:	447a0000 	.word	0x447a0000
 8002b48:	43910000 	.word	0x43910000
 8002b4c:	20000f30 	.word	0x20000f30

08002b50 <jogAxisY>:
void jogAxisY() {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	refYPos = buffer[0].subdata.yAxis;
 8002b54:	4b39      	ldr	r3, [pc, #228]	; (8002c3c <jogAxisY+0xec>)
 8002b56:	885b      	ldrh	r3, [r3, #2]
 8002b58:	ee07 3a90 	vmov	s15, r3
 8002b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b60:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <jogAxisY+0xf0>)
 8002b62:	edc3 7a00 	vstr	s15, [r3]
	if (refYPos > 2500) {
 8002b66:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <jogAxisY+0xf0>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002c44 <jogAxisY+0xf4>
 8002b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b78:	dd03      	ble.n	8002b82 <jogAxisY+0x32>
		dirAxisY = 1;
 8002b7a:	4b33      	ldr	r3, [pc, #204]	; (8002c48 <jogAxisY+0xf8>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
 8002b80:	e00c      	b.n	8002b9c <jogAxisY+0x4c>
	} else if (refYPos < 1500) {
 8002b82:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <jogAxisY+0xf0>)
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002c4c <jogAxisY+0xfc>
 8002b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b94:	d502      	bpl.n	8002b9c <jogAxisY+0x4c>
		dirAxisY = 0;
 8002b96:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <jogAxisY+0xf8>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
	}
	if (refYPos > 3600 || refYPos < 100) {
 8002b9c:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <jogAxisY+0xf0>)
 8002b9e:	edd3 7a00 	vldr	s15, [r3]
 8002ba2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002c50 <jogAxisY+0x100>
 8002ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bae:	dc09      	bgt.n	8002bc4 <jogAxisY+0x74>
 8002bb0:	4b23      	ldr	r3, [pc, #140]	; (8002c40 <jogAxisY+0xf0>)
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002c54 <jogAxisY+0x104>
 8002bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc2:	d503      	bpl.n	8002bcc <jogAxisY+0x7c>
		duty = 280;
 8002bc4:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <jogAxisY+0x108>)
 8002bc6:	4a25      	ldr	r2, [pc, #148]	; (8002c5c <jogAxisY+0x10c>)
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	e033      	b.n	8002c34 <jogAxisY+0xe4>
	} else if (refYPos > 2500 && refYPos <= 3600) {
 8002bcc:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <jogAxisY+0xf0>)
 8002bce:	edd3 7a00 	vldr	s15, [r3]
 8002bd2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002c44 <jogAxisY+0xf4>
 8002bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bde:	dd0d      	ble.n	8002bfc <jogAxisY+0xac>
 8002be0:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <jogAxisY+0xf0>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002c50 <jogAxisY+0x100>
 8002bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf2:	d803      	bhi.n	8002bfc <jogAxisY+0xac>
		duty = 250;
 8002bf4:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <jogAxisY+0x108>)
 8002bf6:	4a1a      	ldr	r2, [pc, #104]	; (8002c60 <jogAxisY+0x110>)
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e01b      	b.n	8002c34 <jogAxisY+0xe4>
	}

	else if (refYPos > 100 && refYPos <= 1500) {
 8002bfc:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <jogAxisY+0xf0>)
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002c54 <jogAxisY+0x104>
 8002c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0e:	dd0d      	ble.n	8002c2c <jogAxisY+0xdc>
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <jogAxisY+0xf0>)
 8002c12:	edd3 7a00 	vldr	s15, [r3]
 8002c16:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002c4c <jogAxisY+0xfc>
 8002c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c22:	d803      	bhi.n	8002c2c <jogAxisY+0xdc>
		duty = 280;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <jogAxisY+0x108>)
 8002c26:	4a0d      	ldr	r2, [pc, #52]	; (8002c5c <jogAxisY+0x10c>)
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e003      	b.n	8002c34 <jogAxisY+0xe4>
	} else {
		duty = 0;
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <jogAxisY+0x108>)
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
	}
	setMotor();
 8002c34:	f7ff fc76 	bl	8002524 <setMotor>

}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000ddc 	.word	0x20000ddc
 8002c40:	20000224 	.word	0x20000224
 8002c44:	451c4000 	.word	0x451c4000
 8002c48:	20000244 	.word	0x20000244
 8002c4c:	44bb8000 	.word	0x44bb8000
 8002c50:	45610000 	.word	0x45610000
 8002c54:	42c80000 	.word	0x42c80000
 8002c58:	20000e0c 	.word	0x20000e0c
 8002c5c:	438c0000 	.word	0x438c0000
 8002c60:	437a0000 	.word	0x437a0000

08002c64 <photoDetect>:
//	}
//	setMotor();
//
//}

void photoDetect() {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
	photoSig[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);  // MOTOR Photo Sensor
 8002c68:	2120      	movs	r1, #32
 8002c6a:	480d      	ldr	r0, [pc, #52]	; (8002ca0 <photoDetect+0x3c>)
 8002c6c:	f003 fb0a 	bl	8006284 <HAL_GPIO_ReadPin>
 8002c70:	4603      	mov	r3, r0
 8002c72:	461a      	mov	r2, r3
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <photoDetect+0x40>)
 8002c76:	701a      	strb	r2, [r3, #0]
	photoSig[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // CENTER Photo Sensor
 8002c78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c7c:	4808      	ldr	r0, [pc, #32]	; (8002ca0 <photoDetect+0x3c>)
 8002c7e:	f003 fb01 	bl	8006284 <HAL_GPIO_ReadPin>
 8002c82:	4603      	mov	r3, r0
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <photoDetect+0x40>)
 8002c88:	705a      	strb	r2, [r3, #1]
	photoSig[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);  // ENCODER Photo Sensor
 8002c8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c8e:	4804      	ldr	r0, [pc, #16]	; (8002ca0 <photoDetect+0x3c>)
 8002c90:	f003 faf8 	bl	8006284 <HAL_GPIO_ReadPin>
 8002c94:	4603      	mov	r3, r0
 8002c96:	461a      	mov	r2, r3
 8002c98:	4b02      	ldr	r3, [pc, #8]	; (8002ca4 <photoDetect+0x40>)
 8002c9a:	709a      	strb	r2, [r3, #2]
}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40020400 	.word	0x40020400
 8002ca4:	20000e3c 	.word	0x20000e3c

08002ca8 <trapezoidalTraj>:

calculationTraj trapezoidalTraj(float qi, float qf) {
 8002ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cac:	b096      	sub	sp, #88	; 0x58
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	ed87 0a02 	vstr	s0, [r7, #8]
 8002cb6:	edc7 0a01 	vstr	s1, [r7, #4]
	calculationTraj result;

	float diffPos = abs(qf - qi);
 8002cba:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cca:	ee17 3a90 	vmov	r3, s15
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bfb8      	it	lt
 8002cd2:	425b      	neglt	r3, r3
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cdc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	int8_t handleMinus = (qf - qi) / diffPos;
 8002ce0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ce4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ce8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002cec:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cf8:	edc7 7a00 	vstr	s15, [r7]
 8002cfc:	783b      	ldrb	r3, [r7, #0]
 8002cfe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	float timeTrapSeg1 = qdm / qddm;
 8002d02:	4bb3      	ldr	r3, [pc, #716]	; (8002fd0 <trapezoidalTraj+0x328>)
 8002d04:	edd3 6a00 	vldr	s13, [r3]
 8002d08:	4bb2      	ldr	r3, [pc, #712]	; (8002fd4 <trapezoidalTraj+0x32c>)
 8002d0a:	ed93 7a00 	vldr	s14, [r3]
 8002d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d12:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float timeTriSeg1 = pow((diffPos / qddm), 0.5);
 8002d16:	4baf      	ldr	r3, [pc, #700]	; (8002fd4 <trapezoidalTraj+0x32c>)
 8002d18:	edd3 7a00 	vldr	s15, [r3]
 8002d1c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002d20:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d24:	ee16 0a90 	vmov	r0, s13
 8002d28:	f7fd fbba 	bl	80004a0 <__aeabi_f2d>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	ed9f 1ba5 	vldr	d1, [pc, #660]	; 8002fc8 <trapezoidalTraj+0x320>
 8002d34:	ec43 2b10 	vmov	d0, r2, r3
 8002d38:	f009 fcee 	bl	800c718 <pow>
 8002d3c:	ec53 2b10 	vmov	r2, r3, d0
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	f7fd fedc 	bl	8000b00 <__aeabi_d2f>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	64bb      	str	r3, [r7, #72]	; 0x48

	if (timeTriSeg1 < timeTrapSeg1) // triangle shape
 8002d4c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002d50:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002d54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5c:	f140 8140 	bpl.w	8002fe0 <trapezoidalTraj+0x338>
			{
		float qTriSeg1 = 0.5 * qddm * timeTriSeg1 * timeTriSeg1;
 8002d60:	4b9c      	ldr	r3, [pc, #624]	; (8002fd4 <trapezoidalTraj+0x32c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fb9b 	bl	80004a0 <__aeabi_f2d>
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	4b9a      	ldr	r3, [pc, #616]	; (8002fd8 <trapezoidalTraj+0x330>)
 8002d70:	f7fd fbee 	bl	8000550 <__aeabi_dmul>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4614      	mov	r4, r2
 8002d7a:	461d      	mov	r5, r3
 8002d7c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002d7e:	f7fd fb8f 	bl	80004a0 <__aeabi_f2d>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4620      	mov	r0, r4
 8002d88:	4629      	mov	r1, r5
 8002d8a:	f7fd fbe1 	bl	8000550 <__aeabi_dmul>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4614      	mov	r4, r2
 8002d94:	461d      	mov	r5, r3
 8002d96:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002d98:	f7fd fb82 	bl	80004a0 <__aeabi_f2d>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4620      	mov	r0, r4
 8002da2:	4629      	mov	r1, r5
 8002da4:	f7fd fbd4 	bl	8000550 <__aeabi_dmul>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4610      	mov	r0, r2
 8002dae:	4619      	mov	r1, r3
 8002db0:	f7fd fea6 	bl	8000b00 <__aeabi_d2f>
 8002db4:	4603      	mov	r3, r0
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
		float qdTriSeg1 = qddm * timeTriSeg1;
 8002db8:	4b86      	ldr	r3, [pc, #536]	; (8002fd4 <trapezoidalTraj+0x32c>)
 8002dba:	edd3 7a00 	vldr	s15, [r3]
 8002dbe:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		if (actualTime <= timeTriSeg1) {
 8002dca:	4b84      	ldr	r3, [pc, #528]	; (8002fdc <trapezoidalTraj+0x334>)
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002dd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ddc:	db57      	blt.n	8002e8e <trapezoidalTraj+0x1e6>
			result.posTraj = qi
					+ (0.5 * qddm * actualTime * actualTime) * handleMinus;
 8002dde:	68b8      	ldr	r0, [r7, #8]
 8002de0:	f7fd fb5e 	bl	80004a0 <__aeabi_f2d>
 8002de4:	4604      	mov	r4, r0
 8002de6:	460d      	mov	r5, r1
 8002de8:	4b7a      	ldr	r3, [pc, #488]	; (8002fd4 <trapezoidalTraj+0x32c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd fb57 	bl	80004a0 <__aeabi_f2d>
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	4b78      	ldr	r3, [pc, #480]	; (8002fd8 <trapezoidalTraj+0x330>)
 8002df8:	f7fd fbaa 	bl	8000550 <__aeabi_dmul>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4690      	mov	r8, r2
 8002e02:	4699      	mov	r9, r3
 8002e04:	4b75      	ldr	r3, [pc, #468]	; (8002fdc <trapezoidalTraj+0x334>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fb49 	bl	80004a0 <__aeabi_f2d>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4640      	mov	r0, r8
 8002e14:	4649      	mov	r1, r9
 8002e16:	f7fd fb9b 	bl	8000550 <__aeabi_dmul>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4699      	mov	r9, r3
 8002e22:	4b6e      	ldr	r3, [pc, #440]	; (8002fdc <trapezoidalTraj+0x334>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fb3a 	bl	80004a0 <__aeabi_f2d>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4640      	mov	r0, r8
 8002e32:	4649      	mov	r1, r9
 8002e34:	f7fd fb8c 	bl	8000550 <__aeabi_dmul>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4690      	mov	r8, r2
 8002e3e:	4699      	mov	r9, r3
 8002e40:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd fb19 	bl	800047c <__aeabi_i2d>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4640      	mov	r0, r8
 8002e50:	4649      	mov	r1, r9
 8002e52:	f7fd fb7d 	bl	8000550 <__aeabi_dmul>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	f7fd f9c1 	bl	80001e4 <__adddf3>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f7fd fe49 	bl	8000b00 <__aeabi_d2f>
 8002e6e:	4603      	mov	r3, r0
			result.posTraj = qi
 8002e70:	617b      	str	r3, [r7, #20]
			result.velTraj = qddm * actualTime;
 8002e72:	4b58      	ldr	r3, [pc, #352]	; (8002fd4 <trapezoidalTraj+0x32c>)
 8002e74:	ed93 7a00 	vldr	s14, [r3]
 8002e78:	4b58      	ldr	r3, [pc, #352]	; (8002fdc <trapezoidalTraj+0x334>)
 8002e7a:	edd3 7a00 	vldr	s15, [r3]
 8002e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e82:	edc7 7a06 	vstr	s15, [r7, #24]
			result.accTraj = qddm;
 8002e86:	4b53      	ldr	r3, [pc, #332]	; (8002fd4 <trapezoidalTraj+0x32c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	61fb      	str	r3, [r7, #28]
 8002e8c:	e282      	b.n	8003394 <trapezoidalTraj+0x6ec>
		}

		else if (actualTime > timeTriSeg1 && actualTime <= (timeTriSeg1 * 2)) {
 8002e8e:	4b53      	ldr	r3, [pc, #332]	; (8002fdc <trapezoidalTraj+0x334>)
 8002e90:	edd3 7a00 	vldr	s15, [r3]
 8002e94:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002e98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea0:	f140 8086 	bpl.w	8002fb0 <trapezoidalTraj+0x308>
 8002ea4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002ea8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002eac:	4b4b      	ldr	r3, [pc, #300]	; (8002fdc <trapezoidalTraj+0x334>)
 8002eae:	edd3 7a00 	vldr	s15, [r3]
 8002eb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eba:	db79      	blt.n	8002fb0 <trapezoidalTraj+0x308>
			float actualTimeSeg2 = actualTime - timeTriSeg1;
 8002ebc:	4b47      	ldr	r3, [pc, #284]	; (8002fdc <trapezoidalTraj+0x334>)
 8002ebe:	ed93 7a00 	vldr	s14, [r3]
 8002ec2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			result.posTraj = qi
					+ (qTriSeg1 + (qdTriSeg1 * actualTimeSeg2)
 8002ece:	68b8      	ldr	r0, [r7, #8]
 8002ed0:	f7fd fae6 	bl	80004a0 <__aeabi_f2d>
 8002ed4:	4604      	mov	r4, r0
 8002ed6:	460d      	mov	r5, r1
 8002ed8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002edc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ee4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eec:	ee17 0a90 	vmov	r0, s15
 8002ef0:	f7fd fad6 	bl	80004a0 <__aeabi_f2d>
 8002ef4:	4680      	mov	r8, r0
 8002ef6:	4689      	mov	r9, r1
							- (0.5 * qddm * actualTimeSeg2 * actualTimeSeg2))
 8002ef8:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <trapezoidalTraj+0x32c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd facf 	bl	80004a0 <__aeabi_f2d>
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	4b34      	ldr	r3, [pc, #208]	; (8002fd8 <trapezoidalTraj+0x330>)
 8002f08:	f7fd fb22 	bl	8000550 <__aeabi_dmul>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4692      	mov	sl, r2
 8002f12:	469b      	mov	fp, r3
 8002f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f16:	f7fd fac3 	bl	80004a0 <__aeabi_f2d>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4650      	mov	r0, sl
 8002f20:	4659      	mov	r1, fp
 8002f22:	f7fd fb15 	bl	8000550 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4692      	mov	sl, r2
 8002f2c:	469b      	mov	fp, r3
 8002f2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f30:	f7fd fab6 	bl	80004a0 <__aeabi_f2d>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4650      	mov	r0, sl
 8002f3a:	4659      	mov	r1, fp
 8002f3c:	f7fd fb08 	bl	8000550 <__aeabi_dmul>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4640      	mov	r0, r8
 8002f46:	4649      	mov	r1, r9
 8002f48:	f7fd f94a 	bl	80001e0 <__aeabi_dsub>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4690      	mov	r8, r2
 8002f52:	4699      	mov	r9, r3
							* handleMinus;
 8002f54:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd fa8f 	bl	800047c <__aeabi_i2d>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4640      	mov	r0, r8
 8002f64:	4649      	mov	r1, r9
 8002f66:	f7fd faf3 	bl	8000550 <__aeabi_dmul>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
					+ (qTriSeg1 + (qdTriSeg1 * actualTimeSeg2)
 8002f6e:	4620      	mov	r0, r4
 8002f70:	4629      	mov	r1, r5
 8002f72:	f7fd f937 	bl	80001e4 <__adddf3>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f7fd fdbf 	bl	8000b00 <__aeabi_d2f>
 8002f82:	4603      	mov	r3, r0
			result.posTraj = qi
 8002f84:	617b      	str	r3, [r7, #20]
			result.velTraj = qdTriSeg1 - (qddm * actualTimeSeg2);
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <trapezoidalTraj+0x32c>)
 8002f88:	ed93 7a00 	vldr	s14, [r3]
 8002f8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f94:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f9c:	edc7 7a06 	vstr	s15, [r7, #24]
			result.accTraj = -qddm;
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <trapezoidalTraj+0x32c>)
 8002fa2:	edd3 7a00 	vldr	s15, [r3]
 8002fa6:	eef1 7a67 	vneg.f32	s15, s15
 8002faa:	edc7 7a07 	vstr	s15, [r7, #28]
		else if (actualTime > timeTriSeg1 && actualTime <= (timeTriSeg1 * 2)) {
 8002fae:	e1f1      	b.n	8003394 <trapezoidalTraj+0x6ec>
		}

		else {
			result.posTraj = qf;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	617b      	str	r3, [r7, #20]
			result.velTraj = 0;
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
			result.accTraj = 0;
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	61fb      	str	r3, [r7, #28]
 8002fc0:	e1e8      	b.n	8003394 <trapezoidalTraj+0x6ec>
 8002fc2:	bf00      	nop
 8002fc4:	f3af 8000 	nop.w
 8002fc8:	00000000 	.word	0x00000000
 8002fcc:	3fe00000 	.word	0x3fe00000
 8002fd0:	2000025c 	.word	0x2000025c
 8002fd4:	20000258 	.word	0x20000258
 8002fd8:	3fe00000 	.word	0x3fe00000
 8002fdc:	20000260 	.word	0x20000260
	}

	else // trapezoidal shape
	{
		float timeTrapSeg2 = (diffPos
				- (2 * 0.5 * qddm * (timeTrapSeg1) * (timeTrapSeg1))) / qdm;
 8002fe0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002fe2:	f7fd fa5d 	bl	80004a0 <__aeabi_f2d>
 8002fe6:	4604      	mov	r4, r0
 8002fe8:	460d      	mov	r5, r1
 8002fea:	4b90      	ldr	r3, [pc, #576]	; (800322c <trapezoidalTraj+0x584>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd fa56 	bl	80004a0 <__aeabi_f2d>
 8002ff4:	4680      	mov	r8, r0
 8002ff6:	4689      	mov	r9, r1
 8002ff8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002ffa:	f7fd fa51 	bl	80004a0 <__aeabi_f2d>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4640      	mov	r0, r8
 8003004:	4649      	mov	r1, r9
 8003006:	f7fd faa3 	bl	8000550 <__aeabi_dmul>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4690      	mov	r8, r2
 8003010:	4699      	mov	r9, r3
 8003012:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003014:	f7fd fa44 	bl	80004a0 <__aeabi_f2d>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4640      	mov	r0, r8
 800301e:	4649      	mov	r1, r9
 8003020:	f7fd fa96 	bl	8000550 <__aeabi_dmul>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4620      	mov	r0, r4
 800302a:	4629      	mov	r1, r5
 800302c:	f7fd f8d8 	bl	80001e0 <__aeabi_dsub>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4614      	mov	r4, r2
 8003036:	461d      	mov	r5, r3
 8003038:	4b7d      	ldr	r3, [pc, #500]	; (8003230 <trapezoidalTraj+0x588>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7fd fa2f 	bl	80004a0 <__aeabi_f2d>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4620      	mov	r0, r4
 8003048:	4629      	mov	r1, r5
 800304a:	f7fd fbab 	bl	80007a4 <__aeabi_ddiv>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
		float timeTrapSeg2 = (diffPos
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	f7fd fd53 	bl	8000b00 <__aeabi_d2f>
 800305a:	4603      	mov	r3, r0
 800305c:	647b      	str	r3, [r7, #68]	; 0x44
		float timeTrapSeg3 = qdm / qddm;
 800305e:	4b74      	ldr	r3, [pc, #464]	; (8003230 <trapezoidalTraj+0x588>)
 8003060:	edd3 6a00 	vldr	s13, [r3]
 8003064:	4b71      	ldr	r3, [pc, #452]	; (800322c <trapezoidalTraj+0x584>)
 8003066:	ed93 7a00 	vldr	s14, [r3]
 800306a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800306e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		float qTrapSeg1 = 0.5 * qddm * (timeTrapSeg1) * (timeTrapSeg1);
 8003072:	4b6e      	ldr	r3, [pc, #440]	; (800322c <trapezoidalTraj+0x584>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fa12 	bl	80004a0 <__aeabi_f2d>
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	4b6c      	ldr	r3, [pc, #432]	; (8003234 <trapezoidalTraj+0x58c>)
 8003082:	f7fd fa65 	bl	8000550 <__aeabi_dmul>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4614      	mov	r4, r2
 800308c:	461d      	mov	r5, r3
 800308e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003090:	f7fd fa06 	bl	80004a0 <__aeabi_f2d>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4620      	mov	r0, r4
 800309a:	4629      	mov	r1, r5
 800309c:	f7fd fa58 	bl	8000550 <__aeabi_dmul>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4614      	mov	r4, r2
 80030a6:	461d      	mov	r5, r3
 80030a8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80030aa:	f7fd f9f9 	bl	80004a0 <__aeabi_f2d>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4620      	mov	r0, r4
 80030b4:	4629      	mov	r1, r5
 80030b6:	f7fd fa4b 	bl	8000550 <__aeabi_dmul>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4610      	mov	r0, r2
 80030c0:	4619      	mov	r1, r3
 80030c2:	f7fd fd1d 	bl	8000b00 <__aeabi_d2f>
 80030c6:	4603      	mov	r3, r0
 80030c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		float qTrapSeg2 = qTrapSeg1 + (qdm * timeTrapSeg2);
 80030ca:	4b59      	ldr	r3, [pc, #356]	; (8003230 <trapezoidalTraj+0x588>)
 80030cc:	ed93 7a00 	vldr	s14, [r3]
 80030d0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80030d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80030dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		if (actualTime <= timeTrapSeg1) {
 80030e4:	4b54      	ldr	r3, [pc, #336]	; (8003238 <trapezoidalTraj+0x590>)
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80030ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f6:	db57      	blt.n	80031a8 <trapezoidalTraj+0x500>
			result.posTraj = qi
					+ (0.5 * qddm * actualTime * actualTime) * handleMinus;
 80030f8:	68b8      	ldr	r0, [r7, #8]
 80030fa:	f7fd f9d1 	bl	80004a0 <__aeabi_f2d>
 80030fe:	4604      	mov	r4, r0
 8003100:	460d      	mov	r5, r1
 8003102:	4b4a      	ldr	r3, [pc, #296]	; (800322c <trapezoidalTraj+0x584>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd f9ca 	bl	80004a0 <__aeabi_f2d>
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	4b48      	ldr	r3, [pc, #288]	; (8003234 <trapezoidalTraj+0x58c>)
 8003112:	f7fd fa1d 	bl	8000550 <__aeabi_dmul>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4690      	mov	r8, r2
 800311c:	4699      	mov	r9, r3
 800311e:	4b46      	ldr	r3, [pc, #280]	; (8003238 <trapezoidalTraj+0x590>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd f9bc 	bl	80004a0 <__aeabi_f2d>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4640      	mov	r0, r8
 800312e:	4649      	mov	r1, r9
 8003130:	f7fd fa0e 	bl	8000550 <__aeabi_dmul>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4690      	mov	r8, r2
 800313a:	4699      	mov	r9, r3
 800313c:	4b3e      	ldr	r3, [pc, #248]	; (8003238 <trapezoidalTraj+0x590>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd f9ad 	bl	80004a0 <__aeabi_f2d>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4640      	mov	r0, r8
 800314c:	4649      	mov	r1, r9
 800314e:	f7fd f9ff 	bl	8000550 <__aeabi_dmul>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4690      	mov	r8, r2
 8003158:	4699      	mov	r9, r3
 800315a:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd f98c 	bl	800047c <__aeabi_i2d>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4640      	mov	r0, r8
 800316a:	4649      	mov	r1, r9
 800316c:	f7fd f9f0 	bl	8000550 <__aeabi_dmul>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4620      	mov	r0, r4
 8003176:	4629      	mov	r1, r5
 8003178:	f7fd f834 	bl	80001e4 <__adddf3>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	f7fd fcbc 	bl	8000b00 <__aeabi_d2f>
 8003188:	4603      	mov	r3, r0
			result.posTraj = qi
 800318a:	617b      	str	r3, [r7, #20]
			result.velTraj = qddm * actualTime;
 800318c:	4b27      	ldr	r3, [pc, #156]	; (800322c <trapezoidalTraj+0x584>)
 800318e:	ed93 7a00 	vldr	s14, [r3]
 8003192:	4b29      	ldr	r3, [pc, #164]	; (8003238 <trapezoidalTraj+0x590>)
 8003194:	edd3 7a00 	vldr	s15, [r3]
 8003198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319c:	edc7 7a06 	vstr	s15, [r7, #24]
			result.accTraj = qddm;
 80031a0:	4b22      	ldr	r3, [pc, #136]	; (800322c <trapezoidalTraj+0x584>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e0f5      	b.n	8003394 <trapezoidalTraj+0x6ec>
		} else if (actualTime > timeTrapSeg1
 80031a8:	4b23      	ldr	r3, [pc, #140]	; (8003238 <trapezoidalTraj+0x590>)
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80031b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	d53f      	bpl.n	800323c <trapezoidalTraj+0x594>
				&& actualTime <= timeTrapSeg2 + timeTrapSeg1) {
 80031bc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80031c0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80031c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031c8:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <trapezoidalTraj+0x590>)
 80031ca:	edd3 7a00 	vldr	s15, [r3]
 80031ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d6:	db31      	blt.n	800323c <trapezoidalTraj+0x594>
			float t2 = actualTime - timeTrapSeg1;
 80031d8:	4b17      	ldr	r3, [pc, #92]	; (8003238 <trapezoidalTraj+0x590>)
 80031da:	ed93 7a00 	vldr	s14, [r3]
 80031de:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80031e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			result.posTraj = qi + (qTrapSeg1 + qdm * (t2)) * handleMinus;
 80031ea:	4b11      	ldr	r3, [pc, #68]	; (8003230 <trapezoidalTraj+0x588>)
 80031ec:	ed93 7a00 	vldr	s14, [r3]
 80031f0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80031f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031f8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80031fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003200:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8003204:	ee07 3a90 	vmov	s15, r3
 8003208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800320c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003210:	edd7 7a02 	vldr	s15, [r7, #8]
 8003214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003218:	edc7 7a05 	vstr	s15, [r7, #20]
			result.velTraj = qdm;
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <trapezoidalTraj+0x588>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	61bb      	str	r3, [r7, #24]
			result.accTraj = 0;
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	61fb      	str	r3, [r7, #28]
				&& actualTime <= timeTrapSeg2 + timeTrapSeg1) {
 8003228:	e0b4      	b.n	8003394 <trapezoidalTraj+0x6ec>
 800322a:	bf00      	nop
 800322c:	20000258 	.word	0x20000258
 8003230:	2000025c 	.word	0x2000025c
 8003234:	3fe00000 	.word	0x3fe00000
 8003238:	20000260 	.word	0x20000260
		} else if (actualTime > timeTrapSeg2 + timeTrapSeg1
 800323c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003240:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003244:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003248:	4b8d      	ldr	r3, [pc, #564]	; (8003480 <trapezoidalTraj+0x7d8>)
 800324a:	edd3 7a00 	vldr	s15, [r3]
 800324e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003256:	f140 8095 	bpl.w	8003384 <trapezoidalTraj+0x6dc>
				&& actualTime <= timeTrapSeg3 + timeTrapSeg2 + timeTrapSeg1) {
 800325a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800325e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003262:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003266:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800326a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800326e:	4b84      	ldr	r3, [pc, #528]	; (8003480 <trapezoidalTraj+0x7d8>)
 8003270:	edd3 7a00 	vldr	s15, [r3]
 8003274:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327c:	f2c0 8082 	blt.w	8003384 <trapezoidalTraj+0x6dc>
			float t3 = actualTime - timeTrapSeg2 - timeTrapSeg1;
 8003280:	4b7f      	ldr	r3, [pc, #508]	; (8003480 <trapezoidalTraj+0x7d8>)
 8003282:	ed93 7a00 	vldr	s14, [r3]
 8003286:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800328a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800328e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003296:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			result.posTraj = qi
					+ (qTrapSeg2 + (qdm * t3) - 0.5 * qddm * t3 * t3)
 800329a:	68b8      	ldr	r0, [r7, #8]
 800329c:	f7fd f900 	bl	80004a0 <__aeabi_f2d>
 80032a0:	4604      	mov	r4, r0
 80032a2:	460d      	mov	r5, r1
 80032a4:	4b77      	ldr	r3, [pc, #476]	; (8003484 <trapezoidalTraj+0x7dc>)
 80032a6:	ed93 7a00 	vldr	s14, [r3]
 80032aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80032ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032b2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80032b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ba:	ee17 0a90 	vmov	r0, s15
 80032be:	f7fd f8ef 	bl	80004a0 <__aeabi_f2d>
 80032c2:	4680      	mov	r8, r0
 80032c4:	4689      	mov	r9, r1
 80032c6:	4b70      	ldr	r3, [pc, #448]	; (8003488 <trapezoidalTraj+0x7e0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fd f8e8 	bl	80004a0 <__aeabi_f2d>
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	4b6d      	ldr	r3, [pc, #436]	; (800348c <trapezoidalTraj+0x7e4>)
 80032d6:	f7fd f93b 	bl	8000550 <__aeabi_dmul>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4692      	mov	sl, r2
 80032e0:	469b      	mov	fp, r3
 80032e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032e4:	f7fd f8dc 	bl	80004a0 <__aeabi_f2d>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4650      	mov	r0, sl
 80032ee:	4659      	mov	r1, fp
 80032f0:	f7fd f92e 	bl	8000550 <__aeabi_dmul>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4692      	mov	sl, r2
 80032fa:	469b      	mov	fp, r3
 80032fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032fe:	f7fd f8cf 	bl	80004a0 <__aeabi_f2d>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4650      	mov	r0, sl
 8003308:	4659      	mov	r1, fp
 800330a:	f7fd f921 	bl	8000550 <__aeabi_dmul>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4640      	mov	r0, r8
 8003314:	4649      	mov	r1, r9
 8003316:	f7fc ff63 	bl	80001e0 <__aeabi_dsub>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4690      	mov	r8, r2
 8003320:	4699      	mov	r9, r3
							* handleMinus;
 8003322:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd f8a8 	bl	800047c <__aeabi_i2d>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4640      	mov	r0, r8
 8003332:	4649      	mov	r1, r9
 8003334:	f7fd f90c 	bl	8000550 <__aeabi_dmul>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
					+ (qTrapSeg2 + (qdm * t3) - 0.5 * qddm * t3 * t3)
 800333c:	4620      	mov	r0, r4
 800333e:	4629      	mov	r1, r5
 8003340:	f7fc ff50 	bl	80001e4 <__adddf3>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	f7fd fbd8 	bl	8000b00 <__aeabi_d2f>
 8003350:	4603      	mov	r3, r0
			result.posTraj = qi
 8003352:	617b      	str	r3, [r7, #20]
			result.velTraj = -qddm * t3 + qdm;
 8003354:	4b4c      	ldr	r3, [pc, #304]	; (8003488 <trapezoidalTraj+0x7e0>)
 8003356:	edd3 7a00 	vldr	s15, [r3]
 800335a:	eeb1 7a67 	vneg.f32	s14, s15
 800335e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003362:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003366:	4b47      	ldr	r3, [pc, #284]	; (8003484 <trapezoidalTraj+0x7dc>)
 8003368:	edd3 7a00 	vldr	s15, [r3]
 800336c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003370:	edc7 7a06 	vstr	s15, [r7, #24]
			result.accTraj = -qddm;
 8003374:	4b44      	ldr	r3, [pc, #272]	; (8003488 <trapezoidalTraj+0x7e0>)
 8003376:	edd3 7a00 	vldr	s15, [r3]
 800337a:	eef1 7a67 	vneg.f32	s15, s15
 800337e:	edc7 7a07 	vstr	s15, [r7, #28]
				&& actualTime <= timeTrapSeg3 + timeTrapSeg2 + timeTrapSeg1) {
 8003382:	e007      	b.n	8003394 <trapezoidalTraj+0x6ec>
		} else {
			result.posTraj = qf;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	617b      	str	r3, [r7, #20]
			result.velTraj = 0;
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
			result.accTraj = 0;
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	61fb      	str	r3, [r7, #28]

		}

	}

	checkPos = result.posTraj;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	4a3e      	ldr	r2, [pc, #248]	; (8003490 <trapezoidalTraj+0x7e8>)
 8003398:	6013      	str	r3, [r2, #0]
	checkVel = result.velTraj;
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	4a3d      	ldr	r2, [pc, #244]	; (8003494 <trapezoidalTraj+0x7ec>)
 800339e:	6013      	str	r3, [r2, #0]
	checkAcc = result.accTraj;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	4a3d      	ldr	r2, [pc, #244]	; (8003498 <trapezoidalTraj+0x7f0>)
 80033a4:	6013      	str	r3, [r2, #0]

	actualTime += 0.001;
 80033a6:	4b36      	ldr	r3, [pc, #216]	; (8003480 <trapezoidalTraj+0x7d8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd f878 	bl	80004a0 <__aeabi_f2d>
 80033b0:	a331      	add	r3, pc, #196	; (adr r3, 8003478 <trapezoidalTraj+0x7d0>)
 80033b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b6:	f7fc ff15 	bl	80001e4 <__adddf3>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	f7fd fb9d 	bl	8000b00 <__aeabi_d2f>
 80033c6:	4603      	mov	r3, r0
 80033c8:	4a2d      	ldr	r2, [pc, #180]	; (8003480 <trapezoidalTraj+0x7d8>)
 80033ca:	6013      	str	r3, [r2, #0]

	// CHECK STATUS

	if (startPointModeY) 		// POINT MODE
 80033cc:	4b33      	ldr	r3, [pc, #204]	; (800349c <trapezoidalTraj+0x7f4>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d021      	beq.n	8003418 <trapezoidalTraj+0x770>

	{

		if (result.posTraj == qf) {
 80033d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80033d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80033dc:	eeb4 7a67 	vcmp.f32	s14, s15
 80033e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e4:	d115      	bne.n	8003412 <trapezoidalTraj+0x76a>
			result.reachTraj = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 3020 	strb.w	r3, [r7, #32]
			actualTime = 0.001;
 80033ec:	4b24      	ldr	r3, [pc, #144]	; (8003480 <trapezoidalTraj+0x7d8>)
 80033ee:	4a2c      	ldr	r2, [pc, #176]	; (80034a0 <trapezoidalTraj+0x7f8>)
 80033f0:	601a      	str	r2, [r3, #0]
			startPointModeY = 0;
 80033f2:	4b2a      	ldr	r3, [pc, #168]	; (800349c <trapezoidalTraj+0x7f4>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
			initPosY = mmActPos;
 80033f8:	4b2a      	ldr	r3, [pc, #168]	; (80034a4 <trapezoidalTraj+0x7fc>)
 80033fa:	edd3 7a00 	vldr	s15, [r3]
 80033fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003402:	ee17 2a90 	vmov	r2, s15
 8003406:	4b28      	ldr	r3, [pc, #160]	; (80034a8 <trapezoidalTraj+0x800>)
 8003408:	601a      	str	r2, [r3, #0]
			registerFrame[16].U16 = 0; // RESET : y-axis Moving Status
 800340a:	4b28      	ldr	r3, [pc, #160]	; (80034ac <trapezoidalTraj+0x804>)
 800340c:	2200      	movs	r2, #0
 800340e:	841a      	strh	r2, [r3, #32]
 8003410:	e002      	b.n	8003418 <trapezoidalTraj+0x770>
		} else {
			result.reachTraj = 0;
 8003412:	2300      	movs	r3, #0
 8003414:	f887 3020 	strb.w	r3, [r7, #32]
		}
	}

	if (startRunTray) {
 8003418:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <trapezoidalTraj+0x808>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01e      	beq.n	800345e <trapezoidalTraj+0x7b6>
		// RUN TRAY MODE

		if (result.posTraj == qf) {
 8003420:	edd7 7a05 	vldr	s15, [r7, #20]
 8003424:	ed97 7a01 	vldr	s14, [r7, #4]
 8003428:	eeb4 7a67 	vcmp.f32	s14, s15
 800342c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003430:	d112      	bne.n	8003458 <trapezoidalTraj+0x7b0>
			result.reachTraj = 1;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 3020 	strb.w	r3, [r7, #32]
			actualTime = 0.001;
 8003438:	4b11      	ldr	r3, [pc, #68]	; (8003480 <trapezoidalTraj+0x7d8>)
 800343a:	4a19      	ldr	r2, [pc, #100]	; (80034a0 <trapezoidalTraj+0x7f8>)
 800343c:	601a      	str	r2, [r3, #0]
			initPosY = mmActPos;
 800343e:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <trapezoidalTraj+0x7fc>)
 8003440:	edd3 7a00 	vldr	s15, [r3]
 8003444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003448:	ee17 2a90 	vmov	r2, s15
 800344c:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <trapezoidalTraj+0x800>)
 800344e:	601a      	str	r2, [r3, #0]
			registerFrame[16].U16 = 0; // RESET : y-axis Moving Status // ---------
 8003450:	4b16      	ldr	r3, [pc, #88]	; (80034ac <trapezoidalTraj+0x804>)
 8003452:	2200      	movs	r2, #0
 8003454:	841a      	strh	r2, [r3, #32]
 8003456:	e002      	b.n	800345e <trapezoidalTraj+0x7b6>
		}

		else {
			result.reachTraj = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	f887 3020 	strb.w	r3, [r7, #32]
		}
	}

	return result;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	461c      	mov	r4, r3
 8003462:	f107 0314 	add.w	r3, r7, #20
 8003466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	3758      	adds	r7, #88	; 0x58
 8003470:	46bd      	mov	sp, r7
 8003472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003476:	bf00      	nop
 8003478:	d2f1a9fc 	.word	0xd2f1a9fc
 800347c:	3f50624d 	.word	0x3f50624d
 8003480:	20000260 	.word	0x20000260
 8003484:	2000025c 	.word	0x2000025c
 8003488:	20000258 	.word	0x20000258
 800348c:	3fe00000 	.word	0x3fe00000
 8003490:	20000f00 	.word	0x20000f00
 8003494:	20000f04 	.word	0x20000f04
 8003498:	20000f08 	.word	0x20000f08
 800349c:	20000f0d 	.word	0x20000f0d
 80034a0:	3a83126f 	.word	0x3a83126f
 80034a4:	20000e1c 	.word	0x20000e1c
 80034a8:	20000f10 	.word	0x20000f10
 80034ac:	20000d48 	.word	0x20000d48
 80034b0:	20000f1f 	.word	0x20000f1f
 80034b4:	00000000 	.word	0x00000000

080034b8 <calibrateTray>:

void calibrateTray(trayPos trayX, trayPos trayY, Point *objPos) {
 80034b8:	b082      	sub	sp, #8
 80034ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034bc:	b097      	sub	sp, #92	; 0x5c
 80034be:	af00      	add	r7, sp, #0
 80034c0:	1d3c      	adds	r4, r7, #4
 80034c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80034c6:	677b      	str	r3, [r7, #116]	; 0x74
	float length1 = pow(
			pow(trayX.pos1 - trayX.pos2, 2) + pow(trayY.pos1 - trayY.pos2, 2),
 80034c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034cc:	461a      	mov	r2, r3
 80034ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fc ffd1 	bl	800047c <__aeabi_i2d>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	ed9f 1ba6 	vldr	d1, [pc, #664]	; 8003778 <calibrateTray+0x2c0>
 80034e2:	ec43 2b10 	vmov	d0, r2, r3
 80034e6:	f009 f917 	bl	800c718 <pow>
 80034ea:	ec55 4b10 	vmov	r4, r5, d0
 80034ee:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80034f2:	461a      	mov	r2, r3
 80034f4:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fc ffbe 	bl	800047c <__aeabi_i2d>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	ed9f 1b9c 	vldr	d1, [pc, #624]	; 8003778 <calibrateTray+0x2c0>
 8003508:	ec43 2b10 	vmov	d0, r2, r3
 800350c:	f009 f904 	bl	800c718 <pow>
 8003510:	ec53 2b10 	vmov	r2, r3, d0
	float length1 = pow(
 8003514:	4620      	mov	r0, r4
 8003516:	4629      	mov	r1, r5
 8003518:	f7fc fe64 	bl	80001e4 <__adddf3>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	ec43 2b17 	vmov	d7, r2, r3
 8003524:	ed9f 1b96 	vldr	d1, [pc, #600]	; 8003780 <calibrateTray+0x2c8>
 8003528:	eeb0 0a47 	vmov.f32	s0, s14
 800352c:	eef0 0a67 	vmov.f32	s1, s15
 8003530:	f009 f8f2 	bl	800c718 <pow>
 8003534:	ec53 2b10 	vmov	r2, r3, d0
 8003538:	4610      	mov	r0, r2
 800353a:	4619      	mov	r1, r3
 800353c:	f7fd fae0 	bl	8000b00 <__aeabi_d2f>
 8003540:	4603      	mov	r3, r0
 8003542:	63fb      	str	r3, [r7, #60]	; 0x3c
			0.5);
	float length2 = pow(
			pow(trayX.pos2 - trayX.pos3, 2) + pow(trayY.pos2 - trayY.pos3, 2),
 8003544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003548:	461a      	mov	r2, r3
 800354a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	4618      	mov	r0, r3
 8003552:	f7fc ff93 	bl	800047c <__aeabi_i2d>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	ed9f 1b87 	vldr	d1, [pc, #540]	; 8003778 <calibrateTray+0x2c0>
 800355e:	ec43 2b10 	vmov	d0, r2, r3
 8003562:	f009 f8d9 	bl	800c718 <pow>
 8003566:	ec55 4b10 	vmov	r4, r5, d0
 800356a:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800356e:	461a      	mov	r2, r3
 8003570:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	4618      	mov	r0, r3
 8003578:	f7fc ff80 	bl	800047c <__aeabi_i2d>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8003778 <calibrateTray+0x2c0>
 8003584:	ec43 2b10 	vmov	d0, r2, r3
 8003588:	f009 f8c6 	bl	800c718 <pow>
 800358c:	ec53 2b10 	vmov	r2, r3, d0
	float length2 = pow(
 8003590:	4620      	mov	r0, r4
 8003592:	4629      	mov	r1, r5
 8003594:	f7fc fe26 	bl	80001e4 <__adddf3>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	ec43 2b17 	vmov	d7, r2, r3
 80035a0:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8003780 <calibrateTray+0x2c8>
 80035a4:	eeb0 0a47 	vmov.f32	s0, s14
 80035a8:	eef0 0a67 	vmov.f32	s1, s15
 80035ac:	f009 f8b4 	bl	800c718 <pow>
 80035b0:	ec53 2b10 	vmov	r2, r3, d0
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	f7fd faa2 	bl	8000b00 <__aeabi_d2f>
 80035bc:	4603      	mov	r3, r0
 80035be:	63bb      	str	r3, [r7, #56]	; 0x38
			0.5);
	uint8_t k = 50;
 80035c0:	2332      	movs	r3, #50	; 0x32
 80035c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (length1 > length2) {
 80035c6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80035ca:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80035ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d6:	dd02      	ble.n	80035de <calibrateTray+0x126>
		k = 60;
 80035d8:	233c      	movs	r3, #60	; 0x3c
 80035da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}

	float length3 = trayY.pos1 - trayY.pos2;
 80035de:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80035e2:	461a      	mov	r2, r3
 80035e4:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035f2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float radians;
	if ((length3 / k) >= 1) {
 80035f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003602:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8003606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800360a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800360e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003616:	db03      	blt.n	8003620 <calibrateTray+0x168>
		radians = 0;
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	653b      	str	r3, [r7, #80]	; 0x50
 800361e:	e01b      	b.n	8003658 <calibrateTray+0x1a0>
	} else {
		radians = acos(length3 / k);
 8003620:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003624:	ee07 3a90 	vmov	s15, r3
 8003628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800362c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003630:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003634:	ee16 0a90 	vmov	r0, s13
 8003638:	f7fc ff32 	bl	80004a0 <__aeabi_f2d>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	ec43 2b10 	vmov	d0, r2, r3
 8003644:	f009 f834 	bl	800c6b0 <acos>
 8003648:	ec53 2b10 	vmov	r2, r3, d0
 800364c:	4610      	mov	r0, r2
 800364e:	4619      	mov	r1, r3
 8003650:	f7fd fa56 	bl	8000b00 <__aeabi_d2f>
 8003654:	4603      	mov	r3, r0
 8003656:	653b      	str	r3, [r7, #80]	; 0x50
	}

	float TrayOriginX = trayX.pos2;
 8003658:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003664:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float TrayOriginY = trayY.pos2;
 8003668:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 800366c:	ee07 3a90 	vmov	s15, r3
 8003670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003674:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	int16_t writeDeg = 36000 - (radians * (180 * 0.31831) * 100);
 8003678:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800367a:	f7fc ff11 	bl	80004a0 <__aeabi_f2d>
 800367e:	a344      	add	r3, pc, #272	; (adr r3, 8003790 <calibrateTray+0x2d8>)
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f7fc ff64 	bl	8000550 <__aeabi_dmul>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	4b44      	ldr	r3, [pc, #272]	; (80037a8 <calibrateTray+0x2f0>)
 8003696:	f7fc ff5b 	bl	8000550 <__aeabi_dmul>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	a13a      	add	r1, pc, #232	; (adr r1, 8003788 <calibrateTray+0x2d0>)
 80036a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036a4:	f7fc fd9c 	bl	80001e0 <__aeabi_dsub>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4610      	mov	r0, r2
 80036ae:	4619      	mov	r1, r3
 80036b0:	f7fd f9fe 	bl	8000ab0 <__aeabi_d2iz>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	if (k == 60) {
 80036ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80036be:	2b3c      	cmp	r3, #60	; 0x3c
 80036c0:	d140      	bne.n	8003744 <calibrateTray+0x28c>

		TrayOriginX = trayX.pos3;
 80036c2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ce:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		TrayOriginY = trayY.pos3;
 80036d2:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036de:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		writeDeg = 27000 - (radians * (180 * 0.31831) * 100);
 80036e2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80036e4:	f7fc fedc 	bl	80004a0 <__aeabi_f2d>
 80036e8:	a329      	add	r3, pc, #164	; (adr r3, 8003790 <calibrateTray+0x2d8>)
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f7fc ff2f 	bl	8000550 <__aeabi_dmul>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <calibrateTray+0x2f0>)
 8003700:	f7fc ff26 	bl	8000550 <__aeabi_dmul>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	a123      	add	r1, pc, #140	; (adr r1, 8003798 <calibrateTray+0x2e0>)
 800370a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800370e:	f7fc fd67 	bl	80001e0 <__aeabi_dsub>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4610      	mov	r0, r2
 8003718:	4619      	mov	r1, r3
 800371a:	f7fd f9c9 	bl	8000ab0 <__aeabi_d2iz>
 800371e:	4603      	mov	r3, r0
 8003720:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		radians -= (1.5 * M_PI);
 8003724:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003726:	f7fc febb 	bl	80004a0 <__aeabi_f2d>
 800372a:	a31d      	add	r3, pc, #116	; (adr r3, 80037a0 <calibrateTray+0x2e8>)
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	f7fc fd56 	bl	80001e0 <__aeabi_dsub>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4610      	mov	r0, r2
 800373a:	4619      	mov	r1, r3
 800373c:	f7fd f9e0 	bl	8000b00 <__aeabi_d2f>
 8003740:	4603      	mov	r3, r0
 8003742:	653b      	str	r3, [r7, #80]	; 0x50
	}
	testVar = writeDeg;
 8003744:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8003748:	ee07 3a90 	vmov	s15, r3
 800374c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003750:	4b16      	ldr	r3, [pc, #88]	; (80037ac <calibrateTray+0x2f4>)
 8003752:	edc3 7a00 	vstr	s15, [r3]
	float a[3] = { 10.0f, 30.0f, 50.0f };
 8003756:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <calibrateTray+0x2f8>)
 8003758:	f107 0320 	add.w	r3, r7, #32
 800375c:	ca07      	ldmia	r2, {r0, r1, r2}
 800375e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float b[3] = { 40.0f, 25.0f, 10.0f };
 8003762:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <calibrateTray+0x2fc>)
 8003764:	f107 0314 	add.w	r3, r7, #20
 8003768:	ca07      	ldmia	r2, {r0, r1, r2}
 800376a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (int i = 0; i < 9; i++) {
 800376e:	2300      	movs	r3, #0
 8003770:	643b      	str	r3, [r7, #64]	; 0x40
 8003772:	e098      	b.n	80038a6 <calibrateTray+0x3ee>
 8003774:	f3af 8000 	nop.w
 8003778:	00000000 	.word	0x00000000
 800377c:	40000000 	.word	0x40000000
 8003780:	00000000 	.word	0x00000000
 8003784:	3fe00000 	.word	0x3fe00000
 8003788:	00000000 	.word	0x00000000
 800378c:	40e19400 	.word	0x40e19400
 8003790:	c63f1412 	.word	0xc63f1412
 8003794:	404ca5dc 	.word	0x404ca5dc
 8003798:	00000000 	.word	0x00000000
 800379c:	40da5e00 	.word	0x40da5e00
 80037a0:	7f3321d2 	.word	0x7f3321d2
 80037a4:	4012d97c 	.word	0x4012d97c
 80037a8:	40590000 	.word	0x40590000
 80037ac:	20000e34 	.word	0x20000e34
 80037b0:	0800e468 	.word	0x0800e468
 80037b4:	0800e474 	.word	0x0800e474
		uint8_t index = i % 3;
 80037b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037ba:	4b5c      	ldr	r3, [pc, #368]	; (800392c <calibrateTray+0x474>)
 80037bc:	fb83 3102 	smull	r3, r1, r3, r2
 80037c0:	17d3      	asrs	r3, r2, #31
 80037c2:	1ac9      	subs	r1, r1, r3
 80037c4:	460b      	mov	r3, r1
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	440b      	add	r3, r1
 80037ca:	1ad1      	subs	r1, r2, r3
 80037cc:	460b      	mov	r3, r1
 80037ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		objPos[i].x = TrayOriginX + a[index];
 80037d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	3358      	adds	r3, #88	; 0x58
 80037da:	443b      	add	r3, r7
 80037dc:	3b38      	subs	r3, #56	; 0x38
 80037de:	ed93 7a00 	vldr	s14, [r3]
 80037e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037ea:	4413      	add	r3, r2
 80037ec:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80037f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037f4:	edc3 7a00 	vstr	s15, [r3]

		uint8_t row = i / 3;
 80037f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037fa:	4a4c      	ldr	r2, [pc, #304]	; (800392c <calibrateTray+0x474>)
 80037fc:	fb82 1203 	smull	r1, r2, r2, r3
 8003800:	17db      	asrs	r3, r3, #31
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		objPos[i].y = TrayOriginY + b[row];
 8003808:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	3358      	adds	r3, #88	; 0x58
 8003810:	443b      	add	r3, r7
 8003812:	3b44      	subs	r3, #68	; 0x44
 8003814:	ed93 7a00 	vldr	s14, [r3]
 8003818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003820:	4413      	add	r3, r2
 8003822:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800382a:	edc3 7a01 	vstr	s15, [r3, #4]
		objPos[i] = rotatePoint(objPos[i].x, objPos[i].y, TrayOriginX,
 800382e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003836:	4413      	add	r3, r2
 8003838:	edd3 7a00 	vldr	s15, [r3]
 800383c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003840:	ee17 3a90 	vmov	r3, s15
 8003844:	b218      	sxth	r0, r3
 8003846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800384e:	4413      	add	r3, r2
 8003850:	edd3 7a01 	vldr	s15, [r3, #4]
 8003854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003858:	ee17 3a90 	vmov	r3, s15
 800385c:	b219      	sxth	r1, r3
 800385e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003866:	ee17 3a90 	vmov	r3, s15
 800386a:	b21d      	sxth	r5, r3
 800386c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003874:	ee17 3a90 	vmov	r3, s15
 8003878:	b21e      	sxth	r6, r3
 800387a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003882:	18d4      	adds	r4, r2, r3
 8003884:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8003888:	4633      	mov	r3, r6
 800388a:	462a      	mov	r2, r5
 800388c:	f000 f854 	bl	8003938 <rotatePoint>
 8003890:	eeb0 7a40 	vmov.f32	s14, s0
 8003894:	eef0 7a60 	vmov.f32	s15, s1
 8003898:	ed84 7a00 	vstr	s14, [r4]
 800389c:	edc4 7a01 	vstr	s15, [r4, #4]
	for (int i = 0; i < 9; i++) {
 80038a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a2:	3301      	adds	r3, #1
 80038a4:	643b      	str	r3, [r7, #64]	; 0x40
 80038a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	dd85      	ble.n	80037b8 <calibrateTray+0x300>
				TrayOriginY, radians);
	}

	int16_t writeTrayOriginX = TrayOriginX * 10; // CHANGE DATA TYPE
 80038ac:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80038b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80038b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038bc:	ee17 3a90 	vmov	r3, s15
 80038c0:	867b      	strh	r3, [r7, #50]	; 0x32
	int16_t writeTrayOriginY = TrayOriginY * 10; // CHANGE DATA TYPE
 80038c2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80038c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80038ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038d2:	ee17 3a90 	vmov	r3, s15
 80038d6:	863b      	strh	r3, [r7, #48]	; 0x30
	if (calibrateTrayInput == 1) {
 80038d8:	4b15      	ldr	r3, [pc, #84]	; (8003930 <calibrateTray+0x478>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d10d      	bne.n	80038fc <calibrateTray+0x444>
		registerFrame[32].U16 = writeTrayOriginX; // WRTTE : Pick Tray Origin x
 80038e0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80038e2:	4b14      	ldr	r3, [pc, #80]	; (8003934 <calibrateTray+0x47c>)
 80038e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		registerFrame[33].U16 = writeTrayOriginY; // WRTTE : Pick Tray Origin y
 80038e8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80038ea:	4b12      	ldr	r3, [pc, #72]	; (8003934 <calibrateTray+0x47c>)
 80038ec:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		registerFrame[34].U16 = writeDeg; // WRTTE : Pick Tray Orientation
 80038f0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <calibrateTray+0x47c>)
 80038f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		registerFrame[35].U16 = writeTrayOriginX; //  WRTTE : Place Tray Origin x
		registerFrame[36].U16 = writeTrayOriginY; // WRTTE : Place Tray Origin y
		registerFrame[37].U16 = writeDeg; // WRTTE : Place Tray Orientation
	}

}
 80038fa:	e010      	b.n	800391e <calibrateTray+0x466>
	} else if (calibrateTrayInput == 2) {
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <calibrateTray+0x478>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d10c      	bne.n	800391e <calibrateTray+0x466>
		registerFrame[35].U16 = writeTrayOriginX; //  WRTTE : Place Tray Origin x
 8003904:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <calibrateTray+0x47c>)
 8003908:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		registerFrame[36].U16 = writeTrayOriginY; // WRTTE : Place Tray Origin y
 800390c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <calibrateTray+0x47c>)
 8003910:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		registerFrame[37].U16 = writeDeg; // WRTTE : Place Tray Orientation
 8003914:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <calibrateTray+0x47c>)
 800391a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 800391e:	bf00      	nop
 8003920:	375c      	adds	r7, #92	; 0x5c
 8003922:	46bd      	mov	sp, r7
 8003924:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003928:	b002      	add	sp, #8
 800392a:	4770      	bx	lr
 800392c:	55555556 	.word	0x55555556
 8003930:	20000e38 	.word	0x20000e38
 8003934:	20000d48 	.word	0x20000d48

08003938 <rotatePoint>:

Point rotatePoint(int16_t p1, int16_t p2, int16_t centerX, int16_t centerY,
		float radians) {
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b08f      	sub	sp, #60	; 0x3c
 800393c:	af00      	add	r7, sp, #0
 800393e:	4604      	mov	r4, r0
 8003940:	4608      	mov	r0, r1
 8003942:	4611      	mov	r1, r2
 8003944:	461a      	mov	r2, r3
 8003946:	ed87 0a03 	vstr	s0, [r7, #12]
 800394a:	4623      	mov	r3, r4
 800394c:	82fb      	strh	r3, [r7, #22]
 800394e:	4603      	mov	r3, r0
 8003950:	82bb      	strh	r3, [r7, #20]
 8003952:	460b      	mov	r3, r1
 8003954:	827b      	strh	r3, [r7, #18]
 8003956:	4613      	mov	r3, r2
 8003958:	823b      	strh	r3, [r7, #16]
	// ROTATION MATRIX
	float cosTheta = cosf(radians);
 800395a:	ed97 0a03 	vldr	s0, [r7, #12]
 800395e:	f008 fe1d 	bl	800c59c <cosf>
 8003962:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float sinTheta = sinf(radians);
 8003966:	ed97 0a03 	vldr	s0, [r7, #12]
 800396a:	f008 fe5b 	bl	800c624 <sinf>
 800396e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30

	int16_t translatedX = p1 - centerX;
 8003972:	8afa      	ldrh	r2, [r7, #22]
 8003974:	8a7b      	ldrh	r3, [r7, #18]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	b29b      	uxth	r3, r3
 800397a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t translatedY = p2 - centerY;
 800397c:	8aba      	ldrh	r2, [r7, #20]
 800397e:	8a3b      	ldrh	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	b29b      	uxth	r3, r3
 8003984:	85bb      	strh	r3, [r7, #44]	; 0x2c

	Point rotatedPoint;
	rotatedPoint.x = (translatedX * cosTheta) - (translatedY * sinTheta)
 8003986:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800398a:	ee07 3a90 	vmov	s15, r3
 800398e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003992:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003996:	ee27 7a27 	vmul.f32	s14, s14, s15
 800399a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039a6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80039aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039ae:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ centerX;
 80039b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039be:	ee77 7a27 	vadd.f32	s15, s14, s15
	rotatedPoint.x = (translatedX * cosTheta) - (translatedY * sinTheta)
 80039c2:	edc7 7a07 	vstr	s15, [r7, #28]
	rotatedPoint.y = (translatedX * sinTheta) + (translatedY * cosTheta)
 80039c6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80039ca:	ee07 3a90 	vmov	s15, r3
 80039ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80039d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039da:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80039ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039ee:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ centerY;
 80039f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039fe:	ee77 7a27 	vadd.f32	s15, s14, s15
	rotatedPoint.y = (translatedX * sinTheta) + (translatedY * cosTheta)
 8003a02:	edc7 7a08 	vstr	s15, [r7, #32]

	return rotatedPoint;
 8003a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a0a:	f107 021c 	add.w	r2, r7, #28
 8003a0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a12:	e883 0003 	stmia.w	r3, {r0, r1}
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	ee07 2a10 	vmov	s14, r2
 8003a1e:	ee07 3a90 	vmov	s15, r3
}
 8003a22:	eeb0 0a47 	vmov.f32	s0, s14
 8003a26:	eef0 0a67 	vmov.f32	s1, s15
 8003a2a:	373c      	adds	r7, #60	; 0x3c
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd90      	pop	{r4, r7, pc}

08003a30 <buttonInput>:

void buttonInput() {
 8003a30:	b598      	push	{r3, r4, r7, lr}
 8003a32:	af00      	add	r7, sp, #0
	register int i;
	for (i = 0; i < 4; i++) {
 8003a34:	2400      	movs	r4, #0
 8003a36:	e051      	b.n	8003adc <buttonInput+0xac>
		Button1[i].Current = HAL_GPIO_ReadPin(joyPin[i].PORT, joyPin[i].PIN);
 8003a38:	4b2b      	ldr	r3, [pc, #172]	; (8003ae8 <buttonInput+0xb8>)
 8003a3a:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 8003a3e:	492a      	ldr	r1, [pc, #168]	; (8003ae8 <buttonInput+0xb8>)
 8003a40:	00e3      	lsls	r3, r4, #3
 8003a42:	440b      	add	r3, r1
 8003a44:	889b      	ldrh	r3, [r3, #4]
 8003a46:	4619      	mov	r1, r3
 8003a48:	4610      	mov	r0, r2
 8003a4a:	f002 fc1b 	bl	8006284 <HAL_GPIO_ReadPin>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	461a      	mov	r2, r3
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <buttonInput+0xbc>)
 8003a54:	f803 2014 	strb.w	r2, [r3, r4, lsl #1]
		if (Button1[i].Last == 0 && Button1[i].Current == 1) {
 8003a58:	4a24      	ldr	r2, [pc, #144]	; (8003aec <buttonInput+0xbc>)
 8003a5a:	0063      	lsls	r3, r4, #1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	785b      	ldrb	r3, [r3, #1]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d132      	bne.n	8003aca <buttonInput+0x9a>
 8003a64:	4b21      	ldr	r3, [pc, #132]	; (8003aec <buttonInput+0xbc>)
 8003a66:	f813 3014 	ldrb.w	r3, [r3, r4, lsl #1]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d12d      	bne.n	8003aca <buttonInput+0x9a>
			if (i == 0) {
 8003a6e:	2c00      	cmp	r4, #0
 8003a70:	d105      	bne.n	8003a7e <buttonInput+0x4e>
				countTopB += 1;
 8003a72:	4b1f      	ldr	r3, [pc, #124]	; (8003af0 <buttonInput+0xc0>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	3301      	adds	r3, #1
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <buttonInput+0xc0>)
 8003a7c:	701a      	strb	r2, [r3, #0]
			}
			if (i == 1) {
 8003a7e:	2c01      	cmp	r4, #1
 8003a80:	d108      	bne.n	8003a94 <buttonInput+0x64>
				countRightB += 1;
 8003a82:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <buttonInput+0xc4>)
 8003a84:	f993 3000 	ldrsb.w	r3, [r3]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	b25a      	sxtb	r2, r3
 8003a90:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <buttonInput+0xc4>)
 8003a92:	701a      	strb	r2, [r3, #0]
			}
			if (i == 2) {
 8003a94:	2c02      	cmp	r4, #2
 8003a96:	d105      	bne.n	8003aa4 <buttonInput+0x74>
				countBottomB += 1;
 8003a98:	4b17      	ldr	r3, [pc, #92]	; (8003af8 <buttonInput+0xc8>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <buttonInput+0xc8>)
 8003aa2:	701a      	strb	r2, [r3, #0]
			}
			if (i == 3) {
 8003aa4:	2c03      	cmp	r4, #3
 8003aa6:	d105      	bne.n	8003ab4 <buttonInput+0x84>
				countLeftB += 1;
 8003aa8:	4b14      	ldr	r3, [pc, #80]	; (8003afc <buttonInput+0xcc>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	4b12      	ldr	r3, [pc, #72]	; (8003afc <buttonInput+0xcc>)
 8003ab2:	701a      	strb	r2, [r3, #0]

			}
			Button1[i].Last = Button1[i].Current;
 8003ab4:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <buttonInput+0xbc>)
 8003ab6:	f813 1014 	ldrb.w	r1, [r3, r4, lsl #1]
 8003aba:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <buttonInput+0xbc>)
 8003abc:	0063      	lsls	r3, r4, #1
 8003abe:	4413      	add	r3, r2
 8003ac0:	460a      	mov	r2, r1
 8003ac2:	705a      	strb	r2, [r3, #1]
			joyLogic = i;
 8003ac4:	b2e2      	uxtb	r2, r4
 8003ac6:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <buttonInput+0xd0>)
 8003ac8:	701a      	strb	r2, [r3, #0]
		}
		Button1[i].Last = Button1[i].Current;
 8003aca:	4b08      	ldr	r3, [pc, #32]	; (8003aec <buttonInput+0xbc>)
 8003acc:	f813 1014 	ldrb.w	r1, [r3, r4, lsl #1]
 8003ad0:	4a06      	ldr	r2, [pc, #24]	; (8003aec <buttonInput+0xbc>)
 8003ad2:	0063      	lsls	r3, r4, #1
 8003ad4:	4413      	add	r3, r2
 8003ad6:	460a      	mov	r2, r1
 8003ad8:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 4; i++) {
 8003ada:	3401      	adds	r4, #1
 8003adc:	2c03      	cmp	r4, #3
 8003ade:	ddab      	ble.n	8003a38 <buttonInput+0x8>
	}
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	bd98      	pop	{r3, r4, r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000200 	.word	0x20000200
 8003aec:	20000dd4 	.word	0x20000dd4
 8003af0:	20000e05 	.word	0x20000e05
 8003af4:	20000e06 	.word	0x20000e06
 8003af8:	20000e04 	.word	0x20000e04
 8003afc:	20000e07 	.word	0x20000e07
 8003b00:	20000e08 	.word	0x20000e08

08003b04 <buttonLogic>:

void buttonLogic(uint16_t state) {
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af04      	add	r7, sp, #16
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	80fb      	strh	r3, [r7, #6]
	if (countTopB % 2 == 1) {
 8003b0e:	4ba2      	ldr	r3, [pc, #648]	; (8003d98 <buttonLogic+0x294>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d03d      	beq.n	8003b98 <buttonLogic+0x94>
		switch (state) {
 8003b1c:	88fb      	ldrh	r3, [r7, #6]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d83b      	bhi.n	8003b9a <buttonLogic+0x96>
 8003b22:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <buttonLogic+0x24>)
 8003b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b28:	08003b39 	.word	0x08003b39
 8003b2c:	08003b53 	.word	0x08003b53
 8003b30:	08003b67 	.word	0x08003b67
 8003b34:	08003b85 	.word	0x08003b85
		case 0: // ENTER JOG MODE
			joyLogicLED = 1;
 8003b38:	4b98      	ldr	r3, [pc, #608]	; (8003d9c <buttonLogic+0x298>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	701a      	strb	r2, [r3, #0]
			if (switchAxis) {
 8003b3e:	4b98      	ldr	r3, [pc, #608]	; (8003da0 <buttonLogic+0x29c>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <buttonLogic+0x48>
				jogAxisY();
 8003b46:	f7ff f803 	bl	8002b50 <jogAxisY>
			} else {
				jogAxisX();
			}

			// handleJogAxisY(myJoyState);
			break;
 8003b4a:	e026      	b.n	8003b9a <buttonLogic+0x96>
				jogAxisX();
 8003b4c:	f000 fad6 	bl	80040fc <jogAxisX>
			break;
 8003b50:	e023      	b.n	8003b9a <buttonLogic+0x96>
		case 1: // RIGHT
			myJoyState += 1;
 8003b52:	4b94      	ldr	r3, [pc, #592]	; (8003da4 <buttonLogic+0x2a0>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	3301      	adds	r3, #1
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	4b92      	ldr	r3, [pc, #584]	; (8003da4 <buttonLogic+0x2a0>)
 8003b5c:	701a      	strb	r2, [r3, #0]

			joyLogic = 0;
 8003b5e:	4b92      	ldr	r3, [pc, #584]	; (8003da8 <buttonLogic+0x2a4>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
			break;
 8003b64:	e019      	b.n	8003b9a <buttonLogic+0x96>
		case 2: // CHANGE AXIS X/Y
			if (switchAxis) {
 8003b66:	4b8e      	ldr	r3, [pc, #568]	; (8003da0 <buttonLogic+0x29c>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <buttonLogic+0x72>
				switchAxis = 0;
 8003b6e:	4b8c      	ldr	r3, [pc, #560]	; (8003da0 <buttonLogic+0x29c>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	e002      	b.n	8003b7c <buttonLogic+0x78>
			} else {
				switchAxis = 1;
 8003b76:	4b8a      	ldr	r3, [pc, #552]	; (8003da0 <buttonLogic+0x29c>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
			}
			joyLogic = 0;
 8003b7c:	4b8a      	ldr	r3, [pc, #552]	; (8003da8 <buttonLogic+0x2a4>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]
			break;
 8003b82:	e00a      	b.n	8003b9a <buttonLogic+0x96>
		case 3: // LEFT
			joyLogic = 0;
 8003b84:	4b88      	ldr	r3, [pc, #544]	; (8003da8 <buttonLogic+0x2a4>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
			myJoyState -= 1;
 8003b8a:	4b86      	ldr	r3, [pc, #536]	; (8003da4 <buttonLogic+0x2a0>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	4b84      	ldr	r3, [pc, #528]	; (8003da4 <buttonLogic+0x2a0>)
 8003b94:	701a      	strb	r2, [r3, #0]
			break;
 8003b96:	e000      	b.n	8003b9a <buttonLogic+0x96>
		}
	}
 8003b98:	bf00      	nop
	if (countTopB % 2 == 0) {
 8003b9a:	4b7f      	ldr	r3, [pc, #508]	; (8003d98 <buttonLogic+0x294>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f040 815c 	bne.w	8003e62 <buttonLogic+0x35e>
		switch (state) {
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	f200 8159 	bhi.w	8003e64 <buttonLogic+0x360>
 8003bb2:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <buttonLogic+0xb4>)
 8003bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb8:	08003bc9 	.word	0x08003bc9
 8003bbc:	08003bf5 	.word	0x08003bf5
 8003bc0:	08003e4d 	.word	0x08003e4d
 8003bc4:	08003e55 	.word	0x08003e55
		case 0: // ENTER CALIBRATE MODE
			if (countRightB == 4) {
 8003bc8:	4b78      	ldr	r3, [pc, #480]	; (8003dac <buttonLogic+0x2a8>)
 8003bca:	f993 3000 	ldrsb.w	r3, [r3]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d103      	bne.n	8003bda <buttonLogic+0xd6>
				joyLogicLED = 3;
 8003bd2:	4b72      	ldr	r3, [pc, #456]	; (8003d9c <buttonLogic+0x298>)
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	701a      	strb	r2, [r3, #0]
				joyLogicLED = 4;
			} else {
				joyLogicLED = 2;
			}

			break;
 8003bd8:	e144      	b.n	8003e64 <buttonLogic+0x360>
			} else if (countRightB == 7) {
 8003bda:	4b74      	ldr	r3, [pc, #464]	; (8003dac <buttonLogic+0x2a8>)
 8003bdc:	f993 3000 	ldrsb.w	r3, [r3]
 8003be0:	2b07      	cmp	r3, #7
 8003be2:	d103      	bne.n	8003bec <buttonLogic+0xe8>
				joyLogicLED = 4;
 8003be4:	4b6d      	ldr	r3, [pc, #436]	; (8003d9c <buttonLogic+0x298>)
 8003be6:	2204      	movs	r2, #4
 8003be8:	701a      	strb	r2, [r3, #0]
			break;
 8003bea:	e13b      	b.n	8003e64 <buttonLogic+0x360>
				joyLogicLED = 2;
 8003bec:	4b6b      	ldr	r3, [pc, #428]	; (8003d9c <buttonLogic+0x298>)
 8003bee:	2202      	movs	r2, #2
 8003bf0:	701a      	strb	r2, [r3, #0]
			break;
 8003bf2:	e137      	b.n	8003e64 <buttonLogic+0x360>
		case 1: // MARK POSITION
			if (countRightB == 2) {
 8003bf4:	4b6d      	ldr	r3, [pc, #436]	; (8003dac <buttonLogic+0x2a8>)
 8003bf6:	f993 3000 	ldrsb.w	r3, [r3]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d120      	bne.n	8003c40 <buttonLogic+0x13c>
				trayPickX.pos1 = ((int16_t) registerFrame[68].U16 / 10.0); // READ : x-axis Actual Position
 8003bfe:	4b6c      	ldr	r3, [pc, #432]	; (8003db0 <buttonLogic+0x2ac>)
 8003c00:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003c04:	b21b      	sxth	r3, r3
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fc fc38 	bl	800047c <__aeabi_i2d>
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	4b68      	ldr	r3, [pc, #416]	; (8003db4 <buttonLogic+0x2b0>)
 8003c12:	f7fc fdc7 	bl	80007a4 <__aeabi_ddiv>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f7fc ff47 	bl	8000ab0 <__aeabi_d2iz>
 8003c22:	4603      	mov	r3, r0
 8003c24:	b21a      	sxth	r2, r3
 8003c26:	4b64      	ldr	r3, [pc, #400]	; (8003db8 <buttonLogic+0x2b4>)
 8003c28:	801a      	strh	r2, [r3, #0]
				trayPickY.pos1 = mmActPos;
 8003c2a:	4b64      	ldr	r3, [pc, #400]	; (8003dbc <buttonLogic+0x2b8>)
 8003c2c:	edd3 7a00 	vldr	s15, [r3]
 8003c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c34:	ee17 3a90 	vmov	r3, s15
 8003c38:	b21a      	sxth	r2, r3
 8003c3a:	4b61      	ldr	r3, [pc, #388]	; (8003dc0 <buttonLogic+0x2bc>)
 8003c3c:	801a      	strh	r2, [r3, #0]
 8003c3e:	e101      	b.n	8003e44 <buttonLogic+0x340>
			} else if (countRightB == 3) {
 8003c40:	4b5a      	ldr	r3, [pc, #360]	; (8003dac <buttonLogic+0x2a8>)
 8003c42:	f993 3000 	ldrsb.w	r3, [r3]
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d120      	bne.n	8003c8c <buttonLogic+0x188>
				trayPickX.pos2 = ((int16_t) registerFrame[68].U16 / 10.0); // READ : x-axis Actual Position
 8003c4a:	4b59      	ldr	r3, [pc, #356]	; (8003db0 <buttonLogic+0x2ac>)
 8003c4c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003c50:	b21b      	sxth	r3, r3
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fc fc12 	bl	800047c <__aeabi_i2d>
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	4b55      	ldr	r3, [pc, #340]	; (8003db4 <buttonLogic+0x2b0>)
 8003c5e:	f7fc fda1 	bl	80007a4 <__aeabi_ddiv>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4610      	mov	r0, r2
 8003c68:	4619      	mov	r1, r3
 8003c6a:	f7fc ff21 	bl	8000ab0 <__aeabi_d2iz>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	b21a      	sxth	r2, r3
 8003c72:	4b51      	ldr	r3, [pc, #324]	; (8003db8 <buttonLogic+0x2b4>)
 8003c74:	805a      	strh	r2, [r3, #2]
				trayPickY.pos2 = mmActPos;
 8003c76:	4b51      	ldr	r3, [pc, #324]	; (8003dbc <buttonLogic+0x2b8>)
 8003c78:	edd3 7a00 	vldr	s15, [r3]
 8003c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c80:	ee17 3a90 	vmov	r3, s15
 8003c84:	b21a      	sxth	r2, r3
 8003c86:	4b4e      	ldr	r3, [pc, #312]	; (8003dc0 <buttonLogic+0x2bc>)
 8003c88:	805a      	strh	r2, [r3, #2]
 8003c8a:	e0db      	b.n	8003e44 <buttonLogic+0x340>
			} else if (countRightB == 4) {
 8003c8c:	4b47      	ldr	r3, [pc, #284]	; (8003dac <buttonLogic+0x2a8>)
 8003c8e:	f993 3000 	ldrsb.w	r3, [r3]
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d133      	bne.n	8003cfe <buttonLogic+0x1fa>
				registerFrame[16].U16 = 0;
 8003c96:	4b46      	ldr	r3, [pc, #280]	; (8003db0 <buttonLogic+0x2ac>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	841a      	strh	r2, [r3, #32]
				trayPickX.pos3 = ((int16_t) registerFrame[68].U16 / 10.0); // READ : x-axis Actual Position
 8003c9c:	4b44      	ldr	r3, [pc, #272]	; (8003db0 <buttonLogic+0x2ac>)
 8003c9e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003ca2:	b21b      	sxth	r3, r3
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fc fbe9 	bl	800047c <__aeabi_i2d>
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	4b41      	ldr	r3, [pc, #260]	; (8003db4 <buttonLogic+0x2b0>)
 8003cb0:	f7fc fd78 	bl	80007a4 <__aeabi_ddiv>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4610      	mov	r0, r2
 8003cba:	4619      	mov	r1, r3
 8003cbc:	f7fc fef8 	bl	8000ab0 <__aeabi_d2iz>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	b21a      	sxth	r2, r3
 8003cc4:	4b3c      	ldr	r3, [pc, #240]	; (8003db8 <buttonLogic+0x2b4>)
 8003cc6:	809a      	strh	r2, [r3, #4]
				trayPickY.pos3 = mmActPos;
 8003cc8:	4b3c      	ldr	r3, [pc, #240]	; (8003dbc <buttonLogic+0x2b8>)
 8003cca:	edd3 7a00 	vldr	s15, [r3]
 8003cce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cd2:	ee17 3a90 	vmov	r3, s15
 8003cd6:	b21a      	sxth	r2, r3
 8003cd8:	4b39      	ldr	r3, [pc, #228]	; (8003dc0 <buttonLogic+0x2bc>)
 8003cda:	809a      	strh	r2, [r3, #4]
				calibrateTrayInput = 1;
 8003cdc:	4b39      	ldr	r3, [pc, #228]	; (8003dc4 <buttonLogic+0x2c0>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	701a      	strb	r2, [r3, #0]
				calibrateTray(trayPickX, trayPickY, objPickPos);
 8003ce2:	4b37      	ldr	r3, [pc, #220]	; (8003dc0 <buttonLogic+0x2bc>)
 8003ce4:	4a34      	ldr	r2, [pc, #208]	; (8003db8 <buttonLogic+0x2b4>)
 8003ce6:	4938      	ldr	r1, [pc, #224]	; (8003dc8 <buttonLogic+0x2c4>)
 8003ce8:	9102      	str	r1, [sp, #8]
 8003cea:	466c      	mov	r4, sp
 8003cec:	1d19      	adds	r1, r3, #4
 8003cee:	c903      	ldmia	r1, {r0, r1}
 8003cf0:	e884 0003 	stmia.w	r4, {r0, r1}
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cf8:	f7ff fbde 	bl	80034b8 <calibrateTray>
 8003cfc:	e0a2      	b.n	8003e44 <buttonLogic+0x340>
			} else if (countRightB == 5) {
 8003cfe:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <buttonLogic+0x2a8>)
 8003d00:	f993 3000 	ldrsb.w	r3, [r3]
 8003d04:	2b05      	cmp	r3, #5
 8003d06:	d120      	bne.n	8003d4a <buttonLogic+0x246>
				trayPlaceX.pos1 = ((int16_t) registerFrame[68].U16 / 10.0); // READ : x-axis Actual Position
 8003d08:	4b29      	ldr	r3, [pc, #164]	; (8003db0 <buttonLogic+0x2ac>)
 8003d0a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003d0e:	b21b      	sxth	r3, r3
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fc fbb3 	bl	800047c <__aeabi_i2d>
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <buttonLogic+0x2b0>)
 8003d1c:	f7fc fd42 	bl	80007a4 <__aeabi_ddiv>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	f7fc fec2 	bl	8000ab0 <__aeabi_d2iz>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	b21a      	sxth	r2, r3
 8003d30:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <buttonLogic+0x2c8>)
 8003d32:	801a      	strh	r2, [r3, #0]
				trayPlaceY.pos1 = mmActPos;
 8003d34:	4b21      	ldr	r3, [pc, #132]	; (8003dbc <buttonLogic+0x2b8>)
 8003d36:	edd3 7a00 	vldr	s15, [r3]
 8003d3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d3e:	ee17 3a90 	vmov	r3, s15
 8003d42:	b21a      	sxth	r2, r3
 8003d44:	4b22      	ldr	r3, [pc, #136]	; (8003dd0 <buttonLogic+0x2cc>)
 8003d46:	801a      	strh	r2, [r3, #0]
 8003d48:	e07c      	b.n	8003e44 <buttonLogic+0x340>
			} else if (countRightB == 6) {
 8003d4a:	4b18      	ldr	r3, [pc, #96]	; (8003dac <buttonLogic+0x2a8>)
 8003d4c:	f993 3000 	ldrsb.w	r3, [r3]
 8003d50:	2b06      	cmp	r3, #6
 8003d52:	d13f      	bne.n	8003dd4 <buttonLogic+0x2d0>
				trayPlaceX.pos2 = ((int16_t) registerFrame[68].U16 / 10.0); // READ : x-axis Actual Position
 8003d54:	4b16      	ldr	r3, [pc, #88]	; (8003db0 <buttonLogic+0x2ac>)
 8003d56:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003d5a:	b21b      	sxth	r3, r3
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fc fb8d 	bl	800047c <__aeabi_i2d>
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <buttonLogic+0x2b0>)
 8003d68:	f7fc fd1c 	bl	80007a4 <__aeabi_ddiv>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4610      	mov	r0, r2
 8003d72:	4619      	mov	r1, r3
 8003d74:	f7fc fe9c 	bl	8000ab0 <__aeabi_d2iz>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	b21a      	sxth	r2, r3
 8003d7c:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <buttonLogic+0x2c8>)
 8003d7e:	805a      	strh	r2, [r3, #2]
				trayPlaceY.pos2 = mmActPos;
 8003d80:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <buttonLogic+0x2b8>)
 8003d82:	edd3 7a00 	vldr	s15, [r3]
 8003d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d8a:	ee17 3a90 	vmov	r3, s15
 8003d8e:	b21a      	sxth	r2, r3
 8003d90:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <buttonLogic+0x2cc>)
 8003d92:	805a      	strh	r2, [r3, #2]
 8003d94:	e056      	b.n	8003e44 <buttonLogic+0x340>
 8003d96:	bf00      	nop
 8003d98:	20000e05 	.word	0x20000e05
 8003d9c:	20000229 	.word	0x20000229
 8003da0:	20000228 	.word	0x20000228
 8003da4:	2000026e 	.word	0x2000026e
 8003da8:	20000e08 	.word	0x20000e08
 8003dac:	20000e06 	.word	0x20000e06
 8003db0:	20000d48 	.word	0x20000d48
 8003db4:	40240000 	.word	0x40240000
 8003db8:	20000ed0 	.word	0x20000ed0
 8003dbc:	20000e1c 	.word	0x20000e1c
 8003dc0:	20000edc 	.word	0x20000edc
 8003dc4:	20000e38 	.word	0x20000e38
 8003dc8:	20000e40 	.word	0x20000e40
 8003dcc:	20000ee8 	.word	0x20000ee8
 8003dd0:	20000ef4 	.word	0x20000ef4
			} else if (countRightB == 7) {
 8003dd4:	4b25      	ldr	r3, [pc, #148]	; (8003e6c <buttonLogic+0x368>)
 8003dd6:	f993 3000 	ldrsb.w	r3, [r3]
 8003dda:	2b07      	cmp	r3, #7
 8003ddc:	d132      	bne.n	8003e44 <buttonLogic+0x340>
				trayPlaceX.pos3 = ((int16_t) registerFrame[68].U16 / 10.0); // READ : x-axis Actual Position
 8003dde:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <buttonLogic+0x36c>)
 8003de0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003de4:	b21b      	sxth	r3, r3
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fc fb48 	bl	800047c <__aeabi_i2d>
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	4b20      	ldr	r3, [pc, #128]	; (8003e74 <buttonLogic+0x370>)
 8003df2:	f7fc fcd7 	bl	80007a4 <__aeabi_ddiv>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f7fc fe57 	bl	8000ab0 <__aeabi_d2iz>
 8003e02:	4603      	mov	r3, r0
 8003e04:	b21a      	sxth	r2, r3
 8003e06:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <buttonLogic+0x374>)
 8003e08:	809a      	strh	r2, [r3, #4]
				trayPlaceY.pos3 = mmActPos;
 8003e0a:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <buttonLogic+0x378>)
 8003e0c:	edd3 7a00 	vldr	s15, [r3]
 8003e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e14:	ee17 3a90 	vmov	r3, s15
 8003e18:	b21a      	sxth	r2, r3
 8003e1a:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <buttonLogic+0x37c>)
 8003e1c:	809a      	strh	r2, [r3, #4]
				calibrateTrayInput = 2;
 8003e1e:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <buttonLogic+0x380>)
 8003e20:	2202      	movs	r2, #2
 8003e22:	701a      	strb	r2, [r3, #0]
				calibrateTray(trayPlaceX, trayPlaceY, objPlacePos);
 8003e24:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <buttonLogic+0x37c>)
 8003e26:	4a14      	ldr	r2, [pc, #80]	; (8003e78 <buttonLogic+0x374>)
 8003e28:	4917      	ldr	r1, [pc, #92]	; (8003e88 <buttonLogic+0x384>)
 8003e2a:	9102      	str	r1, [sp, #8]
 8003e2c:	466c      	mov	r4, sp
 8003e2e:	1d19      	adds	r1, r3, #4
 8003e30:	c903      	ldmia	r1, {r0, r1}
 8003e32:	e884 0003 	stmia.w	r4, {r0, r1}
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e3a:	f7ff fb3d 	bl	80034b8 <calibrateTray>
				registerFrame[16].U16 = 0;
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <buttonLogic+0x36c>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	841a      	strh	r2, [r3, #32]
			}
			joyLogic = 0;
 8003e44:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <buttonLogic+0x388>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]
			break;
 8003e4a:	e00b      	b.n	8003e64 <buttonLogic+0x360>
		case 2: // OPEN LASER
			joyLogic = 0;
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <buttonLogic+0x388>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]

			break;
 8003e52:	e007      	b.n	8003e64 <buttonLogic+0x360>
		case 3: //  DELETE
			countRightB = 0;
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <buttonLogic+0x368>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	701a      	strb	r2, [r3, #0]
			joyLogic = 0;
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <buttonLogic+0x388>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]
			break;
 8003e60:	e000      	b.n	8003e64 <buttonLogic+0x360>
		}
	}
 8003e62:	bf00      	nop

}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd90      	pop	{r4, r7, pc}
 8003e6c:	20000e06 	.word	0x20000e06
 8003e70:	20000d48 	.word	0x20000d48
 8003e74:	40240000 	.word	0x40240000
 8003e78:	20000ee8 	.word	0x20000ee8
 8003e7c:	20000e1c 	.word	0x20000e1c
 8003e80:	20000ef4 	.word	0x20000ef4
 8003e84:	20000e38 	.word	0x20000e38
 8003e88:	20000e88 	.word	0x20000e88
 8003e8c:	20000e08 	.word	0x20000e08

08003e90 <joyDisplayLED>:

void joyDisplayLED() {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
	if (joyLogicLED == 1) {
 8003e94:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <joyDisplayLED+0x88>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d10c      	bne.n	8003eb6 <joyDisplayLED+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ea2:	481e      	ldr	r0, [pc, #120]	; (8003f1c <joyDisplayLED+0x8c>)
 8003ea4:	f002 fa06 	bl	80062b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003eae:	481b      	ldr	r0, [pc, #108]	; (8003f1c <joyDisplayLED+0x8c>)
 8003eb0:	f002 fa00 	bl	80062b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
	} else if (joyLogicLED == 4) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
	}
}
 8003eb4:	e02e      	b.n	8003f14 <joyDisplayLED+0x84>
	} else if (joyLogicLED == 2) {
 8003eb6:	4b18      	ldr	r3, [pc, #96]	; (8003f18 <joyDisplayLED+0x88>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d10c      	bne.n	8003ed8 <joyDisplayLED+0x48>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ec4:	4815      	ldr	r0, [pc, #84]	; (8003f1c <joyDisplayLED+0x8c>)
 8003ec6:	f002 f9f5 	bl	80062b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ed0:	4812      	ldr	r0, [pc, #72]	; (8003f1c <joyDisplayLED+0x8c>)
 8003ed2:	f002 f9ef 	bl	80062b4 <HAL_GPIO_WritePin>
}
 8003ed6:	e01d      	b.n	8003f14 <joyDisplayLED+0x84>
	} else if (joyLogicLED == 3) {
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <joyDisplayLED+0x88>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d10b      	bne.n	8003ef8 <joyDisplayLED+0x68>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8003ee0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ee4:	480d      	ldr	r0, [pc, #52]	; (8003f1c <joyDisplayLED+0x8c>)
 8003ee6:	f002 f9fe 	bl	80062e6 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8003eea:	2201      	movs	r2, #1
 8003eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ef0:	480a      	ldr	r0, [pc, #40]	; (8003f1c <joyDisplayLED+0x8c>)
 8003ef2:	f002 f9df 	bl	80062b4 <HAL_GPIO_WritePin>
}
 8003ef6:	e00d      	b.n	8003f14 <joyDisplayLED+0x84>
	} else if (joyLogicLED == 4) {
 8003ef8:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <joyDisplayLED+0x88>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d109      	bne.n	8003f14 <joyDisplayLED+0x84>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 8003f00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f04:	4805      	ldr	r0, [pc, #20]	; (8003f1c <joyDisplayLED+0x8c>)
 8003f06:	f002 f9ee 	bl	80062e6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 8003f0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f0e:	4803      	ldr	r0, [pc, #12]	; (8003f1c <joyDisplayLED+0x8c>)
 8003f10:	f002 f9e9 	bl	80062e6 <HAL_GPIO_TogglePin>
}
 8003f14:	bf00      	nop
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000229 	.word	0x20000229
 8003f1c:	40020800 	.word	0x40020800

08003f20 <robotArmState>:

void robotArmState(uint16_t state) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	80fb      	strh	r3, [r7, #6]

	switch (state) {
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	2b0f      	cmp	r3, #15
 8003f30:	f200 80cb 	bhi.w	80040ca <robotArmState+0x1aa>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <robotArmState+0x1c>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f7d 	.word	0x08003f7d
 8003f40:	08003fb5 	.word	0x08003fb5
 8003f44:	080040cb 	.word	0x080040cb
 8003f48:	08003fed 	.word	0x08003fed
 8003f4c:	080040cb 	.word	0x080040cb
 8003f50:	080040cb 	.word	0x080040cb
 8003f54:	080040cb 	.word	0x080040cb
 8003f58:	08004027 	.word	0x08004027
 8003f5c:	080040cb 	.word	0x080040cb
 8003f60:	080040cb 	.word	0x080040cb
 8003f64:	080040cb 	.word	0x080040cb
 8003f68:	080040cb 	.word	0x080040cb
 8003f6c:	080040cb 	.word	0x080040cb
 8003f70:	080040cb 	.word	0x080040cb
 8003f74:	080040cb 	.word	0x080040cb
 8003f78:	0800404d 	.word	0x0800404d
	case 0b0000000000000001: // SET PICK TRAY
		registerFrame[16].U16 = 0b0000000000000001; // Jog Pick : y-axis Moving Status
 8003f7c:	4b58      	ldr	r3, [pc, #352]	; (80040e0 <robotArmState+0x1c0>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	841a      	strh	r2, [r3, #32]

		joyStart = 1;
 8003f82:	4b58      	ldr	r3, [pc, #352]	; (80040e4 <robotArmState+0x1c4>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]
		registerFrame[66].U16 = 300; // SET : x-axis Target Speed
 8003f88:	4b55      	ldr	r3, [pc, #340]	; (80040e0 <robotArmState+0x1c0>)
 8003f8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f8e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		registerFrame[67].U16 = 3; // SET : x-axis Target Speed
 8003f92:	4b53      	ldr	r3, [pc, #332]	; (80040e0 <robotArmState+0x1c0>)
 8003f94:	2203      	movs	r2, #3
 8003f96:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		pilotLamp(0, 0); // OFF : PILOT LAMP LEFT
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	f000 f969 	bl	8004274 <pilotLamp>
		pilotLamp(1, 1); // ON : PILOT LAMP CENTER
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	f000 f965 	bl	8004274 <pilotLamp>
		pilotLamp(2, 0); // OFF : PILOT LAMP RIGHT
 8003faa:	2100      	movs	r1, #0
 8003fac:	2002      	movs	r0, #2
 8003fae:	f000 f961 	bl	8004274 <pilotLamp>

		break;
 8003fb2:	e08a      	b.n	80040ca <robotArmState+0x1aa>
	case 0b0000000000000010: // SET PLACE TRAY
		registerFrame[16].U16 = 0b0000000000000010; // Jog Place : y-axis Moving Status
 8003fb4:	4b4a      	ldr	r3, [pc, #296]	; (80040e0 <robotArmState+0x1c0>)
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	841a      	strh	r2, [r3, #32]

		joyStart = 1;
 8003fba:	4b4a      	ldr	r3, [pc, #296]	; (80040e4 <robotArmState+0x1c4>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	701a      	strb	r2, [r3, #0]
		registerFrame[66].U16 = 300; // SET : x-axis Target Speed
 8003fc0:	4b47      	ldr	r3, [pc, #284]	; (80040e0 <robotArmState+0x1c0>)
 8003fc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fc6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		registerFrame[67].U16 = 3; // SET : x-axis Target Speed
 8003fca:	4b45      	ldr	r3, [pc, #276]	; (80040e0 <robotArmState+0x1c0>)
 8003fcc:	2203      	movs	r2, #3
 8003fce:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		pilotLamp(0, 0); // OFF : PILOT LAMP LEFT
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	f000 f94d 	bl	8004274 <pilotLamp>
		pilotLamp(1, 1); // ON : PILOT LAMP CENTER
 8003fda:	2101      	movs	r1, #1
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f000 f949 	bl	8004274 <pilotLamp>
		pilotLamp(2, 0);  // OFF : PILOT LAMP RIGHT
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	2002      	movs	r0, #2
 8003fe6:	f000 f945 	bl	8004274 <pilotLamp>

		break;
 8003fea:	e06e      	b.n	80040ca <robotArmState+0x1aa>
	case 0b0000000000000100: // HOME
		joyStart = 0;
 8003fec:	4b3d      	ldr	r3, [pc, #244]	; (80040e4 <robotArmState+0x1c4>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
		registerFrame[16].U16 = 0b0000000000000100; // HOME : y-axis Moving Status
 8003ff2:	4b3b      	ldr	r3, [pc, #236]	; (80040e0 <robotArmState+0x1c0>)
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	841a      	strh	r2, [r3, #32]
		registerFrame[64].U16 = 0b0000000000000001; // HOME : x-axis Moving Status
 8003ff8:	4b39      	ldr	r3, [pc, #228]	; (80040e0 <robotArmState+0x1c0>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		registerFrame[1].U16 = 0; // RESET : Base System Status
 8004000:	4b37      	ldr	r3, [pc, #220]	; (80040e0 <robotArmState+0x1c0>)
 8004002:	2200      	movs	r2, #0
 8004004:	805a      	strh	r2, [r3, #2]

		startSetHome = 1; // START HOME -> Function
 8004006:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <robotArmState+0x1c8>)
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]

		pilotLamp(0, 1); // ON : PILOT LAMP LEFT
 800400c:	2101      	movs	r1, #1
 800400e:	2000      	movs	r0, #0
 8004010:	f000 f930 	bl	8004274 <pilotLamp>
		pilotLamp(1, 0); // OFF : PILOT LAMP CENTER
 8004014:	2100      	movs	r1, #0
 8004016:	2001      	movs	r0, #1
 8004018:	f000 f92c 	bl	8004274 <pilotLamp>
		pilotLamp(2, 0); // OFF : PILOT LAMP RIGHT
 800401c:	2100      	movs	r1, #0
 800401e:	2002      	movs	r0, #2
 8004020:	f000 f928 	bl	8004274 <pilotLamp>

		break;
 8004024:	e051      	b.n	80040ca <robotArmState+0x1aa>
	case 0b0000000000001000: // RUN TRAY MODE 18 PATH
		joyStart = 0;
 8004026:	4b2f      	ldr	r3, [pc, #188]	; (80040e4 <robotArmState+0x1c4>)
 8004028:	2200      	movs	r2, #0
 800402a:	701a      	strb	r2, [r3, #0]

		startRunTray = 1; // START RUN TRAY -> Function
 800402c:	4b2f      	ldr	r3, [pc, #188]	; (80040ec <robotArmState+0x1cc>)
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]

		pilotLamp(0, 0); // OFF : PILOT LAMP LEFT
 8004032:	2100      	movs	r1, #0
 8004034:	2000      	movs	r0, #0
 8004036:	f000 f91d 	bl	8004274 <pilotLamp>
		pilotLamp(1, 0); // OFF : PILOT LAMP CENTER
 800403a:	2100      	movs	r1, #0
 800403c:	2001      	movs	r0, #1
 800403e:	f000 f919 	bl	8004274 <pilotLamp>
		pilotLamp(2, 1); // ON : PILOT LAMP RIGHT
 8004042:	2101      	movs	r1, #1
 8004044:	2002      	movs	r0, #2
 8004046:	f000 f915 	bl	8004274 <pilotLamp>
		break;
 800404a:	e03e      	b.n	80040ca <robotArmState+0x1aa>
	case 0b0000000000010000: // RUN POINT MODE
		joyStart = 0;
 800404c:	4b25      	ldr	r3, [pc, #148]	; (80040e4 <robotArmState+0x1c4>)
 800404e:	2200      	movs	r2, #0
 8004050:	701a      	strb	r2, [r3, #0]

		pilotLamp(0, 0); // OFF : PILOT LAMP LEFT
 8004052:	2100      	movs	r1, #0
 8004054:	2000      	movs	r0, #0
 8004056:	f000 f90d 	bl	8004274 <pilotLamp>
		pilotLamp(1, 0); // OFF : PILOT LAMP CENTER
 800405a:	2100      	movs	r1, #0
 800405c:	2001      	movs	r0, #1
 800405e:	f000 f909 	bl	8004274 <pilotLamp>
		pilotLamp(2, 1); // ON : PILOT LAMP RIGHT
 8004062:	2101      	movs	r1, #1
 8004064:	2002      	movs	r0, #2
 8004066:	f000 f905 	bl	8004274 <pilotLamp>

		// X-Axis
		registerFrame[64].U16 = 0b0000000000000010; // RUN : x-axis Moving Status
 800406a:	4b1d      	ldr	r3, [pc, #116]	; (80040e0 <robotArmState+0x1c0>)
 800406c:	2202      	movs	r2, #2
 800406e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		registerFrame[65].U16 = registerFrame[48].U16; // SET : x-axis Target Position = Read : Goal Point x
 8004072:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <robotArmState+0x1c0>)
 8004074:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <robotArmState+0x1c0>)
 800407a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		registerFrame[66].U16 = 3000; // SET : x-axis Target Speed
 800407e:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <robotArmState+0x1c0>)
 8004080:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004084:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		registerFrame[67].U16 = 1; // SET : x-axis Target Speed
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <robotArmState+0x1c0>)
 800408a:	2201      	movs	r2, #1
 800408c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

		// Y-Axis
		startPointModeY = 1; // START POINT MODE -> OnlyPositionControl Function
 8004090:	4b17      	ldr	r3, [pc, #92]	; (80040f0 <robotArmState+0x1d0>)
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
		initPosY = QEIReadModified * (2 * 3.14159 * 11.205 / 8192);
 8004096:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <robotArmState+0x1d4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc f9ee 	bl	800047c <__aeabi_i2d>
 80040a0:	a30d      	add	r3, pc, #52	; (adr r3, 80040d8 <robotArmState+0x1b8>)
 80040a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a6:	f7fc fa53 	bl	8000550 <__aeabi_dmul>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4610      	mov	r0, r2
 80040b0:	4619      	mov	r1, r3
 80040b2:	f7fc fcfd 	bl	8000ab0 <__aeabi_d2iz>
 80040b6:	4603      	mov	r3, r0
 80040b8:	4a0f      	ldr	r2, [pc, #60]	; (80040f8 <robotArmState+0x1d8>)
 80040ba:	6013      	str	r3, [r2, #0]

		registerFrame[16].U16 = 0b0000000000100000; // Go Point : y-axis Moving Status
 80040bc:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <robotArmState+0x1c0>)
 80040be:	2220      	movs	r2, #32
 80040c0:	841a      	strh	r2, [r3, #32]

		registerFrame[1].U16 = 0; // RESET: Base System Status
 80040c2:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <robotArmState+0x1c0>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	805a      	strh	r2, [r3, #2]

		break;
 80040c8:	bf00      	nop
	}
}
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	f3af 8000 	nop.w
 80040d8:	464f6faa 	.word	0x464f6faa
 80040dc:	3f8199cb 	.word	0x3f8199cb
 80040e0:	20000d48 	.word	0x20000d48
 80040e4:	20000f23 	.word	0x20000f23
 80040e8:	20000264 	.word	0x20000264
 80040ec:	20000f1f 	.word	0x20000f1f
 80040f0:	20000f0d 	.word	0x20000f0d
 80040f4:	20000e14 	.word	0x20000e14
 80040f8:	20000f10 	.word	0x20000f10

080040fc <jogAxisX>:

void jogAxisX() {
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
	refXPos = buffer[0].subdata.xAxis;
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <jogAxisX+0x70>)
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	ee07 3a90 	vmov	s15, r3
 8004108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410c:	4b18      	ldr	r3, [pc, #96]	; (8004170 <jogAxisX+0x74>)
 800410e:	edc3 7a00 	vstr	s15, [r3]
	if (refXPos > 2500) {
 8004112:	4b17      	ldr	r3, [pc, #92]	; (8004170 <jogAxisX+0x74>)
 8004114:	edd3 7a00 	vldr	s15, [r3]
 8004118:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004174 <jogAxisX+0x78>
 800411c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004124:	dd07      	ble.n	8004136 <jogAxisX+0x3a>
		dirAxisX = 1;
 8004126:	4b14      	ldr	r3, [pc, #80]	; (8004178 <jogAxisX+0x7c>)
 8004128:	2201      	movs	r2, #1
 800412a:	701a      	strb	r2, [r3, #0]
		registerFrame[64].U16 = 0b0000000000000100; // JOG RIGHT : x-axis Moving Status
 800412c:	4b13      	ldr	r3, [pc, #76]	; (800417c <jogAxisX+0x80>)
 800412e:	2204      	movs	r2, #4
 8004130:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	} else {
		registerFrame[64].U16 = 0; // RESET : x-axis Moving Status

	}

}
 8004134:	e015      	b.n	8004162 <jogAxisX+0x66>
	} else if (refXPos < 1500) {
 8004136:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <jogAxisX+0x74>)
 8004138:	edd3 7a00 	vldr	s15, [r3]
 800413c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004180 <jogAxisX+0x84>
 8004140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004148:	d507      	bpl.n	800415a <jogAxisX+0x5e>
		dirAxisX = 0;
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <jogAxisX+0x7c>)
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
		registerFrame[64].U16 = 0b0000000000001000; // JOG LEFT : x-axis Moving Status
 8004150:	4b0a      	ldr	r3, [pc, #40]	; (800417c <jogAxisX+0x80>)
 8004152:	2208      	movs	r2, #8
 8004154:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8004158:	e003      	b.n	8004162 <jogAxisX+0x66>
		registerFrame[64].U16 = 0; // RESET : x-axis Moving Status
 800415a:	4b08      	ldr	r3, [pc, #32]	; (800417c <jogAxisX+0x80>)
 800415c:	2200      	movs	r2, #0
 800415e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8004162:	bf00      	nop
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	20000ddc 	.word	0x20000ddc
 8004170:	20000220 	.word	0x20000220
 8004174:	451c4000 	.word	0x451c4000
 8004178:	20000245 	.word	0x20000245
 800417c:	20000d48 	.word	0x20000d48
 8004180:	44bb8000 	.word	0x44bb8000

08004184 <handleEmergency>:

void HAL_ADC_ConvCallback(ADC_HandleTypeDef *hadc) {

}

void handleEmergency() {
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == 0) {
 8004188:	2120      	movs	r1, #32
 800418a:	482f      	ldr	r0, [pc, #188]	; (8004248 <handleEmergency+0xc4>)
 800418c:	f002 f87a 	bl	8006284 <HAL_GPIO_ReadPin>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d12f      	bne.n	80041f6 <handleEmergency+0x72>
		endTimeStatus2 = 1;
 8004196:	4b2d      	ldr	r3, [pc, #180]	; (800424c <handleEmergency+0xc8>)
 8004198:	2201      	movs	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
		endTimeStatus3 = 0;
 800419c:	4b2c      	ldr	r3, [pc, #176]	; (8004250 <handleEmergency+0xcc>)
 800419e:	2200      	movs	r2, #0
 80041a0:	701a      	strb	r2, [r3, #0]
		if (endTime2 == 5 && endEmergency == 0) {
 80041a2:	4b2c      	ldr	r3, [pc, #176]	; (8004254 <handleEmergency+0xd0>)
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	2b05      	cmp	r3, #5
 80041a8:	d14c      	bne.n	8004244 <handleEmergency+0xc0>
 80041aa:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <handleEmergency+0xd4>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d148      	bne.n	8004244 <handleEmergency+0xc0>
			endTimeStatus2 = 0;
 80041b2:	4b26      	ldr	r3, [pc, #152]	; (800424c <handleEmergency+0xc8>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
			endEmergency = 1;
 80041b8:	4b27      	ldr	r3, [pc, #156]	; (8004258 <handleEmergency+0xd4>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]

			x[3] = 1;
 80041be:	4b27      	ldr	r3, [pc, #156]	; (800425c <handleEmergency+0xd8>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	70da      	strb	r2, [r3, #3]
			duty = 0;
 80041c4:	4b26      	ldr	r3, [pc, #152]	; (8004260 <handleEmergency+0xdc>)
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
			setMotor();
 80041cc:	f7fe f9aa 	bl	8002524 <setMotor>
			startPointModeY=0;
 80041d0:	4b24      	ldr	r3, [pc, #144]	; (8004264 <handleEmergency+0xe0>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	701a      	strb	r2, [r3, #0]
			startRunTray=0;
 80041d6:	4b24      	ldr	r3, [pc, #144]	; (8004268 <handleEmergency+0xe4>)
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 80041dc:	2201      	movs	r2, #1
 80041de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041e2:	4819      	ldr	r0, [pc, #100]	; (8004248 <handleEmergency+0xc4>)
 80041e4:	f002 f866 	bl	80062b4 <HAL_GPIO_WritePin>
			endEffectorControl(endEffector.emergencyMode, 0);
 80041e8:	4b20      	ldr	r3, [pc, #128]	; (800426c <handleEmergency+0xe8>)
 80041ea:	785b      	ldrb	r3, [r3, #1]
 80041ec:	2100      	movs	r1, #0
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f85c 	bl	80042ac <endEffectorControl>
				endEmergency = 0;
				endEffectorControl(endEffector.emergencyMode, 1);
			}
		}
	}
}
 80041f4:	e026      	b.n	8004244 <handleEmergency+0xc0>
		endTimeStatus2 = 0;
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <handleEmergency+0xc8>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
		if (endEmergency == 1) {
 80041fc:	4b16      	ldr	r3, [pc, #88]	; (8004258 <handleEmergency+0xd4>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d11f      	bne.n	8004244 <handleEmergency+0xc0>
			endTimeStatus3 = 1;
 8004204:	4b12      	ldr	r3, [pc, #72]	; (8004250 <handleEmergency+0xcc>)
 8004206:	2201      	movs	r2, #1
 8004208:	701a      	strb	r2, [r3, #0]
			if (endEmergency == 1 && endTime3 == 5) {
 800420a:	4b13      	ldr	r3, [pc, #76]	; (8004258 <handleEmergency+0xd4>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d118      	bne.n	8004244 <handleEmergency+0xc0>
 8004212:	4b17      	ldr	r3, [pc, #92]	; (8004270 <handleEmergency+0xec>)
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	2b05      	cmp	r3, #5
 8004218:	d114      	bne.n	8004244 <handleEmergency+0xc0>
				endTime2 = 0;
 800421a:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <handleEmergency+0xd0>)
 800421c:	2200      	movs	r2, #0
 800421e:	801a      	strh	r2, [r3, #0]
				endTimeStatus3 = 0;
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <handleEmergency+0xcc>)
 8004222:	2200      	movs	r2, #0
 8004224:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8004226:	2200      	movs	r2, #0
 8004228:	f44f 7180 	mov.w	r1, #256	; 0x100
 800422c:	4806      	ldr	r0, [pc, #24]	; (8004248 <handleEmergency+0xc4>)
 800422e:	f002 f841 	bl	80062b4 <HAL_GPIO_WritePin>
				endEmergency = 0;
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <handleEmergency+0xd4>)
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
				endEffectorControl(endEffector.emergencyMode, 1);
 8004238:	4b0c      	ldr	r3, [pc, #48]	; (800426c <handleEmergency+0xe8>)
 800423a:	785b      	ldrb	r3, [r3, #1]
 800423c:	2101      	movs	r1, #1
 800423e:	4618      	mov	r0, r3
 8004240:	f000 f834 	bl	80042ac <endEffectorControl>
}
 8004244:	bf00      	nop
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40020800 	.word	0x40020800
 800424c:	20000f56 	.word	0x20000f56
 8004250:	20000f5a 	.word	0x20000f5a
 8004254:	20000f54 	.word	0x20000f54
 8004258:	20000f34 	.word	0x20000f34
 800425c:	20000f28 	.word	0x20000f28
 8004260:	20000e0c 	.word	0x20000e0c
 8004264:	20000f0d 	.word	0x20000f0d
 8004268:	20000f1f 	.word	0x20000f1f
 800426c:	20000268 	.word	0x20000268
 8004270:	20000f58 	.word	0x20000f58

08004274 <pilotLamp>:
void pilotLamp(uint8_t id, uint8_t status) {
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	460a      	mov	r2, r1
 800427e:	71fb      	strb	r3, [r7, #7]
 8004280:	4613      	mov	r3, r2
 8004282:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(pilotLampPin[id].PORT, pilotLampPin[id].PIN, status);
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	4a08      	ldr	r2, [pc, #32]	; (80042a8 <pilotLamp+0x34>)
 8004288:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800428c:	79fb      	ldrb	r3, [r7, #7]
 800428e:	4a06      	ldr	r2, [pc, #24]	; (80042a8 <pilotLamp+0x34>)
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4413      	add	r3, r2
 8004294:	889b      	ldrh	r3, [r3, #4]
 8004296:	79ba      	ldrb	r2, [r7, #6]
 8004298:	4619      	mov	r1, r3
 800429a:	f002 f80b 	bl	80062b4 <HAL_GPIO_WritePin>

}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	2000022c 	.word	0x2000022c

080042ac <endEffectorControl>:

void endEffectorControl(uint8_t mode, uint8_t status) {
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af04      	add	r7, sp, #16
 80042b2:	4603      	mov	r3, r0
 80042b4:	460a      	mov	r2, r1
 80042b6:	71fb      	strb	r3, [r7, #7]
 80042b8:	4613      	mov	r3, r2
 80042ba:	71bb      	strb	r3, [r7, #6]
	switch (mode) {
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	2b05      	cmp	r3, #5
 80042c0:	f200 80ad 	bhi.w	800441e <endEffectorControl+0x172>
 80042c4:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <endEffectorControl+0x20>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	080042e5 	.word	0x080042e5
 80042d0:	0800431f 	.word	0x0800431f
 80042d4:	08004365 	.word	0x08004365
 80042d8:	0800438f 	.word	0x0800438f
 80042dc:	080043b9 	.word	0x080043b9
 80042e0:	080043eb 	.word	0x080043eb
	case 0: // LED ON-Off
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 80042e4:	4b50      	ldr	r3, [pc, #320]	; (8004428 <endEffectorControl+0x17c>)
 80042e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b20      	cmp	r3, #32
 80042ee:	f040 808b 	bne.w	8004408 <endEffectorControl+0x15c>
			x[2] += 1;
 80042f2:	4b4e      	ldr	r3, [pc, #312]	; (800442c <endEffectorControl+0x180>)
 80042f4:	789b      	ldrb	r3, [r3, #2]
 80042f6:	3301      	adds	r3, #1
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	4b4c      	ldr	r3, [pc, #304]	; (800442c <endEffectorControl+0x180>)
 80042fc:	709a      	strb	r2, [r3, #2]
			static uint8_t data[2][2] = { { 0x00 }, { 0x01 } };
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x01,
			I2C_MEMADD_SIZE_8BIT, data[status], 1, 100);
 80042fe:	79bb      	ldrb	r3, [r7, #6]
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	4a4b      	ldr	r2, [pc, #300]	; (8004430 <endEffectorControl+0x184>)
 8004304:	4413      	add	r3, r2
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x01,
 8004306:	2264      	movs	r2, #100	; 0x64
 8004308:	9202      	str	r2, [sp, #8]
 800430a:	2201      	movs	r2, #1
 800430c:	9201      	str	r2, [sp, #4]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	2301      	movs	r3, #1
 8004312:	2201      	movs	r2, #1
 8004314:	212a      	movs	r1, #42	; 0x2a
 8004316:	4844      	ldr	r0, [pc, #272]	; (8004428 <endEffectorControl+0x17c>)
 8004318:	f002 fb6a 	bl	80069f0 <HAL_I2C_Mem_Write>
//			HAL_I2C_Master_Transmit(&hi2c2, endEffector_ADDR << 1, data[status],
//					2, 100);
		}
		break;
 800431c:	e074      	b.n	8004408 <endEffectorControl+0x15c>

	case 1: //  Emergency Mode
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 800431e:	4b42      	ldr	r3, [pc, #264]	; (8004428 <endEffectorControl+0x17c>)
 8004320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b20      	cmp	r3, #32
 8004328:	d170      	bne.n	800440c <endEffectorControl+0x160>
			if (status == 1) {
 800432a:	79bb      	ldrb	r3, [r7, #6]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d10c      	bne.n	800434a <endEffectorControl+0x9e>
				static uint8_t data[3] = { 0x7A, 0xFF, 0x81 };
				HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0xE5,
 8004330:	2364      	movs	r3, #100	; 0x64
 8004332:	9302      	str	r3, [sp, #8]
 8004334:	2303      	movs	r3, #3
 8004336:	9301      	str	r3, [sp, #4]
 8004338:	4b3e      	ldr	r3, [pc, #248]	; (8004434 <endEffectorControl+0x188>)
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	2301      	movs	r3, #1
 800433e:	22e5      	movs	r2, #229	; 0xe5
 8004340:	212a      	movs	r1, #42	; 0x2a
 8004342:	4839      	ldr	r0, [pc, #228]	; (8004428 <endEffectorControl+0x17c>)
 8004344:	f002 fb54 	bl	80069f0 <HAL_I2C_Mem_Write>
				static uint8_t data[1] = { 0xF0 };
				HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0xF0,
				I2C_MEMADD_SIZE_8BIT, data, 0, 100);
			}
		}
		break;
 8004348:	e060      	b.n	800440c <endEffectorControl+0x160>
				HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0xF0,
 800434a:	2364      	movs	r3, #100	; 0x64
 800434c:	9302      	str	r3, [sp, #8]
 800434e:	2300      	movs	r3, #0
 8004350:	9301      	str	r3, [sp, #4]
 8004352:	4b39      	ldr	r3, [pc, #228]	; (8004438 <endEffectorControl+0x18c>)
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	2301      	movs	r3, #1
 8004358:	22f0      	movs	r2, #240	; 0xf0
 800435a:	212a      	movs	r1, #42	; 0x2a
 800435c:	4832      	ldr	r0, [pc, #200]	; (8004428 <endEffectorControl+0x17c>)
 800435e:	f002 fb47 	bl	80069f0 <HAL_I2C_Mem_Write>
		break;
 8004362:	e053      	b.n	800440c <endEffectorControl+0x160>

	case 2: // Gripper Working and Gripper Stops Working
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 8004364:	4b30      	ldr	r3, [pc, #192]	; (8004428 <endEffectorControl+0x17c>)
 8004366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b20      	cmp	r3, #32
 800436e:	d14f      	bne.n	8004410 <endEffectorControl+0x164>
			static uint8_t data[2][1] = { { 0x8C }, { 0x13 } };
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x10,
			I2C_MEMADD_SIZE_8BIT, data[status], 1, 100);
 8004370:	79bb      	ldrb	r3, [r7, #6]
 8004372:	4a32      	ldr	r2, [pc, #200]	; (800443c <endEffectorControl+0x190>)
 8004374:	4413      	add	r3, r2
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x10,
 8004376:	2264      	movs	r2, #100	; 0x64
 8004378:	9202      	str	r2, [sp, #8]
 800437a:	2201      	movs	r2, #1
 800437c:	9201      	str	r2, [sp, #4]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	2301      	movs	r3, #1
 8004382:	2210      	movs	r2, #16
 8004384:	212a      	movs	r1, #42	; 0x2a
 8004386:	4828      	ldr	r0, [pc, #160]	; (8004428 <endEffectorControl+0x17c>)
 8004388:	f002 fb32 	bl	80069f0 <HAL_I2C_Mem_Write>
		}
		break;
 800438c:	e040      	b.n	8004410 <endEffectorControl+0x164>

	case 3: // Gripper Pick Up and Gripper Place down
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 800438e:	4b26      	ldr	r3, [pc, #152]	; (8004428 <endEffectorControl+0x17c>)
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b20      	cmp	r3, #32
 8004398:	d13c      	bne.n	8004414 <endEffectorControl+0x168>
			static uint8_t data[2][1] = { { 0x69 }, { 0x5A } };
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x10,
			I2C_MEMADD_SIZE_8BIT, data[status], 1, 100);
 800439a:	79bb      	ldrb	r3, [r7, #6]
 800439c:	4a28      	ldr	r2, [pc, #160]	; (8004440 <endEffectorControl+0x194>)
 800439e:	4413      	add	r3, r2
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x10,
 80043a0:	2264      	movs	r2, #100	; 0x64
 80043a2:	9202      	str	r2, [sp, #8]
 80043a4:	2201      	movs	r2, #1
 80043a6:	9201      	str	r2, [sp, #4]
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	2301      	movs	r3, #1
 80043ac:	2210      	movs	r2, #16
 80043ae:	212a      	movs	r1, #42	; 0x2a
 80043b0:	481d      	ldr	r0, [pc, #116]	; (8004428 <endEffectorControl+0x17c>)
 80043b2:	f002 fb1d 	bl	80069f0 <HAL_I2C_Mem_Write>
		}
		break;
 80043b6:	e02d      	b.n	8004414 <endEffectorControl+0x168>

	case 4: // Soft reset
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 80043b8:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <endEffectorControl+0x17c>)
 80043ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d129      	bne.n	8004418 <endEffectorControl+0x16c>
			x[2] += 1;
 80043c4:	4b19      	ldr	r3, [pc, #100]	; (800442c <endEffectorControl+0x180>)
 80043c6:	789b      	ldrb	r3, [r3, #2]
 80043c8:	3301      	adds	r3, #1
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	4b17      	ldr	r3, [pc, #92]	; (800442c <endEffectorControl+0x180>)
 80043ce:	709a      	strb	r2, [r3, #2]
			static uint8_t data[3] = { 0xFF, 0x55, 0xAA };
			HAL_I2C_Mem_Write(&hi2c2, endEffector_ADDR << 1, 0x00,
 80043d0:	2364      	movs	r3, #100	; 0x64
 80043d2:	9302      	str	r3, [sp, #8]
 80043d4:	2303      	movs	r3, #3
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <endEffectorControl+0x198>)
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	2301      	movs	r3, #1
 80043de:	2200      	movs	r2, #0
 80043e0:	212a      	movs	r1, #42	; 0x2a
 80043e2:	4811      	ldr	r0, [pc, #68]	; (8004428 <endEffectorControl+0x17c>)
 80043e4:	f002 fb04 	bl	80069f0 <HAL_I2C_Mem_Write>
			I2C_MEMADD_SIZE_8BIT, data, 3, 100);
		}
		break;
 80043e8:	e016      	b.n	8004418 <endEffectorControl+0x16c>

	case 5: // Current status
		if (hi2c2.State == HAL_I2C_STATE_READY) {
 80043ea:	4b0f      	ldr	r3, [pc, #60]	; (8004428 <endEffectorControl+0x17c>)
 80043ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d112      	bne.n	800441c <endEffectorControl+0x170>
			HAL_I2C_Master_Receive(&hi2c2, endEffector_ADDR << 1, readStatus, 1,
 80043f6:	2364      	movs	r3, #100	; 0x64
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	2301      	movs	r3, #1
 80043fc:	4a12      	ldr	r2, [pc, #72]	; (8004448 <endEffectorControl+0x19c>)
 80043fe:	212a      	movs	r1, #42	; 0x2a
 8004400:	4809      	ldr	r0, [pc, #36]	; (8004428 <endEffectorControl+0x17c>)
 8004402:	f002 f8cf 	bl	80065a4 <HAL_I2C_Master_Receive>
					100);
		}
		break;
 8004406:	e009      	b.n	800441c <endEffectorControl+0x170>
		break;
 8004408:	bf00      	nop
 800440a:	e008      	b.n	800441e <endEffectorControl+0x172>
		break;
 800440c:	bf00      	nop
 800440e:	e006      	b.n	800441e <endEffectorControl+0x172>
		break;
 8004410:	bf00      	nop
 8004412:	e004      	b.n	800441e <endEffectorControl+0x172>
		break;
 8004414:	bf00      	nop
 8004416:	e002      	b.n	800441e <endEffectorControl+0x172>
		break;
 8004418:	bf00      	nop
 800441a:	e000      	b.n	800441e <endEffectorControl+0x172>
		break;
 800441c:	bf00      	nop
	}
}
 800441e:	bf00      	nop
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	200003c4 	.word	0x200003c4
 800442c:	20000f28 	.word	0x20000f28
 8004430:	20000274 	.word	0x20000274
 8004434:	20000278 	.word	0x20000278
 8004438:	2000027c 	.word	0x2000027c
 800443c:	20000280 	.word	0x20000280
 8004440:	20000284 	.word	0x20000284
 8004444:	20000288 	.word	0x20000288
 8004448:	20000f14 	.word	0x20000f14

0800444c <endEffectorStatusControl>:

void endEffectorStatusControl(uint16_t regisFrame) // PUT REGISTOR
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	80fb      	strh	r3, [r7, #6]
	switch (regisFrame) {
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	2b0a      	cmp	r3, #10
 800445a:	f200 808d 	bhi.w	8004578 <endEffectorStatusControl+0x12c>
 800445e:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <endEffectorStatusControl+0x18>)
 8004460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004464:	08004491 	.word	0x08004491
 8004468:	080044d5 	.word	0x080044d5
 800446c:	08004519 	.word	0x08004519
 8004470:	08004579 	.word	0x08004579
 8004474:	08004579 	.word	0x08004579
 8004478:	08004579 	.word	0x08004579
 800447c:	0800455d 	.word	0x0800455d
 8004480:	08004579 	.word	0x08004579
 8004484:	08004579 	.word	0x08004579
 8004488:	08004579 	.word	0x08004579
 800448c:	0800456b 	.word	0x0800456b
	case 0b0000000000000000: // LASER OFF
		switch (endEffectorStatusControlState) {
 8004490:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <endEffectorStatusControl+0x134>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <endEffectorStatusControl+0x52>
 8004498:	2b01      	cmp	r3, #1
 800449a:	d00d      	beq.n	80044b8 <endEffectorStatusControl+0x6c>
			endEffectorControl(endEffector.testMode, 0);
			endEffectorStatusControlState = 0;
			endStateCheck = 0;
			break;
		}
		break;
 800449c:	e06c      	b.n	8004578 <endEffectorStatusControl+0x12c>
			endStateCheck = 1;
 800449e:	4b39      	ldr	r3, [pc, #228]	; (8004584 <endEffectorStatusControl+0x138>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	701a      	strb	r2, [r3, #0]
			endEffectorControl(endEffector.gripperWork, 0);
 80044a4:	4b38      	ldr	r3, [pc, #224]	; (8004588 <endEffectorStatusControl+0x13c>)
 80044a6:	789b      	ldrb	r3, [r3, #2]
 80044a8:	2100      	movs	r1, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fefe 	bl	80042ac <endEffectorControl>
			endEffectorStatusControlState = 1;
 80044b0:	4b33      	ldr	r3, [pc, #204]	; (8004580 <endEffectorStatusControl+0x134>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	701a      	strb	r2, [r3, #0]
			break;
 80044b6:	e00c      	b.n	80044d2 <endEffectorStatusControl+0x86>
			endEffectorControl(endEffector.testMode, 0);
 80044b8:	4b33      	ldr	r3, [pc, #204]	; (8004588 <endEffectorStatusControl+0x13c>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2100      	movs	r1, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fef4 	bl	80042ac <endEffectorControl>
			endEffectorStatusControlState = 0;
 80044c4:	4b2e      	ldr	r3, [pc, #184]	; (8004580 <endEffectorStatusControl+0x134>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	701a      	strb	r2, [r3, #0]
			endStateCheck = 0;
 80044ca:	4b2e      	ldr	r3, [pc, #184]	; (8004584 <endEffectorStatusControl+0x138>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]
			break;
 80044d0:	bf00      	nop
		break;
 80044d2:	e051      	b.n	8004578 <endEffectorStatusControl+0x12c>
	case 0b0000000000000001: // LASER ON
		switch (endEffectorStatusControlState) {
 80044d4:	4b2a      	ldr	r3, [pc, #168]	; (8004580 <endEffectorStatusControl+0x134>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <endEffectorStatusControl+0x96>
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d00d      	beq.n	80044fc <endEffectorStatusControl+0xb0>
			endEffectorStatusControlState = 0;
			endStateCheck = 0;
			break;
		}
		//endEffectorControl(endEffector.testMode, 1);
		break;
 80044e0:	e04a      	b.n	8004578 <endEffectorStatusControl+0x12c>
			endStateCheck = 1;
 80044e2:	4b28      	ldr	r3, [pc, #160]	; (8004584 <endEffectorStatusControl+0x138>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	701a      	strb	r2, [r3, #0]
			endEffectorControl(endEffector.gripperWork, 0);
 80044e8:	4b27      	ldr	r3, [pc, #156]	; (8004588 <endEffectorStatusControl+0x13c>)
 80044ea:	789b      	ldrb	r3, [r3, #2]
 80044ec:	2100      	movs	r1, #0
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fedc 	bl	80042ac <endEffectorControl>
			endEffectorStatusControlState = 1;
 80044f4:	4b22      	ldr	r3, [pc, #136]	; (8004580 <endEffectorStatusControl+0x134>)
 80044f6:	2201      	movs	r2, #1
 80044f8:	701a      	strb	r2, [r3, #0]
			break;
 80044fa:	e00c      	b.n	8004516 <endEffectorStatusControl+0xca>
			endEffectorControl(endEffector.testMode, 1);
 80044fc:	4b22      	ldr	r3, [pc, #136]	; (8004588 <endEffectorStatusControl+0x13c>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2101      	movs	r1, #1
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fed2 	bl	80042ac <endEffectorControl>
			endEffectorStatusControlState = 0;
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <endEffectorStatusControl+0x134>)
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
			endStateCheck = 0;
 800450e:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <endEffectorStatusControl+0x138>)
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
			break;
 8004514:	bf00      	nop
		break;
 8004516:	e02f      	b.n	8004578 <endEffectorStatusControl+0x12c>
	case 0b0000000000000010: // GRIPPER POWER
		switch (endEffectorStatusControlState) {
 8004518:	4b19      	ldr	r3, [pc, #100]	; (8004580 <endEffectorStatusControl+0x134>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <endEffectorStatusControl+0xda>
 8004520:	2b01      	cmp	r3, #1
 8004522:	d00d      	beq.n	8004540 <endEffectorStatusControl+0xf4>
			endEffectorControl(endEffector.gripperWork, 1);
			endEffectorStatusControlState = 0;
			endStateCheck = 0;
			break;
		}
		break;
 8004524:	e028      	b.n	8004578 <endEffectorStatusControl+0x12c>
			endEffectorControl(endEffector.testMode, 0);
 8004526:	4b18      	ldr	r3, [pc, #96]	; (8004588 <endEffectorStatusControl+0x13c>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2100      	movs	r1, #0
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff febd 	bl	80042ac <endEffectorControl>
			endEffectorStatusControlState = 1;
 8004532:	4b13      	ldr	r3, [pc, #76]	; (8004580 <endEffectorStatusControl+0x134>)
 8004534:	2201      	movs	r2, #1
 8004536:	701a      	strb	r2, [r3, #0]
			endStateCheck = 1;
 8004538:	4b12      	ldr	r3, [pc, #72]	; (8004584 <endEffectorStatusControl+0x138>)
 800453a:	2201      	movs	r2, #1
 800453c:	701a      	strb	r2, [r3, #0]
			break;
 800453e:	e00c      	b.n	800455a <endEffectorStatusControl+0x10e>
			endEffectorControl(endEffector.gripperWork, 1);
 8004540:	4b11      	ldr	r3, [pc, #68]	; (8004588 <endEffectorStatusControl+0x13c>)
 8004542:	789b      	ldrb	r3, [r3, #2]
 8004544:	2101      	movs	r1, #1
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff feb0 	bl	80042ac <endEffectorControl>
			endEffectorStatusControlState = 0;
 800454c:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <endEffectorStatusControl+0x134>)
 800454e:	2200      	movs	r2, #0
 8004550:	701a      	strb	r2, [r3, #0]
			endStateCheck = 0;
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <endEffectorStatusControl+0x138>)
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
			break;
 8004558:	bf00      	nop
		break;
 800455a:	e00d      	b.n	8004578 <endEffectorStatusControl+0x12c>
	case 0b0000000000000110: // GRIPPER PICK
		endEffectorControl(endEffector.gripperPickAndPlace, 1); // 1 -> PICK
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <endEffectorStatusControl+0x13c>)
 800455e:	78db      	ldrb	r3, [r3, #3]
 8004560:	2101      	movs	r1, #1
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff fea2 	bl	80042ac <endEffectorControl>
		break;
 8004568:	e006      	b.n	8004578 <endEffectorStatusControl+0x12c>
	case 0b0000000000001010: // GRIPPER PLACE
		endEffectorControl(endEffector.gripperPickAndPlace, 0); // 1 -> PLACE
 800456a:	4b07      	ldr	r3, [pc, #28]	; (8004588 <endEffectorStatusControl+0x13c>)
 800456c:	78db      	ldrb	r3, [r3, #3]
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fe9b 	bl	80042ac <endEffectorControl>
		break;
 8004576:	bf00      	nop
	}

}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	20000f4f 	.word	0x20000f4f
 8004584:	20000f4e 	.word	0x20000f4e
 8004588:	20000268 	.word	0x20000268

0800458c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004590:	b672      	cpsid	i
}
 8004592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004594:	e7fe      	b.n	8004594 <Error_Handler+0x8>
	...

08004598 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	607b      	str	r3, [r7, #4]
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <HAL_MspInit+0x4c>)
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	4a0f      	ldr	r2, [pc, #60]	; (80045e4 <HAL_MspInit+0x4c>)
 80045a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045ac:	6453      	str	r3, [r2, #68]	; 0x44
 80045ae:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <HAL_MspInit+0x4c>)
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b6:	607b      	str	r3, [r7, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	603b      	str	r3, [r7, #0]
 80045be:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <HAL_MspInit+0x4c>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	4a08      	ldr	r2, [pc, #32]	; (80045e4 <HAL_MspInit+0x4c>)
 80045c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_MspInit+0x4c>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80045d6:	2007      	movs	r0, #7
 80045d8:	f001 f872 	bl	80056c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40023800 	.word	0x40023800

080045e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f0:	f107 0314 	add.w	r3, r7, #20
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	609a      	str	r2, [r3, #8]
 80045fc:	60da      	str	r2, [r3, #12]
 80045fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a2f      	ldr	r2, [pc, #188]	; (80046c4 <HAL_ADC_MspInit+0xdc>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d157      	bne.n	80046ba <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800460a:	2300      	movs	r3, #0
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	4b2e      	ldr	r3, [pc, #184]	; (80046c8 <HAL_ADC_MspInit+0xe0>)
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	4a2d      	ldr	r2, [pc, #180]	; (80046c8 <HAL_ADC_MspInit+0xe0>)
 8004614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004618:	6453      	str	r3, [r2, #68]	; 0x44
 800461a:	4b2b      	ldr	r3, [pc, #172]	; (80046c8 <HAL_ADC_MspInit+0xe0>)
 800461c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	4b27      	ldr	r3, [pc, #156]	; (80046c8 <HAL_ADC_MspInit+0xe0>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	4a26      	ldr	r2, [pc, #152]	; (80046c8 <HAL_ADC_MspInit+0xe0>)
 8004630:	f043 0304 	orr.w	r3, r3, #4
 8004634:	6313      	str	r3, [r2, #48]	; 0x30
 8004636:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <HAL_ADC_MspInit+0xe0>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8004642:	2309      	movs	r3, #9
 8004644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004646:	2303      	movs	r3, #3
 8004648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800464e:	f107 0314 	add.w	r3, r7, #20
 8004652:	4619      	mov	r1, r3
 8004654:	481d      	ldr	r0, [pc, #116]	; (80046cc <HAL_ADC_MspInit+0xe4>)
 8004656:	f001 fc91 	bl	8005f7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800465a:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <HAL_ADC_MspInit+0xe8>)
 800465c:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <HAL_ADC_MspInit+0xec>)
 800465e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004660:	4b1b      	ldr	r3, [pc, #108]	; (80046d0 <HAL_ADC_MspInit+0xe8>)
 8004662:	2200      	movs	r2, #0
 8004664:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004666:	4b1a      	ldr	r3, [pc, #104]	; (80046d0 <HAL_ADC_MspInit+0xe8>)
 8004668:	2200      	movs	r2, #0
 800466a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800466c:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <HAL_ADC_MspInit+0xe8>)
 800466e:	2200      	movs	r2, #0
 8004670:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004672:	4b17      	ldr	r3, [pc, #92]	; (80046d0 <HAL_ADC_MspInit+0xe8>)
 8004674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004678:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800467a:	4b15      	ldr	r3, [pc, #84]	; (80046d0 <HAL_ADC_MspInit+0xe8>)
 800467c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004680:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004682:	4b13      	ldr	r3, [pc, #76]	; (80046d0 <HAL_ADC_MspInit+0xe8>)
 8004684:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004688:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800468a:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <HAL_ADC_MspInit+0xe8>)
 800468c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004690:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004692:	4b0f      	ldr	r3, [pc, #60]	; (80046d0 <HAL_ADC_MspInit+0xe8>)
 8004694:	2200      	movs	r2, #0
 8004696:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004698:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <HAL_ADC_MspInit+0xe8>)
 800469a:	2200      	movs	r2, #0
 800469c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800469e:	480c      	ldr	r0, [pc, #48]	; (80046d0 <HAL_ADC_MspInit+0xe8>)
 80046a0:	f001 f850 	bl	8005744 <HAL_DMA_Init>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80046aa:	f7ff ff6f 	bl	800458c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a07      	ldr	r2, [pc, #28]	; (80046d0 <HAL_ADC_MspInit+0xe8>)
 80046b2:	639a      	str	r2, [r3, #56]	; 0x38
 80046b4:	4a06      	ldr	r2, [pc, #24]	; (80046d0 <HAL_ADC_MspInit+0xe8>)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80046ba:	bf00      	nop
 80046bc:	3728      	adds	r7, #40	; 0x28
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40012000 	.word	0x40012000
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40020800 	.word	0x40020800
 80046d0:	20000364 	.word	0x20000364
 80046d4:	40026410 	.word	0x40026410

080046d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08a      	sub	sp, #40	; 0x28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e0:	f107 0314 	add.w	r3, r7, #20
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	609a      	str	r2, [r3, #8]
 80046ec:	60da      	str	r2, [r3, #12]
 80046ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a29      	ldr	r2, [pc, #164]	; (800479c <HAL_I2C_MspInit+0xc4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d14c      	bne.n	8004794 <HAL_I2C_MspInit+0xbc>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046fa:	2300      	movs	r3, #0
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	4b28      	ldr	r3, [pc, #160]	; (80047a0 <HAL_I2C_MspInit+0xc8>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	4a27      	ldr	r2, [pc, #156]	; (80047a0 <HAL_I2C_MspInit+0xc8>)
 8004704:	f043 0302 	orr.w	r3, r3, #2
 8004708:	6313      	str	r3, [r2, #48]	; 0x30
 800470a:	4b25      	ldr	r3, [pc, #148]	; (80047a0 <HAL_I2C_MspInit+0xc8>)
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800471a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800471c:	2312      	movs	r3, #18
 800471e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004720:	2300      	movs	r3, #0
 8004722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004724:	2303      	movs	r3, #3
 8004726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004728:	2304      	movs	r3, #4
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800472c:	f107 0314 	add.w	r3, r7, #20
 8004730:	4619      	mov	r1, r3
 8004732:	481c      	ldr	r0, [pc, #112]	; (80047a4 <HAL_I2C_MspInit+0xcc>)
 8004734:	f001 fc22 	bl	8005f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004738:	2308      	movs	r3, #8
 800473a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800473c:	2312      	movs	r3, #18
 800473e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004744:	2303      	movs	r3, #3
 8004746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004748:	2309      	movs	r3, #9
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800474c:	f107 0314 	add.w	r3, r7, #20
 8004750:	4619      	mov	r1, r3
 8004752:	4814      	ldr	r0, [pc, #80]	; (80047a4 <HAL_I2C_MspInit+0xcc>)
 8004754:	f001 fc12 	bl	8005f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	4b10      	ldr	r3, [pc, #64]	; (80047a0 <HAL_I2C_MspInit+0xc8>)
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	4a0f      	ldr	r2, [pc, #60]	; (80047a0 <HAL_I2C_MspInit+0xc8>)
 8004762:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004766:	6413      	str	r3, [r2, #64]	; 0x40
 8004768:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <HAL_I2C_MspInit+0xc8>)
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8004774:	2200      	movs	r2, #0
 8004776:	2100      	movs	r1, #0
 8004778:	2021      	movs	r0, #33	; 0x21
 800477a:	f000 ffac 	bl	80056d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800477e:	2021      	movs	r0, #33	; 0x21
 8004780:	f000 ffc5 	bl	800570e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8004784:	2200      	movs	r2, #0
 8004786:	2100      	movs	r1, #0
 8004788:	2022      	movs	r0, #34	; 0x22
 800478a:	f000 ffa4 	bl	80056d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800478e:	2022      	movs	r0, #34	; 0x22
 8004790:	f000 ffbd 	bl	800570e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004794:	bf00      	nop
 8004796:	3728      	adds	r7, #40	; 0x28
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40005800 	.word	0x40005800
 80047a0:	40023800 	.word	0x40023800
 80047a4:	40020400 	.word	0x40020400

080047a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a0e      	ldr	r2, [pc, #56]	; (80047f0 <HAL_TIM_PWM_MspInit+0x48>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d115      	bne.n	80047e6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <HAL_TIM_PWM_MspInit+0x4c>)
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	4a0c      	ldr	r2, [pc, #48]	; (80047f4 <HAL_TIM_PWM_MspInit+0x4c>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	6453      	str	r3, [r2, #68]	; 0x44
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <HAL_TIM_PWM_MspInit+0x4c>)
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80047d6:	2200      	movs	r2, #0
 80047d8:	2100      	movs	r1, #0
 80047da:	201a      	movs	r0, #26
 80047dc:	f000 ff7b 	bl	80056d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80047e0:	201a      	movs	r0, #26
 80047e2:	f000 ff94 	bl	800570e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40023800 	.word	0x40023800

080047f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004808:	d116      	bne.n	8004838 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	4b28      	ldr	r3, [pc, #160]	; (80048b0 <HAL_TIM_Base_MspInit+0xb8>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	4a27      	ldr	r2, [pc, #156]	; (80048b0 <HAL_TIM_Base_MspInit+0xb8>)
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	6413      	str	r3, [r2, #64]	; 0x40
 800481a:	4b25      	ldr	r3, [pc, #148]	; (80048b0 <HAL_TIM_Base_MspInit+0xb8>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004826:	2200      	movs	r2, #0
 8004828:	2100      	movs	r1, #0
 800482a:	201c      	movs	r0, #28
 800482c:	f000 ff53 	bl	80056d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004830:	201c      	movs	r0, #28
 8004832:	f000 ff6c 	bl	800570e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004836:	e036      	b.n	80048a6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1d      	ldr	r2, [pc, #116]	; (80048b4 <HAL_TIM_Base_MspInit+0xbc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d116      	bne.n	8004870 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	4b1a      	ldr	r3, [pc, #104]	; (80048b0 <HAL_TIM_Base_MspInit+0xb8>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	4a19      	ldr	r2, [pc, #100]	; (80048b0 <HAL_TIM_Base_MspInit+0xb8>)
 800484c:	f043 0302 	orr.w	r3, r3, #2
 8004850:	6413      	str	r3, [r2, #64]	; 0x40
 8004852:	4b17      	ldr	r3, [pc, #92]	; (80048b0 <HAL_TIM_Base_MspInit+0xb8>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800485e:	2200      	movs	r2, #0
 8004860:	2100      	movs	r1, #0
 8004862:	201d      	movs	r0, #29
 8004864:	f000 ff37 	bl	80056d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004868:	201d      	movs	r0, #29
 800486a:	f000 ff50 	bl	800570e <HAL_NVIC_EnableIRQ>
}
 800486e:	e01a      	b.n	80048a6 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a10      	ldr	r2, [pc, #64]	; (80048b8 <HAL_TIM_Base_MspInit+0xc0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d115      	bne.n	80048a6 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <HAL_TIM_Base_MspInit+0xb8>)
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	4a0b      	ldr	r2, [pc, #44]	; (80048b0 <HAL_TIM_Base_MspInit+0xb8>)
 8004884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004888:	6453      	str	r3, [r2, #68]	; 0x44
 800488a:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <HAL_TIM_Base_MspInit+0xb8>)
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004896:	2200      	movs	r2, #0
 8004898:	2100      	movs	r1, #0
 800489a:	201a      	movs	r0, #26
 800489c:	f000 ff1b 	bl	80056d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80048a0:	201a      	movs	r0, #26
 80048a2:	f000 ff34 	bl	800570e <HAL_NVIC_EnableIRQ>
}
 80048a6:	bf00      	nop
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40023800 	.word	0x40023800
 80048b4:	40000400 	.word	0x40000400
 80048b8:	40014800 	.word	0x40014800

080048bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08a      	sub	sp, #40	; 0x28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c4:	f107 0314 	add.w	r3, r7, #20
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	609a      	str	r2, [r3, #8]
 80048d0:	60da      	str	r2, [r3, #12]
 80048d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a19      	ldr	r2, [pc, #100]	; (8004940 <HAL_TIM_Encoder_MspInit+0x84>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d12b      	bne.n	8004936 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	4b18      	ldr	r3, [pc, #96]	; (8004944 <HAL_TIM_Encoder_MspInit+0x88>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	4a17      	ldr	r2, [pc, #92]	; (8004944 <HAL_TIM_Encoder_MspInit+0x88>)
 80048e8:	f043 0308 	orr.w	r3, r3, #8
 80048ec:	6413      	str	r3, [r2, #64]	; 0x40
 80048ee:	4b15      	ldr	r3, [pc, #84]	; (8004944 <HAL_TIM_Encoder_MspInit+0x88>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	4b11      	ldr	r3, [pc, #68]	; (8004944 <HAL_TIM_Encoder_MspInit+0x88>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	4a10      	ldr	r2, [pc, #64]	; (8004944 <HAL_TIM_Encoder_MspInit+0x88>)
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	6313      	str	r3, [r2, #48]	; 0x30
 800490a:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <HAL_TIM_Encoder_MspInit+0x88>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004916:	2303      	movs	r3, #3
 8004918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800491a:	2302      	movs	r3, #2
 800491c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800491e:	2301      	movs	r3, #1
 8004920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004922:	2300      	movs	r3, #0
 8004924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004926:	2302      	movs	r3, #2
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800492a:	f107 0314 	add.w	r3, r7, #20
 800492e:	4619      	mov	r1, r3
 8004930:	4805      	ldr	r0, [pc, #20]	; (8004948 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004932:	f001 fb23 	bl	8005f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004936:	bf00      	nop
 8004938:	3728      	adds	r7, #40	; 0x28
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40000c00 	.word	0x40000c00
 8004944:	40023800 	.word	0x40023800
 8004948:	40020000 	.word	0x40020000

0800494c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004954:	f107 030c 	add.w	r3, r7, #12
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	605a      	str	r2, [r3, #4]
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a12      	ldr	r2, [pc, #72]	; (80049b4 <HAL_TIM_MspPostInit+0x68>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d11e      	bne.n	80049ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800496e:	2300      	movs	r3, #0
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	4b11      	ldr	r3, [pc, #68]	; (80049b8 <HAL_TIM_MspPostInit+0x6c>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	4a10      	ldr	r2, [pc, #64]	; (80049b8 <HAL_TIM_MspPostInit+0x6c>)
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	6313      	str	r3, [r2, #48]	; 0x30
 800497e:	4b0e      	ldr	r3, [pc, #56]	; (80049b8 <HAL_TIM_MspPostInit+0x6c>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	60bb      	str	r3, [r7, #8]
 8004988:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800498a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800498e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004990:	2302      	movs	r3, #2
 8004992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004998:	2300      	movs	r3, #0
 800499a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800499c:	2301      	movs	r3, #1
 800499e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a0:	f107 030c 	add.w	r3, r7, #12
 80049a4:	4619      	mov	r1, r3
 80049a6:	4805      	ldr	r0, [pc, #20]	; (80049bc <HAL_TIM_MspPostInit+0x70>)
 80049a8:	f001 fae8 	bl	8005f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80049ac:	bf00      	nop
 80049ae:	3720      	adds	r7, #32
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40010000 	.word	0x40010000
 80049b8:	40023800 	.word	0x40023800
 80049bc:	40020000 	.word	0x40020000

080049c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08a      	sub	sp, #40	; 0x28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c8:	f107 0314 	add.w	r3, r7, #20
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	60da      	str	r2, [r3, #12]
 80049d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a34      	ldr	r2, [pc, #208]	; (8004ab0 <HAL_UART_MspInit+0xf0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d161      	bne.n	8004aa6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	4b33      	ldr	r3, [pc, #204]	; (8004ab4 <HAL_UART_MspInit+0xf4>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	4a32      	ldr	r2, [pc, #200]	; (8004ab4 <HAL_UART_MspInit+0xf4>)
 80049ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f0:	6413      	str	r3, [r2, #64]	; 0x40
 80049f2:	4b30      	ldr	r3, [pc, #192]	; (8004ab4 <HAL_UART_MspInit+0xf4>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	4b2c      	ldr	r3, [pc, #176]	; (8004ab4 <HAL_UART_MspInit+0xf4>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	4a2b      	ldr	r2, [pc, #172]	; (8004ab4 <HAL_UART_MspInit+0xf4>)
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a0e:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <HAL_UART_MspInit+0xf4>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004a1a:	230c      	movs	r3, #12
 8004a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a26:	2303      	movs	r3, #3
 8004a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a2a:	2307      	movs	r3, #7
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a2e:	f107 0314 	add.w	r3, r7, #20
 8004a32:	4619      	mov	r1, r3
 8004a34:	4820      	ldr	r0, [pc, #128]	; (8004ab8 <HAL_UART_MspInit+0xf8>)
 8004a36:	f001 faa1 	bl	8005f7c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004a3a:	4b20      	ldr	r3, [pc, #128]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a3c:	4a20      	ldr	r2, [pc, #128]	; (8004ac0 <HAL_UART_MspInit+0x100>)
 8004a3e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004a40:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a46:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a48:	4b1c      	ldr	r3, [pc, #112]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a4a:	2240      	movs	r2, #64	; 0x40
 8004a4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a4e:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a54:	4b19      	ldr	r3, [pc, #100]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a5a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a5c:	4b17      	ldr	r3, [pc, #92]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a62:	4b16      	ldr	r3, [pc, #88]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004a68:	4b14      	ldr	r3, [pc, #80]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a6e:	4b13      	ldr	r3, [pc, #76]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a74:	4b11      	ldr	r3, [pc, #68]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004a7a:	4810      	ldr	r0, [pc, #64]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a7c:	f000 fe62 	bl	8005744 <HAL_DMA_Init>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004a86:	f7ff fd81 	bl	800458c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a0b      	ldr	r2, [pc, #44]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a8e:	635a      	str	r2, [r3, #52]	; 0x34
 8004a90:	4a0a      	ldr	r2, [pc, #40]	; (8004abc <HAL_UART_MspInit+0xfc>)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004a96:	2200      	movs	r2, #0
 8004a98:	2100      	movs	r1, #0
 8004a9a:	2026      	movs	r0, #38	; 0x26
 8004a9c:	f000 fe1b 	bl	80056d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004aa0:	2026      	movs	r0, #38	; 0x26
 8004aa2:	f000 fe34 	bl	800570e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004aa6:	bf00      	nop
 8004aa8:	3728      	adds	r7, #40	; 0x28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40004400 	.word	0x40004400
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	40020000 	.word	0x40020000
 8004abc:	20000810 	.word	0x20000810
 8004ac0:	400260a0 	.word	0x400260a0

08004ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ac8:	e7fe      	b.n	8004ac8 <NMI_Handler+0x4>

08004aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004aca:	b480      	push	{r7}
 8004acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ace:	e7fe      	b.n	8004ace <HardFault_Handler+0x4>

08004ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ad4:	e7fe      	b.n	8004ad4 <MemManage_Handler+0x4>

08004ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ada:	e7fe      	b.n	8004ada <BusFault_Handler+0x4>

08004adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ae0:	e7fe      	b.n	8004ae0 <UsageFault_Handler+0x4>

08004ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ae6:	bf00      	nop
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004af4:	bf00      	nop
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004afe:	b480      	push	{r7}
 8004b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b02:	bf00      	nop
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b10:	f000 f8e4 	bl	8004cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b14:	bf00      	nop
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004b1c:	4802      	ldr	r0, [pc, #8]	; (8004b28 <DMA1_Stream6_IRQHandler+0x10>)
 8004b1e:	f000 ffa9 	bl	8005a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004b22:	bf00      	nop
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000810 	.word	0x20000810

08004b2c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b30:	4803      	ldr	r0, [pc, #12]	; (8004b40 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004b32:	f005 f9a5 	bl	8009e80 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004b36:	4803      	ldr	r0, [pc, #12]	; (8004b44 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004b38:	f005 f9a2 	bl	8009e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004b3c:	bf00      	nop
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000418 	.word	0x20000418
 8004b44:	200006e8 	.word	0x200006e8

08004b48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b4c:	4802      	ldr	r0, [pc, #8]	; (8004b58 <TIM2_IRQHandler+0x10>)
 8004b4e:	f005 f997 	bl	8009e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004b52:	bf00      	nop
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	200004cc 	.word	0x200004cc

08004b5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004b60:	4802      	ldr	r0, [pc, #8]	; (8004b6c <TIM3_IRQHandler+0x10>)
 8004b62:	f005 f98d 	bl	8009e80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004b66:	bf00      	nop
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000580 	.word	0x20000580

08004b70 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004b74:	4802      	ldr	r0, [pc, #8]	; (8004b80 <I2C2_EV_IRQHandler+0x10>)
 8004b76:	f002 f835 	bl	8006be4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004b7a:	bf00      	nop
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	200003c4 	.word	0x200003c4

08004b84 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8004b88:	4802      	ldr	r0, [pc, #8]	; (8004b94 <I2C2_ER_IRQHandler+0x10>)
 8004b8a:	f002 f99c 	bl	8006ec6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8004b8e:	bf00      	nop
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	200003c4 	.word	0x200003c4

08004b98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004b9c:	4802      	ldr	r0, [pc, #8]	; (8004ba8 <USART2_IRQHandler+0x10>)
 8004b9e:	f006 fc77 	bl	800b490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ba2:	bf00      	nop
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	2000079c 	.word	0x2000079c

08004bac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004bb0:	4802      	ldr	r0, [pc, #8]	; (8004bbc <DMA2_Stream0_IRQHandler+0x10>)
 8004bb2:	f000 ff5f 	bl	8005a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004bb6:	bf00      	nop
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000364 	.word	0x20000364

08004bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bc4:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <SystemInit+0x20>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bca:	4a05      	ldr	r2, [pc, #20]	; (8004be0 <SystemInit+0x20>)
 8004bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004bd4:	bf00      	nop
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	e000ed00 	.word	0xe000ed00

08004be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004be8:	480d      	ldr	r0, [pc, #52]	; (8004c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004bea:	490e      	ldr	r1, [pc, #56]	; (8004c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004bec:	4a0e      	ldr	r2, [pc, #56]	; (8004c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bf0:	e002      	b.n	8004bf8 <LoopCopyDataInit>

08004bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bf6:	3304      	adds	r3, #4

08004bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bfc:	d3f9      	bcc.n	8004bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bfe:	4a0b      	ldr	r2, [pc, #44]	; (8004c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c00:	4c0b      	ldr	r4, [pc, #44]	; (8004c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c04:	e001      	b.n	8004c0a <LoopFillZerobss>

08004c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c08:	3204      	adds	r2, #4

08004c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c0c:	d3fb      	bcc.n	8004c06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c0e:	f7ff ffd7 	bl	8004bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c12:	f007 fc89 	bl	800c528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c16:	f7fc fca3 	bl	8001560 <main>
  bx  lr    
 8004c1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c24:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8004c28:	0800e8b8 	.word	0x0800e8b8
  ldr r2, =_sbss
 8004c2c:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8004c30:	20000f68 	.word	0x20000f68

08004c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c34:	e7fe      	b.n	8004c34 <ADC_IRQHandler>
	...

08004c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c3c:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <HAL_Init+0x40>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a0d      	ldr	r2, [pc, #52]	; (8004c78 <HAL_Init+0x40>)
 8004c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c48:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <HAL_Init+0x40>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <HAL_Init+0x40>)
 8004c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c54:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <HAL_Init+0x40>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a07      	ldr	r2, [pc, #28]	; (8004c78 <HAL_Init+0x40>)
 8004c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c60:	2003      	movs	r0, #3
 8004c62:	f000 fd2d 	bl	80056c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c66:	2000      	movs	r0, #0
 8004c68:	f000 f808 	bl	8004c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c6c:	f7ff fc94 	bl	8004598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40023c00 	.word	0x40023c00

08004c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c84:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <HAL_InitTick+0x54>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <HAL_InitTick+0x58>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fd45 	bl	800572a <HAL_SYSTICK_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e00e      	b.n	8004cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b0f      	cmp	r3, #15
 8004cae:	d80a      	bhi.n	8004cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb8:	f000 fd0d 	bl	80056d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cbc:	4a06      	ldr	r2, [pc, #24]	; (8004cd8 <HAL_InitTick+0x5c>)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e000      	b.n	8004cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	2000028c 	.word	0x2000028c
 8004cd4:	20000294 	.word	0x20000294
 8004cd8:	20000290 	.word	0x20000290

08004cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ce0:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_IncTick+0x20>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <HAL_IncTick+0x24>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4413      	add	r3, r2
 8004cec:	4a04      	ldr	r2, [pc, #16]	; (8004d00 <HAL_IncTick+0x24>)
 8004cee:	6013      	str	r3, [r2, #0]
}
 8004cf0:	bf00      	nop
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000294 	.word	0x20000294
 8004d00:	20000f64 	.word	0x20000f64

08004d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  return uwTick;
 8004d08:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <HAL_GetTick+0x14>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	20000f64 	.word	0x20000f64

08004d1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e033      	b.n	8004d9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d109      	bne.n	8004d4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff fc54 	bl	80045e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f003 0310 	and.w	r3, r3, #16
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d118      	bne.n	8004d8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d62:	f023 0302 	bic.w	r3, r3, #2
 8004d66:	f043 0202 	orr.w	r2, r3, #2
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 fa58 	bl	8005224 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	f023 0303 	bic.w	r3, r3, #3
 8004d82:	f043 0201 	orr.w	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40
 8004d8a:	e001      	b.n	8004d90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_ADC_Start_DMA+0x1e>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e0ce      	b.n	8004f60 <HAL_ADC_Start_DMA+0x1bc>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d018      	beq.n	8004e0a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004de8:	4b5f      	ldr	r3, [pc, #380]	; (8004f68 <HAL_ADC_Start_DMA+0x1c4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a5f      	ldr	r2, [pc, #380]	; (8004f6c <HAL_ADC_Start_DMA+0x1c8>)
 8004dee:	fba2 2303 	umull	r2, r3, r2, r3
 8004df2:	0c9a      	lsrs	r2, r3, #18
 8004df4:	4613      	mov	r3, r2
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	4413      	add	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004dfc:	e002      	b.n	8004e04 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f9      	bne.n	8004dfe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e18:	d107      	bne.n	8004e2a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e28:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	f040 8086 	bne.w	8004f46 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004e42:	f023 0301 	bic.w	r3, r3, #1
 8004e46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e78:	d106      	bne.n	8004e88 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	f023 0206 	bic.w	r2, r3, #6
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	645a      	str	r2, [r3, #68]	; 0x44
 8004e86:	e002      	b.n	8004e8e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e96:	4b36      	ldr	r3, [pc, #216]	; (8004f70 <HAL_ADC_Start_DMA+0x1cc>)
 8004e98:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	4a35      	ldr	r2, [pc, #212]	; (8004f74 <HAL_ADC_Start_DMA+0x1d0>)
 8004ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	4a34      	ldr	r2, [pc, #208]	; (8004f78 <HAL_ADC_Start_DMA+0x1d4>)
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	4a33      	ldr	r2, [pc, #204]	; (8004f7c <HAL_ADC_Start_DMA+0x1d8>)
 8004eb0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004eba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004eca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eda:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	334c      	adds	r3, #76	; 0x4c
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f000 fcd8 	bl	80058a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10f      	bne.n	8004f1c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d129      	bne.n	8004f5e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f18:	609a      	str	r2, [r3, #8]
 8004f1a:	e020      	b.n	8004f5e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a17      	ldr	r2, [pc, #92]	; (8004f80 <HAL_ADC_Start_DMA+0x1dc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d11b      	bne.n	8004f5e <HAL_ADC_Start_DMA+0x1ba>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d114      	bne.n	8004f5e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f42:	609a      	str	r2, [r3, #8]
 8004f44:	e00b      	b.n	8004f5e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f043 0210 	orr.w	r2, r3, #16
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	f043 0201 	orr.w	r2, r3, #1
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	2000028c 	.word	0x2000028c
 8004f6c:	431bde83 	.word	0x431bde83
 8004f70:	40012300 	.word	0x40012300
 8004f74:	0800541d 	.word	0x0800541d
 8004f78:	080054d7 	.word	0x080054d7
 8004f7c:	080054f3 	.word	0x080054f3
 8004f80:	40012000 	.word	0x40012000

08004f84 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_ADC_ConfigChannel+0x1c>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e113      	b.n	8005204 <HAL_ADC_ConfigChannel+0x244>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b09      	cmp	r3, #9
 8004fea:	d925      	bls.n	8005038 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68d9      	ldr	r1, [r3, #12]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	4413      	add	r3, r2
 8005000:	3b1e      	subs	r3, #30
 8005002:	2207      	movs	r2, #7
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	43da      	mvns	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	400a      	ands	r2, r1
 8005010:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68d9      	ldr	r1, [r3, #12]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	4618      	mov	r0, r3
 8005024:	4603      	mov	r3, r0
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	4403      	add	r3, r0
 800502a:	3b1e      	subs	r3, #30
 800502c:	409a      	lsls	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	60da      	str	r2, [r3, #12]
 8005036:	e022      	b.n	800507e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6919      	ldr	r1, [r3, #16]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	b29b      	uxth	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	4613      	mov	r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	4413      	add	r3, r2
 800504c:	2207      	movs	r2, #7
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	43da      	mvns	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	400a      	ands	r2, r1
 800505a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6919      	ldr	r1, [r3, #16]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	b29b      	uxth	r3, r3
 800506c:	4618      	mov	r0, r3
 800506e:	4603      	mov	r3, r0
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	4403      	add	r3, r0
 8005074:	409a      	lsls	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b06      	cmp	r3, #6
 8005084:	d824      	bhi.n	80050d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	3b05      	subs	r3, #5
 8005098:	221f      	movs	r2, #31
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	43da      	mvns	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	400a      	ands	r2, r1
 80050a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	4618      	mov	r0, r3
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	3b05      	subs	r3, #5
 80050c2:	fa00 f203 	lsl.w	r2, r0, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	635a      	str	r2, [r3, #52]	; 0x34
 80050ce:	e04c      	b.n	800516a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2b0c      	cmp	r3, #12
 80050d6:	d824      	bhi.n	8005122 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	3b23      	subs	r3, #35	; 0x23
 80050ea:	221f      	movs	r2, #31
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	43da      	mvns	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	400a      	ands	r2, r1
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	4618      	mov	r0, r3
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	3b23      	subs	r3, #35	; 0x23
 8005114:	fa00 f203 	lsl.w	r2, r0, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	631a      	str	r2, [r3, #48]	; 0x30
 8005120:	e023      	b.n	800516a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	3b41      	subs	r3, #65	; 0x41
 8005134:	221f      	movs	r2, #31
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	43da      	mvns	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	400a      	ands	r2, r1
 8005142:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	b29b      	uxth	r3, r3
 8005150:	4618      	mov	r0, r3
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	3b41      	subs	r3, #65	; 0x41
 800515e:	fa00 f203 	lsl.w	r2, r0, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800516a:	4b29      	ldr	r3, [pc, #164]	; (8005210 <HAL_ADC_ConfigChannel+0x250>)
 800516c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a28      	ldr	r2, [pc, #160]	; (8005214 <HAL_ADC_ConfigChannel+0x254>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d10f      	bne.n	8005198 <HAL_ADC_ConfigChannel+0x1d8>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b12      	cmp	r3, #18
 800517e:	d10b      	bne.n	8005198 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1d      	ldr	r2, [pc, #116]	; (8005214 <HAL_ADC_ConfigChannel+0x254>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d12b      	bne.n	80051fa <HAL_ADC_ConfigChannel+0x23a>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1c      	ldr	r2, [pc, #112]	; (8005218 <HAL_ADC_ConfigChannel+0x258>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <HAL_ADC_ConfigChannel+0x1f4>
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b11      	cmp	r3, #17
 80051b2:	d122      	bne.n	80051fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a11      	ldr	r2, [pc, #68]	; (8005218 <HAL_ADC_ConfigChannel+0x258>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d111      	bne.n	80051fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80051d6:	4b11      	ldr	r3, [pc, #68]	; (800521c <HAL_ADC_ConfigChannel+0x25c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a11      	ldr	r2, [pc, #68]	; (8005220 <HAL_ADC_ConfigChannel+0x260>)
 80051dc:	fba2 2303 	umull	r2, r3, r2, r3
 80051e0:	0c9a      	lsrs	r2, r3, #18
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80051ec:	e002      	b.n	80051f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	3b01      	subs	r3, #1
 80051f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f9      	bne.n	80051ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	40012300 	.word	0x40012300
 8005214:	40012000 	.word	0x40012000
 8005218:	10000012 	.word	0x10000012
 800521c:	2000028c 	.word	0x2000028c
 8005220:	431bde83 	.word	0x431bde83

08005224 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800522c:	4b79      	ldr	r3, [pc, #484]	; (8005414 <ADC_Init+0x1f0>)
 800522e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	431a      	orrs	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005258:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6859      	ldr	r1, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	021a      	lsls	r2, r3, #8
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800527c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6859      	ldr	r1, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800529e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6899      	ldr	r1, [r3, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	4a58      	ldr	r2, [pc, #352]	; (8005418 <ADC_Init+0x1f4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d022      	beq.n	8005302 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6899      	ldr	r1, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80052ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6899      	ldr	r1, [r3, #8]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	609a      	str	r2, [r3, #8]
 8005300:	e00f      	b.n	8005322 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005320:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0202 	bic.w	r2, r2, #2
 8005330:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6899      	ldr	r1, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	7e1b      	ldrb	r3, [r3, #24]
 800533c:	005a      	lsls	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01b      	beq.n	8005388 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800535e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800536e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6859      	ldr	r1, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	3b01      	subs	r3, #1
 800537c:	035a      	lsls	r2, r3, #13
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	e007      	b.n	8005398 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005396:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80053a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	051a      	lsls	r2, r3, #20
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6899      	ldr	r1, [r3, #8]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053da:	025a      	lsls	r2, r3, #9
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6899      	ldr	r1, [r3, #8]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	029a      	lsls	r2, r3, #10
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	609a      	str	r2, [r3, #8]
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	40012300 	.word	0x40012300
 8005418:	0f000001 	.word	0x0f000001

0800541c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005432:	2b00      	cmp	r3, #0
 8005434:	d13c      	bne.n	80054b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d12b      	bne.n	80054a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005454:	2b00      	cmp	r3, #0
 8005456:	d127      	bne.n	80054a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005462:	2b00      	cmp	r3, #0
 8005464:	d006      	beq.n	8005474 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005470:	2b00      	cmp	r3, #0
 8005472:	d119      	bne.n	80054a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0220 	bic.w	r2, r2, #32
 8005482:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d105      	bne.n	80054a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	f043 0201 	orr.w	r2, r3, #1
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff fd6b 	bl	8004f84 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80054ae:	e00e      	b.n	80054ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f7ff fd75 	bl	8004fac <HAL_ADC_ErrorCallback>
}
 80054c2:	e004      	b.n	80054ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	4798      	blx	r3
}
 80054ce:	bf00      	nop
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b084      	sub	sp, #16
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f7ff fd57 	bl	8004f98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054ea:	bf00      	nop
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2240      	movs	r2, #64	; 0x40
 8005504:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550a:	f043 0204 	orr.w	r2, r3, #4
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f7ff fd4a 	bl	8004fac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005518:	bf00      	nop
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005530:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <__NVIC_SetPriorityGrouping+0x44>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800553c:	4013      	ands	r3, r2
 800553e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800554c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005552:	4a04      	ldr	r2, [pc, #16]	; (8005564 <__NVIC_SetPriorityGrouping+0x44>)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	60d3      	str	r3, [r2, #12]
}
 8005558:	bf00      	nop
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	e000ed00 	.word	0xe000ed00

08005568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800556c:	4b04      	ldr	r3, [pc, #16]	; (8005580 <__NVIC_GetPriorityGrouping+0x18>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	0a1b      	lsrs	r3, r3, #8
 8005572:	f003 0307 	and.w	r3, r3, #7
}
 8005576:	4618      	mov	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	e000ed00 	.word	0xe000ed00

08005584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	4603      	mov	r3, r0
 800558c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800558e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005592:	2b00      	cmp	r3, #0
 8005594:	db0b      	blt.n	80055ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	f003 021f 	and.w	r2, r3, #31
 800559c:	4907      	ldr	r1, [pc, #28]	; (80055bc <__NVIC_EnableIRQ+0x38>)
 800559e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	2001      	movs	r0, #1
 80055a6:	fa00 f202 	lsl.w	r2, r0, r2
 80055aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	e000e100 	.word	0xe000e100

080055c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	6039      	str	r1, [r7, #0]
 80055ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	db0a      	blt.n	80055ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	490c      	ldr	r1, [pc, #48]	; (800560c <__NVIC_SetPriority+0x4c>)
 80055da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055de:	0112      	lsls	r2, r2, #4
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	440b      	add	r3, r1
 80055e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055e8:	e00a      	b.n	8005600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	4908      	ldr	r1, [pc, #32]	; (8005610 <__NVIC_SetPriority+0x50>)
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	3b04      	subs	r3, #4
 80055f8:	0112      	lsls	r2, r2, #4
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	440b      	add	r3, r1
 80055fe:	761a      	strb	r2, [r3, #24]
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	e000e100 	.word	0xe000e100
 8005610:	e000ed00 	.word	0xe000ed00

08005614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005614:	b480      	push	{r7}
 8005616:	b089      	sub	sp, #36	; 0x24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f1c3 0307 	rsb	r3, r3, #7
 800562e:	2b04      	cmp	r3, #4
 8005630:	bf28      	it	cs
 8005632:	2304      	movcs	r3, #4
 8005634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	3304      	adds	r3, #4
 800563a:	2b06      	cmp	r3, #6
 800563c:	d902      	bls.n	8005644 <NVIC_EncodePriority+0x30>
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	3b03      	subs	r3, #3
 8005642:	e000      	b.n	8005646 <NVIC_EncodePriority+0x32>
 8005644:	2300      	movs	r3, #0
 8005646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005648:	f04f 32ff 	mov.w	r2, #4294967295
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43da      	mvns	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	401a      	ands	r2, r3
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800565c:	f04f 31ff 	mov.w	r1, #4294967295
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	fa01 f303 	lsl.w	r3, r1, r3
 8005666:	43d9      	mvns	r1, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800566c:	4313      	orrs	r3, r2
         );
}
 800566e:	4618      	mov	r0, r3
 8005670:	3724      	adds	r7, #36	; 0x24
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
	...

0800567c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3b01      	subs	r3, #1
 8005688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800568c:	d301      	bcc.n	8005692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800568e:	2301      	movs	r3, #1
 8005690:	e00f      	b.n	80056b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005692:	4a0a      	ldr	r2, [pc, #40]	; (80056bc <SysTick_Config+0x40>)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3b01      	subs	r3, #1
 8005698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800569a:	210f      	movs	r1, #15
 800569c:	f04f 30ff 	mov.w	r0, #4294967295
 80056a0:	f7ff ff8e 	bl	80055c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056a4:	4b05      	ldr	r3, [pc, #20]	; (80056bc <SysTick_Config+0x40>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056aa:	4b04      	ldr	r3, [pc, #16]	; (80056bc <SysTick_Config+0x40>)
 80056ac:	2207      	movs	r2, #7
 80056ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	e000e010 	.word	0xe000e010

080056c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff ff29 	bl	8005520 <__NVIC_SetPriorityGrouping>
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b086      	sub	sp, #24
 80056da:	af00      	add	r7, sp, #0
 80056dc:	4603      	mov	r3, r0
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	607a      	str	r2, [r7, #4]
 80056e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056e8:	f7ff ff3e 	bl	8005568 <__NVIC_GetPriorityGrouping>
 80056ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	6978      	ldr	r0, [r7, #20]
 80056f4:	f7ff ff8e 	bl	8005614 <NVIC_EncodePriority>
 80056f8:	4602      	mov	r2, r0
 80056fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056fe:	4611      	mov	r1, r2
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff ff5d 	bl	80055c0 <__NVIC_SetPriority>
}
 8005706:	bf00      	nop
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	4603      	mov	r3, r0
 8005716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff ff31 	bl	8005584 <__NVIC_EnableIRQ>
}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff ffa2 	bl	800567c <SysTick_Config>
 8005738:	4603      	mov	r3, r0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005750:	f7ff fad8 	bl	8004d04 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e099      	b.n	8005894 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0201 	bic.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005780:	e00f      	b.n	80057a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005782:	f7ff fabf 	bl	8004d04 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b05      	cmp	r3, #5
 800578e:	d908      	bls.n	80057a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2203      	movs	r2, #3
 800579a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e078      	b.n	8005894 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e8      	bne.n	8005782 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4b38      	ldr	r3, [pc, #224]	; (800589c <HAL_DMA_Init+0x158>)
 80057bc:	4013      	ands	r3, r2
 80057be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d107      	bne.n	800580c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	4313      	orrs	r3, r2
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f023 0307 	bic.w	r3, r3, #7
 8005822:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	2b04      	cmp	r3, #4
 8005834:	d117      	bne.n	8005866 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00e      	beq.n	8005866 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fb1b 	bl	8005e84 <DMA_CheckFifoParam>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2240      	movs	r2, #64	; 0x40
 8005858:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005862:	2301      	movs	r3, #1
 8005864:	e016      	b.n	8005894 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fad2 	bl	8005e18 <DMA_CalcBaseAndBitshift>
 8005874:	4603      	mov	r3, r0
 8005876:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587c:	223f      	movs	r2, #63	; 0x3f
 800587e:	409a      	lsls	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	f010803f 	.word	0xf010803f

080058a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_DMA_Start_IT+0x26>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e040      	b.n	8005948 <HAL_DMA_Start_IT+0xa8>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d12f      	bne.n	800593a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2202      	movs	r2, #2
 80058de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	68b9      	ldr	r1, [r7, #8]
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fa64 	bl	8005dbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f8:	223f      	movs	r2, #63	; 0x3f
 80058fa:	409a      	lsls	r2, r3
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0216 	orr.w	r2, r2, #22
 800590e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005914:	2b00      	cmp	r3, #0
 8005916:	d007      	beq.n	8005928 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0208 	orr.w	r2, r2, #8
 8005926:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e005      	b.n	8005946 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005942:	2302      	movs	r3, #2
 8005944:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005946:	7dfb      	ldrb	r3, [r7, #23]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800595e:	f7ff f9d1 	bl	8004d04 <HAL_GetTick>
 8005962:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d008      	beq.n	8005982 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2280      	movs	r2, #128	; 0x80
 8005974:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e052      	b.n	8005a28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0216 	bic.w	r2, r2, #22
 8005990:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	695a      	ldr	r2, [r3, #20]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d103      	bne.n	80059b2 <HAL_DMA_Abort+0x62>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d007      	beq.n	80059c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0208 	bic.w	r2, r2, #8
 80059c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0201 	bic.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059d2:	e013      	b.n	80059fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059d4:	f7ff f996 	bl	8004d04 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b05      	cmp	r3, #5
 80059e0:	d90c      	bls.n	80059fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2220      	movs	r2, #32
 80059e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2203      	movs	r2, #3
 80059ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e015      	b.n	8005a28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e4      	bne.n	80059d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0e:	223f      	movs	r2, #63	; 0x3f
 8005a10:	409a      	lsls	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d004      	beq.n	8005a4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2280      	movs	r2, #128	; 0x80
 8005a48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e00c      	b.n	8005a68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2205      	movs	r2, #5
 8005a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0201 	bic.w	r2, r2, #1
 8005a64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a80:	4b8e      	ldr	r3, [pc, #568]	; (8005cbc <HAL_DMA_IRQHandler+0x248>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a8e      	ldr	r2, [pc, #568]	; (8005cc0 <HAL_DMA_IRQHandler+0x24c>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	0a9b      	lsrs	r3, r3, #10
 8005a8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a9e:	2208      	movs	r2, #8
 8005aa0:	409a      	lsls	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d01a      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d013      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0204 	bic.w	r2, r2, #4
 8005ac6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005acc:	2208      	movs	r2, #8
 8005ace:	409a      	lsls	r2, r3
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad8:	f043 0201 	orr.w	r2, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	409a      	lsls	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d012      	beq.n	8005b16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00b      	beq.n	8005b16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b02:	2201      	movs	r2, #1
 8005b04:	409a      	lsls	r2, r3
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0e:	f043 0202 	orr.w	r2, r3, #2
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1a:	2204      	movs	r2, #4
 8005b1c:	409a      	lsls	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4013      	ands	r3, r2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d012      	beq.n	8005b4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00b      	beq.n	8005b4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b38:	2204      	movs	r2, #4
 8005b3a:	409a      	lsls	r2, r3
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b44:	f043 0204 	orr.w	r2, r3, #4
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b50:	2210      	movs	r2, #16
 8005b52:	409a      	lsls	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4013      	ands	r3, r2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d043      	beq.n	8005be4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0308 	and.w	r3, r3, #8
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d03c      	beq.n	8005be4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6e:	2210      	movs	r2, #16
 8005b70:	409a      	lsls	r2, r3
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d018      	beq.n	8005bb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d108      	bne.n	8005ba4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d024      	beq.n	8005be4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	4798      	blx	r3
 8005ba2:	e01f      	b.n	8005be4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01b      	beq.n	8005be4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	4798      	blx	r3
 8005bb4:	e016      	b.n	8005be4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d107      	bne.n	8005bd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0208 	bic.w	r2, r2, #8
 8005bd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be8:	2220      	movs	r2, #32
 8005bea:	409a      	lsls	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 808f 	beq.w	8005d14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 8087 	beq.w	8005d14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	409a      	lsls	r2, r3
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b05      	cmp	r3, #5
 8005c1c:	d136      	bne.n	8005c8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0216 	bic.w	r2, r2, #22
 8005c2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695a      	ldr	r2, [r3, #20]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d103      	bne.n	8005c4e <HAL_DMA_IRQHandler+0x1da>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d007      	beq.n	8005c5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0208 	bic.w	r2, r2, #8
 8005c5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c62:	223f      	movs	r2, #63	; 0x3f
 8005c64:	409a      	lsls	r2, r3
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d07e      	beq.n	8005d80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	4798      	blx	r3
        }
        return;
 8005c8a:	e079      	b.n	8005d80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d01d      	beq.n	8005cd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10d      	bne.n	8005cc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d031      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	4798      	blx	r3
 8005cb8:	e02c      	b.n	8005d14 <HAL_DMA_IRQHandler+0x2a0>
 8005cba:	bf00      	nop
 8005cbc:	2000028c 	.word	0x2000028c
 8005cc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d023      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	4798      	blx	r3
 8005cd4:	e01e      	b.n	8005d14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10f      	bne.n	8005d04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0210 	bic.w	r2, r2, #16
 8005cf2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d032      	beq.n	8005d82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d022      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2205      	movs	r2, #5
 8005d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0201 	bic.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	3301      	adds	r3, #1
 8005d44:	60bb      	str	r3, [r7, #8]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d307      	bcc.n	8005d5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1f2      	bne.n	8005d40 <HAL_DMA_IRQHandler+0x2cc>
 8005d5a:	e000      	b.n	8005d5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005d5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d005      	beq.n	8005d82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	4798      	blx	r3
 8005d7e:	e000      	b.n	8005d82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005d80:	bf00      	nop
    }
  }
}
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d96:	b2db      	uxtb	r3, r3
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005dd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d108      	bne.n	8005dfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005dfa:	e007      	b.n	8005e0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	60da      	str	r2, [r3, #12]
}
 8005e0c:	bf00      	nop
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	3b10      	subs	r3, #16
 8005e28:	4a14      	ldr	r2, [pc, #80]	; (8005e7c <DMA_CalcBaseAndBitshift+0x64>)
 8005e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2e:	091b      	lsrs	r3, r3, #4
 8005e30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e32:	4a13      	ldr	r2, [pc, #76]	; (8005e80 <DMA_CalcBaseAndBitshift+0x68>)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4413      	add	r3, r2
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d909      	bls.n	8005e5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	1d1a      	adds	r2, r3, #4
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	659a      	str	r2, [r3, #88]	; 0x58
 8005e58:	e007      	b.n	8005e6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e62:	f023 0303 	bic.w	r3, r3, #3
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	aaaaaaab 	.word	0xaaaaaaab
 8005e80:	0800e498 	.word	0x0800e498

08005e84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d11f      	bne.n	8005ede <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d856      	bhi.n	8005f52 <DMA_CheckFifoParam+0xce>
 8005ea4:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <DMA_CheckFifoParam+0x28>)
 8005ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eaa:	bf00      	nop
 8005eac:	08005ebd 	.word	0x08005ebd
 8005eb0:	08005ecf 	.word	0x08005ecf
 8005eb4:	08005ebd 	.word	0x08005ebd
 8005eb8:	08005f53 	.word	0x08005f53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d046      	beq.n	8005f56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ecc:	e043      	b.n	8005f56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ed6:	d140      	bne.n	8005f5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005edc:	e03d      	b.n	8005f5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee6:	d121      	bne.n	8005f2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b03      	cmp	r3, #3
 8005eec:	d837      	bhi.n	8005f5e <DMA_CheckFifoParam+0xda>
 8005eee:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <DMA_CheckFifoParam+0x70>)
 8005ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef4:	08005f05 	.word	0x08005f05
 8005ef8:	08005f0b 	.word	0x08005f0b
 8005efc:	08005f05 	.word	0x08005f05
 8005f00:	08005f1d 	.word	0x08005f1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	73fb      	strb	r3, [r7, #15]
      break;
 8005f08:	e030      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d025      	beq.n	8005f62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f1a:	e022      	b.n	8005f62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f24:	d11f      	bne.n	8005f66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005f2a:	e01c      	b.n	8005f66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d903      	bls.n	8005f3a <DMA_CheckFifoParam+0xb6>
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d003      	beq.n	8005f40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f38:	e018      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f3e:	e015      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00e      	beq.n	8005f6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f50:	e00b      	b.n	8005f6a <DMA_CheckFifoParam+0xe6>
      break;
 8005f52:	bf00      	nop
 8005f54:	e00a      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;
 8005f56:	bf00      	nop
 8005f58:	e008      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;
 8005f5a:	bf00      	nop
 8005f5c:	e006      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;
 8005f5e:	bf00      	nop
 8005f60:	e004      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;
 8005f62:	bf00      	nop
 8005f64:	e002      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;   
 8005f66:	bf00      	nop
 8005f68:	e000      	b.n	8005f6c <DMA_CheckFifoParam+0xe8>
      break;
 8005f6a:	bf00      	nop
    }
  } 
  
  return status; 
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop

08005f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b089      	sub	sp, #36	; 0x24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f92:	2300      	movs	r3, #0
 8005f94:	61fb      	str	r3, [r7, #28]
 8005f96:	e159      	b.n	800624c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f98:	2201      	movs	r2, #1
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	f040 8148 	bne.w	8006246 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d005      	beq.n	8005fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d130      	bne.n	8006030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	2203      	movs	r2, #3
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	43db      	mvns	r3, r3
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006004:	2201      	movs	r2, #1
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	43db      	mvns	r3, r3
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4013      	ands	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	f003 0201 	and.w	r2, r3, #1
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	fa02 f303 	lsl.w	r3, r2, r3
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	4313      	orrs	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f003 0303 	and.w	r3, r3, #3
 8006038:	2b03      	cmp	r3, #3
 800603a:	d017      	beq.n	800606c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	2203      	movs	r2, #3
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	43db      	mvns	r3, r3
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	4013      	ands	r3, r2
 8006052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	4313      	orrs	r3, r2
 8006064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d123      	bne.n	80060c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	08da      	lsrs	r2, r3, #3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3208      	adds	r2, #8
 8006080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	220f      	movs	r2, #15
 8006090:	fa02 f303 	lsl.w	r3, r2, r3
 8006094:	43db      	mvns	r3, r3
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	4013      	ands	r3, r2
 800609a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f003 0307 	and.w	r3, r3, #7
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	08da      	lsrs	r2, r3, #3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3208      	adds	r2, #8
 80060ba:	69b9      	ldr	r1, [r7, #24]
 80060bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	2203      	movs	r2, #3
 80060cc:	fa02 f303 	lsl.w	r3, r2, r3
 80060d0:	43db      	mvns	r3, r3
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	4013      	ands	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f003 0203 	and.w	r2, r3, #3
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 80a2 	beq.w	8006246 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	4b57      	ldr	r3, [pc, #348]	; (8006264 <HAL_GPIO_Init+0x2e8>)
 8006108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610a:	4a56      	ldr	r2, [pc, #344]	; (8006264 <HAL_GPIO_Init+0x2e8>)
 800610c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006110:	6453      	str	r3, [r2, #68]	; 0x44
 8006112:	4b54      	ldr	r3, [pc, #336]	; (8006264 <HAL_GPIO_Init+0x2e8>)
 8006114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800611e:	4a52      	ldr	r2, [pc, #328]	; (8006268 <HAL_GPIO_Init+0x2ec>)
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	089b      	lsrs	r3, r3, #2
 8006124:	3302      	adds	r3, #2
 8006126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800612a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	220f      	movs	r2, #15
 8006136:	fa02 f303 	lsl.w	r3, r2, r3
 800613a:	43db      	mvns	r3, r3
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	4013      	ands	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a49      	ldr	r2, [pc, #292]	; (800626c <HAL_GPIO_Init+0x2f0>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d019      	beq.n	800617e <HAL_GPIO_Init+0x202>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a48      	ldr	r2, [pc, #288]	; (8006270 <HAL_GPIO_Init+0x2f4>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <HAL_GPIO_Init+0x1fe>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a47      	ldr	r2, [pc, #284]	; (8006274 <HAL_GPIO_Init+0x2f8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00d      	beq.n	8006176 <HAL_GPIO_Init+0x1fa>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a46      	ldr	r2, [pc, #280]	; (8006278 <HAL_GPIO_Init+0x2fc>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d007      	beq.n	8006172 <HAL_GPIO_Init+0x1f6>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a45      	ldr	r2, [pc, #276]	; (800627c <HAL_GPIO_Init+0x300>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d101      	bne.n	800616e <HAL_GPIO_Init+0x1f2>
 800616a:	2304      	movs	r3, #4
 800616c:	e008      	b.n	8006180 <HAL_GPIO_Init+0x204>
 800616e:	2307      	movs	r3, #7
 8006170:	e006      	b.n	8006180 <HAL_GPIO_Init+0x204>
 8006172:	2303      	movs	r3, #3
 8006174:	e004      	b.n	8006180 <HAL_GPIO_Init+0x204>
 8006176:	2302      	movs	r3, #2
 8006178:	e002      	b.n	8006180 <HAL_GPIO_Init+0x204>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <HAL_GPIO_Init+0x204>
 800617e:	2300      	movs	r3, #0
 8006180:	69fa      	ldr	r2, [r7, #28]
 8006182:	f002 0203 	and.w	r2, r2, #3
 8006186:	0092      	lsls	r2, r2, #2
 8006188:	4093      	lsls	r3, r2
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	4313      	orrs	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006190:	4935      	ldr	r1, [pc, #212]	; (8006268 <HAL_GPIO_Init+0x2ec>)
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	089b      	lsrs	r3, r3, #2
 8006196:	3302      	adds	r3, #2
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800619e:	4b38      	ldr	r3, [pc, #224]	; (8006280 <HAL_GPIO_Init+0x304>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	43db      	mvns	r3, r3
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	4013      	ands	r3, r2
 80061ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061c2:	4a2f      	ldr	r2, [pc, #188]	; (8006280 <HAL_GPIO_Init+0x304>)
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061c8:	4b2d      	ldr	r3, [pc, #180]	; (8006280 <HAL_GPIO_Init+0x304>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	43db      	mvns	r3, r3
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	4013      	ands	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061ec:	4a24      	ldr	r2, [pc, #144]	; (8006280 <HAL_GPIO_Init+0x304>)
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061f2:	4b23      	ldr	r3, [pc, #140]	; (8006280 <HAL_GPIO_Init+0x304>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	43db      	mvns	r3, r3
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	4013      	ands	r3, r2
 8006200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	4313      	orrs	r3, r2
 8006214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006216:	4a1a      	ldr	r2, [pc, #104]	; (8006280 <HAL_GPIO_Init+0x304>)
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800621c:	4b18      	ldr	r3, [pc, #96]	; (8006280 <HAL_GPIO_Init+0x304>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	43db      	mvns	r3, r3
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	4013      	ands	r3, r2
 800622a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006240:	4a0f      	ldr	r2, [pc, #60]	; (8006280 <HAL_GPIO_Init+0x304>)
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	3301      	adds	r3, #1
 800624a:	61fb      	str	r3, [r7, #28]
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	2b0f      	cmp	r3, #15
 8006250:	f67f aea2 	bls.w	8005f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	3724      	adds	r7, #36	; 0x24
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40023800 	.word	0x40023800
 8006268:	40013800 	.word	0x40013800
 800626c:	40020000 	.word	0x40020000
 8006270:	40020400 	.word	0x40020400
 8006274:	40020800 	.word	0x40020800
 8006278:	40020c00 	.word	0x40020c00
 800627c:	40021000 	.word	0x40021000
 8006280:	40013c00 	.word	0x40013c00

08006284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691a      	ldr	r2, [r3, #16]
 8006294:	887b      	ldrh	r3, [r7, #2]
 8006296:	4013      	ands	r3, r2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800629c:	2301      	movs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
 80062a0:	e001      	b.n	80062a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062a2:	2300      	movs	r3, #0
 80062a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	807b      	strh	r3, [r7, #2]
 80062c0:	4613      	mov	r3, r2
 80062c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062c4:	787b      	ldrb	r3, [r7, #1]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062ca:	887a      	ldrh	r2, [r7, #2]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062d0:	e003      	b.n	80062da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062d2:	887b      	ldrh	r3, [r7, #2]
 80062d4:	041a      	lsls	r2, r3, #16
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	619a      	str	r2, [r3, #24]
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b085      	sub	sp, #20
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	460b      	mov	r3, r1
 80062f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80062f8:	887a      	ldrh	r2, [r7, #2]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4013      	ands	r3, r2
 80062fe:	041a      	lsls	r2, r3, #16
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	43d9      	mvns	r1, r3
 8006304:	887b      	ldrh	r3, [r7, #2]
 8006306:	400b      	ands	r3, r1
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	619a      	str	r2, [r3, #24]
}
 800630e:	bf00      	nop
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
	...

0800631c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e12b      	b.n	8006586 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fe f9c8 	bl	80046d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2224      	movs	r2, #36	; 0x24
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0201 	bic.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800636e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800637e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006380:	f003 f8bc 	bl	80094fc <HAL_RCC_GetPCLK1Freq>
 8006384:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	4a81      	ldr	r2, [pc, #516]	; (8006590 <HAL_I2C_Init+0x274>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d807      	bhi.n	80063a0 <HAL_I2C_Init+0x84>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4a80      	ldr	r2, [pc, #512]	; (8006594 <HAL_I2C_Init+0x278>)
 8006394:	4293      	cmp	r3, r2
 8006396:	bf94      	ite	ls
 8006398:	2301      	movls	r3, #1
 800639a:	2300      	movhi	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	e006      	b.n	80063ae <HAL_I2C_Init+0x92>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4a7d      	ldr	r2, [pc, #500]	; (8006598 <HAL_I2C_Init+0x27c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	bf94      	ite	ls
 80063a8:	2301      	movls	r3, #1
 80063aa:	2300      	movhi	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e0e7      	b.n	8006586 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4a78      	ldr	r2, [pc, #480]	; (800659c <HAL_I2C_Init+0x280>)
 80063ba:	fba2 2303 	umull	r2, r3, r2, r3
 80063be:	0c9b      	lsrs	r3, r3, #18
 80063c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	4a6a      	ldr	r2, [pc, #424]	; (8006590 <HAL_I2C_Init+0x274>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d802      	bhi.n	80063f0 <HAL_I2C_Init+0xd4>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	3301      	adds	r3, #1
 80063ee:	e009      	b.n	8006404 <HAL_I2C_Init+0xe8>
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063f6:	fb02 f303 	mul.w	r3, r2, r3
 80063fa:	4a69      	ldr	r2, [pc, #420]	; (80065a0 <HAL_I2C_Init+0x284>)
 80063fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006400:	099b      	lsrs	r3, r3, #6
 8006402:	3301      	adds	r3, #1
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6812      	ldr	r2, [r2, #0]
 8006408:	430b      	orrs	r3, r1
 800640a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006416:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	495c      	ldr	r1, [pc, #368]	; (8006590 <HAL_I2C_Init+0x274>)
 8006420:	428b      	cmp	r3, r1
 8006422:	d819      	bhi.n	8006458 <HAL_I2C_Init+0x13c>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	1e59      	subs	r1, r3, #1
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006432:	1c59      	adds	r1, r3, #1
 8006434:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006438:	400b      	ands	r3, r1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00a      	beq.n	8006454 <HAL_I2C_Init+0x138>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	1e59      	subs	r1, r3, #1
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	fbb1 f3f3 	udiv	r3, r1, r3
 800644c:	3301      	adds	r3, #1
 800644e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006452:	e051      	b.n	80064f8 <HAL_I2C_Init+0x1dc>
 8006454:	2304      	movs	r3, #4
 8006456:	e04f      	b.n	80064f8 <HAL_I2C_Init+0x1dc>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d111      	bne.n	8006484 <HAL_I2C_Init+0x168>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	1e58      	subs	r0, r3, #1
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6859      	ldr	r1, [r3, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	440b      	add	r3, r1
 800646e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006472:	3301      	adds	r3, #1
 8006474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006478:	2b00      	cmp	r3, #0
 800647a:	bf0c      	ite	eq
 800647c:	2301      	moveq	r3, #1
 800647e:	2300      	movne	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	e012      	b.n	80064aa <HAL_I2C_Init+0x18e>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	1e58      	subs	r0, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6859      	ldr	r1, [r3, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	440b      	add	r3, r1
 8006492:	0099      	lsls	r1, r3, #2
 8006494:	440b      	add	r3, r1
 8006496:	fbb0 f3f3 	udiv	r3, r0, r3
 800649a:	3301      	adds	r3, #1
 800649c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bf0c      	ite	eq
 80064a4:	2301      	moveq	r3, #1
 80064a6:	2300      	movne	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_I2C_Init+0x196>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e022      	b.n	80064f8 <HAL_I2C_Init+0x1dc>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10e      	bne.n	80064d8 <HAL_I2C_Init+0x1bc>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	1e58      	subs	r0, r3, #1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6859      	ldr	r1, [r3, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	440b      	add	r3, r1
 80064c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80064cc:	3301      	adds	r3, #1
 80064ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064d6:	e00f      	b.n	80064f8 <HAL_I2C_Init+0x1dc>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	1e58      	subs	r0, r3, #1
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6859      	ldr	r1, [r3, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	440b      	add	r3, r1
 80064e6:	0099      	lsls	r1, r3, #2
 80064e8:	440b      	add	r3, r1
 80064ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80064ee:	3301      	adds	r3, #1
 80064f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064f8:	6879      	ldr	r1, [r7, #4]
 80064fa:	6809      	ldr	r1, [r1, #0]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69da      	ldr	r2, [r3, #28]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	431a      	orrs	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006526:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6911      	ldr	r1, [r2, #16]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	68d2      	ldr	r2, [r2, #12]
 8006532:	4311      	orrs	r1, r2
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6812      	ldr	r2, [r2, #0]
 8006538:	430b      	orrs	r3, r1
 800653a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	695a      	ldr	r2, [r3, #20]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 0201 	orr.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	000186a0 	.word	0x000186a0
 8006594:	001e847f 	.word	0x001e847f
 8006598:	003d08ff 	.word	0x003d08ff
 800659c:	431bde83 	.word	0x431bde83
 80065a0:	10624dd3 	.word	0x10624dd3

080065a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08c      	sub	sp, #48	; 0x30
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	607a      	str	r2, [r7, #4]
 80065ae:	461a      	mov	r2, r3
 80065b0:	460b      	mov	r3, r1
 80065b2:	817b      	strh	r3, [r7, #10]
 80065b4:	4613      	mov	r3, r2
 80065b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065b8:	f7fe fba4 	bl	8004d04 <HAL_GetTick>
 80065bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	f040 820b 	bne.w	80069e2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	2319      	movs	r3, #25
 80065d2:	2201      	movs	r2, #1
 80065d4:	497c      	ldr	r1, [pc, #496]	; (80067c8 <HAL_I2C_Master_Receive+0x224>)
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f002 f8f6 	bl	80087c8 <I2C_WaitOnFlagUntilTimeout>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80065e2:	2302      	movs	r3, #2
 80065e4:	e1fe      	b.n	80069e4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d101      	bne.n	80065f4 <HAL_I2C_Master_Receive+0x50>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e1f7      	b.n	80069e4 <HAL_I2C_Master_Receive+0x440>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b01      	cmp	r3, #1
 8006608:	d007      	beq.n	800661a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f042 0201 	orr.w	r2, r2, #1
 8006618:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006628:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2222      	movs	r2, #34	; 0x22
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2210      	movs	r2, #16
 8006636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	893a      	ldrh	r2, [r7, #8]
 800664a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4a5c      	ldr	r2, [pc, #368]	; (80067cc <HAL_I2C_Master_Receive+0x228>)
 800665a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800665c:	8979      	ldrh	r1, [r7, #10]
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f001 fea4 	bl	80083b0 <I2C_MasterRequestRead>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e1b8      	b.n	80069e4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d113      	bne.n	80066a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800667a:	2300      	movs	r3, #0
 800667c:	623b      	str	r3, [r7, #32]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	623b      	str	r3, [r7, #32]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	623b      	str	r3, [r7, #32]
 800668e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	e18c      	b.n	80069bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d11b      	bne.n	80066e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ba:	2300      	movs	r3, #0
 80066bc:	61fb      	str	r3, [r7, #28]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	e16c      	b.n	80069bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d11b      	bne.n	8006722 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006708:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800670a:	2300      	movs	r3, #0
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	e14c      	b.n	80069bc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006730:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006732:	2300      	movs	r3, #0
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006748:	e138      	b.n	80069bc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800674e:	2b03      	cmp	r3, #3
 8006750:	f200 80f1 	bhi.w	8006936 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006758:	2b01      	cmp	r3, #1
 800675a:	d123      	bne.n	80067a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800675c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800675e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f002 f9bb 	bl	8008adc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e139      	b.n	80069e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	691a      	ldr	r2, [r3, #16]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067a2:	e10b      	b.n	80069bc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d14e      	bne.n	800684a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	2200      	movs	r2, #0
 80067b4:	4906      	ldr	r1, [pc, #24]	; (80067d0 <HAL_I2C_Master_Receive+0x22c>)
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f002 f806 	bl	80087c8 <I2C_WaitOnFlagUntilTimeout>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d008      	beq.n	80067d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e10e      	b.n	80069e4 <HAL_I2C_Master_Receive+0x440>
 80067c6:	bf00      	nop
 80067c8:	00100002 	.word	0x00100002
 80067cc:	ffff0000 	.word	0xffff0000
 80067d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006800:	3b01      	subs	r3, #1
 8006802:	b29a      	uxth	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800680c:	b29b      	uxth	r3, r3
 800680e:	3b01      	subs	r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	691a      	ldr	r2, [r3, #16]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	1c5a      	adds	r2, r3, #1
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683e:	b29b      	uxth	r3, r3
 8006840:	3b01      	subs	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006848:	e0b8      	b.n	80069bc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	2200      	movs	r2, #0
 8006852:	4966      	ldr	r1, [pc, #408]	; (80069ec <HAL_I2C_Master_Receive+0x448>)
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f001 ffb7 	bl	80087c8 <I2C_WaitOnFlagUntilTimeout>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e0bf      	b.n	80069e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006872:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691a      	ldr	r2, [r3, #16]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006890:	3b01      	subs	r3, #1
 8006892:	b29a      	uxth	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b01      	subs	r3, #1
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	2200      	movs	r2, #0
 80068ae:	494f      	ldr	r1, [pc, #316]	; (80069ec <HAL_I2C_Master_Receive+0x448>)
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f001 ff89 	bl	80087c8 <I2C_WaitOnFlagUntilTimeout>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e091      	b.n	80069e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691a      	ldr	r2, [r3, #16]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ec:	3b01      	subs	r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	691a      	ldr	r2, [r3, #16]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800691e:	3b01      	subs	r3, #1
 8006920:	b29a      	uxth	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692a:	b29b      	uxth	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006934:	e042      	b.n	80069bc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006938:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f002 f8ce 	bl	8008adc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e04c      	b.n	80069e4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	691a      	ldr	r2, [r3, #16]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	b2d2      	uxtb	r2, r2
 8006956:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006966:	3b01      	subs	r3, #1
 8006968:	b29a      	uxth	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006972:	b29b      	uxth	r3, r3
 8006974:	3b01      	subs	r3, #1
 8006976:	b29a      	uxth	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b04      	cmp	r3, #4
 8006988:	d118      	bne.n	80069bc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	691a      	ldr	r2, [r3, #16]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f47f aec2 	bne.w	800674a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	e000      	b.n	80069e4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80069e2:	2302      	movs	r3, #2
  }
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3728      	adds	r7, #40	; 0x28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	00010004 	.word	0x00010004

080069f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	4608      	mov	r0, r1
 80069fa:	4611      	mov	r1, r2
 80069fc:	461a      	mov	r2, r3
 80069fe:	4603      	mov	r3, r0
 8006a00:	817b      	strh	r3, [r7, #10]
 8006a02:	460b      	mov	r3, r1
 8006a04:	813b      	strh	r3, [r7, #8]
 8006a06:	4613      	mov	r3, r2
 8006a08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a0a:	f7fe f97b 	bl	8004d04 <HAL_GetTick>
 8006a0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	f040 80d9 	bne.w	8006bd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	2319      	movs	r3, #25
 8006a24:	2201      	movs	r2, #1
 8006a26:	496d      	ldr	r1, [pc, #436]	; (8006bdc <HAL_I2C_Mem_Write+0x1ec>)
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f001 fecd 	bl	80087c8 <I2C_WaitOnFlagUntilTimeout>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a34:	2302      	movs	r3, #2
 8006a36:	e0cc      	b.n	8006bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <HAL_I2C_Mem_Write+0x56>
 8006a42:	2302      	movs	r3, #2
 8006a44:	e0c5      	b.n	8006bd2 <HAL_I2C_Mem_Write+0x1e2>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d007      	beq.n	8006a6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 0201 	orr.w	r2, r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2221      	movs	r2, #33	; 0x21
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2240      	movs	r2, #64	; 0x40
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a3a      	ldr	r2, [r7, #32]
 8006a96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4a4d      	ldr	r2, [pc, #308]	; (8006be0 <HAL_I2C_Mem_Write+0x1f0>)
 8006aac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006aae:	88f8      	ldrh	r0, [r7, #6]
 8006ab0:	893a      	ldrh	r2, [r7, #8]
 8006ab2:	8979      	ldrh	r1, [r7, #10]
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	4603      	mov	r3, r0
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f001 fd44 	bl	800854c <I2C_RequestMemoryWrite>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d052      	beq.n	8006b70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e081      	b.n	8006bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f001 ff4e 	bl	8008974 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00d      	beq.n	8006afa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	2b04      	cmp	r3, #4
 8006ae4:	d107      	bne.n	8006af6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006af4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e06b      	b.n	8006bd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	781a      	ldrb	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d11b      	bne.n	8006b70 <HAL_I2C_Mem_Write+0x180>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d017      	beq.n	8006b70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	781a      	ldrb	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1aa      	bne.n	8006ace <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f001 ff3a 	bl	80089f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00d      	beq.n	8006ba4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d107      	bne.n	8006ba0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e016      	b.n	8006bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	e000      	b.n	8006bd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006bd0:	2302      	movs	r3, #2
  }
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	00100002 	.word	0x00100002
 8006be0:	ffff0000 	.word	0xffff0000

08006be4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c04:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c0c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	2b10      	cmp	r3, #16
 8006c12:	d003      	beq.n	8006c1c <HAL_I2C_EV_IRQHandler+0x38>
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	2b40      	cmp	r3, #64	; 0x40
 8006c18:	f040 80c1 	bne.w	8006d9e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10d      	bne.n	8006c52 <HAL_I2C_EV_IRQHandler+0x6e>
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006c3c:	d003      	beq.n	8006c46 <HAL_I2C_EV_IRQHandler+0x62>
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006c44:	d101      	bne.n	8006c4a <HAL_I2C_EV_IRQHandler+0x66>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e000      	b.n	8006c4c <HAL_I2C_EV_IRQHandler+0x68>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	f000 8132 	beq.w	8006eb6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00c      	beq.n	8006c76 <HAL_I2C_EV_IRQHandler+0x92>
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	0a5b      	lsrs	r3, r3, #9
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d006      	beq.n	8006c76 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 ffbc 	bl	8008be6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fd83 	bl	800777a <I2C_Master_SB>
 8006c74:	e092      	b.n	8006d9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	08db      	lsrs	r3, r3, #3
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d009      	beq.n	8006c96 <HAL_I2C_EV_IRQHandler+0xb2>
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	0a5b      	lsrs	r3, r3, #9
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fdf9 	bl	8007886 <I2C_Master_ADD10>
 8006c94:	e082      	b.n	8006d9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	085b      	lsrs	r3, r3, #1
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d009      	beq.n	8006cb6 <HAL_I2C_EV_IRQHandler+0xd2>
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	0a5b      	lsrs	r3, r3, #9
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fe13 	bl	80078da <I2C_Master_ADDR>
 8006cb4:	e072      	b.n	8006d9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	089b      	lsrs	r3, r3, #2
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d03b      	beq.n	8006d3a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd0:	f000 80f3 	beq.w	8006eba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	09db      	lsrs	r3, r3, #7
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00f      	beq.n	8006d00 <HAL_I2C_EV_IRQHandler+0x11c>
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	0a9b      	lsrs	r3, r3, #10
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d009      	beq.n	8006d00 <HAL_I2C_EV_IRQHandler+0x11c>
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	089b      	lsrs	r3, r3, #2
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d103      	bne.n	8006d00 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f9f3 	bl	80070e4 <I2C_MasterTransmit_TXE>
 8006cfe:	e04d      	b.n	8006d9c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	089b      	lsrs	r3, r3, #2
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 80d6 	beq.w	8006eba <HAL_I2C_EV_IRQHandler+0x2d6>
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	0a5b      	lsrs	r3, r3, #9
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 80cf 	beq.w	8006eba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	2b21      	cmp	r3, #33	; 0x21
 8006d20:	d103      	bne.n	8006d2a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa7a 	bl	800721c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d28:	e0c7      	b.n	8006eba <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	2b40      	cmp	r3, #64	; 0x40
 8006d2e:	f040 80c4 	bne.w	8006eba <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fae8 	bl	8007308 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d38:	e0bf      	b.n	8006eba <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d48:	f000 80b7 	beq.w	8006eba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	099b      	lsrs	r3, r3, #6
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00f      	beq.n	8006d78 <HAL_I2C_EV_IRQHandler+0x194>
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	0a9b      	lsrs	r3, r3, #10
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d009      	beq.n	8006d78 <HAL_I2C_EV_IRQHandler+0x194>
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	089b      	lsrs	r3, r3, #2
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fb5d 	bl	8007430 <I2C_MasterReceive_RXNE>
 8006d76:	e011      	b.n	8006d9c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	089b      	lsrs	r3, r3, #2
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 809a 	beq.w	8006eba <HAL_I2C_EV_IRQHandler+0x2d6>
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	0a5b      	lsrs	r3, r3, #9
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 8093 	beq.w	8006eba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fc06 	bl	80075a6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d9a:	e08e      	b.n	8006eba <HAL_I2C_EV_IRQHandler+0x2d6>
 8006d9c:	e08d      	b.n	8006eba <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d004      	beq.n	8006db0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	61fb      	str	r3, [r7, #28]
 8006dae:	e007      	b.n	8006dc0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	085b      	lsrs	r3, r3, #1
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d012      	beq.n	8006df2 <HAL_I2C_EV_IRQHandler+0x20e>
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	0a5b      	lsrs	r3, r3, #9
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00c      	beq.n	8006df2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006de8:	69b9      	ldr	r1, [r7, #24]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 ffc4 	bl	8007d78 <I2C_Slave_ADDR>
 8006df0:	e066      	b.n	8006ec0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	091b      	lsrs	r3, r3, #4
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d009      	beq.n	8006e12 <HAL_I2C_EV_IRQHandler+0x22e>
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	0a5b      	lsrs	r3, r3, #9
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fffe 	bl	8007e0c <I2C_Slave_STOPF>
 8006e10:	e056      	b.n	8006ec0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	2b21      	cmp	r3, #33	; 0x21
 8006e16:	d002      	beq.n	8006e1e <HAL_I2C_EV_IRQHandler+0x23a>
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	2b29      	cmp	r3, #41	; 0x29
 8006e1c:	d125      	bne.n	8006e6a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	09db      	lsrs	r3, r3, #7
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00f      	beq.n	8006e4a <HAL_I2C_EV_IRQHandler+0x266>
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	0a9b      	lsrs	r3, r3, #10
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d009      	beq.n	8006e4a <HAL_I2C_EV_IRQHandler+0x266>
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	089b      	lsrs	r3, r3, #2
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d103      	bne.n	8006e4a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 feda 	bl	8007bfc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e48:	e039      	b.n	8006ebe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	089b      	lsrs	r3, r3, #2
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d033      	beq.n	8006ebe <HAL_I2C_EV_IRQHandler+0x2da>
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	0a5b      	lsrs	r3, r3, #9
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d02d      	beq.n	8006ebe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 ff07 	bl	8007c76 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e68:	e029      	b.n	8006ebe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	099b      	lsrs	r3, r3, #6
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00f      	beq.n	8006e96 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	0a9b      	lsrs	r3, r3, #10
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d009      	beq.n	8006e96 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	089b      	lsrs	r3, r3, #2
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d103      	bne.n	8006e96 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 ff12 	bl	8007cb8 <I2C_SlaveReceive_RXNE>
 8006e94:	e014      	b.n	8006ec0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	089b      	lsrs	r3, r3, #2
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00e      	beq.n	8006ec0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	0a5b      	lsrs	r3, r3, #9
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d008      	beq.n	8006ec0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 ff40 	bl	8007d34 <I2C_SlaveReceive_BTF>
 8006eb4:	e004      	b.n	8006ec0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006eb6:	bf00      	nop
 8006eb8:	e002      	b.n	8006ec0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006eba:	bf00      	nop
 8006ebc:	e000      	b.n	8006ec0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ebe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006ec0:	3720      	adds	r7, #32
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b08a      	sub	sp, #40	; 0x28
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ee8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	0a1b      	lsrs	r3, r3, #8
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00e      	beq.n	8006f14 <HAL_I2C_ER_IRQHandler+0x4e>
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	0a1b      	lsrs	r3, r3, #8
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d008      	beq.n	8006f14 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	f043 0301 	orr.w	r3, r3, #1
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f12:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	0a5b      	lsrs	r3, r3, #9
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00e      	beq.n	8006f3e <HAL_I2C_ER_IRQHandler+0x78>
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	0a1b      	lsrs	r3, r3, #8
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d008      	beq.n	8006f3e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	f043 0302 	orr.w	r3, r3, #2
 8006f32:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006f3c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	0a9b      	lsrs	r3, r3, #10
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d03f      	beq.n	8006fca <HAL_I2C_ER_IRQHandler+0x104>
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	0a1b      	lsrs	r3, r3, #8
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d039      	beq.n	8006fca <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006f56:	7efb      	ldrb	r3, [r7, #27]
 8006f58:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f68:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006f70:	7ebb      	ldrb	r3, [r7, #26]
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	d112      	bne.n	8006f9c <HAL_I2C_ER_IRQHandler+0xd6>
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10f      	bne.n	8006f9c <HAL_I2C_ER_IRQHandler+0xd6>
 8006f7c:	7cfb      	ldrb	r3, [r7, #19]
 8006f7e:	2b21      	cmp	r3, #33	; 0x21
 8006f80:	d008      	beq.n	8006f94 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006f82:	7cfb      	ldrb	r3, [r7, #19]
 8006f84:	2b29      	cmp	r3, #41	; 0x29
 8006f86:	d005      	beq.n	8006f94 <HAL_I2C_ER_IRQHandler+0xce>
 8006f88:	7cfb      	ldrb	r3, [r7, #19]
 8006f8a:	2b28      	cmp	r3, #40	; 0x28
 8006f8c:	d106      	bne.n	8006f9c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b21      	cmp	r3, #33	; 0x21
 8006f92:	d103      	bne.n	8006f9c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 f869 	bl	800806c <I2C_Slave_AF>
 8006f9a:	e016      	b.n	8006fca <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fa4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	f043 0304 	orr.w	r3, r3, #4
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006fae:	7efb      	ldrb	r3, [r7, #27]
 8006fb0:	2b10      	cmp	r3, #16
 8006fb2:	d002      	beq.n	8006fba <HAL_I2C_ER_IRQHandler+0xf4>
 8006fb4:	7efb      	ldrb	r3, [r7, #27]
 8006fb6:	2b40      	cmp	r3, #64	; 0x40
 8006fb8:	d107      	bne.n	8006fca <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fc8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	0adb      	lsrs	r3, r3, #11
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00e      	beq.n	8006ff4 <HAL_I2C_ER_IRQHandler+0x12e>
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	0a1b      	lsrs	r3, r3, #8
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d008      	beq.n	8006ff4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	f043 0308 	orr.w	r3, r3, #8
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006ff2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d008      	beq.n	800700c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	431a      	orrs	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 f8a0 	bl	800814c <I2C_ITError>
  }
}
 800700c:	bf00      	nop
 800700e:	3728      	adds	r7, #40	; 0x28
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	460b      	mov	r3, r1
 800706e:	70fb      	strb	r3, [r7, #3]
 8007070:	4613      	mov	r3, r2
 8007072:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007106:	2b00      	cmp	r3, #0
 8007108:	d150      	bne.n	80071ac <I2C_MasterTransmit_TXE+0xc8>
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	2b21      	cmp	r3, #33	; 0x21
 800710e:	d14d      	bne.n	80071ac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b08      	cmp	r3, #8
 8007114:	d01d      	beq.n	8007152 <I2C_MasterTransmit_TXE+0x6e>
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b20      	cmp	r3, #32
 800711a:	d01a      	beq.n	8007152 <I2C_MasterTransmit_TXE+0x6e>
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007122:	d016      	beq.n	8007152 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007132:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2211      	movs	r2, #17
 8007138:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff ff62 	bl	8007014 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007150:	e060      	b.n	8007214 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007160:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007170:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b40      	cmp	r3, #64	; 0x40
 800718a:	d107      	bne.n	800719c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff ff7d 	bl	8007094 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800719a:	e03b      	b.n	8007214 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff ff35 	bl	8007014 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80071aa:	e033      	b.n	8007214 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
 80071ae:	2b21      	cmp	r3, #33	; 0x21
 80071b0:	d005      	beq.n	80071be <I2C_MasterTransmit_TXE+0xda>
 80071b2:	7bbb      	ldrb	r3, [r7, #14]
 80071b4:	2b40      	cmp	r3, #64	; 0x40
 80071b6:	d12d      	bne.n	8007214 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	2b22      	cmp	r3, #34	; 0x22
 80071bc:	d12a      	bne.n	8007214 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d108      	bne.n	80071da <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071d6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80071d8:	e01c      	b.n	8007214 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b40      	cmp	r3, #64	; 0x40
 80071e4:	d103      	bne.n	80071ee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f88e 	bl	8007308 <I2C_MemoryTransmit_TXE_BTF>
}
 80071ec:	e012      	b.n	8007214 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	781a      	ldrb	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007212:	e7ff      	b.n	8007214 <I2C_MasterTransmit_TXE+0x130>
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b21      	cmp	r3, #33	; 0x21
 8007234:	d164      	bne.n	8007300 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800723a:	b29b      	uxth	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d012      	beq.n	8007266 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	781a      	ldrb	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	1c5a      	adds	r2, r3, #1
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800725a:	b29b      	uxth	r3, r3
 800725c:	3b01      	subs	r3, #1
 800725e:	b29a      	uxth	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007264:	e04c      	b.n	8007300 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b08      	cmp	r3, #8
 800726a:	d01d      	beq.n	80072a8 <I2C_MasterTransmit_BTF+0x8c>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b20      	cmp	r3, #32
 8007270:	d01a      	beq.n	80072a8 <I2C_MasterTransmit_BTF+0x8c>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007278:	d016      	beq.n	80072a8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007288:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2211      	movs	r2, #17
 800728e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2220      	movs	r2, #32
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7ff feb7 	bl	8007014 <HAL_I2C_MasterTxCpltCallback>
}
 80072a6:	e02b      	b.n	8007300 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072b6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072c6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2220      	movs	r2, #32
 80072d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b40      	cmp	r3, #64	; 0x40
 80072e0:	d107      	bne.n	80072f2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff fed2 	bl	8007094 <HAL_I2C_MemTxCpltCallback>
}
 80072f0:	e006      	b.n	8007300 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7ff fe8a 	bl	8007014 <HAL_I2C_MasterTxCpltCallback>
}
 8007300:	bf00      	nop
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007316:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731c:	2b00      	cmp	r3, #0
 800731e:	d11d      	bne.n	800735c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007324:	2b01      	cmp	r3, #1
 8007326:	d10b      	bne.n	8007340 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800732c:	b2da      	uxtb	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007338:	1c9a      	adds	r2, r3, #2
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800733e:	e073      	b.n	8007428 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007344:	b29b      	uxth	r3, r3
 8007346:	121b      	asrs	r3, r3, #8
 8007348:	b2da      	uxtb	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	651a      	str	r2, [r3, #80]	; 0x50
}
 800735a:	e065      	b.n	8007428 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007360:	2b01      	cmp	r3, #1
 8007362:	d10b      	bne.n	800737c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007368:	b2da      	uxtb	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	651a      	str	r2, [r3, #80]	; 0x50
}
 800737a:	e055      	b.n	8007428 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007380:	2b02      	cmp	r3, #2
 8007382:	d151      	bne.n	8007428 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	2b22      	cmp	r3, #34	; 0x22
 8007388:	d10d      	bne.n	80073a6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007398:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739e:	1c5a      	adds	r2, r3, #1
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80073a4:	e040      	b.n	8007428 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d015      	beq.n	80073dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	2b21      	cmp	r3, #33	; 0x21
 80073b4:	d112      	bne.n	80073dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	781a      	ldrb	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80073da:	e025      	b.n	8007428 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d120      	bne.n	8007428 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	2b21      	cmp	r3, #33	; 0x21
 80073ea:	d11d      	bne.n	8007428 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073fa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800740a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff fe36 	bl	8007094 <HAL_I2C_MemTxCpltCallback>
}
 8007428:	bf00      	nop
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b22      	cmp	r3, #34	; 0x22
 8007442:	f040 80ac 	bne.w	800759e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744a:	b29b      	uxth	r3, r3
 800744c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b03      	cmp	r3, #3
 8007452:	d921      	bls.n	8007498 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	691a      	ldr	r2, [r3, #16]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007470:	b29b      	uxth	r3, r3
 8007472:	3b01      	subs	r3, #1
 8007474:	b29a      	uxth	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800747e:	b29b      	uxth	r3, r3
 8007480:	2b03      	cmp	r3, #3
 8007482:	f040 808c 	bne.w	800759e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007494:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007496:	e082      	b.n	800759e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	2b02      	cmp	r3, #2
 800749e:	d075      	beq.n	800758c <I2C_MasterReceive_RXNE+0x15c>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d002      	beq.n	80074ac <I2C_MasterReceive_RXNE+0x7c>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d16f      	bne.n	800758c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 fae3 	bl	8008a78 <I2C_WaitOnSTOPRequestThroughIT>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d142      	bne.n	800753e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074c6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	691a      	ldr	r2, [r3, #16]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3b01      	subs	r3, #1
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2220      	movs	r2, #32
 8007502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b40      	cmp	r3, #64	; 0x40
 8007510:	d10a      	bne.n	8007528 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff fdc1 	bl	80070a8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007526:	e03a      	b.n	800759e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2212      	movs	r2, #18
 8007534:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff fd76 	bl	8007028 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800753c:	e02f      	b.n	800759e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800754c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	691a      	ldr	r2, [r3, #16]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	b2d2      	uxtb	r2, r2
 800755a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756a:	b29b      	uxth	r3, r3
 800756c:	3b01      	subs	r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7ff fd99 	bl	80070bc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800758a:	e008      	b.n	800759e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800759a:	605a      	str	r2, [r3, #4]
}
 800759c:	e7ff      	b.n	800759e <I2C_MasterReceive_RXNE+0x16e>
 800759e:	bf00      	nop
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b084      	sub	sp, #16
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	d11b      	bne.n	80075f6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075cc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	691a      	ldr	r2, [r3, #16]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	b2d2      	uxtb	r2, r2
 80075da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80075f4:	e0bd      	b.n	8007772 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d129      	bne.n	8007654 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800760e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b04      	cmp	r3, #4
 8007614:	d00a      	beq.n	800762c <I2C_MasterReceive_BTF+0x86>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d007      	beq.n	800762c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800762a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691a      	ldr	r2, [r3, #16]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007648:	b29b      	uxth	r3, r3
 800764a:	3b01      	subs	r3, #1
 800764c:	b29a      	uxth	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007652:	e08e      	b.n	8007772 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007658:	b29b      	uxth	r3, r3
 800765a:	2b02      	cmp	r3, #2
 800765c:	d176      	bne.n	800774c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d002      	beq.n	800766a <I2C_MasterReceive_BTF+0xc4>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b10      	cmp	r3, #16
 8007668:	d108      	bne.n	800767c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	e019      	b.n	80076b0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b04      	cmp	r3, #4
 8007680:	d002      	beq.n	8007688 <I2C_MasterReceive_BTF+0xe2>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b02      	cmp	r3, #2
 8007686:	d108      	bne.n	800769a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	e00a      	b.n	80076b0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2b10      	cmp	r3, #16
 800769e:	d007      	beq.n	80076b0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	691a      	ldr	r2, [r3, #16]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ba:	b2d2      	uxtb	r2, r2
 80076bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	691a      	ldr	r2, [r3, #16]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	b2d2      	uxtb	r2, r2
 80076e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	3b01      	subs	r3, #1
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800770a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2220      	movs	r2, #32
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b40      	cmp	r3, #64	; 0x40
 800771e:	d10a      	bne.n	8007736 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7ff fcba 	bl	80070a8 <HAL_I2C_MemRxCpltCallback>
}
 8007734:	e01d      	b.n	8007772 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2212      	movs	r2, #18
 8007742:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f7ff fc6f 	bl	8007028 <HAL_I2C_MasterRxCpltCallback>
}
 800774a:	e012      	b.n	8007772 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691a      	ldr	r2, [r3, #16]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	b2d2      	uxtb	r2, r2
 8007758:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007768:	b29b      	uxth	r3, r3
 800776a:	3b01      	subs	r3, #1
 800776c:	b29a      	uxth	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007772:	bf00      	nop
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800777a:	b480      	push	{r7}
 800777c:	b083      	sub	sp, #12
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	d117      	bne.n	80077be <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007792:	2b00      	cmp	r3, #0
 8007794:	d109      	bne.n	80077aa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779a:	b2db      	uxtb	r3, r3
 800779c:	461a      	mov	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077a6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80077a8:	e067      	b.n	800787a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f043 0301 	orr.w	r3, r3, #1
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	611a      	str	r2, [r3, #16]
}
 80077bc:	e05d      	b.n	800787a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077c6:	d133      	bne.n	8007830 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b21      	cmp	r3, #33	; 0x21
 80077d2:	d109      	bne.n	80077e8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	461a      	mov	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80077e4:	611a      	str	r2, [r3, #16]
 80077e6:	e008      	b.n	80077fa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	f043 0301 	orr.w	r3, r3, #1
 80077f2:	b2da      	uxtb	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d004      	beq.n	800780c <I2C_Master_SB+0x92>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d108      	bne.n	800781e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007810:	2b00      	cmp	r3, #0
 8007812:	d032      	beq.n	800787a <I2C_Master_SB+0x100>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d02d      	beq.n	800787a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800782c:	605a      	str	r2, [r3, #4]
}
 800782e:	e024      	b.n	800787a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10e      	bne.n	8007856 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783c:	b29b      	uxth	r3, r3
 800783e:	11db      	asrs	r3, r3, #7
 8007840:	b2db      	uxtb	r3, r3
 8007842:	f003 0306 	and.w	r3, r3, #6
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f063 030f 	orn	r3, r3, #15
 800784c:	b2da      	uxtb	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	611a      	str	r2, [r3, #16]
}
 8007854:	e011      	b.n	800787a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800785a:	2b01      	cmp	r3, #1
 800785c:	d10d      	bne.n	800787a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007862:	b29b      	uxth	r3, r3
 8007864:	11db      	asrs	r3, r3, #7
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0306 	and.w	r3, r3, #6
 800786c:	b2db      	uxtb	r3, r3
 800786e:	f063 030e 	orn	r3, r3, #14
 8007872:	b2da      	uxtb	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	611a      	str	r2, [r3, #16]
}
 800787a:	bf00      	nop
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007886:	b480      	push	{r7}
 8007888:	b083      	sub	sp, #12
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007892:	b2da      	uxtb	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d004      	beq.n	80078ac <I2C_Master_ADD10+0x26>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d108      	bne.n	80078be <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00c      	beq.n	80078ce <I2C_Master_ADD10+0x48>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d007      	beq.n	80078ce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078cc:	605a      	str	r2, [r3, #4]
  }
}
 80078ce:	bf00      	nop
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80078da:	b480      	push	{r7}
 80078dc:	b091      	sub	sp, #68	; 0x44
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b22      	cmp	r3, #34	; 0x22
 8007902:	f040 8169 	bne.w	8007bd8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10f      	bne.n	800792e <I2C_Master_ADDR+0x54>
 800790e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007912:	2b40      	cmp	r3, #64	; 0x40
 8007914:	d10b      	bne.n	800792e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007916:	2300      	movs	r3, #0
 8007918:	633b      	str	r3, [r7, #48]	; 0x30
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	633b      	str	r3, [r7, #48]	; 0x30
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	633b      	str	r3, [r7, #48]	; 0x30
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	e160      	b.n	8007bf0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007932:	2b00      	cmp	r3, #0
 8007934:	d11d      	bne.n	8007972 <I2C_Master_ADDR+0x98>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800793e:	d118      	bne.n	8007972 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007940:	2300      	movs	r3, #0
 8007942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007954:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007964:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	651a      	str	r2, [r3, #80]	; 0x50
 8007970:	e13e      	b.n	8007bf0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007976:	b29b      	uxth	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d113      	bne.n	80079a4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800797c:	2300      	movs	r3, #0
 800797e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	62bb      	str	r3, [r7, #40]	; 0x28
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007990:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	e115      	b.n	8007bd0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	f040 808a 	bne.w	8007ac4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80079b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079b6:	d137      	bne.n	8007a28 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079c6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079d6:	d113      	bne.n	8007a00 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079e6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079e8:	2300      	movs	r3, #0
 80079ea:	627b      	str	r3, [r7, #36]	; 0x24
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	627b      	str	r3, [r7, #36]	; 0x24
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	e0e7      	b.n	8007bd0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a00:	2300      	movs	r3, #0
 8007a02:	623b      	str	r3, [r7, #32]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	623b      	str	r3, [r7, #32]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	623b      	str	r3, [r7, #32]
 8007a14:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	e0d3      	b.n	8007bd0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2a:	2b08      	cmp	r3, #8
 8007a2c:	d02e      	beq.n	8007a8c <I2C_Master_ADDR+0x1b2>
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	d02b      	beq.n	8007a8c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a36:	2b12      	cmp	r3, #18
 8007a38:	d102      	bne.n	8007a40 <I2C_Master_ADDR+0x166>
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d125      	bne.n	8007a8c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a42:	2b04      	cmp	r3, #4
 8007a44:	d00e      	beq.n	8007a64 <I2C_Master_ADDR+0x18a>
 8007a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d00b      	beq.n	8007a64 <I2C_Master_ADDR+0x18a>
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	2b10      	cmp	r3, #16
 8007a50:	d008      	beq.n	8007a64 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a60:	601a      	str	r2, [r3, #0]
 8007a62:	e007      	b.n	8007a74 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a72:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a74:	2300      	movs	r3, #0
 8007a76:	61fb      	str	r3, [r7, #28]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	61fb      	str	r3, [r7, #28]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	61fb      	str	r3, [r7, #28]
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	e0a1      	b.n	8007bd0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a9a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	61bb      	str	r3, [r7, #24]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	61bb      	str	r3, [r7, #24]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	61bb      	str	r3, [r7, #24]
 8007ab0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	e085      	b.n	8007bd0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d14d      	bne.n	8007b6a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d016      	beq.n	8007b02 <I2C_Master_ADDR+0x228>
 8007ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d013      	beq.n	8007b02 <I2C_Master_ADDR+0x228>
 8007ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007adc:	2b10      	cmp	r3, #16
 8007ade:	d010      	beq.n	8007b02 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	e007      	b.n	8007b12 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b10:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b20:	d117      	bne.n	8007b52 <I2C_Master_ADDR+0x278>
 8007b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b28:	d00b      	beq.n	8007b42 <I2C_Master_ADDR+0x268>
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d008      	beq.n	8007b42 <I2C_Master_ADDR+0x268>
 8007b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b32:	2b08      	cmp	r3, #8
 8007b34:	d005      	beq.n	8007b42 <I2C_Master_ADDR+0x268>
 8007b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b38:	2b10      	cmp	r3, #16
 8007b3a:	d002      	beq.n	8007b42 <I2C_Master_ADDR+0x268>
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	d107      	bne.n	8007b52 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b52:	2300      	movs	r3, #0
 8007b54:	617b      	str	r3, [r7, #20]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	617b      	str	r3, [r7, #20]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	617b      	str	r3, [r7, #20]
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	e032      	b.n	8007bd0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b78:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b88:	d117      	bne.n	8007bba <I2C_Master_ADDR+0x2e0>
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b90:	d00b      	beq.n	8007baa <I2C_Master_ADDR+0x2d0>
 8007b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d008      	beq.n	8007baa <I2C_Master_ADDR+0x2d0>
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	2b08      	cmp	r3, #8
 8007b9c:	d005      	beq.n	8007baa <I2C_Master_ADDR+0x2d0>
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba0:	2b10      	cmp	r3, #16
 8007ba2:	d002      	beq.n	8007baa <I2C_Master_ADDR+0x2d0>
 8007ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba6:	2b20      	cmp	r3, #32
 8007ba8:	d107      	bne.n	8007bba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007bb8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bba:	2300      	movs	r3, #0
 8007bbc:	613b      	str	r3, [r7, #16]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	613b      	str	r3, [r7, #16]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007bd6:	e00b      	b.n	8007bf0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	68fb      	ldr	r3, [r7, #12]
}
 8007bee:	e7ff      	b.n	8007bf0 <I2C_Master_ADDR+0x316>
 8007bf0:	bf00      	nop
 8007bf2:	3744      	adds	r7, #68	; 0x44
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d02b      	beq.n	8007c6e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	781a      	ldrb	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d114      	bne.n	8007c6e <I2C_SlaveTransmit_TXE+0x72>
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	2b29      	cmp	r3, #41	; 0x29
 8007c48:	d111      	bne.n	8007c6e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c58:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2221      	movs	r2, #33	; 0x21
 8007c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2228      	movs	r2, #40	; 0x28
 8007c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff f9e7 	bl	800703c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007c6e:	bf00      	nop
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b083      	sub	sp, #12
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d011      	beq.n	8007cac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	781a      	ldrb	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d02c      	beq.n	8007d2c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	691a      	ldr	r2, [r3, #16]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	b2d2      	uxtb	r2, r2
 8007cde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d114      	bne.n	8007d2c <I2C_SlaveReceive_RXNE+0x74>
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	2b2a      	cmp	r3, #42	; 0x2a
 8007d06:	d111      	bne.n	8007d2c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d16:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2222      	movs	r2, #34	; 0x22
 8007d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2228      	movs	r2, #40	; 0x28
 8007d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7ff f992 	bl	8007050 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007d2c:	bf00      	nop
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d012      	beq.n	8007d6c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	691a      	ldr	r2, [r3, #16]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d50:	b2d2      	uxtb	r2, r2
 8007d52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	1c5a      	adds	r2, r3, #1
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007d92:	2b28      	cmp	r3, #40	; 0x28
 8007d94:	d127      	bne.n	8007de6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007da4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	089b      	lsrs	r3, r3, #2
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007db2:	2301      	movs	r3, #1
 8007db4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	09db      	lsrs	r3, r3, #7
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d103      	bne.n	8007dca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	81bb      	strh	r3, [r7, #12]
 8007dc8:	e002      	b.n	8007dd0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007dd8:	89ba      	ldrh	r2, [r7, #12]
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7ff f940 	bl	8007064 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007de4:	e00e      	b.n	8007e04 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007de6:	2300      	movs	r3, #0
 8007de8:	60bb      	str	r3, [r7, #8]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	60bb      	str	r3, [r7, #8]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	60bb      	str	r3, [r7, #8]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007e04:	bf00      	nop
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e1a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685a      	ldr	r2, [r3, #4]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e2a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60bb      	str	r3, [r7, #8]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	60bb      	str	r3, [r7, #8]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f042 0201 	orr.w	r2, r2, #1
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e58:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e68:	d172      	bne.n	8007f50 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	2b22      	cmp	r3, #34	; 0x22
 8007e6e:	d002      	beq.n	8007e76 <I2C_Slave_STOPF+0x6a>
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	2b2a      	cmp	r3, #42	; 0x2a
 8007e74:	d135      	bne.n	8007ee2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d005      	beq.n	8007e9a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	f043 0204 	orr.w	r2, r3, #4
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ea8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fd ff6a 	bl	8005d88 <HAL_DMA_GetState>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d049      	beq.n	8007f4e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebe:	4a69      	ldr	r2, [pc, #420]	; (8008064 <I2C_Slave_STOPF+0x258>)
 8007ec0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fd fdb2 	bl	8005a30 <HAL_DMA_Abort_IT>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d03d      	beq.n	8007f4e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007edc:	4610      	mov	r0, r2
 8007ede:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ee0:	e035      	b.n	8007f4e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d005      	beq.n	8007f06 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efe:	f043 0204 	orr.w	r2, r3, #4
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f14:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fd ff34 	bl	8005d88 <HAL_DMA_GetState>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d014      	beq.n	8007f50 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f2a:	4a4e      	ldr	r2, [pc, #312]	; (8008064 <I2C_Slave_STOPF+0x258>)
 8007f2c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fd fd7c 	bl	8005a30 <HAL_DMA_Abort_IT>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d008      	beq.n	8007f50 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f48:	4610      	mov	r0, r2
 8007f4a:	4798      	blx	r3
 8007f4c:	e000      	b.n	8007f50 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007f4e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d03e      	beq.n	8007fd8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	d112      	bne.n	8007f8e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	691a      	ldr	r2, [r3, #16]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	b2d2      	uxtb	r2, r2
 8007f74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	1c5a      	adds	r2, r3, #1
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	3b01      	subs	r3, #1
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f98:	2b40      	cmp	r3, #64	; 0x40
 8007f9a:	d112      	bne.n	8007fc2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	691a      	ldr	r2, [r3, #16]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	b2d2      	uxtb	r2, r2
 8007fa8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d005      	beq.n	8007fd8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	f043 0204 	orr.w	r2, r3, #4
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d003      	beq.n	8007fe8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f8b3 	bl	800814c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007fe6:	e039      	b.n	800805c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	2b2a      	cmp	r3, #42	; 0x2a
 8007fec:	d109      	bne.n	8008002 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2228      	movs	r2, #40	; 0x28
 8007ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7ff f827 	bl	8007050 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b28      	cmp	r3, #40	; 0x28
 800800c:	d111      	bne.n	8008032 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a15      	ldr	r2, [pc, #84]	; (8008068 <I2C_Slave_STOPF+0x25c>)
 8008012:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2220      	movs	r2, #32
 800801e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff f828 	bl	8007080 <HAL_I2C_ListenCpltCallback>
}
 8008030:	e014      	b.n	800805c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008036:	2b22      	cmp	r3, #34	; 0x22
 8008038:	d002      	beq.n	8008040 <I2C_Slave_STOPF+0x234>
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	2b22      	cmp	r3, #34	; 0x22
 800803e:	d10d      	bne.n	800805c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2220      	movs	r2, #32
 800804a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7fe fffa 	bl	8007050 <HAL_I2C_SlaveRxCpltCallback>
}
 800805c:	bf00      	nop
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	08008679 	.word	0x08008679
 8008068:	ffff0000 	.word	0xffff0000

0800806c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800807a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008080:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2b08      	cmp	r3, #8
 8008086:	d002      	beq.n	800808e <I2C_Slave_AF+0x22>
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2b20      	cmp	r3, #32
 800808c:	d129      	bne.n	80080e2 <I2C_Slave_AF+0x76>
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	2b28      	cmp	r3, #40	; 0x28
 8008092:	d126      	bne.n	80080e2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a2c      	ldr	r2, [pc, #176]	; (8008148 <I2C_Slave_AF+0xdc>)
 8008098:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80080a8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80080b2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080c2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2220      	movs	r2, #32
 80080ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7fe ffd0 	bl	8007080 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80080e0:	e02e      	b.n	8008140 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	2b21      	cmp	r3, #33	; 0x21
 80080e6:	d126      	bne.n	8008136 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a17      	ldr	r2, [pc, #92]	; (8008148 <I2C_Slave_AF+0xdc>)
 80080ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2221      	movs	r2, #33	; 0x21
 80080f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	685a      	ldr	r2, [r3, #4]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008112:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800811c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800812c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7fe ff84 	bl	800703c <HAL_I2C_SlaveTxCpltCallback>
}
 8008134:	e004      	b.n	8008140 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800813e:	615a      	str	r2, [r3, #20]
}
 8008140:	bf00      	nop
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	ffff0000 	.word	0xffff0000

0800814c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800815a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008162:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008164:	7bbb      	ldrb	r3, [r7, #14]
 8008166:	2b10      	cmp	r3, #16
 8008168:	d002      	beq.n	8008170 <I2C_ITError+0x24>
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	2b40      	cmp	r3, #64	; 0x40
 800816e:	d10a      	bne.n	8008186 <I2C_ITError+0x3a>
 8008170:	7bfb      	ldrb	r3, [r7, #15]
 8008172:	2b22      	cmp	r3, #34	; 0x22
 8008174:	d107      	bne.n	8008186 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008184:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008186:	7bfb      	ldrb	r3, [r7, #15]
 8008188:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800818c:	2b28      	cmp	r3, #40	; 0x28
 800818e:	d107      	bne.n	80081a0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2228      	movs	r2, #40	; 0x28
 800819a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800819e:	e015      	b.n	80081cc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ae:	d00a      	beq.n	80081c6 <I2C_ITError+0x7a>
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	2b60      	cmp	r3, #96	; 0x60
 80081b4:	d007      	beq.n	80081c6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081da:	d162      	bne.n	80082a2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081ea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d020      	beq.n	800823c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081fe:	4a6a      	ldr	r2, [pc, #424]	; (80083a8 <I2C_ITError+0x25c>)
 8008200:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008206:	4618      	mov	r0, r3
 8008208:	f7fd fc12 	bl	8005a30 <HAL_DMA_Abort_IT>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 8089 	beq.w	8008326 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 0201 	bic.w	r2, r2, #1
 8008222:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2220      	movs	r2, #32
 8008228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008236:	4610      	mov	r0, r2
 8008238:	4798      	blx	r3
 800823a:	e074      	b.n	8008326 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008240:	4a59      	ldr	r2, [pc, #356]	; (80083a8 <I2C_ITError+0x25c>)
 8008242:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008248:	4618      	mov	r0, r3
 800824a:	f7fd fbf1 	bl	8005a30 <HAL_DMA_Abort_IT>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d068      	beq.n	8008326 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825e:	2b40      	cmp	r3, #64	; 0x40
 8008260:	d10b      	bne.n	800827a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	691a      	ldr	r2, [r3, #16]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826c:	b2d2      	uxtb	r2, r2
 800826e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008274:	1c5a      	adds	r2, r3, #1
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0201 	bic.w	r2, r2, #1
 8008288:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2220      	movs	r2, #32
 800828e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800829c:	4610      	mov	r0, r2
 800829e:	4798      	blx	r3
 80082a0:	e041      	b.n	8008326 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b60      	cmp	r3, #96	; 0x60
 80082ac:	d125      	bne.n	80082fa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c6:	2b40      	cmp	r3, #64	; 0x40
 80082c8:	d10b      	bne.n	80082e2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	691a      	ldr	r2, [r3, #16]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	b2d2      	uxtb	r2, r2
 80082d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 0201 	bic.w	r2, r2, #1
 80082f0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7fe feec 	bl	80070d0 <HAL_I2C_AbortCpltCallback>
 80082f8:	e015      	b.n	8008326 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008304:	2b40      	cmp	r3, #64	; 0x40
 8008306:	d10b      	bne.n	8008320 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	691a      	ldr	r2, [r3, #16]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008312:	b2d2      	uxtb	r2, r2
 8008314:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7fe fecb 	bl	80070bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10e      	bne.n	8008354 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800833c:	2b00      	cmp	r3, #0
 800833e:	d109      	bne.n	8008354 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008346:	2b00      	cmp	r3, #0
 8008348:	d104      	bne.n	8008354 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008350:	2b00      	cmp	r3, #0
 8008352:	d007      	beq.n	8008364 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008362:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800836a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008370:	f003 0304 	and.w	r3, r3, #4
 8008374:	2b04      	cmp	r3, #4
 8008376:	d113      	bne.n	80083a0 <I2C_ITError+0x254>
 8008378:	7bfb      	ldrb	r3, [r7, #15]
 800837a:	2b28      	cmp	r3, #40	; 0x28
 800837c:	d110      	bne.n	80083a0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a0a      	ldr	r2, [pc, #40]	; (80083ac <I2C_ITError+0x260>)
 8008382:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2220      	movs	r2, #32
 800838e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7fe fe70 	bl	8007080 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80083a0:	bf00      	nop
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	08008679 	.word	0x08008679
 80083ac:	ffff0000 	.word	0xffff0000

080083b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	607a      	str	r2, [r7, #4]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	460b      	mov	r3, r1
 80083be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2b08      	cmp	r3, #8
 80083da:	d006      	beq.n	80083ea <I2C_MasterRequestRead+0x3a>
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d003      	beq.n	80083ea <I2C_MasterRequestRead+0x3a>
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083e8:	d108      	bne.n	80083fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	e00b      	b.n	8008414 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008400:	2b11      	cmp	r3, #17
 8008402:	d107      	bne.n	8008414 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008412:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 f9d1 	bl	80087c8 <I2C_WaitOnFlagUntilTimeout>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00d      	beq.n	8008448 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800843a:	d103      	bne.n	8008444 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008442:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e079      	b.n	800853c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008450:	d108      	bne.n	8008464 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008452:	897b      	ldrh	r3, [r7, #10]
 8008454:	b2db      	uxtb	r3, r3
 8008456:	f043 0301 	orr.w	r3, r3, #1
 800845a:	b2da      	uxtb	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	611a      	str	r2, [r3, #16]
 8008462:	e05f      	b.n	8008524 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008464:	897b      	ldrh	r3, [r7, #10]
 8008466:	11db      	asrs	r3, r3, #7
 8008468:	b2db      	uxtb	r3, r3
 800846a:	f003 0306 	and.w	r3, r3, #6
 800846e:	b2db      	uxtb	r3, r3
 8008470:	f063 030f 	orn	r3, r3, #15
 8008474:	b2da      	uxtb	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	4930      	ldr	r1, [pc, #192]	; (8008544 <I2C_MasterRequestRead+0x194>)
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 f9f7 	bl	8008876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e054      	b.n	800853c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008492:	897b      	ldrh	r3, [r7, #10]
 8008494:	b2da      	uxtb	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	4929      	ldr	r1, [pc, #164]	; (8008548 <I2C_MasterRequestRead+0x198>)
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 f9e7 	bl	8008876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e044      	b.n	800853c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084b2:	2300      	movs	r3, #0
 80084b4:	613b      	str	r3, [r7, #16]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	613b      	str	r3, [r7, #16]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	613b      	str	r3, [r7, #16]
 80084c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 f96f 	bl	80087c8 <I2C_WaitOnFlagUntilTimeout>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00d      	beq.n	800850c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084fe:	d103      	bne.n	8008508 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008506:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e017      	b.n	800853c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800850c:	897b      	ldrh	r3, [r7, #10]
 800850e:	11db      	asrs	r3, r3, #7
 8008510:	b2db      	uxtb	r3, r3
 8008512:	f003 0306 	and.w	r3, r3, #6
 8008516:	b2db      	uxtb	r3, r3
 8008518:	f063 030e 	orn	r3, r3, #14
 800851c:	b2da      	uxtb	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	4907      	ldr	r1, [pc, #28]	; (8008548 <I2C_MasterRequestRead+0x198>)
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 f9a3 	bl	8008876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e000      	b.n	800853c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	00010008 	.word	0x00010008
 8008548:	00010002 	.word	0x00010002

0800854c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b088      	sub	sp, #32
 8008550:	af02      	add	r7, sp, #8
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	4608      	mov	r0, r1
 8008556:	4611      	mov	r1, r2
 8008558:	461a      	mov	r2, r3
 800855a:	4603      	mov	r3, r0
 800855c:	817b      	strh	r3, [r7, #10]
 800855e:	460b      	mov	r3, r1
 8008560:	813b      	strh	r3, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008574:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	2200      	movs	r2, #0
 800857e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 f920 	bl	80087c8 <I2C_WaitOnFlagUntilTimeout>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00d      	beq.n	80085aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800859c:	d103      	bne.n	80085a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e05f      	b.n	800866a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085aa:	897b      	ldrh	r3, [r7, #10]
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	461a      	mov	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80085b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	6a3a      	ldr	r2, [r7, #32]
 80085be:	492d      	ldr	r1, [pc, #180]	; (8008674 <I2C_RequestMemoryWrite+0x128>)
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 f958 	bl	8008876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e04c      	b.n	800866a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085d0:	2300      	movs	r3, #0
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	617b      	str	r3, [r7, #20]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	617b      	str	r3, [r7, #20]
 80085e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e8:	6a39      	ldr	r1, [r7, #32]
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 f9c2 	bl	8008974 <I2C_WaitOnTXEFlagUntilTimeout>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00d      	beq.n	8008612 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	d107      	bne.n	800860e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800860c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e02b      	b.n	800866a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008612:	88fb      	ldrh	r3, [r7, #6]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d105      	bne.n	8008624 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008618:	893b      	ldrh	r3, [r7, #8]
 800861a:	b2da      	uxtb	r2, r3
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	611a      	str	r2, [r3, #16]
 8008622:	e021      	b.n	8008668 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008624:	893b      	ldrh	r3, [r7, #8]
 8008626:	0a1b      	lsrs	r3, r3, #8
 8008628:	b29b      	uxth	r3, r3
 800862a:	b2da      	uxtb	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008634:	6a39      	ldr	r1, [r7, #32]
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 f99c 	bl	8008974 <I2C_WaitOnTXEFlagUntilTimeout>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00d      	beq.n	800865e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008646:	2b04      	cmp	r3, #4
 8008648:	d107      	bne.n	800865a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008658:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e005      	b.n	800866a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800865e:	893b      	ldrh	r3, [r7, #8]
 8008660:	b2da      	uxtb	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	00010002 	.word	0x00010002

08008678 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008690:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008692:	4b4b      	ldr	r3, [pc, #300]	; (80087c0 <I2C_DMAAbort+0x148>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	08db      	lsrs	r3, r3, #3
 8008698:	4a4a      	ldr	r2, [pc, #296]	; (80087c4 <I2C_DMAAbort+0x14c>)
 800869a:	fba2 2303 	umull	r2, r3, r2, r3
 800869e:	0a1a      	lsrs	r2, r3, #8
 80086a0:	4613      	mov	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	00da      	lsls	r2, r3, #3
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d106      	bne.n	80086c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	f043 0220 	orr.w	r2, r3, #32
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80086be:	e00a      	b.n	80086d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3b01      	subs	r3, #1
 80086c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086d4:	d0ea      	beq.n	80086ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e2:	2200      	movs	r2, #0
 80086e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f2:	2200      	movs	r2, #0
 80086f4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008704:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2200      	movs	r2, #0
 800870a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008710:	2b00      	cmp	r3, #0
 8008712:	d003      	beq.n	800871c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008718:	2200      	movs	r2, #0
 800871a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008720:	2b00      	cmp	r3, #0
 8008722:	d003      	beq.n	800872c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008728:	2200      	movs	r2, #0
 800872a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f022 0201 	bic.w	r2, r2, #1
 800873a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b60      	cmp	r3, #96	; 0x60
 8008746:	d10e      	bne.n	8008766 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2220      	movs	r2, #32
 800874c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2200      	movs	r2, #0
 800875c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800875e:	6978      	ldr	r0, [r7, #20]
 8008760:	f7fe fcb6 	bl	80070d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008764:	e027      	b.n	80087b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008766:	7cfb      	ldrb	r3, [r7, #19]
 8008768:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800876c:	2b28      	cmp	r3, #40	; 0x28
 800876e:	d117      	bne.n	80087a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f042 0201 	orr.w	r2, r2, #1
 800877e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800878e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	2200      	movs	r2, #0
 8008794:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2228      	movs	r2, #40	; 0x28
 800879a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800879e:	e007      	b.n	80087b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2220      	movs	r2, #32
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80087b0:	6978      	ldr	r0, [r7, #20]
 80087b2:	f7fe fc83 	bl	80070bc <HAL_I2C_ErrorCallback>
}
 80087b6:	bf00      	nop
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	2000028c 	.word	0x2000028c
 80087c4:	14f8b589 	.word	0x14f8b589

080087c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	4613      	mov	r3, r2
 80087d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087d8:	e025      	b.n	8008826 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e0:	d021      	beq.n	8008826 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087e2:	f7fc fa8f 	bl	8004d04 <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d302      	bcc.n	80087f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d116      	bne.n	8008826 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2220      	movs	r2, #32
 8008802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	f043 0220 	orr.w	r2, r3, #32
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e023      	b.n	800886e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	0c1b      	lsrs	r3, r3, #16
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b01      	cmp	r3, #1
 800882e:	d10d      	bne.n	800884c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	43da      	mvns	r2, r3
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	4013      	ands	r3, r2
 800883c:	b29b      	uxth	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	bf0c      	ite	eq
 8008842:	2301      	moveq	r3, #1
 8008844:	2300      	movne	r3, #0
 8008846:	b2db      	uxtb	r3, r3
 8008848:	461a      	mov	r2, r3
 800884a:	e00c      	b.n	8008866 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	43da      	mvns	r2, r3
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	4013      	ands	r3, r2
 8008858:	b29b      	uxth	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	bf0c      	ite	eq
 800885e:	2301      	moveq	r3, #1
 8008860:	2300      	movne	r3, #0
 8008862:	b2db      	uxtb	r3, r3
 8008864:	461a      	mov	r2, r3
 8008866:	79fb      	ldrb	r3, [r7, #7]
 8008868:	429a      	cmp	r2, r3
 800886a:	d0b6      	beq.n	80087da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b084      	sub	sp, #16
 800887a:	af00      	add	r7, sp, #0
 800887c:	60f8      	str	r0, [r7, #12]
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	607a      	str	r2, [r7, #4]
 8008882:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008884:	e051      	b.n	800892a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	695b      	ldr	r3, [r3, #20]
 800888c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008894:	d123      	bne.n	80088de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2220      	movs	r2, #32
 80088ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ca:	f043 0204 	orr.w	r2, r3, #4
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e046      	b.n	800896c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e4:	d021      	beq.n	800892a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088e6:	f7fc fa0d 	bl	8004d04 <HAL_GetTick>
 80088ea:	4602      	mov	r2, r0
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d302      	bcc.n	80088fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d116      	bne.n	800892a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2220      	movs	r2, #32
 8008906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008916:	f043 0220 	orr.w	r2, r3, #32
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e020      	b.n	800896c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	0c1b      	lsrs	r3, r3, #16
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b01      	cmp	r3, #1
 8008932:	d10c      	bne.n	800894e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	43da      	mvns	r2, r3
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4013      	ands	r3, r2
 8008940:	b29b      	uxth	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	bf14      	ite	ne
 8008946:	2301      	movne	r3, #1
 8008948:	2300      	moveq	r3, #0
 800894a:	b2db      	uxtb	r3, r3
 800894c:	e00b      	b.n	8008966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	43da      	mvns	r2, r3
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	4013      	ands	r3, r2
 800895a:	b29b      	uxth	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	bf14      	ite	ne
 8008960:	2301      	movne	r3, #1
 8008962:	2300      	moveq	r3, #0
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d18d      	bne.n	8008886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008980:	e02d      	b.n	80089de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f000 f900 	bl	8008b88 <I2C_IsAcknowledgeFailed>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e02d      	b.n	80089ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008998:	d021      	beq.n	80089de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800899a:	f7fc f9b3 	bl	8004d04 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d302      	bcc.n	80089b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d116      	bne.n	80089de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ca:	f043 0220 	orr.w	r2, r3, #32
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e007      	b.n	80089ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e8:	2b80      	cmp	r3, #128	; 0x80
 80089ea:	d1ca      	bne.n	8008982 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a02:	e02d      	b.n	8008a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 f8bf 	bl	8008b88 <I2C_IsAcknowledgeFailed>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e02d      	b.n	8008a70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1a:	d021      	beq.n	8008a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a1c:	f7fc f972 	bl	8004d04 <HAL_GetTick>
 8008a20:	4602      	mov	r2, r0
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d302      	bcc.n	8008a32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d116      	bne.n	8008a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4c:	f043 0220 	orr.w	r2, r3, #32
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e007      	b.n	8008a70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	f003 0304 	and.w	r3, r3, #4
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	d1ca      	bne.n	8008a04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008a84:	4b13      	ldr	r3, [pc, #76]	; (8008ad4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	08db      	lsrs	r3, r3, #3
 8008a8a:	4a13      	ldr	r2, [pc, #76]	; (8008ad8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a90:	0a1a      	lsrs	r2, r3, #8
 8008a92:	4613      	mov	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4413      	add	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d107      	bne.n	8008ab6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aaa:	f043 0220 	orr.w	r2, r3, #32
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e008      	b.n	8008ac8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ac4:	d0e9      	beq.n	8008a9a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	2000028c 	.word	0x2000028c
 8008ad8:	14f8b589 	.word	0x14f8b589

08008adc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ae8:	e042      	b.n	8008b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	f003 0310 	and.w	r3, r3, #16
 8008af4:	2b10      	cmp	r3, #16
 8008af6:	d119      	bne.n	8008b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f06f 0210 	mvn.w	r2, #16
 8008b00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2220      	movs	r2, #32
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e029      	b.n	8008b80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b2c:	f7fc f8ea 	bl	8004d04 <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d302      	bcc.n	8008b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d116      	bne.n	8008b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5c:	f043 0220 	orr.w	r2, r3, #32
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e007      	b.n	8008b80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7a:	2b40      	cmp	r3, #64	; 0x40
 8008b7c:	d1b5      	bne.n	8008aea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b9e:	d11b      	bne.n	8008bd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ba8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc4:	f043 0204 	orr.w	r2, r3, #4
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e000      	b.n	8008bda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b083      	sub	sp, #12
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008bf6:	d103      	bne.n	8008c00 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008bfe:	e007      	b.n	8008c10 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c04:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008c08:	d102      	bne.n	8008c10 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2208      	movs	r2, #8
 8008c0e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e267      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d075      	beq.n	8008d26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c3a:	4b88      	ldr	r3, [pc, #544]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f003 030c 	and.w	r3, r3, #12
 8008c42:	2b04      	cmp	r3, #4
 8008c44:	d00c      	beq.n	8008c60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c46:	4b85      	ldr	r3, [pc, #532]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c4e:	2b08      	cmp	r3, #8
 8008c50:	d112      	bne.n	8008c78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c52:	4b82      	ldr	r3, [pc, #520]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c5e:	d10b      	bne.n	8008c78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c60:	4b7e      	ldr	r3, [pc, #504]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d05b      	beq.n	8008d24 <HAL_RCC_OscConfig+0x108>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d157      	bne.n	8008d24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e242      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c80:	d106      	bne.n	8008c90 <HAL_RCC_OscConfig+0x74>
 8008c82:	4b76      	ldr	r3, [pc, #472]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a75      	ldr	r2, [pc, #468]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	e01d      	b.n	8008ccc <HAL_RCC_OscConfig+0xb0>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c98:	d10c      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x98>
 8008c9a:	4b70      	ldr	r3, [pc, #448]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a6f      	ldr	r2, [pc, #444]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ca4:	6013      	str	r3, [r2, #0]
 8008ca6:	4b6d      	ldr	r3, [pc, #436]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a6c      	ldr	r2, [pc, #432]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cb0:	6013      	str	r3, [r2, #0]
 8008cb2:	e00b      	b.n	8008ccc <HAL_RCC_OscConfig+0xb0>
 8008cb4:	4b69      	ldr	r3, [pc, #420]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a68      	ldr	r2, [pc, #416]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cbe:	6013      	str	r3, [r2, #0]
 8008cc0:	4b66      	ldr	r3, [pc, #408]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a65      	ldr	r2, [pc, #404]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d013      	beq.n	8008cfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cd4:	f7fc f816 	bl	8004d04 <HAL_GetTick>
 8008cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cda:	e008      	b.n	8008cee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cdc:	f7fc f812 	bl	8004d04 <HAL_GetTick>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	2b64      	cmp	r3, #100	; 0x64
 8008ce8:	d901      	bls.n	8008cee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	e207      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cee:	4b5b      	ldr	r3, [pc, #364]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d0f0      	beq.n	8008cdc <HAL_RCC_OscConfig+0xc0>
 8008cfa:	e014      	b.n	8008d26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cfc:	f7fc f802 	bl	8004d04 <HAL_GetTick>
 8008d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d02:	e008      	b.n	8008d16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d04:	f7fb fffe 	bl	8004d04 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	2b64      	cmp	r3, #100	; 0x64
 8008d10:	d901      	bls.n	8008d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e1f3      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d16:	4b51      	ldr	r3, [pc, #324]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1f0      	bne.n	8008d04 <HAL_RCC_OscConfig+0xe8>
 8008d22:	e000      	b.n	8008d26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d063      	beq.n	8008dfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d32:	4b4a      	ldr	r3, [pc, #296]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f003 030c 	and.w	r3, r3, #12
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00b      	beq.n	8008d56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d3e:	4b47      	ldr	r3, [pc, #284]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d46:	2b08      	cmp	r3, #8
 8008d48:	d11c      	bne.n	8008d84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d4a:	4b44      	ldr	r3, [pc, #272]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d116      	bne.n	8008d84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d56:	4b41      	ldr	r3, [pc, #260]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0302 	and.w	r3, r3, #2
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d005      	beq.n	8008d6e <HAL_RCC_OscConfig+0x152>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d001      	beq.n	8008d6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e1c7      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d6e:	4b3b      	ldr	r3, [pc, #236]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	00db      	lsls	r3, r3, #3
 8008d7c:	4937      	ldr	r1, [pc, #220]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d82:	e03a      	b.n	8008dfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d020      	beq.n	8008dce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d8c:	4b34      	ldr	r3, [pc, #208]	; (8008e60 <HAL_RCC_OscConfig+0x244>)
 8008d8e:	2201      	movs	r2, #1
 8008d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d92:	f7fb ffb7 	bl	8004d04 <HAL_GetTick>
 8008d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d98:	e008      	b.n	8008dac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d9a:	f7fb ffb3 	bl	8004d04 <HAL_GetTick>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d901      	bls.n	8008dac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e1a8      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dac:	4b2b      	ldr	r3, [pc, #172]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0302 	and.w	r3, r3, #2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d0f0      	beq.n	8008d9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008db8:	4b28      	ldr	r3, [pc, #160]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	00db      	lsls	r3, r3, #3
 8008dc6:	4925      	ldr	r1, [pc, #148]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	600b      	str	r3, [r1, #0]
 8008dcc:	e015      	b.n	8008dfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008dce:	4b24      	ldr	r3, [pc, #144]	; (8008e60 <HAL_RCC_OscConfig+0x244>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd4:	f7fb ff96 	bl	8004d04 <HAL_GetTick>
 8008dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dda:	e008      	b.n	8008dee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ddc:	f7fb ff92 	bl	8004d04 <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d901      	bls.n	8008dee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e187      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dee:	4b1b      	ldr	r3, [pc, #108]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0302 	and.w	r3, r3, #2
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1f0      	bne.n	8008ddc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 0308 	and.w	r3, r3, #8
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d036      	beq.n	8008e74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d016      	beq.n	8008e3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e0e:	4b15      	ldr	r3, [pc, #84]	; (8008e64 <HAL_RCC_OscConfig+0x248>)
 8008e10:	2201      	movs	r2, #1
 8008e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e14:	f7fb ff76 	bl	8004d04 <HAL_GetTick>
 8008e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e1a:	e008      	b.n	8008e2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e1c:	f7fb ff72 	bl	8004d04 <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d901      	bls.n	8008e2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e167      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e2e:	4b0b      	ldr	r3, [pc, #44]	; (8008e5c <HAL_RCC_OscConfig+0x240>)
 8008e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d0f0      	beq.n	8008e1c <HAL_RCC_OscConfig+0x200>
 8008e3a:	e01b      	b.n	8008e74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e3c:	4b09      	ldr	r3, [pc, #36]	; (8008e64 <HAL_RCC_OscConfig+0x248>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e42:	f7fb ff5f 	bl	8004d04 <HAL_GetTick>
 8008e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e48:	e00e      	b.n	8008e68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e4a:	f7fb ff5b 	bl	8004d04 <HAL_GetTick>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d907      	bls.n	8008e68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e150      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
 8008e5c:	40023800 	.word	0x40023800
 8008e60:	42470000 	.word	0x42470000
 8008e64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e68:	4b88      	ldr	r3, [pc, #544]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e6c:	f003 0302 	and.w	r3, r3, #2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1ea      	bne.n	8008e4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 8097 	beq.w	8008fb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e82:	2300      	movs	r3, #0
 8008e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e86:	4b81      	ldr	r3, [pc, #516]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10f      	bne.n	8008eb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e92:	2300      	movs	r3, #0
 8008e94:	60bb      	str	r3, [r7, #8]
 8008e96:	4b7d      	ldr	r3, [pc, #500]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9a:	4a7c      	ldr	r2, [pc, #496]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8008ea2:	4b7a      	ldr	r3, [pc, #488]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eaa:	60bb      	str	r3, [r7, #8]
 8008eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eb2:	4b77      	ldr	r3, [pc, #476]	; (8009090 <HAL_RCC_OscConfig+0x474>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d118      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ebe:	4b74      	ldr	r3, [pc, #464]	; (8009090 <HAL_RCC_OscConfig+0x474>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a73      	ldr	r2, [pc, #460]	; (8009090 <HAL_RCC_OscConfig+0x474>)
 8008ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008eca:	f7fb ff1b 	bl	8004d04 <HAL_GetTick>
 8008ece:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ed0:	e008      	b.n	8008ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ed2:	f7fb ff17 	bl	8004d04 <HAL_GetTick>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d901      	bls.n	8008ee4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e10c      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ee4:	4b6a      	ldr	r3, [pc, #424]	; (8009090 <HAL_RCC_OscConfig+0x474>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d0f0      	beq.n	8008ed2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d106      	bne.n	8008f06 <HAL_RCC_OscConfig+0x2ea>
 8008ef8:	4b64      	ldr	r3, [pc, #400]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efc:	4a63      	ldr	r2, [pc, #396]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008efe:	f043 0301 	orr.w	r3, r3, #1
 8008f02:	6713      	str	r3, [r2, #112]	; 0x70
 8008f04:	e01c      	b.n	8008f40 <HAL_RCC_OscConfig+0x324>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	d10c      	bne.n	8008f28 <HAL_RCC_OscConfig+0x30c>
 8008f0e:	4b5f      	ldr	r3, [pc, #380]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f12:	4a5e      	ldr	r2, [pc, #376]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008f14:	f043 0304 	orr.w	r3, r3, #4
 8008f18:	6713      	str	r3, [r2, #112]	; 0x70
 8008f1a:	4b5c      	ldr	r3, [pc, #368]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f1e:	4a5b      	ldr	r2, [pc, #364]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008f20:	f043 0301 	orr.w	r3, r3, #1
 8008f24:	6713      	str	r3, [r2, #112]	; 0x70
 8008f26:	e00b      	b.n	8008f40 <HAL_RCC_OscConfig+0x324>
 8008f28:	4b58      	ldr	r3, [pc, #352]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f2c:	4a57      	ldr	r2, [pc, #348]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008f2e:	f023 0301 	bic.w	r3, r3, #1
 8008f32:	6713      	str	r3, [r2, #112]	; 0x70
 8008f34:	4b55      	ldr	r3, [pc, #340]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f38:	4a54      	ldr	r2, [pc, #336]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008f3a:	f023 0304 	bic.w	r3, r3, #4
 8008f3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d015      	beq.n	8008f74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f48:	f7fb fedc 	bl	8004d04 <HAL_GetTick>
 8008f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f4e:	e00a      	b.n	8008f66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f50:	f7fb fed8 	bl	8004d04 <HAL_GetTick>
 8008f54:	4602      	mov	r2, r0
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d901      	bls.n	8008f66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e0cb      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f66:	4b49      	ldr	r3, [pc, #292]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6a:	f003 0302 	and.w	r3, r3, #2
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d0ee      	beq.n	8008f50 <HAL_RCC_OscConfig+0x334>
 8008f72:	e014      	b.n	8008f9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f74:	f7fb fec6 	bl	8004d04 <HAL_GetTick>
 8008f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f7a:	e00a      	b.n	8008f92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f7c:	f7fb fec2 	bl	8004d04 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d901      	bls.n	8008f92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e0b5      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f92:	4b3e      	ldr	r3, [pc, #248]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f96:	f003 0302 	and.w	r3, r3, #2
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1ee      	bne.n	8008f7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d105      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fa4:	4b39      	ldr	r3, [pc, #228]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa8:	4a38      	ldr	r2, [pc, #224]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 80a1 	beq.w	80090fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008fba:	4b34      	ldr	r3, [pc, #208]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f003 030c 	and.w	r3, r3, #12
 8008fc2:	2b08      	cmp	r3, #8
 8008fc4:	d05c      	beq.n	8009080 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d141      	bne.n	8009052 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fce:	4b31      	ldr	r3, [pc, #196]	; (8009094 <HAL_RCC_OscConfig+0x478>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fd4:	f7fb fe96 	bl	8004d04 <HAL_GetTick>
 8008fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fda:	e008      	b.n	8008fee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fdc:	f7fb fe92 	bl	8004d04 <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d901      	bls.n	8008fee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e087      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fee:	4b27      	ldr	r3, [pc, #156]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1f0      	bne.n	8008fdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	69da      	ldr	r2, [r3, #28]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a1b      	ldr	r3, [r3, #32]
 8009002:	431a      	orrs	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	019b      	lsls	r3, r3, #6
 800900a:	431a      	orrs	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009010:	085b      	lsrs	r3, r3, #1
 8009012:	3b01      	subs	r3, #1
 8009014:	041b      	lsls	r3, r3, #16
 8009016:	431a      	orrs	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901c:	061b      	lsls	r3, r3, #24
 800901e:	491b      	ldr	r1, [pc, #108]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8009020:	4313      	orrs	r3, r2
 8009022:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009024:	4b1b      	ldr	r3, [pc, #108]	; (8009094 <HAL_RCC_OscConfig+0x478>)
 8009026:	2201      	movs	r2, #1
 8009028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800902a:	f7fb fe6b 	bl	8004d04 <HAL_GetTick>
 800902e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009030:	e008      	b.n	8009044 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009032:	f7fb fe67 	bl	8004d04 <HAL_GetTick>
 8009036:	4602      	mov	r2, r0
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	2b02      	cmp	r3, #2
 800903e:	d901      	bls.n	8009044 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e05c      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009044:	4b11      	ldr	r3, [pc, #68]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d0f0      	beq.n	8009032 <HAL_RCC_OscConfig+0x416>
 8009050:	e054      	b.n	80090fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009052:	4b10      	ldr	r3, [pc, #64]	; (8009094 <HAL_RCC_OscConfig+0x478>)
 8009054:	2200      	movs	r2, #0
 8009056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009058:	f7fb fe54 	bl	8004d04 <HAL_GetTick>
 800905c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800905e:	e008      	b.n	8009072 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009060:	f7fb fe50 	bl	8004d04 <HAL_GetTick>
 8009064:	4602      	mov	r2, r0
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	2b02      	cmp	r3, #2
 800906c:	d901      	bls.n	8009072 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e045      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009072:	4b06      	ldr	r3, [pc, #24]	; (800908c <HAL_RCC_OscConfig+0x470>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1f0      	bne.n	8009060 <HAL_RCC_OscConfig+0x444>
 800907e:	e03d      	b.n	80090fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d107      	bne.n	8009098 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e038      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
 800908c:	40023800 	.word	0x40023800
 8009090:	40007000 	.word	0x40007000
 8009094:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009098:	4b1b      	ldr	r3, [pc, #108]	; (8009108 <HAL_RCC_OscConfig+0x4ec>)
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d028      	beq.n	80090f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d121      	bne.n	80090f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090be:	429a      	cmp	r2, r3
 80090c0:	d11a      	bne.n	80090f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80090c8:	4013      	ands	r3, r2
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d111      	bne.n	80090f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090de:	085b      	lsrs	r3, r3, #1
 80090e0:	3b01      	subs	r3, #1
 80090e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d107      	bne.n	80090f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d001      	beq.n	80090fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e000      	b.n	80090fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	40023800 	.word	0x40023800

0800910c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d101      	bne.n	8009120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e0cc      	b.n	80092ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009120:	4b68      	ldr	r3, [pc, #416]	; (80092c4 <HAL_RCC_ClockConfig+0x1b8>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0307 	and.w	r3, r3, #7
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	429a      	cmp	r2, r3
 800912c:	d90c      	bls.n	8009148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800912e:	4b65      	ldr	r3, [pc, #404]	; (80092c4 <HAL_RCC_ClockConfig+0x1b8>)
 8009130:	683a      	ldr	r2, [r7, #0]
 8009132:	b2d2      	uxtb	r2, r2
 8009134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009136:	4b63      	ldr	r3, [pc, #396]	; (80092c4 <HAL_RCC_ClockConfig+0x1b8>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0307 	and.w	r3, r3, #7
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	429a      	cmp	r2, r3
 8009142:	d001      	beq.n	8009148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e0b8      	b.n	80092ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 0302 	and.w	r3, r3, #2
 8009150:	2b00      	cmp	r3, #0
 8009152:	d020      	beq.n	8009196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0304 	and.w	r3, r3, #4
 800915c:	2b00      	cmp	r3, #0
 800915e:	d005      	beq.n	800916c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009160:	4b59      	ldr	r3, [pc, #356]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	4a58      	ldr	r2, [pc, #352]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800916a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 0308 	and.w	r3, r3, #8
 8009174:	2b00      	cmp	r3, #0
 8009176:	d005      	beq.n	8009184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009178:	4b53      	ldr	r3, [pc, #332]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	4a52      	ldr	r2, [pc, #328]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 800917e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009184:	4b50      	ldr	r3, [pc, #320]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	494d      	ldr	r1, [pc, #308]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009192:	4313      	orrs	r3, r2
 8009194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d044      	beq.n	800922c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d107      	bne.n	80091ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091aa:	4b47      	ldr	r3, [pc, #284]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d119      	bne.n	80091ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e07f      	b.n	80092ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d003      	beq.n	80091ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d107      	bne.n	80091da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091ca:	4b3f      	ldr	r3, [pc, #252]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d109      	bne.n	80091ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e06f      	b.n	80092ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091da:	4b3b      	ldr	r3, [pc, #236]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e067      	b.n	80092ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091ea:	4b37      	ldr	r3, [pc, #220]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	f023 0203 	bic.w	r2, r3, #3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	4934      	ldr	r1, [pc, #208]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091fc:	f7fb fd82 	bl	8004d04 <HAL_GetTick>
 8009200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009202:	e00a      	b.n	800921a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009204:	f7fb fd7e 	bl	8004d04 <HAL_GetTick>
 8009208:	4602      	mov	r2, r0
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009212:	4293      	cmp	r3, r2
 8009214:	d901      	bls.n	800921a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009216:	2303      	movs	r3, #3
 8009218:	e04f      	b.n	80092ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800921a:	4b2b      	ldr	r3, [pc, #172]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f003 020c 	and.w	r2, r3, #12
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	429a      	cmp	r2, r3
 800922a:	d1eb      	bne.n	8009204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800922c:	4b25      	ldr	r3, [pc, #148]	; (80092c4 <HAL_RCC_ClockConfig+0x1b8>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0307 	and.w	r3, r3, #7
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	429a      	cmp	r2, r3
 8009238:	d20c      	bcs.n	8009254 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800923a:	4b22      	ldr	r3, [pc, #136]	; (80092c4 <HAL_RCC_ClockConfig+0x1b8>)
 800923c:	683a      	ldr	r2, [r7, #0]
 800923e:	b2d2      	uxtb	r2, r2
 8009240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009242:	4b20      	ldr	r3, [pc, #128]	; (80092c4 <HAL_RCC_ClockConfig+0x1b8>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0307 	and.w	r3, r3, #7
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	429a      	cmp	r2, r3
 800924e:	d001      	beq.n	8009254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e032      	b.n	80092ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b00      	cmp	r3, #0
 800925e:	d008      	beq.n	8009272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009260:	4b19      	ldr	r3, [pc, #100]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	4916      	ldr	r1, [pc, #88]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 800926e:	4313      	orrs	r3, r2
 8009270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 0308 	and.w	r3, r3, #8
 800927a:	2b00      	cmp	r3, #0
 800927c:	d009      	beq.n	8009292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800927e:	4b12      	ldr	r3, [pc, #72]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	00db      	lsls	r3, r3, #3
 800928c:	490e      	ldr	r1, [pc, #56]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 800928e:	4313      	orrs	r3, r2
 8009290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009292:	f000 f821 	bl	80092d8 <HAL_RCC_GetSysClockFreq>
 8009296:	4602      	mov	r2, r0
 8009298:	4b0b      	ldr	r3, [pc, #44]	; (80092c8 <HAL_RCC_ClockConfig+0x1bc>)
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	091b      	lsrs	r3, r3, #4
 800929e:	f003 030f 	and.w	r3, r3, #15
 80092a2:	490a      	ldr	r1, [pc, #40]	; (80092cc <HAL_RCC_ClockConfig+0x1c0>)
 80092a4:	5ccb      	ldrb	r3, [r1, r3]
 80092a6:	fa22 f303 	lsr.w	r3, r2, r3
 80092aa:	4a09      	ldr	r2, [pc, #36]	; (80092d0 <HAL_RCC_ClockConfig+0x1c4>)
 80092ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80092ae:	4b09      	ldr	r3, [pc, #36]	; (80092d4 <HAL_RCC_ClockConfig+0x1c8>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fb fce2 	bl	8004c7c <HAL_InitTick>

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	40023c00 	.word	0x40023c00
 80092c8:	40023800 	.word	0x40023800
 80092cc:	0800e480 	.word	0x0800e480
 80092d0:	2000028c 	.word	0x2000028c
 80092d4:	20000290 	.word	0x20000290

080092d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092dc:	b094      	sub	sp, #80	; 0x50
 80092de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80092e0:	2300      	movs	r3, #0
 80092e2:	647b      	str	r3, [r7, #68]	; 0x44
 80092e4:	2300      	movs	r3, #0
 80092e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092e8:	2300      	movs	r3, #0
 80092ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80092ec:	2300      	movs	r3, #0
 80092ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092f0:	4b79      	ldr	r3, [pc, #484]	; (80094d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f003 030c 	and.w	r3, r3, #12
 80092f8:	2b08      	cmp	r3, #8
 80092fa:	d00d      	beq.n	8009318 <HAL_RCC_GetSysClockFreq+0x40>
 80092fc:	2b08      	cmp	r3, #8
 80092fe:	f200 80e1 	bhi.w	80094c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009302:	2b00      	cmp	r3, #0
 8009304:	d002      	beq.n	800930c <HAL_RCC_GetSysClockFreq+0x34>
 8009306:	2b04      	cmp	r3, #4
 8009308:	d003      	beq.n	8009312 <HAL_RCC_GetSysClockFreq+0x3a>
 800930a:	e0db      	b.n	80094c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800930c:	4b73      	ldr	r3, [pc, #460]	; (80094dc <HAL_RCC_GetSysClockFreq+0x204>)
 800930e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009310:	e0db      	b.n	80094ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009312:	4b73      	ldr	r3, [pc, #460]	; (80094e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8009314:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009316:	e0d8      	b.n	80094ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009318:	4b6f      	ldr	r3, [pc, #444]	; (80094d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009320:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009322:	4b6d      	ldr	r3, [pc, #436]	; (80094d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d063      	beq.n	80093f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800932e:	4b6a      	ldr	r3, [pc, #424]	; (80094d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	099b      	lsrs	r3, r3, #6
 8009334:	2200      	movs	r2, #0
 8009336:	63bb      	str	r3, [r7, #56]	; 0x38
 8009338:	63fa      	str	r2, [r7, #60]	; 0x3c
 800933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009340:	633b      	str	r3, [r7, #48]	; 0x30
 8009342:	2300      	movs	r3, #0
 8009344:	637b      	str	r3, [r7, #52]	; 0x34
 8009346:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800934a:	4622      	mov	r2, r4
 800934c:	462b      	mov	r3, r5
 800934e:	f04f 0000 	mov.w	r0, #0
 8009352:	f04f 0100 	mov.w	r1, #0
 8009356:	0159      	lsls	r1, r3, #5
 8009358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800935c:	0150      	lsls	r0, r2, #5
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	4621      	mov	r1, r4
 8009364:	1a51      	subs	r1, r2, r1
 8009366:	6139      	str	r1, [r7, #16]
 8009368:	4629      	mov	r1, r5
 800936a:	eb63 0301 	sbc.w	r3, r3, r1
 800936e:	617b      	str	r3, [r7, #20]
 8009370:	f04f 0200 	mov.w	r2, #0
 8009374:	f04f 0300 	mov.w	r3, #0
 8009378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800937c:	4659      	mov	r1, fp
 800937e:	018b      	lsls	r3, r1, #6
 8009380:	4651      	mov	r1, sl
 8009382:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009386:	4651      	mov	r1, sl
 8009388:	018a      	lsls	r2, r1, #6
 800938a:	4651      	mov	r1, sl
 800938c:	ebb2 0801 	subs.w	r8, r2, r1
 8009390:	4659      	mov	r1, fp
 8009392:	eb63 0901 	sbc.w	r9, r3, r1
 8009396:	f04f 0200 	mov.w	r2, #0
 800939a:	f04f 0300 	mov.w	r3, #0
 800939e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80093a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80093aa:	4690      	mov	r8, r2
 80093ac:	4699      	mov	r9, r3
 80093ae:	4623      	mov	r3, r4
 80093b0:	eb18 0303 	adds.w	r3, r8, r3
 80093b4:	60bb      	str	r3, [r7, #8]
 80093b6:	462b      	mov	r3, r5
 80093b8:	eb49 0303 	adc.w	r3, r9, r3
 80093bc:	60fb      	str	r3, [r7, #12]
 80093be:	f04f 0200 	mov.w	r2, #0
 80093c2:	f04f 0300 	mov.w	r3, #0
 80093c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80093ca:	4629      	mov	r1, r5
 80093cc:	024b      	lsls	r3, r1, #9
 80093ce:	4621      	mov	r1, r4
 80093d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80093d4:	4621      	mov	r1, r4
 80093d6:	024a      	lsls	r2, r1, #9
 80093d8:	4610      	mov	r0, r2
 80093da:	4619      	mov	r1, r3
 80093dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093de:	2200      	movs	r2, #0
 80093e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80093e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093e8:	f7f7 fbda 	bl	8000ba0 <__aeabi_uldivmod>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4613      	mov	r3, r2
 80093f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093f4:	e058      	b.n	80094a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093f6:	4b38      	ldr	r3, [pc, #224]	; (80094d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	099b      	lsrs	r3, r3, #6
 80093fc:	2200      	movs	r2, #0
 80093fe:	4618      	mov	r0, r3
 8009400:	4611      	mov	r1, r2
 8009402:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009406:	623b      	str	r3, [r7, #32]
 8009408:	2300      	movs	r3, #0
 800940a:	627b      	str	r3, [r7, #36]	; 0x24
 800940c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009410:	4642      	mov	r2, r8
 8009412:	464b      	mov	r3, r9
 8009414:	f04f 0000 	mov.w	r0, #0
 8009418:	f04f 0100 	mov.w	r1, #0
 800941c:	0159      	lsls	r1, r3, #5
 800941e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009422:	0150      	lsls	r0, r2, #5
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4641      	mov	r1, r8
 800942a:	ebb2 0a01 	subs.w	sl, r2, r1
 800942e:	4649      	mov	r1, r9
 8009430:	eb63 0b01 	sbc.w	fp, r3, r1
 8009434:	f04f 0200 	mov.w	r2, #0
 8009438:	f04f 0300 	mov.w	r3, #0
 800943c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009440:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009444:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009448:	ebb2 040a 	subs.w	r4, r2, sl
 800944c:	eb63 050b 	sbc.w	r5, r3, fp
 8009450:	f04f 0200 	mov.w	r2, #0
 8009454:	f04f 0300 	mov.w	r3, #0
 8009458:	00eb      	lsls	r3, r5, #3
 800945a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800945e:	00e2      	lsls	r2, r4, #3
 8009460:	4614      	mov	r4, r2
 8009462:	461d      	mov	r5, r3
 8009464:	4643      	mov	r3, r8
 8009466:	18e3      	adds	r3, r4, r3
 8009468:	603b      	str	r3, [r7, #0]
 800946a:	464b      	mov	r3, r9
 800946c:	eb45 0303 	adc.w	r3, r5, r3
 8009470:	607b      	str	r3, [r7, #4]
 8009472:	f04f 0200 	mov.w	r2, #0
 8009476:	f04f 0300 	mov.w	r3, #0
 800947a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800947e:	4629      	mov	r1, r5
 8009480:	028b      	lsls	r3, r1, #10
 8009482:	4621      	mov	r1, r4
 8009484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009488:	4621      	mov	r1, r4
 800948a:	028a      	lsls	r2, r1, #10
 800948c:	4610      	mov	r0, r2
 800948e:	4619      	mov	r1, r3
 8009490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009492:	2200      	movs	r2, #0
 8009494:	61bb      	str	r3, [r7, #24]
 8009496:	61fa      	str	r2, [r7, #28]
 8009498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800949c:	f7f7 fb80 	bl	8000ba0 <__aeabi_uldivmod>
 80094a0:	4602      	mov	r2, r0
 80094a2:	460b      	mov	r3, r1
 80094a4:	4613      	mov	r3, r2
 80094a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80094a8:	4b0b      	ldr	r3, [pc, #44]	; (80094d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	0c1b      	lsrs	r3, r3, #16
 80094ae:	f003 0303 	and.w	r3, r3, #3
 80094b2:	3301      	adds	r3, #1
 80094b4:	005b      	lsls	r3, r3, #1
 80094b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80094b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80094c2:	e002      	b.n	80094ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80094c4:	4b05      	ldr	r3, [pc, #20]	; (80094dc <HAL_RCC_GetSysClockFreq+0x204>)
 80094c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80094c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80094ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3750      	adds	r7, #80	; 0x50
 80094d0:	46bd      	mov	sp, r7
 80094d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094d6:	bf00      	nop
 80094d8:	40023800 	.word	0x40023800
 80094dc:	00f42400 	.word	0x00f42400
 80094e0:	007a1200 	.word	0x007a1200

080094e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094e4:	b480      	push	{r7}
 80094e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80094e8:	4b03      	ldr	r3, [pc, #12]	; (80094f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80094ea:	681b      	ldr	r3, [r3, #0]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	2000028c 	.word	0x2000028c

080094fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009500:	f7ff fff0 	bl	80094e4 <HAL_RCC_GetHCLKFreq>
 8009504:	4602      	mov	r2, r0
 8009506:	4b05      	ldr	r3, [pc, #20]	; (800951c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	0a9b      	lsrs	r3, r3, #10
 800950c:	f003 0307 	and.w	r3, r3, #7
 8009510:	4903      	ldr	r1, [pc, #12]	; (8009520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009512:	5ccb      	ldrb	r3, [r1, r3]
 8009514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009518:	4618      	mov	r0, r3
 800951a:	bd80      	pop	{r7, pc}
 800951c:	40023800 	.word	0x40023800
 8009520:	0800e490 	.word	0x0800e490

08009524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009528:	f7ff ffdc 	bl	80094e4 <HAL_RCC_GetHCLKFreq>
 800952c:	4602      	mov	r2, r0
 800952e:	4b05      	ldr	r3, [pc, #20]	; (8009544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	0b5b      	lsrs	r3, r3, #13
 8009534:	f003 0307 	and.w	r3, r3, #7
 8009538:	4903      	ldr	r1, [pc, #12]	; (8009548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800953a:	5ccb      	ldrb	r3, [r1, r3]
 800953c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009540:	4618      	mov	r0, r3
 8009542:	bd80      	pop	{r7, pc}
 8009544:	40023800 	.word	0x40023800
 8009548:	0800e490 	.word	0x0800e490

0800954c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e04c      	b.n	80095f8 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d111      	bne.n	800958e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f001 fc02 	bl	800ad7c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800957c:	2b00      	cmp	r3, #0
 800957e:	d102      	bne.n	8009586 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a1f      	ldr	r2, [pc, #124]	; (8009600 <HAL_TIM_Base_Init+0xb4>)
 8009584:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2202      	movs	r2, #2
 8009592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	3304      	adds	r3, #4
 800959e:	4619      	mov	r1, r3
 80095a0:	4610      	mov	r0, r2
 80095a2:	f001 f91f 	bl	800a7e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2201      	movs	r2, #1
 80095e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	080047f9 	.word	0x080047f9

08009604 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b01      	cmp	r3, #1
 8009616:	d001      	beq.n	800961c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e03c      	b.n	8009696 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2202      	movs	r2, #2
 8009620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a1e      	ldr	r2, [pc, #120]	; (80096a4 <HAL_TIM_Base_Start+0xa0>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d018      	beq.n	8009660 <HAL_TIM_Base_Start+0x5c>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009636:	d013      	beq.n	8009660 <HAL_TIM_Base_Start+0x5c>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a1a      	ldr	r2, [pc, #104]	; (80096a8 <HAL_TIM_Base_Start+0xa4>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00e      	beq.n	8009660 <HAL_TIM_Base_Start+0x5c>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a19      	ldr	r2, [pc, #100]	; (80096ac <HAL_TIM_Base_Start+0xa8>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d009      	beq.n	8009660 <HAL_TIM_Base_Start+0x5c>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a17      	ldr	r2, [pc, #92]	; (80096b0 <HAL_TIM_Base_Start+0xac>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d004      	beq.n	8009660 <HAL_TIM_Base_Start+0x5c>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a16      	ldr	r2, [pc, #88]	; (80096b4 <HAL_TIM_Base_Start+0xb0>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d111      	bne.n	8009684 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f003 0307 	and.w	r3, r3, #7
 800966a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2b06      	cmp	r3, #6
 8009670:	d010      	beq.n	8009694 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f042 0201 	orr.w	r2, r2, #1
 8009680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009682:	e007      	b.n	8009694 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f042 0201 	orr.w	r2, r2, #1
 8009692:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	40010000 	.word	0x40010000
 80096a8:	40000400 	.word	0x40000400
 80096ac:	40000800 	.word	0x40000800
 80096b0:	40000c00 	.word	0x40000c00
 80096b4:	40014000 	.word	0x40014000

080096b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d001      	beq.n	80096d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e044      	b.n	800975a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2202      	movs	r2, #2
 80096d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68da      	ldr	r2, [r3, #12]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f042 0201 	orr.w	r2, r2, #1
 80096e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a1e      	ldr	r2, [pc, #120]	; (8009768 <HAL_TIM_Base_Start_IT+0xb0>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d018      	beq.n	8009724 <HAL_TIM_Base_Start_IT+0x6c>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096fa:	d013      	beq.n	8009724 <HAL_TIM_Base_Start_IT+0x6c>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a1a      	ldr	r2, [pc, #104]	; (800976c <HAL_TIM_Base_Start_IT+0xb4>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d00e      	beq.n	8009724 <HAL_TIM_Base_Start_IT+0x6c>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a19      	ldr	r2, [pc, #100]	; (8009770 <HAL_TIM_Base_Start_IT+0xb8>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d009      	beq.n	8009724 <HAL_TIM_Base_Start_IT+0x6c>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a17      	ldr	r2, [pc, #92]	; (8009774 <HAL_TIM_Base_Start_IT+0xbc>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d004      	beq.n	8009724 <HAL_TIM_Base_Start_IT+0x6c>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a16      	ldr	r2, [pc, #88]	; (8009778 <HAL_TIM_Base_Start_IT+0xc0>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d111      	bne.n	8009748 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f003 0307 	and.w	r3, r3, #7
 800972e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2b06      	cmp	r3, #6
 8009734:	d010      	beq.n	8009758 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f042 0201 	orr.w	r2, r2, #1
 8009744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009746:	e007      	b.n	8009758 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f042 0201 	orr.w	r2, r2, #1
 8009756:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	40010000 	.word	0x40010000
 800976c:	40000400 	.word	0x40000400
 8009770:	40000800 	.word	0x40000800
 8009774:	40000c00 	.word	0x40000c00
 8009778:	40014000 	.word	0x40014000

0800977c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e04c      	b.n	8009828 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	d111      	bne.n	80097be <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f001 faea 	bl	800ad7c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d102      	bne.n	80097b6 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a1f      	ldr	r2, [pc, #124]	; (8009830 <HAL_TIM_OC_Init+0xb4>)
 80097b4:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2202      	movs	r2, #2
 80097c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	3304      	adds	r3, #4
 80097ce:	4619      	mov	r1, r3
 80097d0:	4610      	mov	r0, r2
 80097d2:	f001 f807 	bl	800a7e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	08009835 	.word	0x08009835

08009834 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e04c      	b.n	80098f4 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b00      	cmp	r3, #0
 8009864:	d111      	bne.n	800988a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f001 fa84 	bl	800ad7c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009878:	2b00      	cmp	r3, #0
 800987a:	d102      	bne.n	8009882 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a1f      	ldr	r2, [pc, #124]	; (80098fc <HAL_TIM_PWM_Init+0xb4>)
 8009880:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2202      	movs	r2, #2
 800988e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	3304      	adds	r3, #4
 800989a:	4619      	mov	r1, r3
 800989c:	4610      	mov	r0, r2
 800989e:	f000 ffa1 	bl	800a7e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2201      	movs	r2, #1
 80098ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2201      	movs	r2, #1
 80098d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	080047a9 	.word	0x080047a9

08009900 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d109      	bne.n	8009924 <HAL_TIM_PWM_Start+0x24>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009916:	b2db      	uxtb	r3, r3
 8009918:	2b01      	cmp	r3, #1
 800991a:	bf14      	ite	ne
 800991c:	2301      	movne	r3, #1
 800991e:	2300      	moveq	r3, #0
 8009920:	b2db      	uxtb	r3, r3
 8009922:	e022      	b.n	800996a <HAL_TIM_PWM_Start+0x6a>
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	2b04      	cmp	r3, #4
 8009928:	d109      	bne.n	800993e <HAL_TIM_PWM_Start+0x3e>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009930:	b2db      	uxtb	r3, r3
 8009932:	2b01      	cmp	r3, #1
 8009934:	bf14      	ite	ne
 8009936:	2301      	movne	r3, #1
 8009938:	2300      	moveq	r3, #0
 800993a:	b2db      	uxtb	r3, r3
 800993c:	e015      	b.n	800996a <HAL_TIM_PWM_Start+0x6a>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	2b08      	cmp	r3, #8
 8009942:	d109      	bne.n	8009958 <HAL_TIM_PWM_Start+0x58>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800994a:	b2db      	uxtb	r3, r3
 800994c:	2b01      	cmp	r3, #1
 800994e:	bf14      	ite	ne
 8009950:	2301      	movne	r3, #1
 8009952:	2300      	moveq	r3, #0
 8009954:	b2db      	uxtb	r3, r3
 8009956:	e008      	b.n	800996a <HAL_TIM_PWM_Start+0x6a>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b01      	cmp	r3, #1
 8009962:	bf14      	ite	ne
 8009964:	2301      	movne	r3, #1
 8009966:	2300      	moveq	r3, #0
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d001      	beq.n	8009972 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e068      	b.n	8009a44 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d104      	bne.n	8009982 <HAL_TIM_PWM_Start+0x82>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009980:	e013      	b.n	80099aa <HAL_TIM_PWM_Start+0xaa>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	2b04      	cmp	r3, #4
 8009986:	d104      	bne.n	8009992 <HAL_TIM_PWM_Start+0x92>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2202      	movs	r2, #2
 800998c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009990:	e00b      	b.n	80099aa <HAL_TIM_PWM_Start+0xaa>
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	2b08      	cmp	r3, #8
 8009996:	d104      	bne.n	80099a2 <HAL_TIM_PWM_Start+0xa2>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2202      	movs	r2, #2
 800999c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099a0:	e003      	b.n	80099aa <HAL_TIM_PWM_Start+0xaa>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2202      	movs	r2, #2
 80099a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2201      	movs	r2, #1
 80099b0:	6839      	ldr	r1, [r7, #0]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f001 f9bc 	bl	800ad30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a23      	ldr	r2, [pc, #140]	; (8009a4c <HAL_TIM_PWM_Start+0x14c>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d107      	bne.n	80099d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a1d      	ldr	r2, [pc, #116]	; (8009a4c <HAL_TIM_PWM_Start+0x14c>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d018      	beq.n	8009a0e <HAL_TIM_PWM_Start+0x10e>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e4:	d013      	beq.n	8009a0e <HAL_TIM_PWM_Start+0x10e>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a19      	ldr	r2, [pc, #100]	; (8009a50 <HAL_TIM_PWM_Start+0x150>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d00e      	beq.n	8009a0e <HAL_TIM_PWM_Start+0x10e>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a17      	ldr	r2, [pc, #92]	; (8009a54 <HAL_TIM_PWM_Start+0x154>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d009      	beq.n	8009a0e <HAL_TIM_PWM_Start+0x10e>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a16      	ldr	r2, [pc, #88]	; (8009a58 <HAL_TIM_PWM_Start+0x158>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d004      	beq.n	8009a0e <HAL_TIM_PWM_Start+0x10e>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a14      	ldr	r2, [pc, #80]	; (8009a5c <HAL_TIM_PWM_Start+0x15c>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d111      	bne.n	8009a32 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f003 0307 	and.w	r3, r3, #7
 8009a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2b06      	cmp	r3, #6
 8009a1e:	d010      	beq.n	8009a42 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f042 0201 	orr.w	r2, r2, #1
 8009a2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a30:	e007      	b.n	8009a42 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f042 0201 	orr.w	r2, r2, #1
 8009a40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	40010000 	.word	0x40010000
 8009a50:	40000400 	.word	0x40000400
 8009a54:	40000800 	.word	0x40000800
 8009a58:	40000c00 	.word	0x40000c00
 8009a5c:	40014000 	.word	0x40014000

08009a60 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d101      	bne.n	8009a74 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e04c      	b.n	8009b0e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d111      	bne.n	8009aa4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f001 f977 	bl	800ad7c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d102      	bne.n	8009a9c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a1f      	ldr	r2, [pc, #124]	; (8009b18 <HAL_TIM_OnePulse_Init+0xb8>)
 8009a9a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	f000 fe94 	bl	800a7e4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f022 0208 	bic.w	r2, r2, #8
 8009aca:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6819      	ldr	r1, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	430a      	orrs	r2, r1
 8009ada:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	08009b1d 	.word	0x08009b1d

08009b1c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b58:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d108      	bne.n	8009b72 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d105      	bne.n	8009b72 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b66:	7b7b      	ldrb	r3, [r7, #13]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d102      	bne.n	8009b72 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b6c:	7b3b      	ldrb	r3, [r7, #12]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d001      	beq.n	8009b76 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e03b      	b.n	8009bee <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2202      	movs	r2, #2
 8009b82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2202      	movs	r2, #2
 8009b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2202      	movs	r2, #2
 8009b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68da      	ldr	r2, [r3, #12]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f042 0202 	orr.w	r2, r2, #2
 8009ba4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68da      	ldr	r2, [r3, #12]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f042 0204 	orr.w	r2, r2, #4
 8009bb4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f001 f8b6 	bl	800ad30 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	2104      	movs	r1, #4
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f001 f8af 	bl	800ad30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a08      	ldr	r2, [pc, #32]	; (8009bf8 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d107      	bne.n	8009bec <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	40010000 	.word	0x40010000

08009bfc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b086      	sub	sp, #24
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d101      	bne.n	8009c10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e0a2      	b.n	8009d56 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d111      	bne.n	8009c40 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f001 f8a9 	bl	800ad7c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d102      	bne.n	8009c38 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a4a      	ldr	r2, [pc, #296]	; (8009d60 <HAL_TIM_Encoder_Init+0x164>)
 8009c36:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2202      	movs	r2, #2
 8009c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	6812      	ldr	r2, [r2, #0]
 8009c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c56:	f023 0307 	bic.w	r3, r3, #7
 8009c5a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3304      	adds	r3, #4
 8009c64:	4619      	mov	r1, r3
 8009c66:	4610      	mov	r0, r2
 8009c68:	f000 fdbc 	bl	800a7e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6a1b      	ldr	r3, [r3, #32]
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c94:	f023 0303 	bic.w	r3, r3, #3
 8009c98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	689a      	ldr	r2, [r3, #8]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	021b      	lsls	r3, r3, #8
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009cb2:	f023 030c 	bic.w	r3, r3, #12
 8009cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	68da      	ldr	r2, [r3, #12]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	69db      	ldr	r3, [r3, #28]
 8009ccc:	021b      	lsls	r3, r3, #8
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	011a      	lsls	r2, r3, #4
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	6a1b      	ldr	r3, [r3, #32]
 8009ce0:	031b      	lsls	r3, r3, #12
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009cf0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009cf8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	685a      	ldr	r2, [r3, #4]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	011b      	lsls	r3, r3, #4
 8009d04:	4313      	orrs	r3, r2
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	697a      	ldr	r2, [r7, #20]
 8009d12:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	693a      	ldr	r2, [r7, #16]
 8009d1a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3718      	adds	r7, #24
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	080048bd 	.word	0x080048bd

08009d64 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009d8c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d110      	bne.n	8009db6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d102      	bne.n	8009da0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d9a:	7b7b      	ldrb	r3, [r7, #13]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d001      	beq.n	8009da4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e069      	b.n	8009e78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2202      	movs	r2, #2
 8009db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009db4:	e031      	b.n	8009e1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2b04      	cmp	r3, #4
 8009dba:	d110      	bne.n	8009dde <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d102      	bne.n	8009dc8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009dc2:	7b3b      	ldrb	r3, [r7, #12]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d001      	beq.n	8009dcc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e055      	b.n	8009e78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ddc:	e01d      	b.n	8009e1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d108      	bne.n	8009df6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d105      	bne.n	8009df6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009dea:	7b7b      	ldrb	r3, [r7, #13]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d102      	bne.n	8009df6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009df0:	7b3b      	ldrb	r3, [r7, #12]
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d001      	beq.n	8009dfa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e03e      	b.n	8009e78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2202      	movs	r2, #2
 8009e06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2202      	movs	r2, #2
 8009e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2202      	movs	r2, #2
 8009e16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d003      	beq.n	8009e28 <HAL_TIM_Encoder_Start+0xc4>
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	2b04      	cmp	r3, #4
 8009e24:	d008      	beq.n	8009e38 <HAL_TIM_Encoder_Start+0xd4>
 8009e26:	e00f      	b.n	8009e48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	2100      	movs	r1, #0
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 ff7d 	bl	800ad30 <TIM_CCxChannelCmd>
      break;
 8009e36:	e016      	b.n	8009e66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	2104      	movs	r1, #4
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 ff75 	bl	800ad30 <TIM_CCxChannelCmd>
      break;
 8009e46:	e00e      	b.n	8009e66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	2100      	movs	r1, #0
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 ff6d 	bl	800ad30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	2104      	movs	r1, #4
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 ff66 	bl	800ad30 <TIM_CCxChannelCmd>
      break;
 8009e64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f042 0201 	orr.w	r2, r2, #1
 8009e74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	f003 0302 	and.w	r3, r3, #2
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d128      	bne.n	8009ee8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	f003 0302 	and.w	r3, r3, #2
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d121      	bne.n	8009ee8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f06f 0202 	mvn.w	r2, #2
 8009eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	f003 0303 	and.w	r3, r3, #3
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d005      	beq.n	8009ece <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	4798      	blx	r3
 8009ecc:	e009      	b.n	8009ee2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	f003 0304 	and.w	r3, r3, #4
 8009ef2:	2b04      	cmp	r3, #4
 8009ef4:	d128      	bne.n	8009f48 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	f003 0304 	and.w	r3, r3, #4
 8009f00:	2b04      	cmp	r3, #4
 8009f02:	d121      	bne.n	8009f48 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f06f 0204 	mvn.w	r2, #4
 8009f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2202      	movs	r2, #2
 8009f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d005      	beq.n	8009f2e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	4798      	blx	r3
 8009f2c:	e009      	b.n	8009f42 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	f003 0308 	and.w	r3, r3, #8
 8009f52:	2b08      	cmp	r3, #8
 8009f54:	d128      	bne.n	8009fa8 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	f003 0308 	and.w	r3, r3, #8
 8009f60:	2b08      	cmp	r3, #8
 8009f62:	d121      	bne.n	8009fa8 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f06f 0208 	mvn.w	r2, #8
 8009f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2204      	movs	r2, #4
 8009f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	69db      	ldr	r3, [r3, #28]
 8009f7a:	f003 0303 	and.w	r3, r3, #3
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d005      	beq.n	8009f8e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	4798      	blx	r3
 8009f8c:	e009      	b.n	8009fa2 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	f003 0310 	and.w	r3, r3, #16
 8009fb2:	2b10      	cmp	r3, #16
 8009fb4:	d128      	bne.n	800a008 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	f003 0310 	and.w	r3, r3, #16
 8009fc0:	2b10      	cmp	r3, #16
 8009fc2:	d121      	bne.n	800a008 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f06f 0210 	mvn.w	r2, #16
 8009fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2208      	movs	r2, #8
 8009fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d005      	beq.n	8009fee <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	4798      	blx	r3
 8009fec:	e009      	b.n	800a002 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	f003 0301 	and.w	r3, r3, #1
 800a012:	2b01      	cmp	r3, #1
 800a014:	d110      	bne.n	800a038 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	f003 0301 	and.w	r3, r3, #1
 800a020:	2b01      	cmp	r3, #1
 800a022:	d109      	bne.n	800a038 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f06f 0201 	mvn.w	r2, #1
 800a02c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a042:	2b80      	cmp	r3, #128	; 0x80
 800a044:	d110      	bne.n	800a068 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a050:	2b80      	cmp	r3, #128	; 0x80
 800a052:	d109      	bne.n	800a068 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a05c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a072:	2b40      	cmp	r3, #64	; 0x40
 800a074:	d110      	bne.n	800a098 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a080:	2b40      	cmp	r3, #64	; 0x40
 800a082:	d109      	bne.n	800a098 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a08c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	f003 0320 	and.w	r3, r3, #32
 800a0a2:	2b20      	cmp	r3, #32
 800a0a4:	d110      	bne.n	800a0c8 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	f003 0320 	and.w	r3, r3, #32
 800a0b0:	2b20      	cmp	r3, #32
 800a0b2:	d109      	bne.n	800a0c8 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f06f 0220 	mvn.w	r2, #32
 800a0bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0c8:	bf00      	nop
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d101      	bne.n	800a0ee <HAL_TIM_OC_ConfigChannel+0x1e>
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	e048      	b.n	800a180 <HAL_TIM_OC_ConfigChannel+0xb0>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b0c      	cmp	r3, #12
 800a0fa:	d839      	bhi.n	800a170 <HAL_TIM_OC_ConfigChannel+0xa0>
 800a0fc:	a201      	add	r2, pc, #4	; (adr r2, 800a104 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a102:	bf00      	nop
 800a104:	0800a139 	.word	0x0800a139
 800a108:	0800a171 	.word	0x0800a171
 800a10c:	0800a171 	.word	0x0800a171
 800a110:	0800a171 	.word	0x0800a171
 800a114:	0800a147 	.word	0x0800a147
 800a118:	0800a171 	.word	0x0800a171
 800a11c:	0800a171 	.word	0x0800a171
 800a120:	0800a171 	.word	0x0800a171
 800a124:	0800a155 	.word	0x0800a155
 800a128:	0800a171 	.word	0x0800a171
 800a12c:	0800a171 	.word	0x0800a171
 800a130:	0800a171 	.word	0x0800a171
 800a134:	0800a163 	.word	0x0800a163
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68b9      	ldr	r1, [r7, #8]
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 fbd0 	bl	800a8e4 <TIM_OC1_SetConfig>
      break;
 800a144:	e017      	b.n	800a176 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68b9      	ldr	r1, [r7, #8]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f000 fc2f 	bl	800a9b0 <TIM_OC2_SetConfig>
      break;
 800a152:	e010      	b.n	800a176 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68b9      	ldr	r1, [r7, #8]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 fc94 	bl	800aa88 <TIM_OC3_SetConfig>
      break;
 800a160:	e009      	b.n	800a176 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68b9      	ldr	r1, [r7, #8]
 800a168:	4618      	mov	r0, r3
 800a16a:	f000 fcf7 	bl	800ab5c <TIM_OC4_SetConfig>
      break;
 800a16e:	e002      	b.n	800a176 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	75fb      	strb	r3, [r7, #23]
      break;
 800a174:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a17e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3718      	adds	r7, #24
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a194:	2300      	movs	r3, #0
 800a196:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d101      	bne.n	800a1a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	e0ae      	b.n	800a304 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b0c      	cmp	r3, #12
 800a1b2:	f200 809f 	bhi.w	800a2f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a1b6:	a201      	add	r2, pc, #4	; (adr r2, 800a1bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1bc:	0800a1f1 	.word	0x0800a1f1
 800a1c0:	0800a2f5 	.word	0x0800a2f5
 800a1c4:	0800a2f5 	.word	0x0800a2f5
 800a1c8:	0800a2f5 	.word	0x0800a2f5
 800a1cc:	0800a231 	.word	0x0800a231
 800a1d0:	0800a2f5 	.word	0x0800a2f5
 800a1d4:	0800a2f5 	.word	0x0800a2f5
 800a1d8:	0800a2f5 	.word	0x0800a2f5
 800a1dc:	0800a273 	.word	0x0800a273
 800a1e0:	0800a2f5 	.word	0x0800a2f5
 800a1e4:	0800a2f5 	.word	0x0800a2f5
 800a1e8:	0800a2f5 	.word	0x0800a2f5
 800a1ec:	0800a2b3 	.word	0x0800a2b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68b9      	ldr	r1, [r7, #8]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 fb74 	bl	800a8e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	699a      	ldr	r2, [r3, #24]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f042 0208 	orr.w	r2, r2, #8
 800a20a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	699a      	ldr	r2, [r3, #24]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f022 0204 	bic.w	r2, r2, #4
 800a21a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6999      	ldr	r1, [r3, #24]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	691a      	ldr	r2, [r3, #16]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	430a      	orrs	r2, r1
 800a22c:	619a      	str	r2, [r3, #24]
      break;
 800a22e:	e064      	b.n	800a2fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68b9      	ldr	r1, [r7, #8]
 800a236:	4618      	mov	r0, r3
 800a238:	f000 fbba 	bl	800a9b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	699a      	ldr	r2, [r3, #24]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a24a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	699a      	ldr	r2, [r3, #24]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a25a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6999      	ldr	r1, [r3, #24]
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	021a      	lsls	r2, r3, #8
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	430a      	orrs	r2, r1
 800a26e:	619a      	str	r2, [r3, #24]
      break;
 800a270:	e043      	b.n	800a2fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	68b9      	ldr	r1, [r7, #8]
 800a278:	4618      	mov	r0, r3
 800a27a:	f000 fc05 	bl	800aa88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	69da      	ldr	r2, [r3, #28]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f042 0208 	orr.w	r2, r2, #8
 800a28c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	69da      	ldr	r2, [r3, #28]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f022 0204 	bic.w	r2, r2, #4
 800a29c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	69d9      	ldr	r1, [r3, #28]
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	691a      	ldr	r2, [r3, #16]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	430a      	orrs	r2, r1
 800a2ae:	61da      	str	r2, [r3, #28]
      break;
 800a2b0:	e023      	b.n	800a2fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68b9      	ldr	r1, [r7, #8]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f000 fc4f 	bl	800ab5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	69da      	ldr	r2, [r3, #28]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	69da      	ldr	r2, [r3, #28]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	69d9      	ldr	r1, [r3, #28]
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	021a      	lsls	r2, r3, #8
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	61da      	str	r2, [r3, #28]
      break;
 800a2f2:	e002      	b.n	800a2fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a2f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a302:	7dfb      	ldrb	r3, [r7, #23]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3718      	adds	r7, #24
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a320:	2b01      	cmp	r3, #1
 800a322:	d101      	bne.n	800a328 <HAL_TIM_ConfigClockSource+0x1c>
 800a324:	2302      	movs	r3, #2
 800a326:	e0b4      	b.n	800a492 <HAL_TIM_ConfigClockSource+0x186>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2202      	movs	r2, #2
 800a334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a34e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a360:	d03e      	beq.n	800a3e0 <HAL_TIM_ConfigClockSource+0xd4>
 800a362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a366:	f200 8087 	bhi.w	800a478 <HAL_TIM_ConfigClockSource+0x16c>
 800a36a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a36e:	f000 8086 	beq.w	800a47e <HAL_TIM_ConfigClockSource+0x172>
 800a372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a376:	d87f      	bhi.n	800a478 <HAL_TIM_ConfigClockSource+0x16c>
 800a378:	2b70      	cmp	r3, #112	; 0x70
 800a37a:	d01a      	beq.n	800a3b2 <HAL_TIM_ConfigClockSource+0xa6>
 800a37c:	2b70      	cmp	r3, #112	; 0x70
 800a37e:	d87b      	bhi.n	800a478 <HAL_TIM_ConfigClockSource+0x16c>
 800a380:	2b60      	cmp	r3, #96	; 0x60
 800a382:	d050      	beq.n	800a426 <HAL_TIM_ConfigClockSource+0x11a>
 800a384:	2b60      	cmp	r3, #96	; 0x60
 800a386:	d877      	bhi.n	800a478 <HAL_TIM_ConfigClockSource+0x16c>
 800a388:	2b50      	cmp	r3, #80	; 0x50
 800a38a:	d03c      	beq.n	800a406 <HAL_TIM_ConfigClockSource+0xfa>
 800a38c:	2b50      	cmp	r3, #80	; 0x50
 800a38e:	d873      	bhi.n	800a478 <HAL_TIM_ConfigClockSource+0x16c>
 800a390:	2b40      	cmp	r3, #64	; 0x40
 800a392:	d058      	beq.n	800a446 <HAL_TIM_ConfigClockSource+0x13a>
 800a394:	2b40      	cmp	r3, #64	; 0x40
 800a396:	d86f      	bhi.n	800a478 <HAL_TIM_ConfigClockSource+0x16c>
 800a398:	2b30      	cmp	r3, #48	; 0x30
 800a39a:	d064      	beq.n	800a466 <HAL_TIM_ConfigClockSource+0x15a>
 800a39c:	2b30      	cmp	r3, #48	; 0x30
 800a39e:	d86b      	bhi.n	800a478 <HAL_TIM_ConfigClockSource+0x16c>
 800a3a0:	2b20      	cmp	r3, #32
 800a3a2:	d060      	beq.n	800a466 <HAL_TIM_ConfigClockSource+0x15a>
 800a3a4:	2b20      	cmp	r3, #32
 800a3a6:	d867      	bhi.n	800a478 <HAL_TIM_ConfigClockSource+0x16c>
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d05c      	beq.n	800a466 <HAL_TIM_ConfigClockSource+0x15a>
 800a3ac:	2b10      	cmp	r3, #16
 800a3ae:	d05a      	beq.n	800a466 <HAL_TIM_ConfigClockSource+0x15a>
 800a3b0:	e062      	b.n	800a478 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6818      	ldr	r0, [r3, #0]
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	6899      	ldr	r1, [r3, #8]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	685a      	ldr	r2, [r3, #4]
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	f000 fc95 	bl	800acf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a3d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	609a      	str	r2, [r3, #8]
      break;
 800a3de:	e04f      	b.n	800a480 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6818      	ldr	r0, [r3, #0]
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	6899      	ldr	r1, [r3, #8]
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	f000 fc7e 	bl	800acf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	689a      	ldr	r2, [r3, #8]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a402:	609a      	str	r2, [r3, #8]
      break;
 800a404:	e03c      	b.n	800a480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6818      	ldr	r0, [r3, #0]
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	6859      	ldr	r1, [r3, #4]
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	461a      	mov	r2, r3
 800a414:	f000 fbf2 	bl	800abfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2150      	movs	r1, #80	; 0x50
 800a41e:	4618      	mov	r0, r3
 800a420:	f000 fc4b 	bl	800acba <TIM_ITRx_SetConfig>
      break;
 800a424:	e02c      	b.n	800a480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6818      	ldr	r0, [r3, #0]
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	6859      	ldr	r1, [r3, #4]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	461a      	mov	r2, r3
 800a434:	f000 fc11 	bl	800ac5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2160      	movs	r1, #96	; 0x60
 800a43e:	4618      	mov	r0, r3
 800a440:	f000 fc3b 	bl	800acba <TIM_ITRx_SetConfig>
      break;
 800a444:	e01c      	b.n	800a480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6818      	ldr	r0, [r3, #0]
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	6859      	ldr	r1, [r3, #4]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	461a      	mov	r2, r3
 800a454:	f000 fbd2 	bl	800abfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2140      	movs	r1, #64	; 0x40
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 fc2b 	bl	800acba <TIM_ITRx_SetConfig>
      break;
 800a464:	e00c      	b.n	800a480 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4619      	mov	r1, r3
 800a470:	4610      	mov	r0, r2
 800a472:	f000 fc22 	bl	800acba <TIM_ITRx_SetConfig>
      break;
 800a476:	e003      	b.n	800a480 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	73fb      	strb	r3, [r7, #15]
      break;
 800a47c:	e000      	b.n	800a480 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a47e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a490:	7bfb      	ldrb	r3, [r7, #15]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b083      	sub	sp, #12
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a4a2:	bf00      	nop
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b083      	sub	sp, #12
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4b6:	bf00      	nop
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b083      	sub	sp, #12
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4ca:	bf00      	nop
 800a4cc:	370c      	adds	r7, #12
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b083      	sub	sp, #12
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a4de:	bf00      	nop
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b083      	sub	sp, #12
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4f2:	bf00      	nop
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b083      	sub	sp, #12
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a506:	bf00      	nop
 800a508:	370c      	adds	r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr

0800a512 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a512:	b480      	push	{r7}
 800a514:	b083      	sub	sp, #12
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a51a:	bf00      	nop
 800a51c:	370c      	adds	r7, #12
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr

0800a526 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a526:	b480      	push	{r7}
 800a528:	b083      	sub	sp, #12
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a52e:	bf00      	nop
 800a530:	370c      	adds	r7, #12
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr

0800a53a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a53a:	b480      	push	{r7}
 800a53c:	b083      	sub	sp, #12
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a542:	bf00      	nop
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
	...

0800a550 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a550:	b480      	push	{r7}
 800a552:	b087      	sub	sp, #28
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	460b      	mov	r3, r1
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a55e:	2300      	movs	r3, #0
 800a560:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d101      	bne.n	800a56c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e135      	b.n	800a7d8 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a572:	2b01      	cmp	r3, #1
 800a574:	d101      	bne.n	800a57a <HAL_TIM_RegisterCallback+0x2a>
 800a576:	2302      	movs	r3, #2
 800a578:	e12e      	b.n	800a7d8 <HAL_TIM_RegisterCallback+0x288>
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	f040 80ba 	bne.w	800a704 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800a590:	7afb      	ldrb	r3, [r7, #11]
 800a592:	2b1a      	cmp	r3, #26
 800a594:	f200 80b3 	bhi.w	800a6fe <HAL_TIM_RegisterCallback+0x1ae>
 800a598:	a201      	add	r2, pc, #4	; (adr r2, 800a5a0 <HAL_TIM_RegisterCallback+0x50>)
 800a59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59e:	bf00      	nop
 800a5a0:	0800a60d 	.word	0x0800a60d
 800a5a4:	0800a615 	.word	0x0800a615
 800a5a8:	0800a61d 	.word	0x0800a61d
 800a5ac:	0800a625 	.word	0x0800a625
 800a5b0:	0800a62d 	.word	0x0800a62d
 800a5b4:	0800a635 	.word	0x0800a635
 800a5b8:	0800a63d 	.word	0x0800a63d
 800a5bc:	0800a645 	.word	0x0800a645
 800a5c0:	0800a64d 	.word	0x0800a64d
 800a5c4:	0800a655 	.word	0x0800a655
 800a5c8:	0800a65d 	.word	0x0800a65d
 800a5cc:	0800a665 	.word	0x0800a665
 800a5d0:	0800a66d 	.word	0x0800a66d
 800a5d4:	0800a675 	.word	0x0800a675
 800a5d8:	0800a67d 	.word	0x0800a67d
 800a5dc:	0800a687 	.word	0x0800a687
 800a5e0:	0800a691 	.word	0x0800a691
 800a5e4:	0800a69b 	.word	0x0800a69b
 800a5e8:	0800a6a5 	.word	0x0800a6a5
 800a5ec:	0800a6af 	.word	0x0800a6af
 800a5f0:	0800a6b9 	.word	0x0800a6b9
 800a5f4:	0800a6c3 	.word	0x0800a6c3
 800a5f8:	0800a6cd 	.word	0x0800a6cd
 800a5fc:	0800a6d7 	.word	0x0800a6d7
 800a600:	0800a6e1 	.word	0x0800a6e1
 800a604:	0800a6eb 	.word	0x0800a6eb
 800a608:	0800a6f5 	.word	0x0800a6f5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a612:	e0dc      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a61a:	e0d8      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a622:	e0d4      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a62a:	e0d0      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a632:	e0cc      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a63a:	e0c8      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a642:	e0c4      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a64a:	e0c0      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a652:	e0bc      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a65a:	e0b8      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a662:	e0b4      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a66a:	e0b0      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a672:	e0ac      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a67a:	e0a8      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800a684:	e0a3      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800a68e:	e09e      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800a698:	e099      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800a6a2:	e094      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800a6ac:	e08f      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800a6b6:	e08a      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800a6c0:	e085      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800a6ca:	e080      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800a6d4:	e07b      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800a6de:	e076      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800a6e8:	e071      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800a6f2:	e06c      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800a6fc:	e067      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	75fb      	strb	r3, [r7, #23]
        break;
 800a702:	e064      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d15c      	bne.n	800a7ca <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800a710:	7afb      	ldrb	r3, [r7, #11]
 800a712:	2b0d      	cmp	r3, #13
 800a714:	d856      	bhi.n	800a7c4 <HAL_TIM_RegisterCallback+0x274>
 800a716:	a201      	add	r2, pc, #4	; (adr r2, 800a71c <HAL_TIM_RegisterCallback+0x1cc>)
 800a718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71c:	0800a755 	.word	0x0800a755
 800a720:	0800a75d 	.word	0x0800a75d
 800a724:	0800a765 	.word	0x0800a765
 800a728:	0800a76d 	.word	0x0800a76d
 800a72c:	0800a775 	.word	0x0800a775
 800a730:	0800a77d 	.word	0x0800a77d
 800a734:	0800a785 	.word	0x0800a785
 800a738:	0800a78d 	.word	0x0800a78d
 800a73c:	0800a795 	.word	0x0800a795
 800a740:	0800a79d 	.word	0x0800a79d
 800a744:	0800a7a5 	.word	0x0800a7a5
 800a748:	0800a7ad 	.word	0x0800a7ad
 800a74c:	0800a7b5 	.word	0x0800a7b5
 800a750:	0800a7bd 	.word	0x0800a7bd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a75a:	e038      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a762:	e034      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a76a:	e030      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a772:	e02c      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a77a:	e028      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a782:	e024      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a78a:	e020      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a792:	e01c      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a79a:	e018      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a7a2:	e014      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a7aa:	e010      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a7b2:	e00c      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a7ba:	e008      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a7c2:	e004      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	75fb      	strb	r3, [r7, #23]
        break;
 800a7c8:	e001      	b.n	800a7ce <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	371c      	adds	r7, #28
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a34      	ldr	r2, [pc, #208]	; (800a8c8 <TIM_Base_SetConfig+0xe4>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d00f      	beq.n	800a81c <TIM_Base_SetConfig+0x38>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a802:	d00b      	beq.n	800a81c <TIM_Base_SetConfig+0x38>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a31      	ldr	r2, [pc, #196]	; (800a8cc <TIM_Base_SetConfig+0xe8>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d007      	beq.n	800a81c <TIM_Base_SetConfig+0x38>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4a30      	ldr	r2, [pc, #192]	; (800a8d0 <TIM_Base_SetConfig+0xec>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d003      	beq.n	800a81c <TIM_Base_SetConfig+0x38>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a2f      	ldr	r2, [pc, #188]	; (800a8d4 <TIM_Base_SetConfig+0xf0>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d108      	bne.n	800a82e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	4a25      	ldr	r2, [pc, #148]	; (800a8c8 <TIM_Base_SetConfig+0xe4>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d01b      	beq.n	800a86e <TIM_Base_SetConfig+0x8a>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a83c:	d017      	beq.n	800a86e <TIM_Base_SetConfig+0x8a>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4a22      	ldr	r2, [pc, #136]	; (800a8cc <TIM_Base_SetConfig+0xe8>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d013      	beq.n	800a86e <TIM_Base_SetConfig+0x8a>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4a21      	ldr	r2, [pc, #132]	; (800a8d0 <TIM_Base_SetConfig+0xec>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d00f      	beq.n	800a86e <TIM_Base_SetConfig+0x8a>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4a20      	ldr	r2, [pc, #128]	; (800a8d4 <TIM_Base_SetConfig+0xf0>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d00b      	beq.n	800a86e <TIM_Base_SetConfig+0x8a>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4a1f      	ldr	r2, [pc, #124]	; (800a8d8 <TIM_Base_SetConfig+0xf4>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d007      	beq.n	800a86e <TIM_Base_SetConfig+0x8a>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a1e      	ldr	r2, [pc, #120]	; (800a8dc <TIM_Base_SetConfig+0xf8>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d003      	beq.n	800a86e <TIM_Base_SetConfig+0x8a>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a1d      	ldr	r2, [pc, #116]	; (800a8e0 <TIM_Base_SetConfig+0xfc>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d108      	bne.n	800a880 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	4313      	orrs	r3, r2
 800a87e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	695b      	ldr	r3, [r3, #20]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	689a      	ldr	r2, [r3, #8]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a08      	ldr	r2, [pc, #32]	; (800a8c8 <TIM_Base_SetConfig+0xe4>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d103      	bne.n	800a8b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	691a      	ldr	r2, [r3, #16]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	615a      	str	r2, [r3, #20]
}
 800a8ba:	bf00      	nop
 800a8bc:	3714      	adds	r7, #20
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	40010000 	.word	0x40010000
 800a8cc:	40000400 	.word	0x40000400
 800a8d0:	40000800 	.word	0x40000800
 800a8d4:	40000c00 	.word	0x40000c00
 800a8d8:	40014000 	.word	0x40014000
 800a8dc:	40014400 	.word	0x40014400
 800a8e0:	40014800 	.word	0x40014800

0800a8e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	f023 0201 	bic.w	r2, r3, #1
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a1b      	ldr	r3, [r3, #32]
 800a8fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 0303 	bic.w	r3, r3, #3
 800a91a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	4313      	orrs	r3, r2
 800a924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	f023 0302 	bic.w	r3, r3, #2
 800a92c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	697a      	ldr	r2, [r7, #20]
 800a934:	4313      	orrs	r3, r2
 800a936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a1c      	ldr	r2, [pc, #112]	; (800a9ac <TIM_OC1_SetConfig+0xc8>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d10c      	bne.n	800a95a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	f023 0308 	bic.w	r3, r3, #8
 800a946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	697a      	ldr	r2, [r7, #20]
 800a94e:	4313      	orrs	r3, r2
 800a950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f023 0304 	bic.w	r3, r3, #4
 800a958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a13      	ldr	r2, [pc, #76]	; (800a9ac <TIM_OC1_SetConfig+0xc8>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d111      	bne.n	800a986 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	693a      	ldr	r2, [r7, #16]
 800a978:	4313      	orrs	r3, r2
 800a97a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	693a      	ldr	r2, [r7, #16]
 800a982:	4313      	orrs	r3, r2
 800a984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	693a      	ldr	r2, [r7, #16]
 800a98a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	685a      	ldr	r2, [r3, #4]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	697a      	ldr	r2, [r7, #20]
 800a99e:	621a      	str	r2, [r3, #32]
}
 800a9a0:	bf00      	nop
 800a9a2:	371c      	adds	r7, #28
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	40010000 	.word	0x40010000

0800a9b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a1b      	ldr	r3, [r3, #32]
 800a9be:	f023 0210 	bic.w	r2, r3, #16
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a1b      	ldr	r3, [r3, #32]
 800a9ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	699b      	ldr	r3, [r3, #24]
 800a9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	021b      	lsls	r3, r3, #8
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f023 0320 	bic.w	r3, r3, #32
 800a9fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	011b      	lsls	r3, r3, #4
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a1e      	ldr	r2, [pc, #120]	; (800aa84 <TIM_OC2_SetConfig+0xd4>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d10d      	bne.n	800aa2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	011b      	lsls	r3, r3, #4
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4a15      	ldr	r2, [pc, #84]	; (800aa84 <TIM_OC2_SetConfig+0xd4>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d113      	bne.n	800aa5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	695b      	ldr	r3, [r3, #20]
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	693a      	ldr	r2, [r7, #16]
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	699b      	ldr	r3, [r3, #24]
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	693a      	ldr	r2, [r7, #16]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	693a      	ldr	r2, [r7, #16]
 800aa60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	697a      	ldr	r2, [r7, #20]
 800aa74:	621a      	str	r2, [r3, #32]
}
 800aa76:	bf00      	nop
 800aa78:	371c      	adds	r7, #28
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	40010000 	.word	0x40010000

0800aa88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b087      	sub	sp, #28
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a1b      	ldr	r3, [r3, #32]
 800aa96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	69db      	ldr	r3, [r3, #28]
 800aaae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f023 0303 	bic.w	r3, r3, #3
 800aabe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	021b      	lsls	r3, r3, #8
 800aad8:	697a      	ldr	r2, [r7, #20]
 800aada:	4313      	orrs	r3, r2
 800aadc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4a1d      	ldr	r2, [pc, #116]	; (800ab58 <TIM_OC3_SetConfig+0xd0>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d10d      	bne.n	800ab02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aaec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	021b      	lsls	r3, r3, #8
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4a14      	ldr	r2, [pc, #80]	; (800ab58 <TIM_OC3_SetConfig+0xd0>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d113      	bne.n	800ab32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	695b      	ldr	r3, [r3, #20]
 800ab1e:	011b      	lsls	r3, r3, #4
 800ab20:	693a      	ldr	r2, [r7, #16]
 800ab22:	4313      	orrs	r3, r2
 800ab24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	699b      	ldr	r3, [r3, #24]
 800ab2a:	011b      	lsls	r3, r3, #4
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	693a      	ldr	r2, [r7, #16]
 800ab36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	685a      	ldr	r2, [r3, #4]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	697a      	ldr	r2, [r7, #20]
 800ab4a:	621a      	str	r2, [r3, #32]
}
 800ab4c:	bf00      	nop
 800ab4e:	371c      	adds	r7, #28
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	40010000 	.word	0x40010000

0800ab5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b087      	sub	sp, #28
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a1b      	ldr	r3, [r3, #32]
 800ab6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	69db      	ldr	r3, [r3, #28]
 800ab82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	021b      	lsls	r3, r3, #8
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	031b      	lsls	r3, r3, #12
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a10      	ldr	r2, [pc, #64]	; (800abf8 <TIM_OC4_SetConfig+0x9c>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d109      	bne.n	800abd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	695b      	ldr	r3, [r3, #20]
 800abc8:	019b      	lsls	r3, r3, #6
 800abca:	697a      	ldr	r2, [r7, #20]
 800abcc:	4313      	orrs	r3, r2
 800abce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	685a      	ldr	r2, [r3, #4]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	621a      	str	r2, [r3, #32]
}
 800abea:	bf00      	nop
 800abec:	371c      	adds	r7, #28
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	40010000 	.word	0x40010000

0800abfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6a1b      	ldr	r3, [r3, #32]
 800ac0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	f023 0201 	bic.w	r2, r3, #1
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	699b      	ldr	r3, [r3, #24]
 800ac1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	011b      	lsls	r3, r3, #4
 800ac2c:	693a      	ldr	r2, [r7, #16]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	f023 030a 	bic.w	r3, r3, #10
 800ac38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac3a:	697a      	ldr	r2, [r7, #20]
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	693a      	ldr	r2, [r7, #16]
 800ac46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	621a      	str	r2, [r3, #32]
}
 800ac4e:	bf00      	nop
 800ac50:	371c      	adds	r7, #28
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b087      	sub	sp, #28
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	60f8      	str	r0, [r7, #12]
 800ac62:	60b9      	str	r1, [r7, #8]
 800ac64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6a1b      	ldr	r3, [r3, #32]
 800ac6a:	f023 0210 	bic.w	r2, r3, #16
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	699b      	ldr	r3, [r3, #24]
 800ac76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6a1b      	ldr	r3, [r3, #32]
 800ac7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	031b      	lsls	r3, r3, #12
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	011b      	lsls	r3, r3, #4
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	693a      	ldr	r2, [r7, #16]
 800acac:	621a      	str	r2, [r3, #32]
}
 800acae:	bf00      	nop
 800acb0:	371c      	adds	r7, #28
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800acba:	b480      	push	{r7}
 800acbc:	b085      	sub	sp, #20
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acd2:	683a      	ldr	r2, [r7, #0]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	f043 0307 	orr.w	r3, r3, #7
 800acdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	609a      	str	r2, [r3, #8]
}
 800ace4:	bf00      	nop
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b087      	sub	sp, #28
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
 800acfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	021a      	lsls	r2, r3, #8
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	431a      	orrs	r2, r3
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	609a      	str	r2, [r3, #8]
}
 800ad24:	bf00      	nop
 800ad26:	371c      	adds	r7, #28
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b087      	sub	sp, #28
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	f003 031f 	and.w	r3, r3, #31
 800ad42:	2201      	movs	r2, #1
 800ad44:	fa02 f303 	lsl.w	r3, r2, r3
 800ad48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6a1a      	ldr	r2, [r3, #32]
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	43db      	mvns	r3, r3
 800ad52:	401a      	ands	r2, r3
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6a1a      	ldr	r2, [r3, #32]
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	f003 031f 	and.w	r3, r3, #31
 800ad62:	6879      	ldr	r1, [r7, #4]
 800ad64:	fa01 f303 	lsl.w	r3, r1, r3
 800ad68:	431a      	orrs	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	621a      	str	r2, [r3, #32]
}
 800ad6e:	bf00      	nop
 800ad70:	371c      	adds	r7, #28
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
	...

0800ad7c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4a1c      	ldr	r2, [pc, #112]	; (800adf8 <TIM_ResetCallback+0x7c>)
 800ad88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4a1b      	ldr	r2, [pc, #108]	; (800adfc <TIM_ResetCallback+0x80>)
 800ad90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a1a      	ldr	r2, [pc, #104]	; (800ae00 <TIM_ResetCallback+0x84>)
 800ad98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a19      	ldr	r2, [pc, #100]	; (800ae04 <TIM_ResetCallback+0x88>)
 800ada0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a18      	ldr	r2, [pc, #96]	; (800ae08 <TIM_ResetCallback+0x8c>)
 800ada8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a17      	ldr	r2, [pc, #92]	; (800ae0c <TIM_ResetCallback+0x90>)
 800adb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a16      	ldr	r2, [pc, #88]	; (800ae10 <TIM_ResetCallback+0x94>)
 800adb8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a15      	ldr	r2, [pc, #84]	; (800ae14 <TIM_ResetCallback+0x98>)
 800adc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a14      	ldr	r2, [pc, #80]	; (800ae18 <TIM_ResetCallback+0x9c>)
 800adc8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a13      	ldr	r2, [pc, #76]	; (800ae1c <TIM_ResetCallback+0xa0>)
 800add0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a12      	ldr	r2, [pc, #72]	; (800ae20 <TIM_ResetCallback+0xa4>)
 800add8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a11      	ldr	r2, [pc, #68]	; (800ae24 <TIM_ResetCallback+0xa8>)
 800ade0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a10      	ldr	r2, [pc, #64]	; (800ae28 <TIM_ResetCallback+0xac>)
 800ade8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800adec:	bf00      	nop
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	0800209d 	.word	0x0800209d
 800adfc:	0800a49b 	.word	0x0800a49b
 800ae00:	0800a513 	.word	0x0800a513
 800ae04:	0800a527 	.word	0x0800a527
 800ae08:	0800a4c3 	.word	0x0800a4c3
 800ae0c:	0800a4d7 	.word	0x0800a4d7
 800ae10:	0800a4af 	.word	0x0800a4af
 800ae14:	0800a4eb 	.word	0x0800a4eb
 800ae18:	0800a4ff 	.word	0x0800a4ff
 800ae1c:	0800a53b 	.word	0x0800a53b
 800ae20:	0800afad 	.word	0x0800afad
 800ae24:	0800afc1 	.word	0x0800afc1
 800ae28:	0800afd5 	.word	0x0800afd5

0800ae2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d101      	bne.n	800ae44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae40:	2302      	movs	r3, #2
 800ae42:	e050      	b.n	800aee6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2201      	movs	r2, #1
 800ae48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2202      	movs	r2, #2
 800ae50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68fa      	ldr	r2, [r7, #12]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a1c      	ldr	r2, [pc, #112]	; (800aef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d018      	beq.n	800aeba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae90:	d013      	beq.n	800aeba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a18      	ldr	r2, [pc, #96]	; (800aef8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d00e      	beq.n	800aeba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a16      	ldr	r2, [pc, #88]	; (800aefc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d009      	beq.n	800aeba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a15      	ldr	r2, [pc, #84]	; (800af00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d004      	beq.n	800aeba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a13      	ldr	r2, [pc, #76]	; (800af04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d10c      	bne.n	800aed4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	68ba      	ldr	r2, [r7, #8]
 800aed2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	40010000 	.word	0x40010000
 800aef8:	40000400 	.word	0x40000400
 800aefc:	40000800 	.word	0x40000800
 800af00:	40000c00 	.word	0x40000c00
 800af04:	40014000 	.word	0x40014000

0800af08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af12:	2300      	movs	r3, #0
 800af14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d101      	bne.n	800af24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af20:	2302      	movs	r3, #2
 800af22:	e03d      	b.n	800afa0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	4313      	orrs	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	4313      	orrs	r3, r2
 800af46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	4313      	orrs	r3, r2
 800af54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4313      	orrs	r3, r2
 800af62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	4313      	orrs	r3, r2
 800af70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	695b      	ldr	r3, [r3, #20]
 800af7c:	4313      	orrs	r3, r2
 800af7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	69db      	ldr	r3, [r3, #28]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3714      	adds	r7, #20
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afdc:	bf00      	nop
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d101      	bne.n	800affa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e04a      	b.n	800b090 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b00      	cmp	r3, #0
 800b004:	d111      	bne.n	800b02a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 fd2c 	bl	800ba6c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d102      	bne.n	800b022 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a1e      	ldr	r2, [pc, #120]	; (800b098 <HAL_UART_Init+0xb0>)
 800b020:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2224      	movs	r2, #36	; 0x24
 800b02e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	68da      	ldr	r2, [r3, #12]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b040:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 fff6 	bl	800c034 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	691a      	ldr	r2, [r3, #16]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b056:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	695a      	ldr	r2, [r3, #20]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b066:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68da      	ldr	r2, [r3, #12]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b076:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2220      	movs	r2, #32
 800b082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2220      	movs	r2, #32
 800b08a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3708      	adds	r7, #8
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	080049c1 	.word	0x080049c1

0800b09c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	607a      	str	r2, [r7, #4]
 800b0a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d107      	bne.n	800b0c4 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b8:	f043 0220 	orr.w	r2, r3, #32
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e08c      	b.n	800b1de <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d101      	bne.n	800b0d2 <HAL_UART_RegisterCallback+0x36>
 800b0ce:	2302      	movs	r3, #2
 800b0d0:	e085      	b.n	800b1de <HAL_UART_RegisterCallback+0x142>
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b20      	cmp	r3, #32
 800b0e4:	d151      	bne.n	800b18a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800b0e6:	7afb      	ldrb	r3, [r7, #11]
 800b0e8:	2b0c      	cmp	r3, #12
 800b0ea:	d845      	bhi.n	800b178 <HAL_UART_RegisterCallback+0xdc>
 800b0ec:	a201      	add	r2, pc, #4	; (adr r2, 800b0f4 <HAL_UART_RegisterCallback+0x58>)
 800b0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f2:	bf00      	nop
 800b0f4:	0800b129 	.word	0x0800b129
 800b0f8:	0800b131 	.word	0x0800b131
 800b0fc:	0800b139 	.word	0x0800b139
 800b100:	0800b141 	.word	0x0800b141
 800b104:	0800b149 	.word	0x0800b149
 800b108:	0800b151 	.word	0x0800b151
 800b10c:	0800b159 	.word	0x0800b159
 800b110:	0800b161 	.word	0x0800b161
 800b114:	0800b179 	.word	0x0800b179
 800b118:	0800b179 	.word	0x0800b179
 800b11c:	0800b179 	.word	0x0800b179
 800b120:	0800b169 	.word	0x0800b169
 800b124:	0800b171 	.word	0x0800b171
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800b12e:	e051      	b.n	800b1d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800b136:	e04d      	b.n	800b1d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800b13e:	e049      	b.n	800b1d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800b146:	e045      	b.n	800b1d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800b14e:	e041      	b.n	800b1d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800b156:	e03d      	b.n	800b1d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800b15e:	e039      	b.n	800b1d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800b166:	e035      	b.n	800b1d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b16e:	e031      	b.n	800b1d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b176:	e02d      	b.n	800b1d4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17c:	f043 0220 	orr.w	r2, r3, #32
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b184:	2301      	movs	r3, #1
 800b186:	75fb      	strb	r3, [r7, #23]
        break;
 800b188:	e024      	b.n	800b1d4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b190:	b2db      	uxtb	r3, r3
 800b192:	2b00      	cmp	r3, #0
 800b194:	d116      	bne.n	800b1c4 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800b196:	7afb      	ldrb	r3, [r7, #11]
 800b198:	2b0b      	cmp	r3, #11
 800b19a:	d002      	beq.n	800b1a2 <HAL_UART_RegisterCallback+0x106>
 800b19c:	2b0c      	cmp	r3, #12
 800b19e:	d004      	beq.n	800b1aa <HAL_UART_RegisterCallback+0x10e>
 800b1a0:	e007      	b.n	800b1b2 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b1a8:	e014      	b.n	800b1d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b1b0:	e010      	b.n	800b1d4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b6:	f043 0220 	orr.w	r2, r3, #32
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	75fb      	strb	r3, [r7, #23]
        break;
 800b1c2:	e007      	b.n	800b1d4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c8:	f043 0220 	orr.w	r2, r3, #32
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	371c      	adds	r7, #28
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop

0800b1ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b200:	b2db      	uxtb	r3, r3
 800b202:	2b20      	cmp	r3, #32
 800b204:	d11d      	bne.n	800b242 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <HAL_UART_Receive_IT+0x26>
 800b20c:	88fb      	ldrh	r3, [r7, #6]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	e016      	b.n	800b244 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d101      	bne.n	800b224 <HAL_UART_Receive_IT+0x38>
 800b220:	2302      	movs	r3, #2
 800b222:	e00f      	b.n	800b244 <HAL_UART_Receive_IT+0x58>
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b232:	88fb      	ldrh	r3, [r7, #6]
 800b234:	461a      	mov	r2, r3
 800b236:	68b9      	ldr	r1, [r7, #8]
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f000 fcf7 	bl	800bc2c <UART_Start_Receive_IT>
 800b23e:	4603      	mov	r3, r0
 800b240:	e000      	b.n	800b244 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b242:	2302      	movs	r3, #2
  }
}
 800b244:	4618      	mov	r0, r3
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b08c      	sub	sp, #48	; 0x30
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	4613      	mov	r3, r2
 800b258:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b260:	b2db      	uxtb	r3, r3
 800b262:	2b20      	cmp	r3, #32
 800b264:	d165      	bne.n	800b332 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <HAL_UART_Transmit_DMA+0x26>
 800b26c:	88fb      	ldrh	r3, [r7, #6]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	e05e      	b.n	800b334 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d101      	bne.n	800b284 <HAL_UART_Transmit_DMA+0x38>
 800b280:	2302      	movs	r3, #2
 800b282:	e057      	b.n	800b334 <HAL_UART_Transmit_DMA+0xe8>
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2201      	movs	r2, #1
 800b288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	88fa      	ldrh	r2, [r7, #6]
 800b296:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	88fa      	ldrh	r2, [r7, #6]
 800b29c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2221      	movs	r2, #33	; 0x21
 800b2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b0:	4a22      	ldr	r2, [pc, #136]	; (800b33c <HAL_UART_Transmit_DMA+0xf0>)
 800b2b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b8:	4a21      	ldr	r2, [pc, #132]	; (800b340 <HAL_UART_Transmit_DMA+0xf4>)
 800b2ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2c0:	4a20      	ldr	r2, [pc, #128]	; (800b344 <HAL_UART_Transmit_DMA+0xf8>)
 800b2c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b2cc:	f107 0308 	add.w	r3, r7, #8
 800b2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d8:	6819      	ldr	r1, [r3, #0]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3304      	adds	r3, #4
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	88fb      	ldrh	r3, [r7, #6]
 800b2e4:	f7fa fadc 	bl	80058a0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b2f0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	3314      	adds	r3, #20
 800b300:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	e853 3f00 	ldrex	r3, [r3]
 800b308:	617b      	str	r3, [r7, #20]
   return(result);
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b310:	62bb      	str	r3, [r7, #40]	; 0x28
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	3314      	adds	r3, #20
 800b318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b31a:	627a      	str	r2, [r7, #36]	; 0x24
 800b31c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31e:	6a39      	ldr	r1, [r7, #32]
 800b320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b322:	e841 2300 	strex	r3, r2, [r1]
 800b326:	61fb      	str	r3, [r7, #28]
   return(result);
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1e5      	bne.n	800b2fa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	e000      	b.n	800b334 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800b332:	2302      	movs	r3, #2
  }
}
 800b334:	4618      	mov	r0, r3
 800b336:	3730      	adds	r7, #48	; 0x30
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	0800badd 	.word	0x0800badd
 800b340:	0800bb79 	.word	0x0800bb79
 800b344:	0800bb97 	.word	0x0800bb97

0800b348 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b09a      	sub	sp, #104	; 0x68
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	330c      	adds	r3, #12
 800b356:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b35a:	e853 3f00 	ldrex	r3, [r3]
 800b35e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b362:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b366:	667b      	str	r3, [r7, #100]	; 0x64
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	330c      	adds	r3, #12
 800b36e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b370:	657a      	str	r2, [r7, #84]	; 0x54
 800b372:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b374:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b376:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b378:	e841 2300 	strex	r3, r2, [r1]
 800b37c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b37e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b380:	2b00      	cmp	r3, #0
 800b382:	d1e5      	bne.n	800b350 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3314      	adds	r3, #20
 800b38a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b38e:	e853 3f00 	ldrex	r3, [r3]
 800b392:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b396:	f023 0301 	bic.w	r3, r3, #1
 800b39a:	663b      	str	r3, [r7, #96]	; 0x60
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	3314      	adds	r3, #20
 800b3a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b3a4:	643a      	str	r2, [r7, #64]	; 0x40
 800b3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3ac:	e841 2300 	strex	r3, r2, [r1]
 800b3b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1e5      	bne.n	800b384 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d119      	bne.n	800b3f4 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	330c      	adds	r3, #12
 800b3c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	e853 3f00 	ldrex	r3, [r3]
 800b3ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	f023 0310 	bic.w	r3, r3, #16
 800b3d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	330c      	adds	r3, #12
 800b3de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b3e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3e8:	e841 2300 	strex	r3, r2, [r1]
 800b3ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d1e5      	bne.n	800b3c0 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3fe:	2b40      	cmp	r3, #64	; 0x40
 800b400:	d136      	bne.n	800b470 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3314      	adds	r3, #20
 800b408:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	e853 3f00 	ldrex	r3, [r3]
 800b410:	60bb      	str	r3, [r7, #8]
   return(result);
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b418:	65bb      	str	r3, [r7, #88]	; 0x58
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	3314      	adds	r3, #20
 800b420:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b422:	61ba      	str	r2, [r7, #24]
 800b424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b426:	6979      	ldr	r1, [r7, #20]
 800b428:	69ba      	ldr	r2, [r7, #24]
 800b42a:	e841 2300 	strex	r3, r2, [r1]
 800b42e:	613b      	str	r3, [r7, #16]
   return(result);
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d1e5      	bne.n	800b402 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d018      	beq.n	800b470 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b442:	2200      	movs	r2, #0
 800b444:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fa fa80 	bl	8005950 <HAL_DMA_Abort>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00c      	beq.n	800b470 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fa fca2 	bl	8005da4 <HAL_DMA_GetError>
 800b460:	4603      	mov	r3, r0
 800b462:	2b20      	cmp	r3, #32
 800b464:	d104      	bne.n	800b470 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2210      	movs	r2, #16
 800b46a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800b46c:	2303      	movs	r3, #3
 800b46e:	e00a      	b.n	800b486 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2220      	movs	r2, #32
 800b47a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3768      	adds	r7, #104	; 0x68
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
	...

0800b490 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b0ba      	sub	sp, #232	; 0xe8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b4c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4c6:	f003 030f 	and.w	r3, r3, #15
 800b4ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b4ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10f      	bne.n	800b4f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4da:	f003 0320 	and.w	r3, r3, #32
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d009      	beq.n	800b4f6 <HAL_UART_IRQHandler+0x66>
 800b4e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4e6:	f003 0320 	and.w	r3, r3, #32
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d003      	beq.n	800b4f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 fce3 	bl	800beba <UART_Receive_IT>
      return;
 800b4f4:	e25b      	b.n	800b9ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b4f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f000 80e1 	beq.w	800b6c2 <HAL_UART_IRQHandler+0x232>
 800b500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b504:	f003 0301 	and.w	r3, r3, #1
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d106      	bne.n	800b51a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b50c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b510:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b514:	2b00      	cmp	r3, #0
 800b516:	f000 80d4 	beq.w	800b6c2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b51a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b51e:	f003 0301 	and.w	r3, r3, #1
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00b      	beq.n	800b53e <HAL_UART_IRQHandler+0xae>
 800b526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b52a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d005      	beq.n	800b53e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b536:	f043 0201 	orr.w	r2, r3, #1
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b53e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b542:	f003 0304 	and.w	r3, r3, #4
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00b      	beq.n	800b562 <HAL_UART_IRQHandler+0xd2>
 800b54a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b54e:	f003 0301 	and.w	r3, r3, #1
 800b552:	2b00      	cmp	r3, #0
 800b554:	d005      	beq.n	800b562 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b55a:	f043 0202 	orr.w	r2, r3, #2
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b566:	f003 0302 	and.w	r3, r3, #2
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00b      	beq.n	800b586 <HAL_UART_IRQHandler+0xf6>
 800b56e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b572:	f003 0301 	and.w	r3, r3, #1
 800b576:	2b00      	cmp	r3, #0
 800b578:	d005      	beq.n	800b586 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57e:	f043 0204 	orr.w	r2, r3, #4
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b58a:	f003 0308 	and.w	r3, r3, #8
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d011      	beq.n	800b5b6 <HAL_UART_IRQHandler+0x126>
 800b592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b596:	f003 0320 	and.w	r3, r3, #32
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d105      	bne.n	800b5aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b59e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5a2:	f003 0301 	and.w	r3, r3, #1
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d005      	beq.n	800b5b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ae:	f043 0208 	orr.w	r2, r3, #8
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f000 81f2 	beq.w	800b9a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b5c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5c4:	f003 0320 	and.w	r3, r3, #32
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d008      	beq.n	800b5de <HAL_UART_IRQHandler+0x14e>
 800b5cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5d0:	f003 0320 	and.w	r3, r3, #32
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 fc6e 	bl	800beba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	695b      	ldr	r3, [r3, #20]
 800b5e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e8:	2b40      	cmp	r3, #64	; 0x40
 800b5ea:	bf0c      	ite	eq
 800b5ec:	2301      	moveq	r3, #1
 800b5ee:	2300      	movne	r3, #0
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fa:	f003 0308 	and.w	r3, r3, #8
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d103      	bne.n	800b60a <HAL_UART_IRQHandler+0x17a>
 800b602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b606:	2b00      	cmp	r3, #0
 800b608:	d051      	beq.n	800b6ae <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 fb74 	bl	800bcf8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	695b      	ldr	r3, [r3, #20]
 800b616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b61a:	2b40      	cmp	r3, #64	; 0x40
 800b61c:	d142      	bne.n	800b6a4 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3314      	adds	r3, #20
 800b624:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b628:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b62c:	e853 3f00 	ldrex	r3, [r3]
 800b630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b634:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b63c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	3314      	adds	r3, #20
 800b646:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b64a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b64e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b652:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b656:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b65a:	e841 2300 	strex	r3, r2, [r1]
 800b65e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1d9      	bne.n	800b61e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d013      	beq.n	800b69a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b676:	4a7f      	ldr	r2, [pc, #508]	; (800b874 <HAL_UART_IRQHandler+0x3e4>)
 800b678:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fa f9d6 	bl	8005a30 <HAL_DMA_Abort_IT>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d019      	beq.n	800b6be <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b694:	4610      	mov	r0, r2
 800b696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b698:	e011      	b.n	800b6be <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6a2:	e00c      	b.n	800b6be <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6ac:	e007      	b.n	800b6be <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b6bc:	e172      	b.n	800b9a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6be:	bf00      	nop
    return;
 800b6c0:	e170      	b.n	800b9a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	f040 814c 	bne.w	800b964 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b6cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6d0:	f003 0310 	and.w	r3, r3, #16
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f000 8145 	beq.w	800b964 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b6da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6de:	f003 0310 	and.w	r3, r3, #16
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f000 813e 	beq.w	800b964 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	60bb      	str	r3, [r7, #8]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	60bb      	str	r3, [r7, #8]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	60bb      	str	r3, [r7, #8]
 800b6fc:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	695b      	ldr	r3, [r3, #20]
 800b704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b708:	2b40      	cmp	r3, #64	; 0x40
 800b70a:	f040 80b5 	bne.w	800b878 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b71a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f000 8142 	beq.w	800b9a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b728:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b72c:	429a      	cmp	r2, r3
 800b72e:	f080 813b 	bcs.w	800b9a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b738:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b73e:	69db      	ldr	r3, [r3, #28]
 800b740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b744:	f000 8088 	beq.w	800b858 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	330c      	adds	r3, #12
 800b74e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b752:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b756:	e853 3f00 	ldrex	r3, [r3]
 800b75a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b75e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b766:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	330c      	adds	r3, #12
 800b770:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b774:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b778:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b780:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b784:	e841 2300 	strex	r3, r2, [r1]
 800b788:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b78c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1d9      	bne.n	800b748 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	3314      	adds	r3, #20
 800b79a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b79e:	e853 3f00 	ldrex	r3, [r3]
 800b7a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b7a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7a6:	f023 0301 	bic.w	r3, r3, #1
 800b7aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3314      	adds	r3, #20
 800b7b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b7b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b7bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b7c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b7c4:	e841 2300 	strex	r3, r2, [r1]
 800b7c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b7ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1e1      	bne.n	800b794 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	3314      	adds	r3, #20
 800b7d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7da:	e853 3f00 	ldrex	r3, [r3]
 800b7de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b7e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	3314      	adds	r3, #20
 800b7f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b7f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b7f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b7fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b7fc:	e841 2300 	strex	r3, r2, [r1]
 800b800:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1e3      	bne.n	800b7d0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2220      	movs	r2, #32
 800b80c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	330c      	adds	r3, #12
 800b81c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b81e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b820:	e853 3f00 	ldrex	r3, [r3]
 800b824:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b828:	f023 0310 	bic.w	r3, r3, #16
 800b82c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	330c      	adds	r3, #12
 800b836:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b83a:	65ba      	str	r2, [r7, #88]	; 0x58
 800b83c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b83e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b840:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b842:	e841 2300 	strex	r3, r2, [r1]
 800b846:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1e3      	bne.n	800b816 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b852:	4618      	mov	r0, r3
 800b854:	f7fa f87c 	bl	8005950 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b864:	b292      	uxth	r2, r2
 800b866:	1a8a      	subs	r2, r1, r2
 800b868:	b292      	uxth	r2, r2
 800b86a:	4611      	mov	r1, r2
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b870:	e09a      	b.n	800b9a8 <HAL_UART_IRQHandler+0x518>
 800b872:	bf00      	nop
 800b874:	0800bdbf 	.word	0x0800bdbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b880:	b29b      	uxth	r3, r3
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	2b00      	cmp	r3, #0
 800b890:	f000 808c 	beq.w	800b9ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b894:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f000 8087 	beq.w	800b9ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	330c      	adds	r3, #12
 800b8a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a8:	e853 3f00 	ldrex	r3, [r3]
 800b8ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b8b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	330c      	adds	r3, #12
 800b8be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b8c2:	647a      	str	r2, [r7, #68]	; 0x44
 800b8c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b8c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8ca:	e841 2300 	strex	r3, r2, [r1]
 800b8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b8d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1e3      	bne.n	800b89e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	3314      	adds	r3, #20
 800b8dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	e853 3f00 	ldrex	r3, [r3]
 800b8e4:	623b      	str	r3, [r7, #32]
   return(result);
 800b8e6:	6a3b      	ldr	r3, [r7, #32]
 800b8e8:	f023 0301 	bic.w	r3, r3, #1
 800b8ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	3314      	adds	r3, #20
 800b8f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b8fa:	633a      	str	r2, [r7, #48]	; 0x30
 800b8fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b902:	e841 2300 	strex	r3, r2, [r1]
 800b906:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d1e3      	bne.n	800b8d6 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2220      	movs	r2, #32
 800b912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	330c      	adds	r3, #12
 800b922:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	e853 3f00 	ldrex	r3, [r3]
 800b92a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f023 0310 	bic.w	r3, r3, #16
 800b932:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	330c      	adds	r3, #12
 800b93c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b940:	61fa      	str	r2, [r7, #28]
 800b942:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b944:	69b9      	ldr	r1, [r7, #24]
 800b946:	69fa      	ldr	r2, [r7, #28]
 800b948:	e841 2300 	strex	r3, r2, [r1]
 800b94c:	617b      	str	r3, [r7, #20]
   return(result);
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d1e3      	bne.n	800b91c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b958:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b95c:	4611      	mov	r1, r2
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b962:	e023      	b.n	800b9ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d009      	beq.n	800b984 <HAL_UART_IRQHandler+0x4f4>
 800b970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 fa33 	bl	800bde8 <UART_Transmit_IT>
    return;
 800b982:	e014      	b.n	800b9ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00e      	beq.n	800b9ae <HAL_UART_IRQHandler+0x51e>
 800b990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d008      	beq.n	800b9ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 fa73 	bl	800be88 <UART_EndTransmit_IT>
    return;
 800b9a2:	e004      	b.n	800b9ae <HAL_UART_IRQHandler+0x51e>
    return;
 800b9a4:	bf00      	nop
 800b9a6:	e002      	b.n	800b9ae <HAL_UART_IRQHandler+0x51e>
      return;
 800b9a8:	bf00      	nop
 800b9aa:	e000      	b.n	800b9ae <HAL_UART_IRQHandler+0x51e>
      return;
 800b9ac:	bf00      	nop
  }
}
 800b9ae:	37e8      	adds	r7, #232	; 0xe8
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ba0c:	bf00      	nop
 800ba0e:	370c      	adds	r7, #12
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ba20:	bf00      	nop
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ba34:	bf00      	nop
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ba48:	bf00      	nop
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba60:	bf00      	nop
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4a10      	ldr	r2, [pc, #64]	; (800bab8 <UART_InitCallbacksToDefault+0x4c>)
 800ba78:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4a0f      	ldr	r2, [pc, #60]	; (800babc <UART_InitCallbacksToDefault+0x50>)
 800ba7e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4a0f      	ldr	r2, [pc, #60]	; (800bac0 <UART_InitCallbacksToDefault+0x54>)
 800ba84:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	4a0e      	ldr	r2, [pc, #56]	; (800bac4 <UART_InitCallbacksToDefault+0x58>)
 800ba8a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4a0e      	ldr	r2, [pc, #56]	; (800bac8 <UART_InitCallbacksToDefault+0x5c>)
 800ba90:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4a0d      	ldr	r2, [pc, #52]	; (800bacc <UART_InitCallbacksToDefault+0x60>)
 800ba96:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a0d      	ldr	r2, [pc, #52]	; (800bad0 <UART_InitCallbacksToDefault+0x64>)
 800ba9c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4a0c      	ldr	r2, [pc, #48]	; (800bad4 <UART_InitCallbacksToDefault+0x68>)
 800baa2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a0c      	ldr	r2, [pc, #48]	; (800bad8 <UART_InitCallbacksToDefault+0x6c>)
 800baa8:	669a      	str	r2, [r3, #104]	; 0x68

}
 800baaa:	bf00      	nop
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
 800bab6:	bf00      	nop
 800bab8:	0800b9c9 	.word	0x0800b9c9
 800babc:	0800b9b5 	.word	0x0800b9b5
 800bac0:	0800b9f1 	.word	0x0800b9f1
 800bac4:	0800b9dd 	.word	0x0800b9dd
 800bac8:	0800ba05 	.word	0x0800ba05
 800bacc:	0800ba19 	.word	0x0800ba19
 800bad0:	0800ba2d 	.word	0x0800ba2d
 800bad4:	0800ba41 	.word	0x0800ba41
 800bad8:	0800ba55 	.word	0x0800ba55

0800badc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b090      	sub	sp, #64	; 0x40
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d137      	bne.n	800bb68 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800baf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bafa:	2200      	movs	r2, #0
 800bafc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	3314      	adds	r3, #20
 800bb04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb08:	e853 3f00 	ldrex	r3, [r3]
 800bb0c:	623b      	str	r3, [r7, #32]
   return(result);
 800bb0e:	6a3b      	ldr	r3, [r7, #32]
 800bb10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb14:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3314      	adds	r3, #20
 800bb1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb1e:	633a      	str	r2, [r7, #48]	; 0x30
 800bb20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb26:	e841 2300 	strex	r3, r2, [r1]
 800bb2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1e5      	bne.n	800bafe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	330c      	adds	r3, #12
 800bb38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	e853 3f00 	ldrex	r3, [r3]
 800bb40:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb48:	637b      	str	r3, [r7, #52]	; 0x34
 800bb4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	330c      	adds	r3, #12
 800bb50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb52:	61fa      	str	r2, [r7, #28]
 800bb54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb56:	69b9      	ldr	r1, [r7, #24]
 800bb58:	69fa      	ldr	r2, [r7, #28]
 800bb5a:	e841 2300 	strex	r3, r2, [r1]
 800bb5e:	617b      	str	r3, [r7, #20]
   return(result);
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1e5      	bne.n	800bb32 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb66:	e003      	b.n	800bb70 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800bb68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bb6e:	4798      	blx	r3
}
 800bb70:	bf00      	nop
 800bb72:	3740      	adds	r7, #64	; 0x40
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb8e:	bf00      	nop
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b084      	sub	sp, #16
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	695b      	ldr	r3, [r3, #20]
 800bbae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbb2:	2b80      	cmp	r3, #128	; 0x80
 800bbb4:	bf0c      	ite	eq
 800bbb6:	2301      	moveq	r3, #1
 800bbb8:	2300      	movne	r3, #0
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b21      	cmp	r3, #33	; 0x21
 800bbc8:	d108      	bne.n	800bbdc <UART_DMAError+0x46>
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d005      	beq.n	800bbdc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bbd6:	68b8      	ldr	r0, [r7, #8]
 800bbd8:	f000 f866 	bl	800bca8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	695b      	ldr	r3, [r3, #20]
 800bbe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe6:	2b40      	cmp	r3, #64	; 0x40
 800bbe8:	bf0c      	ite	eq
 800bbea:	2301      	moveq	r3, #1
 800bbec:	2300      	movne	r3, #0
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	2b22      	cmp	r3, #34	; 0x22
 800bbfc:	d108      	bne.n	800bc10 <UART_DMAError+0x7a>
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d005      	beq.n	800bc10 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	2200      	movs	r2, #0
 800bc08:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bc0a:	68b8      	ldr	r0, [r7, #8]
 800bc0c:	f000 f874 	bl	800bcf8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc14:	f043 0210 	orr.w	r2, r3, #16
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc20:	68b8      	ldr	r0, [r7, #8]
 800bc22:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc24:	bf00      	nop
 800bc26:	3710      	adds	r7, #16
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	4613      	mov	r3, r2
 800bc38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	88fa      	ldrh	r2, [r7, #6]
 800bc44:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	88fa      	ldrh	r2, [r7, #6]
 800bc4a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2222      	movs	r2, #34	; 0x22
 800bc56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d007      	beq.n	800bc7a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	68da      	ldr	r2, [r3, #12]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc78:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	695a      	ldr	r2, [r3, #20]
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f042 0201 	orr.w	r2, r2, #1
 800bc88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68da      	ldr	r2, [r3, #12]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f042 0220 	orr.w	r2, r2, #32
 800bc98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3714      	adds	r7, #20
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b089      	sub	sp, #36	; 0x24
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	330c      	adds	r3, #12
 800bcb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	e853 3f00 	ldrex	r3, [r3]
 800bcbe:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bcc6:	61fb      	str	r3, [r7, #28]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	330c      	adds	r3, #12
 800bcce:	69fa      	ldr	r2, [r7, #28]
 800bcd0:	61ba      	str	r2, [r7, #24]
 800bcd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd4:	6979      	ldr	r1, [r7, #20]
 800bcd6:	69ba      	ldr	r2, [r7, #24]
 800bcd8:	e841 2300 	strex	r3, r2, [r1]
 800bcdc:	613b      	str	r3, [r7, #16]
   return(result);
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1e5      	bne.n	800bcb0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2220      	movs	r2, #32
 800bce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800bcec:	bf00      	nop
 800bcee:	3724      	adds	r7, #36	; 0x24
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b095      	sub	sp, #84	; 0x54
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	330c      	adds	r3, #12
 800bd06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd0a:	e853 3f00 	ldrex	r3, [r3]
 800bd0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	330c      	adds	r3, #12
 800bd1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd20:	643a      	str	r2, [r7, #64]	; 0x40
 800bd22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd28:	e841 2300 	strex	r3, r2, [r1]
 800bd2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1e5      	bne.n	800bd00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	3314      	adds	r3, #20
 800bd3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd3c:	6a3b      	ldr	r3, [r7, #32]
 800bd3e:	e853 3f00 	ldrex	r3, [r3]
 800bd42:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	f023 0301 	bic.w	r3, r3, #1
 800bd4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	3314      	adds	r3, #20
 800bd52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd54:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd5c:	e841 2300 	strex	r3, r2, [r1]
 800bd60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1e5      	bne.n	800bd34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d119      	bne.n	800bda4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	330c      	adds	r3, #12
 800bd76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	e853 3f00 	ldrex	r3, [r3]
 800bd7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	f023 0310 	bic.w	r3, r3, #16
 800bd86:	647b      	str	r3, [r7, #68]	; 0x44
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	330c      	adds	r3, #12
 800bd8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd90:	61ba      	str	r2, [r7, #24]
 800bd92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd94:	6979      	ldr	r1, [r7, #20]
 800bd96:	69ba      	ldr	r2, [r7, #24]
 800bd98:	e841 2300 	strex	r3, r2, [r1]
 800bd9c:	613b      	str	r3, [r7, #16]
   return(result);
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1e5      	bne.n	800bd70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2220      	movs	r2, #32
 800bda8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bdb2:	bf00      	nop
 800bdb4:	3754      	adds	r7, #84	; 0x54
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr

0800bdbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bdbe:	b580      	push	{r7, lr}
 800bdc0:	b084      	sub	sp, #16
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bde0:	bf00      	nop
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	2b21      	cmp	r3, #33	; 0x21
 800bdfa:	d13e      	bne.n	800be7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be04:	d114      	bne.n	800be30 <UART_Transmit_IT+0x48>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d110      	bne.n	800be30 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6a1b      	ldr	r3, [r3, #32]
 800be12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	881b      	ldrh	r3, [r3, #0]
 800be18:	461a      	mov	r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a1b      	ldr	r3, [r3, #32]
 800be28:	1c9a      	adds	r2, r3, #2
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	621a      	str	r2, [r3, #32]
 800be2e:	e008      	b.n	800be42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a1b      	ldr	r3, [r3, #32]
 800be34:	1c59      	adds	r1, r3, #1
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	6211      	str	r1, [r2, #32]
 800be3a:	781a      	ldrb	r2, [r3, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be46:	b29b      	uxth	r3, r3
 800be48:	3b01      	subs	r3, #1
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	4619      	mov	r1, r3
 800be50:	84d1      	strh	r1, [r2, #38]	; 0x26
 800be52:	2b00      	cmp	r3, #0
 800be54:	d10f      	bne.n	800be76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68da      	ldr	r2, [r3, #12]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	68da      	ldr	r2, [r3, #12]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800be76:	2300      	movs	r3, #0
 800be78:	e000      	b.n	800be7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800be7a:	2302      	movs	r3, #2
  }
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3714      	adds	r7, #20
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	68da      	ldr	r2, [r3, #12]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2220      	movs	r2, #32
 800bea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800beba:	b580      	push	{r7, lr}
 800bebc:	b08c      	sub	sp, #48	; 0x30
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	2b22      	cmp	r3, #34	; 0x22
 800becc:	f040 80ad 	bne.w	800c02a <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bed8:	d117      	bne.n	800bf0a <UART_Receive_IT+0x50>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d113      	bne.n	800bf0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bee2:	2300      	movs	r3, #0
 800bee4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bef8:	b29a      	uxth	r2, r3
 800befa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf02:	1c9a      	adds	r2, r3, #2
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	629a      	str	r2, [r3, #40]	; 0x28
 800bf08:	e026      	b.n	800bf58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bf10:	2300      	movs	r3, #0
 800bf12:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf1c:	d007      	beq.n	800bf2e <UART_Receive_IT+0x74>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d10a      	bne.n	800bf3c <UART_Receive_IT+0x82>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d106      	bne.n	800bf3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	b2da      	uxtb	r2, r3
 800bf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf38:	701a      	strb	r2, [r3, #0]
 800bf3a:	e008      	b.n	800bf4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf48:	b2da      	uxtb	r2, r3
 800bf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf52:	1c5a      	adds	r2, r3, #1
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	4619      	mov	r1, r3
 800bf66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d15c      	bne.n	800c026 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68da      	ldr	r2, [r3, #12]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f022 0220 	bic.w	r2, r2, #32
 800bf7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	68da      	ldr	r2, [r3, #12]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bf8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	695a      	ldr	r2, [r3, #20]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f022 0201 	bic.w	r2, r2, #1
 800bf9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2220      	movs	r2, #32
 800bfa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d136      	bne.n	800c01a <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	330c      	adds	r3, #12
 800bfb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	e853 3f00 	ldrex	r3, [r3]
 800bfc0:	613b      	str	r3, [r7, #16]
   return(result);
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	f023 0310 	bic.w	r3, r3, #16
 800bfc8:	627b      	str	r3, [r7, #36]	; 0x24
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	330c      	adds	r3, #12
 800bfd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfd2:	623a      	str	r2, [r7, #32]
 800bfd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd6:	69f9      	ldr	r1, [r7, #28]
 800bfd8:	6a3a      	ldr	r2, [r7, #32]
 800bfda:	e841 2300 	strex	r3, r2, [r1]
 800bfde:	61bb      	str	r3, [r7, #24]
   return(result);
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d1e5      	bne.n	800bfb2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f003 0310 	and.w	r3, r3, #16
 800bff0:	2b10      	cmp	r3, #16
 800bff2:	d10a      	bne.n	800c00a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bff4:	2300      	movs	r3, #0
 800bff6:	60fb      	str	r3, [r7, #12]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	60fb      	str	r3, [r7, #12]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	60fb      	str	r3, [r7, #12]
 800c008:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c012:	4611      	mov	r1, r2
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	4798      	blx	r3
 800c018:	e003      	b.n	800c022 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c022:	2300      	movs	r3, #0
 800c024:	e002      	b.n	800c02c <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800c026:	2300      	movs	r3, #0
 800c028:	e000      	b.n	800c02c <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800c02a:	2302      	movs	r3, #2
  }
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3730      	adds	r7, #48	; 0x30
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c038:	b0c0      	sub	sp, #256	; 0x100
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	691b      	ldr	r3, [r3, #16]
 800c048:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c04c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c050:	68d9      	ldr	r1, [r3, #12]
 800c052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	ea40 0301 	orr.w	r3, r0, r1
 800c05c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c05e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c062:	689a      	ldr	r2, [r3, #8]
 800c064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	431a      	orrs	r2, r3
 800c06c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c070:	695b      	ldr	r3, [r3, #20]
 800c072:	431a      	orrs	r2, r3
 800c074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c078:	69db      	ldr	r3, [r3, #28]
 800c07a:	4313      	orrs	r3, r2
 800c07c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c08c:	f021 010c 	bic.w	r1, r1, #12
 800c090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c09a:	430b      	orrs	r3, r1
 800c09c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c09e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	695b      	ldr	r3, [r3, #20]
 800c0a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c0aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0ae:	6999      	ldr	r1, [r3, #24]
 800c0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	ea40 0301 	orr.w	r3, r0, r1
 800c0ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c0bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	4b8f      	ldr	r3, [pc, #572]	; (800c300 <UART_SetConfig+0x2cc>)
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d005      	beq.n	800c0d4 <UART_SetConfig+0xa0>
 800c0c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	4b8d      	ldr	r3, [pc, #564]	; (800c304 <UART_SetConfig+0x2d0>)
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d104      	bne.n	800c0de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c0d4:	f7fd fa26 	bl	8009524 <HAL_RCC_GetPCLK2Freq>
 800c0d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c0dc:	e003      	b.n	800c0e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c0de:	f7fd fa0d 	bl	80094fc <HAL_RCC_GetPCLK1Freq>
 800c0e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0ea:	69db      	ldr	r3, [r3, #28]
 800c0ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0f0:	f040 810c 	bne.w	800c30c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c0f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c0fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c102:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c106:	4622      	mov	r2, r4
 800c108:	462b      	mov	r3, r5
 800c10a:	1891      	adds	r1, r2, r2
 800c10c:	65b9      	str	r1, [r7, #88]	; 0x58
 800c10e:	415b      	adcs	r3, r3
 800c110:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c112:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c116:	4621      	mov	r1, r4
 800c118:	eb12 0801 	adds.w	r8, r2, r1
 800c11c:	4629      	mov	r1, r5
 800c11e:	eb43 0901 	adc.w	r9, r3, r1
 800c122:	f04f 0200 	mov.w	r2, #0
 800c126:	f04f 0300 	mov.w	r3, #0
 800c12a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c12e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c136:	4690      	mov	r8, r2
 800c138:	4699      	mov	r9, r3
 800c13a:	4623      	mov	r3, r4
 800c13c:	eb18 0303 	adds.w	r3, r8, r3
 800c140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c144:	462b      	mov	r3, r5
 800c146:	eb49 0303 	adc.w	r3, r9, r3
 800c14a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c14e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c15a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c15e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c162:	460b      	mov	r3, r1
 800c164:	18db      	adds	r3, r3, r3
 800c166:	653b      	str	r3, [r7, #80]	; 0x50
 800c168:	4613      	mov	r3, r2
 800c16a:	eb42 0303 	adc.w	r3, r2, r3
 800c16e:	657b      	str	r3, [r7, #84]	; 0x54
 800c170:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c174:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c178:	f7f4 fd12 	bl	8000ba0 <__aeabi_uldivmod>
 800c17c:	4602      	mov	r2, r0
 800c17e:	460b      	mov	r3, r1
 800c180:	4b61      	ldr	r3, [pc, #388]	; (800c308 <UART_SetConfig+0x2d4>)
 800c182:	fba3 2302 	umull	r2, r3, r3, r2
 800c186:	095b      	lsrs	r3, r3, #5
 800c188:	011c      	lsls	r4, r3, #4
 800c18a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c18e:	2200      	movs	r2, #0
 800c190:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c194:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c198:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c19c:	4642      	mov	r2, r8
 800c19e:	464b      	mov	r3, r9
 800c1a0:	1891      	adds	r1, r2, r2
 800c1a2:	64b9      	str	r1, [r7, #72]	; 0x48
 800c1a4:	415b      	adcs	r3, r3
 800c1a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c1ac:	4641      	mov	r1, r8
 800c1ae:	eb12 0a01 	adds.w	sl, r2, r1
 800c1b2:	4649      	mov	r1, r9
 800c1b4:	eb43 0b01 	adc.w	fp, r3, r1
 800c1b8:	f04f 0200 	mov.w	r2, #0
 800c1bc:	f04f 0300 	mov.w	r3, #0
 800c1c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c1c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c1c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c1cc:	4692      	mov	sl, r2
 800c1ce:	469b      	mov	fp, r3
 800c1d0:	4643      	mov	r3, r8
 800c1d2:	eb1a 0303 	adds.w	r3, sl, r3
 800c1d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c1da:	464b      	mov	r3, r9
 800c1dc:	eb4b 0303 	adc.w	r3, fp, r3
 800c1e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c1e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c1f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c1f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	18db      	adds	r3, r3, r3
 800c1fc:	643b      	str	r3, [r7, #64]	; 0x40
 800c1fe:	4613      	mov	r3, r2
 800c200:	eb42 0303 	adc.w	r3, r2, r3
 800c204:	647b      	str	r3, [r7, #68]	; 0x44
 800c206:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c20a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c20e:	f7f4 fcc7 	bl	8000ba0 <__aeabi_uldivmod>
 800c212:	4602      	mov	r2, r0
 800c214:	460b      	mov	r3, r1
 800c216:	4611      	mov	r1, r2
 800c218:	4b3b      	ldr	r3, [pc, #236]	; (800c308 <UART_SetConfig+0x2d4>)
 800c21a:	fba3 2301 	umull	r2, r3, r3, r1
 800c21e:	095b      	lsrs	r3, r3, #5
 800c220:	2264      	movs	r2, #100	; 0x64
 800c222:	fb02 f303 	mul.w	r3, r2, r3
 800c226:	1acb      	subs	r3, r1, r3
 800c228:	00db      	lsls	r3, r3, #3
 800c22a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c22e:	4b36      	ldr	r3, [pc, #216]	; (800c308 <UART_SetConfig+0x2d4>)
 800c230:	fba3 2302 	umull	r2, r3, r3, r2
 800c234:	095b      	lsrs	r3, r3, #5
 800c236:	005b      	lsls	r3, r3, #1
 800c238:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c23c:	441c      	add	r4, r3
 800c23e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c242:	2200      	movs	r2, #0
 800c244:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c248:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c24c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c250:	4642      	mov	r2, r8
 800c252:	464b      	mov	r3, r9
 800c254:	1891      	adds	r1, r2, r2
 800c256:	63b9      	str	r1, [r7, #56]	; 0x38
 800c258:	415b      	adcs	r3, r3
 800c25a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c25c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c260:	4641      	mov	r1, r8
 800c262:	1851      	adds	r1, r2, r1
 800c264:	6339      	str	r1, [r7, #48]	; 0x30
 800c266:	4649      	mov	r1, r9
 800c268:	414b      	adcs	r3, r1
 800c26a:	637b      	str	r3, [r7, #52]	; 0x34
 800c26c:	f04f 0200 	mov.w	r2, #0
 800c270:	f04f 0300 	mov.w	r3, #0
 800c274:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c278:	4659      	mov	r1, fp
 800c27a:	00cb      	lsls	r3, r1, #3
 800c27c:	4651      	mov	r1, sl
 800c27e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c282:	4651      	mov	r1, sl
 800c284:	00ca      	lsls	r2, r1, #3
 800c286:	4610      	mov	r0, r2
 800c288:	4619      	mov	r1, r3
 800c28a:	4603      	mov	r3, r0
 800c28c:	4642      	mov	r2, r8
 800c28e:	189b      	adds	r3, r3, r2
 800c290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c294:	464b      	mov	r3, r9
 800c296:	460a      	mov	r2, r1
 800c298:	eb42 0303 	adc.w	r3, r2, r3
 800c29c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c2ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c2b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	18db      	adds	r3, r3, r3
 800c2b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	eb42 0303 	adc.w	r3, r2, r3
 800c2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c2c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c2ca:	f7f4 fc69 	bl	8000ba0 <__aeabi_uldivmod>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	4b0d      	ldr	r3, [pc, #52]	; (800c308 <UART_SetConfig+0x2d4>)
 800c2d4:	fba3 1302 	umull	r1, r3, r3, r2
 800c2d8:	095b      	lsrs	r3, r3, #5
 800c2da:	2164      	movs	r1, #100	; 0x64
 800c2dc:	fb01 f303 	mul.w	r3, r1, r3
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	00db      	lsls	r3, r3, #3
 800c2e4:	3332      	adds	r3, #50	; 0x32
 800c2e6:	4a08      	ldr	r2, [pc, #32]	; (800c308 <UART_SetConfig+0x2d4>)
 800c2e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c2ec:	095b      	lsrs	r3, r3, #5
 800c2ee:	f003 0207 	and.w	r2, r3, #7
 800c2f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4422      	add	r2, r4
 800c2fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c2fc:	e105      	b.n	800c50a <UART_SetConfig+0x4d6>
 800c2fe:	bf00      	nop
 800c300:	40011000 	.word	0x40011000
 800c304:	40011400 	.word	0x40011400
 800c308:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c30c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c310:	2200      	movs	r2, #0
 800c312:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c316:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c31a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c31e:	4642      	mov	r2, r8
 800c320:	464b      	mov	r3, r9
 800c322:	1891      	adds	r1, r2, r2
 800c324:	6239      	str	r1, [r7, #32]
 800c326:	415b      	adcs	r3, r3
 800c328:	627b      	str	r3, [r7, #36]	; 0x24
 800c32a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c32e:	4641      	mov	r1, r8
 800c330:	1854      	adds	r4, r2, r1
 800c332:	4649      	mov	r1, r9
 800c334:	eb43 0501 	adc.w	r5, r3, r1
 800c338:	f04f 0200 	mov.w	r2, #0
 800c33c:	f04f 0300 	mov.w	r3, #0
 800c340:	00eb      	lsls	r3, r5, #3
 800c342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c346:	00e2      	lsls	r2, r4, #3
 800c348:	4614      	mov	r4, r2
 800c34a:	461d      	mov	r5, r3
 800c34c:	4643      	mov	r3, r8
 800c34e:	18e3      	adds	r3, r4, r3
 800c350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c354:	464b      	mov	r3, r9
 800c356:	eb45 0303 	adc.w	r3, r5, r3
 800c35a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c35e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c36a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c36e:	f04f 0200 	mov.w	r2, #0
 800c372:	f04f 0300 	mov.w	r3, #0
 800c376:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c37a:	4629      	mov	r1, r5
 800c37c:	008b      	lsls	r3, r1, #2
 800c37e:	4621      	mov	r1, r4
 800c380:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c384:	4621      	mov	r1, r4
 800c386:	008a      	lsls	r2, r1, #2
 800c388:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c38c:	f7f4 fc08 	bl	8000ba0 <__aeabi_uldivmod>
 800c390:	4602      	mov	r2, r0
 800c392:	460b      	mov	r3, r1
 800c394:	4b60      	ldr	r3, [pc, #384]	; (800c518 <UART_SetConfig+0x4e4>)
 800c396:	fba3 2302 	umull	r2, r3, r3, r2
 800c39a:	095b      	lsrs	r3, r3, #5
 800c39c:	011c      	lsls	r4, r3, #4
 800c39e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c3a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c3ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c3b0:	4642      	mov	r2, r8
 800c3b2:	464b      	mov	r3, r9
 800c3b4:	1891      	adds	r1, r2, r2
 800c3b6:	61b9      	str	r1, [r7, #24]
 800c3b8:	415b      	adcs	r3, r3
 800c3ba:	61fb      	str	r3, [r7, #28]
 800c3bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c3c0:	4641      	mov	r1, r8
 800c3c2:	1851      	adds	r1, r2, r1
 800c3c4:	6139      	str	r1, [r7, #16]
 800c3c6:	4649      	mov	r1, r9
 800c3c8:	414b      	adcs	r3, r1
 800c3ca:	617b      	str	r3, [r7, #20]
 800c3cc:	f04f 0200 	mov.w	r2, #0
 800c3d0:	f04f 0300 	mov.w	r3, #0
 800c3d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c3d8:	4659      	mov	r1, fp
 800c3da:	00cb      	lsls	r3, r1, #3
 800c3dc:	4651      	mov	r1, sl
 800c3de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c3e2:	4651      	mov	r1, sl
 800c3e4:	00ca      	lsls	r2, r1, #3
 800c3e6:	4610      	mov	r0, r2
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	4642      	mov	r2, r8
 800c3ee:	189b      	adds	r3, r3, r2
 800c3f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c3f4:	464b      	mov	r3, r9
 800c3f6:	460a      	mov	r2, r1
 800c3f8:	eb42 0303 	adc.w	r3, r2, r3
 800c3fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	67bb      	str	r3, [r7, #120]	; 0x78
 800c40a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c40c:	f04f 0200 	mov.w	r2, #0
 800c410:	f04f 0300 	mov.w	r3, #0
 800c414:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c418:	4649      	mov	r1, r9
 800c41a:	008b      	lsls	r3, r1, #2
 800c41c:	4641      	mov	r1, r8
 800c41e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c422:	4641      	mov	r1, r8
 800c424:	008a      	lsls	r2, r1, #2
 800c426:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c42a:	f7f4 fbb9 	bl	8000ba0 <__aeabi_uldivmod>
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	4b39      	ldr	r3, [pc, #228]	; (800c518 <UART_SetConfig+0x4e4>)
 800c434:	fba3 1302 	umull	r1, r3, r3, r2
 800c438:	095b      	lsrs	r3, r3, #5
 800c43a:	2164      	movs	r1, #100	; 0x64
 800c43c:	fb01 f303 	mul.w	r3, r1, r3
 800c440:	1ad3      	subs	r3, r2, r3
 800c442:	011b      	lsls	r3, r3, #4
 800c444:	3332      	adds	r3, #50	; 0x32
 800c446:	4a34      	ldr	r2, [pc, #208]	; (800c518 <UART_SetConfig+0x4e4>)
 800c448:	fba2 2303 	umull	r2, r3, r2, r3
 800c44c:	095b      	lsrs	r3, r3, #5
 800c44e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c452:	441c      	add	r4, r3
 800c454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c458:	2200      	movs	r2, #0
 800c45a:	673b      	str	r3, [r7, #112]	; 0x70
 800c45c:	677a      	str	r2, [r7, #116]	; 0x74
 800c45e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c462:	4642      	mov	r2, r8
 800c464:	464b      	mov	r3, r9
 800c466:	1891      	adds	r1, r2, r2
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	415b      	adcs	r3, r3
 800c46c:	60fb      	str	r3, [r7, #12]
 800c46e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c472:	4641      	mov	r1, r8
 800c474:	1851      	adds	r1, r2, r1
 800c476:	6039      	str	r1, [r7, #0]
 800c478:	4649      	mov	r1, r9
 800c47a:	414b      	adcs	r3, r1
 800c47c:	607b      	str	r3, [r7, #4]
 800c47e:	f04f 0200 	mov.w	r2, #0
 800c482:	f04f 0300 	mov.w	r3, #0
 800c486:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c48a:	4659      	mov	r1, fp
 800c48c:	00cb      	lsls	r3, r1, #3
 800c48e:	4651      	mov	r1, sl
 800c490:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c494:	4651      	mov	r1, sl
 800c496:	00ca      	lsls	r2, r1, #3
 800c498:	4610      	mov	r0, r2
 800c49a:	4619      	mov	r1, r3
 800c49c:	4603      	mov	r3, r0
 800c49e:	4642      	mov	r2, r8
 800c4a0:	189b      	adds	r3, r3, r2
 800c4a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4a4:	464b      	mov	r3, r9
 800c4a6:	460a      	mov	r2, r1
 800c4a8:	eb42 0303 	adc.w	r3, r2, r3
 800c4ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c4ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	663b      	str	r3, [r7, #96]	; 0x60
 800c4b8:	667a      	str	r2, [r7, #100]	; 0x64
 800c4ba:	f04f 0200 	mov.w	r2, #0
 800c4be:	f04f 0300 	mov.w	r3, #0
 800c4c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c4c6:	4649      	mov	r1, r9
 800c4c8:	008b      	lsls	r3, r1, #2
 800c4ca:	4641      	mov	r1, r8
 800c4cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c4d0:	4641      	mov	r1, r8
 800c4d2:	008a      	lsls	r2, r1, #2
 800c4d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c4d8:	f7f4 fb62 	bl	8000ba0 <__aeabi_uldivmod>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	460b      	mov	r3, r1
 800c4e0:	4b0d      	ldr	r3, [pc, #52]	; (800c518 <UART_SetConfig+0x4e4>)
 800c4e2:	fba3 1302 	umull	r1, r3, r3, r2
 800c4e6:	095b      	lsrs	r3, r3, #5
 800c4e8:	2164      	movs	r1, #100	; 0x64
 800c4ea:	fb01 f303 	mul.w	r3, r1, r3
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	011b      	lsls	r3, r3, #4
 800c4f2:	3332      	adds	r3, #50	; 0x32
 800c4f4:	4a08      	ldr	r2, [pc, #32]	; (800c518 <UART_SetConfig+0x4e4>)
 800c4f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c4fa:	095b      	lsrs	r3, r3, #5
 800c4fc:	f003 020f 	and.w	r2, r3, #15
 800c500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4422      	add	r2, r4
 800c508:	609a      	str	r2, [r3, #8]
}
 800c50a:	bf00      	nop
 800c50c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c510:	46bd      	mov	sp, r7
 800c512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c516:	bf00      	nop
 800c518:	51eb851f 	.word	0x51eb851f

0800c51c <__errno>:
 800c51c:	4b01      	ldr	r3, [pc, #4]	; (800c524 <__errno+0x8>)
 800c51e:	6818      	ldr	r0, [r3, #0]
 800c520:	4770      	bx	lr
 800c522:	bf00      	nop
 800c524:	20000298 	.word	0x20000298

0800c528 <__libc_init_array>:
 800c528:	b570      	push	{r4, r5, r6, lr}
 800c52a:	4d0d      	ldr	r5, [pc, #52]	; (800c560 <__libc_init_array+0x38>)
 800c52c:	4c0d      	ldr	r4, [pc, #52]	; (800c564 <__libc_init_array+0x3c>)
 800c52e:	1b64      	subs	r4, r4, r5
 800c530:	10a4      	asrs	r4, r4, #2
 800c532:	2600      	movs	r6, #0
 800c534:	42a6      	cmp	r6, r4
 800c536:	d109      	bne.n	800c54c <__libc_init_array+0x24>
 800c538:	4d0b      	ldr	r5, [pc, #44]	; (800c568 <__libc_init_array+0x40>)
 800c53a:	4c0c      	ldr	r4, [pc, #48]	; (800c56c <__libc_init_array+0x44>)
 800c53c:	f001 ff86 	bl	800e44c <_init>
 800c540:	1b64      	subs	r4, r4, r5
 800c542:	10a4      	asrs	r4, r4, #2
 800c544:	2600      	movs	r6, #0
 800c546:	42a6      	cmp	r6, r4
 800c548:	d105      	bne.n	800c556 <__libc_init_array+0x2e>
 800c54a:	bd70      	pop	{r4, r5, r6, pc}
 800c54c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c550:	4798      	blx	r3
 800c552:	3601      	adds	r6, #1
 800c554:	e7ee      	b.n	800c534 <__libc_init_array+0xc>
 800c556:	f855 3b04 	ldr.w	r3, [r5], #4
 800c55a:	4798      	blx	r3
 800c55c:	3601      	adds	r6, #1
 800c55e:	e7f2      	b.n	800c546 <__libc_init_array+0x1e>
 800c560:	0800e8b0 	.word	0x0800e8b0
 800c564:	0800e8b0 	.word	0x0800e8b0
 800c568:	0800e8b0 	.word	0x0800e8b0
 800c56c:	0800e8b4 	.word	0x0800e8b4

0800c570 <memcpy>:
 800c570:	440a      	add	r2, r1
 800c572:	4291      	cmp	r1, r2
 800c574:	f100 33ff 	add.w	r3, r0, #4294967295
 800c578:	d100      	bne.n	800c57c <memcpy+0xc>
 800c57a:	4770      	bx	lr
 800c57c:	b510      	push	{r4, lr}
 800c57e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c582:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c586:	4291      	cmp	r1, r2
 800c588:	d1f9      	bne.n	800c57e <memcpy+0xe>
 800c58a:	bd10      	pop	{r4, pc}

0800c58c <memset>:
 800c58c:	4402      	add	r2, r0
 800c58e:	4603      	mov	r3, r0
 800c590:	4293      	cmp	r3, r2
 800c592:	d100      	bne.n	800c596 <memset+0xa>
 800c594:	4770      	bx	lr
 800c596:	f803 1b01 	strb.w	r1, [r3], #1
 800c59a:	e7f9      	b.n	800c590 <memset+0x4>

0800c59c <cosf>:
 800c59c:	ee10 3a10 	vmov	r3, s0
 800c5a0:	b507      	push	{r0, r1, r2, lr}
 800c5a2:	4a1e      	ldr	r2, [pc, #120]	; (800c61c <cosf+0x80>)
 800c5a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	dc06      	bgt.n	800c5ba <cosf+0x1e>
 800c5ac:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800c620 <cosf+0x84>
 800c5b0:	b003      	add	sp, #12
 800c5b2:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5b6:	f001 ba9b 	b.w	800daf0 <__kernel_cosf>
 800c5ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c5be:	db04      	blt.n	800c5ca <cosf+0x2e>
 800c5c0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c5c4:	b003      	add	sp, #12
 800c5c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800c5ca:	4668      	mov	r0, sp
 800c5cc:	f001 f954 	bl	800d878 <__ieee754_rem_pio2f>
 800c5d0:	f000 0003 	and.w	r0, r0, #3
 800c5d4:	2801      	cmp	r0, #1
 800c5d6:	d009      	beq.n	800c5ec <cosf+0x50>
 800c5d8:	2802      	cmp	r0, #2
 800c5da:	d010      	beq.n	800c5fe <cosf+0x62>
 800c5dc:	b9b0      	cbnz	r0, 800c60c <cosf+0x70>
 800c5de:	eddd 0a01 	vldr	s1, [sp, #4]
 800c5e2:	ed9d 0a00 	vldr	s0, [sp]
 800c5e6:	f001 fa83 	bl	800daf0 <__kernel_cosf>
 800c5ea:	e7eb      	b.n	800c5c4 <cosf+0x28>
 800c5ec:	eddd 0a01 	vldr	s1, [sp, #4]
 800c5f0:	ed9d 0a00 	vldr	s0, [sp]
 800c5f4:	f001 fd52 	bl	800e09c <__kernel_sinf>
 800c5f8:	eeb1 0a40 	vneg.f32	s0, s0
 800c5fc:	e7e2      	b.n	800c5c4 <cosf+0x28>
 800c5fe:	eddd 0a01 	vldr	s1, [sp, #4]
 800c602:	ed9d 0a00 	vldr	s0, [sp]
 800c606:	f001 fa73 	bl	800daf0 <__kernel_cosf>
 800c60a:	e7f5      	b.n	800c5f8 <cosf+0x5c>
 800c60c:	eddd 0a01 	vldr	s1, [sp, #4]
 800c610:	ed9d 0a00 	vldr	s0, [sp]
 800c614:	2001      	movs	r0, #1
 800c616:	f001 fd41 	bl	800e09c <__kernel_sinf>
 800c61a:	e7d3      	b.n	800c5c4 <cosf+0x28>
 800c61c:	3f490fd8 	.word	0x3f490fd8
 800c620:	00000000 	.word	0x00000000

0800c624 <sinf>:
 800c624:	ee10 3a10 	vmov	r3, s0
 800c628:	b507      	push	{r0, r1, r2, lr}
 800c62a:	4a1f      	ldr	r2, [pc, #124]	; (800c6a8 <sinf+0x84>)
 800c62c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c630:	4293      	cmp	r3, r2
 800c632:	dc07      	bgt.n	800c644 <sinf+0x20>
 800c634:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800c6ac <sinf+0x88>
 800c638:	2000      	movs	r0, #0
 800c63a:	b003      	add	sp, #12
 800c63c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c640:	f001 bd2c 	b.w	800e09c <__kernel_sinf>
 800c644:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c648:	db04      	blt.n	800c654 <sinf+0x30>
 800c64a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c64e:	b003      	add	sp, #12
 800c650:	f85d fb04 	ldr.w	pc, [sp], #4
 800c654:	4668      	mov	r0, sp
 800c656:	f001 f90f 	bl	800d878 <__ieee754_rem_pio2f>
 800c65a:	f000 0003 	and.w	r0, r0, #3
 800c65e:	2801      	cmp	r0, #1
 800c660:	d00a      	beq.n	800c678 <sinf+0x54>
 800c662:	2802      	cmp	r0, #2
 800c664:	d00f      	beq.n	800c686 <sinf+0x62>
 800c666:	b9c0      	cbnz	r0, 800c69a <sinf+0x76>
 800c668:	eddd 0a01 	vldr	s1, [sp, #4]
 800c66c:	ed9d 0a00 	vldr	s0, [sp]
 800c670:	2001      	movs	r0, #1
 800c672:	f001 fd13 	bl	800e09c <__kernel_sinf>
 800c676:	e7ea      	b.n	800c64e <sinf+0x2a>
 800c678:	eddd 0a01 	vldr	s1, [sp, #4]
 800c67c:	ed9d 0a00 	vldr	s0, [sp]
 800c680:	f001 fa36 	bl	800daf0 <__kernel_cosf>
 800c684:	e7e3      	b.n	800c64e <sinf+0x2a>
 800c686:	eddd 0a01 	vldr	s1, [sp, #4]
 800c68a:	ed9d 0a00 	vldr	s0, [sp]
 800c68e:	2001      	movs	r0, #1
 800c690:	f001 fd04 	bl	800e09c <__kernel_sinf>
 800c694:	eeb1 0a40 	vneg.f32	s0, s0
 800c698:	e7d9      	b.n	800c64e <sinf+0x2a>
 800c69a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c69e:	ed9d 0a00 	vldr	s0, [sp]
 800c6a2:	f001 fa25 	bl	800daf0 <__kernel_cosf>
 800c6a6:	e7f5      	b.n	800c694 <sinf+0x70>
 800c6a8:	3f490fd8 	.word	0x3f490fd8
 800c6ac:	00000000 	.word	0x00000000

0800c6b0 <acos>:
 800c6b0:	b538      	push	{r3, r4, r5, lr}
 800c6b2:	ed2d 8b02 	vpush	{d8}
 800c6b6:	ec55 4b10 	vmov	r4, r5, d0
 800c6ba:	f000 f89d 	bl	800c7f8 <__ieee754_acos>
 800c6be:	4622      	mov	r2, r4
 800c6c0:	462b      	mov	r3, r5
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	4629      	mov	r1, r5
 800c6c6:	eeb0 8a40 	vmov.f32	s16, s0
 800c6ca:	eef0 8a60 	vmov.f32	s17, s1
 800c6ce:	f7f4 f9d9 	bl	8000a84 <__aeabi_dcmpun>
 800c6d2:	b9a8      	cbnz	r0, 800c700 <acos+0x50>
 800c6d4:	ec45 4b10 	vmov	d0, r4, r5
 800c6d8:	f001 fd58 	bl	800e18c <fabs>
 800c6dc:	4b0c      	ldr	r3, [pc, #48]	; (800c710 <acos+0x60>)
 800c6de:	ec51 0b10 	vmov	r0, r1, d0
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f7f4 f9c4 	bl	8000a70 <__aeabi_dcmpgt>
 800c6e8:	b150      	cbz	r0, 800c700 <acos+0x50>
 800c6ea:	f7ff ff17 	bl	800c51c <__errno>
 800c6ee:	ecbd 8b02 	vpop	{d8}
 800c6f2:	2321      	movs	r3, #33	; 0x21
 800c6f4:	6003      	str	r3, [r0, #0]
 800c6f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6fa:	4806      	ldr	r0, [pc, #24]	; (800c714 <acos+0x64>)
 800c6fc:	f001 bd5c 	b.w	800e1b8 <nan>
 800c700:	eeb0 0a48 	vmov.f32	s0, s16
 800c704:	eef0 0a68 	vmov.f32	s1, s17
 800c708:	ecbd 8b02 	vpop	{d8}
 800c70c:	bd38      	pop	{r3, r4, r5, pc}
 800c70e:	bf00      	nop
 800c710:	3ff00000 	.word	0x3ff00000
 800c714:	0800e4a0 	.word	0x0800e4a0

0800c718 <pow>:
 800c718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71a:	ed2d 8b02 	vpush	{d8}
 800c71e:	eeb0 8a40 	vmov.f32	s16, s0
 800c722:	eef0 8a60 	vmov.f32	s17, s1
 800c726:	ec55 4b11 	vmov	r4, r5, d1
 800c72a:	f000 fac5 	bl	800ccb8 <__ieee754_pow>
 800c72e:	4622      	mov	r2, r4
 800c730:	462b      	mov	r3, r5
 800c732:	4620      	mov	r0, r4
 800c734:	4629      	mov	r1, r5
 800c736:	ec57 6b10 	vmov	r6, r7, d0
 800c73a:	f7f4 f9a3 	bl	8000a84 <__aeabi_dcmpun>
 800c73e:	2800      	cmp	r0, #0
 800c740:	d13b      	bne.n	800c7ba <pow+0xa2>
 800c742:	ec51 0b18 	vmov	r0, r1, d8
 800c746:	2200      	movs	r2, #0
 800c748:	2300      	movs	r3, #0
 800c74a:	f7f4 f969 	bl	8000a20 <__aeabi_dcmpeq>
 800c74e:	b1b8      	cbz	r0, 800c780 <pow+0x68>
 800c750:	2200      	movs	r2, #0
 800c752:	2300      	movs	r3, #0
 800c754:	4620      	mov	r0, r4
 800c756:	4629      	mov	r1, r5
 800c758:	f7f4 f962 	bl	8000a20 <__aeabi_dcmpeq>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	d146      	bne.n	800c7ee <pow+0xd6>
 800c760:	ec45 4b10 	vmov	d0, r4, r5
 800c764:	f001 fd1b 	bl	800e19e <finite>
 800c768:	b338      	cbz	r0, 800c7ba <pow+0xa2>
 800c76a:	2200      	movs	r2, #0
 800c76c:	2300      	movs	r3, #0
 800c76e:	4620      	mov	r0, r4
 800c770:	4629      	mov	r1, r5
 800c772:	f7f4 f95f 	bl	8000a34 <__aeabi_dcmplt>
 800c776:	b300      	cbz	r0, 800c7ba <pow+0xa2>
 800c778:	f7ff fed0 	bl	800c51c <__errno>
 800c77c:	2322      	movs	r3, #34	; 0x22
 800c77e:	e01b      	b.n	800c7b8 <pow+0xa0>
 800c780:	ec47 6b10 	vmov	d0, r6, r7
 800c784:	f001 fd0b 	bl	800e19e <finite>
 800c788:	b9e0      	cbnz	r0, 800c7c4 <pow+0xac>
 800c78a:	eeb0 0a48 	vmov.f32	s0, s16
 800c78e:	eef0 0a68 	vmov.f32	s1, s17
 800c792:	f001 fd04 	bl	800e19e <finite>
 800c796:	b1a8      	cbz	r0, 800c7c4 <pow+0xac>
 800c798:	ec45 4b10 	vmov	d0, r4, r5
 800c79c:	f001 fcff 	bl	800e19e <finite>
 800c7a0:	b180      	cbz	r0, 800c7c4 <pow+0xac>
 800c7a2:	4632      	mov	r2, r6
 800c7a4:	463b      	mov	r3, r7
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	4639      	mov	r1, r7
 800c7aa:	f7f4 f96b 	bl	8000a84 <__aeabi_dcmpun>
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d0e2      	beq.n	800c778 <pow+0x60>
 800c7b2:	f7ff feb3 	bl	800c51c <__errno>
 800c7b6:	2321      	movs	r3, #33	; 0x21
 800c7b8:	6003      	str	r3, [r0, #0]
 800c7ba:	ecbd 8b02 	vpop	{d8}
 800c7be:	ec47 6b10 	vmov	d0, r6, r7
 800c7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	4639      	mov	r1, r7
 800c7cc:	f7f4 f928 	bl	8000a20 <__aeabi_dcmpeq>
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	d0f2      	beq.n	800c7ba <pow+0xa2>
 800c7d4:	eeb0 0a48 	vmov.f32	s0, s16
 800c7d8:	eef0 0a68 	vmov.f32	s1, s17
 800c7dc:	f001 fcdf 	bl	800e19e <finite>
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d0ea      	beq.n	800c7ba <pow+0xa2>
 800c7e4:	ec45 4b10 	vmov	d0, r4, r5
 800c7e8:	f001 fcd9 	bl	800e19e <finite>
 800c7ec:	e7c3      	b.n	800c776 <pow+0x5e>
 800c7ee:	4f01      	ldr	r7, [pc, #4]	; (800c7f4 <pow+0xdc>)
 800c7f0:	2600      	movs	r6, #0
 800c7f2:	e7e2      	b.n	800c7ba <pow+0xa2>
 800c7f4:	3ff00000 	.word	0x3ff00000

0800c7f8 <__ieee754_acos>:
 800c7f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fc:	ec55 4b10 	vmov	r4, r5, d0
 800c800:	49b7      	ldr	r1, [pc, #732]	; (800cae0 <__ieee754_acos+0x2e8>)
 800c802:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c806:	428b      	cmp	r3, r1
 800c808:	dd1b      	ble.n	800c842 <__ieee754_acos+0x4a>
 800c80a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800c80e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c812:	4323      	orrs	r3, r4
 800c814:	d106      	bne.n	800c824 <__ieee754_acos+0x2c>
 800c816:	2d00      	cmp	r5, #0
 800c818:	f300 8211 	bgt.w	800cc3e <__ieee754_acos+0x446>
 800c81c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800ca78 <__ieee754_acos+0x280>
 800c820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c824:	ee10 2a10 	vmov	r2, s0
 800c828:	462b      	mov	r3, r5
 800c82a:	ee10 0a10 	vmov	r0, s0
 800c82e:	4629      	mov	r1, r5
 800c830:	f7f3 fcd6 	bl	80001e0 <__aeabi_dsub>
 800c834:	4602      	mov	r2, r0
 800c836:	460b      	mov	r3, r1
 800c838:	f7f3 ffb4 	bl	80007a4 <__aeabi_ddiv>
 800c83c:	ec41 0b10 	vmov	d0, r0, r1
 800c840:	e7ee      	b.n	800c820 <__ieee754_acos+0x28>
 800c842:	49a8      	ldr	r1, [pc, #672]	; (800cae4 <__ieee754_acos+0x2ec>)
 800c844:	428b      	cmp	r3, r1
 800c846:	f300 8087 	bgt.w	800c958 <__ieee754_acos+0x160>
 800c84a:	4aa7      	ldr	r2, [pc, #668]	; (800cae8 <__ieee754_acos+0x2f0>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	f340 81f9 	ble.w	800cc44 <__ieee754_acos+0x44c>
 800c852:	ee10 2a10 	vmov	r2, s0
 800c856:	ee10 0a10 	vmov	r0, s0
 800c85a:	462b      	mov	r3, r5
 800c85c:	4629      	mov	r1, r5
 800c85e:	f7f3 fe77 	bl	8000550 <__aeabi_dmul>
 800c862:	a387      	add	r3, pc, #540	; (adr r3, 800ca80 <__ieee754_acos+0x288>)
 800c864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c868:	4606      	mov	r6, r0
 800c86a:	460f      	mov	r7, r1
 800c86c:	f7f3 fe70 	bl	8000550 <__aeabi_dmul>
 800c870:	a385      	add	r3, pc, #532	; (adr r3, 800ca88 <__ieee754_acos+0x290>)
 800c872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c876:	f7f3 fcb5 	bl	80001e4 <__adddf3>
 800c87a:	4632      	mov	r2, r6
 800c87c:	463b      	mov	r3, r7
 800c87e:	f7f3 fe67 	bl	8000550 <__aeabi_dmul>
 800c882:	a383      	add	r3, pc, #524	; (adr r3, 800ca90 <__ieee754_acos+0x298>)
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	f7f3 fcaa 	bl	80001e0 <__aeabi_dsub>
 800c88c:	4632      	mov	r2, r6
 800c88e:	463b      	mov	r3, r7
 800c890:	f7f3 fe5e 	bl	8000550 <__aeabi_dmul>
 800c894:	a380      	add	r3, pc, #512	; (adr r3, 800ca98 <__ieee754_acos+0x2a0>)
 800c896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89a:	f7f3 fca3 	bl	80001e4 <__adddf3>
 800c89e:	4632      	mov	r2, r6
 800c8a0:	463b      	mov	r3, r7
 800c8a2:	f7f3 fe55 	bl	8000550 <__aeabi_dmul>
 800c8a6:	a37e      	add	r3, pc, #504	; (adr r3, 800caa0 <__ieee754_acos+0x2a8>)
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	f7f3 fc98 	bl	80001e0 <__aeabi_dsub>
 800c8b0:	4632      	mov	r2, r6
 800c8b2:	463b      	mov	r3, r7
 800c8b4:	f7f3 fe4c 	bl	8000550 <__aeabi_dmul>
 800c8b8:	a37b      	add	r3, pc, #492	; (adr r3, 800caa8 <__ieee754_acos+0x2b0>)
 800c8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8be:	f7f3 fc91 	bl	80001e4 <__adddf3>
 800c8c2:	4632      	mov	r2, r6
 800c8c4:	463b      	mov	r3, r7
 800c8c6:	f7f3 fe43 	bl	8000550 <__aeabi_dmul>
 800c8ca:	a379      	add	r3, pc, #484	; (adr r3, 800cab0 <__ieee754_acos+0x2b8>)
 800c8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d0:	4680      	mov	r8, r0
 800c8d2:	4689      	mov	r9, r1
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	4639      	mov	r1, r7
 800c8d8:	f7f3 fe3a 	bl	8000550 <__aeabi_dmul>
 800c8dc:	a376      	add	r3, pc, #472	; (adr r3, 800cab8 <__ieee754_acos+0x2c0>)
 800c8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e2:	f7f3 fc7d 	bl	80001e0 <__aeabi_dsub>
 800c8e6:	4632      	mov	r2, r6
 800c8e8:	463b      	mov	r3, r7
 800c8ea:	f7f3 fe31 	bl	8000550 <__aeabi_dmul>
 800c8ee:	a374      	add	r3, pc, #464	; (adr r3, 800cac0 <__ieee754_acos+0x2c8>)
 800c8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f4:	f7f3 fc76 	bl	80001e4 <__adddf3>
 800c8f8:	4632      	mov	r2, r6
 800c8fa:	463b      	mov	r3, r7
 800c8fc:	f7f3 fe28 	bl	8000550 <__aeabi_dmul>
 800c900:	a371      	add	r3, pc, #452	; (adr r3, 800cac8 <__ieee754_acos+0x2d0>)
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	f7f3 fc6b 	bl	80001e0 <__aeabi_dsub>
 800c90a:	4632      	mov	r2, r6
 800c90c:	463b      	mov	r3, r7
 800c90e:	f7f3 fe1f 	bl	8000550 <__aeabi_dmul>
 800c912:	4b76      	ldr	r3, [pc, #472]	; (800caec <__ieee754_acos+0x2f4>)
 800c914:	2200      	movs	r2, #0
 800c916:	f7f3 fc65 	bl	80001e4 <__adddf3>
 800c91a:	4602      	mov	r2, r0
 800c91c:	460b      	mov	r3, r1
 800c91e:	4640      	mov	r0, r8
 800c920:	4649      	mov	r1, r9
 800c922:	f7f3 ff3f 	bl	80007a4 <__aeabi_ddiv>
 800c926:	4622      	mov	r2, r4
 800c928:	462b      	mov	r3, r5
 800c92a:	f7f3 fe11 	bl	8000550 <__aeabi_dmul>
 800c92e:	4602      	mov	r2, r0
 800c930:	460b      	mov	r3, r1
 800c932:	a167      	add	r1, pc, #412	; (adr r1, 800cad0 <__ieee754_acos+0x2d8>)
 800c934:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c938:	f7f3 fc52 	bl	80001e0 <__aeabi_dsub>
 800c93c:	4602      	mov	r2, r0
 800c93e:	460b      	mov	r3, r1
 800c940:	4620      	mov	r0, r4
 800c942:	4629      	mov	r1, r5
 800c944:	f7f3 fc4c 	bl	80001e0 <__aeabi_dsub>
 800c948:	4602      	mov	r2, r0
 800c94a:	460b      	mov	r3, r1
 800c94c:	a162      	add	r1, pc, #392	; (adr r1, 800cad8 <__ieee754_acos+0x2e0>)
 800c94e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c952:	f7f3 fc45 	bl	80001e0 <__aeabi_dsub>
 800c956:	e771      	b.n	800c83c <__ieee754_acos+0x44>
 800c958:	2d00      	cmp	r5, #0
 800c95a:	f280 80cb 	bge.w	800caf4 <__ieee754_acos+0x2fc>
 800c95e:	ee10 0a10 	vmov	r0, s0
 800c962:	4b62      	ldr	r3, [pc, #392]	; (800caec <__ieee754_acos+0x2f4>)
 800c964:	2200      	movs	r2, #0
 800c966:	4629      	mov	r1, r5
 800c968:	f7f3 fc3c 	bl	80001e4 <__adddf3>
 800c96c:	4b60      	ldr	r3, [pc, #384]	; (800caf0 <__ieee754_acos+0x2f8>)
 800c96e:	2200      	movs	r2, #0
 800c970:	f7f3 fdee 	bl	8000550 <__aeabi_dmul>
 800c974:	a342      	add	r3, pc, #264	; (adr r3, 800ca80 <__ieee754_acos+0x288>)
 800c976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97a:	4604      	mov	r4, r0
 800c97c:	460d      	mov	r5, r1
 800c97e:	f7f3 fde7 	bl	8000550 <__aeabi_dmul>
 800c982:	a341      	add	r3, pc, #260	; (adr r3, 800ca88 <__ieee754_acos+0x290>)
 800c984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c988:	f7f3 fc2c 	bl	80001e4 <__adddf3>
 800c98c:	4622      	mov	r2, r4
 800c98e:	462b      	mov	r3, r5
 800c990:	f7f3 fdde 	bl	8000550 <__aeabi_dmul>
 800c994:	a33e      	add	r3, pc, #248	; (adr r3, 800ca90 <__ieee754_acos+0x298>)
 800c996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99a:	f7f3 fc21 	bl	80001e0 <__aeabi_dsub>
 800c99e:	4622      	mov	r2, r4
 800c9a0:	462b      	mov	r3, r5
 800c9a2:	f7f3 fdd5 	bl	8000550 <__aeabi_dmul>
 800c9a6:	a33c      	add	r3, pc, #240	; (adr r3, 800ca98 <__ieee754_acos+0x2a0>)
 800c9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ac:	f7f3 fc1a 	bl	80001e4 <__adddf3>
 800c9b0:	4622      	mov	r2, r4
 800c9b2:	462b      	mov	r3, r5
 800c9b4:	f7f3 fdcc 	bl	8000550 <__aeabi_dmul>
 800c9b8:	a339      	add	r3, pc, #228	; (adr r3, 800caa0 <__ieee754_acos+0x2a8>)
 800c9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9be:	f7f3 fc0f 	bl	80001e0 <__aeabi_dsub>
 800c9c2:	4622      	mov	r2, r4
 800c9c4:	462b      	mov	r3, r5
 800c9c6:	f7f3 fdc3 	bl	8000550 <__aeabi_dmul>
 800c9ca:	a337      	add	r3, pc, #220	; (adr r3, 800caa8 <__ieee754_acos+0x2b0>)
 800c9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d0:	f7f3 fc08 	bl	80001e4 <__adddf3>
 800c9d4:	4622      	mov	r2, r4
 800c9d6:	462b      	mov	r3, r5
 800c9d8:	f7f3 fdba 	bl	8000550 <__aeabi_dmul>
 800c9dc:	ec45 4b10 	vmov	d0, r4, r5
 800c9e0:	4680      	mov	r8, r0
 800c9e2:	4689      	mov	r9, r1
 800c9e4:	f000 fe96 	bl	800d714 <__ieee754_sqrt>
 800c9e8:	a331      	add	r3, pc, #196	; (adr r3, 800cab0 <__ieee754_acos+0x2b8>)
 800c9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	ec57 6b10 	vmov	r6, r7, d0
 800c9f6:	f7f3 fdab 	bl	8000550 <__aeabi_dmul>
 800c9fa:	a32f      	add	r3, pc, #188	; (adr r3, 800cab8 <__ieee754_acos+0x2c0>)
 800c9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca00:	f7f3 fbee 	bl	80001e0 <__aeabi_dsub>
 800ca04:	4622      	mov	r2, r4
 800ca06:	462b      	mov	r3, r5
 800ca08:	f7f3 fda2 	bl	8000550 <__aeabi_dmul>
 800ca0c:	a32c      	add	r3, pc, #176	; (adr r3, 800cac0 <__ieee754_acos+0x2c8>)
 800ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca12:	f7f3 fbe7 	bl	80001e4 <__adddf3>
 800ca16:	4622      	mov	r2, r4
 800ca18:	462b      	mov	r3, r5
 800ca1a:	f7f3 fd99 	bl	8000550 <__aeabi_dmul>
 800ca1e:	a32a      	add	r3, pc, #168	; (adr r3, 800cac8 <__ieee754_acos+0x2d0>)
 800ca20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca24:	f7f3 fbdc 	bl	80001e0 <__aeabi_dsub>
 800ca28:	4622      	mov	r2, r4
 800ca2a:	462b      	mov	r3, r5
 800ca2c:	f7f3 fd90 	bl	8000550 <__aeabi_dmul>
 800ca30:	4b2e      	ldr	r3, [pc, #184]	; (800caec <__ieee754_acos+0x2f4>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	f7f3 fbd6 	bl	80001e4 <__adddf3>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	4640      	mov	r0, r8
 800ca3e:	4649      	mov	r1, r9
 800ca40:	f7f3 feb0 	bl	80007a4 <__aeabi_ddiv>
 800ca44:	4632      	mov	r2, r6
 800ca46:	463b      	mov	r3, r7
 800ca48:	f7f3 fd82 	bl	8000550 <__aeabi_dmul>
 800ca4c:	a320      	add	r3, pc, #128	; (adr r3, 800cad0 <__ieee754_acos+0x2d8>)
 800ca4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca52:	f7f3 fbc5 	bl	80001e0 <__aeabi_dsub>
 800ca56:	4632      	mov	r2, r6
 800ca58:	463b      	mov	r3, r7
 800ca5a:	f7f3 fbc3 	bl	80001e4 <__adddf3>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	460b      	mov	r3, r1
 800ca62:	f7f3 fbbf 	bl	80001e4 <__adddf3>
 800ca66:	4602      	mov	r2, r0
 800ca68:	460b      	mov	r3, r1
 800ca6a:	a103      	add	r1, pc, #12	; (adr r1, 800ca78 <__ieee754_acos+0x280>)
 800ca6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca70:	e76f      	b.n	800c952 <__ieee754_acos+0x15a>
 800ca72:	bf00      	nop
 800ca74:	f3af 8000 	nop.w
 800ca78:	54442d18 	.word	0x54442d18
 800ca7c:	400921fb 	.word	0x400921fb
 800ca80:	0dfdf709 	.word	0x0dfdf709
 800ca84:	3f023de1 	.word	0x3f023de1
 800ca88:	7501b288 	.word	0x7501b288
 800ca8c:	3f49efe0 	.word	0x3f49efe0
 800ca90:	b5688f3b 	.word	0xb5688f3b
 800ca94:	3fa48228 	.word	0x3fa48228
 800ca98:	0e884455 	.word	0x0e884455
 800ca9c:	3fc9c155 	.word	0x3fc9c155
 800caa0:	03eb6f7d 	.word	0x03eb6f7d
 800caa4:	3fd4d612 	.word	0x3fd4d612
 800caa8:	55555555 	.word	0x55555555
 800caac:	3fc55555 	.word	0x3fc55555
 800cab0:	b12e9282 	.word	0xb12e9282
 800cab4:	3fb3b8c5 	.word	0x3fb3b8c5
 800cab8:	1b8d0159 	.word	0x1b8d0159
 800cabc:	3fe6066c 	.word	0x3fe6066c
 800cac0:	9c598ac8 	.word	0x9c598ac8
 800cac4:	40002ae5 	.word	0x40002ae5
 800cac8:	1c8a2d4b 	.word	0x1c8a2d4b
 800cacc:	40033a27 	.word	0x40033a27
 800cad0:	33145c07 	.word	0x33145c07
 800cad4:	3c91a626 	.word	0x3c91a626
 800cad8:	54442d18 	.word	0x54442d18
 800cadc:	3ff921fb 	.word	0x3ff921fb
 800cae0:	3fefffff 	.word	0x3fefffff
 800cae4:	3fdfffff 	.word	0x3fdfffff
 800cae8:	3c600000 	.word	0x3c600000
 800caec:	3ff00000 	.word	0x3ff00000
 800caf0:	3fe00000 	.word	0x3fe00000
 800caf4:	ee10 2a10 	vmov	r2, s0
 800caf8:	462b      	mov	r3, r5
 800cafa:	496d      	ldr	r1, [pc, #436]	; (800ccb0 <__ieee754_acos+0x4b8>)
 800cafc:	2000      	movs	r0, #0
 800cafe:	f7f3 fb6f 	bl	80001e0 <__aeabi_dsub>
 800cb02:	4b6c      	ldr	r3, [pc, #432]	; (800ccb4 <__ieee754_acos+0x4bc>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	f7f3 fd23 	bl	8000550 <__aeabi_dmul>
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	460d      	mov	r5, r1
 800cb0e:	ec45 4b10 	vmov	d0, r4, r5
 800cb12:	f000 fdff 	bl	800d714 <__ieee754_sqrt>
 800cb16:	a34e      	add	r3, pc, #312	; (adr r3, 800cc50 <__ieee754_acos+0x458>)
 800cb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	4629      	mov	r1, r5
 800cb20:	ec59 8b10 	vmov	r8, r9, d0
 800cb24:	f7f3 fd14 	bl	8000550 <__aeabi_dmul>
 800cb28:	a34b      	add	r3, pc, #300	; (adr r3, 800cc58 <__ieee754_acos+0x460>)
 800cb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2e:	f7f3 fb59 	bl	80001e4 <__adddf3>
 800cb32:	4622      	mov	r2, r4
 800cb34:	462b      	mov	r3, r5
 800cb36:	f7f3 fd0b 	bl	8000550 <__aeabi_dmul>
 800cb3a:	a349      	add	r3, pc, #292	; (adr r3, 800cc60 <__ieee754_acos+0x468>)
 800cb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb40:	f7f3 fb4e 	bl	80001e0 <__aeabi_dsub>
 800cb44:	4622      	mov	r2, r4
 800cb46:	462b      	mov	r3, r5
 800cb48:	f7f3 fd02 	bl	8000550 <__aeabi_dmul>
 800cb4c:	a346      	add	r3, pc, #280	; (adr r3, 800cc68 <__ieee754_acos+0x470>)
 800cb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb52:	f7f3 fb47 	bl	80001e4 <__adddf3>
 800cb56:	4622      	mov	r2, r4
 800cb58:	462b      	mov	r3, r5
 800cb5a:	f7f3 fcf9 	bl	8000550 <__aeabi_dmul>
 800cb5e:	a344      	add	r3, pc, #272	; (adr r3, 800cc70 <__ieee754_acos+0x478>)
 800cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb64:	f7f3 fb3c 	bl	80001e0 <__aeabi_dsub>
 800cb68:	4622      	mov	r2, r4
 800cb6a:	462b      	mov	r3, r5
 800cb6c:	f7f3 fcf0 	bl	8000550 <__aeabi_dmul>
 800cb70:	a341      	add	r3, pc, #260	; (adr r3, 800cc78 <__ieee754_acos+0x480>)
 800cb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb76:	f7f3 fb35 	bl	80001e4 <__adddf3>
 800cb7a:	4622      	mov	r2, r4
 800cb7c:	462b      	mov	r3, r5
 800cb7e:	f7f3 fce7 	bl	8000550 <__aeabi_dmul>
 800cb82:	a33f      	add	r3, pc, #252	; (adr r3, 800cc80 <__ieee754_acos+0x488>)
 800cb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb88:	4682      	mov	sl, r0
 800cb8a:	468b      	mov	fp, r1
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	4629      	mov	r1, r5
 800cb90:	f7f3 fcde 	bl	8000550 <__aeabi_dmul>
 800cb94:	a33c      	add	r3, pc, #240	; (adr r3, 800cc88 <__ieee754_acos+0x490>)
 800cb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9a:	f7f3 fb21 	bl	80001e0 <__aeabi_dsub>
 800cb9e:	4622      	mov	r2, r4
 800cba0:	462b      	mov	r3, r5
 800cba2:	f7f3 fcd5 	bl	8000550 <__aeabi_dmul>
 800cba6:	a33a      	add	r3, pc, #232	; (adr r3, 800cc90 <__ieee754_acos+0x498>)
 800cba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbac:	f7f3 fb1a 	bl	80001e4 <__adddf3>
 800cbb0:	4622      	mov	r2, r4
 800cbb2:	462b      	mov	r3, r5
 800cbb4:	f7f3 fccc 	bl	8000550 <__aeabi_dmul>
 800cbb8:	a337      	add	r3, pc, #220	; (adr r3, 800cc98 <__ieee754_acos+0x4a0>)
 800cbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbe:	f7f3 fb0f 	bl	80001e0 <__aeabi_dsub>
 800cbc2:	4622      	mov	r2, r4
 800cbc4:	462b      	mov	r3, r5
 800cbc6:	f7f3 fcc3 	bl	8000550 <__aeabi_dmul>
 800cbca:	4b39      	ldr	r3, [pc, #228]	; (800ccb0 <__ieee754_acos+0x4b8>)
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f7f3 fb09 	bl	80001e4 <__adddf3>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	4650      	mov	r0, sl
 800cbd8:	4659      	mov	r1, fp
 800cbda:	f7f3 fde3 	bl	80007a4 <__aeabi_ddiv>
 800cbde:	4642      	mov	r2, r8
 800cbe0:	464b      	mov	r3, r9
 800cbe2:	f7f3 fcb5 	bl	8000550 <__aeabi_dmul>
 800cbe6:	2600      	movs	r6, #0
 800cbe8:	4682      	mov	sl, r0
 800cbea:	468b      	mov	fp, r1
 800cbec:	4632      	mov	r2, r6
 800cbee:	464b      	mov	r3, r9
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	4649      	mov	r1, r9
 800cbf4:	f7f3 fcac 	bl	8000550 <__aeabi_dmul>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	4629      	mov	r1, r5
 800cc00:	f7f3 faee 	bl	80001e0 <__aeabi_dsub>
 800cc04:	4632      	mov	r2, r6
 800cc06:	4604      	mov	r4, r0
 800cc08:	460d      	mov	r5, r1
 800cc0a:	464b      	mov	r3, r9
 800cc0c:	4640      	mov	r0, r8
 800cc0e:	4649      	mov	r1, r9
 800cc10:	f7f3 fae8 	bl	80001e4 <__adddf3>
 800cc14:	4602      	mov	r2, r0
 800cc16:	460b      	mov	r3, r1
 800cc18:	4620      	mov	r0, r4
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	f7f3 fdc2 	bl	80007a4 <__aeabi_ddiv>
 800cc20:	4602      	mov	r2, r0
 800cc22:	460b      	mov	r3, r1
 800cc24:	4650      	mov	r0, sl
 800cc26:	4659      	mov	r1, fp
 800cc28:	f7f3 fadc 	bl	80001e4 <__adddf3>
 800cc2c:	4632      	mov	r2, r6
 800cc2e:	464b      	mov	r3, r9
 800cc30:	f7f3 fad8 	bl	80001e4 <__adddf3>
 800cc34:	4602      	mov	r2, r0
 800cc36:	460b      	mov	r3, r1
 800cc38:	f7f3 fad4 	bl	80001e4 <__adddf3>
 800cc3c:	e5fe      	b.n	800c83c <__ieee754_acos+0x44>
 800cc3e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800cca0 <__ieee754_acos+0x4a8>
 800cc42:	e5ed      	b.n	800c820 <__ieee754_acos+0x28>
 800cc44:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800cca8 <__ieee754_acos+0x4b0>
 800cc48:	e5ea      	b.n	800c820 <__ieee754_acos+0x28>
 800cc4a:	bf00      	nop
 800cc4c:	f3af 8000 	nop.w
 800cc50:	0dfdf709 	.word	0x0dfdf709
 800cc54:	3f023de1 	.word	0x3f023de1
 800cc58:	7501b288 	.word	0x7501b288
 800cc5c:	3f49efe0 	.word	0x3f49efe0
 800cc60:	b5688f3b 	.word	0xb5688f3b
 800cc64:	3fa48228 	.word	0x3fa48228
 800cc68:	0e884455 	.word	0x0e884455
 800cc6c:	3fc9c155 	.word	0x3fc9c155
 800cc70:	03eb6f7d 	.word	0x03eb6f7d
 800cc74:	3fd4d612 	.word	0x3fd4d612
 800cc78:	55555555 	.word	0x55555555
 800cc7c:	3fc55555 	.word	0x3fc55555
 800cc80:	b12e9282 	.word	0xb12e9282
 800cc84:	3fb3b8c5 	.word	0x3fb3b8c5
 800cc88:	1b8d0159 	.word	0x1b8d0159
 800cc8c:	3fe6066c 	.word	0x3fe6066c
 800cc90:	9c598ac8 	.word	0x9c598ac8
 800cc94:	40002ae5 	.word	0x40002ae5
 800cc98:	1c8a2d4b 	.word	0x1c8a2d4b
 800cc9c:	40033a27 	.word	0x40033a27
	...
 800cca8:	54442d18 	.word	0x54442d18
 800ccac:	3ff921fb 	.word	0x3ff921fb
 800ccb0:	3ff00000 	.word	0x3ff00000
 800ccb4:	3fe00000 	.word	0x3fe00000

0800ccb8 <__ieee754_pow>:
 800ccb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccbc:	ed2d 8b06 	vpush	{d8-d10}
 800ccc0:	b089      	sub	sp, #36	; 0x24
 800ccc2:	ed8d 1b00 	vstr	d1, [sp]
 800ccc6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ccca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ccce:	ea58 0102 	orrs.w	r1, r8, r2
 800ccd2:	ec57 6b10 	vmov	r6, r7, d0
 800ccd6:	d115      	bne.n	800cd04 <__ieee754_pow+0x4c>
 800ccd8:	19b3      	adds	r3, r6, r6
 800ccda:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ccde:	4152      	adcs	r2, r2
 800cce0:	4299      	cmp	r1, r3
 800cce2:	4b89      	ldr	r3, [pc, #548]	; (800cf08 <__ieee754_pow+0x250>)
 800cce4:	4193      	sbcs	r3, r2
 800cce6:	f080 84d2 	bcs.w	800d68e <__ieee754_pow+0x9d6>
 800ccea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccee:	4630      	mov	r0, r6
 800ccf0:	4639      	mov	r1, r7
 800ccf2:	f7f3 fa77 	bl	80001e4 <__adddf3>
 800ccf6:	ec41 0b10 	vmov	d0, r0, r1
 800ccfa:	b009      	add	sp, #36	; 0x24
 800ccfc:	ecbd 8b06 	vpop	{d8-d10}
 800cd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd04:	4b81      	ldr	r3, [pc, #516]	; (800cf0c <__ieee754_pow+0x254>)
 800cd06:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800cd0a:	429c      	cmp	r4, r3
 800cd0c:	ee10 aa10 	vmov	sl, s0
 800cd10:	463d      	mov	r5, r7
 800cd12:	dc06      	bgt.n	800cd22 <__ieee754_pow+0x6a>
 800cd14:	d101      	bne.n	800cd1a <__ieee754_pow+0x62>
 800cd16:	2e00      	cmp	r6, #0
 800cd18:	d1e7      	bne.n	800ccea <__ieee754_pow+0x32>
 800cd1a:	4598      	cmp	r8, r3
 800cd1c:	dc01      	bgt.n	800cd22 <__ieee754_pow+0x6a>
 800cd1e:	d10f      	bne.n	800cd40 <__ieee754_pow+0x88>
 800cd20:	b172      	cbz	r2, 800cd40 <__ieee754_pow+0x88>
 800cd22:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800cd26:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800cd2a:	ea55 050a 	orrs.w	r5, r5, sl
 800cd2e:	d1dc      	bne.n	800ccea <__ieee754_pow+0x32>
 800cd30:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd34:	18db      	adds	r3, r3, r3
 800cd36:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800cd3a:	4152      	adcs	r2, r2
 800cd3c:	429d      	cmp	r5, r3
 800cd3e:	e7d0      	b.n	800cce2 <__ieee754_pow+0x2a>
 800cd40:	2d00      	cmp	r5, #0
 800cd42:	da3b      	bge.n	800cdbc <__ieee754_pow+0x104>
 800cd44:	4b72      	ldr	r3, [pc, #456]	; (800cf10 <__ieee754_pow+0x258>)
 800cd46:	4598      	cmp	r8, r3
 800cd48:	dc51      	bgt.n	800cdee <__ieee754_pow+0x136>
 800cd4a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cd4e:	4598      	cmp	r8, r3
 800cd50:	f340 84ac 	ble.w	800d6ac <__ieee754_pow+0x9f4>
 800cd54:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cd58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cd5c:	2b14      	cmp	r3, #20
 800cd5e:	dd0f      	ble.n	800cd80 <__ieee754_pow+0xc8>
 800cd60:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cd64:	fa22 f103 	lsr.w	r1, r2, r3
 800cd68:	fa01 f303 	lsl.w	r3, r1, r3
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	f040 849d 	bne.w	800d6ac <__ieee754_pow+0x9f4>
 800cd72:	f001 0101 	and.w	r1, r1, #1
 800cd76:	f1c1 0302 	rsb	r3, r1, #2
 800cd7a:	9304      	str	r3, [sp, #16]
 800cd7c:	b182      	cbz	r2, 800cda0 <__ieee754_pow+0xe8>
 800cd7e:	e05f      	b.n	800ce40 <__ieee754_pow+0x188>
 800cd80:	2a00      	cmp	r2, #0
 800cd82:	d15b      	bne.n	800ce3c <__ieee754_pow+0x184>
 800cd84:	f1c3 0314 	rsb	r3, r3, #20
 800cd88:	fa48 f103 	asr.w	r1, r8, r3
 800cd8c:	fa01 f303 	lsl.w	r3, r1, r3
 800cd90:	4543      	cmp	r3, r8
 800cd92:	f040 8488 	bne.w	800d6a6 <__ieee754_pow+0x9ee>
 800cd96:	f001 0101 	and.w	r1, r1, #1
 800cd9a:	f1c1 0302 	rsb	r3, r1, #2
 800cd9e:	9304      	str	r3, [sp, #16]
 800cda0:	4b5c      	ldr	r3, [pc, #368]	; (800cf14 <__ieee754_pow+0x25c>)
 800cda2:	4598      	cmp	r8, r3
 800cda4:	d132      	bne.n	800ce0c <__ieee754_pow+0x154>
 800cda6:	f1b9 0f00 	cmp.w	r9, #0
 800cdaa:	f280 8478 	bge.w	800d69e <__ieee754_pow+0x9e6>
 800cdae:	4959      	ldr	r1, [pc, #356]	; (800cf14 <__ieee754_pow+0x25c>)
 800cdb0:	4632      	mov	r2, r6
 800cdb2:	463b      	mov	r3, r7
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	f7f3 fcf5 	bl	80007a4 <__aeabi_ddiv>
 800cdba:	e79c      	b.n	800ccf6 <__ieee754_pow+0x3e>
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	9304      	str	r3, [sp, #16]
 800cdc0:	2a00      	cmp	r2, #0
 800cdc2:	d13d      	bne.n	800ce40 <__ieee754_pow+0x188>
 800cdc4:	4b51      	ldr	r3, [pc, #324]	; (800cf0c <__ieee754_pow+0x254>)
 800cdc6:	4598      	cmp	r8, r3
 800cdc8:	d1ea      	bne.n	800cda0 <__ieee754_pow+0xe8>
 800cdca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cdce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cdd2:	ea53 030a 	orrs.w	r3, r3, sl
 800cdd6:	f000 845a 	beq.w	800d68e <__ieee754_pow+0x9d6>
 800cdda:	4b4f      	ldr	r3, [pc, #316]	; (800cf18 <__ieee754_pow+0x260>)
 800cddc:	429c      	cmp	r4, r3
 800cdde:	dd08      	ble.n	800cdf2 <__ieee754_pow+0x13a>
 800cde0:	f1b9 0f00 	cmp.w	r9, #0
 800cde4:	f2c0 8457 	blt.w	800d696 <__ieee754_pow+0x9de>
 800cde8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdec:	e783      	b.n	800ccf6 <__ieee754_pow+0x3e>
 800cdee:	2302      	movs	r3, #2
 800cdf0:	e7e5      	b.n	800cdbe <__ieee754_pow+0x106>
 800cdf2:	f1b9 0f00 	cmp.w	r9, #0
 800cdf6:	f04f 0000 	mov.w	r0, #0
 800cdfa:	f04f 0100 	mov.w	r1, #0
 800cdfe:	f6bf af7a 	bge.w	800ccf6 <__ieee754_pow+0x3e>
 800ce02:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ce06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ce0a:	e774      	b.n	800ccf6 <__ieee754_pow+0x3e>
 800ce0c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ce10:	d106      	bne.n	800ce20 <__ieee754_pow+0x168>
 800ce12:	4632      	mov	r2, r6
 800ce14:	463b      	mov	r3, r7
 800ce16:	4630      	mov	r0, r6
 800ce18:	4639      	mov	r1, r7
 800ce1a:	f7f3 fb99 	bl	8000550 <__aeabi_dmul>
 800ce1e:	e76a      	b.n	800ccf6 <__ieee754_pow+0x3e>
 800ce20:	4b3e      	ldr	r3, [pc, #248]	; (800cf1c <__ieee754_pow+0x264>)
 800ce22:	4599      	cmp	r9, r3
 800ce24:	d10c      	bne.n	800ce40 <__ieee754_pow+0x188>
 800ce26:	2d00      	cmp	r5, #0
 800ce28:	db0a      	blt.n	800ce40 <__ieee754_pow+0x188>
 800ce2a:	ec47 6b10 	vmov	d0, r6, r7
 800ce2e:	b009      	add	sp, #36	; 0x24
 800ce30:	ecbd 8b06 	vpop	{d8-d10}
 800ce34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce38:	f000 bc6c 	b.w	800d714 <__ieee754_sqrt>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	9304      	str	r3, [sp, #16]
 800ce40:	ec47 6b10 	vmov	d0, r6, r7
 800ce44:	f001 f9a2 	bl	800e18c <fabs>
 800ce48:	ec51 0b10 	vmov	r0, r1, d0
 800ce4c:	f1ba 0f00 	cmp.w	sl, #0
 800ce50:	d129      	bne.n	800cea6 <__ieee754_pow+0x1ee>
 800ce52:	b124      	cbz	r4, 800ce5e <__ieee754_pow+0x1a6>
 800ce54:	4b2f      	ldr	r3, [pc, #188]	; (800cf14 <__ieee754_pow+0x25c>)
 800ce56:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d123      	bne.n	800cea6 <__ieee754_pow+0x1ee>
 800ce5e:	f1b9 0f00 	cmp.w	r9, #0
 800ce62:	da05      	bge.n	800ce70 <__ieee754_pow+0x1b8>
 800ce64:	4602      	mov	r2, r0
 800ce66:	460b      	mov	r3, r1
 800ce68:	2000      	movs	r0, #0
 800ce6a:	492a      	ldr	r1, [pc, #168]	; (800cf14 <__ieee754_pow+0x25c>)
 800ce6c:	f7f3 fc9a 	bl	80007a4 <__aeabi_ddiv>
 800ce70:	2d00      	cmp	r5, #0
 800ce72:	f6bf af40 	bge.w	800ccf6 <__ieee754_pow+0x3e>
 800ce76:	9b04      	ldr	r3, [sp, #16]
 800ce78:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ce7c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ce80:	4323      	orrs	r3, r4
 800ce82:	d108      	bne.n	800ce96 <__ieee754_pow+0x1de>
 800ce84:	4602      	mov	r2, r0
 800ce86:	460b      	mov	r3, r1
 800ce88:	4610      	mov	r0, r2
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	f7f3 f9a8 	bl	80001e0 <__aeabi_dsub>
 800ce90:	4602      	mov	r2, r0
 800ce92:	460b      	mov	r3, r1
 800ce94:	e78f      	b.n	800cdb6 <__ieee754_pow+0xfe>
 800ce96:	9b04      	ldr	r3, [sp, #16]
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	f47f af2c 	bne.w	800ccf6 <__ieee754_pow+0x3e>
 800ce9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cea2:	4619      	mov	r1, r3
 800cea4:	e727      	b.n	800ccf6 <__ieee754_pow+0x3e>
 800cea6:	0feb      	lsrs	r3, r5, #31
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	9306      	str	r3, [sp, #24]
 800ceac:	9a06      	ldr	r2, [sp, #24]
 800ceae:	9b04      	ldr	r3, [sp, #16]
 800ceb0:	4313      	orrs	r3, r2
 800ceb2:	d102      	bne.n	800ceba <__ieee754_pow+0x202>
 800ceb4:	4632      	mov	r2, r6
 800ceb6:	463b      	mov	r3, r7
 800ceb8:	e7e6      	b.n	800ce88 <__ieee754_pow+0x1d0>
 800ceba:	4b19      	ldr	r3, [pc, #100]	; (800cf20 <__ieee754_pow+0x268>)
 800cebc:	4598      	cmp	r8, r3
 800cebe:	f340 80fb 	ble.w	800d0b8 <__ieee754_pow+0x400>
 800cec2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cec6:	4598      	cmp	r8, r3
 800cec8:	4b13      	ldr	r3, [pc, #76]	; (800cf18 <__ieee754_pow+0x260>)
 800ceca:	dd0c      	ble.n	800cee6 <__ieee754_pow+0x22e>
 800cecc:	429c      	cmp	r4, r3
 800cece:	dc0f      	bgt.n	800cef0 <__ieee754_pow+0x238>
 800ced0:	f1b9 0f00 	cmp.w	r9, #0
 800ced4:	da0f      	bge.n	800cef6 <__ieee754_pow+0x23e>
 800ced6:	2000      	movs	r0, #0
 800ced8:	b009      	add	sp, #36	; 0x24
 800ceda:	ecbd 8b06 	vpop	{d8-d10}
 800cede:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee2:	f001 b94a 	b.w	800e17a <__math_oflow>
 800cee6:	429c      	cmp	r4, r3
 800cee8:	dbf2      	blt.n	800ced0 <__ieee754_pow+0x218>
 800ceea:	4b0a      	ldr	r3, [pc, #40]	; (800cf14 <__ieee754_pow+0x25c>)
 800ceec:	429c      	cmp	r4, r3
 800ceee:	dd19      	ble.n	800cf24 <__ieee754_pow+0x26c>
 800cef0:	f1b9 0f00 	cmp.w	r9, #0
 800cef4:	dcef      	bgt.n	800ced6 <__ieee754_pow+0x21e>
 800cef6:	2000      	movs	r0, #0
 800cef8:	b009      	add	sp, #36	; 0x24
 800cefa:	ecbd 8b06 	vpop	{d8-d10}
 800cefe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf02:	f001 b931 	b.w	800e168 <__math_uflow>
 800cf06:	bf00      	nop
 800cf08:	fff00000 	.word	0xfff00000
 800cf0c:	7ff00000 	.word	0x7ff00000
 800cf10:	433fffff 	.word	0x433fffff
 800cf14:	3ff00000 	.word	0x3ff00000
 800cf18:	3fefffff 	.word	0x3fefffff
 800cf1c:	3fe00000 	.word	0x3fe00000
 800cf20:	41e00000 	.word	0x41e00000
 800cf24:	4b60      	ldr	r3, [pc, #384]	; (800d0a8 <__ieee754_pow+0x3f0>)
 800cf26:	2200      	movs	r2, #0
 800cf28:	f7f3 f95a 	bl	80001e0 <__aeabi_dsub>
 800cf2c:	a354      	add	r3, pc, #336	; (adr r3, 800d080 <__ieee754_pow+0x3c8>)
 800cf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf32:	4604      	mov	r4, r0
 800cf34:	460d      	mov	r5, r1
 800cf36:	f7f3 fb0b 	bl	8000550 <__aeabi_dmul>
 800cf3a:	a353      	add	r3, pc, #332	; (adr r3, 800d088 <__ieee754_pow+0x3d0>)
 800cf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf40:	4606      	mov	r6, r0
 800cf42:	460f      	mov	r7, r1
 800cf44:	4620      	mov	r0, r4
 800cf46:	4629      	mov	r1, r5
 800cf48:	f7f3 fb02 	bl	8000550 <__aeabi_dmul>
 800cf4c:	4b57      	ldr	r3, [pc, #348]	; (800d0ac <__ieee754_pow+0x3f4>)
 800cf4e:	4682      	mov	sl, r0
 800cf50:	468b      	mov	fp, r1
 800cf52:	2200      	movs	r2, #0
 800cf54:	4620      	mov	r0, r4
 800cf56:	4629      	mov	r1, r5
 800cf58:	f7f3 fafa 	bl	8000550 <__aeabi_dmul>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	460b      	mov	r3, r1
 800cf60:	a14b      	add	r1, pc, #300	; (adr r1, 800d090 <__ieee754_pow+0x3d8>)
 800cf62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf66:	f7f3 f93b 	bl	80001e0 <__aeabi_dsub>
 800cf6a:	4622      	mov	r2, r4
 800cf6c:	462b      	mov	r3, r5
 800cf6e:	f7f3 faef 	bl	8000550 <__aeabi_dmul>
 800cf72:	4602      	mov	r2, r0
 800cf74:	460b      	mov	r3, r1
 800cf76:	2000      	movs	r0, #0
 800cf78:	494d      	ldr	r1, [pc, #308]	; (800d0b0 <__ieee754_pow+0x3f8>)
 800cf7a:	f7f3 f931 	bl	80001e0 <__aeabi_dsub>
 800cf7e:	4622      	mov	r2, r4
 800cf80:	4680      	mov	r8, r0
 800cf82:	4689      	mov	r9, r1
 800cf84:	462b      	mov	r3, r5
 800cf86:	4620      	mov	r0, r4
 800cf88:	4629      	mov	r1, r5
 800cf8a:	f7f3 fae1 	bl	8000550 <__aeabi_dmul>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	460b      	mov	r3, r1
 800cf92:	4640      	mov	r0, r8
 800cf94:	4649      	mov	r1, r9
 800cf96:	f7f3 fadb 	bl	8000550 <__aeabi_dmul>
 800cf9a:	a33f      	add	r3, pc, #252	; (adr r3, 800d098 <__ieee754_pow+0x3e0>)
 800cf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa0:	f7f3 fad6 	bl	8000550 <__aeabi_dmul>
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	460b      	mov	r3, r1
 800cfa8:	4650      	mov	r0, sl
 800cfaa:	4659      	mov	r1, fp
 800cfac:	f7f3 f918 	bl	80001e0 <__aeabi_dsub>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	4680      	mov	r8, r0
 800cfb6:	4689      	mov	r9, r1
 800cfb8:	4630      	mov	r0, r6
 800cfba:	4639      	mov	r1, r7
 800cfbc:	f7f3 f912 	bl	80001e4 <__adddf3>
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	4632      	mov	r2, r6
 800cfc4:	463b      	mov	r3, r7
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	460d      	mov	r5, r1
 800cfca:	f7f3 f909 	bl	80001e0 <__aeabi_dsub>
 800cfce:	4602      	mov	r2, r0
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	4640      	mov	r0, r8
 800cfd4:	4649      	mov	r1, r9
 800cfd6:	f7f3 f903 	bl	80001e0 <__aeabi_dsub>
 800cfda:	9b04      	ldr	r3, [sp, #16]
 800cfdc:	9a06      	ldr	r2, [sp, #24]
 800cfde:	3b01      	subs	r3, #1
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	4682      	mov	sl, r0
 800cfe4:	468b      	mov	fp, r1
 800cfe6:	f040 81e7 	bne.w	800d3b8 <__ieee754_pow+0x700>
 800cfea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d0a0 <__ieee754_pow+0x3e8>
 800cfee:	eeb0 8a47 	vmov.f32	s16, s14
 800cff2:	eef0 8a67 	vmov.f32	s17, s15
 800cff6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cffa:	2600      	movs	r6, #0
 800cffc:	4632      	mov	r2, r6
 800cffe:	463b      	mov	r3, r7
 800d000:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d004:	f7f3 f8ec 	bl	80001e0 <__aeabi_dsub>
 800d008:	4622      	mov	r2, r4
 800d00a:	462b      	mov	r3, r5
 800d00c:	f7f3 faa0 	bl	8000550 <__aeabi_dmul>
 800d010:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d014:	4680      	mov	r8, r0
 800d016:	4689      	mov	r9, r1
 800d018:	4650      	mov	r0, sl
 800d01a:	4659      	mov	r1, fp
 800d01c:	f7f3 fa98 	bl	8000550 <__aeabi_dmul>
 800d020:	4602      	mov	r2, r0
 800d022:	460b      	mov	r3, r1
 800d024:	4640      	mov	r0, r8
 800d026:	4649      	mov	r1, r9
 800d028:	f7f3 f8dc 	bl	80001e4 <__adddf3>
 800d02c:	4632      	mov	r2, r6
 800d02e:	463b      	mov	r3, r7
 800d030:	4680      	mov	r8, r0
 800d032:	4689      	mov	r9, r1
 800d034:	4620      	mov	r0, r4
 800d036:	4629      	mov	r1, r5
 800d038:	f7f3 fa8a 	bl	8000550 <__aeabi_dmul>
 800d03c:	460b      	mov	r3, r1
 800d03e:	4604      	mov	r4, r0
 800d040:	460d      	mov	r5, r1
 800d042:	4602      	mov	r2, r0
 800d044:	4649      	mov	r1, r9
 800d046:	4640      	mov	r0, r8
 800d048:	f7f3 f8cc 	bl	80001e4 <__adddf3>
 800d04c:	4b19      	ldr	r3, [pc, #100]	; (800d0b4 <__ieee754_pow+0x3fc>)
 800d04e:	4299      	cmp	r1, r3
 800d050:	ec45 4b19 	vmov	d9, r4, r5
 800d054:	4606      	mov	r6, r0
 800d056:	460f      	mov	r7, r1
 800d058:	468b      	mov	fp, r1
 800d05a:	f340 82f1 	ble.w	800d640 <__ieee754_pow+0x988>
 800d05e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d062:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d066:	4303      	orrs	r3, r0
 800d068:	f000 81e4 	beq.w	800d434 <__ieee754_pow+0x77c>
 800d06c:	ec51 0b18 	vmov	r0, r1, d8
 800d070:	2200      	movs	r2, #0
 800d072:	2300      	movs	r3, #0
 800d074:	f7f3 fcde 	bl	8000a34 <__aeabi_dcmplt>
 800d078:	3800      	subs	r0, #0
 800d07a:	bf18      	it	ne
 800d07c:	2001      	movne	r0, #1
 800d07e:	e72b      	b.n	800ced8 <__ieee754_pow+0x220>
 800d080:	60000000 	.word	0x60000000
 800d084:	3ff71547 	.word	0x3ff71547
 800d088:	f85ddf44 	.word	0xf85ddf44
 800d08c:	3e54ae0b 	.word	0x3e54ae0b
 800d090:	55555555 	.word	0x55555555
 800d094:	3fd55555 	.word	0x3fd55555
 800d098:	652b82fe 	.word	0x652b82fe
 800d09c:	3ff71547 	.word	0x3ff71547
 800d0a0:	00000000 	.word	0x00000000
 800d0a4:	bff00000 	.word	0xbff00000
 800d0a8:	3ff00000 	.word	0x3ff00000
 800d0ac:	3fd00000 	.word	0x3fd00000
 800d0b0:	3fe00000 	.word	0x3fe00000
 800d0b4:	408fffff 	.word	0x408fffff
 800d0b8:	4bd5      	ldr	r3, [pc, #852]	; (800d410 <__ieee754_pow+0x758>)
 800d0ba:	402b      	ands	r3, r5
 800d0bc:	2200      	movs	r2, #0
 800d0be:	b92b      	cbnz	r3, 800d0cc <__ieee754_pow+0x414>
 800d0c0:	4bd4      	ldr	r3, [pc, #848]	; (800d414 <__ieee754_pow+0x75c>)
 800d0c2:	f7f3 fa45 	bl	8000550 <__aeabi_dmul>
 800d0c6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d0ca:	460c      	mov	r4, r1
 800d0cc:	1523      	asrs	r3, r4, #20
 800d0ce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d0d2:	4413      	add	r3, r2
 800d0d4:	9305      	str	r3, [sp, #20]
 800d0d6:	4bd0      	ldr	r3, [pc, #832]	; (800d418 <__ieee754_pow+0x760>)
 800d0d8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d0dc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d0e0:	429c      	cmp	r4, r3
 800d0e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d0e6:	dd08      	ble.n	800d0fa <__ieee754_pow+0x442>
 800d0e8:	4bcc      	ldr	r3, [pc, #816]	; (800d41c <__ieee754_pow+0x764>)
 800d0ea:	429c      	cmp	r4, r3
 800d0ec:	f340 8162 	ble.w	800d3b4 <__ieee754_pow+0x6fc>
 800d0f0:	9b05      	ldr	r3, [sp, #20]
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	9305      	str	r3, [sp, #20]
 800d0f6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d0fa:	2400      	movs	r4, #0
 800d0fc:	00e3      	lsls	r3, r4, #3
 800d0fe:	9307      	str	r3, [sp, #28]
 800d100:	4bc7      	ldr	r3, [pc, #796]	; (800d420 <__ieee754_pow+0x768>)
 800d102:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d106:	ed93 7b00 	vldr	d7, [r3]
 800d10a:	4629      	mov	r1, r5
 800d10c:	ec53 2b17 	vmov	r2, r3, d7
 800d110:	eeb0 9a47 	vmov.f32	s18, s14
 800d114:	eef0 9a67 	vmov.f32	s19, s15
 800d118:	4682      	mov	sl, r0
 800d11a:	f7f3 f861 	bl	80001e0 <__aeabi_dsub>
 800d11e:	4652      	mov	r2, sl
 800d120:	4606      	mov	r6, r0
 800d122:	460f      	mov	r7, r1
 800d124:	462b      	mov	r3, r5
 800d126:	ec51 0b19 	vmov	r0, r1, d9
 800d12a:	f7f3 f85b 	bl	80001e4 <__adddf3>
 800d12e:	4602      	mov	r2, r0
 800d130:	460b      	mov	r3, r1
 800d132:	2000      	movs	r0, #0
 800d134:	49bb      	ldr	r1, [pc, #748]	; (800d424 <__ieee754_pow+0x76c>)
 800d136:	f7f3 fb35 	bl	80007a4 <__aeabi_ddiv>
 800d13a:	ec41 0b1a 	vmov	d10, r0, r1
 800d13e:	4602      	mov	r2, r0
 800d140:	460b      	mov	r3, r1
 800d142:	4630      	mov	r0, r6
 800d144:	4639      	mov	r1, r7
 800d146:	f7f3 fa03 	bl	8000550 <__aeabi_dmul>
 800d14a:	2300      	movs	r3, #0
 800d14c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d150:	9302      	str	r3, [sp, #8]
 800d152:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d156:	46ab      	mov	fp, r5
 800d158:	106d      	asrs	r5, r5, #1
 800d15a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d15e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d162:	ec41 0b18 	vmov	d8, r0, r1
 800d166:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d16a:	2200      	movs	r2, #0
 800d16c:	4640      	mov	r0, r8
 800d16e:	4649      	mov	r1, r9
 800d170:	4614      	mov	r4, r2
 800d172:	461d      	mov	r5, r3
 800d174:	f7f3 f9ec 	bl	8000550 <__aeabi_dmul>
 800d178:	4602      	mov	r2, r0
 800d17a:	460b      	mov	r3, r1
 800d17c:	4630      	mov	r0, r6
 800d17e:	4639      	mov	r1, r7
 800d180:	f7f3 f82e 	bl	80001e0 <__aeabi_dsub>
 800d184:	ec53 2b19 	vmov	r2, r3, d9
 800d188:	4606      	mov	r6, r0
 800d18a:	460f      	mov	r7, r1
 800d18c:	4620      	mov	r0, r4
 800d18e:	4629      	mov	r1, r5
 800d190:	f7f3 f826 	bl	80001e0 <__aeabi_dsub>
 800d194:	4602      	mov	r2, r0
 800d196:	460b      	mov	r3, r1
 800d198:	4650      	mov	r0, sl
 800d19a:	4659      	mov	r1, fp
 800d19c:	f7f3 f820 	bl	80001e0 <__aeabi_dsub>
 800d1a0:	4642      	mov	r2, r8
 800d1a2:	464b      	mov	r3, r9
 800d1a4:	f7f3 f9d4 	bl	8000550 <__aeabi_dmul>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	4639      	mov	r1, r7
 800d1b0:	f7f3 f816 	bl	80001e0 <__aeabi_dsub>
 800d1b4:	ec53 2b1a 	vmov	r2, r3, d10
 800d1b8:	f7f3 f9ca 	bl	8000550 <__aeabi_dmul>
 800d1bc:	ec53 2b18 	vmov	r2, r3, d8
 800d1c0:	ec41 0b19 	vmov	d9, r0, r1
 800d1c4:	ec51 0b18 	vmov	r0, r1, d8
 800d1c8:	f7f3 f9c2 	bl	8000550 <__aeabi_dmul>
 800d1cc:	a37c      	add	r3, pc, #496	; (adr r3, 800d3c0 <__ieee754_pow+0x708>)
 800d1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	460d      	mov	r5, r1
 800d1d6:	f7f3 f9bb 	bl	8000550 <__aeabi_dmul>
 800d1da:	a37b      	add	r3, pc, #492	; (adr r3, 800d3c8 <__ieee754_pow+0x710>)
 800d1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e0:	f7f3 f800 	bl	80001e4 <__adddf3>
 800d1e4:	4622      	mov	r2, r4
 800d1e6:	462b      	mov	r3, r5
 800d1e8:	f7f3 f9b2 	bl	8000550 <__aeabi_dmul>
 800d1ec:	a378      	add	r3, pc, #480	; (adr r3, 800d3d0 <__ieee754_pow+0x718>)
 800d1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f2:	f7f2 fff7 	bl	80001e4 <__adddf3>
 800d1f6:	4622      	mov	r2, r4
 800d1f8:	462b      	mov	r3, r5
 800d1fa:	f7f3 f9a9 	bl	8000550 <__aeabi_dmul>
 800d1fe:	a376      	add	r3, pc, #472	; (adr r3, 800d3d8 <__ieee754_pow+0x720>)
 800d200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d204:	f7f2 ffee 	bl	80001e4 <__adddf3>
 800d208:	4622      	mov	r2, r4
 800d20a:	462b      	mov	r3, r5
 800d20c:	f7f3 f9a0 	bl	8000550 <__aeabi_dmul>
 800d210:	a373      	add	r3, pc, #460	; (adr r3, 800d3e0 <__ieee754_pow+0x728>)
 800d212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d216:	f7f2 ffe5 	bl	80001e4 <__adddf3>
 800d21a:	4622      	mov	r2, r4
 800d21c:	462b      	mov	r3, r5
 800d21e:	f7f3 f997 	bl	8000550 <__aeabi_dmul>
 800d222:	a371      	add	r3, pc, #452	; (adr r3, 800d3e8 <__ieee754_pow+0x730>)
 800d224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d228:	f7f2 ffdc 	bl	80001e4 <__adddf3>
 800d22c:	4622      	mov	r2, r4
 800d22e:	4606      	mov	r6, r0
 800d230:	460f      	mov	r7, r1
 800d232:	462b      	mov	r3, r5
 800d234:	4620      	mov	r0, r4
 800d236:	4629      	mov	r1, r5
 800d238:	f7f3 f98a 	bl	8000550 <__aeabi_dmul>
 800d23c:	4602      	mov	r2, r0
 800d23e:	460b      	mov	r3, r1
 800d240:	4630      	mov	r0, r6
 800d242:	4639      	mov	r1, r7
 800d244:	f7f3 f984 	bl	8000550 <__aeabi_dmul>
 800d248:	4642      	mov	r2, r8
 800d24a:	4604      	mov	r4, r0
 800d24c:	460d      	mov	r5, r1
 800d24e:	464b      	mov	r3, r9
 800d250:	ec51 0b18 	vmov	r0, r1, d8
 800d254:	f7f2 ffc6 	bl	80001e4 <__adddf3>
 800d258:	ec53 2b19 	vmov	r2, r3, d9
 800d25c:	f7f3 f978 	bl	8000550 <__aeabi_dmul>
 800d260:	4622      	mov	r2, r4
 800d262:	462b      	mov	r3, r5
 800d264:	f7f2 ffbe 	bl	80001e4 <__adddf3>
 800d268:	4642      	mov	r2, r8
 800d26a:	4682      	mov	sl, r0
 800d26c:	468b      	mov	fp, r1
 800d26e:	464b      	mov	r3, r9
 800d270:	4640      	mov	r0, r8
 800d272:	4649      	mov	r1, r9
 800d274:	f7f3 f96c 	bl	8000550 <__aeabi_dmul>
 800d278:	4b6b      	ldr	r3, [pc, #428]	; (800d428 <__ieee754_pow+0x770>)
 800d27a:	2200      	movs	r2, #0
 800d27c:	4606      	mov	r6, r0
 800d27e:	460f      	mov	r7, r1
 800d280:	f7f2 ffb0 	bl	80001e4 <__adddf3>
 800d284:	4652      	mov	r2, sl
 800d286:	465b      	mov	r3, fp
 800d288:	f7f2 ffac 	bl	80001e4 <__adddf3>
 800d28c:	2000      	movs	r0, #0
 800d28e:	4604      	mov	r4, r0
 800d290:	460d      	mov	r5, r1
 800d292:	4602      	mov	r2, r0
 800d294:	460b      	mov	r3, r1
 800d296:	4640      	mov	r0, r8
 800d298:	4649      	mov	r1, r9
 800d29a:	f7f3 f959 	bl	8000550 <__aeabi_dmul>
 800d29e:	4b62      	ldr	r3, [pc, #392]	; (800d428 <__ieee754_pow+0x770>)
 800d2a0:	4680      	mov	r8, r0
 800d2a2:	4689      	mov	r9, r1
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	4629      	mov	r1, r5
 800d2aa:	f7f2 ff99 	bl	80001e0 <__aeabi_dsub>
 800d2ae:	4632      	mov	r2, r6
 800d2b0:	463b      	mov	r3, r7
 800d2b2:	f7f2 ff95 	bl	80001e0 <__aeabi_dsub>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	4650      	mov	r0, sl
 800d2bc:	4659      	mov	r1, fp
 800d2be:	f7f2 ff8f 	bl	80001e0 <__aeabi_dsub>
 800d2c2:	ec53 2b18 	vmov	r2, r3, d8
 800d2c6:	f7f3 f943 	bl	8000550 <__aeabi_dmul>
 800d2ca:	4622      	mov	r2, r4
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	460f      	mov	r7, r1
 800d2d0:	462b      	mov	r3, r5
 800d2d2:	ec51 0b19 	vmov	r0, r1, d9
 800d2d6:	f7f3 f93b 	bl	8000550 <__aeabi_dmul>
 800d2da:	4602      	mov	r2, r0
 800d2dc:	460b      	mov	r3, r1
 800d2de:	4630      	mov	r0, r6
 800d2e0:	4639      	mov	r1, r7
 800d2e2:	f7f2 ff7f 	bl	80001e4 <__adddf3>
 800d2e6:	4606      	mov	r6, r0
 800d2e8:	460f      	mov	r7, r1
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	4640      	mov	r0, r8
 800d2f0:	4649      	mov	r1, r9
 800d2f2:	f7f2 ff77 	bl	80001e4 <__adddf3>
 800d2f6:	a33e      	add	r3, pc, #248	; (adr r3, 800d3f0 <__ieee754_pow+0x738>)
 800d2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	4604      	mov	r4, r0
 800d300:	460d      	mov	r5, r1
 800d302:	f7f3 f925 	bl	8000550 <__aeabi_dmul>
 800d306:	4642      	mov	r2, r8
 800d308:	ec41 0b18 	vmov	d8, r0, r1
 800d30c:	464b      	mov	r3, r9
 800d30e:	4620      	mov	r0, r4
 800d310:	4629      	mov	r1, r5
 800d312:	f7f2 ff65 	bl	80001e0 <__aeabi_dsub>
 800d316:	4602      	mov	r2, r0
 800d318:	460b      	mov	r3, r1
 800d31a:	4630      	mov	r0, r6
 800d31c:	4639      	mov	r1, r7
 800d31e:	f7f2 ff5f 	bl	80001e0 <__aeabi_dsub>
 800d322:	a335      	add	r3, pc, #212	; (adr r3, 800d3f8 <__ieee754_pow+0x740>)
 800d324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d328:	f7f3 f912 	bl	8000550 <__aeabi_dmul>
 800d32c:	a334      	add	r3, pc, #208	; (adr r3, 800d400 <__ieee754_pow+0x748>)
 800d32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d332:	4606      	mov	r6, r0
 800d334:	460f      	mov	r7, r1
 800d336:	4620      	mov	r0, r4
 800d338:	4629      	mov	r1, r5
 800d33a:	f7f3 f909 	bl	8000550 <__aeabi_dmul>
 800d33e:	4602      	mov	r2, r0
 800d340:	460b      	mov	r3, r1
 800d342:	4630      	mov	r0, r6
 800d344:	4639      	mov	r1, r7
 800d346:	f7f2 ff4d 	bl	80001e4 <__adddf3>
 800d34a:	9a07      	ldr	r2, [sp, #28]
 800d34c:	4b37      	ldr	r3, [pc, #220]	; (800d42c <__ieee754_pow+0x774>)
 800d34e:	4413      	add	r3, r2
 800d350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d354:	f7f2 ff46 	bl	80001e4 <__adddf3>
 800d358:	4682      	mov	sl, r0
 800d35a:	9805      	ldr	r0, [sp, #20]
 800d35c:	468b      	mov	fp, r1
 800d35e:	f7f3 f88d 	bl	800047c <__aeabi_i2d>
 800d362:	9a07      	ldr	r2, [sp, #28]
 800d364:	4b32      	ldr	r3, [pc, #200]	; (800d430 <__ieee754_pow+0x778>)
 800d366:	4413      	add	r3, r2
 800d368:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d36c:	4606      	mov	r6, r0
 800d36e:	460f      	mov	r7, r1
 800d370:	4652      	mov	r2, sl
 800d372:	465b      	mov	r3, fp
 800d374:	ec51 0b18 	vmov	r0, r1, d8
 800d378:	f7f2 ff34 	bl	80001e4 <__adddf3>
 800d37c:	4642      	mov	r2, r8
 800d37e:	464b      	mov	r3, r9
 800d380:	f7f2 ff30 	bl	80001e4 <__adddf3>
 800d384:	4632      	mov	r2, r6
 800d386:	463b      	mov	r3, r7
 800d388:	f7f2 ff2c 	bl	80001e4 <__adddf3>
 800d38c:	2000      	movs	r0, #0
 800d38e:	4632      	mov	r2, r6
 800d390:	463b      	mov	r3, r7
 800d392:	4604      	mov	r4, r0
 800d394:	460d      	mov	r5, r1
 800d396:	f7f2 ff23 	bl	80001e0 <__aeabi_dsub>
 800d39a:	4642      	mov	r2, r8
 800d39c:	464b      	mov	r3, r9
 800d39e:	f7f2 ff1f 	bl	80001e0 <__aeabi_dsub>
 800d3a2:	ec53 2b18 	vmov	r2, r3, d8
 800d3a6:	f7f2 ff1b 	bl	80001e0 <__aeabi_dsub>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	4650      	mov	r0, sl
 800d3b0:	4659      	mov	r1, fp
 800d3b2:	e610      	b.n	800cfd6 <__ieee754_pow+0x31e>
 800d3b4:	2401      	movs	r4, #1
 800d3b6:	e6a1      	b.n	800d0fc <__ieee754_pow+0x444>
 800d3b8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d408 <__ieee754_pow+0x750>
 800d3bc:	e617      	b.n	800cfee <__ieee754_pow+0x336>
 800d3be:	bf00      	nop
 800d3c0:	4a454eef 	.word	0x4a454eef
 800d3c4:	3fca7e28 	.word	0x3fca7e28
 800d3c8:	93c9db65 	.word	0x93c9db65
 800d3cc:	3fcd864a 	.word	0x3fcd864a
 800d3d0:	a91d4101 	.word	0xa91d4101
 800d3d4:	3fd17460 	.word	0x3fd17460
 800d3d8:	518f264d 	.word	0x518f264d
 800d3dc:	3fd55555 	.word	0x3fd55555
 800d3e0:	db6fabff 	.word	0xdb6fabff
 800d3e4:	3fdb6db6 	.word	0x3fdb6db6
 800d3e8:	33333303 	.word	0x33333303
 800d3ec:	3fe33333 	.word	0x3fe33333
 800d3f0:	e0000000 	.word	0xe0000000
 800d3f4:	3feec709 	.word	0x3feec709
 800d3f8:	dc3a03fd 	.word	0xdc3a03fd
 800d3fc:	3feec709 	.word	0x3feec709
 800d400:	145b01f5 	.word	0x145b01f5
 800d404:	be3e2fe0 	.word	0xbe3e2fe0
 800d408:	00000000 	.word	0x00000000
 800d40c:	3ff00000 	.word	0x3ff00000
 800d410:	7ff00000 	.word	0x7ff00000
 800d414:	43400000 	.word	0x43400000
 800d418:	0003988e 	.word	0x0003988e
 800d41c:	000bb679 	.word	0x000bb679
 800d420:	0800e4a8 	.word	0x0800e4a8
 800d424:	3ff00000 	.word	0x3ff00000
 800d428:	40080000 	.word	0x40080000
 800d42c:	0800e4c8 	.word	0x0800e4c8
 800d430:	0800e4b8 	.word	0x0800e4b8
 800d434:	a3b5      	add	r3, pc, #724	; (adr r3, 800d70c <__ieee754_pow+0xa54>)
 800d436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43a:	4640      	mov	r0, r8
 800d43c:	4649      	mov	r1, r9
 800d43e:	f7f2 fed1 	bl	80001e4 <__adddf3>
 800d442:	4622      	mov	r2, r4
 800d444:	ec41 0b1a 	vmov	d10, r0, r1
 800d448:	462b      	mov	r3, r5
 800d44a:	4630      	mov	r0, r6
 800d44c:	4639      	mov	r1, r7
 800d44e:	f7f2 fec7 	bl	80001e0 <__aeabi_dsub>
 800d452:	4602      	mov	r2, r0
 800d454:	460b      	mov	r3, r1
 800d456:	ec51 0b1a 	vmov	r0, r1, d10
 800d45a:	f7f3 fb09 	bl	8000a70 <__aeabi_dcmpgt>
 800d45e:	2800      	cmp	r0, #0
 800d460:	f47f ae04 	bne.w	800d06c <__ieee754_pow+0x3b4>
 800d464:	4aa4      	ldr	r2, [pc, #656]	; (800d6f8 <__ieee754_pow+0xa40>)
 800d466:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d46a:	4293      	cmp	r3, r2
 800d46c:	f340 8108 	ble.w	800d680 <__ieee754_pow+0x9c8>
 800d470:	151b      	asrs	r3, r3, #20
 800d472:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d476:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d47a:	fa4a f303 	asr.w	r3, sl, r3
 800d47e:	445b      	add	r3, fp
 800d480:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d484:	4e9d      	ldr	r6, [pc, #628]	; (800d6fc <__ieee754_pow+0xa44>)
 800d486:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d48a:	4116      	asrs	r6, r2
 800d48c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d490:	2000      	movs	r0, #0
 800d492:	ea23 0106 	bic.w	r1, r3, r6
 800d496:	f1c2 0214 	rsb	r2, r2, #20
 800d49a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d49e:	fa4a fa02 	asr.w	sl, sl, r2
 800d4a2:	f1bb 0f00 	cmp.w	fp, #0
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	4629      	mov	r1, r5
 800d4ae:	bfb8      	it	lt
 800d4b0:	f1ca 0a00 	rsblt	sl, sl, #0
 800d4b4:	f7f2 fe94 	bl	80001e0 <__aeabi_dsub>
 800d4b8:	ec41 0b19 	vmov	d9, r0, r1
 800d4bc:	4642      	mov	r2, r8
 800d4be:	464b      	mov	r3, r9
 800d4c0:	ec51 0b19 	vmov	r0, r1, d9
 800d4c4:	f7f2 fe8e 	bl	80001e4 <__adddf3>
 800d4c8:	a37b      	add	r3, pc, #492	; (adr r3, 800d6b8 <__ieee754_pow+0xa00>)
 800d4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ce:	2000      	movs	r0, #0
 800d4d0:	4604      	mov	r4, r0
 800d4d2:	460d      	mov	r5, r1
 800d4d4:	f7f3 f83c 	bl	8000550 <__aeabi_dmul>
 800d4d8:	ec53 2b19 	vmov	r2, r3, d9
 800d4dc:	4606      	mov	r6, r0
 800d4de:	460f      	mov	r7, r1
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	4629      	mov	r1, r5
 800d4e4:	f7f2 fe7c 	bl	80001e0 <__aeabi_dsub>
 800d4e8:	4602      	mov	r2, r0
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	4640      	mov	r0, r8
 800d4ee:	4649      	mov	r1, r9
 800d4f0:	f7f2 fe76 	bl	80001e0 <__aeabi_dsub>
 800d4f4:	a372      	add	r3, pc, #456	; (adr r3, 800d6c0 <__ieee754_pow+0xa08>)
 800d4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fa:	f7f3 f829 	bl	8000550 <__aeabi_dmul>
 800d4fe:	a372      	add	r3, pc, #456	; (adr r3, 800d6c8 <__ieee754_pow+0xa10>)
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	4680      	mov	r8, r0
 800d506:	4689      	mov	r9, r1
 800d508:	4620      	mov	r0, r4
 800d50a:	4629      	mov	r1, r5
 800d50c:	f7f3 f820 	bl	8000550 <__aeabi_dmul>
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	4640      	mov	r0, r8
 800d516:	4649      	mov	r1, r9
 800d518:	f7f2 fe64 	bl	80001e4 <__adddf3>
 800d51c:	4604      	mov	r4, r0
 800d51e:	460d      	mov	r5, r1
 800d520:	4602      	mov	r2, r0
 800d522:	460b      	mov	r3, r1
 800d524:	4630      	mov	r0, r6
 800d526:	4639      	mov	r1, r7
 800d528:	f7f2 fe5c 	bl	80001e4 <__adddf3>
 800d52c:	4632      	mov	r2, r6
 800d52e:	463b      	mov	r3, r7
 800d530:	4680      	mov	r8, r0
 800d532:	4689      	mov	r9, r1
 800d534:	f7f2 fe54 	bl	80001e0 <__aeabi_dsub>
 800d538:	4602      	mov	r2, r0
 800d53a:	460b      	mov	r3, r1
 800d53c:	4620      	mov	r0, r4
 800d53e:	4629      	mov	r1, r5
 800d540:	f7f2 fe4e 	bl	80001e0 <__aeabi_dsub>
 800d544:	4642      	mov	r2, r8
 800d546:	4606      	mov	r6, r0
 800d548:	460f      	mov	r7, r1
 800d54a:	464b      	mov	r3, r9
 800d54c:	4640      	mov	r0, r8
 800d54e:	4649      	mov	r1, r9
 800d550:	f7f2 fffe 	bl	8000550 <__aeabi_dmul>
 800d554:	a35e      	add	r3, pc, #376	; (adr r3, 800d6d0 <__ieee754_pow+0xa18>)
 800d556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55a:	4604      	mov	r4, r0
 800d55c:	460d      	mov	r5, r1
 800d55e:	f7f2 fff7 	bl	8000550 <__aeabi_dmul>
 800d562:	a35d      	add	r3, pc, #372	; (adr r3, 800d6d8 <__ieee754_pow+0xa20>)
 800d564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d568:	f7f2 fe3a 	bl	80001e0 <__aeabi_dsub>
 800d56c:	4622      	mov	r2, r4
 800d56e:	462b      	mov	r3, r5
 800d570:	f7f2 ffee 	bl	8000550 <__aeabi_dmul>
 800d574:	a35a      	add	r3, pc, #360	; (adr r3, 800d6e0 <__ieee754_pow+0xa28>)
 800d576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57a:	f7f2 fe33 	bl	80001e4 <__adddf3>
 800d57e:	4622      	mov	r2, r4
 800d580:	462b      	mov	r3, r5
 800d582:	f7f2 ffe5 	bl	8000550 <__aeabi_dmul>
 800d586:	a358      	add	r3, pc, #352	; (adr r3, 800d6e8 <__ieee754_pow+0xa30>)
 800d588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58c:	f7f2 fe28 	bl	80001e0 <__aeabi_dsub>
 800d590:	4622      	mov	r2, r4
 800d592:	462b      	mov	r3, r5
 800d594:	f7f2 ffdc 	bl	8000550 <__aeabi_dmul>
 800d598:	a355      	add	r3, pc, #340	; (adr r3, 800d6f0 <__ieee754_pow+0xa38>)
 800d59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59e:	f7f2 fe21 	bl	80001e4 <__adddf3>
 800d5a2:	4622      	mov	r2, r4
 800d5a4:	462b      	mov	r3, r5
 800d5a6:	f7f2 ffd3 	bl	8000550 <__aeabi_dmul>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	4640      	mov	r0, r8
 800d5b0:	4649      	mov	r1, r9
 800d5b2:	f7f2 fe15 	bl	80001e0 <__aeabi_dsub>
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	460d      	mov	r5, r1
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	460b      	mov	r3, r1
 800d5be:	4640      	mov	r0, r8
 800d5c0:	4649      	mov	r1, r9
 800d5c2:	f7f2 ffc5 	bl	8000550 <__aeabi_dmul>
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	ec41 0b19 	vmov	d9, r0, r1
 800d5cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	4629      	mov	r1, r5
 800d5d4:	f7f2 fe04 	bl	80001e0 <__aeabi_dsub>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	460b      	mov	r3, r1
 800d5dc:	ec51 0b19 	vmov	r0, r1, d9
 800d5e0:	f7f3 f8e0 	bl	80007a4 <__aeabi_ddiv>
 800d5e4:	4632      	mov	r2, r6
 800d5e6:	4604      	mov	r4, r0
 800d5e8:	460d      	mov	r5, r1
 800d5ea:	463b      	mov	r3, r7
 800d5ec:	4640      	mov	r0, r8
 800d5ee:	4649      	mov	r1, r9
 800d5f0:	f7f2 ffae 	bl	8000550 <__aeabi_dmul>
 800d5f4:	4632      	mov	r2, r6
 800d5f6:	463b      	mov	r3, r7
 800d5f8:	f7f2 fdf4 	bl	80001e4 <__adddf3>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	460b      	mov	r3, r1
 800d600:	4620      	mov	r0, r4
 800d602:	4629      	mov	r1, r5
 800d604:	f7f2 fdec 	bl	80001e0 <__aeabi_dsub>
 800d608:	4642      	mov	r2, r8
 800d60a:	464b      	mov	r3, r9
 800d60c:	f7f2 fde8 	bl	80001e0 <__aeabi_dsub>
 800d610:	460b      	mov	r3, r1
 800d612:	4602      	mov	r2, r0
 800d614:	493a      	ldr	r1, [pc, #232]	; (800d700 <__ieee754_pow+0xa48>)
 800d616:	2000      	movs	r0, #0
 800d618:	f7f2 fde2 	bl	80001e0 <__aeabi_dsub>
 800d61c:	ec41 0b10 	vmov	d0, r0, r1
 800d620:	ee10 3a90 	vmov	r3, s1
 800d624:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d628:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d62c:	da2b      	bge.n	800d686 <__ieee754_pow+0x9ce>
 800d62e:	4650      	mov	r0, sl
 800d630:	f000 fdca 	bl	800e1c8 <scalbn>
 800d634:	ec51 0b10 	vmov	r0, r1, d0
 800d638:	ec53 2b18 	vmov	r2, r3, d8
 800d63c:	f7ff bbed 	b.w	800ce1a <__ieee754_pow+0x162>
 800d640:	4b30      	ldr	r3, [pc, #192]	; (800d704 <__ieee754_pow+0xa4c>)
 800d642:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d646:	429e      	cmp	r6, r3
 800d648:	f77f af0c 	ble.w	800d464 <__ieee754_pow+0x7ac>
 800d64c:	4b2e      	ldr	r3, [pc, #184]	; (800d708 <__ieee754_pow+0xa50>)
 800d64e:	440b      	add	r3, r1
 800d650:	4303      	orrs	r3, r0
 800d652:	d009      	beq.n	800d668 <__ieee754_pow+0x9b0>
 800d654:	ec51 0b18 	vmov	r0, r1, d8
 800d658:	2200      	movs	r2, #0
 800d65a:	2300      	movs	r3, #0
 800d65c:	f7f3 f9ea 	bl	8000a34 <__aeabi_dcmplt>
 800d660:	3800      	subs	r0, #0
 800d662:	bf18      	it	ne
 800d664:	2001      	movne	r0, #1
 800d666:	e447      	b.n	800cef8 <__ieee754_pow+0x240>
 800d668:	4622      	mov	r2, r4
 800d66a:	462b      	mov	r3, r5
 800d66c:	f7f2 fdb8 	bl	80001e0 <__aeabi_dsub>
 800d670:	4642      	mov	r2, r8
 800d672:	464b      	mov	r3, r9
 800d674:	f7f3 f9f2 	bl	8000a5c <__aeabi_dcmpge>
 800d678:	2800      	cmp	r0, #0
 800d67a:	f43f aef3 	beq.w	800d464 <__ieee754_pow+0x7ac>
 800d67e:	e7e9      	b.n	800d654 <__ieee754_pow+0x99c>
 800d680:	f04f 0a00 	mov.w	sl, #0
 800d684:	e71a      	b.n	800d4bc <__ieee754_pow+0x804>
 800d686:	ec51 0b10 	vmov	r0, r1, d0
 800d68a:	4619      	mov	r1, r3
 800d68c:	e7d4      	b.n	800d638 <__ieee754_pow+0x980>
 800d68e:	491c      	ldr	r1, [pc, #112]	; (800d700 <__ieee754_pow+0xa48>)
 800d690:	2000      	movs	r0, #0
 800d692:	f7ff bb30 	b.w	800ccf6 <__ieee754_pow+0x3e>
 800d696:	2000      	movs	r0, #0
 800d698:	2100      	movs	r1, #0
 800d69a:	f7ff bb2c 	b.w	800ccf6 <__ieee754_pow+0x3e>
 800d69e:	4630      	mov	r0, r6
 800d6a0:	4639      	mov	r1, r7
 800d6a2:	f7ff bb28 	b.w	800ccf6 <__ieee754_pow+0x3e>
 800d6a6:	9204      	str	r2, [sp, #16]
 800d6a8:	f7ff bb7a 	b.w	800cda0 <__ieee754_pow+0xe8>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f7ff bb64 	b.w	800cd7a <__ieee754_pow+0xc2>
 800d6b2:	bf00      	nop
 800d6b4:	f3af 8000 	nop.w
 800d6b8:	00000000 	.word	0x00000000
 800d6bc:	3fe62e43 	.word	0x3fe62e43
 800d6c0:	fefa39ef 	.word	0xfefa39ef
 800d6c4:	3fe62e42 	.word	0x3fe62e42
 800d6c8:	0ca86c39 	.word	0x0ca86c39
 800d6cc:	be205c61 	.word	0xbe205c61
 800d6d0:	72bea4d0 	.word	0x72bea4d0
 800d6d4:	3e663769 	.word	0x3e663769
 800d6d8:	c5d26bf1 	.word	0xc5d26bf1
 800d6dc:	3ebbbd41 	.word	0x3ebbbd41
 800d6e0:	af25de2c 	.word	0xaf25de2c
 800d6e4:	3f11566a 	.word	0x3f11566a
 800d6e8:	16bebd93 	.word	0x16bebd93
 800d6ec:	3f66c16c 	.word	0x3f66c16c
 800d6f0:	5555553e 	.word	0x5555553e
 800d6f4:	3fc55555 	.word	0x3fc55555
 800d6f8:	3fe00000 	.word	0x3fe00000
 800d6fc:	000fffff 	.word	0x000fffff
 800d700:	3ff00000 	.word	0x3ff00000
 800d704:	4090cbff 	.word	0x4090cbff
 800d708:	3f6f3400 	.word	0x3f6f3400
 800d70c:	652b82fe 	.word	0x652b82fe
 800d710:	3c971547 	.word	0x3c971547

0800d714 <__ieee754_sqrt>:
 800d714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d718:	ec55 4b10 	vmov	r4, r5, d0
 800d71c:	4e55      	ldr	r6, [pc, #340]	; (800d874 <__ieee754_sqrt+0x160>)
 800d71e:	43ae      	bics	r6, r5
 800d720:	ee10 0a10 	vmov	r0, s0
 800d724:	ee10 3a10 	vmov	r3, s0
 800d728:	462a      	mov	r2, r5
 800d72a:	4629      	mov	r1, r5
 800d72c:	d110      	bne.n	800d750 <__ieee754_sqrt+0x3c>
 800d72e:	ee10 2a10 	vmov	r2, s0
 800d732:	462b      	mov	r3, r5
 800d734:	f7f2 ff0c 	bl	8000550 <__aeabi_dmul>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	4620      	mov	r0, r4
 800d73e:	4629      	mov	r1, r5
 800d740:	f7f2 fd50 	bl	80001e4 <__adddf3>
 800d744:	4604      	mov	r4, r0
 800d746:	460d      	mov	r5, r1
 800d748:	ec45 4b10 	vmov	d0, r4, r5
 800d74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d750:	2d00      	cmp	r5, #0
 800d752:	dc10      	bgt.n	800d776 <__ieee754_sqrt+0x62>
 800d754:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d758:	4330      	orrs	r0, r6
 800d75a:	d0f5      	beq.n	800d748 <__ieee754_sqrt+0x34>
 800d75c:	b15d      	cbz	r5, 800d776 <__ieee754_sqrt+0x62>
 800d75e:	ee10 2a10 	vmov	r2, s0
 800d762:	462b      	mov	r3, r5
 800d764:	ee10 0a10 	vmov	r0, s0
 800d768:	f7f2 fd3a 	bl	80001e0 <__aeabi_dsub>
 800d76c:	4602      	mov	r2, r0
 800d76e:	460b      	mov	r3, r1
 800d770:	f7f3 f818 	bl	80007a4 <__aeabi_ddiv>
 800d774:	e7e6      	b.n	800d744 <__ieee754_sqrt+0x30>
 800d776:	1512      	asrs	r2, r2, #20
 800d778:	d074      	beq.n	800d864 <__ieee754_sqrt+0x150>
 800d77a:	07d4      	lsls	r4, r2, #31
 800d77c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d780:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d784:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d788:	bf5e      	ittt	pl
 800d78a:	0fda      	lsrpl	r2, r3, #31
 800d78c:	005b      	lslpl	r3, r3, #1
 800d78e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d792:	2400      	movs	r4, #0
 800d794:	0fda      	lsrs	r2, r3, #31
 800d796:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d79a:	107f      	asrs	r7, r7, #1
 800d79c:	005b      	lsls	r3, r3, #1
 800d79e:	2516      	movs	r5, #22
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d7a6:	1886      	adds	r6, r0, r2
 800d7a8:	428e      	cmp	r6, r1
 800d7aa:	bfde      	ittt	le
 800d7ac:	1b89      	suble	r1, r1, r6
 800d7ae:	18b0      	addle	r0, r6, r2
 800d7b0:	18a4      	addle	r4, r4, r2
 800d7b2:	0049      	lsls	r1, r1, #1
 800d7b4:	3d01      	subs	r5, #1
 800d7b6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d7ba:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d7be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d7c2:	d1f0      	bne.n	800d7a6 <__ieee754_sqrt+0x92>
 800d7c4:	462a      	mov	r2, r5
 800d7c6:	f04f 0e20 	mov.w	lr, #32
 800d7ca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d7ce:	4281      	cmp	r1, r0
 800d7d0:	eb06 0c05 	add.w	ip, r6, r5
 800d7d4:	dc02      	bgt.n	800d7dc <__ieee754_sqrt+0xc8>
 800d7d6:	d113      	bne.n	800d800 <__ieee754_sqrt+0xec>
 800d7d8:	459c      	cmp	ip, r3
 800d7da:	d811      	bhi.n	800d800 <__ieee754_sqrt+0xec>
 800d7dc:	f1bc 0f00 	cmp.w	ip, #0
 800d7e0:	eb0c 0506 	add.w	r5, ip, r6
 800d7e4:	da43      	bge.n	800d86e <__ieee754_sqrt+0x15a>
 800d7e6:	2d00      	cmp	r5, #0
 800d7e8:	db41      	blt.n	800d86e <__ieee754_sqrt+0x15a>
 800d7ea:	f100 0801 	add.w	r8, r0, #1
 800d7ee:	1a09      	subs	r1, r1, r0
 800d7f0:	459c      	cmp	ip, r3
 800d7f2:	bf88      	it	hi
 800d7f4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d7f8:	eba3 030c 	sub.w	r3, r3, ip
 800d7fc:	4432      	add	r2, r6
 800d7fe:	4640      	mov	r0, r8
 800d800:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d804:	f1be 0e01 	subs.w	lr, lr, #1
 800d808:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d80c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d810:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d814:	d1db      	bne.n	800d7ce <__ieee754_sqrt+0xba>
 800d816:	430b      	orrs	r3, r1
 800d818:	d006      	beq.n	800d828 <__ieee754_sqrt+0x114>
 800d81a:	1c50      	adds	r0, r2, #1
 800d81c:	bf13      	iteet	ne
 800d81e:	3201      	addne	r2, #1
 800d820:	3401      	addeq	r4, #1
 800d822:	4672      	moveq	r2, lr
 800d824:	f022 0201 	bicne.w	r2, r2, #1
 800d828:	1063      	asrs	r3, r4, #1
 800d82a:	0852      	lsrs	r2, r2, #1
 800d82c:	07e1      	lsls	r1, r4, #31
 800d82e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d832:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d836:	bf48      	it	mi
 800d838:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d83c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d840:	4614      	mov	r4, r2
 800d842:	e781      	b.n	800d748 <__ieee754_sqrt+0x34>
 800d844:	0ad9      	lsrs	r1, r3, #11
 800d846:	3815      	subs	r0, #21
 800d848:	055b      	lsls	r3, r3, #21
 800d84a:	2900      	cmp	r1, #0
 800d84c:	d0fa      	beq.n	800d844 <__ieee754_sqrt+0x130>
 800d84e:	02cd      	lsls	r5, r1, #11
 800d850:	d50a      	bpl.n	800d868 <__ieee754_sqrt+0x154>
 800d852:	f1c2 0420 	rsb	r4, r2, #32
 800d856:	fa23 f404 	lsr.w	r4, r3, r4
 800d85a:	1e55      	subs	r5, r2, #1
 800d85c:	4093      	lsls	r3, r2
 800d85e:	4321      	orrs	r1, r4
 800d860:	1b42      	subs	r2, r0, r5
 800d862:	e78a      	b.n	800d77a <__ieee754_sqrt+0x66>
 800d864:	4610      	mov	r0, r2
 800d866:	e7f0      	b.n	800d84a <__ieee754_sqrt+0x136>
 800d868:	0049      	lsls	r1, r1, #1
 800d86a:	3201      	adds	r2, #1
 800d86c:	e7ef      	b.n	800d84e <__ieee754_sqrt+0x13a>
 800d86e:	4680      	mov	r8, r0
 800d870:	e7bd      	b.n	800d7ee <__ieee754_sqrt+0xda>
 800d872:	bf00      	nop
 800d874:	7ff00000 	.word	0x7ff00000

0800d878 <__ieee754_rem_pio2f>:
 800d878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d87a:	ee10 6a10 	vmov	r6, s0
 800d87e:	4b8e      	ldr	r3, [pc, #568]	; (800dab8 <__ieee754_rem_pio2f+0x240>)
 800d880:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800d884:	429d      	cmp	r5, r3
 800d886:	b087      	sub	sp, #28
 800d888:	eef0 7a40 	vmov.f32	s15, s0
 800d88c:	4604      	mov	r4, r0
 800d88e:	dc05      	bgt.n	800d89c <__ieee754_rem_pio2f+0x24>
 800d890:	2300      	movs	r3, #0
 800d892:	ed80 0a00 	vstr	s0, [r0]
 800d896:	6043      	str	r3, [r0, #4]
 800d898:	2000      	movs	r0, #0
 800d89a:	e01a      	b.n	800d8d2 <__ieee754_rem_pio2f+0x5a>
 800d89c:	4b87      	ldr	r3, [pc, #540]	; (800dabc <__ieee754_rem_pio2f+0x244>)
 800d89e:	429d      	cmp	r5, r3
 800d8a0:	dc46      	bgt.n	800d930 <__ieee754_rem_pio2f+0xb8>
 800d8a2:	2e00      	cmp	r6, #0
 800d8a4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800dac0 <__ieee754_rem_pio2f+0x248>
 800d8a8:	4b86      	ldr	r3, [pc, #536]	; (800dac4 <__ieee754_rem_pio2f+0x24c>)
 800d8aa:	f025 050f 	bic.w	r5, r5, #15
 800d8ae:	dd1f      	ble.n	800d8f0 <__ieee754_rem_pio2f+0x78>
 800d8b0:	429d      	cmp	r5, r3
 800d8b2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d8b6:	d00e      	beq.n	800d8d6 <__ieee754_rem_pio2f+0x5e>
 800d8b8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800dac8 <__ieee754_rem_pio2f+0x250>
 800d8bc:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800d8c0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d8c4:	ed80 0a00 	vstr	s0, [r0]
 800d8c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d8cc:	2001      	movs	r0, #1
 800d8ce:	edc4 7a01 	vstr	s15, [r4, #4]
 800d8d2:	b007      	add	sp, #28
 800d8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8d6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800dacc <__ieee754_rem_pio2f+0x254>
 800d8da:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800dad0 <__ieee754_rem_pio2f+0x258>
 800d8de:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d8e2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d8e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d8ea:	edc0 6a00 	vstr	s13, [r0]
 800d8ee:	e7eb      	b.n	800d8c8 <__ieee754_rem_pio2f+0x50>
 800d8f0:	429d      	cmp	r5, r3
 800d8f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d8f6:	d00e      	beq.n	800d916 <__ieee754_rem_pio2f+0x9e>
 800d8f8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800dac8 <__ieee754_rem_pio2f+0x250>
 800d8fc:	ee37 0a87 	vadd.f32	s0, s15, s14
 800d900:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d904:	ed80 0a00 	vstr	s0, [r0]
 800d908:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d90c:	f04f 30ff 	mov.w	r0, #4294967295
 800d910:	edc4 7a01 	vstr	s15, [r4, #4]
 800d914:	e7dd      	b.n	800d8d2 <__ieee754_rem_pio2f+0x5a>
 800d916:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800dacc <__ieee754_rem_pio2f+0x254>
 800d91a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800dad0 <__ieee754_rem_pio2f+0x258>
 800d91e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d922:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d926:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d92a:	edc0 6a00 	vstr	s13, [r0]
 800d92e:	e7eb      	b.n	800d908 <__ieee754_rem_pio2f+0x90>
 800d930:	4b68      	ldr	r3, [pc, #416]	; (800dad4 <__ieee754_rem_pio2f+0x25c>)
 800d932:	429d      	cmp	r5, r3
 800d934:	dc72      	bgt.n	800da1c <__ieee754_rem_pio2f+0x1a4>
 800d936:	f000 fccd 	bl	800e2d4 <fabsf>
 800d93a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800dad8 <__ieee754_rem_pio2f+0x260>
 800d93e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d942:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d946:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d94a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d94e:	ee17 0a90 	vmov	r0, s15
 800d952:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800dac0 <__ieee754_rem_pio2f+0x248>
 800d956:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d95a:	281f      	cmp	r0, #31
 800d95c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800dac8 <__ieee754_rem_pio2f+0x250>
 800d960:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d964:	eeb1 6a47 	vneg.f32	s12, s14
 800d968:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d96c:	ee16 2a90 	vmov	r2, s13
 800d970:	dc1c      	bgt.n	800d9ac <__ieee754_rem_pio2f+0x134>
 800d972:	495a      	ldr	r1, [pc, #360]	; (800dadc <__ieee754_rem_pio2f+0x264>)
 800d974:	1e47      	subs	r7, r0, #1
 800d976:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800d97a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800d97e:	428b      	cmp	r3, r1
 800d980:	d014      	beq.n	800d9ac <__ieee754_rem_pio2f+0x134>
 800d982:	6022      	str	r2, [r4, #0]
 800d984:	ed94 7a00 	vldr	s14, [r4]
 800d988:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d98c:	2e00      	cmp	r6, #0
 800d98e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d992:	ed84 0a01 	vstr	s0, [r4, #4]
 800d996:	da9c      	bge.n	800d8d2 <__ieee754_rem_pio2f+0x5a>
 800d998:	eeb1 7a47 	vneg.f32	s14, s14
 800d99c:	eeb1 0a40 	vneg.f32	s0, s0
 800d9a0:	ed84 7a00 	vstr	s14, [r4]
 800d9a4:	ed84 0a01 	vstr	s0, [r4, #4]
 800d9a8:	4240      	negs	r0, r0
 800d9aa:	e792      	b.n	800d8d2 <__ieee754_rem_pio2f+0x5a>
 800d9ac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d9b0:	15eb      	asrs	r3, r5, #23
 800d9b2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800d9b6:	2d08      	cmp	r5, #8
 800d9b8:	dde3      	ble.n	800d982 <__ieee754_rem_pio2f+0x10a>
 800d9ba:	eddf 7a44 	vldr	s15, [pc, #272]	; 800dacc <__ieee754_rem_pio2f+0x254>
 800d9be:	eddf 5a44 	vldr	s11, [pc, #272]	; 800dad0 <__ieee754_rem_pio2f+0x258>
 800d9c2:	eef0 6a40 	vmov.f32	s13, s0
 800d9c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d9ca:	ee30 0a66 	vsub.f32	s0, s0, s13
 800d9ce:	eea6 0a27 	vfma.f32	s0, s12, s15
 800d9d2:	eef0 7a40 	vmov.f32	s15, s0
 800d9d6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d9da:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d9de:	ee15 2a90 	vmov	r2, s11
 800d9e2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d9e6:	1a5b      	subs	r3, r3, r1
 800d9e8:	2b19      	cmp	r3, #25
 800d9ea:	dc04      	bgt.n	800d9f6 <__ieee754_rem_pio2f+0x17e>
 800d9ec:	edc4 5a00 	vstr	s11, [r4]
 800d9f0:	eeb0 0a66 	vmov.f32	s0, s13
 800d9f4:	e7c6      	b.n	800d984 <__ieee754_rem_pio2f+0x10c>
 800d9f6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800dae0 <__ieee754_rem_pio2f+0x268>
 800d9fa:	eeb0 0a66 	vmov.f32	s0, s13
 800d9fe:	eea6 0a25 	vfma.f32	s0, s12, s11
 800da02:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800da06:	eddf 6a37 	vldr	s13, [pc, #220]	; 800dae4 <__ieee754_rem_pio2f+0x26c>
 800da0a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800da0e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800da12:	ee30 7a67 	vsub.f32	s14, s0, s15
 800da16:	ed84 7a00 	vstr	s14, [r4]
 800da1a:	e7b3      	b.n	800d984 <__ieee754_rem_pio2f+0x10c>
 800da1c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800da20:	db06      	blt.n	800da30 <__ieee754_rem_pio2f+0x1b8>
 800da22:	ee70 7a40 	vsub.f32	s15, s0, s0
 800da26:	edc0 7a01 	vstr	s15, [r0, #4]
 800da2a:	edc0 7a00 	vstr	s15, [r0]
 800da2e:	e733      	b.n	800d898 <__ieee754_rem_pio2f+0x20>
 800da30:	15ea      	asrs	r2, r5, #23
 800da32:	3a86      	subs	r2, #134	; 0x86
 800da34:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800da38:	ee07 3a90 	vmov	s15, r3
 800da3c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800da40:	eddf 6a29 	vldr	s13, [pc, #164]	; 800dae8 <__ieee754_rem_pio2f+0x270>
 800da44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800da48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da4c:	ed8d 7a03 	vstr	s14, [sp, #12]
 800da50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800da54:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800da58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800da5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da60:	ed8d 7a04 	vstr	s14, [sp, #16]
 800da64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800da68:	eef5 7a40 	vcmp.f32	s15, #0.0
 800da6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da70:	edcd 7a05 	vstr	s15, [sp, #20]
 800da74:	d11e      	bne.n	800dab4 <__ieee754_rem_pio2f+0x23c>
 800da76:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800da7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da7e:	bf14      	ite	ne
 800da80:	2302      	movne	r3, #2
 800da82:	2301      	moveq	r3, #1
 800da84:	4919      	ldr	r1, [pc, #100]	; (800daec <__ieee754_rem_pio2f+0x274>)
 800da86:	9101      	str	r1, [sp, #4]
 800da88:	2102      	movs	r1, #2
 800da8a:	9100      	str	r1, [sp, #0]
 800da8c:	a803      	add	r0, sp, #12
 800da8e:	4621      	mov	r1, r4
 800da90:	f000 f88e 	bl	800dbb0 <__kernel_rem_pio2f>
 800da94:	2e00      	cmp	r6, #0
 800da96:	f6bf af1c 	bge.w	800d8d2 <__ieee754_rem_pio2f+0x5a>
 800da9a:	edd4 7a00 	vldr	s15, [r4]
 800da9e:	eef1 7a67 	vneg.f32	s15, s15
 800daa2:	edc4 7a00 	vstr	s15, [r4]
 800daa6:	edd4 7a01 	vldr	s15, [r4, #4]
 800daaa:	eef1 7a67 	vneg.f32	s15, s15
 800daae:	edc4 7a01 	vstr	s15, [r4, #4]
 800dab2:	e779      	b.n	800d9a8 <__ieee754_rem_pio2f+0x130>
 800dab4:	2303      	movs	r3, #3
 800dab6:	e7e5      	b.n	800da84 <__ieee754_rem_pio2f+0x20c>
 800dab8:	3f490fd8 	.word	0x3f490fd8
 800dabc:	4016cbe3 	.word	0x4016cbe3
 800dac0:	3fc90f80 	.word	0x3fc90f80
 800dac4:	3fc90fd0 	.word	0x3fc90fd0
 800dac8:	37354443 	.word	0x37354443
 800dacc:	37354400 	.word	0x37354400
 800dad0:	2e85a308 	.word	0x2e85a308
 800dad4:	43490f80 	.word	0x43490f80
 800dad8:	3f22f984 	.word	0x3f22f984
 800dadc:	0800e4d8 	.word	0x0800e4d8
 800dae0:	2e85a300 	.word	0x2e85a300
 800dae4:	248d3132 	.word	0x248d3132
 800dae8:	43800000 	.word	0x43800000
 800daec:	0800e558 	.word	0x0800e558

0800daf0 <__kernel_cosf>:
 800daf0:	ee10 3a10 	vmov	r3, s0
 800daf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800daf8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800dafc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800db00:	da05      	bge.n	800db0e <__kernel_cosf+0x1e>
 800db02:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800db06:	ee17 2a90 	vmov	r2, s15
 800db0a:	2a00      	cmp	r2, #0
 800db0c:	d03d      	beq.n	800db8a <__kernel_cosf+0x9a>
 800db0e:	ee60 5a00 	vmul.f32	s11, s0, s0
 800db12:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800db90 <__kernel_cosf+0xa0>
 800db16:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800db94 <__kernel_cosf+0xa4>
 800db1a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800db98 <__kernel_cosf+0xa8>
 800db1e:	4a1f      	ldr	r2, [pc, #124]	; (800db9c <__kernel_cosf+0xac>)
 800db20:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800db24:	4293      	cmp	r3, r2
 800db26:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800dba0 <__kernel_cosf+0xb0>
 800db2a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800db2e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800dba4 <__kernel_cosf+0xb4>
 800db32:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800db36:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800dba8 <__kernel_cosf+0xb8>
 800db3a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800db3e:	eeb0 7a66 	vmov.f32	s14, s13
 800db42:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800db46:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800db4a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800db4e:	ee67 6a25 	vmul.f32	s13, s14, s11
 800db52:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800db56:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800db5a:	dc04      	bgt.n	800db66 <__kernel_cosf+0x76>
 800db5c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800db60:	ee36 0a47 	vsub.f32	s0, s12, s14
 800db64:	4770      	bx	lr
 800db66:	4a11      	ldr	r2, [pc, #68]	; (800dbac <__kernel_cosf+0xbc>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	bfda      	itte	le
 800db6c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800db70:	ee06 3a90 	vmovle	s13, r3
 800db74:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800db78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800db7c:	ee36 0a66 	vsub.f32	s0, s12, s13
 800db80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db84:	ee30 0a67 	vsub.f32	s0, s0, s15
 800db88:	4770      	bx	lr
 800db8a:	eeb0 0a46 	vmov.f32	s0, s12
 800db8e:	4770      	bx	lr
 800db90:	ad47d74e 	.word	0xad47d74e
 800db94:	310f74f6 	.word	0x310f74f6
 800db98:	3d2aaaab 	.word	0x3d2aaaab
 800db9c:	3e999999 	.word	0x3e999999
 800dba0:	b493f27c 	.word	0xb493f27c
 800dba4:	37d00d01 	.word	0x37d00d01
 800dba8:	bab60b61 	.word	0xbab60b61
 800dbac:	3f480000 	.word	0x3f480000

0800dbb0 <__kernel_rem_pio2f>:
 800dbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb4:	ed2d 8b04 	vpush	{d8-d9}
 800dbb8:	b0d9      	sub	sp, #356	; 0x164
 800dbba:	4688      	mov	r8, r1
 800dbbc:	9002      	str	r0, [sp, #8]
 800dbbe:	49bb      	ldr	r1, [pc, #748]	; (800deac <__kernel_rem_pio2f+0x2fc>)
 800dbc0:	9866      	ldr	r0, [sp, #408]	; 0x198
 800dbc2:	9301      	str	r3, [sp, #4]
 800dbc4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800dbc8:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800dbcc:	1e59      	subs	r1, r3, #1
 800dbce:	1d13      	adds	r3, r2, #4
 800dbd0:	db27      	blt.n	800dc22 <__kernel_rem_pio2f+0x72>
 800dbd2:	f1b2 0b03 	subs.w	fp, r2, #3
 800dbd6:	bf48      	it	mi
 800dbd8:	f102 0b04 	addmi.w	fp, r2, #4
 800dbdc:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800dbe0:	1c45      	adds	r5, r0, #1
 800dbe2:	00ec      	lsls	r4, r5, #3
 800dbe4:	1a47      	subs	r7, r0, r1
 800dbe6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800debc <__kernel_rem_pio2f+0x30c>
 800dbea:	9403      	str	r4, [sp, #12]
 800dbec:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800dbf0:	eb0a 0c01 	add.w	ip, sl, r1
 800dbf4:	ae1c      	add	r6, sp, #112	; 0x70
 800dbf6:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800dbfa:	2400      	movs	r4, #0
 800dbfc:	4564      	cmp	r4, ip
 800dbfe:	dd12      	ble.n	800dc26 <__kernel_rem_pio2f+0x76>
 800dc00:	9b01      	ldr	r3, [sp, #4]
 800dc02:	ac1c      	add	r4, sp, #112	; 0x70
 800dc04:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800dc08:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800dc0c:	f04f 0c00 	mov.w	ip, #0
 800dc10:	45d4      	cmp	ip, sl
 800dc12:	dc27      	bgt.n	800dc64 <__kernel_rem_pio2f+0xb4>
 800dc14:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800dc18:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800debc <__kernel_rem_pio2f+0x30c>
 800dc1c:	4627      	mov	r7, r4
 800dc1e:	2600      	movs	r6, #0
 800dc20:	e016      	b.n	800dc50 <__kernel_rem_pio2f+0xa0>
 800dc22:	2000      	movs	r0, #0
 800dc24:	e7dc      	b.n	800dbe0 <__kernel_rem_pio2f+0x30>
 800dc26:	42e7      	cmn	r7, r4
 800dc28:	bf5d      	ittte	pl
 800dc2a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800dc2e:	ee07 3a90 	vmovpl	s15, r3
 800dc32:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800dc36:	eef0 7a47 	vmovmi.f32	s15, s14
 800dc3a:	ece6 7a01 	vstmia	r6!, {s15}
 800dc3e:	3401      	adds	r4, #1
 800dc40:	e7dc      	b.n	800dbfc <__kernel_rem_pio2f+0x4c>
 800dc42:	ecf9 6a01 	vldmia	r9!, {s13}
 800dc46:	ed97 7a00 	vldr	s14, [r7]
 800dc4a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dc4e:	3601      	adds	r6, #1
 800dc50:	428e      	cmp	r6, r1
 800dc52:	f1a7 0704 	sub.w	r7, r7, #4
 800dc56:	ddf4      	ble.n	800dc42 <__kernel_rem_pio2f+0x92>
 800dc58:	eceb 7a01 	vstmia	fp!, {s15}
 800dc5c:	f10c 0c01 	add.w	ip, ip, #1
 800dc60:	3404      	adds	r4, #4
 800dc62:	e7d5      	b.n	800dc10 <__kernel_rem_pio2f+0x60>
 800dc64:	ab08      	add	r3, sp, #32
 800dc66:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800dc6a:	eddf 8a93 	vldr	s17, [pc, #588]	; 800deb8 <__kernel_rem_pio2f+0x308>
 800dc6e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800deb4 <__kernel_rem_pio2f+0x304>
 800dc72:	9304      	str	r3, [sp, #16]
 800dc74:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800dc78:	4656      	mov	r6, sl
 800dc7a:	00b3      	lsls	r3, r6, #2
 800dc7c:	9305      	str	r3, [sp, #20]
 800dc7e:	ab58      	add	r3, sp, #352	; 0x160
 800dc80:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800dc84:	ac08      	add	r4, sp, #32
 800dc86:	ab44      	add	r3, sp, #272	; 0x110
 800dc88:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800dc8c:	46a4      	mov	ip, r4
 800dc8e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800dc92:	4637      	mov	r7, r6
 800dc94:	2f00      	cmp	r7, #0
 800dc96:	f1a0 0004 	sub.w	r0, r0, #4
 800dc9a:	dc4f      	bgt.n	800dd3c <__kernel_rem_pio2f+0x18c>
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800dca2:	f000 fb61 	bl	800e368 <scalbnf>
 800dca6:	eeb0 8a40 	vmov.f32	s16, s0
 800dcaa:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800dcae:	ee28 0a00 	vmul.f32	s0, s16, s0
 800dcb2:	f000 fb17 	bl	800e2e4 <floorf>
 800dcb6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800dcba:	eea0 8a67 	vfms.f32	s16, s0, s15
 800dcbe:	2d00      	cmp	r5, #0
 800dcc0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800dcc4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800dcc8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800dccc:	ee17 9a90 	vmov	r9, s15
 800dcd0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800dcd4:	dd44      	ble.n	800dd60 <__kernel_rem_pio2f+0x1b0>
 800dcd6:	f106 3cff 	add.w	ip, r6, #4294967295
 800dcda:	ab08      	add	r3, sp, #32
 800dcdc:	f1c5 0e08 	rsb	lr, r5, #8
 800dce0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800dce4:	fa47 f00e 	asr.w	r0, r7, lr
 800dce8:	4481      	add	r9, r0
 800dcea:	fa00 f00e 	lsl.w	r0, r0, lr
 800dcee:	1a3f      	subs	r7, r7, r0
 800dcf0:	f1c5 0007 	rsb	r0, r5, #7
 800dcf4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800dcf8:	4107      	asrs	r7, r0
 800dcfa:	2f00      	cmp	r7, #0
 800dcfc:	dd3f      	ble.n	800dd7e <__kernel_rem_pio2f+0x1ce>
 800dcfe:	f04f 0e00 	mov.w	lr, #0
 800dd02:	f109 0901 	add.w	r9, r9, #1
 800dd06:	4673      	mov	r3, lr
 800dd08:	4576      	cmp	r6, lr
 800dd0a:	dc6b      	bgt.n	800dde4 <__kernel_rem_pio2f+0x234>
 800dd0c:	2d00      	cmp	r5, #0
 800dd0e:	dd04      	ble.n	800dd1a <__kernel_rem_pio2f+0x16a>
 800dd10:	2d01      	cmp	r5, #1
 800dd12:	d078      	beq.n	800de06 <__kernel_rem_pio2f+0x256>
 800dd14:	2d02      	cmp	r5, #2
 800dd16:	f000 8081 	beq.w	800de1c <__kernel_rem_pio2f+0x26c>
 800dd1a:	2f02      	cmp	r7, #2
 800dd1c:	d12f      	bne.n	800dd7e <__kernel_rem_pio2f+0x1ce>
 800dd1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800dd22:	ee30 8a48 	vsub.f32	s16, s0, s16
 800dd26:	b353      	cbz	r3, 800dd7e <__kernel_rem_pio2f+0x1ce>
 800dd28:	4628      	mov	r0, r5
 800dd2a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800dd2e:	f000 fb1b 	bl	800e368 <scalbnf>
 800dd32:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800dd36:	ee38 8a40 	vsub.f32	s16, s16, s0
 800dd3a:	e020      	b.n	800dd7e <__kernel_rem_pio2f+0x1ce>
 800dd3c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800dd40:	3f01      	subs	r7, #1
 800dd42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd4a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800dd4e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dd52:	ecac 0a01 	vstmia	ip!, {s0}
 800dd56:	ed90 0a00 	vldr	s0, [r0]
 800dd5a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800dd5e:	e799      	b.n	800dc94 <__kernel_rem_pio2f+0xe4>
 800dd60:	d105      	bne.n	800dd6e <__kernel_rem_pio2f+0x1be>
 800dd62:	1e70      	subs	r0, r6, #1
 800dd64:	ab08      	add	r3, sp, #32
 800dd66:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800dd6a:	11ff      	asrs	r7, r7, #7
 800dd6c:	e7c5      	b.n	800dcfa <__kernel_rem_pio2f+0x14a>
 800dd6e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800dd72:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800dd76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd7a:	da31      	bge.n	800dde0 <__kernel_rem_pio2f+0x230>
 800dd7c:	2700      	movs	r7, #0
 800dd7e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800dd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd86:	f040 809b 	bne.w	800dec0 <__kernel_rem_pio2f+0x310>
 800dd8a:	1e74      	subs	r4, r6, #1
 800dd8c:	46a4      	mov	ip, r4
 800dd8e:	2000      	movs	r0, #0
 800dd90:	45d4      	cmp	ip, sl
 800dd92:	da4a      	bge.n	800de2a <__kernel_rem_pio2f+0x27a>
 800dd94:	2800      	cmp	r0, #0
 800dd96:	d07a      	beq.n	800de8e <__kernel_rem_pio2f+0x2de>
 800dd98:	ab08      	add	r3, sp, #32
 800dd9a:	3d08      	subs	r5, #8
 800dd9c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	f000 8081 	beq.w	800dea8 <__kernel_rem_pio2f+0x2f8>
 800dda6:	4628      	mov	r0, r5
 800dda8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ddac:	00a5      	lsls	r5, r4, #2
 800ddae:	f000 fadb 	bl	800e368 <scalbnf>
 800ddb2:	aa44      	add	r2, sp, #272	; 0x110
 800ddb4:	1d2b      	adds	r3, r5, #4
 800ddb6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800deb8 <__kernel_rem_pio2f+0x308>
 800ddba:	18d1      	adds	r1, r2, r3
 800ddbc:	4622      	mov	r2, r4
 800ddbe:	2a00      	cmp	r2, #0
 800ddc0:	f280 80ae 	bge.w	800df20 <__kernel_rem_pio2f+0x370>
 800ddc4:	4622      	mov	r2, r4
 800ddc6:	2a00      	cmp	r2, #0
 800ddc8:	f2c0 80cc 	blt.w	800df64 <__kernel_rem_pio2f+0x3b4>
 800ddcc:	a944      	add	r1, sp, #272	; 0x110
 800ddce:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800ddd2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800deb0 <__kernel_rem_pio2f+0x300>
 800ddd6:	eddf 7a39 	vldr	s15, [pc, #228]	; 800debc <__kernel_rem_pio2f+0x30c>
 800ddda:	2000      	movs	r0, #0
 800dddc:	1aa1      	subs	r1, r4, r2
 800ddde:	e0b6      	b.n	800df4e <__kernel_rem_pio2f+0x39e>
 800dde0:	2702      	movs	r7, #2
 800dde2:	e78c      	b.n	800dcfe <__kernel_rem_pio2f+0x14e>
 800dde4:	6820      	ldr	r0, [r4, #0]
 800dde6:	b94b      	cbnz	r3, 800ddfc <__kernel_rem_pio2f+0x24c>
 800dde8:	b118      	cbz	r0, 800ddf2 <__kernel_rem_pio2f+0x242>
 800ddea:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800ddee:	6020      	str	r0, [r4, #0]
 800ddf0:	2001      	movs	r0, #1
 800ddf2:	f10e 0e01 	add.w	lr, lr, #1
 800ddf6:	3404      	adds	r4, #4
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	e785      	b.n	800dd08 <__kernel_rem_pio2f+0x158>
 800ddfc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800de00:	6020      	str	r0, [r4, #0]
 800de02:	4618      	mov	r0, r3
 800de04:	e7f5      	b.n	800ddf2 <__kernel_rem_pio2f+0x242>
 800de06:	1e74      	subs	r4, r6, #1
 800de08:	a808      	add	r0, sp, #32
 800de0a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800de0e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800de12:	f10d 0c20 	add.w	ip, sp, #32
 800de16:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800de1a:	e77e      	b.n	800dd1a <__kernel_rem_pio2f+0x16a>
 800de1c:	1e74      	subs	r4, r6, #1
 800de1e:	a808      	add	r0, sp, #32
 800de20:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800de24:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800de28:	e7f3      	b.n	800de12 <__kernel_rem_pio2f+0x262>
 800de2a:	ab08      	add	r3, sp, #32
 800de2c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800de30:	f10c 3cff 	add.w	ip, ip, #4294967295
 800de34:	4318      	orrs	r0, r3
 800de36:	e7ab      	b.n	800dd90 <__kernel_rem_pio2f+0x1e0>
 800de38:	f10c 0c01 	add.w	ip, ip, #1
 800de3c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800de40:	2c00      	cmp	r4, #0
 800de42:	d0f9      	beq.n	800de38 <__kernel_rem_pio2f+0x288>
 800de44:	9b05      	ldr	r3, [sp, #20]
 800de46:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800de4a:	eb0d 0003 	add.w	r0, sp, r3
 800de4e:	9b01      	ldr	r3, [sp, #4]
 800de50:	18f4      	adds	r4, r6, r3
 800de52:	ab1c      	add	r3, sp, #112	; 0x70
 800de54:	1c77      	adds	r7, r6, #1
 800de56:	384c      	subs	r0, #76	; 0x4c
 800de58:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800de5c:	4466      	add	r6, ip
 800de5e:	42be      	cmp	r6, r7
 800de60:	f6ff af0b 	blt.w	800dc7a <__kernel_rem_pio2f+0xca>
 800de64:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800de68:	f8dd e008 	ldr.w	lr, [sp, #8]
 800de6c:	ee07 3a90 	vmov	s15, r3
 800de70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de74:	f04f 0c00 	mov.w	ip, #0
 800de78:	ece4 7a01 	vstmia	r4!, {s15}
 800de7c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800debc <__kernel_rem_pio2f+0x30c>
 800de80:	46a1      	mov	r9, r4
 800de82:	458c      	cmp	ip, r1
 800de84:	dd07      	ble.n	800de96 <__kernel_rem_pio2f+0x2e6>
 800de86:	ece0 7a01 	vstmia	r0!, {s15}
 800de8a:	3701      	adds	r7, #1
 800de8c:	e7e7      	b.n	800de5e <__kernel_rem_pio2f+0x2ae>
 800de8e:	9804      	ldr	r0, [sp, #16]
 800de90:	f04f 0c01 	mov.w	ip, #1
 800de94:	e7d2      	b.n	800de3c <__kernel_rem_pio2f+0x28c>
 800de96:	ecfe 6a01 	vldmia	lr!, {s13}
 800de9a:	ed39 7a01 	vldmdb	r9!, {s14}
 800de9e:	f10c 0c01 	add.w	ip, ip, #1
 800dea2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dea6:	e7ec      	b.n	800de82 <__kernel_rem_pio2f+0x2d2>
 800dea8:	3c01      	subs	r4, #1
 800deaa:	e775      	b.n	800dd98 <__kernel_rem_pio2f+0x1e8>
 800deac:	0800e89c 	.word	0x0800e89c
 800deb0:	0800e870 	.word	0x0800e870
 800deb4:	43800000 	.word	0x43800000
 800deb8:	3b800000 	.word	0x3b800000
 800debc:	00000000 	.word	0x00000000
 800dec0:	9b03      	ldr	r3, [sp, #12]
 800dec2:	eeb0 0a48 	vmov.f32	s0, s16
 800dec6:	1a98      	subs	r0, r3, r2
 800dec8:	f000 fa4e 	bl	800e368 <scalbnf>
 800decc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800deb4 <__kernel_rem_pio2f+0x304>
 800ded0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ded4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ded8:	db19      	blt.n	800df0e <__kernel_rem_pio2f+0x35e>
 800deda:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800deb8 <__kernel_rem_pio2f+0x308>
 800dede:	ee60 7a27 	vmul.f32	s15, s0, s15
 800dee2:	aa08      	add	r2, sp, #32
 800dee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dee8:	1c74      	adds	r4, r6, #1
 800deea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800deee:	3508      	adds	r5, #8
 800def0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800def4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800def8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800defc:	ee10 3a10 	vmov	r3, s0
 800df00:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800df04:	ee17 3a90 	vmov	r3, s15
 800df08:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800df0c:	e74b      	b.n	800dda6 <__kernel_rem_pio2f+0x1f6>
 800df0e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800df12:	aa08      	add	r2, sp, #32
 800df14:	ee10 3a10 	vmov	r3, s0
 800df18:	4634      	mov	r4, r6
 800df1a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800df1e:	e742      	b.n	800dda6 <__kernel_rem_pio2f+0x1f6>
 800df20:	a808      	add	r0, sp, #32
 800df22:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800df26:	9001      	str	r0, [sp, #4]
 800df28:	ee07 0a90 	vmov	s15, r0
 800df2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df30:	3a01      	subs	r2, #1
 800df32:	ee67 7a80 	vmul.f32	s15, s15, s0
 800df36:	ee20 0a07 	vmul.f32	s0, s0, s14
 800df3a:	ed61 7a01 	vstmdb	r1!, {s15}
 800df3e:	e73e      	b.n	800ddbe <__kernel_rem_pio2f+0x20e>
 800df40:	ecfc 6a01 	vldmia	ip!, {s13}
 800df44:	ecb6 7a01 	vldmia	r6!, {s14}
 800df48:	eee6 7a87 	vfma.f32	s15, s13, s14
 800df4c:	3001      	adds	r0, #1
 800df4e:	4550      	cmp	r0, sl
 800df50:	dc01      	bgt.n	800df56 <__kernel_rem_pio2f+0x3a6>
 800df52:	4288      	cmp	r0, r1
 800df54:	ddf4      	ble.n	800df40 <__kernel_rem_pio2f+0x390>
 800df56:	a858      	add	r0, sp, #352	; 0x160
 800df58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800df5c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800df60:	3a01      	subs	r2, #1
 800df62:	e730      	b.n	800ddc6 <__kernel_rem_pio2f+0x216>
 800df64:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800df66:	2a02      	cmp	r2, #2
 800df68:	dc09      	bgt.n	800df7e <__kernel_rem_pio2f+0x3ce>
 800df6a:	2a00      	cmp	r2, #0
 800df6c:	dc2a      	bgt.n	800dfc4 <__kernel_rem_pio2f+0x414>
 800df6e:	d043      	beq.n	800dff8 <__kernel_rem_pio2f+0x448>
 800df70:	f009 0007 	and.w	r0, r9, #7
 800df74:	b059      	add	sp, #356	; 0x164
 800df76:	ecbd 8b04 	vpop	{d8-d9}
 800df7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df7e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800df80:	2b03      	cmp	r3, #3
 800df82:	d1f5      	bne.n	800df70 <__kernel_rem_pio2f+0x3c0>
 800df84:	ab30      	add	r3, sp, #192	; 0xc0
 800df86:	442b      	add	r3, r5
 800df88:	461a      	mov	r2, r3
 800df8a:	4619      	mov	r1, r3
 800df8c:	4620      	mov	r0, r4
 800df8e:	2800      	cmp	r0, #0
 800df90:	f1a1 0104 	sub.w	r1, r1, #4
 800df94:	dc51      	bgt.n	800e03a <__kernel_rem_pio2f+0x48a>
 800df96:	4621      	mov	r1, r4
 800df98:	2901      	cmp	r1, #1
 800df9a:	f1a2 0204 	sub.w	r2, r2, #4
 800df9e:	dc5c      	bgt.n	800e05a <__kernel_rem_pio2f+0x4aa>
 800dfa0:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800debc <__kernel_rem_pio2f+0x30c>
 800dfa4:	3304      	adds	r3, #4
 800dfa6:	2c01      	cmp	r4, #1
 800dfa8:	dc67      	bgt.n	800e07a <__kernel_rem_pio2f+0x4ca>
 800dfaa:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800dfae:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800dfb2:	2f00      	cmp	r7, #0
 800dfb4:	d167      	bne.n	800e086 <__kernel_rem_pio2f+0x4d6>
 800dfb6:	edc8 6a00 	vstr	s13, [r8]
 800dfba:	ed88 7a01 	vstr	s14, [r8, #4]
 800dfbe:	edc8 7a02 	vstr	s15, [r8, #8]
 800dfc2:	e7d5      	b.n	800df70 <__kernel_rem_pio2f+0x3c0>
 800dfc4:	aa30      	add	r2, sp, #192	; 0xc0
 800dfc6:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800debc <__kernel_rem_pio2f+0x30c>
 800dfca:	4413      	add	r3, r2
 800dfcc:	4622      	mov	r2, r4
 800dfce:	2a00      	cmp	r2, #0
 800dfd0:	da24      	bge.n	800e01c <__kernel_rem_pio2f+0x46c>
 800dfd2:	b34f      	cbz	r7, 800e028 <__kernel_rem_pio2f+0x478>
 800dfd4:	eef1 7a47 	vneg.f32	s15, s14
 800dfd8:	edc8 7a00 	vstr	s15, [r8]
 800dfdc:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800dfe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dfe4:	aa31      	add	r2, sp, #196	; 0xc4
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	429c      	cmp	r4, r3
 800dfea:	da20      	bge.n	800e02e <__kernel_rem_pio2f+0x47e>
 800dfec:	b10f      	cbz	r7, 800dff2 <__kernel_rem_pio2f+0x442>
 800dfee:	eef1 7a67 	vneg.f32	s15, s15
 800dff2:	edc8 7a01 	vstr	s15, [r8, #4]
 800dff6:	e7bb      	b.n	800df70 <__kernel_rem_pio2f+0x3c0>
 800dff8:	aa30      	add	r2, sp, #192	; 0xc0
 800dffa:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800debc <__kernel_rem_pio2f+0x30c>
 800dffe:	4413      	add	r3, r2
 800e000:	2c00      	cmp	r4, #0
 800e002:	da05      	bge.n	800e010 <__kernel_rem_pio2f+0x460>
 800e004:	b10f      	cbz	r7, 800e00a <__kernel_rem_pio2f+0x45a>
 800e006:	eef1 7a67 	vneg.f32	s15, s15
 800e00a:	edc8 7a00 	vstr	s15, [r8]
 800e00e:	e7af      	b.n	800df70 <__kernel_rem_pio2f+0x3c0>
 800e010:	ed33 7a01 	vldmdb	r3!, {s14}
 800e014:	3c01      	subs	r4, #1
 800e016:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e01a:	e7f1      	b.n	800e000 <__kernel_rem_pio2f+0x450>
 800e01c:	ed73 7a01 	vldmdb	r3!, {s15}
 800e020:	3a01      	subs	r2, #1
 800e022:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e026:	e7d2      	b.n	800dfce <__kernel_rem_pio2f+0x41e>
 800e028:	eef0 7a47 	vmov.f32	s15, s14
 800e02c:	e7d4      	b.n	800dfd8 <__kernel_rem_pio2f+0x428>
 800e02e:	ecb2 7a01 	vldmia	r2!, {s14}
 800e032:	3301      	adds	r3, #1
 800e034:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e038:	e7d6      	b.n	800dfe8 <__kernel_rem_pio2f+0x438>
 800e03a:	edd1 7a00 	vldr	s15, [r1]
 800e03e:	edd1 6a01 	vldr	s13, [r1, #4]
 800e042:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e046:	3801      	subs	r0, #1
 800e048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e04c:	ed81 7a00 	vstr	s14, [r1]
 800e050:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e054:	edc1 7a01 	vstr	s15, [r1, #4]
 800e058:	e799      	b.n	800df8e <__kernel_rem_pio2f+0x3de>
 800e05a:	edd2 7a00 	vldr	s15, [r2]
 800e05e:	edd2 6a01 	vldr	s13, [r2, #4]
 800e062:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e066:	3901      	subs	r1, #1
 800e068:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e06c:	ed82 7a00 	vstr	s14, [r2]
 800e070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e074:	edc2 7a01 	vstr	s15, [r2, #4]
 800e078:	e78e      	b.n	800df98 <__kernel_rem_pio2f+0x3e8>
 800e07a:	ed33 7a01 	vldmdb	r3!, {s14}
 800e07e:	3c01      	subs	r4, #1
 800e080:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e084:	e78f      	b.n	800dfa6 <__kernel_rem_pio2f+0x3f6>
 800e086:	eef1 6a66 	vneg.f32	s13, s13
 800e08a:	eeb1 7a47 	vneg.f32	s14, s14
 800e08e:	edc8 6a00 	vstr	s13, [r8]
 800e092:	ed88 7a01 	vstr	s14, [r8, #4]
 800e096:	eef1 7a67 	vneg.f32	s15, s15
 800e09a:	e790      	b.n	800dfbe <__kernel_rem_pio2f+0x40e>

0800e09c <__kernel_sinf>:
 800e09c:	ee10 3a10 	vmov	r3, s0
 800e0a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e0a4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e0a8:	da04      	bge.n	800e0b4 <__kernel_sinf+0x18>
 800e0aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e0ae:	ee17 3a90 	vmov	r3, s15
 800e0b2:	b35b      	cbz	r3, 800e10c <__kernel_sinf+0x70>
 800e0b4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e0b8:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e110 <__kernel_sinf+0x74>
 800e0bc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800e114 <__kernel_sinf+0x78>
 800e0c0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e0c4:	eddf 7a14 	vldr	s15, [pc, #80]	; 800e118 <__kernel_sinf+0x7c>
 800e0c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e0cc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800e11c <__kernel_sinf+0x80>
 800e0d0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e0d4:	eddf 7a12 	vldr	s15, [pc, #72]	; 800e120 <__kernel_sinf+0x84>
 800e0d8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800e0dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e0e0:	b930      	cbnz	r0, 800e0f0 <__kernel_sinf+0x54>
 800e0e2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800e124 <__kernel_sinf+0x88>
 800e0e6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e0ea:	eea6 0a26 	vfma.f32	s0, s12, s13
 800e0ee:	4770      	bx	lr
 800e0f0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e0f4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e0f8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800e0fc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800e100:	eddf 7a09 	vldr	s15, [pc, #36]	; 800e128 <__kernel_sinf+0x8c>
 800e104:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800e108:	ee30 0a60 	vsub.f32	s0, s0, s1
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop
 800e110:	2f2ec9d3 	.word	0x2f2ec9d3
 800e114:	b2d72f34 	.word	0xb2d72f34
 800e118:	3638ef1b 	.word	0x3638ef1b
 800e11c:	b9500d01 	.word	0xb9500d01
 800e120:	3c088889 	.word	0x3c088889
 800e124:	be2aaaab 	.word	0xbe2aaaab
 800e128:	3e2aaaab 	.word	0x3e2aaaab

0800e12c <with_errno>:
 800e12c:	b570      	push	{r4, r5, r6, lr}
 800e12e:	4604      	mov	r4, r0
 800e130:	460d      	mov	r5, r1
 800e132:	4616      	mov	r6, r2
 800e134:	f7fe f9f2 	bl	800c51c <__errno>
 800e138:	4629      	mov	r1, r5
 800e13a:	6006      	str	r6, [r0, #0]
 800e13c:	4620      	mov	r0, r4
 800e13e:	bd70      	pop	{r4, r5, r6, pc}

0800e140 <xflow>:
 800e140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e142:	4614      	mov	r4, r2
 800e144:	461d      	mov	r5, r3
 800e146:	b108      	cbz	r0, 800e14c <xflow+0xc>
 800e148:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e14c:	e9cd 2300 	strd	r2, r3, [sp]
 800e150:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e154:	4620      	mov	r0, r4
 800e156:	4629      	mov	r1, r5
 800e158:	f7f2 f9fa 	bl	8000550 <__aeabi_dmul>
 800e15c:	2222      	movs	r2, #34	; 0x22
 800e15e:	b003      	add	sp, #12
 800e160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e164:	f7ff bfe2 	b.w	800e12c <with_errno>

0800e168 <__math_uflow>:
 800e168:	b508      	push	{r3, lr}
 800e16a:	2200      	movs	r2, #0
 800e16c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e170:	f7ff ffe6 	bl	800e140 <xflow>
 800e174:	ec41 0b10 	vmov	d0, r0, r1
 800e178:	bd08      	pop	{r3, pc}

0800e17a <__math_oflow>:
 800e17a:	b508      	push	{r3, lr}
 800e17c:	2200      	movs	r2, #0
 800e17e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e182:	f7ff ffdd 	bl	800e140 <xflow>
 800e186:	ec41 0b10 	vmov	d0, r0, r1
 800e18a:	bd08      	pop	{r3, pc}

0800e18c <fabs>:
 800e18c:	ec51 0b10 	vmov	r0, r1, d0
 800e190:	ee10 2a10 	vmov	r2, s0
 800e194:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e198:	ec43 2b10 	vmov	d0, r2, r3
 800e19c:	4770      	bx	lr

0800e19e <finite>:
 800e19e:	b082      	sub	sp, #8
 800e1a0:	ed8d 0b00 	vstr	d0, [sp]
 800e1a4:	9801      	ldr	r0, [sp, #4]
 800e1a6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e1aa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e1ae:	0fc0      	lsrs	r0, r0, #31
 800e1b0:	b002      	add	sp, #8
 800e1b2:	4770      	bx	lr
 800e1b4:	0000      	movs	r0, r0
	...

0800e1b8 <nan>:
 800e1b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e1c0 <nan+0x8>
 800e1bc:	4770      	bx	lr
 800e1be:	bf00      	nop
 800e1c0:	00000000 	.word	0x00000000
 800e1c4:	7ff80000 	.word	0x7ff80000

0800e1c8 <scalbn>:
 800e1c8:	b570      	push	{r4, r5, r6, lr}
 800e1ca:	ec55 4b10 	vmov	r4, r5, d0
 800e1ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e1d2:	4606      	mov	r6, r0
 800e1d4:	462b      	mov	r3, r5
 800e1d6:	b99a      	cbnz	r2, 800e200 <scalbn+0x38>
 800e1d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e1dc:	4323      	orrs	r3, r4
 800e1de:	d036      	beq.n	800e24e <scalbn+0x86>
 800e1e0:	4b39      	ldr	r3, [pc, #228]	; (800e2c8 <scalbn+0x100>)
 800e1e2:	4629      	mov	r1, r5
 800e1e4:	ee10 0a10 	vmov	r0, s0
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f7f2 f9b1 	bl	8000550 <__aeabi_dmul>
 800e1ee:	4b37      	ldr	r3, [pc, #220]	; (800e2cc <scalbn+0x104>)
 800e1f0:	429e      	cmp	r6, r3
 800e1f2:	4604      	mov	r4, r0
 800e1f4:	460d      	mov	r5, r1
 800e1f6:	da10      	bge.n	800e21a <scalbn+0x52>
 800e1f8:	a32b      	add	r3, pc, #172	; (adr r3, 800e2a8 <scalbn+0xe0>)
 800e1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fe:	e03a      	b.n	800e276 <scalbn+0xae>
 800e200:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e204:	428a      	cmp	r2, r1
 800e206:	d10c      	bne.n	800e222 <scalbn+0x5a>
 800e208:	ee10 2a10 	vmov	r2, s0
 800e20c:	4620      	mov	r0, r4
 800e20e:	4629      	mov	r1, r5
 800e210:	f7f1 ffe8 	bl	80001e4 <__adddf3>
 800e214:	4604      	mov	r4, r0
 800e216:	460d      	mov	r5, r1
 800e218:	e019      	b.n	800e24e <scalbn+0x86>
 800e21a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e21e:	460b      	mov	r3, r1
 800e220:	3a36      	subs	r2, #54	; 0x36
 800e222:	4432      	add	r2, r6
 800e224:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e228:	428a      	cmp	r2, r1
 800e22a:	dd08      	ble.n	800e23e <scalbn+0x76>
 800e22c:	2d00      	cmp	r5, #0
 800e22e:	a120      	add	r1, pc, #128	; (adr r1, 800e2b0 <scalbn+0xe8>)
 800e230:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e234:	da1c      	bge.n	800e270 <scalbn+0xa8>
 800e236:	a120      	add	r1, pc, #128	; (adr r1, 800e2b8 <scalbn+0xf0>)
 800e238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e23c:	e018      	b.n	800e270 <scalbn+0xa8>
 800e23e:	2a00      	cmp	r2, #0
 800e240:	dd08      	ble.n	800e254 <scalbn+0x8c>
 800e242:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e246:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e24a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e24e:	ec45 4b10 	vmov	d0, r4, r5
 800e252:	bd70      	pop	{r4, r5, r6, pc}
 800e254:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e258:	da19      	bge.n	800e28e <scalbn+0xc6>
 800e25a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e25e:	429e      	cmp	r6, r3
 800e260:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e264:	dd0a      	ble.n	800e27c <scalbn+0xb4>
 800e266:	a112      	add	r1, pc, #72	; (adr r1, 800e2b0 <scalbn+0xe8>)
 800e268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d1e2      	bne.n	800e236 <scalbn+0x6e>
 800e270:	a30f      	add	r3, pc, #60	; (adr r3, 800e2b0 <scalbn+0xe8>)
 800e272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e276:	f7f2 f96b 	bl	8000550 <__aeabi_dmul>
 800e27a:	e7cb      	b.n	800e214 <scalbn+0x4c>
 800e27c:	a10a      	add	r1, pc, #40	; (adr r1, 800e2a8 <scalbn+0xe0>)
 800e27e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d0b8      	beq.n	800e1f8 <scalbn+0x30>
 800e286:	a10e      	add	r1, pc, #56	; (adr r1, 800e2c0 <scalbn+0xf8>)
 800e288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e28c:	e7b4      	b.n	800e1f8 <scalbn+0x30>
 800e28e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e292:	3236      	adds	r2, #54	; 0x36
 800e294:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e298:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e29c:	4620      	mov	r0, r4
 800e29e:	4b0c      	ldr	r3, [pc, #48]	; (800e2d0 <scalbn+0x108>)
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	e7e8      	b.n	800e276 <scalbn+0xae>
 800e2a4:	f3af 8000 	nop.w
 800e2a8:	c2f8f359 	.word	0xc2f8f359
 800e2ac:	01a56e1f 	.word	0x01a56e1f
 800e2b0:	8800759c 	.word	0x8800759c
 800e2b4:	7e37e43c 	.word	0x7e37e43c
 800e2b8:	8800759c 	.word	0x8800759c
 800e2bc:	fe37e43c 	.word	0xfe37e43c
 800e2c0:	c2f8f359 	.word	0xc2f8f359
 800e2c4:	81a56e1f 	.word	0x81a56e1f
 800e2c8:	43500000 	.word	0x43500000
 800e2cc:	ffff3cb0 	.word	0xffff3cb0
 800e2d0:	3c900000 	.word	0x3c900000

0800e2d4 <fabsf>:
 800e2d4:	ee10 3a10 	vmov	r3, s0
 800e2d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2dc:	ee00 3a10 	vmov	s0, r3
 800e2e0:	4770      	bx	lr
	...

0800e2e4 <floorf>:
 800e2e4:	ee10 3a10 	vmov	r3, s0
 800e2e8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e2ec:	3a7f      	subs	r2, #127	; 0x7f
 800e2ee:	2a16      	cmp	r2, #22
 800e2f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e2f4:	dc2a      	bgt.n	800e34c <floorf+0x68>
 800e2f6:	2a00      	cmp	r2, #0
 800e2f8:	da11      	bge.n	800e31e <floorf+0x3a>
 800e2fa:	eddf 7a18 	vldr	s15, [pc, #96]	; 800e35c <floorf+0x78>
 800e2fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e302:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e30a:	dd05      	ble.n	800e318 <floorf+0x34>
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	da23      	bge.n	800e358 <floorf+0x74>
 800e310:	4a13      	ldr	r2, [pc, #76]	; (800e360 <floorf+0x7c>)
 800e312:	2900      	cmp	r1, #0
 800e314:	bf18      	it	ne
 800e316:	4613      	movne	r3, r2
 800e318:	ee00 3a10 	vmov	s0, r3
 800e31c:	4770      	bx	lr
 800e31e:	4911      	ldr	r1, [pc, #68]	; (800e364 <floorf+0x80>)
 800e320:	4111      	asrs	r1, r2
 800e322:	420b      	tst	r3, r1
 800e324:	d0fa      	beq.n	800e31c <floorf+0x38>
 800e326:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e35c <floorf+0x78>
 800e32a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e32e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e336:	ddef      	ble.n	800e318 <floorf+0x34>
 800e338:	2b00      	cmp	r3, #0
 800e33a:	bfbe      	ittt	lt
 800e33c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800e340:	fa40 f202 	asrlt.w	r2, r0, r2
 800e344:	189b      	addlt	r3, r3, r2
 800e346:	ea23 0301 	bic.w	r3, r3, r1
 800e34a:	e7e5      	b.n	800e318 <floorf+0x34>
 800e34c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e350:	d3e4      	bcc.n	800e31c <floorf+0x38>
 800e352:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e356:	4770      	bx	lr
 800e358:	2300      	movs	r3, #0
 800e35a:	e7dd      	b.n	800e318 <floorf+0x34>
 800e35c:	7149f2ca 	.word	0x7149f2ca
 800e360:	bf800000 	.word	0xbf800000
 800e364:	007fffff 	.word	0x007fffff

0800e368 <scalbnf>:
 800e368:	ee10 3a10 	vmov	r3, s0
 800e36c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e370:	d025      	beq.n	800e3be <scalbnf+0x56>
 800e372:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e376:	d302      	bcc.n	800e37e <scalbnf+0x16>
 800e378:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e37c:	4770      	bx	lr
 800e37e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e382:	d122      	bne.n	800e3ca <scalbnf+0x62>
 800e384:	4b2a      	ldr	r3, [pc, #168]	; (800e430 <scalbnf+0xc8>)
 800e386:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e434 <scalbnf+0xcc>
 800e38a:	4298      	cmp	r0, r3
 800e38c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e390:	db16      	blt.n	800e3c0 <scalbnf+0x58>
 800e392:	ee10 3a10 	vmov	r3, s0
 800e396:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e39a:	3a19      	subs	r2, #25
 800e39c:	4402      	add	r2, r0
 800e39e:	2afe      	cmp	r2, #254	; 0xfe
 800e3a0:	dd15      	ble.n	800e3ce <scalbnf+0x66>
 800e3a2:	ee10 3a10 	vmov	r3, s0
 800e3a6:	eddf 7a24 	vldr	s15, [pc, #144]	; 800e438 <scalbnf+0xd0>
 800e3aa:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e43c <scalbnf+0xd4>
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	eeb0 7a67 	vmov.f32	s14, s15
 800e3b4:	bfb8      	it	lt
 800e3b6:	eef0 7a66 	vmovlt.f32	s15, s13
 800e3ba:	ee27 0a27 	vmul.f32	s0, s14, s15
 800e3be:	4770      	bx	lr
 800e3c0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e440 <scalbnf+0xd8>
 800e3c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e3c8:	4770      	bx	lr
 800e3ca:	0dd2      	lsrs	r2, r2, #23
 800e3cc:	e7e6      	b.n	800e39c <scalbnf+0x34>
 800e3ce:	2a00      	cmp	r2, #0
 800e3d0:	dd06      	ble.n	800e3e0 <scalbnf+0x78>
 800e3d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e3d6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e3da:	ee00 3a10 	vmov	s0, r3
 800e3de:	4770      	bx	lr
 800e3e0:	f112 0f16 	cmn.w	r2, #22
 800e3e4:	da1a      	bge.n	800e41c <scalbnf+0xb4>
 800e3e6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e3ea:	4298      	cmp	r0, r3
 800e3ec:	ee10 3a10 	vmov	r3, s0
 800e3f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e3f4:	dd0a      	ble.n	800e40c <scalbnf+0xa4>
 800e3f6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e438 <scalbnf+0xd0>
 800e3fa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e43c <scalbnf+0xd4>
 800e3fe:	eef0 7a40 	vmov.f32	s15, s0
 800e402:	2b00      	cmp	r3, #0
 800e404:	bf18      	it	ne
 800e406:	eeb0 0a47 	vmovne.f32	s0, s14
 800e40a:	e7db      	b.n	800e3c4 <scalbnf+0x5c>
 800e40c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800e440 <scalbnf+0xd8>
 800e410:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e444 <scalbnf+0xdc>
 800e414:	eef0 7a40 	vmov.f32	s15, s0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	e7f3      	b.n	800e404 <scalbnf+0x9c>
 800e41c:	3219      	adds	r2, #25
 800e41e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e422:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e426:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e448 <scalbnf+0xe0>
 800e42a:	ee07 3a10 	vmov	s14, r3
 800e42e:	e7c4      	b.n	800e3ba <scalbnf+0x52>
 800e430:	ffff3cb0 	.word	0xffff3cb0
 800e434:	4c000000 	.word	0x4c000000
 800e438:	7149f2ca 	.word	0x7149f2ca
 800e43c:	f149f2ca 	.word	0xf149f2ca
 800e440:	0da24260 	.word	0x0da24260
 800e444:	8da24260 	.word	0x8da24260
 800e448:	33000000 	.word	0x33000000

0800e44c <_init>:
 800e44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e44e:	bf00      	nop
 800e450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e452:	bc08      	pop	{r3}
 800e454:	469e      	mov	lr, r3
 800e456:	4770      	bx	lr

0800e458 <_fini>:
 800e458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e45a:	bf00      	nop
 800e45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e45e:	bc08      	pop	{r3}
 800e460:	469e      	mov	lr, r3
 800e462:	4770      	bx	lr
