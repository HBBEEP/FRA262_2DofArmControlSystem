
RoboticArmControlSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004740  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048f8  080048f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080048f8  080048f8  000148f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004900  08004900  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004900  08004900  00014900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004904  08004904  00014904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000010  08004918  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08004918  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee18  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2f  00000000  00000000  0002ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00030c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00031a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b18  00000000  00000000  000326d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecf3  00000000  00000000  000491e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095f52  00000000  00000000  00057edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ede2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003920  00000000  00000000  000ede80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080048c0 	.word	0x080048c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080048c0 	.word	0x080048c0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e0:	f000 fe22 	bl	8001128 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e4:	f000 f82e 	bl	8000544 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e8:	f000 fa62 	bl	80009b0 <MX_GPIO_Init>
	MX_DMA_Init();
 80004ec:	f000 fa40 	bl	8000970 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80004f0:	f000 fa14 	bl	800091c <MX_USART2_UART_Init>
	MX_TIM1_Init();
 80004f4:	f000 f8ee 	bl	80006d4 <MX_TIM1_Init>
	MX_TIM5_Init();
 80004f8:	f000 f9bc 	bl	8000874 <MX_TIM5_Init>
	MX_TIM2_Init();
 80004fc:	f000 f96e 	bl	80007dc <MX_TIM2_Init>
	MX_ADC1_Init();
 8000500:	f000 f888 	bl	8000614 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000504:	2104      	movs	r1, #4
 8000506:	480a      	ldr	r0, [pc, #40]	; (8000530 <main+0x54>)
 8000508:	f003 f804 	bl	8003514 <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start(&htim1);
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <main+0x58>)
 800050e:	f002 fd9f 	bl	8003050 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000512:	2100      	movs	r1, #0
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <main+0x58>)
 8000516:	f002 fea7 	bl	8003268 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start_IT(&htim2);
 800051a:	4807      	ldr	r0, [pc, #28]	; (8000538 <main+0x5c>)
 800051c:	f002 fdf2 	bl	8003104 <HAL_TIM_Base_Start_IT>

	HAL_ADC_Start_DMA(&hadc1, (uint16_t*) buffer, 20);
 8000520:	2214      	movs	r2, #20
 8000522:	4906      	ldr	r1, [pc, #24]	; (800053c <main+0x60>)
 8000524:	4806      	ldr	r0, [pc, #24]	; (8000540 <main+0x64>)
 8000526:	f000 feb5 	bl	8001294 <HAL_ADC_Start_DMA>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		buttonHandle();
 800052a:	f000 fb81 	bl	8000c30 <buttonHandle>
 800052e:	e7fc      	b.n	800052a <main+0x4e>
 8000530:	20000164 	.word	0x20000164
 8000534:	200000d4 	.word	0x200000d4
 8000538:	2000011c 	.word	0x2000011c
 800053c:	200001f8 	.word	0x200001f8
 8000540:	2000002c 	.word	0x2000002c

08000544 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	; 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f004 f9ac 	bl	80048b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	4b27      	ldr	r3, [pc, #156]	; (800060c <SystemClock_Config+0xc8>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a26      	ldr	r2, [pc, #152]	; (800060c <SystemClock_Config+0xc8>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b24      	ldr	r3, [pc, #144]	; (800060c <SystemClock_Config+0xc8>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b21      	ldr	r3, [pc, #132]	; (8000610 <SystemClock_Config+0xcc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a20      	ldr	r2, [pc, #128]	; (8000610 <SystemClock_Config+0xcc>)
 800058e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <SystemClock_Config+0xcc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2310      	movs	r3, #16
 80005aa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	2302      	movs	r3, #2
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005b4:	2308      	movs	r3, #8
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80005b8:	2364      	movs	r3, #100	; 0x64
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 f859 	bl	8002680 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x94>
		Error_Handler();
 80005d4:	f000 fb76 	bl	8000cc4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2302      	movs	r3, #2
 80005de:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2103      	movs	r1, #3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 fabb 	bl	8002b70 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xc0>
		Error_Handler();
 8000600:	f000 fb60 	bl	8000cc4 <Error_Handler>
	}
}
 8000604:	bf00      	nop
 8000606:	3750      	adds	r7, #80	; 0x50
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800061a:	463b      	mov	r3, r7
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000626:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <MX_ADC1_Init+0xb4>)
 8000628:	4a28      	ldr	r2, [pc, #160]	; (80006cc <MX_ADC1_Init+0xb8>)
 800062a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800062c:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <MX_ADC1_Init+0xb4>)
 800062e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000632:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000634:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_ADC1_Init+0xb4>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800063a:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <MX_ADC1_Init+0xb4>)
 800063c:	2201      	movs	r2, #1
 800063e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000640:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <MX_ADC1_Init+0xb4>)
 8000642:	2201      	movs	r2, #1
 8000644:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_ADC1_Init+0xb4>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <MX_ADC1_Init+0xb4>)
 8000650:	2200      	movs	r2, #0
 8000652:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_ADC1_Init+0xb4>)
 8000656:	4a1e      	ldr	r2, [pc, #120]	; (80006d0 <MX_ADC1_Init+0xbc>)
 8000658:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_ADC1_Init+0xb4>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_ADC1_Init+0xb4>)
 8000662:	2202      	movs	r2, #2
 8000664:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_ADC1_Init+0xb4>)
 8000668:	2201      	movs	r2, #1
 800066a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_ADC1_Init+0xb4>)
 8000670:	2201      	movs	r2, #1
 8000672:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000674:	4814      	ldr	r0, [pc, #80]	; (80006c8 <MX_ADC1_Init+0xb4>)
 8000676:	f000 fdc9 	bl	800120c <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000680:	f000 fb20 	bl	8000cc4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 8000684:	230d      	movs	r3, #13
 8000686:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000688:	2301      	movs	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800068c:	2303      	movs	r3, #3
 800068e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000690:	463b      	mov	r3, r7
 8000692:	4619      	mov	r1, r3
 8000694:	480c      	ldr	r0, [pc, #48]	; (80006c8 <MX_ADC1_Init+0xb4>)
 8000696:	f000 ff0b 	bl	80014b0 <HAL_ADC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x90>
		Error_Handler();
 80006a0:	f000 fb10 	bl	8000cc4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 80006a4:	230a      	movs	r3, #10
 80006a6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_ADC1_Init+0xb4>)
 80006b2:	f000 fefd 	bl	80014b0 <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0xac>
		Error_Handler();
 80006bc:	f000 fb02 	bl	8000cc4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000002c 	.word	0x2000002c
 80006cc:	40012000 	.word	0x40012000
 80006d0:	0f000001 	.word	0x0f000001

080006d4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b092      	sub	sp, #72	; 0x48
 80006d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80006da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80006e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
 80006f4:	615a      	str	r2, [r3, #20]
 80006f6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2220      	movs	r2, #32
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f004 f8d6 	bl	80048b0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000704:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <MX_TIM1_Init+0x100>)
 8000706:	4a34      	ldr	r2, [pc, #208]	; (80007d8 <MX_TIM1_Init+0x104>)
 8000708:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 99;
 800070a:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <MX_TIM1_Init+0x100>)
 800070c:	2263      	movs	r2, #99	; 0x63
 800070e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <MX_TIM1_Init+0x100>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 8000716:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <MX_TIM1_Init+0x100>)
 8000718:	f240 32e7 	movw	r2, #999	; 0x3e7
 800071c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071e:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <MX_TIM1_Init+0x100>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <MX_TIM1_Init+0x100>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072a:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <MX_TIM1_Init+0x100>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000730:	4828      	ldr	r0, [pc, #160]	; (80007d4 <MX_TIM1_Init+0x100>)
 8000732:	f002 fd49 	bl	80031c8 <HAL_TIM_PWM_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM1_Init+0x6c>
		Error_Handler();
 800073c:	f000 fac2 	bl	8000cc4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000740:	2300      	movs	r3, #0
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000748:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800074c:	4619      	mov	r1, r3
 800074e:	4821      	ldr	r0, [pc, #132]	; (80007d4 <MX_TIM1_Init+0x100>)
 8000750:	f003 fcf4 	bl	800413c <HAL_TIMEx_MasterConfigSynchronization>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800075a:	f000 fab3 	bl	8000cc4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800075e:	2360      	movs	r3, #96	; 0x60
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000766:	2300      	movs	r3, #0
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800076a:	2300      	movs	r3, #0
 800076c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000772:	2300      	movs	r3, #0
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000776:	2300      	movs	r3, #0
 8000778:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800077a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077e:	2200      	movs	r2, #0
 8000780:	4619      	mov	r1, r3
 8000782:	4814      	ldr	r0, [pc, #80]	; (80007d4 <MX_TIM1_Init+0x100>)
 8000784:	f003 f85c 	bl	8003840 <HAL_TIM_PWM_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 800078e:	f000 fa99 	bl	8000cc4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007aa:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	4619      	mov	r1, r3
 80007b4:	4807      	ldr	r0, [pc, #28]	; (80007d4 <MX_TIM1_Init+0x100>)
 80007b6:	f003 fd2f 	bl	8004218 <HAL_TIMEx_ConfigBreakDeadTime>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 80007c0:	f000 fa80 	bl	8000cc4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <MX_TIM1_Init+0x100>)
 80007c6:	f000 fbb3 	bl	8000f30 <HAL_TIM_MspPostInit>

}
 80007ca:	bf00      	nop
 80007cc:	3748      	adds	r7, #72	; 0x48
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200000d4 	.word	0x200000d4
 80007d8:	40010000 	.word	0x40010000

080007dc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_TIM2_Init+0x94>)
 80007fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fe:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9999;
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <MX_TIM2_Init+0x94>)
 8000802:	f242 720f 	movw	r2, #9999	; 0x270f
 8000806:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_TIM2_Init+0x94>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_TIM2_Init+0x94>)
 8000810:	2209      	movs	r2, #9
 8000812:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_TIM2_Init+0x94>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_TIM2_Init+0x94>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000820:	4813      	ldr	r0, [pc, #76]	; (8000870 <MX_TIM2_Init+0x94>)
 8000822:	f002 fbc5 	bl	8002fb0 <HAL_TIM_Base_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0x54>
		Error_Handler();
 800082c:	f000 fa4a 	bl	8000cc4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000834:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	4619      	mov	r1, r3
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_TIM2_Init+0x94>)
 800083e:	f003 f8c1 	bl	80039c4 <HAL_TIM_ConfigClockSource>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0x70>
		Error_Handler();
 8000848:	f000 fa3c 	bl	8000cc4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000854:	463b      	mov	r3, r7
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_TIM2_Init+0x94>)
 800085a:	f003 fc6f 	bl	800413c <HAL_TIMEx_MasterConfigSynchronization>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8000864:	f000 fa2e 	bl	8000cc4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000011c 	.word	0x2000011c

08000874 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2224      	movs	r2, #36	; 0x24
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f004 f814 	bl	80048b0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000890:	4b20      	ldr	r3, [pc, #128]	; (8000914 <MX_TIM5_Init+0xa0>)
 8000892:	4a21      	ldr	r2, [pc, #132]	; (8000918 <MX_TIM5_Init+0xa4>)
 8000894:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_TIM5_Init+0xa0>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_TIM5_Init+0xa0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_TIM5_Init+0xa0>)
 80008a4:	f04f 32ff 	mov.w	r2, #4294967295
 80008a8:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_TIM5_Init+0xa0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_TIM5_Init+0xa0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008be:	2301      	movs	r3, #1
 80008c0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008ce:	2301      	movs	r3, #1
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <MX_TIM5_Init+0xa0>)
 80008e2:	f002 fd71 	bl	80033c8 <HAL_TIM_Encoder_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM5_Init+0x7c>
		Error_Handler();
 80008ec:	f000 f9ea 	bl	8000cc4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_TIM5_Init+0xa0>)
 80008fe:	f003 fc1d 	bl	800413c <HAL_TIMEx_MasterConfigSynchronization>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM5_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8000908:	f000 f9dc 	bl	8000cc4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	3730      	adds	r7, #48	; 0x30
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000164 	.word	0x20000164
 8000918:	40000c00 	.word	0x40000c00

0800091c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000922:	4a12      	ldr	r2, [pc, #72]	; (800096c <MX_USART2_UART_Init+0x50>)
 8000924:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800092c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000942:	220c      	movs	r2, #12
 8000944:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USART2_UART_Init+0x4c>)
 8000954:	f003 fcc6 	bl	80042e4 <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800095e:	f000 f9b1 	bl	8000cc4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200001ac 	.word	0x200001ac
 800096c:	40004400 	.word	0x40004400

08000970 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_DMA_Init+0x3c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <MX_DMA_Init+0x3c>)
 8000980:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_DMA_Init+0x3c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2038      	movs	r0, #56	; 0x38
 8000998:	f001 f915 	bl	8001bc6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800099c:	2038      	movs	r0, #56	; 0x38
 800099e:	f001 f92e 	bl	8001bfe <HAL_NVIC_EnableIRQ>

}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b47      	ldr	r3, [pc, #284]	; (8000ae8 <MX_GPIO_Init+0x138>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a46      	ldr	r2, [pc, #280]	; (8000ae8 <MX_GPIO_Init+0x138>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b44      	ldr	r3, [pc, #272]	; (8000ae8 <MX_GPIO_Init+0x138>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <MX_GPIO_Init+0x138>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a3f      	ldr	r2, [pc, #252]	; (8000ae8 <MX_GPIO_Init+0x138>)
 80009ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b3d      	ldr	r3, [pc, #244]	; (8000ae8 <MX_GPIO_Init+0x138>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <MX_GPIO_Init+0x138>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a38      	ldr	r2, [pc, #224]	; (8000ae8 <MX_GPIO_Init+0x138>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <MX_GPIO_Init+0x138>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <MX_GPIO_Init+0x138>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a31      	ldr	r2, [pc, #196]	; (8000ae8 <MX_GPIO_Init+0x138>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <MX_GPIO_Init+0x138>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2120      	movs	r1, #32
 8000a3a:	482c      	ldr	r0, [pc, #176]	; (8000aec <MX_GPIO_Init+0x13c>)
 8000a3c:	f001 fe06 	bl	800264c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2140      	movs	r1, #64	; 0x40
 8000a44:	482a      	ldr	r0, [pc, #168]	; (8000af0 <MX_GPIO_Init+0x140>)
 8000a46:	f001 fe01 	bl	800264c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000a50:	4828      	ldr	r0, [pc, #160]	; (8000af4 <MX_GPIO_Init+0x144>)
 8000a52:	f001 fdfb 	bl	800264c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a60:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4820      	ldr	r0, [pc, #128]	; (8000af0 <MX_GPIO_Init+0x140>)
 8000a6e:	f001 fc51 	bl	8002314 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a72:	2310      	movs	r3, #16
 8000a74:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4819      	ldr	r0, [pc, #100]	; (8000aec <MX_GPIO_Init+0x13c>)
 8000a86:	f001 fc45 	bl	8002314 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000a8a:	2320      	movs	r3, #32
 8000a8c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4812      	ldr	r0, [pc, #72]	; (8000aec <MX_GPIO_Init+0x13c>)
 8000aa2:	f001 fc37 	bl	8002314 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000aa6:	2340      	movs	r3, #64	; 0x40
 8000aa8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <MX_GPIO_Init+0x140>)
 8000abe:	f001 fc29 	bl	8002314 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB7 PB8 */
	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8;
 8000ac2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ac6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4806      	ldr	r0, [pc, #24]	; (8000af4 <MX_GPIO_Init+0x144>)
 8000adc:	f001 fc1a 	bl	8002314 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	; 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020800 	.word	0x40020800
 8000af4:	40020400 	.word	0x40020400

08000af8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d103      	bne.n	8000b10 <HAL_TIM_PeriodElapsedCallback+0x18>
		readEncoder();
 8000b08:	f000 f828 	bl	8000b5c <readEncoder>
		setMotor();
 8000b0c:	f000 f806 	bl	8000b1c <setMotor>
		//handleJoystick();

	}
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	2000011c 	.word	0x2000011c

08000b1c <setMotor>:

void setMotor() {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	if (motorDirection) {
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <setMotor+0x30>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d005      	beq.n	8000b34 <setMotor+0x18>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2140      	movs	r1, #64	; 0x40
 8000b2c:	4808      	ldr	r0, [pc, #32]	; (8000b50 <setMotor+0x34>)
 8000b2e:	f001 fd8d 	bl	800264c <HAL_GPIO_WritePin>
 8000b32:	e004      	b.n	8000b3e <setMotor+0x22>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <setMotor+0x34>)
 8000b3a:	f001 fd87 	bl	800264c <HAL_GPIO_WritePin>
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <setMotor+0x38>)
 8000b40:	881a      	ldrh	r2, [r3, #0]
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <setMotor+0x3c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	40020800 	.word	0x40020800
 8000b54:	20000224 	.word	0x20000224
 8000b58:	200000d4 	.word	0x200000d4

08000b5c <readEncoder>:

void readEncoder() {
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim5);
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <readEncoder+0x1c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b66:	461a      	mov	r2, r3
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <readEncoder+0x20>)
 8000b6a:	601a      	str	r2, [r3, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000164 	.word	0x20000164
 8000b7c:	20000220 	.word	0x20000220

08000b80 <handleJoystick>:
void velocityControl() {

	//duty = (kp * errorPosition) + (ki * eintegral);
}

void handleJoystick() {
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	refXPos = buffer[0].subdata.xAxis;
 8000b84:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <handleJoystick+0xa0>)
 8000b86:	881a      	ldrh	r2, [r3, #0]
 8000b88:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <handleJoystick+0xa4>)
 8000b8a:	801a      	strh	r2, [r3, #0]
	if (refXPos > 2500) {
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <handleJoystick+0xa4>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d903      	bls.n	8000ba0 <handleJoystick+0x20>
		motorDirection = 1;
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <handleJoystick+0xa8>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	e008      	b.n	8000bb2 <handleJoystick+0x32>
	} else if (refXPos < 1500) {
 8000ba0:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <handleJoystick+0xa4>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	f240 52db 	movw	r2, #1499	; 0x5db
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d802      	bhi.n	8000bb2 <handleJoystick+0x32>
		motorDirection = 0;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <handleJoystick+0xa8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
	}
	if (refXPos > 3900 || refXPos < 100) {
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <handleJoystick+0xa4>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	f640 723c 	movw	r2, #3900	; 0xf3c
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d803      	bhi.n	8000bc6 <handleJoystick+0x46>
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <handleJoystick+0xa4>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	2b63      	cmp	r3, #99	; 0x63
 8000bc4:	d804      	bhi.n	8000bd0 <handleJoystick+0x50>
		duty = 500;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <handleJoystick+0xac>)
 8000bc8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000bcc:	801a      	strh	r2, [r3, #0]
 8000bce:	e021      	b.n	8000c14 <handleJoystick+0x94>
	} else if (refXPos > 2500 && refXPos <= 3900) {
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <handleJoystick+0xa4>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d909      	bls.n	8000bf0 <handleJoystick+0x70>
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <handleJoystick+0xa4>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	f640 723c 	movw	r2, #3900	; 0xf3c
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d803      	bhi.n	8000bf0 <handleJoystick+0x70>
		duty = 200;
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <handleJoystick+0xac>)
 8000bea:	22c8      	movs	r2, #200	; 0xc8
 8000bec:	801a      	strh	r2, [r3, #0]
 8000bee:	e011      	b.n	8000c14 <handleJoystick+0x94>
	}

	else if (refXPos > 100 && refXPos <= 1500) {
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <handleJoystick+0xa4>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2b64      	cmp	r3, #100	; 0x64
 8000bf6:	d909      	bls.n	8000c0c <handleJoystick+0x8c>
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <handleJoystick+0xa4>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d803      	bhi.n	8000c0c <handleJoystick+0x8c>
		duty = 200;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <handleJoystick+0xac>)
 8000c06:	22c8      	movs	r2, #200	; 0xc8
 8000c08:	801a      	strh	r2, [r3, #0]
 8000c0a:	e003      	b.n	8000c14 <handleJoystick+0x94>
	} else {
		duty = 0;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <handleJoystick+0xac>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	801a      	strh	r2, [r3, #0]
	}
}
 8000c12:	bf00      	nop
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200001f8 	.word	0x200001f8
 8000c24:	20000002 	.word	0x20000002
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000224 	.word	0x20000224

08000c30 <buttonHandle>:

void buttonHandle() {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0

	Button1[0].Current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000c34:	2110      	movs	r1, #16
 8000c36:	481f      	ldr	r0, [pc, #124]	; (8000cb4 <buttonHandle+0x84>)
 8000c38:	f001 fcf0 	bl	800261c <HAL_GPIO_ReadPin>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <buttonHandle+0x88>)
 8000c42:	701a      	strb	r2, [r3, #0]
	if (Button1[0].Last == 0 && Button1[0].Current == 1) {
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <buttonHandle+0x88>)
 8000c46:	785b      	ldrb	r3, [r3, #1]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d109      	bne.n	8000c60 <buttonHandle+0x30>
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <buttonHandle+0x88>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d105      	bne.n	8000c60 <buttonHandle+0x30>
		count += 1;
 8000c54:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <buttonHandle+0x8c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <buttonHandle+0x8c>)
 8000c5e:	701a      	strb	r2, [r3, #0]
	}

	Button1[0].Last = Button1[0].Current;
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <buttonHandle+0x88>)
 8000c62:	781a      	ldrb	r2, [r3, #0]
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <buttonHandle+0x88>)
 8000c66:	705a      	strb	r2, [r3, #1]

	switch (count % 2) {
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <buttonHandle+0x8c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <buttonHandle+0x4a>
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d00e      	beq.n	8000c96 <buttonHandle+0x66>
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
		break;
	}
}
 8000c78:	e019      	b.n	8000cae <buttonHandle+0x7e>
		handleJoystick();
 8000c7a:	f7ff ff81 	bl	8000b80 <handleJoystick>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c84:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <buttonHandle+0x90>)
 8000c86:	f001 fce1 	bl	800264c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <buttonHandle+0x90>)
 8000c90:	f001 fcdc 	bl	800264c <HAL_GPIO_WritePin>
		break;
 8000c94:	e00b      	b.n	8000cae <buttonHandle+0x7e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c9c:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <buttonHandle+0x90>)
 8000c9e:	f001 fcd5 	bl	800264c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <buttonHandle+0x90>)
 8000ca8:	f001 fcd0 	bl	800264c <HAL_GPIO_WritePin>
		break;
 8000cac:	bf00      	nop
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	200001f0 	.word	0x200001f0
 8000cbc:	20000226 	.word	0x20000226
 8000cc0:	40020400 	.word	0x40020400

08000cc4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ccc:	e7fe      	b.n	8000ccc <Error_Handler+0x8>
	...

08000cd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_MspInit+0x4c>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d0e:	2007      	movs	r0, #7
 8000d10:	f000 ff4e 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a2f      	ldr	r2, [pc, #188]	; (8000dfc <HAL_ADC_MspInit+0xdc>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d157      	bne.n	8000df2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <HAL_ADC_MspInit+0xe0>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a2d      	ldr	r2, [pc, #180]	; (8000e00 <HAL_ADC_MspInit+0xe0>)
 8000d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <HAL_ADC_MspInit+0xe0>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <HAL_ADC_MspInit+0xe0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a26      	ldr	r2, [pc, #152]	; (8000e00 <HAL_ADC_MspInit+0xe0>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <HAL_ADC_MspInit+0xe0>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000d7a:	2309      	movs	r3, #9
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	481d      	ldr	r0, [pc, #116]	; (8000e04 <HAL_ADC_MspInit+0xe4>)
 8000d8e:	f001 fac1 	bl	8002314 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d92:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000d94:	4a1d      	ldr	r2, [pc, #116]	; (8000e0c <HAL_ADC_MspInit+0xec>)
 8000d96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000db4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000db8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000dbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dd6:	480c      	ldr	r0, [pc, #48]	; (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000dd8:	f000 ff2c 	bl	8001c34 <HAL_DMA_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000de2:	f7ff ff6f 	bl	8000cc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000dea:	639a      	str	r2, [r3, #56]	; 0x38
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <HAL_ADC_MspInit+0xe8>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	; 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40012000 	.word	0x40012000
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020800 	.word	0x40020800
 8000e08:	20000074 	.word	0x20000074
 8000e0c:	40026410 	.word	0x40026410

08000e10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <HAL_TIM_PWM_MspInit+0x3c>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d10d      	bne.n	8000e3e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_TIM_PWM_MspInit+0x40>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <HAL_TIM_PWM_MspInit+0x40>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <HAL_TIM_PWM_MspInit+0x40>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	40023800 	.word	0x40023800

08000e54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e64:	d115      	bne.n	8000e92 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_TIM_Base_MspInit+0x48>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <HAL_TIM_Base_MspInit+0x48>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_TIM_Base_MspInit+0x48>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	201c      	movs	r0, #28
 8000e88:	f000 fe9d 	bl	8001bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e8c:	201c      	movs	r0, #28
 8000e8e:	f000 feb6 	bl	8001bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a19      	ldr	r2, [pc, #100]	; (8000f24 <HAL_TIM_Encoder_MspInit+0x84>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d12b      	bne.n	8000f1a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000efa:	2303      	movs	r3, #3
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_TIM_Encoder_MspInit+0x8c>)
 8000f16:	f001 f9fd 	bl	8002314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	3728      	adds	r7, #40	; 0x28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40000c00 	.word	0x40000c00
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020000 	.word	0x40020000

08000f30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <HAL_TIM_MspPostInit+0x68>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d11e      	bne.n	8000f90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_TIM_MspPostInit+0x6c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_TIM_MspPostInit+0x6c>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_TIM_MspPostInit+0x6c>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_TIM_MspPostInit+0x70>)
 8000f8c:	f001 f9c2 	bl	8002314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40010000 	.word	0x40010000
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a19      	ldr	r2, [pc, #100]	; (8001028 <HAL_UART_MspInit+0x84>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d12b      	bne.n	800101e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_UART_MspInit+0x88>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_UART_MspInit+0x88>)
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_UART_MspInit+0x88>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_UART_MspInit+0x88>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <HAL_UART_MspInit+0x88>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_UART_MspInit+0x88>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ffe:	230c      	movs	r3, #12
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800100e:	2307      	movs	r3, #7
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <HAL_UART_MspInit+0x8c>)
 800101a:	f001 f97b 	bl	8002314 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40004400 	.word	0x40004400
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <NMI_Handler+0x4>

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f000 f8a4 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <TIM2_IRQHandler+0x10>)
 800108e:	f002 facf 	bl	8003630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000011c 	.word	0x2000011c

0800109c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <DMA2_Stream0_IRQHandler+0x10>)
 80010a2:	f000 fecd 	bl	8001e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000074 	.word	0x20000074

080010b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <SystemInit+0x20>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <SystemInit+0x20>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800110c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010da:	490e      	ldr	r1, [pc, #56]	; (8001114 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010dc:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e0:	e002      	b.n	80010e8 <LoopCopyDataInit>

080010e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e6:	3304      	adds	r3, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ec:	d3f9      	bcc.n	80010e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f0:	4c0b      	ldr	r4, [pc, #44]	; (8001120 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f4:	e001      	b.n	80010fa <LoopFillZerobss>

080010f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f8:	3204      	adds	r2, #4

080010fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010fc:	d3fb      	bcc.n	80010f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010fe:	f7ff ffd7 	bl	80010b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001102:	f003 fbb1 	bl	8004868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001106:	f7ff f9e9 	bl	80004dc <main>
  bx  lr    
 800110a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800110c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001118:	08004908 	.word	0x08004908
  ldr r2, =_sbss
 800111c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001120:	2000022c 	.word	0x2000022c

08001124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC_IRQHandler>
	...

08001128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_Init+0x40>)
 8001132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_Init+0x40>)
 800113e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a07      	ldr	r2, [pc, #28]	; (8001168 <HAL_Init+0x40>)
 800114a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 fd2d 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001156:	2000      	movs	r0, #0
 8001158:	f000 f808 	bl	800116c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800115c:	f7ff fdb8 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023c00 	.word	0x40023c00

0800116c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x54>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x58>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	fbb3 f3f1 	udiv	r3, r3, r1
 8001186:	fbb2 f3f3 	udiv	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fd45 	bl	8001c1a <HAL_SYSTICK_Config>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00e      	b.n	80011b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d80a      	bhi.n	80011b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f000 fd0d 	bl	8001bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ac:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <HAL_InitTick+0x5c>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e000      	b.n	80011b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000004 	.word	0x20000004
 80011c4:	2000000c 	.word	0x2000000c
 80011c8:	20000008 	.word	0x20000008

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	2000000c 	.word	0x2000000c
 80011f0:	20000228 	.word	0x20000228

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000228 	.word	0x20000228

0800120c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e033      	b.n	800128a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	2b00      	cmp	r3, #0
 8001228:	d109      	bne.n	800123e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fd78 	bl	8000d20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 0310 	and.w	r3, r3, #16
 8001246:	2b00      	cmp	r3, #0
 8001248:	d118      	bne.n	800127c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001252:	f023 0302 	bic.w	r3, r3, #2
 8001256:	f043 0202 	orr.w	r2, r3, #2
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fa58 	bl	8001714 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f023 0303 	bic.w	r3, r3, #3
 8001272:	f043 0201 	orr.w	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
 800127a:	e001      	b.n	8001280 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d101      	bne.n	80012b2 <HAL_ADC_Start_DMA+0x1e>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e0ce      	b.n	8001450 <HAL_ADC_Start_DMA+0x1bc>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d018      	beq.n	80012fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0201 	orr.w	r2, r2, #1
 80012d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012d8:	4b5f      	ldr	r3, [pc, #380]	; (8001458 <HAL_ADC_Start_DMA+0x1c4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a5f      	ldr	r2, [pc, #380]	; (800145c <HAL_ADC_Start_DMA+0x1c8>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	0c9a      	lsrs	r2, r3, #18
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012ec:	e002      	b.n	80012f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f9      	bne.n	80012ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001308:	d107      	bne.n	800131a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001318:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b01      	cmp	r3, #1
 8001326:	f040 8086 	bne.w	8001436 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001332:	f023 0301 	bic.w	r3, r3, #1
 8001336:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001354:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001368:	d106      	bne.n	8001378 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f023 0206 	bic.w	r2, r3, #6
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	645a      	str	r2, [r3, #68]	; 0x44
 8001376:	e002      	b.n	800137e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001386:	4b36      	ldr	r3, [pc, #216]	; (8001460 <HAL_ADC_Start_DMA+0x1cc>)
 8001388:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138e:	4a35      	ldr	r2, [pc, #212]	; (8001464 <HAL_ADC_Start_DMA+0x1d0>)
 8001390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001396:	4a34      	ldr	r2, [pc, #208]	; (8001468 <HAL_ADC_Start_DMA+0x1d4>)
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139e:	4a33      	ldr	r2, [pc, #204]	; (800146c <HAL_ADC_Start_DMA+0x1d8>)
 80013a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80013ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	334c      	adds	r3, #76	; 0x4c
 80013d6:	4619      	mov	r1, r3
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f000 fcd8 	bl	8001d90 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 031f 	and.w	r3, r3, #31
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10f      	bne.n	800140c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d129      	bne.n	800144e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	e020      	b.n	800144e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a17      	ldr	r2, [pc, #92]	; (8001470 <HAL_ADC_Start_DMA+0x1dc>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d11b      	bne.n	800144e <HAL_ADC_Start_DMA+0x1ba>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d114      	bne.n	800144e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	e00b      	b.n	800144e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f043 0210 	orr.w	r2, r3, #16
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f043 0201 	orr.w	r2, r3, #1
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000004 	.word	0x20000004
 800145c:	431bde83 	.word	0x431bde83
 8001460:	40012300 	.word	0x40012300
 8001464:	0800190d 	.word	0x0800190d
 8001468:	080019c7 	.word	0x080019c7
 800146c:	080019e3 	.word	0x080019e3
 8001470:	40012000 	.word	0x40012000

08001474 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x1c>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e113      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x244>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b09      	cmp	r3, #9
 80014da:	d925      	bls.n	8001528 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68d9      	ldr	r1, [r3, #12]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	3b1e      	subs	r3, #30
 80014f2:	2207      	movs	r2, #7
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43da      	mvns	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	400a      	ands	r2, r1
 8001500:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68d9      	ldr	r1, [r3, #12]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	4618      	mov	r0, r3
 8001514:	4603      	mov	r3, r0
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4403      	add	r3, r0
 800151a:	3b1e      	subs	r3, #30
 800151c:	409a      	lsls	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	e022      	b.n	800156e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6919      	ldr	r1, [r3, #16]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	b29b      	uxth	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	2207      	movs	r2, #7
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	400a      	ands	r2, r1
 800154a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6919      	ldr	r1, [r3, #16]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4618      	mov	r0, r3
 800155e:	4603      	mov	r3, r0
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4403      	add	r3, r0
 8001564:	409a      	lsls	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b06      	cmp	r3, #6
 8001574:	d824      	bhi.n	80015c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	3b05      	subs	r3, #5
 8001588:	221f      	movs	r2, #31
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	400a      	ands	r2, r1
 8001596:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	4618      	mov	r0, r3
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	3b05      	subs	r3, #5
 80015b2:	fa00 f203 	lsl.w	r2, r0, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	635a      	str	r2, [r3, #52]	; 0x34
 80015be:	e04c      	b.n	800165a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b0c      	cmp	r3, #12
 80015c6:	d824      	bhi.n	8001612 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	3b23      	subs	r3, #35	; 0x23
 80015da:	221f      	movs	r2, #31
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43da      	mvns	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	400a      	ands	r2, r1
 80015e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	3b23      	subs	r3, #35	; 0x23
 8001604:	fa00 f203 	lsl.w	r2, r0, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	631a      	str	r2, [r3, #48]	; 0x30
 8001610:	e023      	b.n	800165a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	3b41      	subs	r3, #65	; 0x41
 8001624:	221f      	movs	r2, #31
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	400a      	ands	r2, r1
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	3b41      	subs	r3, #65	; 0x41
 800164e:	fa00 f203 	lsl.w	r2, r0, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800165a:	4b29      	ldr	r3, [pc, #164]	; (8001700 <HAL_ADC_ConfigChannel+0x250>)
 800165c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a28      	ldr	r2, [pc, #160]	; (8001704 <HAL_ADC_ConfigChannel+0x254>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d10f      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x1d8>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b12      	cmp	r3, #18
 800166e:	d10b      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1d      	ldr	r2, [pc, #116]	; (8001704 <HAL_ADC_ConfigChannel+0x254>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12b      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x23a>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <HAL_ADC_ConfigChannel+0x258>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d003      	beq.n	80016a4 <HAL_ADC_ConfigChannel+0x1f4>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b11      	cmp	r3, #17
 80016a2:	d122      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a11      	ldr	r2, [pc, #68]	; (8001708 <HAL_ADC_ConfigChannel+0x258>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d111      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_ADC_ConfigChannel+0x25c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a11      	ldr	r2, [pc, #68]	; (8001710 <HAL_ADC_ConfigChannel+0x260>)
 80016cc:	fba2 2303 	umull	r2, r3, r2, r3
 80016d0:	0c9a      	lsrs	r2, r3, #18
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016dc:	e002      	b.n	80016e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f9      	bne.n	80016de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40012300 	.word	0x40012300
 8001704:	40012000 	.word	0x40012000
 8001708:	10000012 	.word	0x10000012
 800170c:	20000004 	.word	0x20000004
 8001710:	431bde83 	.word	0x431bde83

08001714 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800171c:	4b79      	ldr	r3, [pc, #484]	; (8001904 <ADC_Init+0x1f0>)
 800171e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	431a      	orrs	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001748:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	021a      	lsls	r2, r3, #8
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800176c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800178e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6899      	ldr	r1, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	4a58      	ldr	r2, [pc, #352]	; (8001908 <ADC_Init+0x1f4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d022      	beq.n	80017f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6899      	ldr	r1, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6899      	ldr	r1, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	e00f      	b.n	8001812 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001810:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0202 	bic.w	r2, r2, #2
 8001820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6899      	ldr	r1, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7e1b      	ldrb	r3, [r3, #24]
 800182c:	005a      	lsls	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d01b      	beq.n	8001878 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800184e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800185e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6859      	ldr	r1, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	3b01      	subs	r3, #1
 800186c:	035a      	lsls	r2, r3, #13
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	e007      	b.n	8001888 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001886:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	051a      	lsls	r2, r3, #20
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6899      	ldr	r1, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ca:	025a      	lsls	r2, r3, #9
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6899      	ldr	r1, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	029a      	lsls	r2, r3, #10
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	609a      	str	r2, [r3, #8]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40012300 	.word	0x40012300
 8001908:	0f000001 	.word	0x0f000001

0800190c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001918:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001922:	2b00      	cmp	r3, #0
 8001924:	d13c      	bne.n	80019a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d12b      	bne.n	8001998 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001944:	2b00      	cmp	r3, #0
 8001946:	d127      	bne.n	8001998 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001952:	2b00      	cmp	r3, #0
 8001954:	d006      	beq.n	8001964 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001960:	2b00      	cmp	r3, #0
 8001962:	d119      	bne.n	8001998 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0220 	bic.w	r2, r2, #32
 8001972:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f043 0201 	orr.w	r2, r3, #1
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff fd6b 	bl	8001474 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800199e:	e00e      	b.n	80019be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7ff fd75 	bl	800149c <HAL_ADC_ErrorCallback>
}
 80019b2:	e004      	b.n	80019be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4798      	blx	r3
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7ff fd57 	bl	8001488 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2240      	movs	r2, #64	; 0x40
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f043 0204 	orr.w	r2, r3, #4
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f7ff fd4a 	bl	800149c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a42:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	60d3      	str	r3, [r2, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <__NVIC_GetPriorityGrouping+0x18>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	f003 0307 	and.w	r3, r3, #7
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	db0b      	blt.n	8001a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	f003 021f 	and.w	r2, r3, #31
 8001a8c:	4907      	ldr	r1, [pc, #28]	; (8001aac <__NVIC_EnableIRQ+0x38>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	2001      	movs	r0, #1
 8001a96:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	; (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	; (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
         );
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b7c:	d301      	bcc.n	8001b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00f      	b.n	8001ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <SysTick_Config+0x40>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f7ff ff8e 	bl	8001ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <SysTick_Config+0x40>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <SysTick_Config+0x40>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	e000e010 	.word	0xe000e010

08001bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff29 	bl	8001a10 <__NVIC_SetPriorityGrouping>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd8:	f7ff ff3e 	bl	8001a58 <__NVIC_GetPriorityGrouping>
 8001bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f7ff ff8e 	bl	8001b04 <NVIC_EncodePriority>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff5d 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff31 	bl	8001a74 <__NVIC_EnableIRQ>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ffa2 	bl	8001b6c <SysTick_Config>
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f7ff fad8 	bl	80011f4 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e099      	b.n	8001d84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c70:	e00f      	b.n	8001c92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c72:	f7ff fabf 	bl	80011f4 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d908      	bls.n	8001c92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2220      	movs	r2, #32
 8001c84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2203      	movs	r2, #3
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e078      	b.n	8001d84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1e8      	bne.n	8001c72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <HAL_DMA_Init+0x158>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d107      	bne.n	8001cfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f023 0307 	bic.w	r3, r3, #7
 8001d12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d117      	bne.n	8001d56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00e      	beq.n	8001d56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fa6f 	bl	800221c <DMA_CheckFifoParam>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d008      	beq.n	8001d56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2240      	movs	r2, #64	; 0x40
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d52:	2301      	movs	r3, #1
 8001d54:	e016      	b.n	8001d84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 fa26 	bl	80021b0 <DMA_CalcBaseAndBitshift>
 8001d64:	4603      	mov	r3, r0
 8001d66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	223f      	movs	r2, #63	; 0x3f
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	f010803f 	.word	0xf010803f

08001d90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_DMA_Start_IT+0x26>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e040      	b.n	8001e38 <HAL_DMA_Start_IT+0xa8>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d12f      	bne.n	8001e2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f9b8 	bl	8002154 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	223f      	movs	r2, #63	; 0x3f
 8001dea:	409a      	lsls	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0216 	orr.w	r2, r2, #22
 8001dfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d007      	beq.n	8001e18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0208 	orr.w	r2, r2, #8
 8001e16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	e005      	b.n	8001e36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e32:	2302      	movs	r3, #2
 8001e34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e4c:	4b8e      	ldr	r3, [pc, #568]	; (8002088 <HAL_DMA_IRQHandler+0x248>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a8e      	ldr	r2, [pc, #568]	; (800208c <HAL_DMA_IRQHandler+0x24c>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	0a9b      	lsrs	r3, r3, #10
 8001e58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d01a      	beq.n	8001eac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0204 	bic.w	r2, r2, #4
 8001e92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	2208      	movs	r2, #8
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea4:	f043 0201 	orr.w	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d012      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00b      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	2201      	movs	r2, #1
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	f043 0202 	orr.w	r2, r3, #2
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d012      	beq.n	8001f18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00b      	beq.n	8001f18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	2204      	movs	r2, #4
 8001f06:	409a      	lsls	r2, r3
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	f043 0204 	orr.w	r2, r3, #4
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d043      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d03c      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3a:	2210      	movs	r2, #16
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d018      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d108      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d024      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	4798      	blx	r3
 8001f6e:	e01f      	b.n	8001fb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01b      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	4798      	blx	r3
 8001f80:	e016      	b.n	8001fb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0208 	bic.w	r2, r2, #8
 8001f9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 808f 	beq.w	80020e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 8087 	beq.w	80020e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b05      	cmp	r3, #5
 8001fe8:	d136      	bne.n	8002058 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0216 	bic.w	r2, r2, #22
 8001ff8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002008:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d103      	bne.n	800201a <HAL_DMA_IRQHandler+0x1da>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0208 	bic.w	r2, r2, #8
 8002028:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202e:	223f      	movs	r2, #63	; 0x3f
 8002030:	409a      	lsls	r2, r3
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800204a:	2b00      	cmp	r3, #0
 800204c:	d07e      	beq.n	800214c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	4798      	blx	r3
        }
        return;
 8002056:	e079      	b.n	800214c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d01d      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10d      	bne.n	8002090 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	2b00      	cmp	r3, #0
 800207a:	d031      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
 8002084:	e02c      	b.n	80020e0 <HAL_DMA_IRQHandler+0x2a0>
 8002086:	bf00      	nop
 8002088:	20000004 	.word	0x20000004
 800208c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d023      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
 80020a0:	e01e      	b.n	80020e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10f      	bne.n	80020d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0210 	bic.w	r2, r2, #16
 80020be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d032      	beq.n	800214e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d022      	beq.n	800213a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2205      	movs	r2, #5
 80020f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0201 	bic.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	3301      	adds	r3, #1
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	429a      	cmp	r2, r3
 8002116:	d307      	bcc.n	8002128 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f2      	bne.n	800210c <HAL_DMA_IRQHandler+0x2cc>
 8002126:	e000      	b.n	800212a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002128:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	4798      	blx	r3
 800214a:	e000      	b.n	800214e <HAL_DMA_IRQHandler+0x30e>
        return;
 800214c:	bf00      	nop
    }
  }
}
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002170:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b40      	cmp	r3, #64	; 0x40
 8002180:	d108      	bne.n	8002194 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002192:	e007      	b.n	80021a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	60da      	str	r2, [r3, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	3b10      	subs	r3, #16
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <DMA_CalcBaseAndBitshift+0x64>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ca:	4a13      	ldr	r2, [pc, #76]	; (8002218 <DMA_CalcBaseAndBitshift+0x68>)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4413      	add	r3, r2
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d909      	bls.n	80021f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021e6:	f023 0303 	bic.w	r3, r3, #3
 80021ea:	1d1a      	adds	r2, r3, #4
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	659a      	str	r2, [r3, #88]	; 0x58
 80021f0:	e007      	b.n	8002202 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021fa:	f023 0303 	bic.w	r3, r3, #3
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	aaaaaaab 	.word	0xaaaaaaab
 8002218:	080048f0 	.word	0x080048f0

0800221c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d11f      	bne.n	8002276 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d856      	bhi.n	80022ea <DMA_CheckFifoParam+0xce>
 800223c:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <DMA_CheckFifoParam+0x28>)
 800223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002242:	bf00      	nop
 8002244:	08002255 	.word	0x08002255
 8002248:	08002267 	.word	0x08002267
 800224c:	08002255 	.word	0x08002255
 8002250:	080022eb 	.word	0x080022eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d046      	beq.n	80022ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002264:	e043      	b.n	80022ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800226e:	d140      	bne.n	80022f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002274:	e03d      	b.n	80022f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800227e:	d121      	bne.n	80022c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b03      	cmp	r3, #3
 8002284:	d837      	bhi.n	80022f6 <DMA_CheckFifoParam+0xda>
 8002286:	a201      	add	r2, pc, #4	; (adr r2, 800228c <DMA_CheckFifoParam+0x70>)
 8002288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228c:	0800229d 	.word	0x0800229d
 8002290:	080022a3 	.word	0x080022a3
 8002294:	0800229d 	.word	0x0800229d
 8002298:	080022b5 	.word	0x080022b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
      break;
 80022a0:	e030      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d025      	beq.n	80022fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b2:	e022      	b.n	80022fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022bc:	d11f      	bne.n	80022fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022c2:	e01c      	b.n	80022fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d903      	bls.n	80022d2 <DMA_CheckFifoParam+0xb6>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d003      	beq.n	80022d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022d0:	e018      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
      break;
 80022d6:	e015      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00e      	beq.n	8002302 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
      break;
 80022e8:	e00b      	b.n	8002302 <DMA_CheckFifoParam+0xe6>
      break;
 80022ea:	bf00      	nop
 80022ec:	e00a      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
      break;
 80022ee:	bf00      	nop
 80022f0:	e008      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
      break;
 80022f2:	bf00      	nop
 80022f4:	e006      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
      break;
 80022f6:	bf00      	nop
 80022f8:	e004      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
      break;
 80022fa:	bf00      	nop
 80022fc:	e002      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
      break;   
 80022fe:	bf00      	nop
 8002300:	e000      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
      break;
 8002302:	bf00      	nop
    }
  } 
  
  return status; 
 8002304:	7bfb      	ldrb	r3, [r7, #15]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop

08002314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	e159      	b.n	80025e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002330:	2201      	movs	r2, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	429a      	cmp	r2, r3
 800234a:	f040 8148 	bne.w	80025de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d005      	beq.n	8002366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002362:	2b02      	cmp	r3, #2
 8002364:	d130      	bne.n	80023c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2203      	movs	r2, #3
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800239c:	2201      	movs	r2, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f003 0201 	and.w	r2, r3, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d017      	beq.n	8002404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d123      	bne.n	8002458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	08da      	lsrs	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3208      	adds	r2, #8
 8002418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	220f      	movs	r2, #15
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	69b9      	ldr	r1, [r7, #24]
 8002454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	2203      	movs	r2, #3
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0203 	and.w	r2, r3, #3
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80a2 	beq.w	80025de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b57      	ldr	r3, [pc, #348]	; (80025fc <HAL_GPIO_Init+0x2e8>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	4a56      	ldr	r2, [pc, #344]	; (80025fc <HAL_GPIO_Init+0x2e8>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	; 0x44
 80024aa:	4b54      	ldr	r3, [pc, #336]	; (80025fc <HAL_GPIO_Init+0x2e8>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b6:	4a52      	ldr	r2, [pc, #328]	; (8002600 <HAL_GPIO_Init+0x2ec>)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	3302      	adds	r3, #2
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	220f      	movs	r2, #15
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a49      	ldr	r2, [pc, #292]	; (8002604 <HAL_GPIO_Init+0x2f0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d019      	beq.n	8002516 <HAL_GPIO_Init+0x202>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a48      	ldr	r2, [pc, #288]	; (8002608 <HAL_GPIO_Init+0x2f4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d013      	beq.n	8002512 <HAL_GPIO_Init+0x1fe>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a47      	ldr	r2, [pc, #284]	; (800260c <HAL_GPIO_Init+0x2f8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00d      	beq.n	800250e <HAL_GPIO_Init+0x1fa>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a46      	ldr	r2, [pc, #280]	; (8002610 <HAL_GPIO_Init+0x2fc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <HAL_GPIO_Init+0x1f6>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a45      	ldr	r2, [pc, #276]	; (8002614 <HAL_GPIO_Init+0x300>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_GPIO_Init+0x1f2>
 8002502:	2304      	movs	r3, #4
 8002504:	e008      	b.n	8002518 <HAL_GPIO_Init+0x204>
 8002506:	2307      	movs	r3, #7
 8002508:	e006      	b.n	8002518 <HAL_GPIO_Init+0x204>
 800250a:	2303      	movs	r3, #3
 800250c:	e004      	b.n	8002518 <HAL_GPIO_Init+0x204>
 800250e:	2302      	movs	r3, #2
 8002510:	e002      	b.n	8002518 <HAL_GPIO_Init+0x204>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_GPIO_Init+0x204>
 8002516:	2300      	movs	r3, #0
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	f002 0203 	and.w	r2, r2, #3
 800251e:	0092      	lsls	r2, r2, #2
 8002520:	4093      	lsls	r3, r2
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002528:	4935      	ldr	r1, [pc, #212]	; (8002600 <HAL_GPIO_Init+0x2ec>)
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	3302      	adds	r3, #2
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002536:	4b38      	ldr	r3, [pc, #224]	; (8002618 <HAL_GPIO_Init+0x304>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800255a:	4a2f      	ldr	r2, [pc, #188]	; (8002618 <HAL_GPIO_Init+0x304>)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002560:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <HAL_GPIO_Init+0x304>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002584:	4a24      	ldr	r2, [pc, #144]	; (8002618 <HAL_GPIO_Init+0x304>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_GPIO_Init+0x304>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ae:	4a1a      	ldr	r2, [pc, #104]	; (8002618 <HAL_GPIO_Init+0x304>)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b4:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HAL_GPIO_Init+0x304>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d8:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <HAL_GPIO_Init+0x304>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3301      	adds	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2b0f      	cmp	r3, #15
 80025e8:	f67f aea2 	bls.w	8002330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3724      	adds	r7, #36	; 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	40013800 	.word	0x40013800
 8002604:	40020000 	.word	0x40020000
 8002608:	40020400 	.word	0x40020400
 800260c:	40020800 	.word	0x40020800
 8002610:	40020c00 	.word	0x40020c00
 8002614:	40021000 	.word	0x40021000
 8002618:	40013c00 	.word	0x40013c00

0800261c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	887b      	ldrh	r3, [r7, #2]
 800262e:	4013      	ands	r3, r2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	e001      	b.n	800263e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800263e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002668:	e003      	b.n	8002672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e267      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d075      	beq.n	800278a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800269e:	4b88      	ldr	r3, [pc, #544]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d00c      	beq.n	80026c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026aa:	4b85      	ldr	r3, [pc, #532]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d112      	bne.n	80026dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b6:	4b82      	ldr	r3, [pc, #520]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c2:	d10b      	bne.n	80026dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c4:	4b7e      	ldr	r3, [pc, #504]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d05b      	beq.n	8002788 <HAL_RCC_OscConfig+0x108>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d157      	bne.n	8002788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e242      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e4:	d106      	bne.n	80026f4 <HAL_RCC_OscConfig+0x74>
 80026e6:	4b76      	ldr	r3, [pc, #472]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a75      	ldr	r2, [pc, #468]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e01d      	b.n	8002730 <HAL_RCC_OscConfig+0xb0>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0x98>
 80026fe:	4b70      	ldr	r3, [pc, #448]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a6f      	ldr	r2, [pc, #444]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	4b6d      	ldr	r3, [pc, #436]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6c      	ldr	r2, [pc, #432]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e00b      	b.n	8002730 <HAL_RCC_OscConfig+0xb0>
 8002718:	4b69      	ldr	r3, [pc, #420]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a68      	ldr	r2, [pc, #416]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800271e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b66      	ldr	r3, [pc, #408]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a65      	ldr	r2, [pc, #404]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800272a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d013      	beq.n	8002760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe fd5c 	bl	80011f4 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002740:	f7fe fd58 	bl	80011f4 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e207      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	4b5b      	ldr	r3, [pc, #364]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0xc0>
 800275e:	e014      	b.n	800278a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7fe fd48 	bl	80011f4 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002768:	f7fe fd44 	bl	80011f4 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e1f3      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277a:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0xe8>
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d063      	beq.n	800285e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002796:	4b4a      	ldr	r3, [pc, #296]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d11c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ae:	4b44      	ldr	r3, [pc, #272]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d116      	bne.n	80027e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_RCC_OscConfig+0x152>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e1c7      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4937      	ldr	r1, [pc, #220]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e6:	e03a      	b.n	800285e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f0:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <HAL_RCC_OscConfig+0x244>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f6:	f7fe fcfd 	bl	80011f4 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fe:	f7fe fcf9 	bl	80011f4 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e1a8      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002810:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4925      	ldr	r1, [pc, #148]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
 8002830:	e015      	b.n	800285e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_RCC_OscConfig+0x244>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe fcdc 	bl	80011f4 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002840:	f7fe fcd8 	bl	80011f4 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e187      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d036      	beq.n	80028d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <HAL_RCC_OscConfig+0x248>)
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7fe fcbc 	bl	80011f4 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002880:	f7fe fcb8 	bl	80011f4 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e167      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x200>
 800289e:	e01b      	b.n	80028d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCC_OscConfig+0x248>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a6:	f7fe fca5 	bl	80011f4 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ac:	e00e      	b.n	80028cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ae:	f7fe fca1 	bl	80011f4 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d907      	bls.n	80028cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e150      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
 80028c0:	40023800 	.word	0x40023800
 80028c4:	42470000 	.word	0x42470000
 80028c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028cc:	4b88      	ldr	r3, [pc, #544]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 80028ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ea      	bne.n	80028ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8097 	beq.w	8002a14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ea:	4b81      	ldr	r3, [pc, #516]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	4b7d      	ldr	r3, [pc, #500]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a7c      	ldr	r2, [pc, #496]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b7a      	ldr	r3, [pc, #488]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002912:	2301      	movs	r3, #1
 8002914:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002916:	4b77      	ldr	r3, [pc, #476]	; (8002af4 <HAL_RCC_OscConfig+0x474>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d118      	bne.n	8002954 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002922:	4b74      	ldr	r3, [pc, #464]	; (8002af4 <HAL_RCC_OscConfig+0x474>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a73      	ldr	r2, [pc, #460]	; (8002af4 <HAL_RCC_OscConfig+0x474>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292e:	f7fe fc61 	bl	80011f4 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002936:	f7fe fc5d 	bl	80011f4 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e10c      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	4b6a      	ldr	r3, [pc, #424]	; (8002af4 <HAL_RCC_OscConfig+0x474>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x2ea>
 800295c:	4b64      	ldr	r3, [pc, #400]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	4a63      	ldr	r2, [pc, #396]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6713      	str	r3, [r2, #112]	; 0x70
 8002968:	e01c      	b.n	80029a4 <HAL_RCC_OscConfig+0x324>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b05      	cmp	r3, #5
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x30c>
 8002972:	4b5f      	ldr	r3, [pc, #380]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	4a5e      	ldr	r2, [pc, #376]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	6713      	str	r3, [r2, #112]	; 0x70
 800297e:	4b5c      	ldr	r3, [pc, #368]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	4a5b      	ldr	r2, [pc, #364]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6713      	str	r3, [r2, #112]	; 0x70
 800298a:	e00b      	b.n	80029a4 <HAL_RCC_OscConfig+0x324>
 800298c:	4b58      	ldr	r3, [pc, #352]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4a57      	ldr	r2, [pc, #348]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	6713      	str	r3, [r2, #112]	; 0x70
 8002998:	4b55      	ldr	r3, [pc, #340]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a54      	ldr	r2, [pc, #336]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 800299e:	f023 0304 	bic.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d015      	beq.n	80029d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7fe fc22 	bl	80011f4 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b4:	f7fe fc1e 	bl	80011f4 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e0cb      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ca:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0ee      	beq.n	80029b4 <HAL_RCC_OscConfig+0x334>
 80029d6:	e014      	b.n	8002a02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d8:	f7fe fc0c 	bl	80011f4 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7fe fc08 	bl	80011f4 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e0b5      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f6:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1ee      	bne.n	80029e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a08:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	4a38      	ldr	r2, [pc, #224]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80a1 	beq.w	8002b60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a1e:	4b34      	ldr	r3, [pc, #208]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d05c      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d141      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fbdc 	bl	80011f4 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe fbd8 	bl	80011f4 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e087      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	019b      	lsls	r3, r3, #6
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	3b01      	subs	r3, #1
 8002a78:	041b      	lsls	r3, r3, #16
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	491b      	ldr	r1, [pc, #108]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a88:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8e:	f7fe fbb1 	bl	80011f4 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a96:	f7fe fbad 	bl	80011f4 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e05c      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x416>
 8002ab4:	e054      	b.n	8002b60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe fb9a 	bl	80011f4 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe fb96 	bl	80011f4 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e045      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x444>
 8002ae2:	e03d      	b.n	8002b60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e038      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40007000 	.word	0x40007000
 8002af8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <HAL_RCC_OscConfig+0x4ec>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d028      	beq.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d121      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d11a      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d111      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	085b      	lsrs	r3, r3, #1
 8002b44:	3b01      	subs	r3, #1
 8002b46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d107      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800

08002b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0cc      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b84:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d90c      	bls.n	8002bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b92:	4b65      	ldr	r3, [pc, #404]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9a:	4b63      	ldr	r3, [pc, #396]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0b8      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d020      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc4:	4b59      	ldr	r3, [pc, #356]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4a58      	ldr	r2, [pc, #352]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bdc:	4b53      	ldr	r3, [pc, #332]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	4a52      	ldr	r2, [pc, #328]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be8:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	494d      	ldr	r1, [pc, #308]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d044      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d119      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e07f      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d003      	beq.n	8002c2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2e:	4b3f      	ldr	r3, [pc, #252]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e06f      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e067      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c4e:	4b37      	ldr	r3, [pc, #220]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f023 0203 	bic.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4934      	ldr	r1, [pc, #208]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c60:	f7fe fac8 	bl	80011f4 <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c68:	f7fe fac4 	bl	80011f4 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e04f      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7e:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 020c 	and.w	r2, r3, #12
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d1eb      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c90:	4b25      	ldr	r3, [pc, #148]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d20c      	bcs.n	8002cb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e032      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc4:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4916      	ldr	r1, [pc, #88]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	490e      	ldr	r1, [pc, #56]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cf6:	f000 f821 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	490a      	ldr	r1, [pc, #40]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002d08:	5ccb      	ldrb	r3, [r1, r3]
 8002d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0e:	4a09      	ldr	r2, [pc, #36]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0x1c8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe fa28 	bl	800116c <HAL_InitTick>

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40023c00 	.word	0x40023c00
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	080048d8 	.word	0x080048d8
 8002d34:	20000004 	.word	0x20000004
 8002d38:	20000008 	.word	0x20000008

08002d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d40:	b094      	sub	sp, #80	; 0x50
 8002d42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	647b      	str	r3, [r7, #68]	; 0x44
 8002d48:	2300      	movs	r3, #0
 8002d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d54:	4b79      	ldr	r3, [pc, #484]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d00d      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x40>
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	f200 80e1 	bhi.w	8002f28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x34>
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d003      	beq.n	8002d76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d6e:	e0db      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4b73      	ldr	r3, [pc, #460]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d74:	e0db      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d76:	4b73      	ldr	r3, [pc, #460]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d7a:	e0d8      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d7c:	4b6f      	ldr	r3, [pc, #444]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d86:	4b6d      	ldr	r3, [pc, #436]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d063      	beq.n	8002e5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d92:	4b6a      	ldr	r3, [pc, #424]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	099b      	lsrs	r3, r3, #6
 8002d98:	2200      	movs	r2, #0
 8002d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30
 8002da6:	2300      	movs	r3, #0
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34
 8002daa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002dae:	4622      	mov	r2, r4
 8002db0:	462b      	mov	r3, r5
 8002db2:	f04f 0000 	mov.w	r0, #0
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	0159      	lsls	r1, r3, #5
 8002dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc0:	0150      	lsls	r0, r2, #5
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	1a51      	subs	r1, r2, r1
 8002dca:	6139      	str	r1, [r7, #16]
 8002dcc:	4629      	mov	r1, r5
 8002dce:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002de0:	4659      	mov	r1, fp
 8002de2:	018b      	lsls	r3, r1, #6
 8002de4:	4651      	mov	r1, sl
 8002de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dea:	4651      	mov	r1, sl
 8002dec:	018a      	lsls	r2, r1, #6
 8002dee:	4651      	mov	r1, sl
 8002df0:	ebb2 0801 	subs.w	r8, r2, r1
 8002df4:	4659      	mov	r1, fp
 8002df6:	eb63 0901 	sbc.w	r9, r3, r1
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e0e:	4690      	mov	r8, r2
 8002e10:	4699      	mov	r9, r3
 8002e12:	4623      	mov	r3, r4
 8002e14:	eb18 0303 	adds.w	r3, r8, r3
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	462b      	mov	r3, r5
 8002e1c:	eb49 0303 	adc.w	r3, r9, r3
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e2e:	4629      	mov	r1, r5
 8002e30:	024b      	lsls	r3, r1, #9
 8002e32:	4621      	mov	r1, r4
 8002e34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e38:	4621      	mov	r1, r4
 8002e3a:	024a      	lsls	r2, r1, #9
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e42:	2200      	movs	r2, #0
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e4c:	f7fd f9c4 	bl	80001d8 <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4613      	mov	r3, r2
 8002e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e58:	e058      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5a:	4b38      	ldr	r3, [pc, #224]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	099b      	lsrs	r3, r3, #6
 8002e60:	2200      	movs	r2, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	4611      	mov	r1, r2
 8002e66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e6a:	623b      	str	r3, [r7, #32]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e74:	4642      	mov	r2, r8
 8002e76:	464b      	mov	r3, r9
 8002e78:	f04f 0000 	mov.w	r0, #0
 8002e7c:	f04f 0100 	mov.w	r1, #0
 8002e80:	0159      	lsls	r1, r3, #5
 8002e82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e86:	0150      	lsls	r0, r2, #5
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4641      	mov	r1, r8
 8002e8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e92:	4649      	mov	r1, r9
 8002e94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ea4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ea8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002eac:	ebb2 040a 	subs.w	r4, r2, sl
 8002eb0:	eb63 050b 	sbc.w	r5, r3, fp
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	00eb      	lsls	r3, r5, #3
 8002ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ec2:	00e2      	lsls	r2, r4, #3
 8002ec4:	4614      	mov	r4, r2
 8002ec6:	461d      	mov	r5, r3
 8002ec8:	4643      	mov	r3, r8
 8002eca:	18e3      	adds	r3, r4, r3
 8002ecc:	603b      	str	r3, [r7, #0]
 8002ece:	464b      	mov	r3, r9
 8002ed0:	eb45 0303 	adc.w	r3, r5, r3
 8002ed4:	607b      	str	r3, [r7, #4]
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	028b      	lsls	r3, r1, #10
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eec:	4621      	mov	r1, r4
 8002eee:	028a      	lsls	r2, r1, #10
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	61fa      	str	r2, [r7, #28]
 8002efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f00:	f7fd f96a 	bl	80001d8 <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4613      	mov	r3, r2
 8002f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	3301      	adds	r3, #1
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f26:	e002      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3750      	adds	r7, #80	; 0x50
 8002f34:	46bd      	mov	sp, r7
 8002f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	007a1200 	.word	0x007a1200

08002f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000004 	.word	0x20000004

08002f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f64:	f7ff fff0 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0a9b      	lsrs	r3, r3, #10
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4903      	ldr	r1, [pc, #12]	; (8002f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	080048e8 	.word	0x080048e8

08002f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f8c:	f7ff ffdc 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0b5b      	lsrs	r3, r3, #13
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4903      	ldr	r1, [pc, #12]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	080048e8 	.word	0x080048e8

08002fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e041      	b.n	8003046 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fd ff3c 	bl	8000e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3304      	adds	r3, #4
 8002fec:	4619      	mov	r1, r3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	f000 fdd8 	bl	8003ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d001      	beq.n	8003068 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e03c      	b.n	80030e2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1e      	ldr	r2, [pc, #120]	; (80030f0 <HAL_TIM_Base_Start+0xa0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d018      	beq.n	80030ac <HAL_TIM_Base_Start+0x5c>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003082:	d013      	beq.n	80030ac <HAL_TIM_Base_Start+0x5c>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <HAL_TIM_Base_Start+0xa4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00e      	beq.n	80030ac <HAL_TIM_Base_Start+0x5c>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <HAL_TIM_Base_Start+0xa8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d009      	beq.n	80030ac <HAL_TIM_Base_Start+0x5c>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a17      	ldr	r2, [pc, #92]	; (80030fc <HAL_TIM_Base_Start+0xac>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d004      	beq.n	80030ac <HAL_TIM_Base_Start+0x5c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a16      	ldr	r2, [pc, #88]	; (8003100 <HAL_TIM_Base_Start+0xb0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d111      	bne.n	80030d0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b06      	cmp	r3, #6
 80030bc:	d010      	beq.n	80030e0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ce:	e007      	b.n	80030e0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40010000 	.word	0x40010000
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40000800 	.word	0x40000800
 80030fc:	40000c00 	.word	0x40000c00
 8003100:	40014000 	.word	0x40014000

08003104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d001      	beq.n	800311c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e044      	b.n	80031a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d018      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x6c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003146:	d013      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x6c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1a      	ldr	r2, [pc, #104]	; (80031b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00e      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x6c>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a19      	ldr	r2, [pc, #100]	; (80031bc <HAL_TIM_Base_Start_IT+0xb8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d009      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x6c>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a17      	ldr	r2, [pc, #92]	; (80031c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d004      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x6c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a16      	ldr	r2, [pc, #88]	; (80031c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d111      	bne.n	8003194 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b06      	cmp	r3, #6
 8003180:	d010      	beq.n	80031a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0201 	orr.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003192:	e007      	b.n	80031a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40010000 	.word	0x40010000
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800
 80031c0:	40000c00 	.word	0x40000c00
 80031c4:	40014000 	.word	0x40014000

080031c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e041      	b.n	800325e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fd fe0e 	bl	8000e10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f000 fccc 	bl	8003ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <HAL_TIM_PWM_Start+0x24>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e022      	b.n	80032d2 <HAL_TIM_PWM_Start+0x6a>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b04      	cmp	r3, #4
 8003290:	d109      	bne.n	80032a6 <HAL_TIM_PWM_Start+0x3e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	bf14      	ite	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	2300      	moveq	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	e015      	b.n	80032d2 <HAL_TIM_PWM_Start+0x6a>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d109      	bne.n	80032c0 <HAL_TIM_PWM_Start+0x58>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e008      	b.n	80032d2 <HAL_TIM_PWM_Start+0x6a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	bf14      	ite	ne
 80032cc:	2301      	movne	r3, #1
 80032ce:	2300      	moveq	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e068      	b.n	80033ac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d104      	bne.n	80032ea <HAL_TIM_PWM_Start+0x82>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e8:	e013      	b.n	8003312 <HAL_TIM_PWM_Start+0xaa>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d104      	bne.n	80032fa <HAL_TIM_PWM_Start+0x92>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f8:	e00b      	b.n	8003312 <HAL_TIM_PWM_Start+0xaa>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d104      	bne.n	800330a <HAL_TIM_PWM_Start+0xa2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003308:	e003      	b.n	8003312 <HAL_TIM_PWM_Start+0xaa>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2201      	movs	r2, #1
 8003318:	6839      	ldr	r1, [r7, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fee8 	bl	80040f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a23      	ldr	r2, [pc, #140]	; (80033b4 <HAL_TIM_PWM_Start+0x14c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d107      	bne.n	800333a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003338:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a1d      	ldr	r2, [pc, #116]	; (80033b4 <HAL_TIM_PWM_Start+0x14c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d018      	beq.n	8003376 <HAL_TIM_PWM_Start+0x10e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334c:	d013      	beq.n	8003376 <HAL_TIM_PWM_Start+0x10e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <HAL_TIM_PWM_Start+0x150>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00e      	beq.n	8003376 <HAL_TIM_PWM_Start+0x10e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a17      	ldr	r2, [pc, #92]	; (80033bc <HAL_TIM_PWM_Start+0x154>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d009      	beq.n	8003376 <HAL_TIM_PWM_Start+0x10e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a16      	ldr	r2, [pc, #88]	; (80033c0 <HAL_TIM_PWM_Start+0x158>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d004      	beq.n	8003376 <HAL_TIM_PWM_Start+0x10e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a14      	ldr	r2, [pc, #80]	; (80033c4 <HAL_TIM_PWM_Start+0x15c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d111      	bne.n	800339a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b06      	cmp	r3, #6
 8003386:	d010      	beq.n	80033aa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003398:	e007      	b.n	80033aa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40010000 	.word	0x40010000
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40000800 	.word	0x40000800
 80033c0:	40000c00 	.word	0x40000c00
 80033c4:	40014000 	.word	0x40014000

080033c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e097      	b.n	800350c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d106      	bne.n	80033f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7fd fd55 	bl	8000ea0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800340c:	f023 0307 	bic.w	r3, r3, #7
 8003410:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3304      	adds	r3, #4
 800341a:	4619      	mov	r1, r3
 800341c:	4610      	mov	r0, r2
 800341e:	f000 fbc1 	bl	8003ba4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	4313      	orrs	r3, r2
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003468:	f023 030c 	bic.w	r3, r3, #12
 800346c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003474:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003478:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	4313      	orrs	r3, r2
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	011a      	lsls	r2, r3, #4
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	031b      	lsls	r3, r3, #12
 8003498:	4313      	orrs	r3, r2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80034a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80034ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	4313      	orrs	r3, r2
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3718      	adds	r7, #24
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003524:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800352c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003534:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800353c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d110      	bne.n	8003566 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d102      	bne.n	8003550 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800354a:	7b7b      	ldrb	r3, [r7, #13]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d001      	beq.n	8003554 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e069      	b.n	8003628 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003564:	e031      	b.n	80035ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b04      	cmp	r3, #4
 800356a:	d110      	bne.n	800358e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800356c:	7bbb      	ldrb	r3, [r7, #14]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d102      	bne.n	8003578 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003572:	7b3b      	ldrb	r3, [r7, #12]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d001      	beq.n	800357c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e055      	b.n	8003628 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800358c:	e01d      	b.n	80035ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d108      	bne.n	80035a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003594:	7bbb      	ldrb	r3, [r7, #14]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d105      	bne.n	80035a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800359a:	7b7b      	ldrb	r3, [r7, #13]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d102      	bne.n	80035a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80035a0:	7b3b      	ldrb	r3, [r7, #12]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d001      	beq.n	80035aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e03e      	b.n	8003628 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2202      	movs	r2, #2
 80035be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2202      	movs	r2, #2
 80035c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_TIM_Encoder_Start+0xc4>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d008      	beq.n	80035e8 <HAL_TIM_Encoder_Start+0xd4>
 80035d6:	e00f      	b.n	80035f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2201      	movs	r2, #1
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fd85 	bl	80040f0 <TIM_CCxChannelCmd>
      break;
 80035e6:	e016      	b.n	8003616 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2201      	movs	r2, #1
 80035ee:	2104      	movs	r1, #4
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fd7d 	bl	80040f0 <TIM_CCxChannelCmd>
      break;
 80035f6:	e00e      	b.n	8003616 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2201      	movs	r2, #1
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fd75 	bl	80040f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2201      	movs	r2, #1
 800360c:	2104      	movs	r1, #4
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fd6e 	bl	80040f0 <TIM_CCxChannelCmd>
      break;
 8003614:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b02      	cmp	r3, #2
 8003644:	d122      	bne.n	800368c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b02      	cmp	r3, #2
 8003652:	d11b      	bne.n	800368c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0202 	mvn.w	r2, #2
 800365c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fa77 	bl	8003b66 <HAL_TIM_IC_CaptureCallback>
 8003678:	e005      	b.n	8003686 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fa69 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fa7a 	bl	8003b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b04      	cmp	r3, #4
 8003698:	d122      	bne.n	80036e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d11b      	bne.n	80036e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0204 	mvn.w	r2, #4
 80036b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2202      	movs	r2, #2
 80036b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fa4d 	bl	8003b66 <HAL_TIM_IC_CaptureCallback>
 80036cc:	e005      	b.n	80036da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fa3f 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fa50 	bl	8003b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d122      	bne.n	8003734 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d11b      	bne.n	8003734 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0208 	mvn.w	r2, #8
 8003704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2204      	movs	r2, #4
 800370a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fa23 	bl	8003b66 <HAL_TIM_IC_CaptureCallback>
 8003720:	e005      	b.n	800372e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fa15 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fa26 	bl	8003b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b10      	cmp	r3, #16
 8003740:	d122      	bne.n	8003788 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b10      	cmp	r3, #16
 800374e:	d11b      	bne.n	8003788 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0210 	mvn.w	r2, #16
 8003758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2208      	movs	r2, #8
 800375e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f9f9 	bl	8003b66 <HAL_TIM_IC_CaptureCallback>
 8003774:	e005      	b.n	8003782 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f9eb 	bl	8003b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f9fc 	bl	8003b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b01      	cmp	r3, #1
 8003794:	d10e      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d107      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0201 	mvn.w	r2, #1
 80037ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fd f9a2 	bl	8000af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	2b80      	cmp	r3, #128	; 0x80
 80037c0:	d10e      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037cc:	2b80      	cmp	r3, #128	; 0x80
 80037ce:	d107      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fd78 	bl	80042d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ea:	2b40      	cmp	r3, #64	; 0x40
 80037ec:	d10e      	bne.n	800380c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f8:	2b40      	cmp	r3, #64	; 0x40
 80037fa:	d107      	bne.n	800380c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f9c1 	bl	8003b8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b20      	cmp	r3, #32
 8003818:	d10e      	bne.n	8003838 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b20      	cmp	r3, #32
 8003826:	d107      	bne.n	8003838 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0220 	mvn.w	r2, #32
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fd42 	bl	80042bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800385a:	2302      	movs	r3, #2
 800385c:	e0ae      	b.n	80039bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b0c      	cmp	r3, #12
 800386a:	f200 809f 	bhi.w	80039ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800386e:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003874:	080038a9 	.word	0x080038a9
 8003878:	080039ad 	.word	0x080039ad
 800387c:	080039ad 	.word	0x080039ad
 8003880:	080039ad 	.word	0x080039ad
 8003884:	080038e9 	.word	0x080038e9
 8003888:	080039ad 	.word	0x080039ad
 800388c:	080039ad 	.word	0x080039ad
 8003890:	080039ad 	.word	0x080039ad
 8003894:	0800392b 	.word	0x0800392b
 8003898:	080039ad 	.word	0x080039ad
 800389c:	080039ad 	.word	0x080039ad
 80038a0:	080039ad 	.word	0x080039ad
 80038a4:	0800396b 	.word	0x0800396b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 f9f8 	bl	8003ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699a      	ldr	r2, [r3, #24]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0208 	orr.w	r2, r2, #8
 80038c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0204 	bic.w	r2, r2, #4
 80038d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6999      	ldr	r1, [r3, #24]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	619a      	str	r2, [r3, #24]
      break;
 80038e6:	e064      	b.n	80039b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fa3e 	bl	8003d70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699a      	ldr	r2, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6999      	ldr	r1, [r3, #24]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	021a      	lsls	r2, r3, #8
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	619a      	str	r2, [r3, #24]
      break;
 8003928:	e043      	b.n	80039b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fa89 	bl	8003e48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69da      	ldr	r2, [r3, #28]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0208 	orr.w	r2, r2, #8
 8003944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0204 	bic.w	r2, r2, #4
 8003954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69d9      	ldr	r1, [r3, #28]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	61da      	str	r2, [r3, #28]
      break;
 8003968:	e023      	b.n	80039b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fad3 	bl	8003f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69da      	ldr	r2, [r3, #28]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69d9      	ldr	r1, [r3, #28]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	021a      	lsls	r2, r3, #8
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	61da      	str	r2, [r3, #28]
      break;
 80039aa:	e002      	b.n	80039b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	75fb      	strb	r3, [r7, #23]
      break;
 80039b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_TIM_ConfigClockSource+0x1c>
 80039dc:	2302      	movs	r3, #2
 80039de:	e0b4      	b.n	8003b4a <HAL_TIM_ConfigClockSource+0x186>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a18:	d03e      	beq.n	8003a98 <HAL_TIM_ConfigClockSource+0xd4>
 8003a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1e:	f200 8087 	bhi.w	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
 8003a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a26:	f000 8086 	beq.w	8003b36 <HAL_TIM_ConfigClockSource+0x172>
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2e:	d87f      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
 8003a30:	2b70      	cmp	r3, #112	; 0x70
 8003a32:	d01a      	beq.n	8003a6a <HAL_TIM_ConfigClockSource+0xa6>
 8003a34:	2b70      	cmp	r3, #112	; 0x70
 8003a36:	d87b      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
 8003a38:	2b60      	cmp	r3, #96	; 0x60
 8003a3a:	d050      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x11a>
 8003a3c:	2b60      	cmp	r3, #96	; 0x60
 8003a3e:	d877      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
 8003a40:	2b50      	cmp	r3, #80	; 0x50
 8003a42:	d03c      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0xfa>
 8003a44:	2b50      	cmp	r3, #80	; 0x50
 8003a46:	d873      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
 8003a48:	2b40      	cmp	r3, #64	; 0x40
 8003a4a:	d058      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x13a>
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d86f      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
 8003a50:	2b30      	cmp	r3, #48	; 0x30
 8003a52:	d064      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x15a>
 8003a54:	2b30      	cmp	r3, #48	; 0x30
 8003a56:	d86b      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d060      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x15a>
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d867      	bhi.n	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d05c      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x15a>
 8003a64:	2b10      	cmp	r3, #16
 8003a66:	d05a      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x15a>
 8003a68:	e062      	b.n	8003b30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6899      	ldr	r1, [r3, #8]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f000 fb19 	bl	80040b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	609a      	str	r2, [r3, #8]
      break;
 8003a96:	e04f      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	6899      	ldr	r1, [r3, #8]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f000 fb02 	bl	80040b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aba:	609a      	str	r2, [r3, #8]
      break;
 8003abc:	e03c      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6859      	ldr	r1, [r3, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f000 fa76 	bl	8003fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2150      	movs	r1, #80	; 0x50
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 facf 	bl	800407a <TIM_ITRx_SetConfig>
      break;
 8003adc:	e02c      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f000 fa95 	bl	800401a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2160      	movs	r1, #96	; 0x60
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fabf 	bl	800407a <TIM_ITRx_SetConfig>
      break;
 8003afc:	e01c      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6859      	ldr	r1, [r3, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f000 fa56 	bl	8003fbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2140      	movs	r1, #64	; 0x40
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 faaf 	bl	800407a <TIM_ITRx_SetConfig>
      break;
 8003b1c:	e00c      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4619      	mov	r1, r3
 8003b28:	4610      	mov	r0, r2
 8003b2a:	f000 faa6 	bl	800407a <TIM_ITRx_SetConfig>
      break;
 8003b2e:	e003      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      break;
 8003b34:	e000      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a34      	ldr	r2, [pc, #208]	; (8003c88 <TIM_Base_SetConfig+0xe4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00f      	beq.n	8003bdc <TIM_Base_SetConfig+0x38>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc2:	d00b      	beq.n	8003bdc <TIM_Base_SetConfig+0x38>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a31      	ldr	r2, [pc, #196]	; (8003c8c <TIM_Base_SetConfig+0xe8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d007      	beq.n	8003bdc <TIM_Base_SetConfig+0x38>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a30      	ldr	r2, [pc, #192]	; (8003c90 <TIM_Base_SetConfig+0xec>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d003      	beq.n	8003bdc <TIM_Base_SetConfig+0x38>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a2f      	ldr	r2, [pc, #188]	; (8003c94 <TIM_Base_SetConfig+0xf0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d108      	bne.n	8003bee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a25      	ldr	r2, [pc, #148]	; (8003c88 <TIM_Base_SetConfig+0xe4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01b      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfc:	d017      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a22      	ldr	r2, [pc, #136]	; (8003c8c <TIM_Base_SetConfig+0xe8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <TIM_Base_SetConfig+0xec>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00f      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a20      	ldr	r2, [pc, #128]	; (8003c94 <TIM_Base_SetConfig+0xf0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00b      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1f      	ldr	r2, [pc, #124]	; (8003c98 <TIM_Base_SetConfig+0xf4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <TIM_Base_SetConfig+0xf8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_Base_SetConfig+0x8a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a1d      	ldr	r2, [pc, #116]	; (8003ca0 <TIM_Base_SetConfig+0xfc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d108      	bne.n	8003c40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <TIM_Base_SetConfig+0xe4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d103      	bne.n	8003c74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	615a      	str	r2, [r3, #20]
}
 8003c7a:	bf00      	nop
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40000c00 	.word	0x40000c00
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40014400 	.word	0x40014400
 8003ca0:	40014800 	.word	0x40014800

08003ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	f023 0201 	bic.w	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0303 	bic.w	r3, r3, #3
 8003cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f023 0302 	bic.w	r3, r3, #2
 8003cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a1c      	ldr	r2, [pc, #112]	; (8003d6c <TIM_OC1_SetConfig+0xc8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10c      	bne.n	8003d1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 0308 	bic.w	r3, r3, #8
 8003d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f023 0304 	bic.w	r3, r3, #4
 8003d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <TIM_OC1_SetConfig+0xc8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d111      	bne.n	8003d46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	621a      	str	r2, [r3, #32]
}
 8003d60:	bf00      	nop
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	40010000 	.word	0x40010000

08003d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f023 0210 	bic.w	r2, r3, #16
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f023 0320 	bic.w	r3, r3, #32
 8003dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <TIM_OC2_SetConfig+0xd4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10d      	bne.n	8003dec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a15      	ldr	r2, [pc, #84]	; (8003e44 <TIM_OC2_SetConfig+0xd4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d113      	bne.n	8003e1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40010000 	.word	0x40010000

08003e48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <TIM_OC3_SetConfig+0xd0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d10d      	bne.n	8003ec2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <TIM_OC3_SetConfig+0xd0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d113      	bne.n	8003ef2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	621a      	str	r2, [r3, #32]
}
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40010000 	.word	0x40010000

08003f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	031b      	lsls	r3, r3, #12
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a10      	ldr	r2, [pc, #64]	; (8003fb8 <TIM_OC4_SetConfig+0x9c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d109      	bne.n	8003f90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	019b      	lsls	r3, r3, #6
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	621a      	str	r2, [r3, #32]
}
 8003faa:	bf00      	nop
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40010000 	.word	0x40010000

08003fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	f023 0201 	bic.w	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f023 030a 	bic.w	r3, r3, #10
 8003ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	621a      	str	r2, [r3, #32]
}
 800400e:	bf00      	nop
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800401a:	b480      	push	{r7}
 800401c:	b087      	sub	sp, #28
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f023 0210 	bic.w	r2, r3, #16
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	031b      	lsls	r3, r3, #12
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004056:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004090:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	f043 0307 	orr.w	r3, r3, #7
 800409c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	609a      	str	r2, [r3, #8]
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	021a      	lsls	r2, r3, #8
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	609a      	str	r2, [r3, #8]
}
 80040e4:	bf00      	nop
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f003 031f 	and.w	r3, r3, #31
 8004102:	2201      	movs	r2, #1
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a1a      	ldr	r2, [r3, #32]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	43db      	mvns	r3, r3
 8004112:	401a      	ands	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1a      	ldr	r2, [r3, #32]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	fa01 f303 	lsl.w	r3, r1, r3
 8004128:	431a      	orrs	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	621a      	str	r2, [r3, #32]
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004150:	2302      	movs	r3, #2
 8004152:	e050      	b.n	80041f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a1c      	ldr	r2, [pc, #112]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d018      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a0:	d013      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a18      	ldr	r2, [pc, #96]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00e      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a16      	ldr	r2, [pc, #88]	; (800420c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d009      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a15      	ldr	r2, [pc, #84]	; (8004210 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d004      	beq.n	80041ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a13      	ldr	r2, [pc, #76]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d10c      	bne.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40010000 	.word	0x40010000
 8004208:	40000400 	.word	0x40000400
 800420c:	40000800 	.word	0x40000800
 8004210:	40000c00 	.word	0x40000c00
 8004214:	40014000 	.word	0x40014000

08004218 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004230:	2302      	movs	r3, #2
 8004232:	e03d      	b.n	80042b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e03f      	b.n	8004376 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fc fe4a 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2224      	movs	r2, #36	; 0x24
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004326:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f829 	bl	8004380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800433c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800434c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800435c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004384:	b0c0      	sub	sp, #256	; 0x100
 8004386:	af00      	add	r7, sp, #0
 8004388:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439c:	68d9      	ldr	r1, [r3, #12]
 800439e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	ea40 0301 	orr.w	r3, r0, r1
 80043a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	431a      	orrs	r2, r3
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043d8:	f021 010c 	bic.w	r1, r1, #12
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043e6:	430b      	orrs	r3, r1
 80043e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fa:	6999      	ldr	r1, [r3, #24]
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	ea40 0301 	orr.w	r3, r0, r1
 8004406:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4b8f      	ldr	r3, [pc, #572]	; (800464c <UART_SetConfig+0x2cc>)
 8004410:	429a      	cmp	r2, r3
 8004412:	d005      	beq.n	8004420 <UART_SetConfig+0xa0>
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b8d      	ldr	r3, [pc, #564]	; (8004650 <UART_SetConfig+0x2d0>)
 800441c:	429a      	cmp	r2, r3
 800441e:	d104      	bne.n	800442a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004420:	f7fe fdb2 	bl	8002f88 <HAL_RCC_GetPCLK2Freq>
 8004424:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004428:	e003      	b.n	8004432 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800442a:	f7fe fd99 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 800442e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800443c:	f040 810c 	bne.w	8004658 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004444:	2200      	movs	r2, #0
 8004446:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800444a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800444e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004452:	4622      	mov	r2, r4
 8004454:	462b      	mov	r3, r5
 8004456:	1891      	adds	r1, r2, r2
 8004458:	65b9      	str	r1, [r7, #88]	; 0x58
 800445a:	415b      	adcs	r3, r3
 800445c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800445e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004462:	4621      	mov	r1, r4
 8004464:	eb12 0801 	adds.w	r8, r2, r1
 8004468:	4629      	mov	r1, r5
 800446a:	eb43 0901 	adc.w	r9, r3, r1
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800447a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800447e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004482:	4690      	mov	r8, r2
 8004484:	4699      	mov	r9, r3
 8004486:	4623      	mov	r3, r4
 8004488:	eb18 0303 	adds.w	r3, r8, r3
 800448c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004490:	462b      	mov	r3, r5
 8004492:	eb49 0303 	adc.w	r3, r9, r3
 8004496:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800449a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044ae:	460b      	mov	r3, r1
 80044b0:	18db      	adds	r3, r3, r3
 80044b2:	653b      	str	r3, [r7, #80]	; 0x50
 80044b4:	4613      	mov	r3, r2
 80044b6:	eb42 0303 	adc.w	r3, r2, r3
 80044ba:	657b      	str	r3, [r7, #84]	; 0x54
 80044bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044c4:	f7fb fe88 	bl	80001d8 <__aeabi_uldivmod>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4b61      	ldr	r3, [pc, #388]	; (8004654 <UART_SetConfig+0x2d4>)
 80044ce:	fba3 2302 	umull	r2, r3, r3, r2
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	011c      	lsls	r4, r3, #4
 80044d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044da:	2200      	movs	r2, #0
 80044dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044e8:	4642      	mov	r2, r8
 80044ea:	464b      	mov	r3, r9
 80044ec:	1891      	adds	r1, r2, r2
 80044ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80044f0:	415b      	adcs	r3, r3
 80044f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044f8:	4641      	mov	r1, r8
 80044fa:	eb12 0a01 	adds.w	sl, r2, r1
 80044fe:	4649      	mov	r1, r9
 8004500:	eb43 0b01 	adc.w	fp, r3, r1
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004510:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004514:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004518:	4692      	mov	sl, r2
 800451a:	469b      	mov	fp, r3
 800451c:	4643      	mov	r3, r8
 800451e:	eb1a 0303 	adds.w	r3, sl, r3
 8004522:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004526:	464b      	mov	r3, r9
 8004528:	eb4b 0303 	adc.w	r3, fp, r3
 800452c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800453c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004540:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004544:	460b      	mov	r3, r1
 8004546:	18db      	adds	r3, r3, r3
 8004548:	643b      	str	r3, [r7, #64]	; 0x40
 800454a:	4613      	mov	r3, r2
 800454c:	eb42 0303 	adc.w	r3, r2, r3
 8004550:	647b      	str	r3, [r7, #68]	; 0x44
 8004552:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004556:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800455a:	f7fb fe3d 	bl	80001d8 <__aeabi_uldivmod>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4611      	mov	r1, r2
 8004564:	4b3b      	ldr	r3, [pc, #236]	; (8004654 <UART_SetConfig+0x2d4>)
 8004566:	fba3 2301 	umull	r2, r3, r3, r1
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	2264      	movs	r2, #100	; 0x64
 800456e:	fb02 f303 	mul.w	r3, r2, r3
 8004572:	1acb      	subs	r3, r1, r3
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800457a:	4b36      	ldr	r3, [pc, #216]	; (8004654 <UART_SetConfig+0x2d4>)
 800457c:	fba3 2302 	umull	r2, r3, r3, r2
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004588:	441c      	add	r4, r3
 800458a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800458e:	2200      	movs	r2, #0
 8004590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004594:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004598:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800459c:	4642      	mov	r2, r8
 800459e:	464b      	mov	r3, r9
 80045a0:	1891      	adds	r1, r2, r2
 80045a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80045a4:	415b      	adcs	r3, r3
 80045a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045ac:	4641      	mov	r1, r8
 80045ae:	1851      	adds	r1, r2, r1
 80045b0:	6339      	str	r1, [r7, #48]	; 0x30
 80045b2:	4649      	mov	r1, r9
 80045b4:	414b      	adcs	r3, r1
 80045b6:	637b      	str	r3, [r7, #52]	; 0x34
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045c4:	4659      	mov	r1, fp
 80045c6:	00cb      	lsls	r3, r1, #3
 80045c8:	4651      	mov	r1, sl
 80045ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ce:	4651      	mov	r1, sl
 80045d0:	00ca      	lsls	r2, r1, #3
 80045d2:	4610      	mov	r0, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	4603      	mov	r3, r0
 80045d8:	4642      	mov	r2, r8
 80045da:	189b      	adds	r3, r3, r2
 80045dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045e0:	464b      	mov	r3, r9
 80045e2:	460a      	mov	r2, r1
 80045e4:	eb42 0303 	adc.w	r3, r2, r3
 80045e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004600:	460b      	mov	r3, r1
 8004602:	18db      	adds	r3, r3, r3
 8004604:	62bb      	str	r3, [r7, #40]	; 0x28
 8004606:	4613      	mov	r3, r2
 8004608:	eb42 0303 	adc.w	r3, r2, r3
 800460c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800460e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004612:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004616:	f7fb fddf 	bl	80001d8 <__aeabi_uldivmod>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <UART_SetConfig+0x2d4>)
 8004620:	fba3 1302 	umull	r1, r3, r3, r2
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	2164      	movs	r1, #100	; 0x64
 8004628:	fb01 f303 	mul.w	r3, r1, r3
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	3332      	adds	r3, #50	; 0x32
 8004632:	4a08      	ldr	r2, [pc, #32]	; (8004654 <UART_SetConfig+0x2d4>)
 8004634:	fba2 2303 	umull	r2, r3, r2, r3
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	f003 0207 	and.w	r2, r3, #7
 800463e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4422      	add	r2, r4
 8004646:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004648:	e105      	b.n	8004856 <UART_SetConfig+0x4d6>
 800464a:	bf00      	nop
 800464c:	40011000 	.word	0x40011000
 8004650:	40011400 	.word	0x40011400
 8004654:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800465c:	2200      	movs	r2, #0
 800465e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004662:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004666:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800466a:	4642      	mov	r2, r8
 800466c:	464b      	mov	r3, r9
 800466e:	1891      	adds	r1, r2, r2
 8004670:	6239      	str	r1, [r7, #32]
 8004672:	415b      	adcs	r3, r3
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
 8004676:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800467a:	4641      	mov	r1, r8
 800467c:	1854      	adds	r4, r2, r1
 800467e:	4649      	mov	r1, r9
 8004680:	eb43 0501 	adc.w	r5, r3, r1
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	00eb      	lsls	r3, r5, #3
 800468e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004692:	00e2      	lsls	r2, r4, #3
 8004694:	4614      	mov	r4, r2
 8004696:	461d      	mov	r5, r3
 8004698:	4643      	mov	r3, r8
 800469a:	18e3      	adds	r3, r4, r3
 800469c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046a0:	464b      	mov	r3, r9
 80046a2:	eb45 0303 	adc.w	r3, r5, r3
 80046a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046c6:	4629      	mov	r1, r5
 80046c8:	008b      	lsls	r3, r1, #2
 80046ca:	4621      	mov	r1, r4
 80046cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d0:	4621      	mov	r1, r4
 80046d2:	008a      	lsls	r2, r1, #2
 80046d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046d8:	f7fb fd7e 	bl	80001d8 <__aeabi_uldivmod>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4b60      	ldr	r3, [pc, #384]	; (8004864 <UART_SetConfig+0x4e4>)
 80046e2:	fba3 2302 	umull	r2, r3, r3, r2
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	011c      	lsls	r4, r3, #4
 80046ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ee:	2200      	movs	r2, #0
 80046f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046fc:	4642      	mov	r2, r8
 80046fe:	464b      	mov	r3, r9
 8004700:	1891      	adds	r1, r2, r2
 8004702:	61b9      	str	r1, [r7, #24]
 8004704:	415b      	adcs	r3, r3
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800470c:	4641      	mov	r1, r8
 800470e:	1851      	adds	r1, r2, r1
 8004710:	6139      	str	r1, [r7, #16]
 8004712:	4649      	mov	r1, r9
 8004714:	414b      	adcs	r3, r1
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004724:	4659      	mov	r1, fp
 8004726:	00cb      	lsls	r3, r1, #3
 8004728:	4651      	mov	r1, sl
 800472a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800472e:	4651      	mov	r1, sl
 8004730:	00ca      	lsls	r2, r1, #3
 8004732:	4610      	mov	r0, r2
 8004734:	4619      	mov	r1, r3
 8004736:	4603      	mov	r3, r0
 8004738:	4642      	mov	r2, r8
 800473a:	189b      	adds	r3, r3, r2
 800473c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004740:	464b      	mov	r3, r9
 8004742:	460a      	mov	r2, r1
 8004744:	eb42 0303 	adc.w	r3, r2, r3
 8004748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	67bb      	str	r3, [r7, #120]	; 0x78
 8004756:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004764:	4649      	mov	r1, r9
 8004766:	008b      	lsls	r3, r1, #2
 8004768:	4641      	mov	r1, r8
 800476a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800476e:	4641      	mov	r1, r8
 8004770:	008a      	lsls	r2, r1, #2
 8004772:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004776:	f7fb fd2f 	bl	80001d8 <__aeabi_uldivmod>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4b39      	ldr	r3, [pc, #228]	; (8004864 <UART_SetConfig+0x4e4>)
 8004780:	fba3 1302 	umull	r1, r3, r3, r2
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	2164      	movs	r1, #100	; 0x64
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	3332      	adds	r3, #50	; 0x32
 8004792:	4a34      	ldr	r2, [pc, #208]	; (8004864 <UART_SetConfig+0x4e4>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800479e:	441c      	add	r4, r3
 80047a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a4:	2200      	movs	r2, #0
 80047a6:	673b      	str	r3, [r7, #112]	; 0x70
 80047a8:	677a      	str	r2, [r7, #116]	; 0x74
 80047aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047ae:	4642      	mov	r2, r8
 80047b0:	464b      	mov	r3, r9
 80047b2:	1891      	adds	r1, r2, r2
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	415b      	adcs	r3, r3
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047be:	4641      	mov	r1, r8
 80047c0:	1851      	adds	r1, r2, r1
 80047c2:	6039      	str	r1, [r7, #0]
 80047c4:	4649      	mov	r1, r9
 80047c6:	414b      	adcs	r3, r1
 80047c8:	607b      	str	r3, [r7, #4]
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047d6:	4659      	mov	r1, fp
 80047d8:	00cb      	lsls	r3, r1, #3
 80047da:	4651      	mov	r1, sl
 80047dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047e0:	4651      	mov	r1, sl
 80047e2:	00ca      	lsls	r2, r1, #3
 80047e4:	4610      	mov	r0, r2
 80047e6:	4619      	mov	r1, r3
 80047e8:	4603      	mov	r3, r0
 80047ea:	4642      	mov	r2, r8
 80047ec:	189b      	adds	r3, r3, r2
 80047ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80047f0:	464b      	mov	r3, r9
 80047f2:	460a      	mov	r2, r1
 80047f4:	eb42 0303 	adc.w	r3, r2, r3
 80047f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	663b      	str	r3, [r7, #96]	; 0x60
 8004804:	667a      	str	r2, [r7, #100]	; 0x64
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004812:	4649      	mov	r1, r9
 8004814:	008b      	lsls	r3, r1, #2
 8004816:	4641      	mov	r1, r8
 8004818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800481c:	4641      	mov	r1, r8
 800481e:	008a      	lsls	r2, r1, #2
 8004820:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004824:	f7fb fcd8 	bl	80001d8 <__aeabi_uldivmod>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <UART_SetConfig+0x4e4>)
 800482e:	fba3 1302 	umull	r1, r3, r3, r2
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	2164      	movs	r1, #100	; 0x64
 8004836:	fb01 f303 	mul.w	r3, r1, r3
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	3332      	adds	r3, #50	; 0x32
 8004840:	4a08      	ldr	r2, [pc, #32]	; (8004864 <UART_SetConfig+0x4e4>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	f003 020f 	and.w	r2, r3, #15
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4422      	add	r2, r4
 8004854:	609a      	str	r2, [r3, #8]
}
 8004856:	bf00      	nop
 8004858:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800485c:	46bd      	mov	sp, r7
 800485e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004862:	bf00      	nop
 8004864:	51eb851f 	.word	0x51eb851f

08004868 <__libc_init_array>:
 8004868:	b570      	push	{r4, r5, r6, lr}
 800486a:	4d0d      	ldr	r5, [pc, #52]	; (80048a0 <__libc_init_array+0x38>)
 800486c:	4c0d      	ldr	r4, [pc, #52]	; (80048a4 <__libc_init_array+0x3c>)
 800486e:	1b64      	subs	r4, r4, r5
 8004870:	10a4      	asrs	r4, r4, #2
 8004872:	2600      	movs	r6, #0
 8004874:	42a6      	cmp	r6, r4
 8004876:	d109      	bne.n	800488c <__libc_init_array+0x24>
 8004878:	4d0b      	ldr	r5, [pc, #44]	; (80048a8 <__libc_init_array+0x40>)
 800487a:	4c0c      	ldr	r4, [pc, #48]	; (80048ac <__libc_init_array+0x44>)
 800487c:	f000 f820 	bl	80048c0 <_init>
 8004880:	1b64      	subs	r4, r4, r5
 8004882:	10a4      	asrs	r4, r4, #2
 8004884:	2600      	movs	r6, #0
 8004886:	42a6      	cmp	r6, r4
 8004888:	d105      	bne.n	8004896 <__libc_init_array+0x2e>
 800488a:	bd70      	pop	{r4, r5, r6, pc}
 800488c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004890:	4798      	blx	r3
 8004892:	3601      	adds	r6, #1
 8004894:	e7ee      	b.n	8004874 <__libc_init_array+0xc>
 8004896:	f855 3b04 	ldr.w	r3, [r5], #4
 800489a:	4798      	blx	r3
 800489c:	3601      	adds	r6, #1
 800489e:	e7f2      	b.n	8004886 <__libc_init_array+0x1e>
 80048a0:	08004900 	.word	0x08004900
 80048a4:	08004900 	.word	0x08004900
 80048a8:	08004900 	.word	0x08004900
 80048ac:	08004904 	.word	0x08004904

080048b0 <memset>:
 80048b0:	4402      	add	r2, r0
 80048b2:	4603      	mov	r3, r0
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d100      	bne.n	80048ba <memset+0xa>
 80048b8:	4770      	bx	lr
 80048ba:	f803 1b01 	strb.w	r1, [r3], #1
 80048be:	e7f9      	b.n	80048b4 <memset+0x4>

080048c0 <_init>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	bf00      	nop
 80048c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c6:	bc08      	pop	{r3}
 80048c8:	469e      	mov	lr, r3
 80048ca:	4770      	bx	lr

080048cc <_fini>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	bf00      	nop
 80048d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d2:	bc08      	pop	{r3}
 80048d4:	469e      	mov	lr, r3
 80048d6:	4770      	bx	lr
